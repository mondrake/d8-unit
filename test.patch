diff --git a/composer.lock b/composer.lock
index bb5244b40b..5b6777f9a7 100644
--- a/composer.lock
+++ b/composer.lock
@@ -452,7 +452,7 @@
             "dist": {
                 "type": "path",
                 "url": "core",
-                "reference": "34bfd0597745e88afb64bf5294f6af4975930fdc"
+                "reference": "25a2835ba98c19a6fa4d60089d813a81de36e5e5"
             },
             "require": {
                 "asm89/stack-cors": "^1.1",
@@ -670,7 +670,6 @@
                     "lib/Drupal/Core/Cache/DatabaseCacheTagsChecksum.php",
                     "lib/Drupal/Core/Database/Connection.php",
                     "lib/Drupal/Core/Database/Database.php",
-                    "lib/Drupal/Core/Database/Statement.php",
                     "lib/Drupal/Core/Database/StatementInterface.php",
                     "lib/Drupal/Core/DependencyInjection/Container.php",
                     "lib/Drupal/Core/DrupalKernel.php",
diff --git a/core/composer.json b/core/composer.json
index 71b0f6a7ca..64078e9d8a 100644
--- a/core/composer.json
+++ b/core/composer.json
@@ -172,8 +172,7 @@
     "autoload": {
         "psr-4": {
             "Drupal\\Core\\": "lib/Drupal/Core",
-            "Drupal\\Component\\": "lib/Drupal/Component",
-            "Drupal\\Driver\\": "../drivers/lib/Drupal/Driver"
+            "Drupal\\Component\\": "lib/Drupal/Component"
         },
         "classmap": [
             "lib/Drupal.php",
@@ -191,7 +190,6 @@
             "lib/Drupal/Core/Cache/DatabaseCacheTagsChecksum.php",
             "lib/Drupal/Core/Database/Connection.php",
             "lib/Drupal/Core/Database/Database.php",
-            "lib/Drupal/Core/Database/Statement.php",
             "lib/Drupal/Core/Database/StatementInterface.php",
             "lib/Drupal/Core/DependencyInjection/Container.php",
             "lib/Drupal/Core/DrupalKernel.php",
diff --git a/core/includes/install.core.inc b/core/includes/install.core.inc
index fe8be45263..da079458ab 100644
--- a/core/includes/install.core.inc
+++ b/core/includes/install.core.inc
@@ -370,8 +370,7 @@ function install_begin_request($class_loader, &$install_state) {
     ->addArgument(Settings::getInstance())
     ->addArgument((new LoggerChannelFactory())->get('file'));
 
-  // Register the class loader so contrib and custom database drivers can be
-  // autoloaded.
+  // Register the class loader so drivers can be autoloaded.
   // @see drupal_get_database_types()
   $container->set('class_loader', $class_loader);
 
@@ -1209,8 +1208,8 @@ function install_database_errors($database, $settings_file) {
     // Run tasks associated with the database type. Any errors are caught in the
     // calling function.
     Database::addConnectionInfo('default', 'default', $database);
-
-    $errors = db_installer_object($driver, $database['namespace'] ?? NULL)->runTasks();
+    $installer_class = $database['namespace'] . "\\Install\\Tasks";
+    $errors = (new $installer_class())->runTasks();
   }
   return $errors;
 }
diff --git a/core/includes/install.inc b/core/includes/install.inc
index f85499042f..71ae504372 100644
--- a/core/includes/install.inc
+++ b/core/includes/install.inc
@@ -171,23 +171,9 @@ function drupal_get_database_types() {
   // The internal database driver name is any valid PHP identifier.
   $mask = ExtensionDiscovery::PHP_FUNCTION_PATTERN;
 
-  // Find drivers in the Drupal\Driver namespace.
-  // @todo remove discovering in the Drupal\Driver namespace in D10.
+  // Find drivers in Drupal module namespaces.
   /** @var \Drupal\Core\File\FileSystemInterface $file_system */
   $file_system = \Drupal::service('file_system');
-  $files = [];
-  if (is_dir(DRUPAL_ROOT . '/drivers/lib/Drupal/Driver/Database')) {
-    $files = $file_system->scanDirectory(DRUPAL_ROOT . '/drivers/lib/Drupal/Driver/Database/', $mask, ['recurse' => FALSE]);
-  }
-  foreach ($files as $file) {
-    if (file_exists($file->uri . '/Install/Tasks.php')) {
-      // The namespace doesn't need to be added here, because
-      // db_installer_object() will find it.
-      $drivers[$file->filename] = NULL;
-    }
-  }
-
-  // Find drivers in Drupal module namespaces.
   /** @var \Composer\Autoload\ClassLoader $class_loader */
   $class_loader = \Drupal::service('class_loader');
   // We cannot use the file cache because it does not always exist.
@@ -202,8 +188,7 @@ function drupal_get_database_types() {
         if (file_exists($tasks_file)) {
           $namespace = 'Drupal\\' . $module->getName() . '\\Driver\\Database\\' . $driver_file->filename;
 
-          // The namespace needs to be added for db_installer_object() to find
-          // it.
+          // Add the driver with its own classes' namespace.
           $drivers[$driver_file->filename] = $namespace;
 
           // The directory needs to be added to the autoloader, because this is
@@ -217,7 +202,8 @@ function drupal_get_database_types() {
   }
 
   foreach ($drivers as $driver => $namespace) {
-    $installer = db_installer_object($driver, $namespace);
+    $installer_class = $namespace . "\\Install\\Tasks";
+    $installer = new $installer_class();
     if ($installer->installable()) {
       $databases[$driver] = $installer;
     }
@@ -621,9 +607,7 @@ function drupal_install_system($install_state) {
     ->set('profile', $install_state['parameters']['profile'])
     ->save();
 
-  $connection = Database::getConnection();
-  $provider = $connection->getProvider();
-  // When the database driver is provided by a module, then install that module.
+  // Install the module that is providing the database driver.
   // This module must be installed before any other module, as it must be able
   // to override any call to hook_schema() or any "backend_overridable" service.
   // In edge cases, a driver module may extend from another driver module (for
@@ -631,12 +615,8 @@ function drupal_install_system($install_state) {
   // version no longer supported by core). In order for the extended classes to
   // be autoloadable, the extending module should list the extended module in
   // its dependencies, and here the dependencies will be installed as well.
-  if ($provider !== 'core') {
-    $autoload = $connection->getConnectionOptions()['autoload'] ?? '';
-    if (($pos = strpos($autoload, 'src/Driver/Database/')) !== FALSE) {
-      $kernel->getContainer()->get('module_installer')->install([$provider], TRUE);
-    }
-  }
+  $provider = Database::getConnection()->getProvider();
+  $kernel->getContainer()->get('module_installer')->install([$provider], TRUE);
 
   // Install System module.
   $kernel->getContainer()->get('module_installer')->install(['system'], FALSE);
@@ -1167,10 +1147,15 @@ function install_profile_info($profile, $langcode = 'en') {
  * @return \Drupal\Core\Database\Install\Tasks
  *   A class defining the requirements and tasks for installing the database.
  *
+ * @deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no
+ *   replacement.
+ *
+ * @see https://www.drupal.org/node/1234567
  * @see drupal_get_database_types()
  * @see \Drupal\Core\Site\Settings::initialize()
  */
 function db_installer_object($driver, $namespace = NULL) {
+  @trigger_error('db_installer_object() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/1234567', E_USER_DEPRECATED);
   // We cannot use Database::getConnection->getDriverClass() here, because
   // the connection object is not yet functional.
   if ($namespace) {
diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index cea7fc4028..535822ebb3 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -70,19 +70,6 @@ abstract class Connection {
    */
   protected $driverClasses = [];
 
-  /**
-   * The name of the Statement class for this connection.
-   *
-   * @var string|null
-   *
-   * @deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Database
-   *   drivers should use or extend StatementWrapper instead, and encapsulate
-   *   client-level statement objects.
-   *
-   * @see https://www.drupal.org/node/3177488
-   */
-  protected $statementClass = 'Drupal\Core\Database\Statement';
-
   /**
    * The name of the StatementWrapper class for this connection.
    *
@@ -99,18 +86,6 @@ abstract class Connection {
    */
   protected $transactionalDDLSupport = FALSE;
 
-  /**
-   * An index used to generate unique temporary table names.
-   *
-   * @var int
-   *
-   * @deprecated in drupal:9.3.0 and is removed from drupal:10.0.0. There is no
-   *   replacement.
-   *
-   * @see https://www.drupal.org/node/3211781
-   */
-  protected $temporaryNameIndex = 0;
-
   /**
    * The actual PDO connection.
    *
@@ -162,19 +137,6 @@ abstract class Connection {
    */
   protected $unprefixedTablesMap = [];
 
-  /**
-   * List of escaped database, table, and field names, keyed by unescaped names.
-   *
-   * @var array
-   *
-   * @deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. This is no
-   *   longer used. Use \Drupal\Core\Database\Connection::$escapedTables or
-   *   \Drupal\Core\Database\Connection::$escapedFields instead.
-   *
-   * @see https://www.drupal.org/node/2986894
-   */
-  protected $escapedNames = [];
-
   /**
    * List of escaped table names, keyed by unescaped names.
    *
@@ -231,19 +193,8 @@ abstract class Connection {
    *   per-table prefixes, but it is meant for internal use only.
    */
   public function __construct(\PDO $connection, array $connection_options) {
-    if ($this->identifierQuotes === NULL) {
-      @trigger_error('In drupal:10.0.0 not setting the $identifierQuotes property in the concrete Connection class will result in an RuntimeException. See https://www.drupal.org/node/2986894', E_USER_DEPRECATED);
-      $this->identifierQuotes = ['', ''];
-    }
-
     assert(count($this->identifierQuotes) === 2 && Inspector::assertAllStrings($this->identifierQuotes), '\Drupal\Core\Database\Connection::$identifierQuotes must contain 2 string values');
 
-    // The 'transactions' option is deprecated.
-    if (isset($connection_options['transactions'])) {
-      @trigger_error('Passing a \'transactions\' connection option to ' . __METHOD__ . ' is deprecated in drupal:9.1.0 and is removed in drupal:10.0.0. All database drivers must support transactions. See https://www.drupal.org/node/2278745', E_USER_DEPRECATED);
-      unset($connection_options['transactions']);
-    }
-
     // Manage the table prefix.
     if (isset($connection_options['prefix']) && is_array($connection_options['prefix'])) {
       if (count($connection_options['prefix']) > 1) {
@@ -285,19 +236,6 @@ public function __construct(\PDO $connection, array $connection_options) {
       $connection_options['namespace'] = (new \ReflectionObject($this))->getNamespaceName();
     }
 
-    // The support for database drivers where the namespace that starts with
-    // Drupal\\Driver\\Database\\ is deprecated.
-    if (strpos($connection_options['namespace'], 'Drupal\Driver\Database') === 0) {
-      @trigger_error('Support for database drivers located in the "drivers/lib/Drupal/Driver/Database" directory is deprecated in drupal:9.1.0 and is removed in drupal:10.0.0. Contributed and custom database drivers should be provided by modules and use the namespace "Drupal\MODULE_NAME\Driver\Database\DRIVER_NAME". See https://www.drupal.org/node/3123251', E_USER_DEPRECATED);
-    }
-
-    // Set a Statement class, unless the driver opted out.
-    // @todo remove this in Drupal 10 https://www.drupal.org/node/3177490
-    if (!empty($this->statementClass)) {
-      @trigger_error('\Drupal\Core\Database\Connection::$statementClass is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Database drivers should use or extend StatementWrapper instead, and encapsulate client-level statement objects. See https://www.drupal.org/node/3177488', E_USER_DEPRECATED);
-      $connection->setAttribute(\PDO::ATTR_STATEMENT_CLASS, [$this->statementClass, [$this]]);
-    }
-
     $this->connection = $connection;
     $this->connectionOptions = $connection_options;
   }
@@ -313,43 +251,10 @@ public function __construct(\PDO $connection, array $connection_options) {
    */
   public static function open(array &$connection_options = []) {}
 
-  /**
-   * Destroys this Connection object.
-   *
-   * PHP does not destruct an object if it is still referenced in other
-   * variables. In case of PDO database connection objects, PHP only closes the
-   * connection when the PDO object is destructed, so any references to this
-   * object may cause the number of maximum allowed connections to be exceeded.
-   *
-   * @deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Move custom
-   *   database destruction logic to __destruct().
-   *
-   * @see https://www.drupal.org/node/3142866
-   */
-  public function destroy() {
-    $backtrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 2);
-    if ($backtrace[1]['class'] !== self::class && $backtrace[1]['function'] !== '__destruct') {
-      @trigger_error(__METHOD__ . '() is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Move custom database destruction logic to __destruct(). See https://www.drupal.org/node/3142866', E_USER_DEPRECATED);
-      // Destroy all references to this connection by setting them to NULL.
-      // The Statement class attribute only accepts a new value that presents a
-      // proper callable, so we reset it to PDOStatement.
-      // @todo remove this in Drupal 10 https://www.drupal.org/node/3177490
-      if (!empty($this->statementClass)) {
-        $this->connection->setAttribute(\PDO::ATTR_STATEMENT_CLASS, ['PDOStatement', []]);
-      }
-      $this->schema = NULL;
-    }
-  }
-
   /**
    * Ensures that the PDO connection can be garbage collected.
    */
   public function __destruct() {
-    // Call the ::destroy method to provide a BC layer.
-    // @todo https://www.drupal.org/project/drupal/issues/3153864 Remove this
-    //   call in Drupal 10 as the logic in the destroy() method is no longer
-    //   required now we implement a proper destructor.
-    $this->destroy();
     // Ensure that the circular reference caused by Connection::__construct()
     // using $this in the call to set the statement class can be garbage
     // collected.
@@ -386,11 +291,6 @@ public function __destruct() {
    *   - Database::RETURN_NULL: Do not return anything, as there is no
    *     meaningful value to return. That is the case for INSERT queries on
    *     tables that do not contain a serial column.
-   * - throw_exception: (deprecated) By default, the database system will catch
-   *   any errors on a query as an Exception, log it, and then rethrow it so
-   *   that code further up the call chain can take an appropriate action. To
-   *   suppress that behavior and simply return NULL on failure, set this
-   *   option to FALSE.
    * - allow_delimiter_in_query: By default, queries which have the ; delimiter
    *   any place in them will cause an exception. This reduces the chance of SQL
    *   injection attacks that terminate the original query and add one or more
@@ -621,24 +521,11 @@ public function prepareStatement(string $query, array $options, bool $allow_row_
 
     try {
       $query = $this->preprocessStatement($query, $options);
-
-      // @todo in Drupal 10, only return the StatementWrapper.
-      // @see https://www.drupal.org/node/3177490
-      $statement = $this->statementWrapperClass ?
-        new $this->statementWrapperClass($this, $this->connection, $query, $options['pdo'] ?? [], $allow_row_count) :
-        $this->connection->prepare($query, $options['pdo'] ?? []);
+      return new $this->statementWrapperClass($this, $this->connection, $query, $options['pdo'] ?? [], $allow_row_count);
     }
     catch (\Exception $e) {
       $this->exceptionHandler()->handleStatementException($e, $query, $options);
     }
-    // BC layer: $options['throw_exception'] = FALSE or a \PDO::prepare() call
-    // returning false would lead to returning a value that fails the return
-    // typehint. Throw an exception in that case.
-    // @todo in Drupal 10, remove the check.
-    if (!isset($statement) || !$statement instanceof StatementInterface) {
-      throw new DatabaseExceptionWrapper("Statement preparation failure for query: $query");
-    }
-    return $statement;
   }
 
   /**
@@ -687,33 +574,6 @@ protected function preprocessStatement(string $query, array $options): string {
     return $query;
   }
 
-  /**
-   * Prepares a query string and returns the prepared statement.
-   *
-   * This method caches prepared statements, reusing them when possible. It also
-   * prefixes tables names enclosed in curly-braces and, optionally, quotes
-   * identifiers enclosed in square brackets.
-   *
-   * @param $query
-   *   The query string as SQL, with curly-braces surrounding the
-   *   table names.
-   * @param bool $quote_identifiers
-   *   (optional) Quote any identifiers enclosed in square brackets. Defaults to
-   *   TRUE.
-   *
-   * @return \Drupal\Core\Database\StatementInterface
-   *   A PDO prepared statement ready for its execute() method.
-   *
-   * @deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Use
-   *   ::prepareStatement instead.
-   *
-   * @see https://www.drupal.org/node/3137786
-   */
-  public function prepareQuery($query, $quote_identifiers = TRUE) {
-    @trigger_error('Connection::prepareQuery() is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Use ::prepareStatement() instead. See https://www.drupal.org/node/3137786', E_USER_DEPRECATED);
-    return $this->prepareStatement($query, ['allow_square_brackets' => !$quote_identifiers]);
-  }
-
   /**
    * Tells this connection object what its target value is.
    *
@@ -880,13 +740,6 @@ protected function filterComment($comment = '') {
    * @param string|\Drupal\Core\Database\StatementInterface|\PDOStatement $query
    *   The query to execute. This is a string containing an SQL query with
    *   placeholders.
-   *   (deprecated) An already-prepared instance of StatementInterface or of
-   *   \PDOStatement may also be passed in order to allow calling code to
-   *   manually bind variables to a query. In such cases, the content of the
-   *   $args array will be ignored.
-   *   It is extremely rare that module code will need to pass a statement
-   *   object to this method. It is used primarily for database drivers for
-   *   databases that require special LOB field handling.
    * @param array $args
    *   The associative array of arguments for the prepared statement.
    * @param array $options
@@ -924,32 +777,11 @@ public function query($query, array $args = [], $options = []) {
 
     assert(!isset($options['target']), 'Passing "target" option to query() has no effect. See https://www.drupal.org/node/2993033');
 
-    // We allow either a pre-bound statement object (deprecated) or a literal
-    // string. In either case, we want to end up with an executed statement
-    // object, which we pass to StatementInterface::execute.
-    if (is_string($query)) {
-      $this->expandArguments($query, $args);
-      $stmt = $this->prepareStatement($query, $options);
-    }
-    elseif ($query instanceof StatementInterface) {
-      @trigger_error('Passing a StatementInterface object as a $query argument to ' . __METHOD__ . ' is deprecated in drupal:9.2.0 and is removed in drupal:10.0.0. Call the execute method from the StatementInterface object directly instead. See https://www.drupal.org/node/3154439', E_USER_DEPRECATED);
-      $stmt = $query;
-    }
-    elseif ($query instanceof \PDOStatement) {
-      @trigger_error('Passing a \\PDOStatement object as a $query argument to ' . __METHOD__ . ' is deprecated in drupal:9.2.0 and is removed in drupal:10.0.0. Call the execute method from the StatementInterface object directly instead. See https://www.drupal.org/node/3154439', E_USER_DEPRECATED);
-      $stmt = $query;
-    }
+    $this->expandArguments($query, $args);
+    $stmt = $this->prepareStatement($query, $options);
 
     try {
-      if (is_string($query)) {
-        $stmt->execute($args, $options);
-      }
-      elseif ($query instanceof StatementInterface) {
-        $stmt->execute(NULL, $options);
-      }
-      elseif ($query instanceof \PDOStatement) {
-        $stmt->execute();
-      }
+      $stmt->execute($args, $options);
 
       // Depending on the type of query we may need to return a different value.
       // See DatabaseConnection::defaultOptions() for a description of each
@@ -978,76 +810,10 @@ public function query($query, array $args = [], $options = []) {
       }
     }
     catch (\Exception $e) {
-      // Most database drivers will return NULL here, but some of them
-      // (e.g. the SQLite driver) may need to re-run the query, so the return
-      // value will be the same as for static::query().
-      if (is_string($query)) {
-        return $this->exceptionHandler()->handleExecutionException($e, $stmt, $args, $options);
-      }
-      else {
-        return $this->handleQueryException($e, $query, $args, $options);
-      }
+      $this->exceptionHandler()->handleExecutionException($e, $stmt, $args, $options);
     }
   }
 
-  /**
-   * Wraps and re-throws any PDO exception thrown by static::query().
-   *
-   * @param \PDOException $e
-   *   The exception thrown by static::query().
-   * @param $query
-   *   The query executed by static::query().
-   * @param array $args
-   *   An array of arguments for the prepared statement.
-   * @param array $options
-   *   An associative array of options to control how the query is run.
-   *
-   * @return \Drupal\Core\Database\StatementInterface|int|null
-   *   Most database drivers will return NULL when a PDO exception is thrown for
-   *   a query, but some of them may need to re-run the query, so they can also
-   *   return a \Drupal\Core\Database\StatementInterface object or an integer.
-   *
-   * @throws \Drupal\Core\Database\DatabaseExceptionWrapper
-   * @throws \Drupal\Core\Database\IntegrityConstraintViolationException
-   *
-   * @deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Get a
-   *   handler through $this->exceptionHandler() instead, and use one of its
-   *   methods.
-   *
-   * @see https://www.drupal.org/node/3187222
-   */
-  protected function handleQueryException(\PDOException $e, $query, array $args = [], $options = []) {
-    @trigger_error('Connection::handleQueryException() is deprecated in drupal:9.2.0 and is removed in drupal:10.0.0. Get a handler through $this->exceptionHandler() instead, and use one of its methods. See https://www.drupal.org/node/3187222', E_USER_DEPRECATED);
-    if ($options['throw_exception'] ?? TRUE) {
-      // Wrap the exception in another exception, because PHP does not allow
-      // overriding Exception::getMessage(). Its message is the extra database
-      // debug information.
-      // @todo in Drupal 10, remove checking if $query is a statement object.
-      // @see https://www.drupal.org/node/3154439
-      if ($query instanceof StatementInterface) {
-        $query_string = $query->getQueryString();
-      }
-      elseif ($query instanceof \PDOStatement) {
-        $query_string = $query->queryString;
-      }
-      else {
-        $query_string = $query;
-      }
-      $message = $e->getMessage() . ": " . $query_string . "; " . print_r($args, TRUE);
-      // Match all SQLSTATE 23xxx errors.
-      if (substr($e->getCode(), -6, -3) == '23') {
-        $exception = new IntegrityConstraintViolationException($message, $e->getCode(), $e);
-      }
-      else {
-        $exception = new DatabaseExceptionWrapper($message, 0, $e);
-      }
-
-      throw $exception;
-    }
-
-    return NULL;
-  }
-
   /**
    * Expands out shorthand placeholders.
    *
@@ -1212,10 +978,13 @@ public function exceptionHandler() {
    *   driver.
    *
    * @see \Drupal\Core\Database\Query\Select
+   *
+   * @throws \InvalidArgumentException
+   *   If the $alias argument is not a string or NULL.
    */
   public function select($table, $alias = NULL, array $options = []) {
     if (!is_null($alias) && !is_string($alias)) {
-      @trigger_error('Passing a non-string \'alias\' argument to ' . __METHOD__ . '() is deprecated in drupal:9.3.0 and will be required in drupal:10.0.0. Refactor your calling code. See https://www.drupal.org/project/drupal/issues/3216552', E_USER_DEPRECATED);
+      throw new \InvalidArgumentException('The \'$alias\' argument to ' . __METHOD__ . '() must be a string or NULL');
     }
     $class = $this->getDriverClass('Select');
     return new $class($this, $table, $alias, $options);
@@ -1404,7 +1173,7 @@ public function condition($conjunction) {
     // Creating an instance of the class Drupal\Core\Database\Query\Condition
     // should only be created from the database layer. This will allow database
     // drivers to override the default Condition class.
-    return new $class($conjunction, FALSE);
+    return new $class($conjunction);
   }
 
   /**
@@ -1776,54 +1545,6 @@ protected function doCommit() {
    */
   abstract public function queryRange($query, $from, $count, array $args = [], array $options = []);
 
-  /**
-   * Generates a temporary table name.
-   *
-   * @return string
-   *   A table name.
-   *
-   * @deprecated in drupal:9.3.0 and is removed from drupal:10.0.0. There is no
-   *   replacement.
-   *
-   * @see https://www.drupal.org/node/3211781
-   */
-  protected function generateTemporaryTableName() {
-    @trigger_error('Connection::generateTemporaryTableName() is deprecated in drupal:9.3.0 and is removed from drupal:10.0.0. There is no replacement. See https://www.drupal.org/node/3211781', E_USER_DEPRECATED);
-    return "db_temporary_" . $this->temporaryNameIndex++;
-  }
-
-  /**
-   * Runs a SELECT query and stores its results in a temporary table.
-   *
-   * Use this as a substitute for ->query() when the results need to stored
-   * in a temporary table. Temporary tables exist for the duration of the page
-   * request. User-supplied arguments to the query should be passed in as
-   * separate parameters so that they can be properly escaped to avoid SQL
-   * injection attacks.
-   *
-   * Note that if you need to know how many results were returned, you should do
-   * a SELECT COUNT(*) on the temporary table afterwards.
-   *
-   * @param string $query
-   *   A string containing a normal SELECT SQL query.
-   * @param array $args
-   *   (optional) An array of values to substitute into the query at placeholder
-   *   markers.
-   * @param array $options
-   *   (optional) An associative array of options to control how the query is
-   *   run. See the documentation for DatabaseConnection::defaultOptions() for
-   *   details.
-   *
-   * @return string
-   *   The name of the temporary table.
-   *
-   * @deprecated in drupal:9.3.0 and is removed from drupal:10.0.0. There is no
-   *   replacement.
-   *
-   * @see https://www.drupal.org/node/3211781
-   */
-  abstract public function queryTemporary($query, array $args = [], array $options = []);
-
   /**
    * Returns the type of database driver.
    *
@@ -1851,22 +1572,6 @@ public function clientVersion() {
     return $this->connection->getAttribute(\PDO::ATTR_CLIENT_VERSION);
   }
 
-  /**
-   * Determines if this driver supports transactions.
-   *
-   * @return bool
-   *   TRUE if this connection supports transactions, FALSE otherwise.
-   *
-   * @deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. All database
-   * drivers must support transactions.
-   *
-   * @see https://www.drupal.org/node/2278745
-   */
-  public function supportsTransactions() {
-    @trigger_error(__METHOD__ . ' is deprecated in drupal:9.1.0 and is removed in drupal:10.0.0. All database drivers must support transactions. See https://www.drupal.org/node/2278745', E_USER_DEPRECATED);
-    return TRUE;
-  }
-
   /**
    * Determines if this driver supports transactional DDL.
    *
@@ -1949,46 +1654,6 @@ public function commit() {
    */
   abstract public function nextId($existing_id = 0);
 
-  /**
-   * Prepares a statement for execution and returns a statement object.
-   *
-   * Emulated prepared statements do not communicate with the database server so
-   * this method does not check the statement.
-   *
-   * @param string $statement
-   *   This must be a valid SQL statement for the target database server.
-   * @param array $driver_options
-   *   (optional) This array holds one or more key=>value pairs to set
-   *   attribute values for the PDOStatement object that this method returns.
-   *   You would most commonly use this to set the \PDO::ATTR_CURSOR value to
-   *   \PDO::CURSOR_SCROLL to request a scrollable cursor. Some drivers have
-   *   driver specific options that may be set at prepare-time. Defaults to an
-   *   empty array.
-   *
-   * @return \PDOStatement|false
-   *   If the database server successfully prepares the statement, returns a
-   *   \PDOStatement object.
-   *   If the database server cannot successfully prepare the statement  returns
-   *   FALSE or emits \PDOException (depending on error handling).
-   *
-   * @throws \PDOException
-   *
-   * @see https://www.php.net/manual/en/pdo.prepare.php
-   *
-   * @deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Database
-   *   drivers should instantiate \PDOStatement objects by calling
-   *   \PDO::prepare in their Connection::prepareStatement method instead.
-   *   \PDO::prepare should not be called outside of driver code.
-   *
-   * @see https://www.drupal.org/node/3137786
-   */
-  public function prepare($statement, array $driver_options = []) {
-    @trigger_error('Connection::prepare() is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Database drivers should instantiate \PDOStatement objects by calling \PDO::prepare in their Connection::prepareStatement method instead. \PDO::prepare should not be called outside of driver code. See https://www.drupal.org/node/3137786', E_USER_DEPRECATED);
-    return $this->statementWrapperClass ?
-      (new $this->statementWrapperClass($this, $this->connection, $statement, $driver_options))->getClientStatement() :
-      $this->connection->prepare($statement, $driver_options);
-  }
-
   /**
    * Quotes a string for use in a query.
    *
diff --git a/core/lib/Drupal/Core/Database/Database.php b/core/lib/Drupal/Core/Database/Database.php
index 79b681dc88..bb24b63e63 100644
--- a/core/lib/Drupal/Core/Database/Database.php
+++ b/core/lib/Drupal/Core/Database/Database.php
@@ -644,31 +644,6 @@ public static function getConnectionInfoAsUrl($key = 'default') {
     return $connection_class::createUrlFromConnectionOptions($db_info['default']);
   }
 
-  /**
-   * Gets the PHP namespace of a database driver from the connection info.
-   *
-   * @param array $connection_info
-   *   The database connection information, as defined in settings.php. The
-   *   structure of this array depends on the database driver it is connecting
-   *   to.
-   *
-   * @return string
-   *   The PHP namespace of the driver's database.
-   *
-   * @deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. There is no
-   *   replacement as $connection_info['namespace'] is always set.
-   *
-   * @see https://www.drupal.org/node/3127769
-   */
-  protected static function getDatabaseDriverNamespace(array $connection_info) {
-    @trigger_error(__METHOD__ . " is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. There is no replacement as \$connection_info['namespace'] is always set. See https://www.drupal.org/node/3127769.", E_USER_DEPRECATED);
-    if (isset($connection_info['namespace'])) {
-      return $connection_info['namespace'];
-    }
-    // Fallback for when the namespace is not provided in settings.php.
-    return 'Drupal\\' . $connection_info['driver'] . '\\Driver\\Database\\' . $connection_info['driver'];
-  }
-
   /**
    * Checks whether a namespace is within the namespace of a Drupal module.
    *
diff --git a/core/lib/Drupal/Core/Database/ExceptionHandler.php b/core/lib/Drupal/Core/Database/ExceptionHandler.php
index dcbbd5dd02..a35e0c0239 100644
--- a/core/lib/Drupal/Core/Database/ExceptionHandler.php
+++ b/core/lib/Drupal/Core/Database/ExceptionHandler.php
@@ -25,13 +25,6 @@ class ExceptionHandler {
    * @throws \Drupal\Core\Database\DatabaseExceptionWrapper
    */
   public function handleStatementException(\Exception $exception, string $sql, array $options = []): void {
-    if (array_key_exists('throw_exception', $options)) {
-      @trigger_error('Passing a \'throw_exception\' option to ' . __METHOD__ . ' is deprecated in drupal:9.2.0 and is removed in drupal:10.0.0. Always catch exceptions. See https://www.drupal.org/node/3201187', E_USER_DEPRECATED);
-      if (!($options['throw_exception'])) {
-        return;
-      }
-    }
-
     if ($exception instanceof \PDOException) {
       // Wrap the exception in another exception, because PHP does not allow
       // overriding Exception::getMessage(). Its message is the extra database
@@ -60,13 +53,6 @@ public function handleStatementException(\Exception $exception, string $sql, arr
    * @throws \Drupal\Core\Database\IntegrityConstraintViolationException
    */
   public function handleExecutionException(\Exception $exception, StatementInterface $statement, array $arguments = [], array $options = []): void {
-    if (array_key_exists('throw_exception', $options)) {
-      @trigger_error('Passing a \'throw_exception\' option to ' . __METHOD__ . ' is deprecated in drupal:9.2.0 and is removed in drupal:10.0.0. Always catch exceptions. See https://www.drupal.org/node/3201187', E_USER_DEPRECATED);
-      if (!($options['throw_exception'])) {
-        return;
-      }
-    }
-
     if ($exception instanceof \PDOException) {
       // Wrap the exception in another exception, because PHP does not allow
       // overriding Exception::getMessage(). Its message is the extra database
diff --git a/core/lib/Drupal/Core/Database/Log.php b/core/lib/Drupal/Core/Database/Log.php
index 6499a2b670..5fd10b18ac 100644
--- a/core/lib/Drupal/Core/Database/Log.php
+++ b/core/lib/Drupal/Core/Database/Log.php
@@ -116,13 +116,10 @@ public function end($logging_key) {
    */
   public function log(StatementInterface $statement, $args, $time, float $start = NULL) {
     foreach (array_keys($this->queryLog) as $key) {
-      // @todo Remove the method_exists check for getConnectionTarget in
-      //   Drupal 10.
-      // @see https://www.drupal.org/project/drupal/issues/3210310
       $this->queryLog[$key][] = [
         'query' => $statement->getQueryString(),
         'args' => $args,
-        'target' => method_exists($statement, 'getConnectionTarget') ? $statement->getConnectionTarget() : $statement->dbh->getTarget(),
+        'target' => $statement->getConnectionTarget(),
         'caller' => $this->findCaller(),
         'time' => $time,
         'start' => $start,
diff --git a/core/lib/Drupal/Core/Database/Query/Condition.php b/core/lib/Drupal/Core/Database/Query/Condition.php
index 80198371bb..ad64622303 100644
--- a/core/lib/Drupal/Core/Database/Query/Condition.php
+++ b/core/lib/Drupal/Core/Database/Query/Condition.php
@@ -78,19 +78,8 @@ class Condition implements ConditionInterface, \Countable {
    *
    * @param string $conjunction
    *   The operator to use to combine conditions: 'AND' or 'OR'.
-   * @param bool $trigger_deprecation
-   *   If TRUE then trigger the deprecation warning.
-   *
-   * @deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Creating an
-   *   instance of this class is deprecated.
-   *
-   * @see https://www.drupal.org/node/3159568
    */
-  public function __construct($conjunction, $trigger_deprecation = TRUE) {
-    if ($trigger_deprecation) {
-      @trigger_error('Creating an instance of this class is deprecated in drupal:9.1.0 and is removed in drupal:10.0.0. Use Database::getConnection()->condition() instead. See https://www.drupal.org/node/3159568', E_USER_DEPRECATED);
-    }
-
+  public function __construct($conjunction) {
     $this->conditions['#conjunction'] = $conjunction;
   }
 
diff --git a/core/lib/Drupal/Core/Database/Query/Merge.php b/core/lib/Drupal/Core/Database/Query/Merge.php
index fffca6ce9f..a664182074 100644
--- a/core/lib/Drupal/Core/Database/Query/Merge.php
+++ b/core/lib/Drupal/Core/Database/Query/Merge.php
@@ -362,63 +362,50 @@ public function __toString() {
    *     and an INSERT query is executed.
    *   - Merge::STATUS_UPDATE: If the entry already exists,
    *     and an UPDATE query is executed.
-   *   - NULL: (deprecated) If there is a problem and
-   *     queryOptions['throw_exception'] is FALSE.
    *
    * @throws \Drupal\Core\Database\Query\InvalidMergeQueryException
    *   When there are no conditions found to merge.
    */
   public function execute() {
+    if (!count($this->condition)) {
+      throw new InvalidMergeQueryException('Invalid merge query: no conditions');
+    }
 
-    try {
-      if (!count($this->condition)) {
-        throw new InvalidMergeQueryException('Invalid merge query: no conditions');
-      }
-      $select = $this->connection->select($this->conditionTable)
-        ->condition($this->condition);
-      $select->addExpression('1');
-      if (!$select->execute()->fetchField()) {
-        try {
-          $insert = $this->connection->insert($this->table)->fields($this->insertFields);
-          if ($this->defaultFields) {
-            $insert->useDefaults($this->defaultFields);
-          }
-          $insert->execute();
-          return self::STATUS_INSERT;
-        }
-        catch (IntegrityConstraintViolationException $e) {
-          // The insert query failed, maybe it's because a racing insert query
-          // beat us in inserting the same row. Retry the select query, if it
-          // returns a row, ignore the error and continue with the update
-          // query below.
-          if (!$select->execute()->fetchField()) {
-            throw $e;
-          }
+    $select = $this->connection->select($this->conditionTable)
+      ->condition($this->condition);
+    $select->addExpression('1');
+
+    if (!$select->execute()->fetchField()) {
+      try {
+        $insert = $this->connection->insert($this->table)->fields($this->insertFields);
+        if ($this->defaultFields) {
+          $insert->useDefaults($this->defaultFields);
         }
+        $insert->execute();
+        return self::STATUS_INSERT;
       }
-      if ($this->needsUpdate) {
-        $update = $this->connection->update($this->table)
-          ->fields($this->updateFields)
-          ->condition($this->condition);
-        if ($this->expressionFields) {
-          foreach ($this->expressionFields as $field => $data) {
-            $update->expression($field, $data['expression'], $data['arguments']);
-          }
+      catch (IntegrityConstraintViolationException $e) {
+        // The insert query failed, maybe it's because a racing insert query
+        // beat us in inserting the same row. Retry the select query, if it
+        // returns a row, ignore the error and continue with the update
+        // query below.
+        if (!$select->execute()->fetchField()) {
+          throw $e;
         }
-        $update->execute();
-        return self::STATUS_UPDATE;
       }
     }
-    catch (\Exception $e) {
-      // @todo 'throw_exception' option is deprecated. Remove in D10.
-      // @see https://www.drupal.org/project/drupal/issues/3210310
-      if (array_key_exists('throw_exception', $this->queryOptions)) {
-        @trigger_error('Passing a \'throw_exception\' option to ' . __METHOD__ . ' is deprecated in drupal:9.2.0 and is removed in drupal:10.0.0. Always catch exceptions. See https://www.drupal.org/node/3201187', E_USER_DEPRECATED);
-        if (!($this->queryOptions['throw_exception'])) {
-          return NULL;
+
+    if ($this->needsUpdate) {
+      $update = $this->connection->update($this->table)
+        ->fields($this->updateFields)
+        ->condition($this->condition);
+      if ($this->expressionFields) {
+        foreach ($this->expressionFields as $field => $data) {
+          $update->expression($field, $data['expression'], $data['arguments']);
         }
       }
-      throw $e;
+      $update->execute();
+      return self::STATUS_UPDATE;
     }
   }
 
diff --git a/core/lib/Drupal/Core/Database/Query/PagerSelectExtender.php b/core/lib/Drupal/Core/Database/Query/PagerSelectExtender.php
index 1a53ec8601..3620d9b5d1 100644
--- a/core/lib/Drupal/Core/Database/Query/PagerSelectExtender.php
+++ b/core/lib/Drupal/Core/Database/Query/PagerSelectExtender.php
@@ -16,18 +16,6 @@
  */
 class PagerSelectExtender extends SelectExtender {
 
-  /**
-   * The highest element we've autogenerated so far.
-   *
-   * @var int
-   *
-   * @deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Use
-   *   \Drupal::service('pager.manager')->getMaxPagerElementId() instead.
-   *
-   * @see https://www.drupal.org/node/3194594
-   */
-  public static $maxElement = 0;
-
   /**
    * The number of elements per page to allow.
    *
diff --git a/core/lib/Drupal/Core/Database/Statement.php b/core/lib/Drupal/Core/Database/Statement.php
deleted file mode 100644
index fb9a1b8eb6..0000000000
--- a/core/lib/Drupal/Core/Database/Statement.php
+++ /dev/null
@@ -1,204 +0,0 @@
-<?php
-
-namespace Drupal\Core\Database;
-
-@trigger_error('\Drupal\Core\Database\Statement is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Database drivers should use or extend StatementWrapper instead, and encapsulate client-level statement objects. See https://www.drupal.org/node/3177488', E_USER_DEPRECATED);
-
-/**
- * Default implementation of StatementInterface.
- *
- * \PDO allows us to extend the \PDOStatement class to provide additional
- * functionality beyond that offered by default. We do need extra
- * functionality. By default, this class is not driver-specific. If a given
- * driver needs to set a custom statement class, it may do so in its
- * constructor.
- *
- * @see http://php.net/pdostatement
- *
- * @deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Database
- *   drivers should use or extend StatementWrapper instead, and encapsulate
- *   client-level statement objects.
- *
- * @see https://www.drupal.org/node/3177488
- */
-class Statement extends \PDOStatement implements StatementInterface {
-
-  /**
-   * Reference to the database connection object for this statement.
-   *
-   * The name $dbh is inherited from \PDOStatement.
-   *
-   * @var \Drupal\Core\Database\Connection
-   */
-  public $dbh;
-
-  /**
-   * Is rowCount() execution allowed.
-   *
-   * @var bool
-   */
-  public $allowRowCount = FALSE;
-
-  protected function __construct(Connection $dbh) {
-    $this->dbh = $dbh;
-    $this->setFetchMode(\PDO::FETCH_OBJ);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function getConnectionTarget(): string {
-    return $this->connection->getTarget();
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function execute($args = [], $options = []) {
-    if (isset($options['fetch'])) {
-      if (is_string($options['fetch'])) {
-        // \PDO::FETCH_PROPS_LATE tells __construct() to run before properties
-        // are added to the object.
-        $this->setFetchMode(\PDO::FETCH_CLASS | \PDO::FETCH_PROPS_LATE, $options['fetch']);
-      }
-      else {
-        $this->setFetchMode($options['fetch']);
-      }
-    }
-
-    $logger = $this->dbh->getLogger();
-    if (!empty($logger)) {
-      $query_start = microtime(TRUE);
-    }
-
-    $return = parent::execute($args);
-
-    if (!empty($logger)) {
-      $query_end = microtime(TRUE);
-      $logger->log($this, $args, $query_end - $query_start, $query_start);
-    }
-
-    return $return;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function getQueryString() {
-    return $this->queryString;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function fetchCol($index = 0) {
-    return $this->fetchAll(\PDO::FETCH_COLUMN, $index);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function fetchAllAssoc($key, $fetch = NULL) {
-    $return = [];
-    if (isset($fetch)) {
-      if (is_string($fetch)) {
-        $this->setFetchMode(\PDO::FETCH_CLASS, $fetch);
-      }
-      else {
-        $this->setFetchMode($fetch);
-      }
-    }
-
-    foreach ($this as $record) {
-      $record_key = is_object($record) ? $record->$key : $record[$key];
-      $return[$record_key] = $record;
-    }
-
-    return $return;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function fetchAllKeyed($key_index = 0, $value_index = 1) {
-    $return = [];
-    $this->setFetchMode(\PDO::FETCH_NUM);
-    foreach ($this as $record) {
-      $return[$record[$key_index]] = $record[$value_index];
-    }
-    return $return;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function fetchField($index = 0) {
-    // Call \PDOStatement::fetchColumn to fetch the field.
-    return $this->fetchColumn($index);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function fetchAssoc() {
-    // Call \PDOStatement::fetch to fetch the row.
-    return $this->fetch(\PDO::FETCH_ASSOC);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function rowCount() {
-    // SELECT query should not use the method.
-    if ($this->allowRowCount) {
-      return parent::rowCount();
-    }
-    else {
-      throw new RowCountException();
-    }
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function setFetchMode($mode, $a1 = NULL, $a2 = []) {
-    // Call \PDOStatement::setFetchMode to set fetch mode.
-    // \PDOStatement is picky about the number of arguments in some cases so we
-    // need to be pass the exact number of arguments we where given.
-    switch (func_num_args()) {
-      case 1:
-        return parent::setFetchMode($mode);
-
-      case 2:
-        return parent::setFetchMode($mode, $a1);
-
-      case 3:
-      default:
-        return parent::setFetchMode($mode, $a1, $a2);
-    }
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function fetchAll($mode = NULL, $column_index = NULL, $constructor_arguments = NULL) {
-    // Call \PDOStatement::fetchAll to fetch all rows.
-    // \PDOStatement is picky about the number of arguments in some cases so we
-    // need to be pass the exact number of arguments we where given.
-    switch (func_num_args()) {
-      case 0:
-        return parent::fetchAll();
-
-      case 1:
-        return parent::fetchAll($mode);
-
-      case 2:
-        return parent::fetchAll($mode, $column_index);
-
-      case 3:
-      default:
-        return parent::fetchAll($mode, $column_index, $constructor_arguments);
-    }
-  }
-
-}
diff --git a/core/lib/Drupal/Core/Database/StatementEmpty.php b/core/lib/Drupal/Core/Database/StatementEmpty.php
deleted file mode 100644
index fe173ecea3..0000000000
--- a/core/lib/Drupal/Core/Database/StatementEmpty.php
+++ /dev/null
@@ -1,152 +0,0 @@
-<?php
-
-namespace Drupal\Core\Database;
-
-@trigger_error('\Drupal\Core\Database\StatementEmpty is deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. There is no replacement. Use mocked StatementInterface classes in tests if needed. See https://www.drupal.org/node/3201283', E_USER_DEPRECATED);
-
-/**
- * Empty implementation of a database statement.
- *
- * This class satisfies the requirements of being a database statement/result
- * object, but does not actually contain data.  It is useful when developers
- * need to safely return an "empty" result set without connecting to an actual
- * database.  Calling code can then treat it the same as if it were an actual
- * result set that happens to contain no records.
- *
- * @see \Drupal\search\SearchQuery
- *
- * @deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. There is no
- *   replacement. Use mocked StatementInterface classes in tests if needed.
- *
- * @see https://www.drupal.org/node/1234567
- */
-class StatementEmpty implements \Iterator, StatementInterface {
-
-  /**
-   * Is rowCount() execution allowed.
-   *
-   * @var bool
-   */
-  public $allowRowCount = FALSE;
-
-  /**
-   * {@inheritdoc}
-   */
-  public function execute($args = [], $options = []) {
-    return FALSE;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function getQueryString() {
-    return '';
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function rowCount() {
-    if ($this->allowRowCount) {
-      return 0;
-    }
-    throw new RowCountException();
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function setFetchMode($mode, $a1 = NULL, $a2 = []) {}
-
-  /**
-   * {@inheritdoc}
-   */
-  public function fetch($mode = NULL, $cursor_orientation = NULL, $cursor_offset = NULL) {
-    return NULL;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function fetchField($index = 0) {
-    return NULL;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function fetchObject(string $class_name = NULL, array $constructor_arguments = NULL) {
-    return NULL;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function fetchAssoc() {
-    return NULL;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function fetchAll($mode = NULL, $column_index = NULL, $constructor_arguments = NULL) {
-    return [];
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function fetchCol($index = 0) {
-    return [];
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function fetchAllKeyed($key_index = 0, $value_index = 1) {
-    return [];
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function fetchAllAssoc($key, $fetch = NULL) {
-    return [];
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function current() {
-    return NULL;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function key() {
-    return NULL;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function rewind() {
-    // Nothing to do: our DatabaseStatement can't be rewound.
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function next() {
-    // Do nothing, since this is an always-empty implementation.
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function valid() {
-    return FALSE;
-  }
-
-}
diff --git a/core/lib/Drupal/Core/Database/StatementInterface.php b/core/lib/Drupal/Core/Database/StatementInterface.php
index 0bb030d017..ad0f741da8 100644
--- a/core/lib/Drupal/Core/Database/StatementInterface.php
+++ b/core/lib/Drupal/Core/Database/StatementInterface.php
@@ -50,9 +50,7 @@ public function getQueryString();
    * @return string
    *   The target connection string of this statement.
    */
-  // @todo Include this method in the interface in Drupal 10.
-  // @see https://www.drupal.org/project/drupal/issues/3210310
-  // public function getConnectionTarget(): string;
+  public function getConnectionTarget(): string;
 
   /**
    * Returns the number of rows affected by the last SQL statement.
diff --git a/core/lib/Drupal/Core/Database/StatementPrefetch.php b/core/lib/Drupal/Core/Database/StatementPrefetch.php
index 267b6a85d5..899996f222 100644
--- a/core/lib/Drupal/Core/Database/StatementPrefetch.php
+++ b/core/lib/Drupal/Core/Database/StatementPrefetch.php
@@ -148,36 +148,6 @@ public function __construct(\PDO $pdo_connection, Connection $connection, $query
     $this->rowCountEnabled = $row_count_enabled;
   }
 
-  /**
-   * Implements the magic __get() method.
-   *
-   * @todo Remove the method before Drupal 10.
-   * @see https://www.drupal.org/i/3210310
-   */
-  public function __get($name) {
-    if ($name === 'dbh') {
-      @trigger_error(__CLASS__ . '::$dbh should not be accessed in drupal:9.3.0 and will error in drupal:10.0.0. Use $this->connection instead. See https://www.drupal.org/node/3186368', E_USER_DEPRECATED);
-      return $this->connection;
-    }
-    if ($name === 'allowRowCount') {
-      @trigger_error(__CLASS__ . '::$allowRowCount should not be accessed in drupal:9.3.0 and will error in drupal:10.0.0. Use $this->rowCountEnabled instead. See https://www.drupal.org/node/3186368', E_USER_DEPRECATED);
-      return $this->rowCountEnabled;
-    }
-  }
-
-  /**
-   * Implements the magic __set() method.
-   *
-   * @todo Remove the method before Drupal 10.
-   * @see https://www.drupal.org/i/3210310
-   */
-  public function __set($name, $value) {
-    if ($name === 'allowRowCount') {
-      @trigger_error(__CLASS__ . '::$allowRowCount should not be written in drupal:9.3.0 and will error in drupal:10.0.0. Enable row counting by passing the appropriate argument to the constructor instead. See https://www.drupal.org/node/3186368', E_USER_DEPRECATED);
-      $this->rowCountEnabled = $value;
-    }
-  }
-
   /**
    * {@inheritdoc}
    */
diff --git a/core/lib/Drupal/Core/Database/StatementWrapper.php b/core/lib/Drupal/Core/Database/StatementWrapper.php
index 2b3eb40f46..8a3bc208c5 100644
--- a/core/lib/Drupal/Core/Database/StatementWrapper.php
+++ b/core/lib/Drupal/Core/Database/StatementWrapper.php
@@ -53,56 +53,6 @@ public function __construct(Connection $connection, $client_connection, string $
     $this->setFetchMode(\PDO::FETCH_OBJ);
   }
 
-  /**
-   * Implements the magic __get() method.
-   *
-   * @todo Remove the method before Drupal 10.
-   * @see https://www.drupal.org/i/3210310
-   */
-  public function __get($name) {
-    if ($name === 'queryString') {
-      @trigger_error("StatementWrapper::\$queryString should not be accessed in drupal:9.1.0 and will error in drupal:10.0.0. Access the client-level statement object via ::getClientStatement(). See https://www.drupal.org/node/3177488", E_USER_DEPRECATED);
-      return $this->getClientStatement()->queryString;
-    }
-    if ($name === 'dbh') {
-      @trigger_error(__CLASS__ . '::$dbh should not be accessed in drupal:9.3.0 and will error in drupal:10.0.0. Use $this->connection instead. See https://www.drupal.org/node/3186368', E_USER_DEPRECATED);
-      return $this->connection;
-    }
-    if ($name === 'allowRowCount') {
-      @trigger_error(__CLASS__ . '::$allowRowCount should not be accessed in drupal:9.3.0 and will error in drupal:10.0.0. Use $this->rowCountEnabled instead. See https://www.drupal.org/node/3186368', E_USER_DEPRECATED);
-      return $this->rowCountEnabled;
-    }
-  }
-
-  /**
-   * Implements the magic __set() method.
-   *
-   * @todo Remove the method before Drupal 10.
-   * @see https://www.drupal.org/i/3210310
-   */
-  public function __set($name, $value) {
-    if ($name === 'allowRowCount') {
-      @trigger_error(__CLASS__ . '::$allowRowCount should not be written in drupal:9.3.0 and will error in drupal:10.0.0. Enable row counting by passing the appropriate argument to the constructor instead. See https://www.drupal.org/node/3186368', E_USER_DEPRECATED);
-      $this->rowCountEnabled = $value;
-    }
-  }
-
-  /**
-   * Implements the magic __call() method.
-   *
-   * @deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Access the
-   *   client-level statement object via ::getClientStatement().
-   *
-   * @see https://www.drupal.org/node/3177488
-   */
-  public function __call($method, $arguments) {
-    if (is_callable([$this->getClientStatement(), $method])) {
-      @trigger_error("StatementWrapper::{$method} should not be called in drupal:9.1.0 and will error in drupal:10.0.0. Access the client-level statement object via ::getClientStatement(). See https://www.drupal.org/node/3177488", E_USER_DEPRECATED);
-      return call_user_func_array([$this->getClientStatement(), $method], $arguments);
-    }
-    throw new \BadMethodCallException($method);
-  }
-
   /**
    * Returns the client-level database statement object.
    *
@@ -313,95 +263,4 @@ public function getIterator() {
     return new \ArrayIterator($this->fetchAll());
   }
 
-  /**
-   * Bind a column to a PHP variable.
-   *
-   * @param mixed $column
-   *   Number of the column (1-indexed) or name of the column in the result set.
-   *   If using the column name, be aware that the name should match the case of
-   *   the column, as returned by the driver.
-   * @param mixed $param
-   *   Name of the PHP variable to which the column will be bound.
-   * @param int $type
-   *   (Optional) data type of the parameter, specified by the PDO::PARAM_*
-   *   constants.
-   * @param int $maxlen
-   *   (Optional) a hint for pre-allocation.
-   * @param mixed $driverdata
-   *   (Optional) optional parameter(s) for the driver.
-   *
-   * @return bool
-   *   Returns TRUE on success or FALSE on failure.
-   *
-   * @deprecated in drupal:9.1.0 and is removed from drupal:10.0.0.
-   *   StatementWrapper::bindColumn should not be called. Access the
-   *   client-level statement object via ::getClientStatement().
-   *
-   * @see https://www.drupal.org/node/3177488
-   */
-  public function bindColumn($column, &$param, int $type = 0, int $maxlen = 0, $driverdata = NULL): bool {
-    @trigger_error("StatementWrapper::bindColumn should not be called in drupal:9.1.0 and will error in drupal:10.0.0. Access the client-level statement object via ::getClientStatement(). See https://www.drupal.org/node/3177488", E_USER_DEPRECATED);
-    switch (func_num_args()) {
-      case 2:
-        return $this->clientStatement->bindColumn($column, $param);
-
-      case 3:
-        return $this->clientStatement->bindColumn($column, $param, $type);
-
-      case 4:
-        return $this->clientStatement->bindColumn($column, $param, $type, $maxlen);
-
-      case 5:
-        return $this->clientStatement->bindColumn($column, $param, $type, $maxlen, $driverdata);
-
-    }
-  }
-
-  /**
-   * Binds a parameter to the specified variable name.
-   *
-   * @param mixed $parameter
-   *   Parameter identifier. For a prepared statement using named placeholders,
-   *   this will be a parameter name of the form :name.
-   * @param mixed $variable
-   *   Name of the PHP variable to bind to the SQL statement parameter.
-   * @param int $data_type
-   *   (Optional) explicit data type for the parameter using the PDO::PARAM_*
-   *   constants. To return an INOUT parameter from a stored procedure, use the
-   *   bitwise OR operator to set the PDO::PARAM_INPUT_OUTPUT bits for the
-   *   data_type parameter.
-   * @param int $length
-   *   (Optional) length of the data type. To indicate that a parameter is an
-   *   OUT parameter from a stored procedure, you must explicitly set the
-   *   length.
-   * @param mixed $driver_options
-   *   (Optional) Driver options.
-   *
-   * @return bool
-   *   Returns TRUE on success or FALSE on failure.
-   *
-   * @deprecated in drupal:9.1.0 and is removed from drupal:10.0.0.
-   *   StatementWrapper::bindParam should not be called. Access the
-   *   client-level statement object via ::getClientStatement().
-   *
-   * @see https://www.drupal.org/node/3177488
-   */
-  public function bindParam($parameter, &$variable, int $data_type = \PDO::PARAM_STR, int $length = 0, $driver_options = NULL) : bool {
-    @trigger_error("StatementWrapper::bindParam should not be called in drupal:9.1.0 and will error in drupal:10.0.0. Access the client-level statement object via ::getClientStatement(). See https://www.drupal.org/node/3177488", E_USER_DEPRECATED);
-    switch (func_num_args()) {
-      case 2:
-        return $this->clientStatement->bindParam($parameter, $variable);
-
-      case 3:
-        return $this->clientStatement->bindParam($parameter, $variable, $data_type);
-
-      case 4:
-        return $this->clientStatement->bindParam($parameter, $variable, $data_type, $length);
-
-      case 5:
-        return $this->clientStatement->bindParam($parameter, $variable, $data_type, $length, $driver_options);
-
-    }
-  }
-
 }
diff --git a/core/lib/Drupal/Core/Pager/PagerManager.php b/core/lib/Drupal/Core/Pager/PagerManager.php
index 1fad49ce79..e60b5d5134 100644
--- a/core/lib/Drupal/Core/Pager/PagerManager.php
+++ b/core/lib/Drupal/Core/Pager/PagerManager.php
@@ -2,7 +2,6 @@
 
 namespace Drupal\Core\Pager;
 
-use Drupal\Core\Database\Query\PagerSelectExtender;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 
 /**
@@ -109,9 +108,6 @@ public function getMaxPagerElementId() {
    */
   public function reservePagerElementId(int $element): void {
     $this->maxPagerElementId = max($element, $this->maxPagerElementId);
-    // BC for PagerSelectExtender::$maxElement.
-    // @todo remove the line below in D10.
-    PagerSelectExtender::$maxElement = $this->getMaxPagerElementId();
   }
 
   /**
diff --git a/core/modules/mysql/src/Driver/Database/mysql/Connection.php b/core/modules/mysql/src/Driver/Database/mysql/Connection.php
index b2de80be4f..e15575bcb0 100644
--- a/core/modules/mysql/src/Driver/Database/mysql/Connection.php
+++ b/core/modules/mysql/src/Driver/Database/mysql/Connection.php
@@ -3,7 +3,6 @@
 namespace Drupal\mysql\Driver\Database\mysql;
 
 use Drupal\Core\Database\DatabaseAccessDeniedException;
-use Drupal\Core\Database\IntegrityConstraintViolationException;
 use Drupal\Core\Database\DatabaseExceptionWrapper;
 use Drupal\Core\Database\StatementWrapper;
 use Drupal\Core\Database\Database;
@@ -47,11 +46,6 @@ class Connection extends DatabaseConnection {
    */
   const SQLSTATE_SYNTAX_ERROR = 42000;
 
-  /**
-   * {@inheritdoc}
-   */
-  protected $statementClass = NULL;
-
   /**
    * {@inheritdoc}
    */
@@ -117,25 +111,6 @@ public function __construct(\PDO $connection, array $connection_options) {
     parent::__construct($connection, $connection_options);
   }
 
-  /**
-   * {@inheritdoc}
-   */
-  protected function handleQueryException(\PDOException $e, $query, array $args = [], $options = []) {
-    // In case of attempted INSERT of a record with an undefined column and no
-    // default value indicated in schema, MySql returns a 1364 error code.
-    // Throw an IntegrityConstraintViolationException here like the other
-    // drivers do, to avoid the parent class to throw a generic
-    // DatabaseExceptionWrapper instead.
-    if (!empty($e->errorInfo[1]) && $e->errorInfo[1] === 1364) {
-      @trigger_error('Connection::handleQueryException() is deprecated in drupal:9.2.0 and is removed in drupal:10.0.0. Get a handler through $this->exceptionHandler() instead, and use one of its methods. See https://www.drupal.org/node/3187222', E_USER_DEPRECATED);
-      $query_string = ($query instanceof StatementInterface) ? $query->getQueryString() : $query;
-      $message = $e->getMessage() . ": " . $query_string . "; " . print_r($args, TRUE);
-      throw new IntegrityConstraintViolationException($message, is_int($e->getCode()) ? $e->getCode() : 0, $e);
-    }
-
-    parent::handleQueryException($e, $query, $args, $options);
-  }
-
   /**
    * {@inheritdoc}
    */
@@ -247,16 +222,6 @@ public function queryRange($query, $from, $count, array $args = [], array $optio
     return $this->query($query . ' LIMIT ' . (int) $from . ', ' . (int) $count, $args, $options);
   }
 
-  /**
-   * {@inheritdoc}
-   */
-  public function queryTemporary($query, array $args = [], array $options = []) {
-    @trigger_error('Connection::queryTemporary() is deprecated in drupal:9.3.0 and is removed from drupal:10.0.0. There is no replacement. See https://www.drupal.org/node/3211781', E_USER_DEPRECATED);
-    $tablename = $this->generateTemporaryTableName();
-    $this->query('CREATE TEMPORARY TABLE {' . $tablename . '} Engine=MEMORY ' . $query, $args, $options);
-    return $tablename;
-  }
-
   public function driver() {
     return 'mysql';
   }
diff --git a/core/modules/mysql/src/Driver/Database/mysql/ExceptionHandler.php b/core/modules/mysql/src/Driver/Database/mysql/ExceptionHandler.php
index 18ca77ab25..bef64b9c2e 100644
--- a/core/modules/mysql/src/Driver/Database/mysql/ExceptionHandler.php
+++ b/core/modules/mysql/src/Driver/Database/mysql/ExceptionHandler.php
@@ -17,13 +17,6 @@ class ExceptionHandler extends BaseExceptionHandler {
    * {@inheritdoc}
    */
   public function handleExecutionException(\Exception $exception, StatementInterface $statement, array $arguments = [], array $options = []): void {
-    if (array_key_exists('throw_exception', $options)) {
-      @trigger_error('Passing a \'throw_exception\' option to ' . __METHOD__ . ' is deprecated in drupal:9.2.0 and is removed in drupal:10.0.0. Always catch exceptions. See https://www.drupal.org/node/3201187', E_USER_DEPRECATED);
-      if (!($options['throw_exception'])) {
-        return;
-      }
-    }
-
     if ($exception instanceof \PDOException) {
       // Wrap the exception in another exception, because PHP does not allow
       // overriding Exception::getMessage(). Its message is the extra database
diff --git a/core/modules/pgsql/src/Driver/Database/pgsql/Connection.php b/core/modules/pgsql/src/Driver/Database/pgsql/Connection.php
index fc2ab6508f..037e386094 100644
--- a/core/modules/pgsql/src/Driver/Database/pgsql/Connection.php
+++ b/core/modules/pgsql/src/Driver/Database/pgsql/Connection.php
@@ -39,11 +39,6 @@ class Connection extends DatabaseConnection {
    */
   const CONNECTION_FAILURE = '08006';
 
-  /**
-   * {@inheritdoc}
-   */
-  protected $statementClass = NULL;
-
   /**
    * {@inheritdoc}
    */
@@ -214,16 +209,6 @@ public function queryRange($query, $from, $count, array $args = [], array $optio
     return $this->query($query . ' LIMIT ' . (int) $count . ' OFFSET ' . (int) $from, $args, $options);
   }
 
-  /**
-   * {@inheritdoc}
-   */
-  public function queryTemporary($query, array $args = [], array $options = []) {
-    @trigger_error('Connection::queryTemporary() is deprecated in drupal:9.3.0 and is removed from drupal:10.0.0. There is no replacement. See https://www.drupal.org/node/3211781', E_USER_DEPRECATED);
-    $tablename = $this->generateTemporaryTableName();
-    $this->query('CREATE TEMPORARY TABLE {' . $tablename . '} AS ' . $query, $args, $options);
-    return $tablename;
-  }
-
   public function driver() {
     return 'pgsql';
   }
diff --git a/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php b/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php
index 17fd2567d5..72fba8eb43 100644
--- a/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php
+++ b/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php
@@ -16,11 +16,6 @@ class Connection extends DatabaseConnection {
    */
   const DATABASE_NOT_FOUND = 14;
 
-  /**
-   * {@inheritdoc}
-   */
-  protected $statementClass = NULL;
-
   /**
    * {@inheritdoc}
    */
@@ -357,52 +352,10 @@ public static function sqlFunctionLikeBinary($pattern, $subject) {
     return preg_match('/^' . $pattern . '$/', $subject);
   }
 
-  /**
-   * {@inheritdoc}
-   */
-  public function prepare($statement, array $driver_options = []) {
-    @trigger_error('Connection::prepare() is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Database drivers should instantiate \PDOStatement objects by calling \PDO::prepare in their Connection::prepareStatement method instead. \PDO::prepare should not be called outside of driver code. See https://www.drupal.org/node/3137786', E_USER_DEPRECATED);
-    return new Statement($this->connection, $this, $statement, $driver_options);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  protected function handleQueryException(\PDOException $e, $query, array $args = [], $options = []) {
-    // The database schema might be changed by another process in between the
-    // time that the statement was prepared and the time the statement was run
-    // (e.g. usually happens when running tests). In this case, we need to
-    // re-run the query.
-    // @see http://www.sqlite.org/faq.html#q15
-    // @see http://www.sqlite.org/rescode.html#schema
-    if (!empty($e->errorInfo[1]) && $e->errorInfo[1] === 17) {
-      @trigger_error('Connection::handleQueryException() is deprecated in drupal:9.2.0 and is removed in drupal:10.0.0. Get a handler through $this->exceptionHandler() instead, and use one of its methods. See https://www.drupal.org/node/3187222', E_USER_DEPRECATED);
-      return $this->query($query, $args, $options);
-    }
-
-    parent::handleQueryException($e, $query, $args, $options);
-  }
-
   public function queryRange($query, $from, $count, array $args = [], array $options = []) {
     return $this->query($query . ' LIMIT ' . (int) $from . ', ' . (int) $count, $args, $options);
   }
 
-  /**
-   * {@inheritdoc}
-   */
-  public function queryTemporary($query, array $args = [], array $options = []) {
-    @trigger_error('Connection::queryTemporary() is deprecated in drupal:9.3.0 and is removed from drupal:10.0.0. There is no replacement. See https://www.drupal.org/node/3211781', E_USER_DEPRECATED);
-    // Generate a new temporary table name and protect it from prefixing.
-    // SQLite requires that temporary tables to be non-qualified.
-    $tablename = $this->generateTemporaryTableName();
-    $prefixes = $this->prefixes;
-    $prefixes[$tablename] = '';
-    $this->setPrefix($prefixes);
-
-    $this->query('CREATE TEMPORARY TABLE ' . $tablename . ' AS ' . $query, $args, $options);
-    return $tablename;
-  }
-
   public function driver() {
     return 'sqlite';
   }
diff --git a/core/modules/system/tests/modules/database_test/database_test.routing.yml b/core/modules/system/tests/modules/database_test/database_test.routing.yml
index 51b365e29a..1bc0751b4a 100644
--- a/core/modules/system/tests/modules/database_test/database_test.routing.yml
+++ b/core/modules/system/tests/modules/database_test/database_test.routing.yml
@@ -1,10 +1,3 @@
-database_test.db_query_temporary:
-  path: '/database_test/db_query_temporary'
-  defaults:
-    _controller: '\Drupal\database_test\Controller\DatabaseTestController::dbQueryTemporary'
-  requirements:
-    _access: 'TRUE'
-
 database_test.pager_query_even:
   path: '/database_test/pager_query_even/{limit}'
   defaults:
diff --git a/core/modules/system/tests/modules/database_test/src/Controller/DatabaseTestController.php b/core/modules/system/tests/modules/database_test/src/Controller/DatabaseTestController.php
index 2364e39fc7..ddc5f7577b 100644
--- a/core/modules/system/tests/modules/database_test/src/Controller/DatabaseTestController.php
+++ b/core/modules/system/tests/modules/database_test/src/Controller/DatabaseTestController.php
@@ -40,23 +40,6 @@ public static function create(ContainerInterface $container) {
     );
   }
 
-  /**
-   * Creates temporary table and outputs the table name and its number of rows.
-   *
-   * We need to test that the table created is temporary, so we run it here, in a
-   * separate menu callback request; After this request is done, the temporary
-   * table should automatically dropped.
-   *
-   * @return \Symfony\Component\HttpFoundation\JsonResponse
-   */
-  public function dbQueryTemporary() {
-    $table_name = $this->connection->queryTemporary('SELECT [age] FROM {test}', []);
-    return new JsonResponse([
-      'table_name' => $table_name,
-      'row_count' => $this->connection->select($table_name)->countQuery()->execute()->fetchField(),
-    ]);
-  }
-
   /**
    * Runs a pager query and returns the results.
    *
diff --git a/core/modules/system/tests/src/Functional/Database/SelectPagerDefaultTest.php b/core/modules/system/tests/src/Functional/Database/SelectPagerDefaultTest.php
index e261f6e9a3..41aa5c3a83 100644
--- a/core/modules/system/tests/src/Functional/Database/SelectPagerDefaultTest.php
+++ b/core/modules/system/tests/src/Functional/Database/SelectPagerDefaultTest.php
@@ -151,9 +151,6 @@ public function testElementNumbers() {
       ->orderBy('age')
       ->limit(1);
     $this->assertSame(2, $query->getElement());
-    // BC for PagerSelectExtender::$maxElement.
-    // @todo remove the assertion below in D10.
-    $this->assertSame(2, PagerSelectExtender::$maxElement);
     $name = $query->execute()
       ->fetchField();
     $this->assertEquals('Paul', $name, 'Pager query #1 with a specified element ID returned the correct results.');
@@ -167,9 +164,6 @@ public function testElementNumbers() {
       ->orderBy('age')
       ->limit(1);
     $this->assertSame(1, $query->getElement());
-    // BC for PagerSelectExtender::$maxElement.
-    // @todo remove the assertion below in D10.
-    $this->assertSame(2, PagerSelectExtender::$maxElement);
     $name = $query->execute()
       ->fetchField();
     $this->assertEquals('George', $name, 'Pager query #2 with a specified element ID returned the correct results.');
@@ -180,9 +174,6 @@ public function testElementNumbers() {
       ->orderBy('age')
       ->limit(1);
     $this->assertSame(3, $query->getElement());
-    // BC for PagerSelectExtender::$maxElement.
-    // @todo remove the assertion below in D10.
-    $this->assertSame(3, PagerSelectExtender::$maxElement);
     $name = $query->execute()
       ->fetchField();
     $this->assertEquals('John', $name, 'Pager query #3 with a generated element ID returned the correct results.');
diff --git a/core/modules/system/tests/src/Functional/Database/TemporaryQueryTest.php b/core/modules/system/tests/src/Functional/Database/TemporaryQueryTest.php
deleted file mode 100644
index 419363a2cb..0000000000
--- a/core/modules/system/tests/src/Functional/Database/TemporaryQueryTest.php
+++ /dev/null
@@ -1,67 +0,0 @@
-<?php
-
-namespace Drupal\Tests\system\Functional\Database;
-
-use Drupal\Core\Database\Database;
-
-/**
- * Tests the temporary query functionality.
- *
- * @group Database
- * @group legacy
- */
-class TemporaryQueryTest extends DatabaseTestBase {
-
-  /**
-   * {@inheritdoc}
-   */
-  protected static $modules = ['database_test'];
-
-  /**
-   * {@inheritdoc}
-   */
-  protected $defaultTheme = 'stark';
-
-  /**
-   * Returns the number of rows of a table.
-   */
-  public function countTableRows($table_name) {
-    return Database::getConnection()->select($table_name)->countQuery()->execute()->fetchField();
-  }
-
-  /**
-   * Confirms that temporary tables work and are limited to one request.
-   */
-  public function testTemporaryQuery() {
-    $this->expectDeprecation('Connection::queryTemporary() is deprecated in drupal:9.3.0 and is removed from drupal:10.0.0. There is no replacement. See https://www.drupal.org/node/3211781');
-    $this->expectDeprecation('Connection::generateTemporaryTableName() is deprecated in drupal:9.3.0 and is removed from drupal:10.0.0. There is no replacement. See https://www.drupal.org/node/3211781');
-
-    $connection = Database::getConnection();
-    $this->drupalGet('database_test/db_query_temporary');
-    $data = json_decode($this->getSession()->getPage()->getContent());
-    if ($data) {
-      $this->assertEquals($this->countTableRows('test'), $data->row_count, 'The temporary table contains the correct amount of rows.');
-      $this->assertFalse($connection->schema()->tableExists($data->table_name), 'The temporary table is, indeed, temporary.');
-    }
-    else {
-      $this->fail('The creation of the temporary table failed.');
-    }
-
-    // Now try to run two temporary queries in the same request.
-    $table_name_test = $connection->queryTemporary('SELECT [name] FROM {test}', []);
-    $table_name_task = $connection->queryTemporary('SELECT [pid] FROM {test_task}', []);
-
-    $this->assertEquals($this->countTableRows('test'), $this->countTableRows($table_name_test), 'A temporary table was created successfully in this request.');
-    $this->assertEquals($this->countTableRows('test_task'), $this->countTableRows($table_name_task), 'A second temporary table was created successfully in this request.');
-
-    // Check that leading whitespace and comments do not cause problems
-    // in the modified query.
-    $sql = "
-      -- Let's select some rows into a temporary table
-      SELECT [name] FROM {test}
-    ";
-    $table_name_test = $connection->queryTemporary($sql, []);
-    $this->assertEquals($this->countTableRows('test'), $this->countTableRows($table_name_test), 'Leading white space and comments do not interfere with temporary table creation.');
-  }
-
-}
diff --git a/core/tests/Drupal/FunctionalTests/Update/UpdatePathTestBase.php b/core/tests/Drupal/FunctionalTests/Update/UpdatePathTestBase.php
index 22b6aeabc7..b9a44c4633 100644
--- a/core/tests/Drupal/FunctionalTests/Update/UpdatePathTestBase.php
+++ b/core/tests/Drupal/FunctionalTests/Update/UpdatePathTestBase.php
@@ -287,10 +287,8 @@ protected function runDbTasks() {
     \Drupal::setContainer($container);
 
     require_once __DIR__ . '/../../../../includes/install.inc';
-    $connection_info = Database::getConnectionInfo();
-    $driver = $connection_info['default']['driver'];
-    $namespace = $connection_info['default']['namespace'] ?? NULL;
-    $errors = db_installer_object($driver, $namespace)->runTasks();
+    $installer_class = Database::getConnectionInfo()['default']['namespace'] . "\\Install\\Tasks";
+    $errors = (new $installer_class())->runTasks();
     if (!empty($errors)) {
       $this->fail('Failed to run installer database tasks: ' . implode(', ', $errors));
     }
diff --git a/core/tests/Drupal/KernelTests/Core/Database/ConnectionTest.php b/core/tests/Drupal/KernelTests/Core/Database/ConnectionTest.php
index 570146fc10..b7da5e5c53 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/ConnectionTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/ConnectionTest.php
@@ -6,7 +6,6 @@
 use Drupal\Core\Database\Database;
 use Drupal\Core\Database\DatabaseExceptionWrapper;
 use Drupal\Core\Database\Query\Condition;
-use Drupal\Core\Database\StatementWrapper;
 
 /**
  * Tests of the core database system.
@@ -119,52 +118,6 @@ public function testConnectionOptions() {
     $this->assertNotEquals($connection_info['default']['database'], $connectionOptions['database'], 'The test connection info database does not match the current connection options database.');
   }
 
-  /**
-   * Tests the deprecation of the 'transactions' connection option.
-   *
-   * @group legacy
-   */
-  public function testTransactionsOptionDeprecation() {
-    $this->expectDeprecation('Passing a \'transactions\' connection option to Drupal\Core\Database\Connection::__construct is deprecated in drupal:9.1.0 and is removed in drupal:10.0.0. All database drivers must support transactions. See https://www.drupal.org/node/2278745');
-    $this->expectDeprecation('Drupal\Core\Database\Connection::supportsTransactions is deprecated in drupal:9.1.0 and is removed in drupal:10.0.0. All database drivers must support transactions. See https://www.drupal.org/node/2278745');
-    $connection_info = Database::getConnectionInfo('default');
-    $connection_info['default']['transactions'] = FALSE;
-    Database::addConnectionInfo('default', 'foo', $connection_info['default']);
-    $foo_connection = Database::getConnection('foo', 'default');
-    $this->assertInstanceOf(Connection::class, $foo_connection);
-    $this->assertTrue($foo_connection->supportsTransactions());
-  }
-
-  /**
-   * Tests the deprecation of passing a statement object to ::query.
-   *
-   * @group legacy
-   */
-  public function testStatementQueryDeprecation(): void {
-    $this->expectDeprecation('Passing a StatementInterface object as a $query argument to Drupal\Core\Database\Connection::query is deprecated in drupal:9.2.0 and is removed in drupal:10.0.0. Call the execute method from the StatementInterface object directly instead. See https://www.drupal.org/node/3154439');
-    $db = Database::getConnection();
-    $stmt = $db->prepareStatement('SELECT * FROM {test}', []);
-    $this->assertNotNull($db->query($stmt));
-  }
-
-  /**
-   * Tests the deprecation of passing a PDOStatement object to ::query.
-   *
-   * @group legacy
-   */
-  public function testPDOStatementQueryDeprecation(): void {
-    $db = Database::getConnection();
-    $stmt = $db->prepareStatement('SELECT * FROM {test}', []);
-    if (!$stmt instanceof StatementWrapper) {
-      $this->markTestSkipped("This test only runs for db drivers using StatementWrapper.");
-    }
-    if (!$stmt->getClientStatement() instanceof \PDOStatement) {
-      $this->markTestSkipped("This test only runs for PDO-based db drivers.");
-    }
-    $this->expectDeprecation('Passing a \\PDOStatement object as a $query argument to Drupal\Core\Database\Connection::query is deprecated in drupal:9.2.0 and is removed in drupal:10.0.0. Call the execute method from the StatementInterface object directly instead. See https://www.drupal.org/node/3154439');
-    $this->assertNotNull($db->query($stmt->getClientStatement()));
-  }
-
   /**
    * Tests per-table prefix connection option.
    */
diff --git a/core/tests/Drupal/KernelTests/Core/Database/DatabaseExceptionWrapperTest.php b/core/tests/Drupal/KernelTests/Core/Database/DatabaseExceptionWrapperTest.php
index d7af19f1c9..0fd2770fe5 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/DatabaseExceptionWrapperTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/DatabaseExceptionWrapperTest.php
@@ -13,55 +13,6 @@
  */
 class DatabaseExceptionWrapperTest extends KernelTestBase {
 
-  /**
-   * Tests deprecation of Connection::prepare.
-   *
-   * @group legacy
-   */
-  public function testPrepare() {
-    $this->expectDeprecation('Connection::prepare() is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Database drivers should instantiate \PDOStatement objects by calling \PDO::prepare in their Connection::prepareStatement method instead. \PDO::prepare should not be called outside of driver code. See https://www.drupal.org/node/3137786');
-    $connection = Database::getConnection();
-    try {
-      // SQLite validates the syntax upon preparing a statement already.
-      // @throws \PDOException
-      $query = $connection->prepare('bananas');
-
-      // MySQL only validates the syntax upon trying to execute a query.
-      // @throws \Drupal\Core\Database\DatabaseExceptionWrapper
-      $connection->query($query);
-
-      $this->fail('Expected PDOException or DatabaseExceptionWrapper, none was thrown.');
-    }
-    catch (\Exception $e) {
-      $this->assertTrue($e instanceof \PDOException || $e instanceof DatabaseExceptionWrapper, 'Exception should be an instance of \PDOException or DatabaseExceptionWrapper, thrown ' . get_class($e));
-    }
-  }
-
-  /**
-   * Tests deprecation of Connection::prepareQuery.
-   *
-   * @group legacy
-   */
-  public function testPrepareQuery() {
-    $this->expectDeprecation('Connection::prepareQuery() is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Use ::prepareStatement() instead. See https://www.drupal.org/node/3137786');
-    $this->expectException(\PDOException::class);
-    $stmt = Database::getConnection()->prepareQuery('bananas');
-    $stmt->execute();
-  }
-
-  /**
-   * Tests deprecation of Connection::handleQueryException.
-   *
-   * @group legacy
-   */
-  public function testHandleQueryExceptionDeprecation(): void {
-    $this->expectDeprecation('Passing a StatementInterface object as a $query argument to Drupal\Core\Database\Connection::query is deprecated in drupal:9.2.0 and is removed in drupal:10.0.0. Call the execute method from the StatementInterface object directly instead. See https://www.drupal.org/node/3154439');
-    $this->expectDeprecation('Connection::handleQueryException() is deprecated in drupal:9.2.0 and is removed in drupal:10.0.0. Get a handler through $this->exceptionHandler() instead, and use one of its methods. See https://www.drupal.org/node/3187222');
-    $this->expectException(DatabaseExceptionWrapper::class);
-    $stmt = Database::getConnection()->prepareStatement('SELECT * FROM {does_not_exist}', []);
-    Database::getConnection()->query($stmt);
-  }
-
   /**
    * Tests Connection::prepareStatement exceptions on execution.
    *
@@ -97,26 +48,6 @@ public function testPrepareStatementFailOnPreparation() {
     $stmt = $foo_connection->prepareStatement('bananas', []);
   }
 
-  /**
-   * Tests Connection::prepareStatement with throw_exception option set.
-   *
-   * @group legacy
-   */
-  public function testPrepareStatementFailOnPreparationWithThrowExceptionOption(): void {
-    $driver = Database::getConnection()->driver();
-    if ($driver !== 'mysql') {
-      $this->markTestSkipped("MySql tests can not run for driver '$driver'.");
-    }
-
-    $connection_info = Database::getConnectionInfo('default');
-    $connection_info['default']['pdo'][\PDO::ATTR_EMULATE_PREPARES] = FALSE;
-    Database::addConnectionInfo('default', 'foo', $connection_info['default']);
-    $foo_connection = Database::getConnection('foo', 'default');
-    $this->expectException(DatabaseExceptionWrapper::class);
-    $this->expectDeprecation('Passing a \'throw_exception\' option to %AExceptionHandler::handleStatementException is deprecated in drupal:9.2.0 and is removed in drupal:10.0.0. Always catch exceptions. See https://www.drupal.org/node/3201187');
-    $stmt = $foo_connection->prepareStatement('bananas', ['throw_exception' => FALSE]);
-  }
-
   /**
    * Tests the expected database exception thrown for inexistent tables.
    */
diff --git a/core/tests/Drupal/KernelTests/Core/Database/MergeTest.php b/core/tests/Drupal/KernelTests/Core/Database/MergeTest.php
index b0ad41d455..11b2da2786 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/MergeTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/MergeTest.php
@@ -204,21 +204,6 @@ public function testInvalidMerge() {
       ->execute();
   }
 
-  /**
-   * Tests deprecation of the 'throw_exception' option.
-   *
-   * @group legacy
-   */
-  public function testLegacyThrowExceptionOption(): void {
-    $this->expectDeprecation("Passing a 'throw_exception' option to %AMerge::execute is deprecated in drupal:9.2.0 and is removed in drupal:10.0.0. Always catch exceptions. See https://www.drupal.org/node/3201187");
-    // This merge will fail because there is no key field specified.
-    $this->assertNull($this->connection
-      ->merge('test_people', ['throw_exception' => FALSE])
-      ->fields(['age' => 31, 'name' => 'Tiffany'])
-      ->execute()
-    );
-  }
-
   /**
    * Tests that we can merge-insert with reserved keywords.
    */
diff --git a/core/tests/Drupal/KernelTests/Core/Database/SelectTest.php b/core/tests/Drupal/KernelTests/Core/Database/SelectTest.php
index 89e98bf4a2..fe85345d9b 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/SelectTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/SelectTest.php
@@ -550,21 +550,6 @@ public function testSelectDuplicateAlias() {
     $this->assertNotSame($alias1, $alias2, 'Duplicate aliases are renamed.');
   }
 
-  /**
-   * Tests deprecation of the 'throw_exception' option.
-   *
-   * @group legacy
-   */
-  public function testLegacyThrowExceptionOption(): void {
-    $this->expectDeprecation("Passing a 'throw_exception' option to %AExceptionHandler::handleExecutionException is deprecated in drupal:9.2.0 and is removed in drupal:10.0.0. Always catch exceptions. See https://www.drupal.org/node/3201187");
-    // This query will fail because the table does not exist.
-    $this->assertNull($this->connection->select('some_table_that_does_not_exist', 't', ['throw_exception' => FALSE])
-      ->fields('t')
-      ->countQuery()
-      ->execute()
-    );
-  }
-
   /**
    * Tests that an invalid count query throws an exception.
    */
diff --git a/core/tests/Drupal/KernelTests/Core/Database/StatementTest.php b/core/tests/Drupal/KernelTests/Core/Database/StatementTest.php
index f1c0cc8060..eeb2304663 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/StatementTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/StatementTest.php
@@ -43,30 +43,4 @@ public function testRepeatedInsertStatementReuse() {
     $this->assertSame('31', $this->connection->query('SELECT [age] FROM {test} WHERE [name] = :name', [':name' => 'Curly'])->fetchField());
   }
 
-  /**
-   * Tests accessing deprecated properties.
-   *
-   * @group legacy
-   */
-  public function testGetDeprecatedProperties(): void {
-    $statement = $this->connection->prepareStatement('SELECT * FROM {test}', []);
-    $this->expectDeprecation('%s$dbh should not be accessed in drupal:9.3.0 and will error in drupal:10.0.0. Use $this->connection instead. See https://www.drupal.org/node/3186368');
-    $this->assertNotNull($statement->dbh);
-    $this->expectDeprecation('%s$allowRowCount should not be accessed in drupal:9.3.0 and will error in drupal:10.0.0. Use $this->rowCountEnabled instead. See https://www.drupal.org/node/3186368');
-    $this->assertFalse($statement->allowRowCount);
-  }
-
-  /**
-   * Tests writing deprecated properties.
-   *
-   * @group legacy
-   */
-  public function testSetDeprecatedProperties(): void {
-    $statement = $this->connection->prepareStatement('UPDATE {test} SET [age] = :age', []);
-    $this->expectDeprecation('%s$allowRowCount should not be written in drupal:9.3.0 and will error in drupal:10.0.0. Enable row counting by passing the appropriate argument to the constructor instead. See https://www.drupal.org/node/3186368');
-    $statement->allowRowCount = TRUE;
-    $statement->execute([':age' => 12]);
-    $this->assertEquals(4, $statement->rowCount());
-  }
-
 }
diff --git a/core/tests/Drupal/KernelTests/Core/Database/StatementWrapperLegacyTest.php b/core/tests/Drupal/KernelTests/Core/Database/StatementWrapperLegacyTest.php
deleted file mode 100644
index 9c7457a58a..0000000000
--- a/core/tests/Drupal/KernelTests/Core/Database/StatementWrapperLegacyTest.php
+++ /dev/null
@@ -1,73 +0,0 @@
-<?php
-
-namespace Drupal\KernelTests\Core\Database;
-
-use Drupal\Core\Database\StatementWrapper;
-
-/**
- * Tests the deprecations of the StatementWrapper class.
- *
- * @coversDefaultClass \Drupal\Core\Database\StatementWrapper
- * @group legacy
- * @group Database
- */
-class StatementWrapperLegacyTest extends DatabaseTestBase {
-
-  protected $statement;
-
-  /**
-   * {@inheritdoc}
-   */
-  protected function setUp(): void {
-    parent::setUp();
-    $this->statement = $this->connection->prepareStatement('SELECT id FROM {test}', []);
-    if (!$this->statement instanceof StatementWrapper) {
-      $this->markTestSkipped('This test only works for drivers implementing Drupal\Core\Database\StatementWrapper.');
-    }
-  }
-
-  /**
-   * @covers ::getQueryString
-   */
-  public function testQueryString() {
-    $this->expectDeprecation('StatementWrapper::$queryString should not be accessed in drupal:9.1.0 and will error in drupal:10.0.0. Access the client-level statement object via ::getClientStatement(). See https://www.drupal.org/node/3177488');
-    $this->assertStringContainsString('SELECT id FROM ', $this->statement->queryString);
-    $this->assertStringContainsString('SELECT id FROM ', $this->statement->getQueryString());
-  }
-
-  /**
-   * Tests calling a non existing \PDOStatement method.
-   */
-  public function testMissingMethod() {
-    $this->expectException('\BadMethodCallException');
-    $this->statement->boo();
-  }
-
-  /**
-   * Tests calling an existing \PDOStatement method.
-   */
-  public function testClientStatementMethod() {
-    $this->expectDeprecation('StatementWrapper::columnCount should not be called in drupal:9.1.0 and will error in drupal:10.0.0. Access the client-level statement object via ::getClientStatement(). See https://www.drupal.org/node/3177488');
-    $this->statement->execute();
-    $this->assertEquals(1, $this->statement->columnCount());
-  }
-
-  /**
-   * @covers ::bindParam
-   */
-  public function testBindParam() {
-    $this->expectDeprecation('StatementWrapper::bindParam should not be called in drupal:9.1.0 and will error in drupal:10.0.0. Access the client-level statement object via ::getClientStatement(). See https://www.drupal.org/node/3177488');
-    $test = NULL;
-    $this->assertTrue($this->statement->bindParam(':name', $test));
-  }
-
-  /**
-   * @covers ::bindColumn
-   */
-  public function testBindColumn() {
-    $this->expectDeprecation('StatementWrapper::bindColumn should not be called in drupal:9.1.0 and will error in drupal:10.0.0. Access the client-level statement object via ::getClientStatement(). See https://www.drupal.org/node/3177488');
-    $test = NULL;
-    $this->assertTrue($this->statement->bindColumn(1, $test));
-  }
-
-}
diff --git a/core/tests/Drupal/KernelTests/KernelTestBase.php b/core/tests/Drupal/KernelTests/KernelTestBase.php
index a75d45758c..1888424389 100644
--- a/core/tests/Drupal/KernelTests/KernelTestBase.php
+++ b/core/tests/Drupal/KernelTests/KernelTestBase.php
@@ -345,19 +345,14 @@ private function bootKernel() {
 
     $modules = self::getModulesToEnable(static::class);
 
-    // When a module is providing the database driver, then enable that module.
-    $connection_info = Database::getConnectionInfo();
-    $driver = $connection_info['default']['driver'];
-    $namespace = $connection_info['default']['namespace'] ?? '';
-    $autoload = $connection_info['default']['autoload'] ?? '';
-    if (strpos($autoload, 'src/Driver/Database/') !== FALSE) {
-      [$first, $second] = explode('\\', $namespace, 3);
-      if ($first === 'Drupal' && strtolower($second) === $second) {
-        // Add the module that provides the database driver to the list of
-        // modules as the first to be enabled.
-        array_unshift($modules, $second);
-      }
-    }
+    // Enable the module that provides the database driver, as the first one to
+    // be enabled.
+dump(['1', Database::getConnectionInfo()['default']]);
+    $namespace = Database::getConnectionInfo()['default']['namespace'];
+    [, $provider] = explode('\\', $namespace, 3);
+dump(['2', $namespace, $provider, $modules]);
+    array_unshift($modules, $provider);
+dump(['3', $modules]);
 
     // Bootstrap the kernel. Do not use createFromRequest() to retain Settings.
     $kernel = new DrupalKernel('testing', $this->classLoader, FALSE);
@@ -380,7 +375,8 @@ private function bootKernel() {
 
     // Ensure database tasks have been run.
     require_once __DIR__ . '/../../../includes/install.inc';
-    $errors = db_installer_object($driver, $namespace)->runTasks();
+    $installer_class = $namespace . "\\Install\\Tasks";
+    $errors = (new $installer_class())->runTasks();
     if (!empty($errors)) {
       $this->fail('Failed to run installer database tasks: ' . implode(', ', $errors));
     }
diff --git a/core/tests/Drupal/Tests/Core/Database/ConditionTest.php b/core/tests/Drupal/Tests/Core/Database/ConditionTest.php
index 05b65b5f7d..6ef0cc7adb 100644
--- a/core/tests/Drupal/Tests/Core/Database/ConditionTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/ConditionTest.php
@@ -203,15 +203,4 @@ class_alias('MockCondition', $mocked_namespace);
     $this->assertSame('MockCondition', get_class($condition));
   }
 
-  /**
-   * Tests the deprecation of the class Condition.
-   *
-   * @group legacy
-   */
-  public function testConditionClassDeprecation() {
-    $this->expectDeprecation('Creating an instance of this class is deprecated in drupal:9.1.0 and is removed in drupal:10.0.0. Use Database::getConnection()->condition() instead. See https://www.drupal.org/node/3159568');
-    $condition = new Condition('OR');
-    $this->assertSame('Drupal\Core\Database\Query\Condition', get_class($condition));
-  }
-
 }
diff --git a/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php b/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php
index 09b2f1a9ab..412ad324e6 100644
--- a/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php
@@ -3,7 +3,6 @@
 namespace Drupal\Tests\Core\Database;
 
 use Composer\Autoload\ClassLoader;
-use Drupal\Core\Database\Statement;
 use Drupal\Tests\Core\Database\Stub\StubConnection;
 use Drupal\Tests\Core\Database\Stub\StubPDO;
 use Drupal\Tests\UnitTestCase;
@@ -359,51 +358,6 @@ public function testSchema($expected, $driver, $namespace) {
     $this->assertInstanceOf($expected, $connection->schema());
   }
 
-  /**
-   * Tests Connection::destroy().
-   *
-   * @group legacy
-   */
-  public function testDestroy() {
-    $this->expectDeprecation('Drupal\Core\Database\Connection::destroy() is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Move custom database destruction logic to __destruct(). See https://www.drupal.org/node/3142866');
-    $mock_pdo = $this->createMock('Drupal\Tests\Core\Database\Stub\StubPDO');
-    // Mocking StubConnection gives us access to the $schema attribute.
-    $connection = new StubConnection($mock_pdo, ['namespace' => 'Drupal\\Tests\\Core\\Database\\Stub\\Driver']);
-    // Generate a schema object in order to verify that we've NULLed it later.
-    $this->assertInstanceOf(
-      'Drupal\\Tests\\Core\\Database\\Stub\\Driver\\Schema',
-      $connection->schema()
-    );
-    $connection->destroy();
-
-    $reflected_schema = (new \ReflectionObject($connection))->getProperty('schema');
-    $reflected_schema->setAccessible(TRUE);
-    $this->assertNull($reflected_schema->getValue($connection));
-  }
-
-  /**
-   * Tests Connection::__destruct().
-   *
-   * @group legacy
-   */
-  public function testDestructBcLayer() {
-    $this->expectDeprecation('Drupal\Core\Database\Connection::destroy() is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Move custom database destruction logic to __destruct(). See https://www.drupal.org/node/3142866');
-    $mock_pdo = $this->createMock(StubPDO::class);
-    $fake_connection = new class($mock_pdo, ['namespace' => Driver::class]) extends StubConnection {
-
-      public function destroy() {
-        parent::destroy();
-      }
-
-    };
-    // Destroy the object which will result in the Connection::__destruct()
-    // calling Connection::destroy() and a deprecation error being triggered.
-    // @see \Drupal\KernelTests\Core\Database\ConnectionUnitTest for tests that
-    // connection object destruction does not trigger deprecations unless
-    // Connection::destroy() is overridden.
-    $fake_connection = NULL;
-  }
-
   /**
    * Data provider for testMakeComments().
    *
@@ -605,16 +559,6 @@ public function testEscapeDatabase($expected, $name, array $identifier_quote = [
     $this->assertEquals($expected, $connection->escapeDatabase($name));
   }
 
-  /**
-   * @covers ::__construct
-   * @group legacy
-   */
-  public function testIdentifierQuotesDeprecation() {
-    $this->expectDeprecation('In drupal:10.0.0 not setting the $identifierQuotes property in the concrete Connection class will result in an RuntimeException. See https://www.drupal.org/node/2986894');
-    $mock_pdo = $this->createMock(StubPDO::class);
-    new StubConnection($mock_pdo, [], NULL);
-  }
-
   /**
    * @covers ::__construct
    */
@@ -644,21 +588,6 @@ public function testNamespaceDefault() {
     $this->assertSame('Drupal\Tests\Core\Database\Stub', $connection->getConnectionOptions()['namespace']);
   }
 
-  /**
-   * Tests deprecation of the Statement class.
-   *
-   * @group legacy
-   */
-  public function testStatementDeprecation() {
-    if (PHP_VERSION_ID >= 80000) {
-      $this->markTestSkipped('Drupal\Core\Database\Statement is incompatible with PHP 8.0. Remove in https://www.drupal.org/node/3177490');
-    }
-    $this->expectDeprecation('\Drupal\Core\Database\Statement is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Database drivers should use or extend StatementWrapper instead, and encapsulate client-level statement objects. See https://www.drupal.org/node/3177488');
-    $mock_statement = $this->getMockBuilder(Statement::class)
-      ->disableOriginalConstructor()
-      ->getMock();
-  }
-
   /**
    * Test rtrim() of query strings.
    *
@@ -717,31 +646,4 @@ public function provideQueriesToTrim() {
     ];
   }
 
-  /**
-   * Tests the deprecation of Drupal 8 style database drivers.
-   *
-   * @group legacy
-   */
-  public function testLegacyDatabaseDriverInRootDriversDirectory() {
-    $this->expectDeprecation('Support for database drivers located in the "drivers/lib/Drupal/Driver/Database" directory is deprecated in drupal:9.1.0 and is removed in drupal:10.0.0. Contributed and custom database drivers should be provided by modules and use the namespace "Drupal\MODULE_NAME\Driver\Database\DRIVER_NAME". See https://www.drupal.org/node/3123251');
-    $namespace = 'Drupal\\Driver\\Database\\Stub';
-    $mock_pdo = $this->createMock(StubPDO::class);
-    $connection = new StubConnection($mock_pdo, ['namespace' => $namespace], ['"', '"']);
-    $this->assertEquals($namespace, $connection->getConnectionOptions()['namespace']);
-  }
-
-  /**
-   * Tests the deprecation of \Drupal\Core\Database\Connection::$statementClass.
-   *
-   * @group legacy
-   */
-  public function testPdoStatementClass() {
-    if (PHP_VERSION_ID >= 80000) {
-      $this->markTestSkipped('Drupal\Core\Database\Statement is incompatible with PHP 8.0. Remove in https://www.drupal.org/node/3177490');
-    }
-    $this->expectDeprecation('\Drupal\Core\Database\Connection::$statementClass is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Database drivers should use or extend StatementWrapper instead, and encapsulate client-level statement objects. See https://www.drupal.org/node/3177488');
-    $mock_pdo = $this->createMock(StubPDO::class);
-    new StubConnection($mock_pdo, ['namespace' => 'Drupal\\Tests\\Core\\Database\\Stub\\Driver'], ['"', '"'], Statement::class);
-  }
-
 }
diff --git a/core/tests/Drupal/Tests/Core/Database/EmptyStatementTest.php b/core/tests/Drupal/Tests/Core/Database/EmptyStatementTest.php
deleted file mode 100644
index f17c968ab9..0000000000
--- a/core/tests/Drupal/Tests/Core/Database/EmptyStatementTest.php
+++ /dev/null
@@ -1,46 +0,0 @@
-<?php
-
-namespace Drupal\Tests\Core\Database;
-
-use Drupal\Core\Database\StatementEmpty;
-use Drupal\Core\Database\StatementInterface;
-use Drupal\Tests\UnitTestCase;
-
-/**
- * Tests the empty pseudo-statement class.
- *
- * @group Database
- */
-class EmptyStatementTest extends UnitTestCase {
-
-  /**
-   * Tests that the empty result set behaves as empty.
-   *
-   * @group legacy
-   */
-  public function testEmpty() {
-    $this->expectDeprecation('\Drupal\Core\Database\StatementEmpty is deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. There is no replacement. Use mocked StatementInterface classes in tests if needed. See https://www.drupal.org/node/3201283');
-    $result = new StatementEmpty();
-
-    $this->assertInstanceOf(StatementInterface::class, $result);
-    $this->assertNull($result->fetchObject(), 'Null result returned.');
-  }
-
-  /**
-   * Tests that the empty result set iterates safely.
-   */
-  public function testEmptyIteration() {
-    $result = new StatementEmpty();
-    $this->assertSame(0, iterator_count($result), 'Empty result set should not iterate.');
-  }
-
-  /**
-   * Tests that the empty result set mass-fetches in an expected way.
-   */
-  public function testEmptyFetchAll() {
-    $result = new StatementEmpty();
-
-    $this->assertEquals([], $result->fetchAll(), 'Empty array returned from empty result set.');
-  }
-
-}
diff --git a/core/tests/Drupal/Tests/Core/Database/InstallerObjectTest.php b/core/tests/Drupal/Tests/Core/Database/InstallerObjectTest.php
index 278ace0bec..c453d8bf0b 100644
--- a/core/tests/Drupal/Tests/Core/Database/InstallerObjectTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/InstallerObjectTest.php
@@ -21,6 +21,7 @@
  * @preserveGlobalState disabled
  *
  * @group Database
+ * @group legacy
  */
 class InstallerObjectTest extends UnitTestCase {
 
@@ -42,6 +43,7 @@ protected function setUp(): void {
    * @dataProvider providerDbInstallerObject
    */
   public function testDbInstallerObject($driver, $namespace, $expected_class_name) {
+    $this->expectDeprecation('db_installer_object() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/1234567');
     $object = db_installer_object($driver, $namespace);
     $this->assertEquals(get_class($object), $expected_class_name);
   }
diff --git a/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php b/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php
index b553dcce0d..97658062d0 100644
--- a/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php
+++ b/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php
@@ -13,11 +13,6 @@
  */
 class StubConnection extends Connection {
 
-  /**
-   * {@inheritdoc}
-   */
-  protected $statementClass = NULL;
-
   /**
    * {@inheritdoc}
    */
@@ -40,15 +35,9 @@ class StubConnection extends Connection {
    *   An array of options for the connection.
    * @param string[]|null $identifier_quotes
    *   The identifier quote characters. Defaults to an empty strings.
-   * @param string|null $statement_class
-   *   A class to use as a statement class for deprecation testing.
    */
-  public function __construct(\PDO $connection, array $connection_options, $identifier_quotes = ['', ''], $statement_class = NULL) {
+  public function __construct(\PDO $connection, array $connection_options, $identifier_quotes = ['', '']) {
     $this->identifierQuotes = $identifier_quotes;
-    if ($statement_class) {
-      $this->statementClass = $statement_class;
-      $this->statementWrapperClass = NULL;
-    }
     parent::__construct($connection, $connection_options);
   }
 
@@ -59,14 +48,6 @@ public function queryRange($query, $from, $count, array $args = [], array $optio
     return NULL;
   }
 
-  /**
-   * {@inheritdoc}
-   */
-  public function queryTemporary($query, array $args = [], array $options = []) {
-    @trigger_error('Connection::queryTemporary() is deprecated in drupal:9.3.0 and is removed from drupal:10.0.0. There is no replacement. See https://www.drupal.org/node/3211781', E_USER_DEPRECATED);
-    return '';
-  }
-
   /**
    * {@inheritdoc}
    */
diff --git a/core/tests/fixtures/database_drivers/custom/fake/Connection.php b/core/tests/fixtures/database_drivers/custom/fake/Connection.php
index ec0c9cf2dc..5d3312650d 100644
--- a/core/tests/fixtures/database_drivers/custom/fake/Connection.php
+++ b/core/tests/fixtures/database_drivers/custom/fake/Connection.php
@@ -24,14 +24,6 @@ public function queryRange($query, $from, $count, array $args = [], array $optio
     return NULL;
   }
 
-  /**
-   * {@inheritdoc}
-   */
-  public function queryTemporary($query, array $args = [], array $options = []) {
-    @trigger_error('Connection::queryTemporary() is deprecated in drupal:9.3.0 and is removed from drupal:10.0.0. There is no replacement. See https://www.drupal.org/node/3211781', E_USER_DEPRECATED);
-    return '';
-  }
-
   /**
    * {@inheritdoc}
    */
