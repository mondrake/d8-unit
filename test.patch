diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index f19f5c6b96..1bca62c6e8 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -437,6 +437,22 @@ public function getConnectionOptions() {
     return $this->connectionOptions;
   }
 
+  /**
+   * Allows the connection to access additional databases.
+   *
+   * Database systems usually group tables in 'databases' or 'schemas', that
+   * can be accessed with syntax like 'SELECT * FROM database.table'. Normally
+   * Drupal accesses tables in a single database/schema, but in some cases it
+   * may be necessary to access tables from other databases/schemas in the same
+   * database server. This method can be called to ensure that the additional
+   * database/schema is accessible.
+   *
+   * @param string $database
+   *   The database to be attached to the connection.
+   */
+  public function attachDatabase(string $database): void {
+  }
+
   /**
    * Set the list of prefixes used by this database connection.
    *
diff --git a/core/lib/Drupal/Core/Database/Driver/sqlite/Connection.php b/core/lib/Drupal/Core/Database/Driver/sqlite/Connection.php
index bb1c15def9..c0cd2e2acd 100644
--- a/core/lib/Drupal/Core/Database/Driver/sqlite/Connection.php
+++ b/core/lib/Drupal/Core/Database/Driver/sqlite/Connection.php
@@ -91,15 +91,15 @@ public function __construct(\PDO $connection, array $connection_options) {
       if (!empty($prefix)) {
         // Only attach the database once.
         if (!isset($this->attachedDatabases[$prefix])) {
-          $this->attachedDatabases[$prefix] = $prefix;
           if ($connection_options['database'] === ':memory:') {
             // In memory database use ':memory:' as database name. According to
             // http://www.sqlite.org/inmemorydb.html it will open a unique
             // database so attaching it twice is not a problem.
+            $this->attachedDatabases[$prefix] = $prefix;
             $this->query('ATTACH DATABASE :database AS :prefix', [':database' => $connection_options['database'], ':prefix' => $prefix]);
           }
           else {
-            $this->query('ATTACH DATABASE :database AS :prefix', [':database' => $connection_options['database'] . '-' . $prefix, ':prefix' => $prefix]);
+            $this->attachDatabase($prefix);
           }
         }
 
@@ -211,6 +211,14 @@ public function __destruct() {
     parent::__destruct();
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function attachDatabase(string $database): void {
+    $this->attachedDatabases[$database] = $database;
+    $this->query('ATTACH DATABASE :database_file AS :database', [':database_file' => $this->connectionOptions['database'] . '-' . $database, ':database' => $database]);
+  }
+
   /**
    * Gets all the attached databases.
    *
@@ -431,6 +439,7 @@ public function mapConditionOperator($operator) {
    * {@inheritdoc}
    */
   public function prepareStatement(string $query, array $options, bool $allow_row_count = FALSE): StatementInterface {
+global $xxx; if ($xxx) dump($query);
     try {
       $query = $this->preprocessStatement($query, $options);
       $statement = new Statement($this->connection, $this, $query, $options['pdo'] ?? [], $allow_row_count);
diff --git a/core/modules/migrate/tests/src/Kernel/MigrateTestBase.php b/core/modules/migrate/tests/src/Kernel/MigrateTestBase.php
index 25c1b4e730..3a8a4a67ab 100644
--- a/core/modules/migrate/tests/src/Kernel/MigrateTestBase.php
+++ b/core/modules/migrate/tests/src/Kernel/MigrateTestBase.php
@@ -67,6 +67,10 @@ protected function setUp() {
     parent::setUp();
     $this->createMigrationConnection();
     $this->sourceDatabase = Database::getConnection('default', 'migrate');
+    // Attach the original test prefix as a database, for SQLite to attach its
+    // database file.
+global $xxx; $xxx = TRUE;
+    $this->sourceDatabase->attachDatabase(substr($this->sourceDatabase->getConnectionOptions()['prefix'], 0, -1));
   }
 
   /**
@@ -94,10 +98,6 @@ private function createMigrationConnection() {
       // Simpletest uses 7 character prefixes at most so this can't cause
       // collisions.
       $connection_info[$target]['prefix'] = $prefix . '0';
-
-      // Add the original simpletest prefix so SQLite can attach its database.
-      // @see \Drupal\Core\Database\Driver\sqlite\Connection::init()
-      $connection_info[$target]['extra_prefix'][$prefix] = $prefix;
     }
     Database::addConnectionInfo('migrate', 'default', $connection_info['default']);
   }
diff --git a/core/modules/migrate/tests/src/Kernel/Plugin/MigrationPluginListTest.php b/core/modules/migrate/tests/src/Kernel/Plugin/MigrationPluginListTest.php
index b3be1a339a..b9a1c2b7f1 100644
--- a/core/modules/migrate/tests/src/Kernel/Plugin/MigrationPluginListTest.php
+++ b/core/modules/migrate/tests/src/Kernel/Plugin/MigrationPluginListTest.php
@@ -139,10 +139,6 @@ public function testGetDefinitions() {
       // Simpletest uses 7 character prefixes at most so this can't cause
       // collisions.
       $connection_info[$target]['prefix'] = $prefix . '0';
-
-      // Add the original simpletest prefix so SQLite can attach its database.
-      // @see \Drupal\Core\Database\Driver\sqlite\Connection::init()
-      $connection_info[$target]['extra_prefix'][$prefix] = $prefix;
     }
     Database::addConnectionInfo('migrate', 'default', $connection_info['default']);
 
