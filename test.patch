diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index e0f9c5f631..56f03d78db 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -67,9 +67,22 @@
    * Index of what driver-specific class to use for various operations.
    *
    * @var array
+   *
+   * @deprecated in drupal:9.3.0 and is removed from drupal:10.0.0. Use
+   *   fully qualified class names in the methods that return database
+   *   operations instead.
+   *
+   * @see https://www.drupal.org/node/3177488
    */
   protected $driverClasses = [];
 
+  /**
+   * Index of driver-specific overriding classes to use.
+   *
+   * @var array
+   */
+  protected $driverOverridenClasses = [];
+
   /**
    * The name of the Statement class for this connection.
    *
@@ -1046,6 +1059,26 @@ protected function expandArguments(&$query, &$args) {
     return $modified;
   }
 
+  /**
+   * Gets a driver-specific override class, if any exists.
+   *
+   * @param string $class
+   *   The fully qualified class name for which we want the potentially
+   *   driver-specific class.
+   *
+   * @return string
+   *   The name of the class that should be used for this driver.
+   */
+  public function getDriverOverrideClass(string $class_name): string {
+    $parts = explode('\\', $class_name);
+    if (count($parts) === 1) {
+      throw new \InvalidArgumentException("$class_name must be a fully qualified class name");
+    }
+global $xxx;
+if ($xxx === TRUE) dump([$class_name, $parts, $this->driverOverridenClasses]);
+    return $this->driverOverridenClasses[end($parts)] ?? $class_name;
+  }
+
   /**
    * Gets the driver-specific override class if any for the specified class.
    *
@@ -1056,6 +1089,7 @@ protected function expandArguments(&$query, &$args) {
    *   The name of the class that should be used for this driver.
    */
   public function getDriverClass($class) {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:9.3.0 and is removed from drupal:10.0.0. Use fully qualified class names in the methods that return database operations instead. See https://www.drupal.org/node/3137786', E_USER_DEPRECATED);
     if (empty($this->driverClasses[$class])) {
       $driver_class = $this->connectionOptions['namespace'] . '\\' . $class;
       if (class_exists($driver_class)) {
diff --git a/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php b/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php
index 11782fc1ca..252a30717e 100644
--- a/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php
+++ b/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php
@@ -2,15 +2,22 @@
 
 namespace Drupal\Core\Database\Driver\mysql;
 
+use Drupal\Core\Database\Connection as DatabaseConnection;
+use Drupal\Core\Database\Database;
 use Drupal\Core\Database\DatabaseAccessDeniedException;
-use Drupal\Core\Database\IntegrityConstraintViolationException;
+use Drupal\Core\Database\DatabaseException;
 use Drupal\Core\Database\DatabaseExceptionWrapper;
+use Drupal\Core\Database\DatabaseNotFoundException;
+use Drupal\Core\Database\IntegrityConstraintViolationException;
+use Drupal\Core\Database\Query\Condition;
+use Drupal\Core\Database\Query\Delete;
+use Drupal\Core\Database\Query\Merge;
+use Drupal\Core\Database\Query\Select;
+use Drupal\Core\Database\Query\Truncate;
+use Drupal\Core\Database\Query\Update;
 use Drupal\Core\Database\StatementInterface;
 use Drupal\Core\Database\StatementWrapper;
-use Drupal\Core\Database\Database;
-use Drupal\Core\Database\DatabaseNotFoundException;
-use Drupal\Core\Database\DatabaseException;
-use Drupal\Core\Database\Connection as DatabaseConnection;
+use Drupal\Core\Database\Transaction;
 use Drupal\Core\Database\TransactionNoActiveException;
 
 /**
@@ -454,6 +461,86 @@ protected function doCommit() {
     return $success;
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function exceptionHandler() {
+    return new ExceptionHandler();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function select($table, $alias = NULL, array $options = []) {
+    return new Select($this, $table, $alias, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function insert($table, array $options = []) {
+    return new Insert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function merge($table, array $options = []) {
+    return new Merge($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function upsert($table, array $options = []) {
+    return new Upsert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function update($table, array $options = []) {
+    return new Update($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function delete($table, array $options = []) {
+    return new Delete($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function truncate($table, array $options = []) {
+    return new Truncate($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function schema() {
+    if (empty($this->schema)) {
+      $this->schema = new Schema($this);
+    }
+    return $this->schema;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function condition($conjunction) {
+    return new Condition($conjunction, FALSE);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function startTransaction($name = '') {
+    return new Transaction($this, $name);
+  }
+
 }
 
 
diff --git a/core/lib/Drupal/Core/Database/Query/Select.php b/core/lib/Drupal/Core/Database/Query/Select.php
index 94cbf92b14..f15ff1fdcd 100644
--- a/core/lib/Drupal/Core/Database/Query/Select.php
+++ b/core/lib/Drupal/Core/Database/Query/Select.php
@@ -318,13 +318,8 @@ public function havingCompile(Connection $connection) {
    * {@inheritdoc}
    */
   public function extend($extender_name) {
-    $parts = explode('\\', $extender_name);
-    $class = end($parts);
-    $driver_class = $this->connection->getDriverClass($class);
-    if ($driver_class !== $class) {
-      return new $driver_class($this, $this->connection);
-    }
-    return new $extender_name($this, $this->connection);
+    $driver_override_class = $this->connection->getDriverOverrideClass($extender_name);
+    return new $driver_override_class($this, $this->connection);
   }
 
   /**
diff --git a/core/lib/Drupal/Core/Database/Query/SelectExtender.php b/core/lib/Drupal/Core/Database/Query/SelectExtender.php
index 0681813f04..9a86e0b028 100644
--- a/core/lib/Drupal/Core/Database/Query/SelectExtender.php
+++ b/core/lib/Drupal/Core/Database/Query/SelectExtender.php
@@ -218,16 +218,8 @@ public function havingNotExists(SelectInterface $select) {
    * {@inheritdoc}
    */
   public function extend($extender_name) {
-    // We cannot call $this->query->extend(), because with multiple extenders
-    // you will replace all the earlier extenders with the last extender,
-    // instead of creating list of objects that extend each other.
-    $parts = explode('\\', $extender_name);
-    $class = end($parts);
-    $driver_class = $this->connection->getDriverClass($class);
-    if ($driver_class !== $class) {
-      return new $driver_class($this, $this->connection);
-    }
-    return new $extender_name($this, $this->connection);
+    $driver_override_class = $this->connection->getDriverOverrideClass($extender_name);
+    return new $driver_override_class($this, $this->connection);
   }
 
   /* Alter accessors to expose the query data to alter hooks. */
diff --git a/core/modules/system/tests/modules/database_statement_monitoring_test/src/LoggedStatementsTrait.php b/core/modules/system/tests/modules/database_statement_monitoring_test/src/LoggedStatementsTrait.php
index 677f4fd891..2265348abe 100644
--- a/core/modules/system/tests/modules/database_statement_monitoring_test/src/LoggedStatementsTrait.php
+++ b/core/modules/system/tests/modules/database_statement_monitoring_test/src/LoggedStatementsTrait.php
@@ -45,6 +45,7 @@ public function resetLoggedStatements() {
    */
   public function getDriverClass($class) {
     static $fixed_namespace;
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:9.3.0 and is removed from drupal:10.0.0. Use fully qualified class names in the methods that return database operations instead. See https://www.drupal.org/node/3137786', E_USER_DEPRECATED);
     if (!$fixed_namespace) {
       // Override because we've altered the namespace in
       // \Drupal\KernelTests\Core\Cache\EndOfTransactionQueriesTest::getDatabaseConnectionInfo()
diff --git a/core/tests/Drupal/KernelTests/Core/Database/SelectExtenderTest.php b/core/tests/Drupal/KernelTests/Core/Database/SelectExtenderTest.php
index 5a23f9a250..1614b8e6ad 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/SelectExtenderTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/SelectExtenderTest.php
@@ -123,7 +123,8 @@ public function testExtend(string $expected, string $namespace, string $extend):
 
     $mock_pdo = $this->createMock(StubPDO::class);
     $connection = new StubConnection($mock_pdo, ['namespace' => $namespace]);
-
+global $xxx;
+$xxx = TRUE;
     // Tests the method \Drupal\Core\Database\Query\Select::extend().
     $select = $connection->select('test')->extend($extend);
     $this->assertEquals($expected, get_class($select));
@@ -135,6 +136,7 @@ public function testExtend(string $expected, string $namespace, string $extend):
     // Tests the method \Drupal\Core\Database\Query\SelectExtender::extend().
     $select_extender_extended = $select_extender->extend($extend);
     $this->assertEquals($expected, get_class($select_extender_extended));
+$xxx = FALSE;
   }
 
 }
diff --git a/core/tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefakeWithAllCustomClasses/Connection.php b/core/tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefakeWithAllCustomClasses/Connection.php
index ecf7e5cccc..2ebb321c68 100644
--- a/core/tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefakeWithAllCustomClasses/Connection.php
+++ b/core/tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefakeWithAllCustomClasses/Connection.php
@@ -9,6 +9,15 @@
  */
 class Connection extends BaseConnection {
 
+  /**
+   * {@inheritdoc}
+   */
+  protected $driverOverridenClasses = [
+    'PagerSelectExtender' => PagerSelectExtender::class,
+    'TableSortExtender' => TableSortExtender::class,
+    'ViewsSearchQuery' => ViewsSearchQuery::class,
+  ];
+
   /**
    * {@inheritdoc}
    */
