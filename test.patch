diff --git a/core/assets/scaffold/files/default.settings.php b/core/assets/scaffold/files/default.settings.php
index ee3b49c0a8..02f3e5e7a8 100644
--- a/core/assets/scaffold/files/default.settings.php
+++ b/core/assets/scaffold/files/default.settings.php
@@ -222,6 +222,27 @@
  *     'prefix' => '',
  *   ];
  * @endcode
+ *
+ * Sample Database configuration format for a driver that is extending another
+ * database driver.
+ * @code
+ *   $databases['default']['default'] = [
+ *     'driver' => 'my_driver',
+ *     'namespace' => 'Drupal\my_module\Driver\Database\my_driver',
+ *     'autoload' => 'modules/my_module/src/Driver/Database/my_driver/',
+ *     'database' => 'databasename',
+ *     'username' => 'sqlusername',
+ *     'password' => 'sqlpassword',
+ *     'host' => 'localhost',
+ *     'prefix' => '',
+ *     'dependencies' => [
+ *       'parent_module' => [
+ *         'namespace' => 'Drupal\parent_module',
+ *         'autoload' => 'core/modules/parent_module/src/',
+ *       ],
+ *     ],
+ *   ];
+ * @endcode
  */
 
 /**
diff --git a/core/core.services.yml b/core/core.services.yml
index 6b972c88d4..25758f63af 100644
--- a/core/core.services.yml
+++ b/core/core.services.yml
@@ -550,6 +550,9 @@ services:
   extension.list.theme_engine:
     class: Drupal\Core\Extension\ThemeEngineExtensionList
     arguments: ['%app.root%', 'theme_engine', '@cache.default', '@info_parser', '@module_handler', '@state', '%install_profile%']
+  extension.list.database_driver:
+    class: Drupal\Core\Extension\DatabaseDriverList
+    arguments: ['%app.root%', 'database_driver', '@cache.default']
   extension.path.resolver:
     class: Drupal\Core\Extension\ExtensionPathResolver
     arguments: ['@extension.list.module', '@extension.list.profile', '@extension.list.theme', '@extension.list.theme_engine']
diff --git a/core/includes/install.inc b/core/includes/install.inc
index 63b5ee5589..f3d091d398 100644
--- a/core/includes/install.inc
+++ b/core/includes/install.inc
@@ -165,61 +165,24 @@ function drupal_detect_database_types() {
  *   An array of available database driver installer objects.
  */
 function drupal_get_database_types() {
-  $databases = [];
-  $drivers = [];
-
-  // The internal database driver name is any valid PHP identifier.
-  $mask = ExtensionDiscovery::PHP_FUNCTION_PATTERN;
-
-  // Find drivers in the Drupal\Driver namespace.
-  // @todo remove discovering in the Drupal\Driver namespace in D10.
-  /** @var \Drupal\Core\File\FileSystemInterface $file_system */
-  $file_system = \Drupal::service('file_system');
-  $files = [];
-  if (is_dir(DRUPAL_ROOT . '/drivers/lib/Drupal/Driver/Database')) {
-    $files = $file_system->scanDirectory(DRUPAL_ROOT . '/drivers/lib/Drupal/Driver/Database/', $mask, ['recurse' => FALSE]);
-  }
-  foreach ($files as $file) {
-    if (file_exists($file->uri . '/Install/Tasks.php')) {
-      // The namespace doesn't need to be added here, because
-      // db_installer_object() will find it.
-      $drivers[$file->filename] = NULL;
-    }
-  }
-
-  // Find drivers in Drupal module namespaces.
   /** @var \Composer\Autoload\ClassLoader $class_loader */
   $class_loader = \Drupal::service('class_loader');
-  // We cannot use the file cache because it does not always exist.
-  $extension_discovery = new ExtensionDiscovery(DRUPAL_ROOT, FALSE, []);
-  $modules = $extension_discovery->scan('module');
-  foreach ($modules as $module) {
-    $module_driver_path = DRUPAL_ROOT . '/' . $module->getPath() . '/src/Driver/Database';
-    if (is_dir($module_driver_path)) {
-      $driver_files = $file_system->scanDirectory($module_driver_path, $mask, ['recurse' => FALSE]);
-      foreach ($driver_files as $driver_file) {
-        $tasks_file = $module_driver_path . '/' . $driver_file->filename . '/Install/Tasks.php';
-        if (file_exists($tasks_file)) {
-          $namespace = 'Drupal\\' . $module->getName() . '\\Driver\\Database\\' . $driver_file->filename;
-
-          // Add the driver with its own classes' namespace.
-          $drivers[$driver_file->filename] = $namespace;
-
-          // The directory needs to be added to the autoloader, because this is
-          // early in the installation process: the module hasn't been enabled
-          // yet and the database connection info array (including its 'autoload'
-          // key) hasn't been created yet.
-          $class_loader->addPsr4($namespace . '\\', $module->getPath() . '/src/Driver/Database/' . $driver_file->filename);
-        }
-      }
-    }
-  }
 
-  foreach ($drivers as $driver => $namespace) {
-    $installer_class = $namespace . "\\Install\\Tasks";
+  // Find installable database drivers in modules.
+  $databases = [];
+  foreach (Database::getDriverList()->getList() as $driver) {
+    // The directory needs to be added to the autoloader, because this is early
+    // in the installation process: the module hasn't been enabled yet and the
+    // database connection info array (including its 'autoload' key) hasn't been
+    // created yet.
+    $class_loader->addPsr4($driver->getNamespace() . '\\', $driver->getPath());
+    foreach (($driver->getAutoloadInfo()['dependencies'] ?? []) as $dependency) {
+      $class_loader->addPsr4($dependency['namespace'] . '\\', $dependency['autoload']);
+    }
+    $installer_class = $driver->getNamespace() . "\\Install\\Tasks";
     $installer = new $installer_class();
     if ($installer->installable()) {
-      $databases[$driver] = $installer;
+      $databases[$driver->getName()] = $installer;
     }
   }
 
diff --git a/core/lib/Drupal/Core/Database/Database.php b/core/lib/Drupal/Core/Database/Database.php
index 9b5364942b..bab814ac80 100644
--- a/core/lib/Drupal/Core/Database/Database.php
+++ b/core/lib/Drupal/Core/Database/Database.php
@@ -3,7 +3,9 @@
 namespace Drupal\Core\Database;
 
 use Composer\Autoload\ClassLoader;
+use Drupal\Core\Extension\DatabaseDriverList;
 use Drupal\Core\Extension\ExtensionDiscovery;
+use Drupal\Core\Cache\NullBackend;
 
 /**
  * Primary front-controller for the database system.
@@ -320,6 +322,18 @@ final public static function addConnectionInfo($key, $target, array $info, $clas
       // for the driver.
       if (isset($info['autoload']) && $class_loader && $app_root) {
         $class_loader->addPsr4($info['namespace'] . '\\', $app_root . '/' . $info['autoload']);
+
+        // When the database driver is extending from other database drivers,
+        // then add autoload directory for the parent database driver modules
+        // as well.
+        if (!empty($info['dependencies'])) {
+          assert(is_array($info['dependencies']));
+          foreach ($info['dependencies'] as $dependency) {
+            if (isset($dependency['namespace']) && isset($dependency['autoload'])) {
+              $class_loader->addPsr4($dependency['namespace'] . '\\', $app_root . '/' . $dependency['autoload']);
+            }
+          }
+        }
       }
     }
   }
@@ -524,12 +538,11 @@ public static function convertDbUrlToConnectionInfo($url, $root, ?bool $include_
     if (preg_match('/^(.*):\/\//', $url, $matches) !== 1) {
       throw new \InvalidArgumentException("Missing scheme in URL '$url'");
     }
-    $driver = $matches[1];
+    $driverName = $matches[1];
 
     // Determine if the database driver is provided by a module.
     // @todo https://www.drupal.org/project/drupal/issues/3250999. Refactor when
     // all database drivers are provided by modules.
-    $module = NULL;
     $connection_class = NULL;
     $url_components = parse_url($url);
     $url_component_query = $url_components['query'] ?? '';
@@ -537,28 +550,37 @@ public static function convertDbUrlToConnectionInfo($url, $root, ?bool $include_
 
     // Add the module key for core database drivers when the module key is not
     // set.
-    if (!isset($query['module']) && in_array($driver, ['mysql', 'pgsql', 'sqlite'], TRUE)) {
-      $query['module'] = $driver;
+    if (!isset($query['module']) && in_array($driverName, ['mysql', 'pgsql', 'sqlite'], TRUE)) {
+      $query['module'] = $driverName;
     }
 
     if (isset($query['module']) && $query['module']) {
-      $module = $query['module'];
+      $driver = self::getDriverList()->scanTestDrivers($include_test_drivers)->get($query['module'] . '\\' . $driverName);
+
       // Set up an additional autoloader. We don't use the main autoloader as
       // this method can be called before Drupal is installed and is never
       // called during regular runtime.
-      $namespace = "Drupal\\$module\\Driver\\Database\\$driver";
-      $psr4_base_directory = Database::findDriverAutoloadDirectory($namespace, $root, $include_test_drivers);
       $additional_class_loader = new ClassLoader();
-      $additional_class_loader->addPsr4($namespace . '\\', $psr4_base_directory);
+      $additional_class_loader->addPsr4($driver->getNamespace() . '\\', $driver->getPath());
+      $connection_class = $driver->getNamespace() . '\\Connection';
+
+      // When the database driver is extending another database driver, then
+      // add autoload info for the parent database driver as well.
+      $autoloadInfo = $driver->getAutoloadInfo();
+      if (isset($autoloadInfo['dependencies'])) {
+        foreach ($autoloadInfo['dependencies'] as $dependency) {
+          $additional_class_loader->addPsr4($dependency['namespace'] . '\\', $dependency['autoload']);
+        }
+      }
+
       $additional_class_loader->register(TRUE);
-      $connection_class = $namespace . '\\Connection';
     }
 
-    if (!$module) {
+    if (!isset($query['module'])) {
       // Determine the connection class to use. Discover if the URL has a valid
       // driver scheme for a Drupal 8 style custom driver.
       // @todo Remove this in Drupal 10.
-      $connection_class = "Drupal\\Driver\\Database\\{$driver}\\Connection";
+      $connection_class = "Drupal\\Driver\\Database\\{$driverName}\\Connection";
     }
 
     if (!class_exists($connection_class)) {
@@ -570,13 +592,28 @@ public static function convertDbUrlToConnectionInfo($url, $root, ?bool $include_
     // If the driver is provided by a module add the necessary information to
     // autoload the code.
     // @see \Drupal\Core\Site\Settings::initialize()
-    if (isset($psr4_base_directory)) {
-      $options['autoload'] = $psr4_base_directory;
+    if (isset($autoloadInfo)) {
+      $options['autoload'] = $driver->getPath() . DIRECTORY_SEPARATOR;
+      if (isset($autoloadInfo['dependencies'])) {
+        $options['dependencies'] = $autoloadInfo['dependencies'];
+      }
     }
 
     return $options;
   }
 
+  /**
+   * @todo
+   */
+  public static function getDriverList(): DatabaseDriverList {
+    if (\Drupal::hasContainer() && \Drupal::hasService('extension.list.database_driver')) {
+      return \Drupal::service('extension.list.database_driver');
+    }
+    else {
+      return new DatabaseDriverList(DRUPAL_ROOT, 'database_driver', new NullBackend('database_driver'));
+    }
+  }
+
   /**
    * Finds the directory to add to the autoloader for the driver's namespace.
    *
@@ -631,8 +668,14 @@ public static function convertDbUrlToConnectionInfo($url, $root, ?bool $include_
    *
    * @throws \RuntimeException
    *   Exception thrown when a module provided database driver does not exist.
+   *
+   * @deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use
+   *   Database::getDriverAutoloadInfo() instead.
+   *
+   * @see https://www.drupal.org/node/3258175
    */
   public static function findDriverAutoloadDirectory($namespace, $root, ?bool $include_test_drivers = NULL) {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use Database::getDriverAutoloadInfo() instead. See https://www.drupal.org/node/3258175', E_USER_DEPRECATED);
     // As explained by this method's documentation, return FALSE if the
     // namespace is not a sub-namespace of a Drupal module.
     if (!static::isWithinModuleNamespace($namespace)) {
@@ -703,9 +746,9 @@ public static function getConnectionInfoAsUrl($key = 'default') {
    *   TRUE if the passed in namespace is a sub-namespace of a Drupal module's
    *   namespace.
    *
-   * @todo https://www.drupal.org/project/drupal/issues/3125476 Remove if we
-   *   add this to the extension API or if
-   *   \Drupal\Core\Database\Database::getConnectionInfoAsUrl() is removed.
+   * @todo remove in Drupal 11.
+   *
+   * @see https://www.drupal.org/node/3256524
    */
   private static function isWithinModuleNamespace(string $namespace) {
     [$first, $second] = explode('\\', $namespace, 3);
diff --git a/core/lib/Drupal/Core/Extension/DatabaseDriver.php b/core/lib/Drupal/Core/Extension/DatabaseDriver.php
new file mode 100644
index 0000000000..80d286f203
--- /dev/null
+++ b/core/lib/Drupal/Core/Extension/DatabaseDriver.php
@@ -0,0 +1,141 @@
+<?php
+
+namespace Drupal\Core\Extension;
+
+/**
+ * Defines a database driver extension object.
+ */
+class DatabaseDriver extends Extension {
+
+  /**
+   * Constructs a new DatabaseDriver object.
+   *
+   * @param string $root
+   *   The app root.
+   * @param \Drupal\Core\Extension\Extension $module
+   *   The module containing the database driver.
+   * @param string $driverName
+   *   The database driver name.
+   * @param \Drupal\Core\Extension\Extension[] $discoveredModules
+   *   The modules discovered in the installation.
+   */
+  public function __construct(
+    string $root,
+    protected Extension $module,
+    protected string $driverName,
+    protected array $discoveredModules) {
+    $this->root = $root;
+    $this->type = 'database_driver';
+  }
+
+  /**
+   * Returns the Extension object of the module containing the database driver.
+   */
+  public function getModule(): Extension {
+    return $this->module;
+  }
+
+  /**
+   * Returns the PHP namespace of the database driver.
+   */
+  public function getNamespace(): string {
+    return "Drupal\\" . $this->getModule()->getName() . "\\Driver\\Database\\" . $this->getName();
+  }
+
+  // phpcs:disable
+  /**
+   * Returns an array with the driver's autoload information.
+   *
+   * @return array{
+   *     'namespace': string,
+   *     'autoload': string,
+   *     'dependencies': array{'autoload': string, 'namespace': string},
+   *   }
+   */
+  // phpcs:enable
+  public function getAutoloadInfo(): array {
+    $autoloadInfo = [
+      'namespace' => $this->getNamespace(),
+      'autoload' => $this->getPath() . DIRECTORY_SEPARATOR,
+    ];
+
+    $moduleInfo = (new InfoParser($this->root))->parse($this->root . DIRECTORY_SEPARATOR . $this->getModule()->getPathname());
+    foreach (($moduleInfo['dependencies'] ?? []) as $dependency) {
+      $dependencyData = Dependency::createFromString($dependency);
+      $dependencyName = $dependencyData->getName();
+      if (empty($this->discoveredModules[$dependencyName])) {
+        throw new \RuntimeException(sprintf("Cannot find the module '%s' that is required by module '%s'", $dependencyName, $this->getModule()->getName()));
+      }
+      $autoloadInfo['dependencies'][$dependencyName] = [
+        'namespace' => "Drupal\\{$dependencyName}",
+        'autoload' => $this->discoveredModules[$dependencyName]->getPath() . '/src/',
+      ];
+    }
+
+    return $autoloadInfo;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getName() {
+    return $this->driverName;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getPath() {
+    return $this->getModule()->getPath() . DIRECTORY_SEPARATOR . 'src' . DIRECTORY_SEPARATOR . 'Driver' . DIRECTORY_SEPARATOR . 'Database' . DIRECTORY_SEPARATOR . $this->getName();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getPathname() {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFilename() {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getExtensionPathname() {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getExtensionFilename() {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function load() {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function isExperimental(): bool {
+    return $this->getModule()->isExperimental();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function isObsolete(): bool {
+    return $this->getModule()->isObsolete();
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Extension/DatabaseDriverList.php b/core/lib/Drupal/Core/Extension/DatabaseDriverList.php
new file mode 100644
index 0000000000..ef9724ddfd
--- /dev/null
+++ b/core/lib/Drupal/Core/Extension/DatabaseDriverList.php
@@ -0,0 +1,180 @@
+<?php
+
+namespace Drupal\Core\Extension;
+
+use Drupal\Core\Cache\CacheBackendInterface;
+
+/**
+ * Provides a list of available database drivers.
+ *
+ * @internal
+ *   This class is not yet stable and therefore there are no guarantees that the
+ *   internal implementations including constructor signature and protected
+ *   properties / methods will not change over time. This will be reviewed after
+ *   https://www.drupal.org/project/drupal/issues/2940481
+ */
+class DatabaseDriverList extends ExtensionList {
+
+  private ?bool $includeTestDrivers = NULL;
+
+  /**
+   * Constructs a new instance.
+   *
+   * @param string $root
+   *   The app root.
+   * @param string $type
+   *   The extension type.
+   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   *   The cache.
+   */
+  public function __construct($root, $type, CacheBackendInterface $cache) {
+    $this->root = $root;
+    $this->type = $type;
+    $this->cache = $cache;
+  }
+
+  /**
+   * @todo
+   */
+  public function scanTestDrivers(?bool $includeTestDrivers): self {
+    $this->includeTestDrivers = $includeTestDrivers;
+    return $this;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getExtensionDiscovery() {
+    return new ExtensionDiscovery($this->root, FALSE);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function doScanExtensions() {
+    return $this->getExtensionDiscovery()->scan('module', $this->includeTestDrivers);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function doList(): array {
+    // Determine the modules that contain at least one installable database
+    // driver.
+    $discoveredModules = $this->doScanExtensions();
+    $extensions = [];
+    foreach ($discoveredModules as $module) {
+      $moduleDriverDirectory = $this->root . DIRECTORY_SEPARATOR . $module->getPath() . DIRECTORY_SEPARATOR . 'src' . DIRECTORY_SEPARATOR . 'Driver' . DIRECTORY_SEPARATOR . 'Database';
+      if (is_dir($moduleDriverDirectory)) {
+        // Use directory iterator to avoid services.
+        $directoryIterator = new \DirectoryIterator($moduleDriverDirectory);
+        foreach ($directoryIterator as $fileInfo) {
+          if ($fileInfo->isDir() && !$fileInfo->isDot() && file_exists($moduleDriverDirectory . DIRECTORY_SEPARATOR . $fileInfo->getFilename() . DIRECTORY_SEPARATOR . 'Install' . DIRECTORY_SEPARATOR . 'Tasks.php')) {
+            $extensions[$module->getName() . '\\' . $fileInfo->getFilename()] = new DatabaseDriver($this->root, $module, $fileInfo->getFilename(), $discoveredModules);
+          }
+        }
+      }
+    }
+
+    return $extensions;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getName($extension_name) {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getExtensionInfo($extension_name) {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getAllAvailableInfo() {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getInstalledExtensionNames() {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getAllInstalledInfo() {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function recalculateInfo() {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getPathnames() {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function recalculatePathnames() {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setPathname($extension_name, $pathname) {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getPathname($extension_name) {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getPath($extension_name) {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function createExtensionInfo(Extension $extension) {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function checkIncompatibility($name) {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function sortByName(Extension $a, Extension $b): int {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Extension/ExtensionDiscovery.php b/core/lib/Drupal/Core/Extension/ExtensionDiscovery.php
index ce6ecbddfa..64c995ae35 100644
--- a/core/lib/Drupal/Core/Extension/ExtensionDiscovery.php
+++ b/core/lib/Drupal/Core/Extension/ExtensionDiscovery.php
@@ -228,6 +228,9 @@ public function scan($type, $include_tests = NULL) {
    */
   public function setProfileDirectoriesFromSettings() {
     $this->profileDirectories = [];
+    if (!\Drupal::hasContainer() || !\Drupal::getContainer()->hasParameter('install_profile')) {
+      return $this;
+    }
     if ($profile = \Drupal::installProfile()) {
       $this->profileDirectories[] = \Drupal::service('extension.list.profile')->getPath($profile);
     }
diff --git a/core/lib/Drupal/Core/Extension/ExtensionList.php b/core/lib/Drupal/Core/Extension/ExtensionList.php
index 0ac671965b..1c052fd713 100644
--- a/core/lib/Drupal/Core/Extension/ExtensionList.php
+++ b/core/lib/Drupal/Core/Extension/ExtensionList.php
@@ -21,7 +21,9 @@
 abstract class ExtensionList {
 
   /**
-   * The type of the extension: "module", "theme" or "profile".
+   * The type of the extension.
+   *
+   * Possible values: "module", "theme", "profile" or "database_driver".
    *
    * @var string
    */
diff --git a/core/lib/Drupal/Core/Installer/Form/SiteSettingsForm.php b/core/lib/Drupal/Core/Installer/Form/SiteSettingsForm.php
index dc26547122..1990613918 100644
--- a/core/lib/Drupal/Core/Installer/Form/SiteSettingsForm.php
+++ b/core/lib/Drupal/Core/Installer/Form/SiteSettingsForm.php
@@ -154,20 +154,15 @@ public function buildForm(array $form, FormStateInterface $form_state) {
    * {@inheritdoc}
    */
   public function validateForm(array &$form, FormStateInterface $form_state) {
-    $driver = $form_state->getValue('driver');
-    $database = $form_state->getValue($driver);
-    $drivers = drupal_get_database_types();
-    $reflection = new \ReflectionClass($drivers[$driver]);
-    $install_namespace = $reflection->getNamespaceName();
-    // Cut the trailing \Install from namespace.
-    $database['namespace'] = substr($install_namespace, 0, strrpos($install_namespace, '\\'));
-    $database['driver'] = $driver;
-    // See default.settings.php for an explanation of the 'autoload' key.
-    if ($autoload = Database::findDriverAutoloadDirectory($database['namespace'], DRUPAL_ROOT)) {
-      $database['autoload'] = $autoload;
-    }
+    $driverName = $form_state->getValue('driver');
+    [, $module] = explode('\\', get_class(drupal_get_database_types()[$driverName]));
 
+    $database = $form_state->getValue($driverName);
+    $database['driver'] = $driverName;
+    $driver = \Drupal::service('extension.list.database_driver')->get($module . '\\' . $driverName);
+    $database = array_merge($database, $driver->getAutoloadInfo());
     $form_state->set('database', $database);
+
     foreach ($this->getDatabaseErrors($database, $form_state->getValue('settings_file')) as $name => $message) {
       $form_state->setErrorByName($name, $message);
     }
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Connection.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Connection.php
index a87a0d3869..9de6eda72c 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Connection.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Connection.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Connection.php';
-
 use Drupal\mysql\Driver\Database\mysql\Connection as CoreConnection;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Insert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Insert.php
index 8c15b608fe..5c253174bc 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Insert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Insert.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Insert.php';
-
 use Drupal\mysql\Driver\Database\mysql\Insert as CoreInsert;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Install/Tasks.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Install/Tasks.php
index 2b20ba147f..4a6f247bb9 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Install/Tasks.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Install/Tasks.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysql\Install;
 
-include_once dirname(__DIR__, 9) . '/mysql/src/Driver/Database/mysql/Install/Tasks.php';
-
 use Drupal\mysql\Driver\Database\mysql\Install\Tasks as CoreTasks;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Schema.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Schema.php
index b3a2dc01fe..bc1bf9eec2 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Schema.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Schema.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Schema.php';
-
 use Drupal\mysql\Driver\Database\mysql\Schema as CoreSchema;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Upsert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Upsert.php
index dd2d71af8c..d2bd76e6ea 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Upsert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Upsert.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Upsert.php';
-
 use Drupal\mysql\Driver\Database\mysql\Upsert as CoreUpsert;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Connection.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Connection.php
index 6ef463cb15..447c3acd48 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Connection.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Connection.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Connection.php';
-
 use Drupal\mysql\Driver\Database\mysql\Connection as CoreConnection;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Insert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Insert.php
index f1a54e3cac..f29049d5af 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Insert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Insert.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Insert.php';
-
 use Drupal\mysql\Driver\Database\mysql\Insert as CoreInsert;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Install/Tasks.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Install/Tasks.php
index 647268c7b8..42a7c52d7e 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Install/Tasks.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Install/Tasks.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion\Install;
 
-include_once dirname(__DIR__, 9) . '/mysql/src/Driver/Database/mysql/Install/Tasks.php';
-
 use Drupal\mysql\Driver\Database\mysql\Install\Tasks as CoreTasks;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Schema.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Schema.php
index 4e73921584..0b608b4baf 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Schema.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Schema.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Schema.php';
-
 use Drupal\mysql\Driver\Database\mysql\Schema as CoreSchema;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Upsert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Upsert.php
index 2513c7357b..58a792b644 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Upsert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Upsert.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Upsert.php';
-
 use Drupal\mysql\Driver\Database\mysql\Upsert as CoreUpsert;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Connection.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Connection.php
index e45d48ade9..f9f15f091d 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Connection.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Connection.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Connection.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Connection as CoreConnection;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Delete.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Delete.php
index 92081533cb..29840d0dfa 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Delete.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Delete.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Delete.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Delete as CoreDelete;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Insert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Insert.php
index 957373ffc3..a35e74d445 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Insert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Insert.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Insert.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Insert as CoreInsert;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Install/Tasks.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Install/Tasks.php
index a8c096438f..51fcd27967 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Install/Tasks.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Install/Tasks.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql\Install;
 
-include_once dirname(__DIR__, 9) . '/pgsql/src/Driver/Database/pgsql/Install/Tasks.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Install\Tasks as CoreTasks;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Schema.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Schema.php
index df0c45c222..522311cdc2 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Schema.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Schema.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Schema.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Schema as CoreSchema;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Select.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Select.php
index b11fbefe11..12fe909b2e 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Select.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Select.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Select.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Select as CoreSelect;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Truncate.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Truncate.php
index 61b58711ff..416c082563 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Truncate.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Truncate.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Truncate.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Truncate as CoreTruncate;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Update.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Update.php
index e30ace4bc8..48d3f0380e 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Update.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Update.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Update.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Update as CoreUpdate;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Upsert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Upsert.php
index b36b039bf9..93e51d1ae0 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Upsert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Upsert.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Upsert.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Upsert as CoreUpsert;
 
 /**
diff --git a/core/modules/system/tests/src/Functional/System/DatabaseDriverProvidedByModuleTest.php b/core/modules/system/tests/src/Functional/System/DatabaseDriverProvidedByModuleTest.php
index e81ced70d3..450651c171 100644
--- a/core/modules/system/tests/src/Functional/System/DatabaseDriverProvidedByModuleTest.php
+++ b/core/modules/system/tests/src/Functional/System/DatabaseDriverProvidedByModuleTest.php
@@ -50,6 +50,12 @@ public function testDatabaseDriverIsProvidedByModuleButTheModuleIsNotEnabled():
       'driver' => 'Drivertest' . ucfirst($driver),
       'namespace' => 'Drupal\\driver_test\\Driver\\Database\\Drivertest' . ucfirst($driver),
       'autoload' => 'core/modules/system/tests/modules/driver_test/src/Driver/Database/Drivertest' . ucfirst($driver),
+      'dependencies' => [
+        $driver => [
+          'namespace' => "Drupal\\{$driver}",
+          'autoload' => "core/modules/$driver/src/",
+        ],
+      ],
     ];
     if (isset($connection_info['default']['port'])) {
       $database['port'] = $connection_info['default']['port'];
diff --git a/core/modules/system/tests/src/Functional/Update/DatabaseVersionCheckUpdateTest.php b/core/modules/system/tests/src/Functional/Update/DatabaseVersionCheckUpdateTest.php
index 2202dc000b..d188d2e883 100644
--- a/core/modules/system/tests/src/Functional/Update/DatabaseVersionCheckUpdateTest.php
+++ b/core/modules/system/tests/src/Functional/Update/DatabaseVersionCheckUpdateTest.php
@@ -39,7 +39,7 @@ public function testUpdate() {
     // Use a database driver that reports a fake database version that does
     // not meet requirements. Only change the necessary settings in the database
     // settings array so that run-tests.sh continues to work.
-    $autoload = Database::findDriverAutoloadDirectory('Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion', \Drupal::root());
+    $autoloading = \Drupal::service('extension.list.database_driver')->get('driver_test\\DrivertestMysqlDeprecatedVersion')->getAutoloadInfo();
     $settings['databases']['default']['default']['driver'] = (object) [
       'value' => 'DrivertestMysqlDeprecatedVersion',
       'required' => TRUE,
@@ -49,7 +49,11 @@ public function testUpdate() {
       'required' => TRUE,
     ];
     $settings['databases']['default']['default']['autoload'] = (object) [
-      'value' => $autoload,
+      'value' => $autoloading['autoload'],
+      'required' => TRUE,
+    ];
+    $settings['databases']['default']['default']['dependencies'] = (object) [
+      'value' => $autoloading['dependencies'],
       'required' => TRUE,
     ];
     $settings['settings'] = [
diff --git a/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php b/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php
index 2b9656e70c..86050ef22a 100644
--- a/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php
+++ b/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php
@@ -39,581 +39,6 @@ class BrowserTestBaseTest extends BrowserTestBase {
    */
   protected $defaultTheme = 'starterkit_theme';
 
-  /**
-   * Tests basic page test.
-   */
-  public function testGoTo() {
-    $account = $this->drupalCreateUser();
-    $this->drupalLogin($account);
-
-    // Visit a Drupal page that requires login.
-    $this->drupalGet('test-page');
-    $this->assertSession()->statusCodeEquals(200);
-
-    // Test page contains some text.
-    $this->assertSession()->pageTextContains('Test page text.');
-
-    // Check that returned plain text is correct.
-    $text = $this->getTextContent();
-    $this->assertStringContainsString('Test page text.', $text);
-    $this->assertStringNotContainsString('</html>', $text);
-    // Ensure Drupal Javascript settings are not part of the page text.
-    $this->assertArrayHasKey('currentPathIsAdmin', $this->getDrupalSettings()['path']);
-    $this->assertStringNotContainsString('currentPathIsAdmin', $text);
-
-    // Response includes cache tags that we can assert.
-    $this->assertSession()->responseHeaderExists('X-Drupal-Cache-Tags');
-    $this->assertSession()->responseHeaderEquals('X-Drupal-Cache-Tags', 'http_response rendered');
-
-    // Test that we can read the JS settings.
-    $js_settings = $this->getDrupalSettings();
-    $this->assertSame('azAZ09();.,\\\/-_{}', $js_settings['test-setting']);
-
-    // Test drupalGet with a url object.
-    $url = Url::fromRoute('test_page_test.render_title');
-    $this->drupalGet($url);
-    $this->assertSession()->statusCodeEquals(200);
-
-    // Test page contains some text.
-    $this->assertSession()->pageTextContains('Hello Drupal');
-
-    // Test that setting headers with drupalGet() works.
-    $this->drupalGet('system-test/header', [], [
-      'Test-Header' => 'header value',
-    ]);
-    $this->assertSession()->responseHeaderExists('Test-Header');
-    $this->assertSession()->responseHeaderEquals('Test-Header', 'header value');
-
-    // Ensure that \Drupal\Tests\UiHelperTrait::isTestUsingGuzzleClient() works
-    // as expected.
-    $this->assertTrue($this->isTestUsingGuzzleClient());
-  }
-
-  /**
-   * Tests drupalGet().
-   */
-  public function testDrupalGet() {
-    $this->drupalGet('test-page');
-    $this->assertSession()->statusCodeEquals(200);
-    $this->assertSession()->addressEquals('test-page');
-    $this->drupalGet('/test-page');
-    $this->assertSession()->statusCodeEquals(200);
-    $this->assertSession()->addressEquals('test-page');
-    $this->drupalGet('/test-page/');
-    $this->assertSession()->statusCodeEquals(200);
-    $this->assertSession()->addressEquals('/test-page/');
-  }
-
-  /**
-   * Tests basic form functionality.
-   */
-  public function testForm() {
-    // Ensure the proper response code for a _form route.
-    $this->drupalGet('form-test/object-builder');
-    $this->assertSession()->statusCodeEquals(200);
-
-    // Ensure the form and text field exist.
-    $this->assertSession()->elementExists('css', 'form#form-test-form-test-object');
-    $this->assertSession()->fieldExists('bananas');
-
-    // Check that the hidden field exists and has a specific value.
-    $this->assertSession()->hiddenFieldExists('strawberry');
-    $this->assertSession()->hiddenFieldExists('red');
-    $this->assertSession()->hiddenFieldExists('redstrawberryhiddenfield');
-    $this->assertSession()->hiddenFieldValueNotEquals('strawberry', 'brown');
-    $this->assertSession()->hiddenFieldValueEquals('strawberry', 'red');
-
-    // Check that a hidden field does not exist.
-    $this->assertSession()->hiddenFieldNotExists('bananas');
-    $this->assertSession()->hiddenFieldNotExists('pineapple');
-
-    $edit = ['bananas' => 'green'];
-    $this->submitForm($edit, 'Save', 'form-test-form-test-object');
-
-    $config_factory = $this->container->get('config.factory');
-    $value = $config_factory->get('form_test.object')->get('bananas');
-    $this->assertSame('green', $value);
-
-    // Test submitForm().
-    $this->drupalGet('form-test/object-builder');
-
-    // Submit the form using the button label.
-    $this->submitForm(['bananas' => 'red'], 'Save');
-    $value = $config_factory->get('form_test.object')->get('bananas');
-    $this->assertSame('red', $value);
-
-    $this->submitForm([], 'Save');
-    $value = $config_factory->get('form_test.object')->get('bananas');
-    $this->assertSame('', $value);
-
-    // Submit the form using the button id.
-    $this->submitForm(['bananas' => 'blue'], 'edit-submit');
-    $value = $config_factory->get('form_test.object')->get('bananas');
-    $this->assertSame('blue', $value);
-
-    // Submit the form using the button name.
-    $this->submitForm(['bananas' => 'purple'], 'op');
-    $value = $config_factory->get('form_test.object')->get('bananas');
-    $this->assertSame('purple', $value);
-
-    // Test submitForm() with no-html response.
-    $this->drupalGet('form_test/form-state-values-clean');
-    $this->submitForm([], 'Submit');
-    $values = Json::decode($this->getSession()->getPage()->getContent());
-    $this->assertSame(1000, $values['beer']);
-
-    // Test submitForm() with form by HTML id.
-    $this->drupalCreateContentType(['type' => 'page']);
-    $this->drupalLogin($this->drupalCreateUser(['create page content']));
-    $this->drupalGet('form-test/two-instances-of-same-form');
-    $this->getSession()->getPage()->fillField('edit-title-0-value', 'form1');
-    $this->getSession()->getPage()->fillField('edit-title-0-value--2', 'form2');
-    $this->submitForm([], 'Save', 'node-page-form--2');
-    $this->assertSession()->pageTextContains('Page form2 has been created.');
-  }
-
-  /**
-   * Tests clickLink() functionality.
-   */
-  public function testClickLink() {
-    $this->drupalGet('test-page');
-    $this->clickLink('Visually identical test links');
-    $this->assertStringContainsString('user/login', $this->getSession()->getCurrentUrl());
-    $this->drupalGet('test-page');
-    $this->clickLink('Visually identical test links', 0);
-    $this->assertStringContainsString('user/login', $this->getSession()->getCurrentUrl());
-    $this->drupalGet('test-page');
-    $this->clickLink('Visually identical test links', 1);
-    $this->assertStringContainsString('user/register', $this->getSession()->getCurrentUrl());
-  }
-
-  public function testError() {
-    $this->expectException('\Exception');
-    $this->expectExceptionMessage('User notice: foo');
-    $this->drupalGet('test-error');
-  }
-
-  /**
-   * Tests linkExists() with pipe character (|) in locator.
-   *
-   * @see \Drupal\Tests\WebAssert::linkExists()
-   */
-  public function testPipeCharInLocator() {
-    $this->drupalGet('test-pipe-char');
-    $this->assertSession()->linkExists('foo|bar|baz');
-  }
-
-  /**
-   * Tests linkExistsExact() functionality.
-   *
-   * @see \Drupal\Tests\WebAssert::linkExistsExact()
-   */
-  public function testLinkExistsExact() {
-    $this->drupalGet('test-pipe-char');
-    $this->assertSession()->linkExistsExact('foo|bar|baz');
-  }
-
-  /**
-   * Tests linkExistsExact() functionality fail.
-   *
-   * @see \Drupal\Tests\WebAssert::linkExistsExact()
-   */
-  public function testInvalidLinkExistsExact() {
-    $this->drupalGet('test-pipe-char');
-    $this->expectException(ExpectationException::class);
-    $this->expectExceptionMessage('Link with label foo|bar found');
-    $this->assertSession()->linkExistsExact('foo|bar');
-  }
-
-  /**
-   * Tests linkNotExistsExact() functionality.
-   *
-   * @see \Drupal\Tests\WebAssert::linkNotExistsExact()
-   */
-  public function testLinkNotExistsExact() {
-    $this->drupalGet('test-pipe-char');
-    $this->assertSession()->linkNotExistsExact('foo|bar');
-  }
-
-  /**
-   * Tests responseHeaderDoesNotExist() functionality.
-   *
-   * @see \Drupal\Tests\WebAssert::responseHeaderDoesNotExist()
-   */
-  public function testResponseHeaderDoesNotExist() {
-    $this->drupalGet('test-pipe-char');
-    $this->assertSession()->responseHeaderDoesNotExist('Foo-Bar');
-  }
-
-  /**
-   * Tests linkNotExistsExact() functionality fail.
-   *
-   * @see \Drupal\Tests\WebAssert::linkNotExistsExact()
-   */
-  public function testInvalidLinkNotExistsExact() {
-    $this->drupalGet('test-pipe-char');
-    $this->expectException(ExpectationException::class);
-    $this->expectExceptionMessage('Link with label foo|bar|baz not found');
-    $this->assertSession()->linkNotExistsExact('foo|bar|baz');
-  }
-
-  /**
-   * Tests legacy text asserts.
-   */
-  public function testTextAsserts() {
-    $this->drupalGet('test-encoded');
-    $dangerous = 'Bad html <script>alert(123);</script>';
-    $sanitized = Html::escape($dangerous);
-    $this->assertSession()->responseNotContains($dangerous);
-    $this->assertSession()->responseContains($sanitized);
-  }
-
-  /**
-   * Tests legacy field asserts which use xpath directly.
-   */
-  public function testXpathAsserts() {
-    $this->drupalGet('test-field-xpath');
-    $this->assertSession()->elementTextContains('xpath', '//table/tbody/tr[2]/td[1]', 'one');
-
-    $this->assertSession()->fieldValueEquals('edit-name', 'Test name');
-    $this->assertSession()->fieldValueEquals('edit-options', '2');
-
-    $this->assertSession()->elementNotExists('xpath', '//notexisting');
-    $this->assertSession()->fieldValueNotEquals('edit-name', 'wrong value');
-
-    // Test that the assertion fails correctly.
-    try {
-      $this->assertSession()->fieldExists('notexisting');
-      $this->fail('The "notexisting" field was found.');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
-
-    try {
-      $this->assertSession()->fieldNotExists('edit-name');
-      $this->fail('The "edit-name" field was not found.');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
-  }
-
-  /**
-   * Tests field asserts using textfields.
-   */
-  public function testFieldAssertsForTextfields() {
-    $this->drupalGet('test-field-xpath');
-
-    // *** 1. fieldNotExists().
-    $this->assertSession()->fieldNotExists('invalid_name_and_id');
-
-    // Test that the assertion fails correctly when searching by name.
-    try {
-      $this->assertSession()->fieldNotExists('name');
-      $this->fail('The "name" field was not found based on name.');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
-
-    // Test that the assertion fails correctly when searching by id.
-    try {
-      $this->assertSession()->fieldNotExists('edit-name');
-      $this->fail('The "name" field was not found based on id.');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
-
-    // *** 2. fieldExists().
-    $this->assertSession()->fieldExists('name');
-    $this->assertSession()->fieldExists('edit-name');
-
-    // Test that the assertion fails correctly if the field does not exist.
-    try {
-      $this->assertSession()->fieldExists('invalid_name_and_id');
-      $this->fail('The "invalid_name_and_id" field was found.');
-    }
-    catch (ElementNotFoundException $e) {
-      // Expected exception; just continue testing.
-    }
-    // *** 3. assertNoFieldById().
-    $this->assertSession()->fieldValueNotEquals('name', 'not the value');
-    $this->assertSession()->fieldNotExists('notexisting');
-    // Test that the assertion fails correctly if no value is passed in.
-    try {
-      $this->assertSession()->fieldNotExists('edit-description');
-      $this->fail('The "description" field, with no value was not found.');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
-
-    // Test that the assertion fails correctly if a NULL value is passed in.
-    try {
-      $this->assertSession()->fieldNotExists('name', NULL);
-      $this->fail('The "name" field was not found.');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
-
-    // *** 4. assertFieldById().
-    $this->assertSession()->fieldExists('edit-name');
-    $this->assertSession()->fieldValueEquals('edit-name', 'Test name');
-    $this->assertSession()->fieldExists('edit-description');
-    $this->assertSession()->fieldValueEquals('edit-description', '');
-
-    // Test that the assertion fails correctly if no value is passed in.
-    try {
-      $this->assertSession()->fieldValueNotEquals('edit-name', '');
-    }
-    catch (ExpectationFailedException $e) {
-      // Expected exception; just continue testing.
-    }
-
-    // Test that the assertion fails correctly if the wrong value is passed in.
-    try {
-      $this->assertSession()->fieldValueNotEquals('edit-name', 'not the value');
-    }
-    catch (ExpectationFailedException $e) {
-      // Expected exception; just continue testing.
-    }
-
-    // *** 5. fieldValueNotEquals().
-    $this->assertSession()->fieldValueNotEquals('name', 'not the value');
-
-    // Test that the assertion fails correctly if given the right value.
-    try {
-      $this->assertSession()->fieldValueNotEquals('name', 'Test name');
-      $this->fail('fieldValueNotEquals failed to throw an exception.');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
-
-    // *** 6. fieldValueEquals().
-    $this->assertSession()->fieldValueEquals('name', 'Test name');
-    $this->assertSession()->fieldValueEquals('description', '');
-
-    // Test that the assertion fails correctly if given the wrong value.
-    try {
-      $this->assertSession()->fieldValueEquals('name', 'not the value');
-      $this->fail('fieldValueEquals failed to throw an exception.');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
-
-    // Test that text areas can contain new lines.
-    $this->assertSession()->fieldValueEquals('edit-test-textarea-with-newline', "Test text with\nnewline");
-  }
-
-  /**
-   * Tests legacy field asserts for button field type.
-   */
-  public function testFieldAssertsForButton() {
-    $this->drupalGet('test-field-xpath');
-
-    // Verify if the test passes with button ID.
-    $this->assertSession()->buttonExists('edit-save');
-    // Verify if the test passes with button Value.
-    $this->assertSession()->buttonExists('Save');
-    // Verify if the test passes with button Name.
-    $this->assertSession()->buttonExists('op');
-
-    // Verify if the test passes with button ID.
-    $this->assertSession()->buttonNotExists('i-do-not-exist');
-    // Verify if the test passes with button Value.
-    $this->assertSession()->buttonNotExists('I do not exist');
-    // Verify if the test passes with button Name.
-    $this->assertSession()->buttonNotExists('no');
-
-    // Test that multiple fields with the same name are validated correctly.
-    $this->assertSession()->buttonExists('duplicate_button');
-    $this->assertSession()->buttonExists('Duplicate button 1');
-    $this->assertSession()->buttonExists('Duplicate button 2');
-    $this->assertSession()->buttonNotExists('Rabbit');
-
-    try {
-      $this->assertSession()->buttonNotExists('Duplicate button 2');
-      $this->fail('The "duplicate_button" field with the value Duplicate button 2 was not found.');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
-  }
-
-  /**
-   * Tests legacy field asserts for checkbox field type.
-   */
-  public function testFieldAssertsForCheckbox() {
-    $this->drupalGet('test-field-xpath');
-
-    // Part 1 - Test by name.
-    // Test that checkboxes are found/not found correctly by name, when using
-    // TRUE or FALSE to match their 'checked' state.
-    $this->assertSession()->fieldExists('checkbox_enabled');
-    $this->assertSession()->fieldExists('checkbox_disabled');
-    $this->assertSession()->fieldValueEquals('checkbox_enabled', TRUE);
-    $this->assertSession()->fieldValueEquals('checkbox_disabled', FALSE);
-    $this->assertSession()->fieldValueNotEquals('checkbox_enabled', FALSE);
-    $this->assertSession()->fieldValueNotEquals('checkbox_disabled', TRUE);
-
-    // Test that we have legacy support.
-    $this->assertSession()->fieldValueEquals('checkbox_enabled', '1');
-    $this->assertSession()->fieldValueEquals('checkbox_disabled', '');
-
-    // Test that the assertion fails correctly if given the right value.
-    try {
-      $this->assertSession()->fieldValueNotEquals('checkbox_enabled', TRUE);
-      $this->fail('fieldValueNotEquals failed to throw an exception.');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
-
-    // Part 2 - Test by ID.
-    // Test that checkboxes are found/not found correctly by ID, when using
-    // TRUE or FALSE to match their 'checked' state.
-    $this->assertSession()->fieldValueEquals('edit-checkbox-enabled', TRUE);
-    $this->assertSession()->fieldValueEquals('edit-checkbox-disabled', FALSE);
-    $this->assertSession()->fieldValueNotEquals('edit-checkbox-enabled', FALSE);
-    $this->assertSession()->fieldValueNotEquals('edit-checkbox-disabled', TRUE);
-
-    // Test that checkboxes are found by ID, when using NULL to ignore the
-    // 'checked' state.
-    $this->assertSession()->fieldExists('edit-checkbox-enabled');
-    $this->assertSession()->fieldExists('edit-checkbox-disabled');
-
-    // Test that checkboxes are found by ID when passing no second parameter.
-    $this->assertSession()->fieldExists('edit-checkbox-enabled');
-    $this->assertSession()->fieldExists('edit-checkbox-disabled');
-
-    // Test that we have legacy support.
-    $this->assertSession()->fieldValueEquals('edit-checkbox-enabled', '1');
-    $this->assertSession()->fieldValueEquals('edit-checkbox-disabled', '');
-
-    // Test that the assertion fails correctly when using NULL to ignore state.
-    try {
-      $this->assertSession()->fieldNotExists('edit-checkbox-disabled', NULL);
-      $this->fail('The "edit-checkbox-disabled" field was not found by ID, using NULL value.');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
-
-    // Part 3 - Test the specific 'checked' assertions.
-    $this->assertSession()->checkboxChecked('edit-checkbox-enabled');
-    $this->assertSession()->checkboxNotChecked('edit-checkbox-disabled');
-
-    // Test that the assertion fails correctly with non-existent field id.
-    try {
-      $this->assertSession()->checkboxNotChecked('incorrect_checkbox_id');
-      $this->fail('The "incorrect_checkbox_id" field was found');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
-
-    // Test that the assertion fails correctly for a checkbox that is checked.
-    try {
-      $this->assertSession()->checkboxNotChecked('edit-checkbox-enabled');
-      $this->fail('The "edit-checkbox-enabled" field was not found in a checked state.');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
-
-    // Test that the assertion fails correctly for a checkbox that is not
-    // checked.
-    try {
-      $this->assertSession()->checkboxChecked('edit-checkbox-disabled');
-      $this->fail('The "edit-checkbox-disabled" field was found and checked.');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
-  }
-
-  /**
-   * Tests the ::cronRun() method.
-   */
-  public function testCronRun() {
-    $last_cron_time = \Drupal::state()->get('system.cron_last');
-    $this->cronRun();
-    $this->assertSession()->statusCodeEquals(204);
-    $next_cron_time = \Drupal::state()->get('system.cron_last');
-
-    $this->assertGreaterThan($last_cron_time, $next_cron_time);
-  }
-
-  /**
-   * Tests the Drupal install done in \Drupal\Tests\BrowserTestBase::setUp().
-   */
-  public function testInstall() {
-    $htaccess_filename = $this->tempFilesDirectory . '/.htaccess';
-    $this->assertFileExists($htaccess_filename);
-
-    // Ensure the update module is not installed.
-    $this->assertFalse(\Drupal::moduleHandler()->moduleExists('update'), 'The Update module is not installed.');
-  }
-
-  /**
-   * Tests the assumption that local time is in 'Australia/Sydney'.
-   */
-  public function testLocalTimeZone() {
-    $expected = 'Australia/Sydney';
-    // The 'Australia/Sydney' time zone is set in core/tests/bootstrap.php
-    $this->assertEquals($expected, date_default_timezone_get());
-
-    // The 'Australia/Sydney' time zone is also set in
-    // FunctionalTestSetupTrait::initConfig().
-    $config_factory = $this->container->get('config.factory');
-    $value = $config_factory->get('system.date')->get('timezone.default');
-    $this->assertEquals($expected, $value);
-
-    // Test that users have the correct time zone set.
-    $this->assertEquals($expected, $this->rootUser->getTimeZone());
-    $admin_user = $this->drupalCreateUser(['administer site configuration']);
-    $this->assertEquals($expected, $admin_user->getTimeZone());
-  }
-
-  /**
-   * Tests the ::checkForMetaRefresh() method.
-   */
-  public function testCheckForMetaRefresh() {
-    // Disable following redirects in the client.
-    $this->getSession()->getDriver()->getClient()->followRedirects(FALSE);
-    // Set the maximumMetaRefreshCount to zero to make sure the redirect doesn't
-    // happen when doing a drupalGet.
-    $this->maximumMetaRefreshCount = 0;
-    $this->drupalGet('test-meta-refresh');
-    $this->assertNotEmpty($this->cssSelect('meta[http-equiv="refresh"]'));
-    // Allow one redirect to happen.
-    $this->maximumMetaRefreshCount = 1;
-    $this->checkForMetaRefresh();
-    // Check that we are now on the test page.
-    $this->assertSession()->pageTextContains('Test page text.');
-  }
-
-  public function testGetDefaultDriveInstance() {
-    putenv('MINK_DRIVER_ARGS=' . json_encode([NULL, ['key1' => ['key2' => ['key3' => 3, 'key3.1' => 3.1]]]]));
-    $this->getDefaultDriverInstance();
-    $this->assertEquals([NULL, ['key1' => ['key2' => ['key3' => 3, 'key3.1' => 3.1]]]], $this->minkDefaultDriverArgs);
-  }
-
-  /**
-   * Ensures we can't access modules we shouldn't be able to after install.
-   */
-  public function testProfileModules() {
-    $this->expectException(\InvalidArgumentException::class);
-    $this->expectExceptionMessage('The module demo_umami_content does not exist.');
-    $this->assertFileExists('core/profiles/demo_umami/modules/demo_umami_content/demo_umami_content.info.yml');
-    \Drupal::service('extension.list.module')->getPathname('demo_umami_content');
-  }
-
   /**
    * Tests the protections provided by .htkey.
    */
@@ -624,129 +49,13 @@ public function testHtkey() {
     // @see drupal_valid_test_ua()
     // Not using File API; a potential error must trigger a PHP warning.
     $install_url = Url::fromUri('base:core/install.php', ['external' => TRUE, 'absolute' => TRUE])->toString();
+dump($install_url);
     $this->drupalGet($install_url);
+dump($this->assertSession());
     $this->assertSession()->statusCodeEquals(200);
     unlink($this->siteDirectory . '/.htkey');
     $this->drupalGet($install_url);
     $this->assertSession()->statusCodeEquals(403);
   }
 
-  /**
-   * Tests pageContainsNoDuplicateId() functionality.
-   *
-   * @see \Drupal\Tests\WebAssert::pageContainsNoDuplicateId()
-   */
-  public function testPageContainsNoDuplicateId() {
-    $assert_session = $this->assertSession();
-    $this->drupalGet(Url::fromRoute('test_page_test.page_without_duplicate_ids'));
-    $assert_session->pageContainsNoDuplicateId();
-
-    $this->drupalGet(Url::fromRoute('test_page_test.page_with_duplicate_ids'));
-    $this->expectException(ExpectationException::class);
-    $this->expectExceptionMessage('The page contains a duplicate HTML ID "page-element".');
-    $assert_session->pageContainsNoDuplicateId();
-  }
-
-  /**
-   * Tests assertEscaped() and assertUnescaped().
-   *
-   * @see \Drupal\Tests\WebAssert::assertNoEscaped()
-   * @see \Drupal\Tests\WebAssert::assertEscaped()
-   */
-  public function testEscapingAssertions() {
-    $assert = $this->assertSession();
-
-    $this->drupalGet('test-escaped-characters');
-    $assert->assertNoEscaped('<div class="escaped">');
-    $assert->responseContains('<div class="escaped">');
-    $assert->assertEscaped('Escaped: <"\'&>');
-
-    $this->drupalGet('test-escaped-script');
-    $assert->assertNoEscaped('<div class="escaped">');
-    $assert->responseContains('<div class="escaped">');
-    $assert->assertEscaped("<script>alert('XSS');alert(\"XSS\");</script>");
-
-    $this->drupalGet('test-unescaped-script');
-    $assert->assertNoEscaped('<div class="unescaped">');
-    $assert->responseContains('<div class="unescaped">');
-    $assert->responseContains("<script>alert('Marked safe');alert(\"Marked safe\");</script>");
-    $assert->assertNoEscaped("<script>alert('Marked safe');alert(\"Marked safe\");</script>");
-  }
-
-  /**
-   * Tests that deprecation headers do not get duplicated.
-   *
-   * @group legacy
-   *
-   * @see \Drupal\Core\Test\HttpClientMiddleware\TestHttpClientMiddleware::__invoke()
-   */
-  public function testDeprecationHeaders() {
-    $this->drupalGet('/test-deprecations');
-
-    $deprecation_messages = [];
-    foreach ($this->getSession()->getResponseHeaders() as $name => $values) {
-      if (preg_match('/^X-Drupal-Assertion-[0-9]+$/', $name, $matches)) {
-        foreach ($values as $value) {
-          $parameters = unserialize(urldecode($value));
-          if (count($parameters) === 3) {
-            if ($parameters[1] === 'User deprecated function') {
-              $deprecation_messages[] = (string) $parameters[0];
-            }
-          }
-        }
-      }
-    }
-
-    $this->assertContains('Test deprecation message', $deprecation_messages);
-    $test_deprecation_messages = array_filter($deprecation_messages, function ($message) {
-      return $message === 'Test deprecation message';
-    });
-    $this->assertCount(1, $test_deprecation_messages);
-  }
-
-  /**
-   * Tests the dump() function provided by the var-dumper Symfony component.
-   */
-  public function testVarDump() {
-    // Append the stream capturer to the STDOUT stream, so that we can test the
-    // dump() output and also prevent it from actually outputting in this
-    // particular test.
-    stream_filter_register("capture", StreamCapturer::class);
-    stream_filter_append(STDOUT, "capture");
-
-    // Dump some variables to check that dump() in test code produces output
-    // on the command line that is running the test.
-    $role = Role::load('authenticated');
-    dump($role);
-    dump($role->id());
-
-    $this->assertStringContainsString('Drupal\user\Entity\Role', StreamCapturer::$cache);
-    $this->assertStringContainsString('authenticated', StreamCapturer::$cache);
-
-    // Visit a Drupal page with call to the dump() function to check that dump()
-    // in site code produces output in the requested web page's HTML.
-    $body = $this->drupalGet('test-page-var-dump');
-    $this->assertSession()->statusCodeEquals(200);
-
-    // It is too strict to assert all properties of the Role and it is easy to
-    // break if one of these properties gets removed or gets a new default
-    // value. It should be sufficient to test just a couple of properties.
-    $this->assertStringContainsString('<span class=sf-dump-note>', $body);
-    $this->assertStringContainsString('  #<span class=sf-dump-protected title="Protected property">id</span>: "<span class=sf-dump-str title="9 characters">test_role</span>"', $body);
-    $this->assertStringContainsString('  #<span class=sf-dump-protected title="Protected property">label</span>: "<span class=sf-dump-str title="9 characters">Test role</span>"', $body);
-    $this->assertStringContainsString('  #<span class=sf-dump-protected title="Protected property">permissions</span>: []', $body);
-    $this->assertStringContainsString('  #<span class=sf-dump-protected title="Protected property">uuid</span>: "', $body);
-    $this->assertStringContainsString('</samp>}', $body);
-  }
-
-  /**
-   * Test if setting an invalid scheme in SIMPLETEST_BASE_URL throws an exception.
-   */
-  public function testSimpleTestBaseUrlValidation() {
-    putenv('SIMPLETEST_BASE_URL=mysql://user:pass@localhost/database');
-    $this->expectException(\Exception::class);
-    $this->expectExceptionMessage('You must provide valid scheme for the SIMPLETEST_BASE_URL environment variable. Valid schema are: http, https.');
-    $this->setupBaseUrl();
-  }
-
 }
diff --git a/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingBrokenDatabaseSettingsTest.php b/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingBrokenDatabaseSettingsTest.php
index 3a42b319c1..f7c57dce57 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingBrokenDatabaseSettingsTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingBrokenDatabaseSettingsTest.php
@@ -35,7 +35,8 @@ protected function prepareEnvironment() {
     $connection_info['default']['driver'] = 'DrivertestMysqlDeprecatedVersion';
     $namespace = 'Drupal\\driver_test\\Driver\\Database\\DrivertestMysqlDeprecatedVersion';
     $connection_info['default']['namespace'] = $namespace;
-    $connection_info['default']['autoload'] = Database::findDriverAutoloadDirectory($namespace, \Drupal::root());
+    $autoloading = \Drupal::service('extension.list.database_driver')->get('driver_test\\DrivertestMysqlDeprecatedVersion')->getAutoloadInfo();
+    $connection_info['default']['autoload'] = $autoloading['autoload'];
 
     $this->settings['databases']['default'] = (object) [
       'value' => $connection_info,
diff --git a/core/tests/Drupal/FunctionalTests/Installer/InstallerNonDefaultDatabaseDriverTest.php b/core/tests/Drupal/FunctionalTests/Installer/InstallerNonDefaultDatabaseDriverTest.php
index c7e4dff8b8..406e992bb0 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/InstallerNonDefaultDatabaseDriverTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/InstallerNonDefaultDatabaseDriverTest.php
@@ -61,6 +61,21 @@ public function testInstalled() {
     $this->assertStringContainsString("'driver' => '{$this->testDriverName}',", $contents);
     $this->assertStringContainsString("'autoload' => 'core/modules/system/tests/modules/driver_test/src/Driver/Database/{$this->testDriverName}/',", $contents);
 
+    $dependencies = "'dependencies' => " . PHP_EOL .
+      "  array (" . PHP_EOL .
+      "    'mysql' => " . PHP_EOL .
+      "    array (" . PHP_EOL .
+      "      'namespace' => 'Drupal\\\\mysql'," . PHP_EOL .
+      "      'autoload' => 'core/modules/mysql/src/'," . PHP_EOL .
+      "    )," . PHP_EOL .
+      "    'pgsql' => " . PHP_EOL .
+      "    array (" . PHP_EOL .
+      "      'namespace' => 'Drupal\\\\pgsql'," . PHP_EOL .
+      "      'autoload' => 'core/modules/pgsql/src/'," . PHP_EOL .
+      "    )," . PHP_EOL .
+      "  )," . PHP_EOL;
+    $this->assertStringContainsString($dependencies, $contents);
+
     // Assert that the module "driver_test" has been installed.
     $this->assertEquals(\Drupal::service('module_handler')->getModule('driver_test'), new Extension($this->root, 'module', 'core/modules/system/tests/modules/driver_test/driver_test.info.yml'));
 
diff --git a/core/tests/Drupal/Tests/Core/Database/DatabaseTest.php b/core/tests/Drupal/Tests/Core/Database/DatabaseTest.php
index bf61c2467c..dd25bdb17b 100644
--- a/core/tests/Drupal/Tests/Core/Database/DatabaseTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/DatabaseTest.php
@@ -55,8 +55,11 @@ protected function setUp(): void {
   /**
    * @covers ::findDriverAutoloadDirectory
    * @dataProvider providerFindDriverAutoloadDirectory
+   * @group legacy
    */
   public function testFindDriverAutoloadDirectory($expected, $namespace, $include_test_drivers) {
+    $this->expectDeprecation('Drupal\Core\Database\Database::findDriverAutoloadDirectory() is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use Database::getDriverAutoloadInfo() instead. See https://www.drupal.org/node/3258175');
+    // The only module that provides a driver in core is a test module.
     $this->assertSame($expected, Database::findDriverAutoloadDirectory($namespace, $this->root, $include_test_drivers));
   }
 
@@ -76,8 +79,10 @@ public function providerFindDriverAutoloadDirectory() {
   /**
    * @covers ::findDriverAutoloadDirectory
    * @dataProvider providerFindDriverAutoloadDirectoryException
+   * @group legacy
    */
   public function testFindDriverAutoloadDirectoryException($expected_message, $namespace, $include_tests) {
+    $this->expectDeprecation('Drupal\Core\Database\Database::findDriverAutoloadDirectory() is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use Database::getDriverAutoloadInfo() instead. See https://www.drupal.org/node/3258175');
     $this->expectException(\RuntimeException::class);
     $this->expectExceptionMessage($expected_message);
     Database::findDriverAutoloadDirectory($namespace, $this->root, $include_tests);
diff --git a/core/tests/Drupal/Tests/Core/Database/DriverModuleMissingDependenciesTest.php b/core/tests/Drupal/Tests/Core/Database/DriverModuleMissingDependenciesTest.php
new file mode 100644
index 0000000000..a764a464a3
--- /dev/null
+++ b/core/tests/Drupal/Tests/Core/Database/DriverModuleMissingDependenciesTest.php
@@ -0,0 +1,60 @@
+<?php
+
+namespace Drupal\Tests\Core\Database;
+
+use Drupal\Core\Cache\NullBackend;
+use Drupal\Core\Extension\DatabaseDriverList;
+use Drupal\Tests\UnitTestCase;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * Tests for database driver module with missing dependency.
+ *
+ * These tests run in isolation since we don't want the database static to
+ * affect other tests. We also use a fake root directory to avoid the failing
+ * module to get into normal extensions discovery.
+ *
+ * @coversDefaultClass \Drupal\Core\Database\Database
+ *
+ * @runTestsInSeparateProcesses
+ * @preserveGlobalState disabled
+ *
+ * @group Database
+ */
+class DriverModuleMissingDependenciesTest extends UnitTestCase {
+
+  /**
+   * @covers ::discoverDriversAutoloadInfo
+   */
+  public function testDetermineDriversAutoloadingFailingOnMissingDependency(): void {
+    $root = realpath(dirname(__FILE__) . '/fixtures');
+
+    // Mock the container so we don't need to mock drupal_valid_test_ua().
+    // @see \Drupal\Core\Extension\ExtensionDiscovery::scan()
+    $container = $this->createMock(ContainerInterface::class);
+    $container->expects($this->any())
+      ->method('has')
+      ->with('kernel')
+      ->willReturn(TRUE);
+    $container->expects($this->any())
+      ->method('getParameter')
+      ->with()
+      ->willReturnMap([
+          ['install_profile', ''],
+          ['site.path', ''],
+      ]);
+    $container->expects($this->any())
+      ->method('get')
+      ->with('extension.list.database_driver')
+      ->willReturn(new DatabaseDriverList($root, 'database_driver', new NullBackend('database_driver')));
+    \Drupal::setContainer($container);
+
+    $this->expectException(\RuntimeException::class);
+    $this->expectExceptionMessage("Cannot find the module 'a_really_missing_module' that is required by module 'driver_missing_dependency_test'");
+    $container->get('extension.list.database_driver')
+      ->scanTestDrivers(TRUE)
+      ->get('driver_missing_dependency_test\MissingDependency')
+      ->getAutoloadInfo();
+  }
+
+}
diff --git a/core/tests/Drupal/Tests/Core/Database/UrlConversionTest.php b/core/tests/Drupal/Tests/Core/Database/UrlConversionTest.php
index 2e836da87c..7ed0a1a10d 100644
--- a/core/tests/Drupal/Tests/Core/Database/UrlConversionTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/UrlConversionTest.php
@@ -2,7 +2,10 @@
 
 namespace Drupal\Tests\Core\Database;
 
+use Drupal\Core\Cache\NullBackend;
 use Drupal\Core\Database\Database;
+use Drupal\Core\Extension\DatabaseDriverList;
+use Drupal\Core\Extension\Exception\UnknownExtensionException;
 use Drupal\Tests\UnitTestCase;
 
 /**
@@ -33,10 +36,17 @@ protected function setUp(): void {
       ->method('has')
       ->with('kernel')
       ->willReturn(TRUE);
+    $container->expects($this->any())
+      ->method('get')
+      ->with('extension.list.database_driver')
+      ->willReturn(new DatabaseDriverList($this->root, 'database_driver', new NullBackend('database_driver')));
     $container->expects($this->any())
       ->method('getParameter')
-      ->with('site.path')
-      ->willReturn('');
+      ->with()
+      ->willReturnMap([
+          ['install_profile', ''],
+          ['site.path', ''],
+      ]);
     \Drupal::setContainer($container);
   }
 
@@ -135,6 +145,16 @@ public function providerConvertDbUrlToConnectionInfo() {
           'port' => 3306,
           'namespace' => 'Drupal\driver_test\Driver\Database\DrivertestMysql',
           'autoload' => 'core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/',
+          'dependencies' => [
+            'mysql' => [
+              'namespace' => 'Drupal\mysql',
+              'autoload' => 'core/modules/mysql/src/',
+            ],
+            'pgsql' => [
+              'namespace' => 'Drupal\pgsql',
+              'autoload' => 'core/modules/pgsql/src/',
+            ],
+          ],
         ],
         TRUE,
       ],
@@ -150,6 +170,16 @@ public function providerConvertDbUrlToConnectionInfo() {
           'port' => 3306,
           'namespace' => 'Drupal\driver_test\Driver\Database\DrivertestMysql',
           'autoload' => 'core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/',
+          'dependencies' => [
+            'mysql' => [
+              'namespace' => 'Drupal\mysql',
+              'autoload' => 'core/modules/mysql/src/',
+            ],
+            'pgsql' => [
+              'namespace' => 'Drupal\pgsql',
+              'autoload' => 'core/modules/pgsql/src/',
+            ],
+          ],
         ],
         TRUE,
       ],
@@ -164,6 +194,16 @@ public function providerConvertDbUrlToConnectionInfo() {
           'port' => 5432,
           'namespace' => 'Drupal\driver_test\Driver\Database\DrivertestPgsql',
           'autoload' => 'core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/',
+          'dependencies' => [
+            'mysql' => [
+              'namespace' => 'Drupal\mysql',
+              'autoload' => 'core/modules/mysql/src/',
+            ],
+            'pgsql' => [
+              'namespace' => 'Drupal\pgsql',
+              'autoload' => 'core/modules/pgsql/src/',
+            ],
+          ],
         ],
         TRUE,
       ],
@@ -179,6 +219,16 @@ public function providerConvertDbUrlToConnectionInfo() {
           'port' => 5432,
           'namespace' => 'Drupal\driver_test\Driver\Database\DrivertestPgsql',
           'autoload' => 'core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/',
+          'dependencies' => [
+            'mysql' => [
+              'namespace' => 'Drupal\mysql',
+              'autoload' => 'core/modules/mysql/src/',
+            ],
+            'pgsql' => [
+              'namespace' => 'Drupal\pgsql',
+              'autoload' => 'core/modules/pgsql/src/',
+            ],
+          ],
         ],
         TRUE,
       ],
@@ -390,6 +440,29 @@ public function providerGetConnectionInfoAsUrl() {
     ];
     $expected_url8 = 'DrivertestPgsql://test_user:test_pass@test_host:5432/test_database?module=driver_test#pre';
 
+    $info9 = [
+      'database' => 'test_database',
+      'username' => 'test_user',
+      'password' => 'test_pass',
+      'prefix' => '',
+      'host' => 'test_host',
+      'port' => '3306',
+      'driver' => 'DrivertestMysql',
+      'namespace' => 'Drupal\\driver_test\\Driver\\Database\\DrivertestMysql',
+      'autoload' => 'core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/',
+      'dependencies' => [
+        'mysql' => [
+          'namespace' => 'Drupal\mysql',
+          'autoload' => 'core/modules/mysql/src/',
+        ],
+        'pgsql' => [
+          'namespace' => 'Drupal\pgsql',
+          'autoload' => 'core/modules/pgsql/src/',
+        ],
+      ],
+    ];
+    $expected_url9 = 'DrivertestMysql://test_user:test_pass@test_host:3306/test_database?module=driver_test';
+
     return [
       [$info1, $expected_url1],
       [$info2, $expected_url2],
@@ -399,6 +472,7 @@ public function providerGetConnectionInfoAsUrl() {
       [$info6, $expected_url6],
       [$info7, $expected_url7],
       [$info8, $expected_url8],
+      [$info9, $expected_url9],
     ];
   }
 
@@ -447,9 +521,9 @@ public function providerInvalidArgumentGetConnectionInfoAsUrl() {
    * @covers ::convertDbUrlToConnectionInfo
    */
   public function testDriverModuleDoesNotExist() {
-    $url = 'mysql://test_user:test_pass@test_host:3306/test_database?module=does_not_exist';
-    $this->expectException(\RuntimeException::class);
-    $this->expectExceptionMessage("Cannot find the module 'does_not_exist' for the database driver namespace 'Drupal\does_not_exist\Driver\Database\mysql'");
+    $url = 'mysql://test_user:test_pass@test_host:3306/test_database?module=foo_bar';
+    $this->expectException(UnknownExtensionException::class);
+    $this->expectExceptionMessage("The database_driver foo_bar\mysql does not exist.");
     Database::convertDbUrlToConnectionInfo($url, $this->root, TRUE);
   }
 
@@ -458,8 +532,8 @@ public function testDriverModuleDoesNotExist() {
    */
   public function testModuleDriverDoesNotExist() {
     $url = 'mysql://test_user:test_pass@test_host:3306/test_database?module=driver_test';
-    $this->expectException(\RuntimeException::class);
-    $this->expectExceptionMessage("Cannot find the database driver namespace 'Drupal\driver_test\Driver\Database\mysql' in module 'driver_test'");
+    $this->expectException(UnknownExtensionException::class);
+    $this->expectExceptionMessage("The database_driver driver_test\mysql does not exist.");
     Database::convertDbUrlToConnectionInfo($url, $this->root, TRUE);
   }
 
diff --git a/core/tests/Drupal/Tests/Core/Database/fixtures/core/modules/driver_missing_dependency_test/driver_missing_dependency_test.info.yml b/core/tests/Drupal/Tests/Core/Database/fixtures/core/modules/driver_missing_dependency_test/driver_missing_dependency_test.info.yml
new file mode 100644
index 0000000000..165db40f36
--- /dev/null
+++ b/core/tests/Drupal/Tests/Core/Database/fixtures/core/modules/driver_missing_dependency_test/driver_missing_dependency_test.info.yml
@@ -0,0 +1,7 @@
+name: 'Contrib database driver test with a missing dependency'
+type: module
+description: 'Support database contrib driver testing.'
+package: Testing
+version: VERSION
+dependencies:
+  - drupal:a_really_missing_module
diff --git a/core/tests/Drupal/Tests/Core/Database/fixtures/core/modules/driver_missing_dependency_test/src/Driver/Database/MissingDependency/Install/Tasks.php b/core/tests/Drupal/Tests/Core/Database/fixtures/core/modules/driver_missing_dependency_test/src/Driver/Database/MissingDependency/Install/Tasks.php
new file mode 100644
index 0000000000..43eeee5fa4
--- /dev/null
+++ b/core/tests/Drupal/Tests/Core/Database/fixtures/core/modules/driver_missing_dependency_test/src/Driver/Database/MissingDependency/Install/Tasks.php
@@ -0,0 +1,19 @@
+<?php
+
+namespace Drupal\driver_missing_dependency_test\Driver\Database\MissingDependency\Install;
+
+use Drupal\Core\Database\Install\Tasks as CoreTasks;
+
+/**
+ * Specifies fake installation tasks for test.
+ */
+class Tasks extends CoreTasks {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function name() {
+    return t('Fake driver by the driver_missing_dependency_test module');
+  }
+
+}
diff --git a/sites/default/default.settings.php b/sites/default/default.settings.php
index ee3b49c0a8..02f3e5e7a8 100644
--- a/sites/default/default.settings.php
+++ b/sites/default/default.settings.php
@@ -222,6 +222,27 @@
  *     'prefix' => '',
  *   ];
  * @endcode
+ *
+ * Sample Database configuration format for a driver that is extending another
+ * database driver.
+ * @code
+ *   $databases['default']['default'] = [
+ *     'driver' => 'my_driver',
+ *     'namespace' => 'Drupal\my_module\Driver\Database\my_driver',
+ *     'autoload' => 'modules/my_module/src/Driver/Database/my_driver/',
+ *     'database' => 'databasename',
+ *     'username' => 'sqlusername',
+ *     'password' => 'sqlpassword',
+ *     'host' => 'localhost',
+ *     'prefix' => '',
+ *     'dependencies' => [
+ *       'parent_module' => [
+ *         'namespace' => 'Drupal\parent_module',
+ *         'autoload' => 'core/modules/parent_module/src/',
+ *       ],
+ *     ],
+ *   ];
+ * @endcode
  */
 
 /**
