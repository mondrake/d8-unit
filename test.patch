diff --git a/core/lib/Drupal/Core/Database/Query/PagerSelectExtender.php b/core/lib/Drupal/Core/Database/Query/PagerSelectExtender.php
index f32b1c733c..0b13ad6a82 100644
--- a/core/lib/Drupal/Core/Database/Query/PagerSelectExtender.php
+++ b/core/lib/Drupal/Core/Database/Query/PagerSelectExtender.php
@@ -3,6 +3,7 @@
 namespace Drupal\Core\Database\Query;
 
 use Drupal\Core\Database\Connection;
+use Drupal\Core\Pager\PagerManagerInterface;
 
 /**
  * Query extender for pager queries.
@@ -16,13 +17,6 @@
  */
 class PagerSelectExtender extends SelectExtender {
 
-  /**
-   * The highest element we've autogenerated so far.
-   *
-   * @var int
-   */
-  public static $maxElement = 0;
-
   /**
    * The number of elements per page to allow.
    *
@@ -44,14 +38,48 @@ class PagerSelectExtender extends SelectExtender {
    */
   protected $customCountQuery = FALSE;
 
-  public function __construct(SelectInterface $query, Connection $connection) {
+  /**
+   * The pager manager service.
+   *
+   * @var \Drupal\Core\Pager\PagerManagerInterface
+   */
+  protected $pagerManager;
+
+  /**
+   * Constructs a PagerSelectExtender object.
+   *
+   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   *   Select query object.
+   * @param \Drupal\Core\Database\Connection $connection
+   *   Database connection object.
+   * @param \Drupal\Core\Pager\PagerManagerInterface $pager_manager
+   *   The pager manager service.
+   */
+  public function __construct(SelectInterface $query, Connection $connection, PagerManagerInterface $pager_manager = NULL) {
     parent::__construct($query, $connection);
+    if (!$pager_manager) {
+      @trigger_error('The pager.manager service must be passed to PagerSelectExtender::__construct(), it is required before drupal:10.0.0.', E_USER_DEPRECATED);
+      $pager_manager = \Drupal::service('pager.manager');
+    }
+    $this->pagerManager = $pager_manager;
 
     // Add pager tag. Do this here to ensure that it is always added before
     // preExecute() is called.
     $this->addTag('pager');
   }
 
+  /**
+   * Implements the magic __get() method.
+   *
+   * @todo Remove the method in Drupal 10.
+   */
+  public function __get($name) {
+    if ($name === 'maxElement') {
+      @trigger_error("PagerSelectExtender::\$maxElement should not be accessed in drupal:9.2.0 and will error in drupal:10.0.0. Use \Drupal::service('pager.manager')->getMaxPagerElementId() instead. See https://www.drupal.org/node/3194594", E_USER_DEPRECATED);
+      return $this->pagerManager->getMaxPagerElementId();
+    }
+  }
+
   /**
    * Override the execute method.
    *
@@ -73,9 +101,7 @@ public function execute() {
     $this->ensureElement();
 
     $total_items = $this->getCountQuery()->execute()->fetchField();
-    /** @var \Drupal\Core\Pager\PagerManagerInterface $pager_manager */
-    $pager_manager = \Drupal::service('pager.manager');
-    $pager = $pager_manager->createPager($total_items, $this->limit, $this->element);
+    $pager = $this->pagerManager->createPager($total_items, $this->limit, $this->element);
     $this->range($pager->getCurrentPage() * $this->limit, $this->limit);
 
     // Now that we've added our pager-based range instructions, run the query normally.
@@ -84,15 +110,13 @@ public function execute() {
 
   /**
    * Ensure that there is an element associated with this query.
-   * If an element was not specified previously, then the value of the
-   * $maxElement counter is taken, after which the counter is incremented.
    *
    * After running this method, access $this->element to get the element for this
    * query.
    */
   protected function ensureElement() {
     if (!isset($this->element)) {
-      $this->element = self::$maxElement++;
+      $this->element = $this->pagerManager->getMaxPagerElementId() + 1;
     }
   }
 
@@ -151,9 +175,6 @@ public function limit($limit = 10) {
    * whatever reason you want to explicitly define an element for a given query,
    * you may do so here.
    *
-   * Setting the element here also increments the static $maxElement counter,
-   * which is used for determining the $element when there's none specified.
-   *
    * Note that no collision detection is done when setting an element ID
    * explicitly, so it is possible for two pagers to end up using the same ID
    * if both are set explicitly.
@@ -163,10 +184,22 @@ public function limit($limit = 10) {
    */
   public function element($element) {
     $this->element = $element;
-    if ($element >= self::$maxElement) {
-      self::$maxElement = $element + 1;
-    }
     return $this;
   }
 
+  /**
+   * Gets the element ID for this pager query.
+   *
+   * The element is used to differentiate different pager queries on the same
+   * page so that they may be operated independently.
+   *
+   * @return int
+   *   Element ID that is used to differentiate between different pager
+   *   queries.
+   */
+  public function getElement(): int {
+    $this->ensureElement();
+    return $this->element;
+  }
+
 }
diff --git a/core/lib/Drupal/Core/Database/Query/Select.php b/core/lib/Drupal/Core/Database/Query/Select.php
index 94cbf92b14..84e214de0f 100644
--- a/core/lib/Drupal/Core/Database/Query/Select.php
+++ b/core/lib/Drupal/Core/Database/Query/Select.php
@@ -319,12 +319,17 @@ public function havingCompile(Connection $connection) {
    */
   public function extend($extender_name) {
     $parts = explode('\\', $extender_name);
-    $class = end($parts);
-    $driver_class = $this->connection->getDriverClass($class);
-    if ($driver_class !== $class) {
-      return new $driver_class($this, $this->connection);
+    $base_class = end($parts);
+    $driver_class = $this->connection->getDriverClass($base_class);
+    $class = $driver_class !== $base_class ? $driver_class : $extender_name;
+    if (strpos(PagerSelectExtender::class, $class) !== FALSE || is_subclass_of($class, PagerSelectExtender::class)) {
+dump(['Select service', $base_class, $driver_class, $extender_name, '>>>' => $class, is_subclass_of($class, PagerSelectExtender::class)]);
+      return new $class($this, $this->connection, \Drupal::service('pager.manager'));
+    }
+    else {
+dump(['Select NO service', $base_class, $driver_class, $extender_name, '>>>' => $class, is_subclass_of($class, PagerSelectExtender::class)]);
+      return new $class($this, $this->connection);
     }
-    return new $extender_name($this, $this->connection);
   }
 
   /**
diff --git a/core/lib/Drupal/Core/Database/Query/SelectExtender.php b/core/lib/Drupal/Core/Database/Query/SelectExtender.php
index 0681813f04..fcfd04aa17 100644
--- a/core/lib/Drupal/Core/Database/Query/SelectExtender.php
+++ b/core/lib/Drupal/Core/Database/Query/SelectExtender.php
@@ -222,12 +222,17 @@ public function extend($extender_name) {
     // you will replace all the earlier extenders with the last extender,
     // instead of creating list of objects that extend each other.
     $parts = explode('\\', $extender_name);
-    $class = end($parts);
-    $driver_class = $this->connection->getDriverClass($class);
-    if ($driver_class !== $class) {
-      return new $driver_class($this, $this->connection);
+    $base_class = end($parts);
+    $driver_class = $this->connection->getDriverClass($base_class);
+    $class = $driver_class !== $base_class ? $driver_class : $extender_name;
+    if (strpos(PagerSelectExtender::class, $class) !== FALSE || is_subclass_of($class, PagerSelectExtender::class)) {
+dump(['Extender service', $base_class, $driver_class, $extender_name, '>>>' => $class, is_subclass_of($class, PagerSelectExtender::class)]);
+      return new $class($this, $this->connection, \Drupal::service('pager.manager'));
+    }
+    else {
+dump(['Extender NO service', $base_class, $driver_class, $extender_name, '>>>' => $class, is_subclass_of($class, PagerSelectExtender::class)]);
+      return new $class($this, $this->connection);
     }
-    return new $extender_name($this, $this->connection);
   }
 
   /* Alter accessors to expose the query data to alter hooks. */
diff --git a/core/lib/Drupal/Core/Entity/Query/QueryBase.php b/core/lib/Drupal/Core/Entity/Query/QueryBase.php
index a1e5e2c923..6c43c919ee 100644
--- a/core/lib/Drupal/Core/Entity/Query/QueryBase.php
+++ b/core/lib/Drupal/Core/Entity/Query/QueryBase.php
@@ -2,7 +2,6 @@
 
 namespace Drupal\Core\Entity\Query;
 
-use Drupal\Core\Database\Query\PagerSelectExtender;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Utility\TableSort;
 
@@ -289,10 +288,7 @@ public function pager($limit = 10, $element = NULL) {
     // Even when not using SQL, storing the element PagerSelectExtender is as
     // good as anywhere else.
     if (!isset($element)) {
-      $element = PagerSelectExtender::$maxElement++;
-    }
-    elseif ($element >= PagerSelectExtender::$maxElement) {
-      PagerSelectExtender::$maxElement = $element + 1;
+      $element = \Drupal::service('pager.manager')->getMaxPagerElementId() + 1;
     }
 
     $this->pager = [
diff --git a/core/lib/Drupal/Core/Pager/PagerManager.php b/core/lib/Drupal/Core/Pager/PagerManager.php
index 5e29724dc1..36d10a1de4 100644
--- a/core/lib/Drupal/Core/Pager/PagerManager.php
+++ b/core/lib/Drupal/Core/Pager/PagerManager.php
@@ -90,12 +90,9 @@ public function getUpdatedParameters(array $query, $element, $index) {
   }
 
   /**
-   * Gets the extent of the pager page element IDs.
-   *
-   * @return int
-   *   The maximum element ID available, -1 if there are no elements.
+   * {@inheritdoc}
    */
-  protected function getMaxPagerElementId() {
+  public function getMaxPagerElementId() {
     return empty($this->pagers) ? -1 : max(array_keys($this->pagers));
   }
 
diff --git a/core/lib/Drupal/Core/Pager/PagerManagerInterface.php b/core/lib/Drupal/Core/Pager/PagerManagerInterface.php
index 94db9320ac..b818b81341 100644
--- a/core/lib/Drupal/Core/Pager/PagerManagerInterface.php
+++ b/core/lib/Drupal/Core/Pager/PagerManagerInterface.php
@@ -33,7 +33,7 @@
    * before executing it. For example:
    * @code
    *   $query = $connection->select('some_table')
-   *     ->extend('Drupal\Core\Database\Query\PagerSelectExtender');
+   *     ->extend(PagerSelectExtender::class);
    * @endcode
    *
    * However, if you are using a different method for generating the items to be
@@ -163,4 +163,12 @@ public function findPage(int $pager_id = 0): int;
    */
   public function getUpdatedParameters(array $query, $element, $index);
 
+  /**
+   * Gets the extent of the pager page element IDs.
+   *
+   * @return int
+   *   The maximum element ID available, -1 if there are no elements.
+   */
+  public function getMaxPagerElementId();
+
 }
diff --git a/core/modules/system/tests/src/Functional/Database/SelectPagerDefaultTest.php b/core/modules/system/tests/src/Functional/Database/SelectPagerDefaultTest.php
index 7a6b0cf443..4da8e0aa23 100644
--- a/core/modules/system/tests/src/Functional/Database/SelectPagerDefaultTest.php
+++ b/core/modules/system/tests/src/Functional/Database/SelectPagerDefaultTest.php
@@ -144,34 +144,37 @@ public function testElementNumbers() {
     \Drupal::getContainer()->get('request_stack')->push($request);
 
     $connection = Database::getConnection();
-    $name = $connection->select('test', 't')
+    $query = $connection->select('test', 't')
       ->extend(PagerSelectExtender::class)
       ->element(2)
       ->fields('t', ['name'])
       ->orderBy('age')
-      ->limit(1)
-      ->execute()
+      ->limit(1);
+    $this->assertSame(2, $query->getElement());
+    $name = $query->execute()
       ->fetchField();
     $this->assertEqual($name, 'Paul', 'Pager query #1 with a specified element ID returned the correct results.');
 
-    // Setting an element smaller than the previous one
-    // should not overwrite the pager $maxElement with a smaller value.
-    $name = $connection->select('test', 't')
+    // Setting an element smaller than the previous one should not collide with
+    // the existing pager.
+    $query = $connection->select('test', 't')
       ->extend(PagerSelectExtender::class)
       ->element(1)
       ->fields('t', ['name'])
       ->orderBy('age')
-      ->limit(1)
-      ->execute()
+      ->limit(1);
+    $this->assertSame(1, $query->getElement());
+    $name = $query->execute()
       ->fetchField();
     $this->assertEqual($name, 'George', 'Pager query #2 with a specified element ID returned the correct results.');
 
-    $name = $connection->select('test', 't')
+    $query = $connection->select('test', 't')
       ->extend(PagerSelectExtender::class)
       ->fields('t', ['name'])
       ->orderBy('age')
-      ->limit(1)
-      ->execute()
+      ->limit(1);
+    $this->assertSame(3, $query->getElement());
+    $name = $query->execute()
       ->fetchField();
     $this->assertEqual($name, 'John', 'Pager query #3 with a generated element ID returned the correct results.');
 
diff --git a/core/tests/Drupal/Tests/Core/Database/SelectTest.php b/core/tests/Drupal/KernelTests/Core/Database/SelectExtenderTest.php
similarity index 92%
rename from core/tests/Drupal/Tests/Core/Database/SelectTest.php
rename to core/tests/Drupal/KernelTests/Core/Database/SelectExtenderTest.php
index 867cc61989..5a23f9a250 100644
--- a/core/tests/Drupal/Tests/Core/Database/SelectTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/SelectExtenderTest.php
@@ -1,20 +1,20 @@
 <?php
 
-namespace Drupal\Tests\Core\Database;
+namespace Drupal\KernelTests\Core\Database;
 
 use Composer\Autoload\ClassLoader;
 use Drupal\Core\Database\Query\SelectExtender;
+use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\Core\Database\Stub\StubConnection;
 use Drupal\Tests\Core\Database\Stub\StubPDO;
-use Drupal\Tests\UnitTestCase;
 
 /**
- * Tests the Connection class.
+ * Tests the Select query extender classes.
  *
  * @coversDefaultClass \Drupal\Core\Database\Query\Select
  * @group Database
  */
-class SelectTest extends UnitTestCase {
+class SelectExtenderTest extends KernelTestBase {
 
   /**
    * Data provider for testExtend().
@@ -25,7 +25,7 @@ class SelectTest extends UnitTestCase {
    *   - The database driver namespace.
    *   - The namespaced class name for which to extend.
    */
-  public function providerExtend() {
+  public function providerExtend(): array {
     return [
       [
         'Drupal\Core\Database\Query\PagerSelectExtender',
@@ -115,7 +115,7 @@ public function providerExtend() {
    * @covers \Drupal\Core\Database\Query\SelectExtender::extend
    * @dataProvider providerExtend
    */
-  public function testExtend($expected, $namespace, $extend) {
+  public function testExtend(string $expected, string $namespace, string $extend): void {
     $additional_class_loader = new ClassLoader();
     $additional_class_loader->addPsr4("Drupal\\corefake\\Driver\\Database\\corefake\\", __DIR__ . "/../../../../../tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefake");
     $additional_class_loader->addPsr4("Drupal\\corefake\\Driver\\Database\\corefakeWithAllCustomClasses\\", __DIR__ . "/../../../../../tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefakeWithAllCustomClasses");
@@ -130,7 +130,7 @@ public function testExtend($expected, $namespace, $extend) {
 
     // Get an instance of the class \Drupal\Core\Database\Query\SelectExtender.
     $select_extender = $connection->select('test')->extend(SelectExtender::class);
-    $this->assertEquals('Drupal\Core\Database\Query\SelectExtender', get_class($select_extender));
+    $this->assertEquals(SelectExtender::class, get_class($select_extender));
 
     // Tests the method \Drupal\Core\Database\Query\SelectExtender::extend().
     $select_extender_extended = $select_extender->extend($extend);
diff --git a/core/tests/Drupal/KernelTests/Core/Pager/PagerManagerTest.php b/core/tests/Drupal/KernelTests/Core/Pager/PagerManagerTest.php
index 3f1442141c..2f5d31161a 100644
--- a/core/tests/Drupal/KernelTests/Core/Pager/PagerManagerTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Pager/PagerManagerTest.php
@@ -53,4 +53,36 @@ public function testFindPage() {
     $this->assertEquals(10, $pager_manager->findPage(1));
   }
 
+  /**
+   * @covers ::getMaxPagerElementId
+   *
+   * @dataProvider providerTestGetMaxPagerElementId
+   */
+  public function testGetMaxPagerElementId(array $elements, int $expected_max_element_id): void {
+    /* @var $pager_manager \Drupal\Core\Pager\PagerManagerInterface */
+    $pager_manager = $this->container->get('pager.manager');
+
+    foreach ($elements as $element) {
+      $pager_manager->createPager(30, 10, $element);
+    }
+
+    $this->assertEquals($expected_max_element_id, $pager_manager->getMaxPagerElementId());
+  }
+
+  /**
+   * Provides test cases for PagerManagerTest::testGetMaxPagerElementId().
+   *
+   * @return array
+   *   An array of test cases, each which the following values:
+   *   - Array of elements to pass to PagerManager::createPager().
+   *   - The expected value returned by PagerManager::getMaxPagerElementId().
+   */
+  public function providerTestGetMaxPagerElementId(): array {
+    return [
+      'no_pager' => [[], -1],
+      'single_pager' => [[0], 0],
+      'multiple_pagers' => [[30, 10, 20], 30],
+    ];
+  }
+
 }
