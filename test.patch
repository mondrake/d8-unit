diff --git a/composer.json b/composer.json
index 61c5d3735a..8c5b5304c5 100644
--- a/composer.json
+++ b/composer.json
@@ -33,13 +33,12 @@
         "phpstan/extension-installer": "^1.1",
         "phpstan/phpstan": "^1.10.62",
         "phpstan/phpstan-phpunit": "^1.3.16",
-        "phpunit/phpunit": "^9.6.13",
+        "phpunit/phpunit": "^10.5.16",
         "symfony/browser-kit": "^7.0",
         "symfony/css-selector": "^7.0",
         "symfony/dom-crawler": "^7.0",
         "symfony/error-handler": "^7.0",
         "symfony/lock": "^7.0",
-        "symfony/phpunit-bridge": "^7.0",
         "symfony/var-dumper": "^7.0"
     },
     "replace": {
diff --git a/composer.lock b/composer.lock
index 51c3e80add..01ac46bcd8 100644
--- a/composer.lock
+++ b/composer.lock
@@ -4,7 +4,7 @@
         "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
         "This file is @generated automatically"
     ],
-    "content-hash": "7033803d9382729f982fd06b4b8603de",
+    "content-hash": "5e1888e5f1a7e0b8988b0ebeebf51a3e",
     "packages": [
         {
             "name": "asm89/stack-cors",
@@ -1872,29 +1872,29 @@
         },
         {
             "name": "sebastian/diff",
-            "version": "4.0.5",
+            "version": "5.1.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/diff.git",
-                "reference": "74be17022044ebaaecfdf0c5cd504fc9cd5a7131"
+                "reference": "c41e007b4b62af48218231d6c2275e4c9b975b2e"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/74be17022044ebaaecfdf0c5cd504fc9cd5a7131",
-                "reference": "74be17022044ebaaecfdf0c5cd504fc9cd5a7131",
+                "url": "https://api.github.com/repos/sebastianbergmann/diff/zipball/c41e007b4b62af48218231d6c2275e4c9b975b2e",
+                "reference": "c41e007b4b62af48218231d6c2275e4c9b975b2e",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.3"
+                "php": ">=8.1"
             },
             "require-dev": {
-                "phpunit/phpunit": "^9.3",
-                "symfony/process": "^4.2 || ^5"
+                "phpunit/phpunit": "^10.0",
+                "symfony/process": "^6.4"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "4.0-dev"
+                    "dev-main": "5.1-dev"
                 }
             },
             "autoload": {
@@ -1926,7 +1926,8 @@
             ],
             "support": {
                 "issues": "https://github.com/sebastianbergmann/diff/issues",
-                "source": "https://github.com/sebastianbergmann/diff/tree/4.0.5"
+                "security": "https://github.com/sebastianbergmann/diff/security/policy",
+                "source": "https://github.com/sebastianbergmann/diff/tree/5.1.1"
             },
             "funding": [
                 {
@@ -1934,7 +1935,7 @@
                     "type": "github"
                 }
             ],
-            "time": "2023-05-07T05:35:17+00:00"
+            "time": "2024-03-02T07:15:17+00:00"
         },
         {
             "name": "symfony/console",
@@ -5791,25 +5792,27 @@
         },
         {
             "name": "nikic/php-parser",
-            "version": "v4.18.0",
+            "version": "v5.0.2",
             "source": {
                 "type": "git",
                 "url": "https://github.com/nikic/PHP-Parser.git",
-                "reference": "1bcbb2179f97633e98bbbc87044ee2611c7d7999"
+                "reference": "139676794dc1e9231bf7bcd123cfc0c99182cb13"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/1bcbb2179f97633e98bbbc87044ee2611c7d7999",
-                "reference": "1bcbb2179f97633e98bbbc87044ee2611c7d7999",
+                "url": "https://api.github.com/repos/nikic/PHP-Parser/zipball/139676794dc1e9231bf7bcd123cfc0c99182cb13",
+                "reference": "139676794dc1e9231bf7bcd123cfc0c99182cb13",
                 "shasum": ""
             },
             "require": {
+                "ext-ctype": "*",
+                "ext-json": "*",
                 "ext-tokenizer": "*",
-                "php": ">=7.0"
+                "php": ">=7.4"
             },
             "require-dev": {
                 "ircmaxell/php-yacc": "^0.0.7",
-                "phpunit/phpunit": "^6.5 || ^7.0 || ^8.0 || ^9.0"
+                "phpunit/phpunit": "^7.0 || ^8.0 || ^9.0"
             },
             "bin": [
                 "bin/php-parse"
@@ -5817,7 +5820,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "4.9-dev"
+                    "dev-master": "5.0-dev"
                 }
             },
             "autoload": {
@@ -5841,9 +5844,9 @@
             ],
             "support": {
                 "issues": "https://github.com/nikic/PHP-Parser/issues",
-                "source": "https://github.com/nikic/PHP-Parser/tree/v4.18.0"
+                "source": "https://github.com/nikic/PHP-Parser/tree/v5.0.2"
             },
-            "time": "2023-12-10T21:03:43+00:00"
+            "time": "2024-03-05T20:51:40+00:00"
         },
         {
             "name": "open-telemetry/api",
@@ -6239,20 +6242,21 @@
         },
         {
             "name": "phar-io/manifest",
-            "version": "2.0.3",
+            "version": "2.0.4",
             "source": {
                 "type": "git",
                 "url": "https://github.com/phar-io/manifest.git",
-                "reference": "97803eca37d319dfa7826cc2437fc020857acb53"
+                "reference": "54750ef60c58e43759730615a392c31c80e23176"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/phar-io/manifest/zipball/97803eca37d319dfa7826cc2437fc020857acb53",
-                "reference": "97803eca37d319dfa7826cc2437fc020857acb53",
+                "url": "https://api.github.com/repos/phar-io/manifest/zipball/54750ef60c58e43759730615a392c31c80e23176",
+                "reference": "54750ef60c58e43759730615a392c31c80e23176",
                 "shasum": ""
             },
             "require": {
                 "ext-dom": "*",
+                "ext-libxml": "*",
                 "ext-phar": "*",
                 "ext-xmlwriter": "*",
                 "phar-io/version": "^3.0.1",
@@ -6293,9 +6297,15 @@
             "description": "Component for reading phar.io manifest information from a PHP Archive (PHAR)",
             "support": {
                 "issues": "https://github.com/phar-io/manifest/issues",
-                "source": "https://github.com/phar-io/manifest/tree/2.0.3"
+                "source": "https://github.com/phar-io/manifest/tree/2.0.4"
             },
-            "time": "2021-07-20T11:28:43+00:00"
+            "funding": [
+                {
+                    "url": "https://github.com/theseer",
+                    "type": "github"
+                }
+            ],
+            "time": "2024-03-03T12:33:53+00:00"
         },
         {
             "name": "phar-io/version",
@@ -7141,35 +7151,35 @@
         },
         {
             "name": "phpunit/php-code-coverage",
-            "version": "9.2.29",
+            "version": "10.1.12",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/php-code-coverage.git",
-                "reference": "6a3a87ac2bbe33b25042753df8195ba4aa534c76"
+                "reference": "842f72662d6b9edda84c4b6f13885fd9cd53dc63"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/6a3a87ac2bbe33b25042753df8195ba4aa534c76",
-                "reference": "6a3a87ac2bbe33b25042753df8195ba4aa534c76",
+                "url": "https://api.github.com/repos/sebastianbergmann/php-code-coverage/zipball/842f72662d6b9edda84c4b6f13885fd9cd53dc63",
+                "reference": "842f72662d6b9edda84c4b6f13885fd9cd53dc63",
                 "shasum": ""
             },
             "require": {
                 "ext-dom": "*",
                 "ext-libxml": "*",
                 "ext-xmlwriter": "*",
-                "nikic/php-parser": "^4.15",
-                "php": ">=7.3",
-                "phpunit/php-file-iterator": "^3.0.3",
-                "phpunit/php-text-template": "^2.0.2",
-                "sebastian/code-unit-reverse-lookup": "^2.0.2",
-                "sebastian/complexity": "^2.0",
-                "sebastian/environment": "^5.1.2",
-                "sebastian/lines-of-code": "^1.0.3",
-                "sebastian/version": "^3.0.1",
+                "nikic/php-parser": "^4.18 || ^5.0",
+                "php": ">=8.1",
+                "phpunit/php-file-iterator": "^4.0",
+                "phpunit/php-text-template": "^3.0",
+                "sebastian/code-unit-reverse-lookup": "^3.0",
+                "sebastian/complexity": "^3.0",
+                "sebastian/environment": "^6.0",
+                "sebastian/lines-of-code": "^2.0",
+                "sebastian/version": "^4.0",
                 "theseer/tokenizer": "^1.2.0"
             },
             "require-dev": {
-                "phpunit/phpunit": "^9.3"
+                "phpunit/phpunit": "^10.1"
             },
             "suggest": {
                 "ext-pcov": "PHP extension that provides line coverage",
@@ -7178,7 +7188,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "9.2-dev"
+                    "dev-main": "10.1-dev"
                 }
             },
             "autoload": {
@@ -7207,7 +7217,7 @@
             "support": {
                 "issues": "https://github.com/sebastianbergmann/php-code-coverage/issues",
                 "security": "https://github.com/sebastianbergmann/php-code-coverage/security/policy",
-                "source": "https://github.com/sebastianbergmann/php-code-coverage/tree/9.2.29"
+                "source": "https://github.com/sebastianbergmann/php-code-coverage/tree/10.1.12"
             },
             "funding": [
                 {
@@ -7215,32 +7225,32 @@
                     "type": "github"
                 }
             ],
-            "time": "2023-09-19T04:57:46+00:00"
+            "time": "2024-03-02T07:22:05+00:00"
         },
         {
             "name": "phpunit/php-file-iterator",
-            "version": "3.0.6",
+            "version": "4.1.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/php-file-iterator.git",
-                "reference": "cf1c2e7c203ac650e352f4cc675a7021e7d1b3cf"
+                "reference": "a95037b6d9e608ba092da1b23931e537cadc3c3c"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/cf1c2e7c203ac650e352f4cc675a7021e7d1b3cf",
-                "reference": "cf1c2e7c203ac650e352f4cc675a7021e7d1b3cf",
+                "url": "https://api.github.com/repos/sebastianbergmann/php-file-iterator/zipball/a95037b6d9e608ba092da1b23931e537cadc3c3c",
+                "reference": "a95037b6d9e608ba092da1b23931e537cadc3c3c",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.3"
+                "php": ">=8.1"
             },
             "require-dev": {
-                "phpunit/phpunit": "^9.3"
+                "phpunit/phpunit": "^10.0"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "3.0-dev"
+                    "dev-main": "4.0-dev"
                 }
             },
             "autoload": {
@@ -7267,7 +7277,8 @@
             ],
             "support": {
                 "issues": "https://github.com/sebastianbergmann/php-file-iterator/issues",
-                "source": "https://github.com/sebastianbergmann/php-file-iterator/tree/3.0.6"
+                "security": "https://github.com/sebastianbergmann/php-file-iterator/security/policy",
+                "source": "https://github.com/sebastianbergmann/php-file-iterator/tree/4.1.0"
             },
             "funding": [
                 {
@@ -7275,28 +7286,28 @@
                     "type": "github"
                 }
             ],
-            "time": "2021-12-02T12:48:52+00:00"
+            "time": "2023-08-31T06:24:48+00:00"
         },
         {
             "name": "phpunit/php-invoker",
-            "version": "3.1.1",
+            "version": "4.0.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/php-invoker.git",
-                "reference": "5a10147d0aaf65b58940a0b72f71c9ac0423cc67"
+                "reference": "f5e568ba02fa5ba0ddd0f618391d5a9ea50b06d7"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/php-invoker/zipball/5a10147d0aaf65b58940a0b72f71c9ac0423cc67",
-                "reference": "5a10147d0aaf65b58940a0b72f71c9ac0423cc67",
+                "url": "https://api.github.com/repos/sebastianbergmann/php-invoker/zipball/f5e568ba02fa5ba0ddd0f618391d5a9ea50b06d7",
+                "reference": "f5e568ba02fa5ba0ddd0f618391d5a9ea50b06d7",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.3"
+                "php": ">=8.1"
             },
             "require-dev": {
                 "ext-pcntl": "*",
-                "phpunit/phpunit": "^9.3"
+                "phpunit/phpunit": "^10.0"
             },
             "suggest": {
                 "ext-pcntl": "*"
@@ -7304,7 +7315,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "3.1-dev"
+                    "dev-main": "4.0-dev"
                 }
             },
             "autoload": {
@@ -7330,7 +7341,7 @@
             ],
             "support": {
                 "issues": "https://github.com/sebastianbergmann/php-invoker/issues",
-                "source": "https://github.com/sebastianbergmann/php-invoker/tree/3.1.1"
+                "source": "https://github.com/sebastianbergmann/php-invoker/tree/4.0.0"
             },
             "funding": [
                 {
@@ -7338,32 +7349,32 @@
                     "type": "github"
                 }
             ],
-            "time": "2020-09-28T05:58:55+00:00"
+            "time": "2023-02-03T06:56:09+00:00"
         },
         {
             "name": "phpunit/php-text-template",
-            "version": "2.0.4",
+            "version": "3.0.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/php-text-template.git",
-                "reference": "5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28"
+                "reference": "0c7b06ff49e3d5072f057eb1fa59258bf287a748"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28",
-                "reference": "5da5f67fc95621df9ff4c4e5a84d6a8a2acf7c28",
+                "url": "https://api.github.com/repos/sebastianbergmann/php-text-template/zipball/0c7b06ff49e3d5072f057eb1fa59258bf287a748",
+                "reference": "0c7b06ff49e3d5072f057eb1fa59258bf287a748",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.3"
+                "php": ">=8.1"
             },
             "require-dev": {
-                "phpunit/phpunit": "^9.3"
+                "phpunit/phpunit": "^10.0"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "2.0-dev"
+                    "dev-main": "3.0-dev"
                 }
             },
             "autoload": {
@@ -7389,7 +7400,8 @@
             ],
             "support": {
                 "issues": "https://github.com/sebastianbergmann/php-text-template/issues",
-                "source": "https://github.com/sebastianbergmann/php-text-template/tree/2.0.4"
+                "security": "https://github.com/sebastianbergmann/php-text-template/security/policy",
+                "source": "https://github.com/sebastianbergmann/php-text-template/tree/3.0.1"
             },
             "funding": [
                 {
@@ -7397,32 +7409,32 @@
                     "type": "github"
                 }
             ],
-            "time": "2020-10-26T05:33:50+00:00"
+            "time": "2023-08-31T14:07:24+00:00"
         },
         {
             "name": "phpunit/php-timer",
-            "version": "5.0.3",
+            "version": "6.0.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/php-timer.git",
-                "reference": "5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2"
+                "reference": "e2a2d67966e740530f4a3343fe2e030ffdc1161d"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/php-timer/zipball/5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2",
-                "reference": "5a63ce20ed1b5bf577850e2c4e87f4aa902afbd2",
+                "url": "https://api.github.com/repos/sebastianbergmann/php-timer/zipball/e2a2d67966e740530f4a3343fe2e030ffdc1161d",
+                "reference": "e2a2d67966e740530f4a3343fe2e030ffdc1161d",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.3"
+                "php": ">=8.1"
             },
             "require-dev": {
-                "phpunit/phpunit": "^9.3"
+                "phpunit/phpunit": "^10.0"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "5.0-dev"
+                    "dev-main": "6.0-dev"
                 }
             },
             "autoload": {
@@ -7448,7 +7460,7 @@
             ],
             "support": {
                 "issues": "https://github.com/sebastianbergmann/php-timer/issues",
-                "source": "https://github.com/sebastianbergmann/php-timer/tree/5.0.3"
+                "source": "https://github.com/sebastianbergmann/php-timer/tree/6.0.0"
             },
             "funding": [
                 {
@@ -7456,24 +7468,23 @@
                     "type": "github"
                 }
             ],
-            "time": "2020-10-26T13:16:10+00:00"
+            "time": "2023-02-03T06:57:52+00:00"
         },
         {
             "name": "phpunit/phpunit",
-            "version": "9.6.15",
+            "version": "10.5.16",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/phpunit.git",
-                "reference": "05017b80304e0eb3f31d90194a563fd53a6021f1"
+                "reference": "18f8d4a5f52b61fdd9370aaae3167daa0eeb69cd"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/05017b80304e0eb3f31d90194a563fd53a6021f1",
-                "reference": "05017b80304e0eb3f31d90194a563fd53a6021f1",
+                "url": "https://api.github.com/repos/sebastianbergmann/phpunit/zipball/18f8d4a5f52b61fdd9370aaae3167daa0eeb69cd",
+                "reference": "18f8d4a5f52b61fdd9370aaae3167daa0eeb69cd",
                 "shasum": ""
             },
             "require": {
-                "doctrine/instantiator": "^1.3.1 || ^2",
                 "ext-dom": "*",
                 "ext-json": "*",
                 "ext-libxml": "*",
@@ -7483,27 +7494,26 @@
                 "myclabs/deep-copy": "^1.10.1",
                 "phar-io/manifest": "^2.0.3",
                 "phar-io/version": "^3.0.2",
-                "php": ">=7.3",
-                "phpunit/php-code-coverage": "^9.2.28",
-                "phpunit/php-file-iterator": "^3.0.5",
-                "phpunit/php-invoker": "^3.1.1",
-                "phpunit/php-text-template": "^2.0.3",
-                "phpunit/php-timer": "^5.0.2",
-                "sebastian/cli-parser": "^1.0.1",
-                "sebastian/code-unit": "^1.0.6",
-                "sebastian/comparator": "^4.0.8",
-                "sebastian/diff": "^4.0.3",
-                "sebastian/environment": "^5.1.3",
-                "sebastian/exporter": "^4.0.5",
-                "sebastian/global-state": "^5.0.1",
-                "sebastian/object-enumerator": "^4.0.3",
-                "sebastian/resource-operations": "^3.0.3",
-                "sebastian/type": "^3.2",
-                "sebastian/version": "^3.0.2"
+                "php": ">=8.1",
+                "phpunit/php-code-coverage": "^10.1.5",
+                "phpunit/php-file-iterator": "^4.0",
+                "phpunit/php-invoker": "^4.0",
+                "phpunit/php-text-template": "^3.0",
+                "phpunit/php-timer": "^6.0",
+                "sebastian/cli-parser": "^2.0",
+                "sebastian/code-unit": "^2.0",
+                "sebastian/comparator": "^5.0",
+                "sebastian/diff": "^5.0",
+                "sebastian/environment": "^6.0",
+                "sebastian/exporter": "^5.1",
+                "sebastian/global-state": "^6.0.1",
+                "sebastian/object-enumerator": "^5.0",
+                "sebastian/recursion-context": "^5.0",
+                "sebastian/type": "^4.0",
+                "sebastian/version": "^4.0"
             },
             "suggest": {
-                "ext-soap": "To be able to generate mocks based on WSDL files",
-                "ext-xdebug": "PHP extension that provides line coverage as well as branch and path coverage"
+                "ext-soap": "To be able to generate mocks based on WSDL files"
             },
             "bin": [
                 "phpunit"
@@ -7511,7 +7521,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "9.6-dev"
+                    "dev-main": "10.5-dev"
                 }
             },
             "autoload": {
@@ -7543,7 +7553,7 @@
             "support": {
                 "issues": "https://github.com/sebastianbergmann/phpunit/issues",
                 "security": "https://github.com/sebastianbergmann/phpunit/security/policy",
-                "source": "https://github.com/sebastianbergmann/phpunit/tree/9.6.15"
+                "source": "https://github.com/sebastianbergmann/phpunit/tree/10.5.16"
             },
             "funding": [
                 {
@@ -7559,7 +7569,7 @@
                     "type": "tidelift"
                 }
             ],
-            "time": "2023-12-01T16:55:19+00:00"
+            "time": "2024-03-28T10:08:10+00:00"
         },
         {
             "name": "react/promise",
@@ -7636,28 +7646,28 @@
         },
         {
             "name": "sebastian/cli-parser",
-            "version": "1.0.1",
+            "version": "2.0.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/cli-parser.git",
-                "reference": "442e7c7e687e42adc03470c7b668bc4b2402c0b2"
+                "reference": "c34583b87e7b7a8055bf6c450c2c77ce32a24084"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/cli-parser/zipball/442e7c7e687e42adc03470c7b668bc4b2402c0b2",
-                "reference": "442e7c7e687e42adc03470c7b668bc4b2402c0b2",
+                "url": "https://api.github.com/repos/sebastianbergmann/cli-parser/zipball/c34583b87e7b7a8055bf6c450c2c77ce32a24084",
+                "reference": "c34583b87e7b7a8055bf6c450c2c77ce32a24084",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.3"
+                "php": ">=8.1"
             },
             "require-dev": {
-                "phpunit/phpunit": "^9.3"
+                "phpunit/phpunit": "^10.0"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "1.0-dev"
+                    "dev-main": "2.0-dev"
                 }
             },
             "autoload": {
@@ -7680,7 +7690,8 @@
             "homepage": "https://github.com/sebastianbergmann/cli-parser",
             "support": {
                 "issues": "https://github.com/sebastianbergmann/cli-parser/issues",
-                "source": "https://github.com/sebastianbergmann/cli-parser/tree/1.0.1"
+                "security": "https://github.com/sebastianbergmann/cli-parser/security/policy",
+                "source": "https://github.com/sebastianbergmann/cli-parser/tree/2.0.1"
             },
             "funding": [
                 {
@@ -7688,32 +7699,32 @@
                     "type": "github"
                 }
             ],
-            "time": "2020-09-28T06:08:49+00:00"
+            "time": "2024-03-02T07:12:49+00:00"
         },
         {
             "name": "sebastian/code-unit",
-            "version": "1.0.8",
+            "version": "2.0.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/code-unit.git",
-                "reference": "1fc9f64c0927627ef78ba436c9b17d967e68e120"
+                "reference": "a81fee9eef0b7a76af11d121767abc44c104e503"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/code-unit/zipball/1fc9f64c0927627ef78ba436c9b17d967e68e120",
-                "reference": "1fc9f64c0927627ef78ba436c9b17d967e68e120",
+                "url": "https://api.github.com/repos/sebastianbergmann/code-unit/zipball/a81fee9eef0b7a76af11d121767abc44c104e503",
+                "reference": "a81fee9eef0b7a76af11d121767abc44c104e503",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.3"
+                "php": ">=8.1"
             },
             "require-dev": {
-                "phpunit/phpunit": "^9.3"
+                "phpunit/phpunit": "^10.0"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "1.0-dev"
+                    "dev-main": "2.0-dev"
                 }
             },
             "autoload": {
@@ -7736,7 +7747,7 @@
             "homepage": "https://github.com/sebastianbergmann/code-unit",
             "support": {
                 "issues": "https://github.com/sebastianbergmann/code-unit/issues",
-                "source": "https://github.com/sebastianbergmann/code-unit/tree/1.0.8"
+                "source": "https://github.com/sebastianbergmann/code-unit/tree/2.0.0"
             },
             "funding": [
                 {
@@ -7744,32 +7755,32 @@
                     "type": "github"
                 }
             ],
-            "time": "2020-10-26T13:08:54+00:00"
+            "time": "2023-02-03T06:58:43+00:00"
         },
         {
             "name": "sebastian/code-unit-reverse-lookup",
-            "version": "2.0.3",
+            "version": "3.0.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/code-unit-reverse-lookup.git",
-                "reference": "ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5"
+                "reference": "5e3a687f7d8ae33fb362c5c0743794bbb2420a1d"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5",
-                "reference": "ac91f01ccec49fb77bdc6fd1e548bc70f7faa3e5",
+                "url": "https://api.github.com/repos/sebastianbergmann/code-unit-reverse-lookup/zipball/5e3a687f7d8ae33fb362c5c0743794bbb2420a1d",
+                "reference": "5e3a687f7d8ae33fb362c5c0743794bbb2420a1d",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.3"
+                "php": ">=8.1"
             },
             "require-dev": {
-                "phpunit/phpunit": "^9.3"
+                "phpunit/phpunit": "^10.0"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "2.0-dev"
+                    "dev-main": "3.0-dev"
                 }
             },
             "autoload": {
@@ -7791,7 +7802,7 @@
             "homepage": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/",
             "support": {
                 "issues": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/issues",
-                "source": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/tree/2.0.3"
+                "source": "https://github.com/sebastianbergmann/code-unit-reverse-lookup/tree/3.0.0"
             },
             "funding": [
                 {
@@ -7799,34 +7810,36 @@
                     "type": "github"
                 }
             ],
-            "time": "2020-09-28T05:30:19+00:00"
+            "time": "2023-02-03T06:59:15+00:00"
         },
         {
             "name": "sebastian/comparator",
-            "version": "4.0.8",
+            "version": "5.0.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/comparator.git",
-                "reference": "fa0f136dd2334583309d32b62544682ee972b51a"
+                "reference": "2db5010a484d53ebf536087a70b4a5423c102372"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/comparator/zipball/fa0f136dd2334583309d32b62544682ee972b51a",
-                "reference": "fa0f136dd2334583309d32b62544682ee972b51a",
+                "url": "https://api.github.com/repos/sebastianbergmann/comparator/zipball/2db5010a484d53ebf536087a70b4a5423c102372",
+                "reference": "2db5010a484d53ebf536087a70b4a5423c102372",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.3",
-                "sebastian/diff": "^4.0",
-                "sebastian/exporter": "^4.0"
+                "ext-dom": "*",
+                "ext-mbstring": "*",
+                "php": ">=8.1",
+                "sebastian/diff": "^5.0",
+                "sebastian/exporter": "^5.0"
             },
             "require-dev": {
-                "phpunit/phpunit": "^9.3"
+                "phpunit/phpunit": "^10.3"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "4.0-dev"
+                    "dev-main": "5.0-dev"
                 }
             },
             "autoload": {
@@ -7865,7 +7878,8 @@
             ],
             "support": {
                 "issues": "https://github.com/sebastianbergmann/comparator/issues",
-                "source": "https://github.com/sebastianbergmann/comparator/tree/4.0.8"
+                "security": "https://github.com/sebastianbergmann/comparator/security/policy",
+                "source": "https://github.com/sebastianbergmann/comparator/tree/5.0.1"
             },
             "funding": [
                 {
@@ -7873,33 +7887,33 @@
                     "type": "github"
                 }
             ],
-            "time": "2022-09-14T12:41:17+00:00"
+            "time": "2023-08-14T13:18:12+00:00"
         },
         {
             "name": "sebastian/complexity",
-            "version": "2.0.2",
+            "version": "3.2.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/complexity.git",
-                "reference": "739b35e53379900cc9ac327b2147867b8b6efd88"
+                "reference": "68ff824baeae169ec9f2137158ee529584553799"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/complexity/zipball/739b35e53379900cc9ac327b2147867b8b6efd88",
-                "reference": "739b35e53379900cc9ac327b2147867b8b6efd88",
+                "url": "https://api.github.com/repos/sebastianbergmann/complexity/zipball/68ff824baeae169ec9f2137158ee529584553799",
+                "reference": "68ff824baeae169ec9f2137158ee529584553799",
                 "shasum": ""
             },
             "require": {
-                "nikic/php-parser": "^4.7",
-                "php": ">=7.3"
+                "nikic/php-parser": "^4.18 || ^5.0",
+                "php": ">=8.1"
             },
             "require-dev": {
-                "phpunit/phpunit": "^9.3"
+                "phpunit/phpunit": "^10.0"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "2.0-dev"
+                    "dev-main": "3.2-dev"
                 }
             },
             "autoload": {
@@ -7922,7 +7936,8 @@
             "homepage": "https://github.com/sebastianbergmann/complexity",
             "support": {
                 "issues": "https://github.com/sebastianbergmann/complexity/issues",
-                "source": "https://github.com/sebastianbergmann/complexity/tree/2.0.2"
+                "security": "https://github.com/sebastianbergmann/complexity/security/policy",
+                "source": "https://github.com/sebastianbergmann/complexity/tree/3.2.0"
             },
             "funding": [
                 {
@@ -7930,27 +7945,27 @@
                     "type": "github"
                 }
             ],
-            "time": "2020-10-26T15:52:27+00:00"
+            "time": "2023-12-21T08:37:17+00:00"
         },
         {
             "name": "sebastian/environment",
-            "version": "5.1.5",
+            "version": "6.0.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/environment.git",
-                "reference": "830c43a844f1f8d5b7a1f6d6076b784454d8b7ed"
+                "reference": "43c751b41d74f96cbbd4e07b7aec9675651e2951"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/environment/zipball/830c43a844f1f8d5b7a1f6d6076b784454d8b7ed",
-                "reference": "830c43a844f1f8d5b7a1f6d6076b784454d8b7ed",
+                "url": "https://api.github.com/repos/sebastianbergmann/environment/zipball/43c751b41d74f96cbbd4e07b7aec9675651e2951",
+                "reference": "43c751b41d74f96cbbd4e07b7aec9675651e2951",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.3"
+                "php": ">=8.1"
             },
             "require-dev": {
-                "phpunit/phpunit": "^9.3"
+                "phpunit/phpunit": "^10.0"
             },
             "suggest": {
                 "ext-posix": "*"
@@ -7958,7 +7973,7 @@
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "5.1-dev"
+                    "dev-main": "6.0-dev"
                 }
             },
             "autoload": {
@@ -7977,7 +7992,7 @@
                 }
             ],
             "description": "Provides functionality to handle HHVM/PHP environments",
-            "homepage": "http://www.github.com/sebastianbergmann/environment",
+            "homepage": "https://github.com/sebastianbergmann/environment",
             "keywords": [
                 "Xdebug",
                 "environment",
@@ -7985,7 +8000,8 @@
             ],
             "support": {
                 "issues": "https://github.com/sebastianbergmann/environment/issues",
-                "source": "https://github.com/sebastianbergmann/environment/tree/5.1.5"
+                "security": "https://github.com/sebastianbergmann/environment/security/policy",
+                "source": "https://github.com/sebastianbergmann/environment/tree/6.0.1"
             },
             "funding": [
                 {
@@ -7993,34 +8009,34 @@
                     "type": "github"
                 }
             ],
-            "time": "2023-02-03T06:03:51+00:00"
+            "time": "2023-04-11T05:39:26+00:00"
         },
         {
             "name": "sebastian/exporter",
-            "version": "4.0.5",
+            "version": "5.1.2",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/exporter.git",
-                "reference": "ac230ed27f0f98f597c8a2b6eb7ac563af5e5b9d"
+                "reference": "955288482d97c19a372d3f31006ab3f37da47adf"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/exporter/zipball/ac230ed27f0f98f597c8a2b6eb7ac563af5e5b9d",
-                "reference": "ac230ed27f0f98f597c8a2b6eb7ac563af5e5b9d",
+                "url": "https://api.github.com/repos/sebastianbergmann/exporter/zipball/955288482d97c19a372d3f31006ab3f37da47adf",
+                "reference": "955288482d97c19a372d3f31006ab3f37da47adf",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.3",
-                "sebastian/recursion-context": "^4.0"
+                "ext-mbstring": "*",
+                "php": ">=8.1",
+                "sebastian/recursion-context": "^5.0"
             },
             "require-dev": {
-                "ext-mbstring": "*",
-                "phpunit/phpunit": "^9.3"
+                "phpunit/phpunit": "^10.0"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "4.0-dev"
+                    "dev-main": "5.1-dev"
                 }
             },
             "autoload": {
@@ -8062,7 +8078,8 @@
             ],
             "support": {
                 "issues": "https://github.com/sebastianbergmann/exporter/issues",
-                "source": "https://github.com/sebastianbergmann/exporter/tree/4.0.5"
+                "security": "https://github.com/sebastianbergmann/exporter/security/policy",
+                "source": "https://github.com/sebastianbergmann/exporter/tree/5.1.2"
             },
             "funding": [
                 {
@@ -8070,38 +8087,35 @@
                     "type": "github"
                 }
             ],
-            "time": "2022-09-14T06:03:37+00:00"
+            "time": "2024-03-02T07:17:12+00:00"
         },
         {
             "name": "sebastian/global-state",
-            "version": "5.0.6",
+            "version": "6.0.2",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/global-state.git",
-                "reference": "bde739e7565280bda77be70044ac1047bc007e34"
+                "reference": "987bafff24ecc4c9ac418cab1145b96dd6e9cbd9"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/global-state/zipball/bde739e7565280bda77be70044ac1047bc007e34",
-                "reference": "bde739e7565280bda77be70044ac1047bc007e34",
+                "url": "https://api.github.com/repos/sebastianbergmann/global-state/zipball/987bafff24ecc4c9ac418cab1145b96dd6e9cbd9",
+                "reference": "987bafff24ecc4c9ac418cab1145b96dd6e9cbd9",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.3",
-                "sebastian/object-reflector": "^2.0",
-                "sebastian/recursion-context": "^4.0"
+                "php": ">=8.1",
+                "sebastian/object-reflector": "^3.0",
+                "sebastian/recursion-context": "^5.0"
             },
             "require-dev": {
                 "ext-dom": "*",
-                "phpunit/phpunit": "^9.3"
-            },
-            "suggest": {
-                "ext-uopz": "*"
+                "phpunit/phpunit": "^10.0"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "5.0-dev"
+                    "dev-main": "6.0-dev"
                 }
             },
             "autoload": {
@@ -8120,13 +8134,14 @@
                 }
             ],
             "description": "Snapshotting of global state",
-            "homepage": "http://www.github.com/sebastianbergmann/global-state",
+            "homepage": "https://www.github.com/sebastianbergmann/global-state",
             "keywords": [
                 "global state"
             ],
             "support": {
                 "issues": "https://github.com/sebastianbergmann/global-state/issues",
-                "source": "https://github.com/sebastianbergmann/global-state/tree/5.0.6"
+                "security": "https://github.com/sebastianbergmann/global-state/security/policy",
+                "source": "https://github.com/sebastianbergmann/global-state/tree/6.0.2"
             },
             "funding": [
                 {
@@ -8134,33 +8149,33 @@
                     "type": "github"
                 }
             ],
-            "time": "2023-08-02T09:26:13+00:00"
+            "time": "2024-03-02T07:19:19+00:00"
         },
         {
             "name": "sebastian/lines-of-code",
-            "version": "1.0.3",
+            "version": "2.0.2",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/lines-of-code.git",
-                "reference": "c1c2e997aa3146983ed888ad08b15470a2e22ecc"
+                "reference": "856e7f6a75a84e339195d48c556f23be2ebf75d0"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/lines-of-code/zipball/c1c2e997aa3146983ed888ad08b15470a2e22ecc",
-                "reference": "c1c2e997aa3146983ed888ad08b15470a2e22ecc",
+                "url": "https://api.github.com/repos/sebastianbergmann/lines-of-code/zipball/856e7f6a75a84e339195d48c556f23be2ebf75d0",
+                "reference": "856e7f6a75a84e339195d48c556f23be2ebf75d0",
                 "shasum": ""
             },
             "require": {
-                "nikic/php-parser": "^4.6",
-                "php": ">=7.3"
+                "nikic/php-parser": "^4.18 || ^5.0",
+                "php": ">=8.1"
             },
             "require-dev": {
-                "phpunit/phpunit": "^9.3"
+                "phpunit/phpunit": "^10.0"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "1.0-dev"
+                    "dev-main": "2.0-dev"
                 }
             },
             "autoload": {
@@ -8183,7 +8198,8 @@
             "homepage": "https://github.com/sebastianbergmann/lines-of-code",
             "support": {
                 "issues": "https://github.com/sebastianbergmann/lines-of-code/issues",
-                "source": "https://github.com/sebastianbergmann/lines-of-code/tree/1.0.3"
+                "security": "https://github.com/sebastianbergmann/lines-of-code/security/policy",
+                "source": "https://github.com/sebastianbergmann/lines-of-code/tree/2.0.2"
             },
             "funding": [
                 {
@@ -8191,34 +8207,34 @@
                     "type": "github"
                 }
             ],
-            "time": "2020-11-28T06:42:11+00:00"
+            "time": "2023-12-21T08:38:20+00:00"
         },
         {
             "name": "sebastian/object-enumerator",
-            "version": "4.0.4",
+            "version": "5.0.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/object-enumerator.git",
-                "reference": "5c9eeac41b290a3712d88851518825ad78f45c71"
+                "reference": "202d0e344a580d7f7d04b3fafce6933e59dae906"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/5c9eeac41b290a3712d88851518825ad78f45c71",
-                "reference": "5c9eeac41b290a3712d88851518825ad78f45c71",
+                "url": "https://api.github.com/repos/sebastianbergmann/object-enumerator/zipball/202d0e344a580d7f7d04b3fafce6933e59dae906",
+                "reference": "202d0e344a580d7f7d04b3fafce6933e59dae906",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.3",
-                "sebastian/object-reflector": "^2.0",
-                "sebastian/recursion-context": "^4.0"
+                "php": ">=8.1",
+                "sebastian/object-reflector": "^3.0",
+                "sebastian/recursion-context": "^5.0"
             },
             "require-dev": {
-                "phpunit/phpunit": "^9.3"
+                "phpunit/phpunit": "^10.0"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "4.0-dev"
+                    "dev-main": "5.0-dev"
                 }
             },
             "autoload": {
@@ -8240,7 +8256,7 @@
             "homepage": "https://github.com/sebastianbergmann/object-enumerator/",
             "support": {
                 "issues": "https://github.com/sebastianbergmann/object-enumerator/issues",
-                "source": "https://github.com/sebastianbergmann/object-enumerator/tree/4.0.4"
+                "source": "https://github.com/sebastianbergmann/object-enumerator/tree/5.0.0"
             },
             "funding": [
                 {
@@ -8248,32 +8264,32 @@
                     "type": "github"
                 }
             ],
-            "time": "2020-10-26T13:12:34+00:00"
+            "time": "2023-02-03T07:08:32+00:00"
         },
         {
             "name": "sebastian/object-reflector",
-            "version": "2.0.4",
+            "version": "3.0.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/object-reflector.git",
-                "reference": "b4f479ebdbf63ac605d183ece17d8d7fe49c15c7"
+                "reference": "24ed13d98130f0e7122df55d06c5c4942a577957"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/object-reflector/zipball/b4f479ebdbf63ac605d183ece17d8d7fe49c15c7",
-                "reference": "b4f479ebdbf63ac605d183ece17d8d7fe49c15c7",
+                "url": "https://api.github.com/repos/sebastianbergmann/object-reflector/zipball/24ed13d98130f0e7122df55d06c5c4942a577957",
+                "reference": "24ed13d98130f0e7122df55d06c5c4942a577957",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.3"
+                "php": ">=8.1"
             },
             "require-dev": {
-                "phpunit/phpunit": "^9.3"
+                "phpunit/phpunit": "^10.0"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "2.0-dev"
+                    "dev-main": "3.0-dev"
                 }
             },
             "autoload": {
@@ -8295,7 +8311,7 @@
             "homepage": "https://github.com/sebastianbergmann/object-reflector/",
             "support": {
                 "issues": "https://github.com/sebastianbergmann/object-reflector/issues",
-                "source": "https://github.com/sebastianbergmann/object-reflector/tree/2.0.4"
+                "source": "https://github.com/sebastianbergmann/object-reflector/tree/3.0.0"
             },
             "funding": [
                 {
@@ -8303,32 +8319,32 @@
                     "type": "github"
                 }
             ],
-            "time": "2020-10-26T13:14:26+00:00"
+            "time": "2023-02-03T07:06:18+00:00"
         },
         {
             "name": "sebastian/recursion-context",
-            "version": "4.0.5",
+            "version": "5.0.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/recursion-context.git",
-                "reference": "e75bd0f07204fec2a0af9b0f3cfe97d05f92efc1"
+                "reference": "05909fb5bc7df4c52992396d0116aed689f93712"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/e75bd0f07204fec2a0af9b0f3cfe97d05f92efc1",
-                "reference": "e75bd0f07204fec2a0af9b0f3cfe97d05f92efc1",
+                "url": "https://api.github.com/repos/sebastianbergmann/recursion-context/zipball/05909fb5bc7df4c52992396d0116aed689f93712",
+                "reference": "05909fb5bc7df4c52992396d0116aed689f93712",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.3"
+                "php": ">=8.1"
             },
             "require-dev": {
-                "phpunit/phpunit": "^9.3"
+                "phpunit/phpunit": "^10.0"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "4.0-dev"
+                    "dev-main": "5.0-dev"
                 }
             },
             "autoload": {
@@ -8358,7 +8374,7 @@
             "homepage": "https://github.com/sebastianbergmann/recursion-context",
             "support": {
                 "issues": "https://github.com/sebastianbergmann/recursion-context/issues",
-                "source": "https://github.com/sebastianbergmann/recursion-context/tree/4.0.5"
+                "source": "https://github.com/sebastianbergmann/recursion-context/tree/5.0.0"
             },
             "funding": [
                 {
@@ -8366,87 +8382,32 @@
                     "type": "github"
                 }
             ],
-            "time": "2023-02-03T06:07:39+00:00"
-        },
-        {
-            "name": "sebastian/resource-operations",
-            "version": "3.0.3",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/sebastianbergmann/resource-operations.git",
-                "reference": "0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/resource-operations/zipball/0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8",
-                "reference": "0f4443cb3a1d92ce809899753bc0d5d5a8dd19a8",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=7.3"
-            },
-            "require-dev": {
-                "phpunit/phpunit": "^9.0"
-            },
-            "type": "library",
-            "extra": {
-                "branch-alias": {
-                    "dev-master": "3.0-dev"
-                }
-            },
-            "autoload": {
-                "classmap": [
-                    "src/"
-                ]
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "BSD-3-Clause"
-            ],
-            "authors": [
-                {
-                    "name": "Sebastian Bergmann",
-                    "email": "sebastian@phpunit.de"
-                }
-            ],
-            "description": "Provides a list of PHP built-in functions that operate on resources",
-            "homepage": "https://www.github.com/sebastianbergmann/resource-operations",
-            "support": {
-                "issues": "https://github.com/sebastianbergmann/resource-operations/issues",
-                "source": "https://github.com/sebastianbergmann/resource-operations/tree/3.0.3"
-            },
-            "funding": [
-                {
-                    "url": "https://github.com/sebastianbergmann",
-                    "type": "github"
-                }
-            ],
-            "time": "2020-09-28T06:45:17+00:00"
+            "time": "2023-02-03T07:05:40+00:00"
         },
         {
             "name": "sebastian/type",
-            "version": "3.2.1",
+            "version": "4.0.0",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/type.git",
-                "reference": "75e2c2a32f5e0b3aef905b9ed0b179b953b3d7c7"
+                "reference": "462699a16464c3944eefc02ebdd77882bd3925bf"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/type/zipball/75e2c2a32f5e0b3aef905b9ed0b179b953b3d7c7",
-                "reference": "75e2c2a32f5e0b3aef905b9ed0b179b953b3d7c7",
+                "url": "https://api.github.com/repos/sebastianbergmann/type/zipball/462699a16464c3944eefc02ebdd77882bd3925bf",
+                "reference": "462699a16464c3944eefc02ebdd77882bd3925bf",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.3"
+                "php": ">=8.1"
             },
             "require-dev": {
-                "phpunit/phpunit": "^9.5"
+                "phpunit/phpunit": "^10.0"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "3.2-dev"
+                    "dev-main": "4.0-dev"
                 }
             },
             "autoload": {
@@ -8469,7 +8430,7 @@
             "homepage": "https://github.com/sebastianbergmann/type",
             "support": {
                 "issues": "https://github.com/sebastianbergmann/type/issues",
-                "source": "https://github.com/sebastianbergmann/type/tree/3.2.1"
+                "source": "https://github.com/sebastianbergmann/type/tree/4.0.0"
             },
             "funding": [
                 {
@@ -8477,29 +8438,29 @@
                     "type": "github"
                 }
             ],
-            "time": "2023-02-03T06:13:03+00:00"
+            "time": "2023-02-03T07:10:45+00:00"
         },
         {
             "name": "sebastian/version",
-            "version": "3.0.2",
+            "version": "4.0.1",
             "source": {
                 "type": "git",
                 "url": "https://github.com/sebastianbergmann/version.git",
-                "reference": "c6c1022351a901512170118436c764e473f6de8c"
+                "reference": "c51fa83a5d8f43f1402e3f32a005e6262244ef17"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/sebastianbergmann/version/zipball/c6c1022351a901512170118436c764e473f6de8c",
-                "reference": "c6c1022351a901512170118436c764e473f6de8c",
+                "url": "https://api.github.com/repos/sebastianbergmann/version/zipball/c51fa83a5d8f43f1402e3f32a005e6262244ef17",
+                "reference": "c51fa83a5d8f43f1402e3f32a005e6262244ef17",
                 "shasum": ""
             },
             "require": {
-                "php": ">=7.3"
+                "php": ">=8.1"
             },
             "type": "library",
             "extra": {
                 "branch-alias": {
-                    "dev-master": "3.0-dev"
+                    "dev-main": "4.0-dev"
                 }
             },
             "autoload": {
@@ -8522,7 +8483,7 @@
             "homepage": "https://github.com/sebastianbergmann/version",
             "support": {
                 "issues": "https://github.com/sebastianbergmann/version/issues",
-                "source": "https://github.com/sebastianbergmann/version/tree/3.0.2"
+                "source": "https://github.com/sebastianbergmann/version/tree/4.0.1"
             },
             "funding": [
                 {
@@ -8530,7 +8491,7 @@
                     "type": "github"
                 }
             ],
-            "time": "2020-09-28T06:39:44+00:00"
+            "time": "2023-02-07T11:34:05+00:00"
         },
         {
             "name": "seld/jsonlint",
@@ -9186,99 +9147,18 @@
             ],
             "time": "2024-01-23T15:02:46+00:00"
         },
-        {
-            "name": "symfony/phpunit-bridge",
-            "version": "v7.0.4",
-            "source": {
-                "type": "git",
-                "url": "https://github.com/symfony/phpunit-bridge.git",
-                "reference": "54ca13ec990a40411ad978e08d994fca6cdd865f"
-            },
-            "dist": {
-                "type": "zip",
-                "url": "https://api.github.com/repos/symfony/phpunit-bridge/zipball/54ca13ec990a40411ad978e08d994fca6cdd865f",
-                "reference": "54ca13ec990a40411ad978e08d994fca6cdd865f",
-                "shasum": ""
-            },
-            "require": {
-                "php": ">=7.2.5"
-            },
-            "conflict": {
-                "phpunit/phpunit": "<7.5|9.1.2"
-            },
-            "require-dev": {
-                "symfony/deprecation-contracts": "^2.5|^3.0",
-                "symfony/error-handler": "^5.4|^6.4|^7.0",
-                "symfony/polyfill-php81": "^1.27"
-            },
-            "bin": [
-                "bin/simple-phpunit"
-            ],
-            "type": "symfony-bridge",
-            "extra": {
-                "thanks": {
-                    "name": "phpunit/phpunit",
-                    "url": "https://github.com/sebastianbergmann/phpunit"
-                }
-            },
-            "autoload": {
-                "files": [
-                    "bootstrap.php"
-                ],
-                "psr-4": {
-                    "Symfony\\Bridge\\PhpUnit\\": ""
-                },
-                "exclude-from-classmap": [
-                    "/Tests/"
-                ]
-            },
-            "notification-url": "https://packagist.org/downloads/",
-            "license": [
-                "MIT"
-            ],
-            "authors": [
-                {
-                    "name": "Nicolas Grekas",
-                    "email": "p@tchwork.com"
-                },
-                {
-                    "name": "Symfony Community",
-                    "homepage": "https://symfony.com/contributors"
-                }
-            ],
-            "description": "Provides utilities for PHPUnit, especially user deprecation notices management",
-            "homepage": "https://symfony.com",
-            "support": {
-                "source": "https://github.com/symfony/phpunit-bridge/tree/v7.0.4"
-            },
-            "funding": [
-                {
-                    "url": "https://symfony.com/sponsor",
-                    "type": "custom"
-                },
-                {
-                    "url": "https://github.com/fabpot",
-                    "type": "github"
-                },
-                {
-                    "url": "https://tidelift.com/funding/github/packagist/symfony/symfony",
-                    "type": "tidelift"
-                }
-            ],
-            "time": "2024-02-08T19:22:56+00:00"
-        },
         {
             "name": "theseer/tokenizer",
-            "version": "1.2.2",
+            "version": "1.2.3",
             "source": {
                 "type": "git",
                 "url": "https://github.com/theseer/tokenizer.git",
-                "reference": "b2ad5003ca10d4ee50a12da31de12a5774ba6b96"
+                "reference": "737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2"
             },
             "dist": {
                 "type": "zip",
-                "url": "https://api.github.com/repos/theseer/tokenizer/zipball/b2ad5003ca10d4ee50a12da31de12a5774ba6b96",
-                "reference": "b2ad5003ca10d4ee50a12da31de12a5774ba6b96",
+                "url": "https://api.github.com/repos/theseer/tokenizer/zipball/737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2",
+                "reference": "737eda637ed5e28c3413cb1ebe8bb52cbf1ca7a2",
                 "shasum": ""
             },
             "require": {
@@ -9307,7 +9187,7 @@
             "description": "A small library for converting tokenized PHP source code into XML and potentially other formats",
             "support": {
                 "issues": "https://github.com/theseer/tokenizer/issues",
-                "source": "https://github.com/theseer/tokenizer/tree/1.2.2"
+                "source": "https://github.com/theseer/tokenizer/tree/1.2.3"
             },
             "funding": [
                 {
@@ -9315,7 +9195,7 @@
                     "type": "github"
                 }
             ],
-            "time": "2023-11-20T00:12:19+00:00"
+            "time": "2024-03-03T12:36:25+00:00"
         },
         {
             "name": "webflo/drupal-finder",
diff --git a/composer/Metapackage/CoreRecommended/composer.json b/composer/Metapackage/CoreRecommended/composer.json
index 524a7a5bb2..c11c842554 100644
--- a/composer/Metapackage/CoreRecommended/composer.json
+++ b/composer/Metapackage/CoreRecommended/composer.json
@@ -30,7 +30,7 @@
         "psr/http-factory": "~1.0.2",
         "psr/log": "~3.0.0",
         "ralouphie/getallheaders": "~3.0.3",
-        "sebastian/diff": "~4.0.5",
+        "sebastian/diff": "~5.1.1",
         "symfony/console": "~v7.0.4",
         "symfony/dependency-injection": "~v7.0.4",
         "symfony/deprecation-contracts": "~v3.4.0",
diff --git a/composer/Metapackage/DevDependencies/composer.json b/composer/Metapackage/DevDependencies/composer.json
index 396fbfad68..eb8bf3b4bb 100644
--- a/composer/Metapackage/DevDependencies/composer.json
+++ b/composer/Metapackage/DevDependencies/composer.json
@@ -25,13 +25,12 @@
         "phpstan/extension-installer": "^1.1",
         "phpstan/phpstan": "^1.10.62",
         "phpstan/phpstan-phpunit": "^1.3.16",
-        "phpunit/phpunit": "^9.6.13",
+        "phpunit/phpunit": "^10.5.16",
         "symfony/browser-kit": "^7.0",
         "symfony/css-selector": "^7.0",
         "symfony/dom-crawler": "^7.0",
         "symfony/error-handler": "^7.0",
         "symfony/lock": "^7.0",
-        "symfony/phpunit-bridge": "^7.0",
         "symfony/var-dumper": "^7.0"
     }
 }
diff --git a/composer/Metapackage/PinnedDevDependencies/composer.json b/composer/Metapackage/PinnedDevDependencies/composer.json
index 498f9fb0c8..b67a9e532e 100644
--- a/composer/Metapackage/PinnedDevDependencies/composer.json
+++ b/composer/Metapackage/PinnedDevDependencies/composer.json
@@ -29,14 +29,14 @@
         "micheh/phpcs-gitlab": "1.1.0",
         "mikey179/vfsstream": "v1.6.11",
         "myclabs/deep-copy": "1.11.1",
-        "nikic/php-parser": "v4.18.0",
+        "nikic/php-parser": "v5.0.2",
         "open-telemetry/api": "1.0.0",
         "open-telemetry/context": "1.0.0",
         "open-telemetry/exporter-otlp": "1.0.0",
         "open-telemetry/gen-otlp-protobuf": "1.0.0",
         "open-telemetry/sdk": "1.0.1",
         "open-telemetry/sem-conv": "1.23.1",
-        "phar-io/manifest": "2.0.3",
+        "phar-io/manifest": "2.0.4",
         "phar-io/version": "3.2.1",
         "php-http/discovery": "1.19.2",
         "php-http/guzzle7-adapter": "1.0.0",
@@ -52,28 +52,27 @@
         "phpstan/phpstan": "1.10.66",
         "phpstan/phpstan-deprecation-rules": "1.1.4",
         "phpstan/phpstan-phpunit": "1.3.16",
-        "phpunit/php-code-coverage": "9.2.29",
-        "phpunit/php-file-iterator": "3.0.6",
-        "phpunit/php-invoker": "3.1.1",
-        "phpunit/php-text-template": "2.0.4",
-        "phpunit/php-timer": "5.0.3",
-        "phpunit/phpunit": "9.6.15",
+        "phpunit/php-code-coverage": "10.1.12",
+        "phpunit/php-file-iterator": "4.1.0",
+        "phpunit/php-invoker": "4.0.0",
+        "phpunit/php-text-template": "3.0.1",
+        "phpunit/php-timer": "6.0.0",
+        "phpunit/phpunit": "10.5.16",
         "react/promise": "v3.1.0",
-        "sebastian/cli-parser": "1.0.1",
-        "sebastian/code-unit": "1.0.8",
-        "sebastian/code-unit-reverse-lookup": "2.0.3",
-        "sebastian/comparator": "4.0.8",
-        "sebastian/complexity": "2.0.2",
-        "sebastian/environment": "5.1.5",
-        "sebastian/exporter": "4.0.5",
-        "sebastian/global-state": "5.0.6",
-        "sebastian/lines-of-code": "1.0.3",
-        "sebastian/object-enumerator": "4.0.4",
-        "sebastian/object-reflector": "2.0.4",
-        "sebastian/recursion-context": "4.0.5",
-        "sebastian/resource-operations": "3.0.3",
-        "sebastian/type": "3.2.1",
-        "sebastian/version": "3.0.2",
+        "sebastian/cli-parser": "2.0.1",
+        "sebastian/code-unit": "2.0.0",
+        "sebastian/code-unit-reverse-lookup": "3.0.0",
+        "sebastian/comparator": "5.0.1",
+        "sebastian/complexity": "3.2.0",
+        "sebastian/environment": "6.0.1",
+        "sebastian/exporter": "5.1.2",
+        "sebastian/global-state": "6.0.2",
+        "sebastian/lines-of-code": "2.0.2",
+        "sebastian/object-enumerator": "5.0.0",
+        "sebastian/object-reflector": "3.0.0",
+        "sebastian/recursion-context": "5.0.0",
+        "sebastian/type": "4.0.0",
+        "sebastian/version": "4.0.1",
         "seld/jsonlint": "1.10.0",
         "seld/phar-utils": "1.2.1",
         "seld/signal-handler": "2.0.2",
@@ -84,8 +83,7 @@
         "symfony/css-selector": "v7.0.3",
         "symfony/dom-crawler": "v7.0.4",
         "symfony/lock": "v7.0.3",
-        "symfony/phpunit-bridge": "v7.0.4",
-        "theseer/tokenizer": "1.2.2",
+        "theseer/tokenizer": "1.2.3",
         "webflo/drupal-finder": "1.2.2",
         "webmozart/assert": "1.11.0"
     }
diff --git a/composer/Plugin/VendorHardening/Config.php b/composer/Plugin/VendorHardening/Config.php
index 3db5c3372a..411425b14f 100644
--- a/composer/Plugin/VendorHardening/Config.php
+++ b/composer/Plugin/VendorHardening/Config.php
@@ -70,7 +70,6 @@ class Config {
     'symfony/event-dispatcher' => ['Tests'],
     'symfony/http-foundation' => ['Tests'],
     'symfony/http-kernel' => ['Tests'],
-    'symfony/phpunit-bridge' => ['Tests'],
     'symfony/process' => ['Tests'],
     'symfony/psr-http-message-bridge' => ['Tests'],
     'symfony/routing' => ['Tests'],
diff --git a/core/.deprecation-ignore.txt b/core/.deprecation-ignore.txt
index 34c1eed83a..ea2cbf2b60 100644
--- a/core/.deprecation-ignore.txt
+++ b/core/.deprecation-ignore.txt
@@ -3,7 +3,6 @@
 # See https://www.drupal.org/node/3285162 for more details.
 
 %The "Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::.*\(\)" method is considered internal Used by the validator engine\. (Should not be called by user\W+code\. )?It may change without further notice\. You should not extend it from "[^"]+"\.%
-%The "PHPUnit\\Framework\\TestCase::addWarning\(\)" method is considered internal%
 
 # Skip some dependencies' DebugClassLoader forward compatibility warnings.
 %Method "Behat\\[^"]+" might add "[^"]+" as a native return type declaration in the future. Do the same in (child class|implementation) "[^"]+" now to avoid errors or add an explicit @return annotation to suppress this message%
@@ -18,17 +17,10 @@
 %Method "Twig\\NodeVisitor\\NodeVisitorInterface::[^"]+" might add "[^"]+" as a native return type declaration in the future. Do the same in (child class|implementation) "[^"]+" now to avoid errors or add an explicit @return annotation to suppress this message%
 %Method "Twig\\TokenParser\\TokenParserInterface::[^"]+" might add "[^"]+" as a native return type declaration in the future. Do the same in (child class|implementation) "[^"]+" now to avoid errors or add an explicit @return annotation to suppress this message%
 %Method "WebDriver\\Service\\CurlServiceInterface::[^"]+" might add "[^"]+" as a native return type declaration in the future. Do the same in implementation "[^"]+" now to avoid errors or add an explicit @return annotation to suppress this message%
+# Indirect deprecations. These are not in Drupal's remit to fix, but it is
+# worth keeping track of dependencies' issues.
+%Method "[^"]+" might add "[^"]+" as a native return type declaration in the future. Do the same in implementation "org\\bovigo\\vfs\\[^"]+" now to avoid errors or add an explicit @return annotation to suppress this message%
 
 # The following deprecation is listed for Twig 2 compatibility when unit
 # testing using \Symfony\Component\ErrorHandler\DebugClassLoader.
 %The "Twig\\Environment::getTemplateClass\(\)" method is considered internal\. It may change without further notice\. You should not extend it from "Drupal\\Core\\Template\\TwigEnvironment"\.%
-
-# PHPUnit 9.
-%"PHPUnit\\Framework\\TestListener".*is deprecated%
-%"PHPUnit\\Framework\\TestListenerDefaultImplementation".*is deprecated%
-%"PHPUnit\\Framework\\TestSuite".*is considered internal%
-%"PHPUnit\\TextUI\\DefaultResultPrinter".*is considered internal%
-
-# PHPUnit 9.6.
-%Expecting E_WARNING and E_USER_WARNING is deprecated and will no longer be possible in PHPUnit 10%
-%Expecting E_ERROR and E_USER_ERROR is deprecated and will no longer be possible in PHPUnit 10%
diff --git a/core/.phpstan-baseline.php b/core/.phpstan-baseline.php
index 1f1aae4f65..0dba4f75ac 100644
--- a/core/.phpstan-baseline.php
+++ b/core/.phpstan-baseline.php
@@ -681,6 +681,11 @@
 	'count' => 1,
 	'path' => __DIR__ . '/modules/comment/tests/src/Functional/CommentTestBase.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider getLinkCombinations related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/comment/tests/src/Unit/CommentLinkBuilderTest.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Variable \\$data might not be defined\\.$#',
 	'count' => 2,
@@ -701,6 +706,11 @@
 	'count' => 1,
 	'path' => __DIR__ . '/modules/contact/src/MessageForm.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider getSendMailMessages related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/contact/tests/src/Unit/MailHandlerTest.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Variable \\$state in isset\\(\\) always exists and is not nullable\\.$#',
 	'count' => 3,
@@ -861,6 +871,16 @@
 	'count' => 1,
 	'path' => __DIR__ . '/modules/file/tests/src/Functional/FileUploadJsonCookieTest.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider dataProvider related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/file/tests/src/Functional/Formatter/FileAudioFormatterTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider dataProvider related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/file/tests/src/Functional/Formatter/FileVideoFormatterTest.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Variable \\$unexpected in empty\\(\\) always exists and is not falsy\\.$#',
 	'count' => 1,
@@ -871,6 +891,11 @@
 	'count' => 1,
 	'path' => __DIR__ . '/modules/filter/src/Plugin/Filter/FilterHtml.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\.$#',
+	'count' => 2,
+	'path' => __DIR__ . '/modules/filter/tests/src/Unit/FilterUninstallValidatorTest.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Method Drupal\\\\forum\\\\ForumManager\\:\\:getTopicOrder\\(\\) should return array but return statement is missing\\.$#',
 	'count' => 1,
@@ -881,6 +906,21 @@
 	'count' => 1,
 	'path' => __DIR__ . '/modules/forum/src/ForumUninstallValidator.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider providerTestApplies related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/forum/tests/src/Unit/Breadcrumb/ForumListingBreadcrumbBuilderTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider providerTestApplies related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/forum/tests/src/Unit/Breadcrumb/ForumNodeBreadcrumbBuilderTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/help/tests/src/Unit/HelpTopicTwigTest.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Method Drupal\\\\history\\\\Plugin\\\\views\\\\field\\\\HistoryUserTimestamp\\:\\:render\\(\\) should return Drupal\\\\Component\\\\Render\\\\MarkupInterface\\|string but return statement is missing\\.$#',
 	'count' => 1,
@@ -926,6 +966,11 @@
 	'count' => 1,
 	'path' => __DIR__ . '/modules/image/tests/src/Functional/ImageStyleFlushTest.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^Class PHPUnit\\\\Framework\\\\Error\\\\Warning not found\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/image/tests/src/Kernel/ImageItemTest.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Variable \\$reason in empty\\(\\) always exists and is not falsy\\.$#',
 	'count' => 1,
@@ -966,6 +1011,21 @@
 	'count' => 2,
 	'path' => __DIR__ . '/modules/jsonapi/tests/src/Functional/ResourceTestBase.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^Caught class PHPUnit\\\\Framework\\\\Error\\\\Warning not found\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/jsonapi/tests/src/Kernel/ResourceType/RelatedResourceTypesTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider linkComparisonProvider related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/jsonapi/tests/src/Unit/JsonApiResource/LinkTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider linkMergeProvider related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/jsonapi/tests/src/Unit/JsonApiResource/LinkTest.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Variable \\$id in isset\\(\\) always exists and is not nullable\\.$#',
 	'count' => 2,
@@ -1001,6 +1061,16 @@
 	'count' => 1,
 	'path' => __DIR__ . '/modules/link/src/Plugin/migrate/process/FieldLink.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider providerValidate related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/link/tests/src/Unit/Plugin/Validation/Constraint/LinkAccessConstraintValidatorTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider providerValidate related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/link/tests/src/Unit/Plugin/Validation/Constraint/LinkNotExistingInternalConstraintValidatorTest.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Function locale_config_batch_update_components\\(\\) should return array but return statement is missing\\.$#',
 	'count' => 1,
@@ -1061,6 +1131,16 @@
 	'count' => 1,
 	'path' => __DIR__ . '/modules/media/src/OEmbed/UrlResolver.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider providerTestValidations related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/media/tests/src/FunctionalJavascript/MediaEmbedFilterConfigurationUiAddTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider providerTestValidations related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/media/tests/src/FunctionalJavascript/MediaEmbedFilterConfigurationUiEditTest.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Variable \\$jpg_image might not be defined\\.$#',
 	'count' => 1,
@@ -1146,6 +1226,11 @@
 	'count' => 1,
 	'path' => __DIR__ . '/modules/migrate/tests/src/Kernel/MigrateTestBase.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\MockBuilder\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/migrate/tests/src/Unit/MigrateExecutableTest.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Variable \\$sub_process_plugins might not be defined\\.$#',
 	'count' => 2,
@@ -1396,6 +1481,11 @@
 	'count' => 1,
 	'path' => __DIR__ . '/modules/serialization/src/Normalizer/EntityNormalizer.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/serialization/tests/src/Unit/Normalizer/NormalizerBaseTest.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Method Drupal\\\\shortcut\\\\Form\\\\SetCustomize\\:\\:save\\(\\) should return int but return statement is missing\\.$#',
 	'count' => 1,
@@ -1528,6 +1618,11 @@
 	'count' => 3,
 	'path' => __DIR__ . '/modules/system/tests/src/Functional/Menu/BreadcrumbTest.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^Call to an undefined method Drupal\\\\Tests\\\\system\\\\Functional\\\\Menu\\\\MenuAccessTest\\:\\:getStatus\\(\\)\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/system/tests/src/Functional/Menu/MenuAccessTest.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Variable \\$test_meta in empty\\(\\) always exists and is not falsy\\.$#',
 	'count' => 2,
@@ -1538,6 +1633,16 @@
 	'count' => 2,
 	'path' => __DIR__ . '/modules/system/tests/src/Functional/Theme/ThemeUiTest.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider themeDataProvider related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/system/tests/src/FunctionalJavascript/OffCanvasTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider testAccessProvider related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/system/tests/src/Kernel/MenuAccessControlHandlerTest.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Method Drupal\\\\taxonomy\\\\Plugin\\\\migrate\\\\source\\\\d7\\\\TermTranslation\\:\\:prepareRow\\(\\) should return bool but return statement is missing\\.$#',
 	'count' => 1,
@@ -1583,6 +1688,21 @@
 	'count' => 1,
 	'path' => __DIR__ . '/modules/update/src/ProjectRelease.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider securityUpdateAvailabilityProvider related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/update/tests/src/Functional/UpdateSemverContribSecurityAvailabilityTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider securityUpdateAvailabilityProvider related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/update/tests/src/Functional/UpdateSemverCoreSecurityAvailabilityTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider providerProjectStatus related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/update/tests/src/Kernel/UpdateCalculateProjectDataTest.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Variable \\$users might not be defined\\.$#',
 	'count' => 1,
@@ -1644,16 +1764,9 @@
 	'path' => __DIR__ . '/modules/user/tests/src/Functional/UserRegistrationRestTest.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Call to deprecated method expectWarning\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
-https\\://github\\.com/sebastianbergmann/phpunit/issues/5062$#',
+	'message' => '#^@dataProvider providerTestValidate related method must be static in PHPUnit 10 and newer\\.$#',
 	'count' => 1,
-	'path' => __DIR__ . '/modules/user/tests/src/Kernel/Views/HandlerFilterRolesTest.php',
-];
-$ignoreErrors[] = [
-	'message' => '#^Call to deprecated method expectWarningMessage\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
-https\\://github\\.com/sebastianbergmann/phpunit/issues/5062$#',
-	'count' => 1,
-	'path' => __DIR__ . '/modules/user/tests/src/Kernel/Views/HandlerFilterRolesTest.php',
+	'path' => __DIR__ . '/modules/user/tests/src/Unit/Plugin/Validation/Constraint/ProtectedUserFieldConstraintValidatorTest.php',
 ];
 $ignoreErrors[] = [
 	'message' => '#^Variable \\$result in isset\\(\\) always exists and is not nullable\\.$#',
@@ -1900,6 +2013,51 @@
 	'count' => 2,
 	'path' => __DIR__ . '/modules/views/tests/src/Kernel/Plugin/StyleTest.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^Caught class PHPUnit\\\\Framework\\\\Error\\\\Warning not found\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/views/tests/src/Kernel/ViewExecutableTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\MockBuilder\\.$#',
+	'count' => 5,
+	'path' => __DIR__ . '/modules/views/tests/src/Unit/Plugin/Derivative/ViewsLocalTaskTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\.$#',
+	'count' => 2,
+	'path' => __DIR__ . '/modules/views/tests/src/Unit/Plugin/argument_validator/EntityTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\MockBuilder\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/views/tests/src/Unit/Plugin/display/PathPluginBaseTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider providerTestRenderAsLinkWithPathAndOptions related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/views/tests/src/Unit/Plugin/field/FieldPluginBaseTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\MockBuilder\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/views/tests/src/Unit/Plugin/pager/PagerPluginBaseTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\MockBuilder\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/views/tests/src/Unit/Plugin/pager/SqlBaseTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\MockBuilder\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/views/tests/src/Unit/Plugin/views/field/EntityOperationsUnitTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider provideAcceptExposedInput related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/modules/views/tests/src/Unit/Plugin/views/filter/NumericFilterTest.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Variable \\$relationship_handler in empty\\(\\) always exists and is not falsy\\.$#',
 	'count' => 1,
@@ -2025,20 +2183,28 @@
 	'count' => 1,
 	'path' => __DIR__ . '/tests/Drupal/BuildTests/Composer/Template/ComposerProjectTemplatesTest.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\MockBuilder\\.$#',
+	'count' => 2,
+	'path' => __DIR__ . '/tests/Drupal/BuildTests/Framework/Tests/BuildTestTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Caught class PHPUnit\\\\Framework\\\\Error\\\\Error not found\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/KernelTests/Config/TypedConfigTest.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Variable \\$found might not be defined\\.$#',
 	'count' => 1,
 	'path' => __DIR__ . '/tests/Drupal/KernelTests/Core/Cache/ApcuBackendTest.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Call to deprecated method expectWarning\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
-https\\://github\\.com/sebastianbergmann/phpunit/issues/5062$#',
+	'message' => '#^Call to an undefined method Drupal\\\\KernelTests\\\\Core\\\\Config\\\\ConfigInstallTest\\:\\:expectWarning\\(\\)\\.$#',
 	'count' => 1,
 	'path' => __DIR__ . '/tests/Drupal/KernelTests/Core/Config/ConfigInstallTest.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Call to deprecated method expectWarningMessage\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
-https\\://github\\.com/sebastianbergmann/phpunit/issues/5062$#',
+	'message' => '#^Call to an undefined method Drupal\\\\KernelTests\\\\Core\\\\Config\\\\ConfigInstallTest\\:\\:expectWarningMessage\\(\\)\\.$#',
 	'count' => 1,
 	'path' => __DIR__ . '/tests/Drupal/KernelTests/Core/Config/ConfigInstallTest.php',
 ];
@@ -2047,6 +2213,11 @@
 	'count' => 2,
 	'path' => __DIR__ . '/tests/Drupal/KernelTests/Core/Database/DriverSpecificKernelTestBase.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^Caught class PHPUnit\\\\Framework\\\\Error\\\\Warning not found\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/KernelTests/Core/Database/DriverSpecificTransactionTestBase.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Variable \\$title might not be defined\\.$#',
 	'count' => 2,
@@ -2067,6 +2238,26 @@
 	'count' => 1,
 	'path' => __DIR__ . '/tests/Drupal/KernelTests/Core/Entity/FieldableEntityDefinitionUpdateTest.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\MockBuilder\\.$#',
+	'count' => 2,
+	'path' => __DIR__ . '/tests/Drupal/KernelTests/Core/Installer/InstallerRedirectTraitTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/KernelTests/Core/Installer/InstallerRedirectTraitTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Class PHPUnit\\\\Framework\\\\Error\\\\Warning not found\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/KernelTests/Core/Test/Comparator/MarkupInterfaceComparatorTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to an undefined method Drupal\\\\KernelTests\\\\KernelTestBase\\:\\:getTestResultObject\\(\\)\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/KernelTests/KernelTestBase.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Variable \\$value in isset\\(\\) always exists and is not nullable\\.$#',
 	'count' => 1,
@@ -2094,14 +2285,17 @@
 	'path' => __DIR__ . '/tests/Drupal/Tests/Component/DependencyInjection/Dumper/OptimizedPhpArrayDumperTest.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Call to deprecated method expectWarning\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
-https\\://github\\.com/sebastianbergmann/phpunit/issues/5062$#',
+	'message' => '#^@dataProvider configurationDataProvider related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Component/FileCache/FileCacheFactoryTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to an undefined method Drupal\\\\Tests\\\\Component\\\\PhpStorage\\\\FileStorageTest\\:\\:expectWarning\\(\\)\\.$#',
 	'count' => 1,
 	'path' => __DIR__ . '/tests/Drupal/Tests/Component/PhpStorage/FileStorageTest.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Call to deprecated method expectWarningMessage\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
-https\\://github\\.com/sebastianbergmann/phpunit/issues/5062$#',
+	'message' => '#^Call to an undefined method Drupal\\\\Tests\\\\Component\\\\PhpStorage\\\\FileStorageTest\\:\\:expectWarningMessage\\(\\)\\.$#',
 	'count' => 1,
 	'path' => __DIR__ . '/tests/Drupal/Tests/Component/PhpStorage/FileStorageTest.php',
 ];
@@ -2160,6 +2354,16 @@
 	'count' => 1,
 	'path' => __DIR__ . '/tests/Drupal/Tests/Component/Plugin/Factory/ReflectionFactoryTest.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\.$#',
+	'count' => 4,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Component/Plugin/PluginBaseTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\MockBuilder\\.$#',
+	'count' => 2,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Component/Plugin/PluginManagerBaseTest.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Missing cache backend declaration for performance\\.$#',
 	'count' => 1,
@@ -2171,17 +2375,100 @@
 	'path' => __DIR__ . '/tests/Drupal/Tests/Composer/ComposerTest.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Call to deprecated method expectError\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
-https\\://github\\.com/sebastianbergmann/phpunit/issues/5062$#',
+	'message' => '#^@dataProvider providerTestResolveConditions related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Condition/ConditionAccessResolverTraitTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to an undefined method Drupal\\\\Tests\\\\Core\\\\Config\\\\ConfigTest\\:\\:expectError\\(\\)\\.$#',
 	'count' => 1,
 	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Config/ConfigTest.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Call to deprecated method expectError\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
-https\\://github\\.com/sebastianbergmann/phpunit/issues/5062$#',
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\.$#',
+	'count' => 3,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Config/Entity/ConfigEntityBaseUnitTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Config/Entity/ConfigEntityStorageTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\.$#',
+	'count' => 5,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Config/Entity/EntityDisplayBaseTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider providerTestGetKeys related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Config/Entity/Query/QueryFactoryTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Controller/ControllerBaseTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider providerTestStaticTitleWithParameter related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Controller/TitleResolverTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to an undefined method Drupal\\\\Tests\\\\Core\\\\Database\\\\ConditionTest\\:\\:expectError\\(\\)\\.$#',
 	'count' => 1,
 	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Database/ConditionTest.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider providerTestProcess related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/DependencyInjection/Compiler/BackendCompilerPassTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\MockBuilder\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Entity/ContentEntityBaseUnitTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Entity/EntityFormTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Entity/EntityLinkTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider providerLoad related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Entity/EntityStorageBaseTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider providerLoadMultiple related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Entity/EntityStorageBaseTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\MockBuilder\\.$#',
+	'count' => 2,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Entity/EntityStorageBaseTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\.$#',
+	'count' => 2,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Entity/EntityTypeManagerTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Entity/EntityTypeTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\MockBuilder\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Entity/EntityUrlTest.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Trying to mock an undefined method getRevisionId\\(\\) on class Drupal\\\\Tests\\\\Core\\\\Entity\\\\UrlTestEntity\\.$#',
 	'count' => 1,
@@ -2193,14 +2480,37 @@
 	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Entity/EntityUrlTest.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Call to deprecated method expectWarning\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
-https\\://github\\.com/sebastianbergmann/phpunit/issues/5062$#',
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Entity/KeyValueStore/KeyValueEntityStorageTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider providerTestRequiresEntityDataMigration related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Entity/Sql/SqlContentEntityStorageSchemaTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider providerTestRequiresEntityStorageSchemaChanges related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Entity/Sql/SqlContentEntityStorageSchemaTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\MockBuilder\\.$#',
+	'count' => 3,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Entity/Sql/SqlContentEntityStorageTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider provideFatalExitCodeData related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Error/DrupalLogErrorTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to an undefined method Drupal\\\\Tests\\\\Core\\\\EventSubscriber\\\\SpecialAttributesRouteSubscriberTest\\:\\:expectWarning\\(\\)\\.$#',
 	'count' => 1,
 	'path' => __DIR__ . '/tests/Drupal/Tests/Core/EventSubscriber/SpecialAttributesRouteSubscriberTest.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Call to deprecated method expectWarningMessage\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
-https\\://github\\.com/sebastianbergmann/phpunit/issues/5062$#',
+	'message' => '#^Call to an undefined method Drupal\\\\Tests\\\\Core\\\\EventSubscriber\\\\SpecialAttributesRouteSubscriberTest\\:\\:expectWarningMessage\\(\\)\\.$#',
 	'count' => 1,
 	'path' => __DIR__ . '/tests/Drupal/Tests/Core/EventSubscriber/SpecialAttributesRouteSubscriberTest.php',
 ];
@@ -2210,6 +2520,16 @@
 	'count' => 1,
 	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Http/ClientFactoryTest.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Lock/LockBackendAbstractTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider providerTestLog related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Logger/LoggerChannelTest.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Call to method getDefinitions\\(\\) on an unknown class Drupal\\\\Core\\\\Plugin\\\\CategorizingPluginManagerTrait\\.$#',
 	'count' => 1,
@@ -2225,6 +2545,16 @@
 	'count' => 1,
 	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Plugin/CategorizingPluginManagerTraitTest.php',
 ];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider providerTestCheckRequirements related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Plugin/ContextHandlerTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider providerTestGetMatchingContexts related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Plugin/ContextHandlerTest.php',
+];
 $ignoreErrors[] = [
 	'message' => '#^Constructor of class Drupal\\\\Tests\\\\Core\\\\Plugin\\\\Discovery\\\\TestContainerDerivativeDiscovery has an unused parameter \\$example_service\\.$#',
 	'count' => 1,
@@ -2246,85 +2576,85 @@
 	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Plugin/TestPluginManager.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Call to deprecated method expectError\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
-https\\://github\\.com/sebastianbergmann/phpunit/issues/5062$#',
+	'message' => '#^@dataProvider dataProviderIsRenderArray related method must be static in PHPUnit 10 and newer\\.$#',
 	'count' => 1,
 	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Render/ElementTest.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Call to deprecated method expectErrorMessage\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
-https\\://github\\.com/sebastianbergmann/phpunit/issues/5062$#',
+	'message' => '#^Call to an undefined method Drupal\\\\Tests\\\\Core\\\\Render\\\\ElementTest\\:\\:expectError\\(\\)\\.$#',
 	'count' => 1,
 	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Render/ElementTest.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Call to deprecated method expectWarning\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
-https\\://github\\.com/sebastianbergmann/phpunit/issues/5062$#',
+	'message' => '#^Call to an undefined method Drupal\\\\Tests\\\\Core\\\\Render\\\\ElementTest\\:\\:expectErrorMessage\\(\\)\\.$#',
 	'count' => 1,
-	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Security/DoTrustedCallbackTraitTest.php',
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Render/ElementTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider providerTestRenderBasic related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 1,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Render/RendererTest.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Call to deprecated method expectWarningMessage\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
-https\\://github\\.com/sebastianbergmann/phpunit/issues/5062$#',
+	'message' => '#^Call to an undefined method Drupal\\\\Tests\\\\Core\\\\Security\\\\DoTrustedCallbackTraitTest\\:\\:expectWarning\\(\\)\\.$#',
 	'count' => 1,
 	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Security/DoTrustedCallbackTraitTest.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Variable \\$value in isset\\(\\) always exists and is not nullable\\.$#',
+	'message' => '#^Call to an undefined method Drupal\\\\Tests\\\\Core\\\\Security\\\\DoTrustedCallbackTraitTest\\:\\:expectWarningMessage\\(\\)\\.$#',
 	'count' => 1,
-	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Test/AssertContentTraitTest.php',
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Security/DoTrustedCallbackTraitTest.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Call to deprecated method getConfig\\(\\) of class GuzzleHttp\\\\ClientInterface\\:
-ClientInterface\\:\\:getConfig will be removed in guzzlehttp/guzzle\\:8\\.0\\.$#',
+	'message' => '#^@dataProvider alterPermissionsProvider related method must be static in PHPUnit 10 and newer\\.$#',
 	'count' => 1,
-	'path' => __DIR__ . '/tests/Drupal/Tests/DrupalTestBrowser.php',
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Session/SuperUserAccessPolicyTest.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Class Drupal\\\\Tests\\\\Listeners\\\\DrupalListener implements deprecated interface PHPUnit\\\\Framework\\\\TestListener\\.$#',
+	'message' => '#^@dataProvider calculatePermissionsProvider related method must be static in PHPUnit 10 and newer\\.$#',
 	'count' => 1,
-	'path' => __DIR__ . '/tests/Drupal/Tests/Listeners/DrupalListener.php',
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Session/SuperUserAccessPolicyTest.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Usage of deprecated trait PHPUnit\\\\Framework\\\\TestListenerDefaultImplementation in class Drupal\\\\Tests\\\\Listeners\\\\DrupalListener\\:
-The `TestListener` interface is deprecated$#',
+	'message' => '#^@dataProvider calculatePermissionsProvider related method must be static in PHPUnit 10 and newer\\.$#',
 	'count' => 1,
-	'path' => __DIR__ . '/tests/Drupal/Tests/Listeners/DrupalListener.php',
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Session/UserRolesAccessPolicyTest.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Class Drupal\\\\Tests\\\\TestSuites\\\\BuildTestSuite extends deprecated class Drupal\\\\Tests\\\\TestSuites\\\\TestSuiteBase\\:
-in drupal\\:10\\.3\\.0 and is removed from drupal\\:11\\.0\\.0\\. There is no
-  replacement and test discovery will be handled differently in PHPUnit 10\\.$#',
+	'message' => '#^Variable \\$value in isset\\(\\) always exists and is not nullable\\.$#',
 	'count' => 1,
-	'path' => __DIR__ . '/tests/TestSuites/BuildTestSuite.php',
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Test/AssertContentTraitTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\MockBuilder\\.$#',
+	'count' => 3,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Test/BrowserTestBaseTest.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Class Drupal\\\\Tests\\\\TestSuites\\\\FunctionalJavascriptTestSuite extends deprecated class Drupal\\\\Tests\\\\TestSuites\\\\TestSuiteBase\\:
-in drupal\\:10\\.3\\.0 and is removed from drupal\\:11\\.0\\.0\\. There is no
-  replacement and test discovery will be handled differently in PHPUnit 10\\.$#',
+	'message' => '#^Call to deprecated method getMockForAbstractClass\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\MockBuilder\\.$#',
 	'count' => 1,
-	'path' => __DIR__ . '/tests/TestSuites/FunctionalJavascriptTestSuite.php',
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Test/WebDriverTestBaseTest.php',
+];
+$ignoreErrors[] = [
+	'message' => '#^@dataProvider providerTestValidatePropertyWithInvalidObjects related method must be static in PHPUnit 10 and newer\\.$#',
+	'count' => 2,
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/TypedData/RecursiveContextualValidatorTest.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Class Drupal\\\\Tests\\\\TestSuites\\\\FunctionalTestSuite extends deprecated class Drupal\\\\Tests\\\\TestSuites\\\\TestSuiteBase\\:
-in drupal\\:10\\.3\\.0 and is removed from drupal\\:11\\.0\\.0\\. There is no
-  replacement and test discovery will be handled differently in PHPUnit 10\\.$#',
+	'message' => '#^@dataProvider callableResolverTestCases related method must be static in PHPUnit 10 and newer\\.$#',
 	'count' => 1,
-	'path' => __DIR__ . '/tests/TestSuites/FunctionalTestSuite.php',
+	'path' => __DIR__ . '/tests/Drupal/Tests/Core/Utility/CallableResolverTest.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Class Drupal\\\\Tests\\\\TestSuites\\\\KernelTestSuite extends deprecated class Drupal\\\\Tests\\\\TestSuites\\\\TestSuiteBase\\:
-in drupal\\:10\\.3\\.0 and is removed from drupal\\:11\\.0\\.0\\. There is no
-  replacement and test discovery will be handled differently in PHPUnit 10\\.$#',
+	'message' => '#^Call to deprecated method getConfig\\(\\) of class GuzzleHttp\\\\ClientInterface\\:
+ClientInterface\\:\\:getConfig will be removed in guzzlehttp/guzzle\\:8\\.0\\.$#',
 	'count' => 1,
-	'path' => __DIR__ . '/tests/TestSuites/KernelTestSuite.php',
+	'path' => __DIR__ . '/tests/Drupal/Tests/DrupalTestBrowser.php',
 ];
 $ignoreErrors[] = [
-	'message' => '#^Class Drupal\\\\Tests\\\\TestSuites\\\\UnitTestSuite extends deprecated class Drupal\\\\Tests\\\\TestSuites\\\\TestSuiteBase\\:
-in drupal\\:10\\.3\\.0 and is removed from drupal\\:11\\.0\\.0\\. There is no
-  replacement and test discovery will be handled differently in PHPUnit 10\\.$#',
+	'message' => '#^@dataProvider hexCodes related method must be static in PHPUnit 10 and newer\\.$#',
 	'count' => 1,
-	'path' => __DIR__ . '/tests/TestSuites/UnitTestSuite.php',
+	'path' => __DIR__ . '/themes/olivero/tests/src/Unit/OliveroHexToHslTest.php',
 ];
 
 return ['parameters' => ['ignoreErrors' => $ignoreErrors]];
diff --git a/core/lib/Drupal/Core/Config/ConfigInstaller.php b/core/lib/Drupal/Core/Config/ConfigInstaller.php
index ec94fb331c..e6634aff8a 100644
--- a/core/lib/Drupal/Core/Config/ConfigInstaller.php
+++ b/core/lib/Drupal/Core/Config/ConfigInstaller.php
@@ -106,6 +106,7 @@ public function __construct(ConfigFactoryInterface $config_factory, StorageInter
    * {@inheritdoc}
    */
   public function installDefaultConfig($type, $name) {
+dump([__METHOD__, $type, $name]);
     $extension_path = $this->extensionPathResolver->getPath($type, $name);
     // Refresh the schema cache if the extension provides configuration schema
     // or is a theme.
@@ -326,6 +327,7 @@ protected function getConfigToCreate(StorageInterface $storage, $collection, $pr
    *   An array of configuration data to create, keyed by name.
    */
   protected function createConfiguration($collection, array $config_to_create) {
+//dump([__METHOD__, $collection, $config_to_create]);
     // Order the configuration to install in the order of dependencies.
     if ($collection == StorageInterface::DEFAULT_COLLECTION) {
       $dependency_manager = new ConfigDependencyManager();
diff --git a/core/lib/Drupal/Core/Test/PhpUnitTestRunner.php b/core/lib/Drupal/Core/Test/PhpUnitTestRunner.php
index f238cf4d34..2a2344fe36 100644
--- a/core/lib/Drupal/Core/Test/PhpUnitTestRunner.php
+++ b/core/lib/Drupal/Core/Test/PhpUnitTestRunner.php
@@ -4,6 +4,7 @@
 
 use Drupal\Core\Database\Database;
 use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
+use Drupal\TestTools\Extension\DeprecationBridge\DeprecationHandler;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\Process\PhpExecutableFinder;
 use Symfony\Component\Process\Process;
@@ -98,7 +99,7 @@ public function phpUnitCommand(): string {
    * @param string[] $unescaped_test_classnames
    *   An array of test class names, including full namespaces, to be passed as
    *   a regular expression to PHPUnit's --filter option.
-   * @param string $phpunit_file
+   * @param string $log_junit_file_path
    *   A filepath to use for PHPUnit's --log-junit option.
    * @param int $status
    *   (optional) The exit status code of the PHPUnit process will be assigned
@@ -109,7 +110,7 @@ public function phpUnitCommand(): string {
    *
    * @internal
    */
-  public function runCommand(array $unescaped_test_classnames, string $phpunit_file, int &$status = NULL, array &$output = NULL): void {
+  public function runCommand(array $unescaped_test_classnames, string $log_junit_file_path, int &$status = NULL, array &$output = NULL): void {
     global $base_url;
     // Setup an environment variable containing the database connection so that
     // functional tests can connect to the database.
@@ -129,10 +130,20 @@ public function runCommand(array $unescaped_test_classnames, string $phpunit_fil
 
     $command = [
       $phpunit_bin,
+      '--display-errors',
+      '--display-warnings',
+      '--fail-on-warning',
       '--log-junit',
-      $phpunit_file,
+      $log_junit_file_path,
     ];
 
+    if (DeprecationHandler::getConfiguration() !== FALSE) {
+      $command = array_merge($command, [
+        '--display-deprecations',
+        '--fail-on-deprecation',
+      ]);
+    }
+
     // Optimized for running a single test.
     if (count($unescaped_test_classnames) == 1) {
       $class = new \ReflectionClass($unescaped_test_classnames[0]);
diff --git a/core/lib/Drupal/Core/Test/TestDiscovery.php b/core/lib/Drupal/Core/Test/TestDiscovery.php
index f98eae6641..7e86ed4d72 100644
--- a/core/lib/Drupal/Core/Test/TestDiscovery.php
+++ b/core/lib/Drupal/Core/Test/TestDiscovery.php
@@ -7,7 +7,6 @@
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Extension\ExtensionDiscovery;
 use Drupal\Core\Test\Exception\MissingGroupException;
-use Drupal\TestTools\PhpUnitCompatibility\ClassWriter;
 
 /**
  * Discovers available tests.
@@ -108,10 +107,6 @@ public function registerTestNamespaces() {
       $this->classLoader->addPsr4($prefix, $paths);
     }
 
-    $loader = require __DIR__ . '/../../../../../autoload.php';
-    // Ensure we have a valid TestCase class.
-    ClassWriter::mutateTestBase($loader);
-
     return $this->testNamespaces;
   }
 
diff --git a/core/lib/Drupal/Core/Test/TestRunnerKernel.php b/core/lib/Drupal/Core/Test/TestRunnerKernel.php
index e1729f8250..7e06574436 100644
--- a/core/lib/Drupal/Core/Test/TestRunnerKernel.php
+++ b/core/lib/Drupal/Core/Test/TestRunnerKernel.php
@@ -5,6 +5,7 @@
 use Drupal\Core\DrupalKernel;
 use Drupal\Core\Extension\Extension;
 use Drupal\Core\Site\Settings;
+use Drupal\TestTools\Extension\DeprecationBridge\DeprecationHandler;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
@@ -60,7 +61,10 @@ public function boot() {
 
     // Remove Drupal's error/exception handlers; they are designed for HTML
     // and there is no storage nor a (watchdog) logger here.
-    restore_error_handler();
+    $currentErrorHandler = DeprecationHandler::currentErrorHandler();
+    if (is_string($currentErrorHandler) && $currentErrorHandler === '_drupal_error_handler') {
+      restore_error_handler();
+    }
     restore_exception_handler();
 
     // In addition, ensure that PHP errors are not hidden away in logs.
diff --git a/core/lib/Drupal/Core/Test/TestSetupTrait.php b/core/lib/Drupal/Core/Test/TestSetupTrait.php
index 287c4ad24b..68ad7aaaeb 100644
--- a/core/lib/Drupal/Core/Test/TestSetupTrait.php
+++ b/core/lib/Drupal/Core/Test/TestSetupTrait.php
@@ -186,6 +186,7 @@ protected function changeDatabasePrefix() {
         // prefixes of the test runner leak into the test.
         $connection_info[$target]['prefix'] = $value['prefix'] . $this->databasePrefix;
       }
+      Database::removeConnection('default');
       Database::addConnectionInfo('default', 'default', $connection_info['default']);
     }
   }
diff --git a/core/modules/migrate/tests/src/Unit/Exception/MigrateSkipProcessExceptionTest.php b/core/modules/migrate/tests/src/Unit/Exception/MigrateSkipProcessExceptionTest.php
index 15e218b089..1d8fcbd95f 100644
--- a/core/modules/migrate/tests/src/Unit/Exception/MigrateSkipProcessExceptionTest.php
+++ b/core/modules/migrate/tests/src/Unit/Exception/MigrateSkipProcessExceptionTest.php
@@ -19,7 +19,7 @@ class MigrateSkipProcessExceptionTest extends UnitTestCase {
    */
   public function testDeprecation(): void {
     $this->expectException(MigrateSkipProcessException::class);
-    $this->expectDeprecation("Unsilenced deprecation: " . MigrateSkipProcessException::class . " is deprecated in drupal:10.3.0 and is removed from drupal:12.0.0. Return TRUE from a process plugin's isPipelineStopped() method to halt further processing on a pipeline. See https://www.drupal.org/node/3414511");
+    $this->expectDeprecation(MigrateSkipProcessException::class . " is deprecated in drupal:10.3.0 and is removed from drupal:12.0.0. Return TRUE from a process plugin's isPipelineStopped() method to halt further processing on a pipeline. See https://www.drupal.org/node/3414511");
     throw new MigrateSkipProcessException();
   }
 
diff --git a/core/modules/tour/tests/src/Kernel/TourTipLegacyTest.php b/core/modules/tour/tests/src/Kernel/TourTipLegacyTest.php
deleted file mode 100644
index 41272c21c2..0000000000
--- a/core/modules/tour/tests/src/Kernel/TourTipLegacyTest.php
+++ /dev/null
@@ -1,23 +0,0 @@
-<?php
-
-namespace Drupal\Tests\tour\Kernel;
-
-use Drupal\tour\TourTipPluginInterface;
-use PHPUnit\Framework\TestCase;
-use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;
-
-/**
- * @coversDefaultClass \Drupal\tour\TourTipPluginInterface
- * @group tour
- * @group legacy
- */
-class TourTipLegacyTest extends TestCase {
-  use ExpectDeprecationTrait;
-
-  public function testPluginHelperDeprecation(): void {
-    $this->expectDeprecation('The Drupal\tour\TourTipPluginInterface is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Implement Drupal\tour\TipPluginInterface instead. See https://www.drupal.org/node/3340701');
-    $plugin = $this->createMock(TourTipPluginInterface::class);
-    $this->assertInstanceOf(TourTipPluginInterface::class, $plugin);
-  }
-
-}
diff --git a/core/modules/user/tests/src/Kernel/Views/HandlerFilterRolesTest.php b/core/modules/user/tests/src/Kernel/Views/HandlerFilterRolesTest.php
index c695efd94c..05e230820e 100644
--- a/core/modules/user/tests/src/Kernel/Views/HandlerFilterRolesTest.php
+++ b/core/modules/user/tests/src/Kernel/Views/HandlerFilterRolesTest.php
@@ -5,6 +5,7 @@
 use Drupal\user\Entity\Role;
 use Drupal\views\Entity\View;
 use Drupal\views\Views;
+use PHPUnit\Framework\Exception;
 
 /**
  * Tests the roles filter handler.
@@ -114,8 +115,8 @@ public function testMissingRole() {
     // Ensure no warning is triggered before the role is deleted.
     $view->calculateDependencies();
     $role->delete();
-    $this->expectWarning();
-    $this->expectWarningMessage('The test_user_role role does not exist. You should review and fix the configuration of the test_user_name view.');
+    $this->expectException(Exception::class);
+    $this->expectExceptionMessage('The test_user_role role does not exist. You should review and fix the configuration of the test_user_name view.');
     $view->calculateDependencies();
   }
 
diff --git a/core/phpunit.xml.dist b/core/phpunit.xml.dist
index c616c8c179..6c8809a1e9 100644
--- a/core/phpunit.xml.dist
+++ b/core/phpunit.xml.dist
@@ -1,5 +1,4 @@
 <?xml version="1.0" encoding="UTF-8"?>
-
 <!-- For how to customize PHPUnit configuration, see core/tests/README.md. -->
 <!-- TODO set checkForUnintentionallyCoveredCode="true" once https://www.drupal.org/node/2626832 is resolved. -->
 <!-- PHPUnit expects functional tests to be run with either a privileged user
@@ -7,14 +6,15 @@
  https://www.drupal.org/node/2116263 for details.
 -->
 <phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         bootstrap="tests/bootstrap.php" colors="true"
+         bootstrap="tests/bootstrap.php"
+         colors="true"
          beStrictAboutTestsThatDoNotTestAnything="true"
          beStrictAboutOutputDuringTests="true"
          beStrictAboutChangesToGlobalState="true"
          failOnWarning="true"
-         printerClass="\Drupal\Tests\Listeners\HtmlOutputPrinter"
          cacheResult="false"
-         xsi:noNamespaceSchemaLocation="https://schema.phpunit.de/9.3/phpunit.xsd">
+         xsi:noNamespaceSchemaLocation="https://schema.phpunit.de/10.5/phpunit.xsd"
+         cacheDirectory=".phpunit.cache">
   <php>
     <!-- Set error reporting to E_ALL. -->
     <ini name="error_reporting" value="32767"/>
@@ -33,7 +33,6 @@
      reachable from your host machine here. This will allow you to follow them
      directly and view the output. -->
     <env name="BROWSERTEST_OUTPUT_BASE_URL" value=""/>
-
     <!-- Deprecation testing is managed through Symfony's PHPUnit Bridge.
       The environment variable SYMFONY_DEPRECATIONS_HELPER is used to configure
       the behavior of the deprecation tests.
@@ -52,37 +51,42 @@
       correctly.
     -->
     <!-- <env name="SYMFONY_DEPRECATIONS_HELPER" value="ignoreFile=.deprecation-ignore.txt"/> -->
-
     <!-- Example for changing the driver class for mink tests MINK_DRIVER_CLASS value: 'Drupal\FunctionalJavascriptTests\DrupalSelenium2Driver' -->
-    <env name="MINK_DRIVER_CLASS" value=''/>
+    <env name="MINK_DRIVER_CLASS" value=""/>
     <!-- Example for changing the driver args to mink tests MINK_DRIVER_ARGS value: '["http://127.0.0.1:8510"]' -->
-    <env name="MINK_DRIVER_ARGS" value=''/>
+    <env name="MINK_DRIVER_ARGS" value=""/>
     <!-- Example for changing the driver args to webdriver tests MINK_DRIVER_ARGS_WEBDRIVER value: '["chrome", { "goog:chromeOptions": { "w3c": false } }, "http://localhost:4444/wd/hub"]' For using the Firefox browser, replace "chrome" with "firefox" -->
-    <env name="MINK_DRIVER_ARGS_WEBDRIVER" value=''/>
+    <env name="MINK_DRIVER_ARGS_WEBDRIVER" value=""/>
   </php>
   <testsuites>
     <testsuite name="unit">
-      <file>./tests/TestSuites/UnitTestSuite.php</file>
+      <directory>tests/Drupal/Tests</directory>
+      <directory>modules/**/tests/src/Unit</directory>
+      <directory>../modules/**/tests/src/Unit</directory>
     </testsuite>
     <testsuite name="kernel">
-      <file>./tests/TestSuites/KernelTestSuite.php</file>
+      <directory>tests/Drupal/KernelTests</directory>
+      <directory>modules/**/tests/src/Kernel</directory>
+      <directory>../modules/**/tests/src/Kernel</directory>
     </testsuite>
     <testsuite name="functional">
-      <file>./tests/TestSuites/FunctionalTestSuite.php</file>
+      <directory>tests/Drupal/FunctionalTests</directory>
+      <directory>modules/**/tests/src/Functional</directory>
+      <directory>../modules/**/tests/src/Functional</directory>
     </testsuite>
     <testsuite name="functional-javascript">
-      <file>./tests/TestSuites/FunctionalJavascriptTestSuite.php</file>
+      <directory>tests/Drupal/FunctionalJavascriptTests</directory>
+      <directory>modules/**/tests/src/FunctionalJavascript</directory>
+      <directory>../modules/**/tests/src/FunctionalJavascript</directory>
     </testsuite>
     <testsuite name="build">
-      <file>./tests/TestSuites/BuildTestSuite.php</file>
+      <directory>tests/Drupal/BuildTests</directory>
+      <directory>modules/**/tests/src/Build</directory>
+      <directory>../modules/**/tests/src/Build</directory>
     </testsuite>
   </testsuites>
-  <listeners>
-    <listener class="\Drupal\Tests\Listeners\DrupalListener">
-    </listener>
-  </listeners>
   <!-- Settings for coverage reports. -->
-  <coverage>
+  <source ignoreSuppressionOfDeprecations="true">
     <include>
       <directory>./includes</directory>
       <directory>./lib</directory>
@@ -101,5 +105,5 @@
       <directory suffix=".api.php">./modules/**</directory>
       <directory suffix=".api.php">../modules/**</directory>
     </exclude>
-  </coverage>
+  </source>
 </phpunit>
diff --git a/core/scripts/run-tests.sh b/core/scripts/run-tests.sh
index 56ad3e553f..b741bc6605 100755
--- a/core/scripts/run-tests.sh
+++ b/core/scripts/run-tests.sh
@@ -25,7 +25,6 @@
 use Drupal\Core\Test\TestRunnerKernel;
 use Drupal\Core\Test\TestRunResultsStorageInterface;
 use Drupal\Core\Test\TestDiscovery;
-use Drupal\TestTools\PhpUnitCompatibility\ClassWriter;
 use PHPUnit\Framework\TestCase;
 use PHPUnit\Runner\Version;
 use Symfony\Component\Console\Output\ConsoleOutput;
@@ -511,7 +510,6 @@ function simpletest_script_init() {
   $autoloader = require_once __DIR__ . '/../../autoload.php';
   // The PHPUnit compatibility layer needs to be available to autoload tests.
   $autoloader->add('Drupal\\TestTools', __DIR__ . '/../tests');
-  ClassWriter::mutateTestBase($autoloader);
 
   // Get URL from arguments.
   if (!empty($args['url'])) {
diff --git a/core/tests/Drupal/BuildTests/Framework/BuildTestBase.php b/core/tests/Drupal/BuildTests/Framework/BuildTestBase.php
index f0cb552acf..afdd7fcbcb 100644
--- a/core/tests/Drupal/BuildTests/Framework/BuildTestBase.php
+++ b/core/tests/Drupal/BuildTests/Framework/BuildTestBase.php
@@ -11,7 +11,6 @@
 use Drupal\Component\FileSystem\FileSystem as DrupalFilesystem;
 use Drupal\Tests\DrupalTestBrowser;
 use Drupal\Tests\PhpUnitCompatibilityTrait;
-use Drupal\Tests\Traits\PhpUnitWarnings;
 use Drupal\TestTools\Extension\RequiresComposerTrait;
 use PHPUnit\Framework\TestCase;
 use Symfony\Component\Filesystem\Filesystem as SymfonyFilesystem;
@@ -55,7 +54,6 @@
 abstract class BuildTestBase extends TestCase {
 
   use RequiresComposerTrait;
-  use PhpUnitWarnings;
   use PhpUnitCompatibilityTrait;
 
   /**
diff --git a/core/tests/Drupal/BuildTests/Framework/Tests/BuildTestTest.php b/core/tests/Drupal/BuildTests/Framework/Tests/BuildTestTest.php
index c55ae1580e..4803397db4 100644
--- a/core/tests/Drupal/BuildTests/Framework/Tests/BuildTestTest.php
+++ b/core/tests/Drupal/BuildTests/Framework/Tests/BuildTestTest.php
@@ -92,6 +92,7 @@ public function testCopyCodebaseExclude() {
     /** @var \PHPUnit\Framework\MockObject\MockBuilder|\Drupal\BuildTests\Framework\BuildTestBase $base */
     $base = $this->getMockBuilder(BuildTestBase::class)
       ->onlyMethods(['getDrupalRoot', 'getComposerRoot'])
+      ->setConstructorArgs(['test'])
       ->getMockForAbstractClass();
     $base->expects($this->exactly(1))
       ->method('getDrupalRoot')
@@ -170,6 +171,7 @@ public function testCopyCodebaseDocRoot() {
     /** @var \PHPUnit\Framework\MockObject\MockBuilder|\Drupal\BuildTests\Framework\BuildTestBase $base */
     $base = $this->getMockBuilder(BuildTestBase::class)
       ->onlyMethods(['getDrupalRoot', 'getComposerRoot'])
+      ->setConstructorArgs(['test'])
       ->getMockForAbstractClass();
     $base->expects($this->exactly(3))
       ->method('getDrupalRoot')
diff --git a/core/tests/Drupal/FunctionalJavascriptTests/WebDriverTestBase.php b/core/tests/Drupal/FunctionalJavascriptTests/WebDriverTestBase.php
index 9ec2762613..d8f0b3d2de 100644
--- a/core/tests/Drupal/FunctionalJavascriptTests/WebDriverTestBase.php
+++ b/core/tests/Drupal/FunctionalJavascriptTests/WebDriverTestBase.php
@@ -7,7 +7,6 @@
 use Behat\Mink\Exception\DriverException;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Tests\BrowserTestBase;
-use PHPUnit\Runner\BaseTestRunner;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
@@ -96,11 +95,6 @@ protected function initFrontPage() {
    */
   protected function tearDown(): void {
     if ($this->mink) {
-      $status = $this->getStatus();
-      if ($status === BaseTestRunner::STATUS_ERROR || $status === BaseTestRunner::STATUS_WARNING || $status === BaseTestRunner::STATUS_FAILURE) {
-        // Ensure we capture the output at point of failure.
-        @$this->htmlOutput();
-      }
       // Wait for all requests to finish. It is possible that an AJAX request is
       // still on-going.
       $result = $this->getSession()->wait(5000, 'window.drupalActiveXhrCount === 0 || typeof window.drupalActiveXhrCount === "undefined"');
diff --git a/core/tests/Drupal/FunctionalTests/Test/FunctionalTestDebugHtmlOutputTest.php b/core/tests/Drupal/FunctionalTests/Test/FunctionalTestDebugHtmlOutputTest.php
index ae88182aa6..8042764364 100644
--- a/core/tests/Drupal/FunctionalTests/Test/FunctionalTestDebugHtmlOutputTest.php
+++ b/core/tests/Drupal/FunctionalTests/Test/FunctionalTestDebugHtmlOutputTest.php
@@ -26,8 +26,15 @@ class FunctionalTestDebugHtmlOutputTest extends BrowserTestBase {
    * running a functional test are met.
    */
   public function testFunctionalTestDebugHtmlOutput(): void {
-    // Test with the specified output directory.
-    $process = Process::fromShellCommandline('vendor/bin/phpunit --configuration core --verbose core/tests/Drupal/FunctionalTests/Test/FunctionalTestDebugHtmlOutputHelperTest.php');
+    $command = [
+      'vendor/bin/phpunit',
+      '--configuration',
+      'core',
+      'core/tests/Drupal/FunctionalTests/Test/FunctionalTestDebugHtmlOutputHelperTest.php',
+    ];
+
+    // Test with the default output directory, specified by BROWSERTEST_OUTPUT_DIRECTORY.
+    $process = new Process($command);
     $process->setWorkingDirectory($this->root)
       ->setTimeout(300)
       ->setIdleTimeout(300);
@@ -36,15 +43,31 @@ public function testFunctionalTestDebugHtmlOutput(): void {
       'COMMAND: ' . $process->getCommandLine() . "\n" .
       'OUTPUT: ' . $process->getOutput() . "\n" .
       'ERROR: ' . $process->getErrorOutput() . "\n");
-    $this->assertStringContainsString('HTML output was generated', $process->getOutput());
+    $this->assertStringContainsString('HTML output was generated, 1 page(s).', $process->getOutput());
+
+    // Test with verbose output.
+    $process = new Process($command);
+    $process->setWorkingDirectory($this->root)
+      ->setTimeout(300)
+      ->setIdleTimeout(300);
+    $process->run(NULL, [
+      'BROWSERTEST_OUTPUT_VERBOSE' => '1',
+    ]);
+    $this->assertEquals(0, $process->getExitCode(),
+      'COMMAND: ' . $process->getCommandLine() . "\n" .
+      'OUTPUT: ' . $process->getOutput() . "\n" .
+      'ERROR: ' . $process->getErrorOutput() . "\n");
+    $this->assertStringContainsString('HTML output was generated.', $process->getOutput());
     $this->assertStringContainsString('Drupal_FunctionalTests_Test_FunctionalTestDebugHtmlOutputHelperTest', $process->getOutput());
 
     // Test with a wrong output directory.
-    $process = Process::fromShellCommandline('vendor/bin/phpunit --configuration core --verbose core/tests/Drupal/FunctionalTests/Test/FunctionalTestDebugHtmlOutputHelperTest.php');
+    $process = new Process($command);
     $process->setWorkingDirectory($this->root)
       ->setTimeout(300)
       ->setIdleTimeout(300);
-    $process->run(NULL, ['BROWSERTEST_OUTPUT_DIRECTORY' => 'can_we_assume_that_a_subdirectory_with_this_name_does_not_exist']);
+    $process->run(NULL, [
+      'BROWSERTEST_OUTPUT_DIRECTORY' => 'can_we_assume_that_a_subdirectory_with_this_name_does_not_exist',
+    ]);
     $this->assertEquals(0, $process->getExitCode(),
       'COMMAND: ' . $process->getCommandLine() . "\n" .
       'OUTPUT: ' . $process->getOutput() . "\n" .
diff --git a/core/tests/Drupal/KernelTests/Core/DrupalKernel/DrupalKernelSiteTest.php b/core/tests/Drupal/KernelTests/Core/DrupalKernel/DrupalKernelSiteTest.php
index 5d3c9b5fe3..6127320183 100644
--- a/core/tests/Drupal/KernelTests/Core/DrupalKernel/DrupalKernelSiteTest.php
+++ b/core/tests/Drupal/KernelTests/Core/DrupalKernel/DrupalKernelSiteTest.php
@@ -36,6 +36,7 @@ class: Drupal\Component\Datetime\Time
   # Add a new service.
   site.service.yml:
     class: $class
+    arguments: ['test']
   # Swap out a core service.
   cache.backend.database:
     class: Drupal\Core\Cache\MemoryBackendFactory
diff --git a/core/tests/Drupal/KernelTests/KernelTestBase.php b/core/tests/Drupal/KernelTests/KernelTestBase.php
index 236ddf89a4..a0a6151c7d 100644
--- a/core/tests/Drupal/KernelTests/KernelTestBase.php
+++ b/core/tests/Drupal/KernelTests/KernelTestBase.php
@@ -21,8 +21,8 @@
 use Drupal\Tests\RandomGeneratorTrait;
 use Drupal\Tests\PhpUnitCompatibilityTrait;
 use Drupal\Tests\TestRequirementsTrait;
-use Drupal\Tests\Traits\PhpUnitWarnings;
 use Drupal\TestTools\Comparator\MarkupInterfaceComparator;
+use Drupal\TestTools\Extension\DeprecationBridge\ExpectDeprecationTrait;
 use Drupal\TestTools\Extension\SchemaInspector;
 use Drupal\TestTools\TestVarDumper;
 use PHPUnit\Framework\Exception;
@@ -36,7 +36,6 @@
 use Drupal\Core\Routing\RouteObjectInterface;
 use Symfony\Component\Routing\Route;
 use Symfony\Component\VarDumper\VarDumper;
-use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;
 use Symfony\Component\HttpFoundation\Exception\SessionNotFoundException;
 
 /**
@@ -90,7 +89,6 @@ abstract class KernelTestBase extends TestCase implements ServiceProviderInterfa
   use ConfigTestTrait;
   use ExtensionListTestTrait;
   use TestRequirementsTrait;
-  use PhpUnitWarnings;
   use PhpUnitCompatibilityTrait;
   use ProphecyTrait;
   use ExpectDeprecationTrait;
diff --git a/core/tests/Drupal/KernelTests/KernelTestBaseTest.php b/core/tests/Drupal/KernelTests/KernelTestBaseTest.php
index 2f97a77a4e..ad00049b7c 100644
--- a/core/tests/Drupal/KernelTests/KernelTestBaseTest.php
+++ b/core/tests/Drupal/KernelTests/KernelTestBaseTest.php
@@ -9,6 +9,7 @@
 use Drupal\user\Entity\Role;
 use org\bovigo\vfs\vfsStream;
 use org\bovigo\vfs\visitor\vfsStreamStructureVisitor;
+use PHPUnit\Framework\Attributes\ExcludeGlobalVariableFromBackup;
 use Psr\Http\Client\ClientExceptionInterface;
 use Symfony\Component\HttpFoundation\Request;
 
@@ -64,6 +65,7 @@ public function testGetDatabaseConnectionInfoWithOutManualSetDbUrl() {
   /**
    * @covers ::setUp
    */
+  #[ExcludeGlobalVariableFromBackup('destroy-me')]
   public function testSetUp() {
     $this->assertTrue($this->container->has('request_stack'));
     $this->assertTrue($this->container->initialized('request_stack'));
diff --git a/core/tests/Drupal/TestTools/Comparator/MarkupInterfaceComparator.php b/core/tests/Drupal/TestTools/Comparator/MarkupInterfaceComparator.php
index 00499e5997..63804f8802 100644
--- a/core/tests/Drupal/TestTools/Comparator/MarkupInterfaceComparator.php
+++ b/core/tests/Drupal/TestTools/Comparator/MarkupInterfaceComparator.php
@@ -39,7 +39,7 @@ public function assertEquals($expected, $actual, $delta = 0.0, $canonicalize = F
         @trigger_error("Using assert[Not]Equals() to compare markup between MarkupInterface objects and plain strings is deprecated in drupal:10.1.0 and will throw an error from drupal:11.0.0. Expected: '{$expected_safe}' - Actual '{$actual_safe}'. Use assert[Not]Same() and cast objects to string instead. See https://www.drupal.org/node/3334057", E_USER_DEPRECATED);
       }
     }
-    $comparator = $this->factory->getComparatorFor($expected_safe_stripped, $actual_safe_stripped);
+    $comparator = $this->factory()->getComparatorFor($expected_safe_stripped, $actual_safe_stripped);
     $comparator->assertEquals($expected_safe_stripped, $actual_safe_stripped, $delta, $canonicalize, $ignoreCase);
   }
 
diff --git a/core/tests/Drupal/TestTools/Extension/DeprecationBridge/BootstrapErrorHandler.php b/core/tests/Drupal/TestTools/Extension/DeprecationBridge/BootstrapErrorHandler.php
new file mode 100644
index 0000000000..e09798f887
--- /dev/null
+++ b/core/tests/Drupal/TestTools/Extension/DeprecationBridge/BootstrapErrorHandler.php
@@ -0,0 +1,55 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\TestTools\Extension\DeprecationBridge;
+
+use PHPUnit\Event\Code\NoTestCaseObjectOnCallStackException;
+use PHPUnit\Runner\ErrorHandler;
+
+/**
+ * @todo
+ *
+ * @internal
+ */
+final class BootstrapErrorHandler {
+
+  private ErrorHandler $phpUnitErrorHandler;
+
+  /**
+   * @todo
+   */
+  public function __construct() {
+    $this->phpUnitErrorHandler = new ErrorHandler();
+  }
+
+  /**
+   * @todo
+   */
+  public function __invoke(int $errorNumber, string $errorString, string $errorFile, int $errorLine): bool {
+    // We collect a deprecation no matter what.
+    if (E_USER_DEPRECATED === $errorNumber || E_DEPRECATED === $errorNumber) {
+      DeprecationHandler::collectActualDeprecation($errorString);
+    }
+
+    // If the deprecation handled is one of those in the ignore list, we keep
+    // running.
+    if ((E_USER_DEPRECATED === $errorNumber || E_DEPRECATED === $errorNumber) && DeprecationHandler::isIgnoredDeprecation($errorString)) {
+      return TRUE;
+    }
+
+    // In all other cases (errors, warnings, deprecations to be reported), we
+    // fall back to PHPUnit's error handler, an instance of which was created
+    // when this error handler was created.
+    try {
+      call_user_func($this->phpUnitErrorHandler, $errorNumber, $errorString, $errorFile, $errorLine);
+    }
+    catch (NoTestCaseObjectOnCallStackException $e) {
+      // If we end up here, it's likely because a test's processing has
+      // finished already and we are processing an error that occurred while
+      // dealing with STDOUT rewinding or truncating. Do nothing.
+    }
+    return TRUE;
+  }
+
+}
diff --git a/core/tests/Drupal/TestTools/Extension/DeprecationBridge/DeprecationHandler.php b/core/tests/Drupal/TestTools/Extension/DeprecationBridge/DeprecationHandler.php
new file mode 100644
index 0000000000..63442f1983
--- /dev/null
+++ b/core/tests/Drupal/TestTools/Extension/DeprecationBridge/DeprecationHandler.php
@@ -0,0 +1,178 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\TestTools\Extension\DeprecationBridge;
+
+use PHPUnit\Framework\TestCase;
+
+/**
+ * @todo
+ *
+ * @internal
+ */
+final class DeprecationHandler {
+
+  private static bool $enabled = FALSE;
+
+  /**
+   * @var list<string>
+   */
+  private static array $deprecationIgnorePatterns = [];
+
+  /**
+   * @var list<string>
+   */
+  private static array $expectedDeprecations = [];
+
+  /**
+   * @var list<string>
+   */
+  private static array $collectedDeprecations = [];
+
+  /**
+   * This class should not be instantiated.
+   */
+  private function __construct() {
+    throw new \LogicException(__CLASS__ . ' should not be instantiated');
+  }
+
+  /**
+   * @todo
+   */
+  public static function getConfiguration(): array|FALSE {
+    $environmentVariable = getenv('SYMFONY_DEPRECATIONS_HELPER');
+    if ($environmentVariable === 'disabled') {
+      return FALSE;
+    }
+    if ($environmentVariable === FALSE) {
+      // Ensure ignored deprecation patterns listed in .deprecation-ignore.txt
+      // are considered in testing.
+      $relativeFilePath = __DIR__ . "/../../../../../.deprecation-ignore.txt";
+      $deprecationIgnoreFilename = realpath($relativeFilePath);
+      if (empty($deprecationIgnoreFilename)) {
+        throw new \InvalidArgumentException(sprintf('The ignoreFile "%s" does not exist.', $relativeFilePath));
+      }
+      $environmentVariable = "ignoreFile=$deprecationIgnoreFilename";
+    }
+    parse_str($environmentVariable, $configuration);
+    return $configuration;
+  }
+
+  /**
+   * @todo
+   */
+  public static function isEnabled(): bool {
+    return self::$enabled;
+  }
+
+  /**
+   * @todo
+   */
+  public static function init(?string $ignoreFile = NULL): void {
+    if (self::isEnabled()) {
+      throw new \LogicException(__CLASS__ . ' is already initialized');
+    }
+
+    // Load the deprecation ignore patterns from the specified file.
+    if ($ignoreFile && !self::$deprecationIgnorePatterns) {
+      if (!is_file($ignoreFile)) {
+        throw new \InvalidArgumentException(sprintf('The ignoreFile "%s" does not exist.', $ignoreFile));
+      }
+      set_error_handler(static function ($t, $m) use ($ignoreFile, &$line) {
+        throw new \RuntimeException(sprintf('Invalid pattern found in "%s" on line "%d"', $ignoreFile, 1 + $line) . substr($m, 12));
+      });
+      try {
+        foreach (file($ignoreFile) as $line => $pattern) {
+          if ((trim($pattern)[0] ?? '#') !== '#') {
+            preg_match($pattern, '');
+            self::$deprecationIgnorePatterns[] = $pattern;
+          }
+        }
+      }
+      finally {
+        restore_error_handler();
+      }
+    }
+
+    // Mark the extension as enabled.
+    self::$enabled = TRUE;
+  }
+
+  public static function reset(): void {
+    if (!self::isEnabled()) {
+      return;
+    }
+    self::$expectedDeprecations = [];
+    self::$collectedDeprecations = [];
+  }
+
+  public static function expectDeprecation(string $message): void {
+    if (!self::isEnabled()) {
+      return;
+    }
+    self::$expectedDeprecations[] = $message;
+  }
+
+  public static function getExpectedDeprecations(): array {
+    if (!self::isEnabled()) {
+      throw new \LogicException(__CLASS__ . ' is not initialized');
+    }
+    return self::$expectedDeprecations;
+  }
+
+  public static function collectActualDeprecation(string $message): void {
+    if (!self::isEnabled()) {
+      return;
+    }
+    self::$collectedDeprecations[] = $message;
+  }
+
+  public static function getCollectedDeprecations(): array {
+    if (!self::isEnabled()) {
+      throw new \LogicException(__CLASS__ . ' is not initialized');
+    }
+    return self::$collectedDeprecations;
+  }
+
+  public static function isIgnoredDeprecation(string $deprecationMessage): bool {
+    if (!self::$deprecationIgnorePatterns) {
+      return FALSE;
+    }
+    $result = @preg_filter(self::$deprecationIgnorePatterns, '$0', $deprecationMessage);
+    if (preg_last_error() !== \PREG_NO_ERROR) {
+      throw new \RuntimeException(preg_last_error_msg());
+    }
+    return (bool) $result;
+  }
+
+  public static function isDeprecationTest(TestCase $testCase): bool {
+    return $testCase->valueObjectForEvents()->metadata()->isIgnoreDeprecations()->isNotEmpty() || self::isTestInLegacyGroup($testCase);
+  }
+
+  private static function isTestInLegacyGroup(TestCase $testCase): bool {
+    $groups = [];
+    foreach ($testCase->valueObjectForEvents()->metadata()->isGroup() as $metadata) {
+      $groups[] = $metadata->groupName();
+    }
+    return in_array('legacy', $groups, TRUE);
+  }
+
+  /**
+   * @todo
+   */
+  public static function currentErrorHandler(): ?callable {
+    $currentHandler = set_error_handler('var_dump');
+    restore_error_handler();
+    return $currentHandler;
+  }
+
+  /**
+   * @todo for debugging. Remove eventually.
+   */
+  public static function dumpErrorHandler($msg): void {
+    $handler = self::currentErrorHandler();
+    dump([$msg, (is_object($handler) ? get_class($handler) : $handler)]);
+  }
+
+}
diff --git a/core/tests/Drupal/TestTools/Extension/DeprecationBridge/ExpectDeprecationTrait.php b/core/tests/Drupal/TestTools/Extension/DeprecationBridge/ExpectDeprecationTrait.php
new file mode 100644
index 0000000000..8bab8a343b
--- /dev/null
+++ b/core/tests/Drupal/TestTools/Extension/DeprecationBridge/ExpectDeprecationTrait.php
@@ -0,0 +1,58 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\TestTools\Extension\DeprecationBridge;
+
+use PHPUnit\Framework\Attributes\After;
+use PHPUnit\Framework\Attributes\Before;
+
+/**
+ * Manage expected deprecations.
+ *
+ * @internal
+ */
+trait ExpectDeprecationTrait {
+
+  #[Before]
+  public function setUpErrorHandler(): void {
+    if (!DeprecationHandler::isEnabled()) {
+      return;
+    }
+
+    DeprecationHandler::reset();
+    set_error_handler(new TestErrorHandler(DeprecationHandler::currentErrorHandler(), $this));
+  }
+
+  #[After]
+  public function tearDownErrorHandler(): void {
+    if (!DeprecationHandler::isEnabled()) {
+      return;
+    }
+
+    if (DeprecationHandler::currentErrorHandler() instanceof TestErrorHandler) {
+      restore_error_handler();
+    }
+
+    // Checks if collected deprecations match the expectations.
+    if (DeprecationHandler::getExpectedDeprecations()) {
+      $prefix = "@expectedDeprecation:\n";
+      $expDep = $prefix . '%A  ' . implode("\n%A  ", DeprecationHandler::getExpectedDeprecations()) . "\n%A";
+      $actDep = $prefix . '  ' . implode("\n  ", DeprecationHandler::getCollectedDeprecations()) . "\n";
+      $this->assertStringMatchesFormat($expDep, $actDep);
+    }
+  }
+
+  public function expectDeprecation(string $message): void {
+    if (!DeprecationHandler::isDeprecationTest($this)) {
+      throw new \RuntimeException('expectDeprecation() can only be called from tests marked with #[IgnoreDeprecations] or \'@group legacy\'');
+    }
+
+    if (!DeprecationHandler::isEnabled()) {
+      return;
+    }
+
+    DeprecationHandler::expectDeprecation($message);
+  }
+
+}
diff --git a/core/tests/Drupal/TestTools/Extension/DeprecationBridge/TestErrorHandler.php b/core/tests/Drupal/TestTools/Extension/DeprecationBridge/TestErrorHandler.php
new file mode 100644
index 0000000000..5416a3133c
--- /dev/null
+++ b/core/tests/Drupal/TestTools/Extension/DeprecationBridge/TestErrorHandler.php
@@ -0,0 +1,42 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\TestTools\Extension\DeprecationBridge;
+
+/**
+ * @todo
+ *
+ * @internal
+ */
+final class TestErrorHandler {
+
+  /**
+   * @todo
+   */
+  public function __construct(
+    private $parentHandler,
+    private $testCase,
+  ) {
+  }
+
+  /**
+   * @todo
+   */
+  public function __invoke(int $errorNumber, string $errorString, string $errorFile, int $errorLine): bool {
+    // We are within a test execution. If we have a deprecation and the test is
+    // a deprecation test, than we just collect the deprecation and return to
+    // execution, since deprecations are expected.
+    if ((E_USER_DEPRECATED === $errorNumber || E_DEPRECATED === $errorNumber) && DeprecationHandler::isDeprecationTest($this->testCase)) {
+      DeprecationHandler::collectActualDeprecation($errorString);
+      return TRUE;
+    }
+
+    // In all other cases (errors, warnings, deprecations in normal tests), we
+    // fall back to the parent error handler, which is the one that was
+    // registered in the test runner bootstrap (BootstrapErrorHandler).
+    call_user_func($this->parentHandler, $errorNumber, $errorString, $errorFile, $errorLine);
+    return TRUE;
+  }
+
+}
diff --git a/core/tests/Drupal/TestTools/Extension/HtmlLogging/HtmlOutputLogger.php b/core/tests/Drupal/TestTools/Extension/HtmlLogging/HtmlOutputLogger.php
new file mode 100644
index 0000000000..98185be257
--- /dev/null
+++ b/core/tests/Drupal/TestTools/Extension/HtmlLogging/HtmlOutputLogger.php
@@ -0,0 +1,102 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\TestTools\Extension\HtmlLogging;
+
+use PHPUnit\Event\Facade;
+use PHPUnit\Event\TestRunner\Finished as TestRunnerFinished;
+use PHPUnit\Event\TestRunner\Started as TestRunnerStarted;
+
+/**
+ * @internal
+ */
+final class HtmlOutputLogger {
+
+  /**
+   * The singleton instance.
+   */
+  private static ?self $instance = NULL;
+
+  /**
+   * @todo
+   */
+  private static array $links = [];
+
+  /**
+   * @throws \PHPUnit\Event\EventFacadeIsSealedException
+   * @throws \PHPUnit\Util\Exception
+   * @throws \PHPUnit\Event\UnknownSubscriberTypeException
+   * @throws \RuntimeException
+   */
+  private function __construct(
+    private readonly string $outputDirectory,
+    private readonly bool $outputVerbose,
+    private readonly Facade $facade,
+  ) {
+    $this->facade->registerSubscriber(new TestRunnerStartedSubscriber($this));
+    $this->facade->registerSubscriber(new TestRunnerFinishedSubscriber($this));
+  }
+
+  /**
+   * @todo
+   *
+   * @throws \PHPUnit\Event\EventFacadeIsSealedException
+   * @throws \PHPUnit\Util\Exception
+   * @throws \PHPUnit\Event\UnknownSubscriberTypeException
+   * @throws \RuntimeException
+   */
+  public static function init(string $outputDirectory, bool $outputVerbose): void {
+    if (self::$instance === NULL) {
+      if (!is_dir($outputDirectory) || !is_writable($outputDirectory)) {
+        print "HTML output directory {$outputDirectory} is not a writable directory.\n\n";
+      }
+      self::$instance = new self($outputDirectory, $outputVerbose, Facade::instance());
+    }
+  }
+
+  /**
+   * @todo
+   */
+  public static function isEnabled(): bool {
+    return self::$instance !== NULL;
+  }
+
+  /**
+   * @todo
+   *
+   * @throws \RuntimeException
+   */
+  public static function log(string $logEntry): void {
+    if (!self::isEnabled()) {
+      throw new \RuntimeException("HTML output is not enabled");
+    }
+    self::$links[] = $logEntry;
+  }
+
+  /**
+   * Empties the list of the HTML output created during the test run.
+   */
+  public function testRunnerStarted(TestRunnerStarted $event): void {
+    self::$links = [];
+  }
+
+  /**
+   * Prints the list of HTML output generated during the test.
+   */
+  public function testRunnerFinished(TestRunnerFinished $event): void {
+    if (self::$links) {
+      print "\n\n";
+      if ($this->outputVerbose) {
+        print "HTML output was generated.\n\n";
+        foreach (self::$links as $link) {
+          print $link;
+        }
+      }
+      else {
+        print "HTML output was generated, " . count(self::$links) . " page(s).\n\n";
+      }
+    }
+  }
+
+}
diff --git a/core/tests/Drupal/TestTools/Extension/HtmlLogging/SubscriberBase.php b/core/tests/Drupal/TestTools/Extension/HtmlLogging/SubscriberBase.php
new file mode 100644
index 0000000000..d5e7d2fd38
--- /dev/null
+++ b/core/tests/Drupal/TestTools/Extension/HtmlLogging/SubscriberBase.php
@@ -0,0 +1,21 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\TestTools\Extension\HtmlLogging;
+
+/**
+ * @internal
+ */
+abstract class SubscriberBase {
+
+  public function __construct(
+    private readonly HtmlOutputLogger $logger,
+  ) {
+  }
+
+  protected function logger(): HtmlOutputLogger {
+    return $this->logger;
+  }
+
+}
diff --git a/core/tests/Drupal/TestTools/Extension/HtmlLogging/TestRunnerFinishedSubscriber.php b/core/tests/Drupal/TestTools/Extension/HtmlLogging/TestRunnerFinishedSubscriber.php
new file mode 100644
index 0000000000..f0e3c14956
--- /dev/null
+++ b/core/tests/Drupal/TestTools/Extension/HtmlLogging/TestRunnerFinishedSubscriber.php
@@ -0,0 +1,19 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\TestTools\Extension\HtmlLogging;
+
+use PHPUnit\Event\TestRunner\Finished;
+use PHPUnit\Event\TestRunner\FinishedSubscriber;
+
+/**
+ * @internal
+ */
+final class TestRunnerFinishedSubscriber extends SubscriberBase implements FinishedSubscriber {
+
+  public function notify(Finished $event): void {
+    $this->logger()->testRunnerFinished($event);
+  }
+
+}
diff --git a/core/tests/Drupal/TestTools/Extension/HtmlLogging/TestRunnerStartedSubscriber.php b/core/tests/Drupal/TestTools/Extension/HtmlLogging/TestRunnerStartedSubscriber.php
new file mode 100644
index 0000000000..f27a2e44bd
--- /dev/null
+++ b/core/tests/Drupal/TestTools/Extension/HtmlLogging/TestRunnerStartedSubscriber.php
@@ -0,0 +1,19 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\TestTools\Extension\HtmlLogging;
+
+use PHPUnit\Event\TestRunner\Started;
+use PHPUnit\Event\TestRunner\StartedSubscriber;
+
+/**
+ * @internal
+ */
+final class TestRunnerStartedSubscriber extends SubscriberBase implements StartedSubscriber {
+
+  public function notify(Started $event): void {
+    $this->logger()->testRunnerStarted($event);
+  }
+
+}
diff --git a/core/tests/Drupal/TestTools/PhpUnitCompatibility/ClassWriter.php b/core/tests/Drupal/TestTools/PhpUnitCompatibility/ClassWriter.php
deleted file mode 100644
index 76d5deb891..0000000000
--- a/core/tests/Drupal/TestTools/PhpUnitCompatibility/ClassWriter.php
+++ /dev/null
@@ -1,118 +0,0 @@
-<?php
-
-declare(strict_types=1);
-
-namespace Drupal\TestTools\PhpUnitCompatibility;
-
-use Composer\Autoload\ClassLoader;
-
-/**
- * Helper class to rewrite PHPUnit's TestCase class.
- *
- * This class contains static methods only and is not meant to be instantiated.
- *
- * @internal
- *   This should only be called by test running code. Drupal 9 will provide best
- *   effort to maintain this class for the Drupal 9 cycle. However if changes to
- *   PHP or PHPUnit make this impossible then support will be removed.
- */
-final class ClassWriter {
-
-  /**
-   * This class should not be instantiated.
-   */
-  private function __construct() {
-  }
-
-  /**
-   * Mutates PHPUnit classes to make it compatible with Drupal.
-   *
-   * @param \Composer\Autoload\ClassLoader $autoloader
-   *   The autoloader.
-   *
-   * @throws \ReflectionException
-   */
-  public static function mutateTestBase($autoloader) {
-    static::alterAssert($autoloader);
-    static::alterTestCase($autoloader);
-  }
-
-  /**
-   * Alters the Assert class.
-   *
-   * @param \Composer\Autoload\ClassLoader $autoloader
-   *   The autoloader.
-   *
-   * @throws \ReflectionException
-   */
-  private static function alterAssert(ClassLoader $autoloader): void {
-    // If the class exists already there is nothing we can do. Hopefully this
-    // is happening because this has been called already. The call from
-    // \Drupal\Core\Test\TestDiscovery::registerTestNamespaces() necessitates
-    // this protection.
-    if (class_exists('PHPUnit\Framework\Assert', FALSE)) {
-      return;
-    }
-    // Mutate Assert code to make it forward compatible with different PhpUnit
-    // versions, by adding Symfony's PHPUnit-bridge PolyfillAssertTrait.
-    $alteredFile = $autoloader->findFile('PHPUnit\Framework\Assert');
-    $phpunit_dir = dirname($alteredFile, 3);
-    $alteredCode = file_get_contents($alteredFile);
-    $alteredCode = preg_replace('/abstract class Assert[^\{]+\{/', '$0 ' . \PHP_EOL . "    use \Symfony\Bridge\PhpUnit\Legacy\PolyfillAssertTrait;" . \PHP_EOL, $alteredCode, 1);
-    include static::flushAlteredCodeToFile('Assert.php', $alteredCode);
-  }
-
-  /**
-   * Alters the TestCase class.
-   *
-   * @param \Composer\Autoload\ClassLoader $autoloader
-   *   The autoloader.
-   *
-   * @throws \ReflectionException
-   */
-  private static function alterTestCase(ClassLoader $autoloader): void {
-    // If the class exists already there is nothing we can do. Hopefully this
-    // is happening because this has been called already. The call from
-    // \Drupal\Core\Test\TestDiscovery::registerTestNamespaces() necessitates
-    // this protection.
-    if (class_exists('PHPUnit\Framework\TestCase', FALSE)) {
-      return;
-    }
-    // Mutate TestCase code to make it forward compatible with different PhpUnit
-    // versions, by adding Symfony's PHPUnit-bridge PolyfillTestCaseTrait.
-    $alteredFile = $autoloader->findFile('PHPUnit\Framework\TestCase');
-    $phpunit_dir = dirname($alteredFile, 3);
-    $alteredCode = file_get_contents($alteredFile);
-    $alteredCode = preg_replace('/abstract class TestCase[^\{]+\{/', '$0 ' . \PHP_EOL . "    use \Symfony\Bridge\PhpUnit\Legacy\PolyfillTestCaseTrait;" . \PHP_EOL, $alteredCode, 1);
-    $alteredCode = str_replace("__DIR__ . '/../Util/", "'$phpunit_dir/src/Util/", $alteredCode);
-    include static::flushAlteredCodeToFile('TestCase.php', $alteredCode);
-  }
-
-  /**
-   * Flushes altered class code to file when necessary.
-   *
-   * @param string $file_name
-   *   The file name.
-   * @param string $altered_code
-   *   The altered code.
-   *
-   * @return string
-   *   The full path of the file to be included.
-   */
-  private static function flushAlteredCodeToFile(string $file_name, string $altered_code): string {
-    $directory = __DIR__ . '/../../../../../sites/simpletest';
-    $full_path = $directory . '/' . $file_name;
-
-    // Only write when necessary.
-    if (!file_exists($full_path) || md5_file($full_path) !== md5($altered_code)) {
-      // Create directory when necessary.
-      if (!is_dir($directory) && !@mkdir($directory, 0777, TRUE) && !is_dir($directory)) {
-        throw new \RuntimeException('Unable to create directory: ' . $directory);
-      }
-      file_put_contents($full_path, $altered_code);
-    }
-
-    return $full_path;
-  }
-
-}
diff --git a/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit9/TestCompatibilityTrait.php b/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit10/TestCompatibilityTrait.php
similarity index 52%
rename from core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit9/TestCompatibilityTrait.php
rename to core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit10/TestCompatibilityTrait.php
index 06d874e285..a2dbea6ff5 100644
--- a/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit9/TestCompatibilityTrait.php
+++ b/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit10/TestCompatibilityTrait.php
@@ -2,22 +2,15 @@
 
 declare(strict_types=1);
 
-namespace Drupal\TestTools\PhpUnitCompatibility\PhpUnit9;
-
-use PHPUnit\Util\Test;
+namespace Drupal\TestTools\PhpUnitCompatibility\PhpUnit10;
 
 /**
  * Drupal's forward compatibility layer with multiple versions of PHPUnit.
+ *
+ * @internal
  */
 trait TestCompatibilityTrait {
 
-  /**
-   * Get test name.
-   */
-  public function name(): string {
-    return $this->getName();
-  }
-
   /**
    * Gets @covers defined on the test class.
    *
@@ -25,8 +18,11 @@ public function name(): string {
    *   An array of classes listed with the @covers annotation.
    */
   public function getTestClassCovers(): array {
-    $annotations = Test::parseTestMethodAnnotations(static::class, $this->name());
-    return $annotations['class']['covers'] ?? [];
+    $ret = [];
+    foreach ($this->valueObjectForEvents()->metadata()->isCovers()->isClassLevel() as $metadata) {
+      $ret[] = $metadata->target();
+    }
+    return $ret;
   }
 
 }
diff --git a/core/tests/Drupal/Tests/BrowserHtmlDebugTrait.php b/core/tests/Drupal/Tests/BrowserHtmlDebugTrait.php
index 0ce61082fd..1dea75ea8f 100644
--- a/core/tests/Drupal/Tests/BrowserHtmlDebugTrait.php
+++ b/core/tests/Drupal/Tests/BrowserHtmlDebugTrait.php
@@ -6,6 +6,7 @@
 
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Utility\Error;
+use Drupal\TestTools\Extension\HtmlLogging\HtmlOutputLogger;
 use Psr\Http\Message\RequestInterface;
 use Psr\Http\Message\ResponseInterface;
 
@@ -49,17 +50,6 @@ trait BrowserHtmlDebugTrait {
    */
   protected $htmlOutputEnabled = FALSE;
 
-  /**
-   * The file name to write the list of URLs to.
-   *
-   * This file is read by the PHPUnit result printer.
-   *
-   * @var string
-   *
-   * @see \Drupal\Tests\Listeners\HtmlOutputPrinter
-   */
-  protected $htmlOutputFile;
-
   /**
    * HTML output test ID.
    *
@@ -128,7 +118,7 @@ protected function htmlOutput($message = NULL) {
     // Do not use the file_url_generator service as the module_handler service
     // might not be available.
     $uri = $this->htmlOutputBaseUrl . '/sites/simpletest/browser_output/' . $html_output_filename;
-    file_put_contents($this->htmlOutputFile, $uri . "\n", FILE_APPEND);
+    HtmlOutputLogger::log($uri . "\n");
   }
 
   /**
@@ -138,11 +128,9 @@ protected function htmlOutput($message = NULL) {
    * URLs to has been created by \Drupal\Tests\Listeners\HtmlOutputPrinter.
    */
   protected function initBrowserOutputFile() {
-    $browser_output_file = getenv('BROWSERTEST_OUTPUT_FILE');
-    $this->htmlOutputEnabled = is_string($browser_output_file) && is_file($browser_output_file);
+    $this->htmlOutputEnabled = HtmlOutputLogger::isEnabled();
     $this->htmlOutputBaseUrl = getenv('BROWSERTEST_OUTPUT_BASE_URL') ?: $GLOBALS['base_url'];
     if ($this->htmlOutputEnabled) {
-      $this->htmlOutputFile = $browser_output_file;
       $this->htmlOutputClassName = str_replace("\\", "_", static::class);
       $this->htmlOutputDirectory = DRUPAL_ROOT . '/sites/simpletest/browser_output';
       // Do not use the file_system service so this method can be called before
diff --git a/core/tests/Drupal/Tests/BrowserTestBase.php b/core/tests/Drupal/Tests/BrowserTestBase.php
index f27fa37a40..2245661d5d 100644
--- a/core/tests/Drupal/Tests/BrowserTestBase.php
+++ b/core/tests/Drupal/Tests/BrowserTestBase.php
@@ -6,6 +6,7 @@
 
 use Behat\Mink\Driver\BrowserKitDriver;
 use Behat\Mink\Element\Element;
+use Behat\Mink\Exception\Exception as MinkException;
 use Behat\Mink\Mink;
 use Behat\Mink\Selector\SelectorsHandler;
 use Behat\Mink\Session;
@@ -19,13 +20,12 @@
 use Drupal\Tests\block\Traits\BlockCreationTrait;
 use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
 use Drupal\Tests\node\Traits\NodeCreationTrait;
-use Drupal\Tests\Traits\PhpUnitWarnings;
 use Drupal\Tests\user\Traits\UserCreationTrait;
 use Drupal\TestTools\Comparator\MarkupInterfaceComparator;
+use Drupal\TestTools\Extension\DeprecationBridge\ExpectDeprecationTrait;
 use Drupal\TestTools\TestVarDumper;
 use GuzzleHttp\Cookie\CookieJar;
 use PHPUnit\Framework\TestCase;
-use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;
 use Symfony\Component\HttpFoundation\Exception\SessionNotFoundException;
 use Symfony\Component\VarDumper\VarDumper;
 
@@ -72,7 +72,6 @@ abstract class BrowserTestBase extends TestCase {
     createUser as drupalCreateUser;
   }
   use XdebugRequestTrait;
-  use PhpUnitWarnings;
   use PhpUnitCompatibilityTrait;
   use ExpectDeprecationTrait;
   use ExtensionListTestTrait;
@@ -369,7 +368,9 @@ protected function setUp(): void {
     $this->prepareEnvironment();
     $this->installDrupal();
 
-    // Setup Mink.
+    // Setup Mink. Register Mink exceptions to cause test failures instead of
+    // errors.
+    $this->registerFailureType(MinkException::class);
     $this->initMink();
 
     // Set up the browser test output file.
diff --git a/core/tests/Drupal/Tests/Component/Assertion/InspectorTest.php b/core/tests/Drupal/Tests/Component/Assertion/InspectorTest.php
index ef3dff30f8..e04c0c136a 100644
--- a/core/tests/Drupal/Tests/Component/Assertion/InspectorTest.php
+++ b/core/tests/Drupal/Tests/Component/Assertion/InspectorTest.php
@@ -6,7 +6,7 @@
 
 use PHPUnit\Framework\TestCase;
 use Drupal\Component\Assertion\Inspector;
-use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;
+use Drupal\TestTools\Extension\DeprecationBridge\ExpectDeprecationTrait;
 
 /**
  * @coversDefaultClass \Drupal\Component\Assertion\Inspector
diff --git a/core/tests/Drupal/Tests/Component/DependencyInjection/ContainerTest.php b/core/tests/Drupal/Tests/Component/DependencyInjection/ContainerTest.php
index 7f1be690a8..0e42a0b4e8 100644
--- a/core/tests/Drupal/Tests/Component/DependencyInjection/ContainerTest.php
+++ b/core/tests/Drupal/Tests/Component/DependencyInjection/ContainerTest.php
@@ -5,9 +5,9 @@
 namespace Drupal\Tests\Component\DependencyInjection;
 
 use Drupal\Component\Utility\Crypt;
+use Drupal\TestTools\Extension\DeprecationBridge\ExpectDeprecationTrait;
 use PHPUnit\Framework\TestCase;
 use Prophecy\PhpUnit\ProphecyTrait;
-use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\DependencyInjection\Exception\InvalidArgumentException;
 use Symfony\Component\DependencyInjection\Exception\LogicException;
diff --git a/core/tests/Drupal/Tests/Component/DependencyInjection/Dumper/OptimizedPhpArrayDumperTest.php b/core/tests/Drupal/Tests/Component/DependencyInjection/Dumper/OptimizedPhpArrayDumperTest.php
index df31c85d8a..9766833a0a 100644
--- a/core/tests/Drupal/Tests/Component/DependencyInjection/Dumper/OptimizedPhpArrayDumperTest.php
+++ b/core/tests/Drupal/Tests/Component/DependencyInjection/Dumper/OptimizedPhpArrayDumperTest.php
@@ -5,10 +5,10 @@
 namespace Drupal\Tests\Component\DependencyInjection\Dumper {
 
   use Drupal\Component\Utility\Crypt;
+  use Drupal\TestTools\Extension\DeprecationBridge\ExpectDeprecationTrait;
   use PHPUnit\Framework\TestCase;
   use Prophecy\PhpUnit\ProphecyTrait;
   use Prophecy\Prophet;
-  use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;
   use Symfony\Component\DependencyInjection\Argument\IteratorArgument;
   use Symfony\Component\DependencyInjection\Argument\ServiceClosureArgument;
   use Symfony\Component\DependencyInjection\Definition;
diff --git a/core/tests/Drupal/Tests/Component/DrupalComponentTest.php b/core/tests/Drupal/Tests/Component/DrupalComponentTest.php
index 8291c74649..b2566ed752 100644
--- a/core/tests/Drupal/Tests/Component/DrupalComponentTest.php
+++ b/core/tests/Drupal/Tests/Component/DrupalComponentTest.php
@@ -38,12 +38,12 @@ public function testNoCoreInComponentTests() {
   /**
    * Tests LICENSE.txt is present and has the correct content.
    *
-   * @param $component_path
+   * @param string $component_path
    *   The path to the component.
    *
-   * @dataProvider \Drupal\Tests\Component\DrupalComponentTest::getComponents
+   * @dataProvider getComponents
    */
-  public function testComponentLicense($component_path) {
+  public function testComponentLicense(string $component_path): void {
     $this->assertFileExists($component_path . DIRECTORY_SEPARATOR . 'LICENSE.txt');
     $this->assertSame('e84dac1d9fbb5a4a69e38654ce644cea769aa76b', hash_file('sha1', $component_path . DIRECTORY_SEPARATOR . 'LICENSE.txt'));
   }
@@ -53,7 +53,7 @@ public function testComponentLicense($component_path) {
    *
    * @return array
    */
-  public function getComponents() {
+  public static function getComponents(): array {
     $root_component_path = dirname(substr(__DIR__, 0, -strlen(__NAMESPACE__))) . '/lib/Drupal/Component';
     $component_paths = [];
     foreach (new \DirectoryIterator($root_component_path) as $file) {
diff --git a/core/tests/Drupal/Tests/Component/EventDispatcher/ContainerAwareEventDispatcherTest.php b/core/tests/Drupal/Tests/Component/EventDispatcher/ContainerAwareEventDispatcherTest.php
index 9ee42e3f70..0071c173cc 100644
--- a/core/tests/Drupal/Tests/Component/EventDispatcher/ContainerAwareEventDispatcherTest.php
+++ b/core/tests/Drupal/Tests/Component/EventDispatcher/ContainerAwareEventDispatcherTest.php
@@ -5,6 +5,7 @@
 namespace Drupal\Tests\Component\EventDispatcher;
 
 use Drupal\Component\EventDispatcher\ContainerAwareEventDispatcher;
+use Drupal\TestTools\Extension\DeprecationBridge\ExpectDeprecationTrait;
 use PHPUnit\Framework\TestCase;
 use Symfony\Component\DependencyInjection\Container;
 use Symfony\Component\DependencyInjection\ContainerBuilder;
@@ -13,7 +14,6 @@
 use Symfony\Contracts\EventDispatcher\Event as SymfonyEvent;
 use Symfony\Component\EventDispatcher\GenericEvent;
 use Drupal\Component\EventDispatcher\Event;
-use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;
 
 /**
  * Unit tests for the ContainerAwareEventDispatcher.
diff --git a/core/tests/Drupal/Tests/Component/PhpStorage/FileStorageReadOnlyTest.php b/core/tests/Drupal/Tests/Component/PhpStorage/FileStorageReadOnlyTest.php
index 6233e5b1b4..86d915e87d 100644
--- a/core/tests/Drupal/Tests/Component/PhpStorage/FileStorageReadOnlyTest.php
+++ b/core/tests/Drupal/Tests/Component/PhpStorage/FileStorageReadOnlyTest.php
@@ -7,7 +7,7 @@
 use Drupal\Component\PhpStorage\FileStorage;
 use Drupal\Component\PhpStorage\FileReadOnlyStorage;
 use Drupal\Component\Utility\Random;
-use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;
+use Drupal\TestTools\Extension\DeprecationBridge\ExpectDeprecationTrait;
 
 /**
  * @coversDefaultClass \Drupal\Component\PhpStorage\FileReadOnlyStorage
diff --git a/core/tests/Drupal/Tests/Component/PhpStorage/FileStorageTest.php b/core/tests/Drupal/Tests/Component/PhpStorage/FileStorageTest.php
index d7ca82e28b..2524aee2ec 100644
--- a/core/tests/Drupal/Tests/Component/PhpStorage/FileStorageTest.php
+++ b/core/tests/Drupal/Tests/Component/PhpStorage/FileStorageTest.php
@@ -6,9 +6,8 @@
 
 use Drupal\Component\PhpStorage\FileStorage;
 use Drupal\Component\Utility\Random;
-use Drupal\Tests\Traits\PhpUnitWarnings;
+use Drupal\TestTools\Extension\DeprecationBridge\ExpectDeprecationTrait;
 use org\bovigo\vfs\vfsStreamDirectory;
-use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;
 
 /**
  * @coversDefaultClass \Drupal\Component\PhpStorage\FileStorage
@@ -17,7 +16,7 @@
  */
 class FileStorageTest extends PhpStorageTestBase {
 
-  use PhpUnitWarnings, ExpectDeprecationTrait;
+  use ExpectDeprecationTrait;
 
   /**
    * Standard test settings to pass to storage instances.
diff --git a/core/tests/Drupal/Tests/Component/Plugin/PluginHelperLegacyTest.php b/core/tests/Drupal/Tests/Component/Plugin/PluginHelperLegacyTest.php
index 7e775a1b54..3ca8215fa0 100644
--- a/core/tests/Drupal/Tests/Component/Plugin/PluginHelperLegacyTest.php
+++ b/core/tests/Drupal/Tests/Component/Plugin/PluginHelperLegacyTest.php
@@ -6,8 +6,8 @@
 
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\PluginHelper;
+use Drupal\TestTools\Extension\DeprecationBridge\ExpectDeprecationTrait;
 use PHPUnit\Framework\TestCase;
-use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;
 
 /**
  * @coversDefaultClass \Drupal\Component\Plugin\PluginHelper
diff --git a/core/tests/Drupal/Tests/Component/Render/FormattableMarkupTest.php b/core/tests/Drupal/Tests/Component/Render/FormattableMarkupTest.php
index 06a50ebd5b..898c0114ee 100644
--- a/core/tests/Drupal/Tests/Component/Render/FormattableMarkupTest.php
+++ b/core/tests/Drupal/Tests/Component/Render/FormattableMarkupTest.php
@@ -5,8 +5,8 @@
 namespace Drupal\Tests\Component\Render;
 
 use Drupal\Component\Render\FormattableMarkup;
+use Drupal\TestTools\Extension\DeprecationBridge\ExpectDeprecationTrait;
 use PHPUnit\Framework\TestCase;
-use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;
 
 /**
  * Tests the TranslatableMarkup class.
diff --git a/core/tests/Drupal/Tests/Component/Serialization/YamlSymfonyTest.php b/core/tests/Drupal/Tests/Component/Serialization/YamlSymfonyTest.php
index d731a7376e..a5eb59cac2 100644
--- a/core/tests/Drupal/Tests/Component/Serialization/YamlSymfonyTest.php
+++ b/core/tests/Drupal/Tests/Component/Serialization/YamlSymfonyTest.php
@@ -6,7 +6,7 @@
 
 use Drupal\Component\Serialization\Exception\InvalidDataTypeException;
 use Drupal\Component\Serialization\YamlSymfony;
-use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;
+use Drupal\TestTools\Extension\DeprecationBridge\ExpectDeprecationTrait;
 use Symfony\Component\Yaml\Tag\TaggedValue;
 
 /**
@@ -130,7 +130,7 @@ public function testCustomTagSupport($expected, $yaml) {
    * @return array
    *   A list of test data.
    */
-  public function taggedValuesProvider() {
+  public static function taggedValuesProvider(): array {
     return [
       'sequences' => [
         [
diff --git a/core/tests/Drupal/Tests/Component/Serialization/YamlTestBase.php b/core/tests/Drupal/Tests/Component/Serialization/YamlTestBase.php
index 6a8a5ba90b..5ac8aba378 100644
--- a/core/tests/Drupal/Tests/Component/Serialization/YamlTestBase.php
+++ b/core/tests/Drupal/Tests/Component/Serialization/YamlTestBase.php
@@ -14,7 +14,7 @@ abstract class YamlTestBase extends TestCase {
   /**
    * Some data that should be able to be serialized.
    */
-  public function providerEncodeDecodeTests() {
+  public static function providerEncodeDecodeTests() {
     return [
       [
         'foo' => 'bar',
@@ -46,7 +46,7 @@ public function providerEncodeDecodeTests() {
   /**
    * Some data that should be able to be deserialized.
    */
-  public function providerDecodeTests() {
+  public static function providerDecodeTests() {
     $data = [
       // NULL files.
       ['', NULL],
@@ -74,10 +74,10 @@ public function providerDecodeTests() {
     ];
 
     // 1.2 Bool values.
-    foreach ($this->providerBoolTest() as $test) {
+    foreach (static::providerBoolTest() as $test) {
       $data[] = ['bool: ' . $test[0], ['bool' => $test[1]]];
     }
-    $data = array_merge($data, $this->providerBoolTest());
+    $data = array_merge($data, static::providerBoolTest());
 
     return $data;
   }
@@ -85,7 +85,7 @@ public function providerDecodeTests() {
   /**
    * Tests different boolean serialization and deserialization.
    */
-  public function providerBoolTest() {
+  public static function providerBoolTest() {
     return [
       ['true', TRUE],
       ['TRUE', TRUE],
diff --git a/core/tests/Drupal/Tests/Component/Utility/BytesTest.php b/core/tests/Drupal/Tests/Component/Utility/BytesTest.php
index e28b912fb5..04c77eb0a7 100644
--- a/core/tests/Drupal/Tests/Component/Utility/BytesTest.php
+++ b/core/tests/Drupal/Tests/Component/Utility/BytesTest.php
@@ -5,10 +5,10 @@
 namespace Drupal\Tests\Component\Utility;
 
 use Drupal\Component\Utility\Bytes;
+use Drupal\TestTools\Extension\DeprecationBridge\ExpectDeprecationTrait;
 use PHPUnit\Framework\TestCase;
 use Prophecy\Argument;
 use Prophecy\PhpUnit\ProphecyTrait;
-use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;
 use Symfony\Component\Validator\Context\ExecutionContextInterface;
 
 /**
diff --git a/core/tests/Drupal/Tests/Component/Utility/HtmlTest.php b/core/tests/Drupal/Tests/Component/Utility/HtmlTest.php
index 99affa11aa..5835f540fb 100644
--- a/core/tests/Drupal/Tests/Component/Utility/HtmlTest.php
+++ b/core/tests/Drupal/Tests/Component/Utility/HtmlTest.php
@@ -8,8 +8,8 @@
 use Drupal\Component\Render\MarkupTrait;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\Random;
+use Drupal\TestTools\Extension\DeprecationBridge\ExpectDeprecationTrait;
 use PHPUnit\Framework\TestCase;
-use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;
 
 // cspell:ignore répét répété
 
diff --git a/core/tests/Drupal/Tests/Component/Utility/UnicodeTest.php b/core/tests/Drupal/Tests/Component/Utility/UnicodeTest.php
index 6dfe031dd1..2913045327 100644
--- a/core/tests/Drupal/Tests/Component/Utility/UnicodeTest.php
+++ b/core/tests/Drupal/Tests/Component/Utility/UnicodeTest.php
@@ -5,8 +5,8 @@
 namespace Drupal\Tests\Component\Utility;
 
 use Drupal\Component\Utility\Unicode;
+use Drupal\TestTools\Extension\DeprecationBridge\ExpectDeprecationTrait;
 use PHPUnit\Framework\TestCase;
-use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;
 
 /**
  * Test unicode handling features implemented in Unicode component.
diff --git a/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/AssertUtilsTrait.php b/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/AssertUtilsTrait.php
index a2257158b2..9c5779f460 100644
--- a/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/AssertUtilsTrait.php
+++ b/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/AssertUtilsTrait.php
@@ -4,13 +4,10 @@
 
 namespace Drupal\Tests\Composer\Plugin\Scaffold;
 
-use Drupal\Tests\Traits\PhpUnitWarnings;
-
 /**
  * Convenience class for creating fixtures.
  */
 trait AssertUtilsTrait {
-  use PhpUnitWarnings;
 
   /**
    * Asserts that a given file exists and is/is not a symlink.
diff --git a/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Functional/ManageGitIgnoreTest.php b/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Functional/ManageGitIgnoreTest.php
index 1996bc9ae4..8e6d2813f5 100644
--- a/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Functional/ManageGitIgnoreTest.php
+++ b/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Functional/ManageGitIgnoreTest.php
@@ -8,7 +8,6 @@
 use Drupal\Tests\Composer\Plugin\Scaffold\Fixtures;
 use Drupal\Tests\Composer\Plugin\Scaffold\AssertUtilsTrait;
 use Drupal\Tests\Composer\Plugin\Scaffold\ExecTrait;
-use Drupal\Tests\PhpUnitCompatibilityTrait;
 use PHPUnit\Framework\TestCase;
 
 /**
@@ -23,7 +22,6 @@
 class ManageGitIgnoreTest extends TestCase {
   use ExecTrait;
   use AssertUtilsTrait;
-  use PhpUnitCompatibilityTrait;
 
   /**
    * The root of this project.
diff --git a/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Functional/ScaffoldTest.php b/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Functional/ScaffoldTest.php
index 2da31c9ea9..d3b728fbf7 100644
--- a/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Functional/ScaffoldTest.php
+++ b/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Functional/ScaffoldTest.php
@@ -8,7 +8,6 @@
 use Drupal\Tests\Composer\Plugin\Scaffold\AssertUtilsTrait;
 use Drupal\Tests\Composer\Plugin\Scaffold\Fixtures;
 use Drupal\Tests\Composer\Plugin\Scaffold\ScaffoldTestResult;
-use Drupal\Tests\PhpUnitCompatibilityTrait;
 use PHPUnit\Framework\TestCase;
 
 /**
@@ -21,7 +20,6 @@
  */
 class ScaffoldTest extends TestCase {
   use AssertUtilsTrait;
-  use PhpUnitCompatibilityTrait;
 
   /**
    * The root of this project.
diff --git a/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Functional/ScaffoldUpgradeTest.php b/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Functional/ScaffoldUpgradeTest.php
index f28ec78ca5..c9f34d9551 100644
--- a/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Functional/ScaffoldUpgradeTest.php
+++ b/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Functional/ScaffoldUpgradeTest.php
@@ -8,7 +8,6 @@
 use Drupal\Tests\Composer\Plugin\Scaffold\AssertUtilsTrait;
 use Drupal\Tests\Composer\Plugin\Scaffold\ExecTrait;
 use Drupal\Tests\Composer\Plugin\Scaffold\Fixtures;
-use Drupal\Tests\PhpUnitCompatibilityTrait;
 use PHPUnit\Framework\TestCase;
 
 /**
@@ -28,7 +27,6 @@ class ScaffoldUpgradeTest extends TestCase {
 
   use AssertUtilsTrait;
   use ExecTrait;
-  use PhpUnitCompatibilityTrait;
 
   /**
    * The Fixtures object.
diff --git a/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Integration/AppendOpTest.php b/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Integration/AppendOpTest.php
index 4580656241..3cce05475a 100644
--- a/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Integration/AppendOpTest.php
+++ b/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Integration/AppendOpTest.php
@@ -7,7 +7,6 @@
 use Drupal\Composer\Plugin\Scaffold\Operations\AppendOp;
 use Drupal\Composer\Plugin\Scaffold\ScaffoldOptions;
 use Drupal\Tests\Composer\Plugin\Scaffold\Fixtures;
-use Drupal\Tests\Traits\PhpUnitWarnings;
 use PHPUnit\Framework\TestCase;
 
 /**
@@ -16,7 +15,6 @@
  * @group Scaffold
  */
 class AppendOpTest extends TestCase {
-  use PhpUnitWarnings;
 
   /**
    * @covers ::process
diff --git a/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Integration/ReplaceOpTest.php b/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Integration/ReplaceOpTest.php
index 00deb08568..a781d5b9c6 100644
--- a/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Integration/ReplaceOpTest.php
+++ b/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Integration/ReplaceOpTest.php
@@ -7,7 +7,6 @@
 use Drupal\Composer\Plugin\Scaffold\Operations\ReplaceOp;
 use Drupal\Composer\Plugin\Scaffold\ScaffoldOptions;
 use Drupal\Tests\Composer\Plugin\Scaffold\Fixtures;
-use Drupal\Tests\Traits\PhpUnitWarnings;
 use PHPUnit\Framework\TestCase;
 
 /**
@@ -16,7 +15,6 @@
  * @group Scaffold
  */
 class ReplaceOpTest extends TestCase {
-  use PhpUnitWarnings;
 
   /**
    * @covers ::process
diff --git a/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Integration/SkipOpTest.php b/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Integration/SkipOpTest.php
index 8fd239540b..5a13e34918 100644
--- a/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Integration/SkipOpTest.php
+++ b/core/tests/Drupal/Tests/Composer/Plugin/Scaffold/Integration/SkipOpTest.php
@@ -7,7 +7,6 @@
 use Drupal\Composer\Plugin\Scaffold\Operations\SkipOp;
 use Drupal\Composer\Plugin\Scaffold\ScaffoldOptions;
 use Drupal\Tests\Composer\Plugin\Scaffold\Fixtures;
-use Drupal\Tests\Traits\PhpUnitWarnings;
 use PHPUnit\Framework\TestCase;
 
 /**
@@ -16,7 +15,6 @@
  * @group Scaffold
  */
 class SkipOpTest extends TestCase {
-  use PhpUnitWarnings;
 
   /**
    * @covers ::process
diff --git a/core/tests/Drupal/Tests/Composer/Plugin/VendorHardening/ConfigTest.php b/core/tests/Drupal/Tests/Composer/Plugin/VendorHardening/ConfigTest.php
index 442379723d..66f28d2ed5 100644
--- a/core/tests/Drupal/Tests/Composer/Plugin/VendorHardening/ConfigTest.php
+++ b/core/tests/Drupal/Tests/Composer/Plugin/VendorHardening/ConfigTest.php
@@ -6,7 +6,6 @@
 
 use Composer\Package\RootPackageInterface;
 use Drupal\Composer\Plugin\VendorHardening\Config;
-use Drupal\Tests\Traits\PhpUnitWarnings;
 use PHPUnit\Framework\TestCase;
 
 /**
@@ -15,8 +14,6 @@
  */
 class ConfigTest extends TestCase {
 
-  use PhpUnitWarnings;
-
   /**
    * @covers ::getPathsForPackage
    */
diff --git a/core/tests/Drupal/Tests/Composer/Plugin/VendorHardening/VendorHardeningPluginTest.php b/core/tests/Drupal/Tests/Composer/Plugin/VendorHardening/VendorHardeningPluginTest.php
index e21b303d7d..ca29af0a2a 100644
--- a/core/tests/Drupal/Tests/Composer/Plugin/VendorHardening/VendorHardeningPluginTest.php
+++ b/core/tests/Drupal/Tests/Composer/Plugin/VendorHardening/VendorHardeningPluginTest.php
@@ -10,7 +10,6 @@
 use Composer\Package\RootPackageInterface;
 use Drupal\Composer\Plugin\VendorHardening\Config;
 use Drupal\Composer\Plugin\VendorHardening\VendorHardeningPlugin;
-use Drupal\Tests\Traits\PhpUnitWarnings;
 use org\bovigo\vfs\vfsStream;
 use PHPUnit\Framework\TestCase;
 use Prophecy\PhpUnit\ProphecyTrait;
@@ -21,7 +20,6 @@
  */
 class VendorHardeningPluginTest extends TestCase {
 
-  use PhpUnitWarnings;
   use ProphecyTrait;
 
   /**
diff --git a/core/tests/Drupal/Tests/Core/Form/FormBuilderTest.php b/core/tests/Drupal/Tests/Core/Form/FormBuilderTest.php
index 34e16dd5ba..7e6590b797 100644
--- a/core/tests/Drupal/Tests/Core/Form/FormBuilderTest.php
+++ b/core/tests/Drupal/Tests/Core/Form/FormBuilderTest.php
@@ -67,7 +67,7 @@ public function testGetFormIdWithString() {
    * @covers ::getFormId
    */
   public function testGetFormIdWithNonFormClass() {
-    $form_arg = __CLASS__;
+    $form_arg = \stdClass::class;
     $form_state = new FormState();
     $this->expectException(\InvalidArgumentException::class);
     $this->expectExceptionMessage("The form argument $form_arg must be an instance of \Drupal\Core\Form\FormInterface.");
diff --git a/core/tests/Drupal/Tests/Core/Form/FormStateDecoratorBaseTest.php b/core/tests/Drupal/Tests/Core/Form/FormStateDecoratorBaseTest.php
index 2b00dfdfa1..3924855fd9 100644
--- a/core/tests/Drupal/Tests/Core/Form/FormStateDecoratorBaseTest.php
+++ b/core/tests/Drupal/Tests/Core/Form/FormStateDecoratorBaseTest.php
@@ -1451,7 +1451,7 @@ public static function providerPrepareCallback(): array {
     $closure = function () {};
     $static_method_string = __METHOD__;
     $static_method_array = [__CLASS__, __FUNCTION__];
-    $object_method_array = [new static(), __FUNCTION__];
+    $object_method_array = [new static('test'), __FUNCTION__];
 
     return [
       // A shorthand form method is generally expanded to become a method on an
diff --git a/core/tests/Drupal/Tests/Core/StringTranslation/TranslatableMarkupTest.php b/core/tests/Drupal/Tests/Core/StringTranslation/TranslatableMarkupTest.php
index a9a1b363d2..338c21a5c7 100644
--- a/core/tests/Drupal/Tests/Core/StringTranslation/TranslatableMarkupTest.php
+++ b/core/tests/Drupal/Tests/Core/StringTranslation/TranslatableMarkupTest.php
@@ -80,7 +80,7 @@ public function testToString() {
     restore_error_handler();
 
     $this->assertEquals(E_USER_ERROR, $this->lastErrorNumber);
-    $this->assertMatchesRegularExpression('/Exception thrown while calling __toString on a .*Mock_TranslatableMarkup_.* object in .*TranslatableMarkupTest.php on line [0-9]+: Yes you may./', $this->lastErrorMessage);
+    $this->assertMatchesRegularExpression('/Exception thrown while calling __toString on a .*MockObject_TranslatableMarkup_.* object in .*TranslatableMarkupTest.php on line [0-9]+: Yes you may./', $this->lastErrorMessage);
   }
 
   /**
diff --git a/core/tests/Drupal/Tests/Core/Test/PhpUnitCliTest.php b/core/tests/Drupal/Tests/Core/Test/PhpUnitCliTest.php
index a240af9d4c..926a7cdedc 100644
--- a/core/tests/Drupal/Tests/Core/Test/PhpUnitCliTest.php
+++ b/core/tests/Drupal/Tests/Core/Test/PhpUnitCliTest.php
@@ -5,7 +5,6 @@
 namespace Drupal\Tests\Core\Test;
 
 use Drupal\Tests\UnitTestCase;
-use Drupal\TestTools\PhpUnitCompatibility\RunnerVersion;
 use Symfony\Component\Process\Process;
 
 /**
@@ -31,11 +30,6 @@ public function testPhpUnitListTests() {
       '--list-tests',
     ];
 
-    // PHPUnit 10 dropped the --verbose command line option.
-    if (RunnerVersion::getMajor() < 10) {
-      $command[] = '--verbose';
-    }
-
     $process = new Process($command, $this->root);
     $process
       ->setTimeout(300)
diff --git a/core/tests/Drupal/Tests/Core/Test/TestSuiteBaseTest.php b/core/tests/Drupal/Tests/Core/Test/TestSuiteBaseTest.php
index 1f53f98177..13fdffbb79 100644
--- a/core/tests/Drupal/Tests/Core/Test/TestSuiteBaseTest.php
+++ b/core/tests/Drupal/Tests/Core/Test/TestSuiteBaseTest.php
@@ -4,113 +4,13 @@
 
 namespace Drupal\Tests\Core\Test;
 
-use Drupal\Tests\TestSuites\TestSuiteBase;
-use org\bovigo\vfs\vfsStream;
 use PHPUnit\Framework\TestCase;
-use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;
-
-// The test suite class is not part of the autoloader, we need to include it
-// manually.
-require_once __DIR__ . '/../../../../TestSuites/TestSuiteBase.php';
 
 /**
- * @coversDefaultClass \Drupal\Tests\TestSuites\TestSuiteBase
- *
- * @group TestSuite
+ * @group Test
  */
 class TestSuiteBaseTest extends TestCase {
 
-  use ExpectDeprecationTrait;
-
-  /**
-   * Helper method to set up the file system.
-   *
-   * @return array[]
-   *   A Drupal filesystem suitable for use with vfsStream.
-   */
-  protected function getFilesystem() {
-    return [
-      'core' => [
-        'modules' => [],
-        'profiles' => [],
-        'tests' => [
-          'Drupal' => [
-            'NotUnitTests' => [
-              'CoreNotUnitTest.php' => '<?php',
-            ],
-            'Tests' => [
-              'CoreUnitTest.php' => '<?php',
-              // Ensure that the following files are not found as tests.
-              'Listeners' => [
-                'Listener.php' => '<?php',
-                'Legacy' => [
-                  'Listener.php' => '<?php',
-                ],
-              ],
-            ],
-          ],
-        ],
-      ],
-    ];
-  }
-
-  /**
-   * @return array[]
-   *   Test data for testAddTestsBySuiteNamespaceCore(). An array of arrays:
-   *   - A filesystem array for vfsStream.
-   *   - The sub-namespace of the test suite.
-   *   - The array of tests expected to be discovered.
-   */
-  public function provideCoreTests() {
-    $filesystem = $this->getFilesystem();
-    return [
-      'unit-tests' => [
-        $filesystem,
-        'Unit',
-        [
-          'Drupal\Tests\CoreUnitTest' => 'vfs://root/core/tests/Drupal/Tests/CoreUnitTest.php',
-        ],
-      ],
-      'not-unit-tests' => [
-        $filesystem,
-        'NotUnit',
-        [
-          'Drupal\NotUnitTests\CoreNotUnitTest' => 'vfs://root/core/tests/Drupal/NotUnitTests/CoreNotUnitTest.php',
-        ],
-      ],
-    ];
-  }
-
-  /**
-   * Tests for special case behavior of unit test suite namespaces in core.
-   *
-   * @group legacy
-   *
-   * @covers ::addTestsBySuiteNamespace
-   *
-   * @dataProvider provideCoreTests
-   */
-  public function testAddTestsBySuiteNamespaceCore($filesystem, $suite_namespace, $expected_tests) {
-
-    $this->expectDeprecation('Drupal\\Tests\\Core\\Test\\StubTestSuiteBase is deprecated in drupal:10.3.0 and is removed from drupal:11.0.0. There is no replacement and test discovery will be handled differently in PHPUnit 10. See https://www.drupal.org/node/3405829');
-
-    // Set up the file system.
-    $vfs = vfsStream::setup('root');
-    vfsStream::create($filesystem, $vfs);
-
-    // Make a stub suite base to test.
-    $stub = new StubTestSuiteBase('test_me');
-
-    // Access addTestsBySuiteNamespace().
-    $ref_add_tests = new \ReflectionMethod($stub, 'addTestsBySuiteNamespace');
-
-    // Invoke addTestsBySuiteNamespace().
-    $ref_add_tests->invokeArgs($stub, [vfsStream::url('root'), $suite_namespace]);
-
-    // Determine if we loaded the expected test files.
-    $this->assertEquals($expected_tests, $stub->testFiles);
-  }
-
   /**
    * Tests the assumption that local time is in 'Australia/Sydney'.
    */
@@ -120,52 +20,3 @@ public function testLocalTimeZone() {
   }
 
 }
-
-/**
- * Stub subclass of TestSuiteBase.
- *
- * We use this class to alter the behavior of TestSuiteBase so it can be
- * testable.
- *
- * @phpstan-ignore-next-line
- */
-class StubTestSuiteBase extends TestSuiteBase {
-
-  /**
-   * Test files discovered by addTestsBySuiteNamespace().
-   *
-   * @var string[]
-   */
-  public $testFiles = [];
-
-  public function __construct(string $name) {
-    @trigger_error(__CLASS__ . ' is deprecated in drupal:10.3.0 and is removed from drupal:11.0.0. There is no replacement and test discovery will be handled differently in PHPUnit 10. See https://www.drupal.org/node/3405829', E_USER_DEPRECATED);
-    // @phpstan-ignore-next-line
-    parent::__construct($name);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  protected function findExtensionDirectories($root) {
-    // We have to stub findExtensionDirectories() because we can't inject a
-    // vfsStream filesystem into drupal_phpunit_find_extension_directories(),
-    // which uses \SplFileInfo->getRealPath(). getRealPath() resolves
-    // stream-based paths to an empty string. See
-    // https://github.com/mikey179/vfsStream/wiki/Known-Issues
-    return [];
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function addTestFiles($filenames): void {
-    // We stub addTestFiles() because the parent implementation can't deal with
-    // vfsStream-based filesystems due to an error in
-    // stream_resolve_include_path(). See
-    // https://github.com/mikey179/vfsStream/issues/5 Here we just store the
-    // test file being added in $this->testFiles.
-    $this->testFiles = array_merge($this->testFiles, $filenames);
-  }
-
-}
diff --git a/core/tests/Drupal/Tests/Core/Test/WebDriverTestBaseTest.php b/core/tests/Drupal/Tests/Core/Test/WebDriverTestBaseTest.php
index d457f21e81..7b3d4c4885 100644
--- a/core/tests/Drupal/Tests/Core/Test/WebDriverTestBaseTest.php
+++ b/core/tests/Drupal/Tests/Core/Test/WebDriverTestBaseTest.php
@@ -31,7 +31,9 @@ public function testCapabilities($expected, ?string $mink_driver_args_webdriver,
     $this->putEnv("MINK_DRIVER_ARGS_WEBDRIVER", $mink_driver_args_webdriver);
     $this->putEnv("MINK_DRIVER_ARGS", $mink_driver_args);
 
-    $object = $this->getMockForAbstractClass(WebDriverTestBase::class);
+    $object = $this->getMockBuilder(WebDriverTestBase::class)
+      ->setConstructorArgs(['test'])
+      ->getMockForAbstractClass();
     $method = new \ReflectionMethod($object, 'getMinkDriverArgs');
     $this->assertSame($expected, $method->invoke($object));
   }
@@ -67,7 +69,9 @@ public function testChromeOptions(): void {
     $this->expectDeprecation('The "chromeOptions" array key is deprecated in drupal:10.3.0 and is removed from drupal:11.0.0. Use "goog:chromeOptions instead. See https://www.drupal.org/node/3422624');
     putenv('MINK_DRIVER_ARGS_WEBDRIVER=["chrome",{"browserName":"chrome","chromeOptions":{"args":["--headless"]}},"http://localhost:4444"]');
 
-    $object = $this->getMockForAbstractClass(WebDriverTestBase::class);
+    $object = $this->getMockBuilder(WebDriverTestBase::class)
+      ->setConstructorArgs(['test'])
+      ->getMockForAbstractClass();
     $method = new \ReflectionMethod($object, 'getMinkDriverArgs');
     $this->assertSame('["chrome",{"browserName":"chrome","goog:chromeOptions":{"args":["--headless"],"w3c":false}},"http:\\/\\/localhost:4444"]', $method->invoke($object));
   }
diff --git a/core/tests/Drupal/Tests/Core/Utility/CallableResolverTest.php b/core/tests/Drupal/Tests/Core/Utility/CallableResolverTest.php
index 9ded9181a2..8b7480146b 100644
--- a/core/tests/Drupal/Tests/Core/Utility/CallableResolverTest.php
+++ b/core/tests/Drupal/Tests/Core/Utility/CallableResolverTest.php
@@ -87,8 +87,8 @@ function ($suffix) {
         __CLASS__ . '::method',
       ],
       'Non-static function, instantiated by class resolver' => [
-        static::class . '::method',
-        __CLASS__ . '::method',
+        MethodCallable::class . '::method',
+        MethodCallable::class . '::method',
       ],
       'Non-static function, instantiated by class resolver, container injection' => [
         '\Drupal\Tests\Core\Utility\MockContainerInjection::getResult',
@@ -103,8 +103,8 @@ function ($suffix) {
         __CLASS__ . '::staticMethod',
       ],
       'Class with invoke method' => [
-        static::class,
-        __CLASS__ . '::__invoke',
+        MethodCallable::class,
+        MethodCallable::class . '::__invoke',
       ],
     ];
   }
@@ -135,14 +135,14 @@ public static function callableResolverExceptionHandlingTestCases() {
         'The callable definition provided "[not_a_callable,not_a_callable]" is not a valid callable.',
       ],
       'Missing method on class, array notation' => [
-        [static::class, 'method_not_exists'],
+        [\stdClass::class, 'method_not_exists'],
         \InvalidArgumentException::class,
-        'The callable definition provided "[Drupal\Tests\Core\Utility\CallableResolverTest,method_not_exists]" is not a valid callable.',
+        'The callable definition provided "[stdClass,method_not_exists]" is not a valid callable.',
       ],
       'Missing method on class, static notation' => [
-        static::class . '::method_not_exists',
+        \stdClass::class . '::method_not_exists',
         \InvalidArgumentException::class,
-        'The callable definition provided was invalid. Either class "Drupal\Tests\Core\Utility\CallableResolverTest" does not have a method "method_not_exists", or it is not callable.',
+        'The callable definition provided was invalid. Either class "stdClass" does not have a method "method_not_exists", or it is not callable.',
       ],
       'Missing class, static notation' => [
         '\NotARealClass::method',
@@ -241,5 +241,38 @@ public static function staticMethod($suffix) {
 
 }
 
+class MethodCallable {
+
+  /**
+   * A test __invoke method.
+   *
+   * @param string $suffix
+   *   A suffix to append.
+   *
+   * @return string
+   *   A test string.
+   */
+  public function __invoke($suffix) {
+    return __METHOD__ . '+' . $suffix;
+  }
+
+  /**
+   * A test method that returns "foo".
+   *
+   * @param string $suffix
+   *   A suffix to append.
+   *
+   * @return string
+   *   A test string.
+   *
+   * @throws \Exception
+   *   Throws an exception when called statically.
+   */
+  public function method($suffix) {
+    return __METHOD__ . '+' . $suffix;
+  }
+
+}
+
 class NoMethodCallable {
 }
diff --git a/core/tests/Drupal/Tests/ExpectDeprecationTest.php b/core/tests/Drupal/Tests/ExpectDeprecationTest.php
index 8fc2b4c872..349a34f015 100644
--- a/core/tests/Drupal/Tests/ExpectDeprecationTest.php
+++ b/core/tests/Drupal/Tests/ExpectDeprecationTest.php
@@ -4,8 +4,8 @@
 
 namespace Drupal\Tests;
 
+use Drupal\TestTools\Extension\DeprecationBridge\ExpectDeprecationTrait;
 use PHPUnit\Framework\TestCase;
-use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;
 
 /**
  * Ensures Drupal has test coverage of Symfony's deprecation testing.
diff --git a/core/tests/Drupal/Tests/Listeners/DrupalComponentTestListenerTrait.php b/core/tests/Drupal/Tests/Listeners/DrupalComponentTestListenerTrait.php
deleted file mode 100644
index 90a5638e2d..0000000000
--- a/core/tests/Drupal/Tests/Listeners/DrupalComponentTestListenerTrait.php
+++ /dev/null
@@ -1,37 +0,0 @@
-<?php
-
-declare(strict_types=1);
-
-namespace Drupal\Tests\Listeners;
-
-use Drupal\KernelTests\KernelTestBase;
-use Drupal\Tests\BrowserTestBase;
-use Drupal\Tests\UnitTestCase;
-use PHPUnit\Framework\AssertionFailedError;
-
-/**
- * Ensures that no component tests are extending a core test base class.
- *
- * @internal
- */
-trait DrupalComponentTestListenerTrait {
-
-  /**
-   * Reacts to the end of a test.
-   *
-   * @param \PHPUnit\Framework\Test $test
-   *   The test object that has ended its test run.
-   * @param float $time
-   *   The time the test took.
-   */
-  protected function componentEndTest($test, $time) {
-    /** @var \PHPUnit\Framework\Test $test */
-    if (str_starts_with($test->toString(), 'Drupal\Tests\Component')) {
-      if ($test instanceof BrowserTestBase || $test instanceof KernelTestBase || $test instanceof UnitTestCase) {
-        $error = new AssertionFailedError('Component tests should not extend a core test base class.');
-        $test->getTestResultObject()->addFailure($test, $error, $time);
-      }
-    }
-  }
-
-}
diff --git a/core/tests/Drupal/Tests/Listeners/DrupalListener.php b/core/tests/Drupal/Tests/Listeners/DrupalListener.php
deleted file mode 100644
index 182e4fe4e7..0000000000
--- a/core/tests/Drupal/Tests/Listeners/DrupalListener.php
+++ /dev/null
@@ -1,66 +0,0 @@
-<?php
-
-declare(strict_types=1);
-
-namespace Drupal\Tests\Listeners;
-
-use PHPUnit\Framework\TestListener;
-use PHPUnit\Framework\TestListenerDefaultImplementation;
-use PHPUnit\Framework\Test;
-use PHPUnit\Framework\TestSuite;
-use Symfony\Bridge\PhpUnit\SymfonyTestsListener;
-
-/**
- * Listens to PHPUnit test runs.
- *
- * @internal
- */
-class DrupalListener implements TestListener {
-
-  use TestListenerDefaultImplementation;
-  use DrupalComponentTestListenerTrait;
-
-  /**
-   * The wrapped Symfony test listener.
-   *
-   * @var \Symfony\Bridge\PhpUnit\SymfonyTestsListener
-   */
-  private $symfonyListener;
-
-  /**
-   * Constructs the DrupalListener object.
-   */
-  public function __construct() {
-    $this->symfonyListener = new SymfonyTestsListener();
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function startTestSuite(TestSuite $suite): void {
-    $this->symfonyListener->startTestSuite($suite);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function addSkippedTest(Test $test, \Throwable $t, float $time): void {
-    $this->symfonyListener->addSkippedTest($test, $t, $time);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function startTest(Test $test): void {
-    $this->symfonyListener->startTest($test);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function endTest(Test $test, float $time): void {
-    $this->symfonyListener->endTest($test, $time);
-    $this->componentEndTest($test, $time);
-  }
-
-}
diff --git a/core/tests/Drupal/Tests/Listeners/HtmlOutputPrinter.php b/core/tests/Drupal/Tests/Listeners/HtmlOutputPrinter.php
deleted file mode 100644
index dcfd8e80e2..0000000000
--- a/core/tests/Drupal/Tests/Listeners/HtmlOutputPrinter.php
+++ /dev/null
@@ -1,28 +0,0 @@
-<?php
-
-declare(strict_types=1);
-
-namespace Drupal\Tests\Listeners;
-
-use PHPUnit\Framework\TestResult;
-use PHPUnit\TextUI\DefaultResultPrinter;
-
-/**
- * Defines a class for providing html output results for functional tests.
- *
- * @internal
- */
-class HtmlOutputPrinter extends DefaultResultPrinter {
-
-  use HtmlOutputPrinterTrait;
-
-  /**
-   * {@inheritdoc}
-   */
-  public function printResult(TestResult $result): void {
-    parent::printResult($result);
-
-    $this->printHtmlOutput();
-  }
-
-}
diff --git a/core/tests/Drupal/Tests/Listeners/HtmlOutputPrinterTrait.php b/core/tests/Drupal/Tests/Listeners/HtmlOutputPrinterTrait.php
deleted file mode 100644
index 3350704688..0000000000
--- a/core/tests/Drupal/Tests/Listeners/HtmlOutputPrinterTrait.php
+++ /dev/null
@@ -1,83 +0,0 @@
-<?php
-
-declare(strict_types=1);
-
-namespace Drupal\Tests\Listeners;
-
-/**
- * Defines a class for providing html output results for functional tests.
- *
- * @internal
- */
-trait HtmlOutputPrinterTrait {
-
-  /**
-   * File to write html links to.
-   *
-   * @var string
-   */
-  protected $browserOutputFile;
-
-  /**
-   * {@inheritdoc}
-   */
-  public function __construct($out = NULL, $verbose = FALSE, $colors = self::COLOR_DEFAULT, $debug = FALSE, $numberOfColumns = 80, $reverse = FALSE) {
-    parent::__construct($out, $verbose, $colors, $debug, $numberOfColumns, $reverse);
-
-    $this->setUpHtmlOutput();
-  }
-
-  /**
-   * Creates the file to list the HTML output created during the test.
-   *
-   * @see \Drupal\Tests\BrowserTestBase::initBrowserOutputFile()
-   */
-  protected function setUpHtmlOutput() {
-    if ($html_output_directory = getenv('BROWSERTEST_OUTPUT_DIRECTORY')) {
-      // Initialize html output debugging.
-      $html_output_directory = rtrim($html_output_directory, '/');
-
-      // Check if directory exists.
-      if (!is_dir($html_output_directory) || !is_writable($html_output_directory)) {
-        $this->writeWithColor('bg-red, fg-black', "HTML output directory $html_output_directory is not a writable directory.");
-      }
-      else {
-        // Convert to a canonicalized absolute pathname just in case the current
-        // working directory is changed.
-        $html_output_directory = realpath($html_output_directory);
-        $this->browserOutputFile = tempnam($html_output_directory, 'browser_output_');
-        if ($this->browserOutputFile) {
-          touch($this->browserOutputFile);
-        }
-        else {
-          $this->writeWithColor('bg-red, fg-black', "Unable to create a temporary file in $html_output_directory.");
-        }
-      }
-    }
-
-    if ($this->browserOutputFile) {
-      putenv('BROWSERTEST_OUTPUT_FILE=' . $this->browserOutputFile);
-    }
-    else {
-      // Remove any environment variable.
-      putenv('BROWSERTEST_OUTPUT_FILE');
-    }
-  }
-
-  /**
-   * Prints the list of HTML output generated during the test.
-   */
-  protected function printHtmlOutput() {
-    if ($this->browserOutputFile) {
-      $contents = file_get_contents($this->browserOutputFile);
-      if ($contents) {
-        $this->writeNewLine();
-        $this->writeWithColor('bg-yellow, fg-black', 'HTML output was generated');
-        $this->write($contents);
-      }
-      // No need to keep the file around any more.
-      unlink($this->browserOutputFile);
-    }
-  }
-
-}
diff --git a/core/tests/Drupal/Tests/PhpUnitCompatibilityTrait.php b/core/tests/Drupal/Tests/PhpUnitCompatibilityTrait.php
index 932bd03a3e..57885d9205 100644
--- a/core/tests/Drupal/Tests/PhpUnitCompatibilityTrait.php
+++ b/core/tests/Drupal/Tests/PhpUnitCompatibilityTrait.php
@@ -22,7 +22,7 @@ class_alias("Drupal\TestTools\PhpUnitCompatibility\PhpUnit" . RunnerVersion::get
    */
   trait PhpUnitCompatibilityTrait {
 
-    use \Drupal\TestTools\PhpUnitCompatibility\PhpUnit9\TestCompatibilityTrait;
+    use \Drupal\TestTools\PhpUnitCompatibility\PhpUnit10\TestCompatibilityTrait;
 
   }
 
diff --git a/core/tests/Drupal/Tests/PhpUnitWarningsTest.php b/core/tests/Drupal/Tests/PhpUnitWarningsTest.php
deleted file mode 100644
index 67d632928f..0000000000
--- a/core/tests/Drupal/Tests/PhpUnitWarningsTest.php
+++ /dev/null
@@ -1,21 +0,0 @@
-<?php
-
-declare(strict_types=1);
-
-namespace Drupal\Tests;
-
-/**
- * @coversDefaultClass \Drupal\Tests\Traits\PhpUnitWarnings
- * @group legacy
- */
-class PhpUnitWarningsTest extends UnitTestCase {
-
-  /**
-   * Tests that selected PHPUnit warning is converted to deprecation.
-   */
-  public function testAddWarning() {
-    $this->expectDeprecation('Test warning for \Drupal\Tests\PhpUnitWarningsTest::testAddWarning()');
-    $this->addWarning('Test warning for \Drupal\Tests\PhpUnitWarningsTest::testAddWarning()');
-  }
-
-}
diff --git a/core/tests/Drupal/Tests/Traits/PhpUnitWarnings.php b/core/tests/Drupal/Tests/Traits/PhpUnitWarnings.php
deleted file mode 100644
index 180179a8a6..0000000000
--- a/core/tests/Drupal/Tests/Traits/PhpUnitWarnings.php
+++ /dev/null
@@ -1,68 +0,0 @@
-<?php
-
-declare(strict_types=1);
-
-namespace Drupal\Tests\Traits;
-
-/**
- * Converts deprecation warnings added by PHPUnit to silenced deprecations.
- *
- * This trait exists to allow Drupal to run tests with multiple versions of
- * PHPUnit without failing due to PHPUnit's deprecation warnings.
- *
- * @internal
- */
-trait PhpUnitWarnings {
-
-  /**
-   * Deprecation warnings from PHPUnit to raise with @trigger_error().
-   *
-   * Add any PHPUnit deprecations that should be handled as deprecation warnings
-   * (rather than unconditional failures) for core and contrib.
-   *
-   * @var string[]
-   */
-  private static $deprecationWarnings = [
-    // Warning for testing.
-    'Test warning for \Drupal\Tests\PhpUnitWarningsTest::testAddWarning()',
-    // PHPUnit 9.
-    'assertFileNotExists() is deprecated and will be removed in PHPUnit 10. Refactor your code to use assertFileDoesNotExist() instead.',
-    'assertRegExp() is deprecated and will be removed in PHPUnit 10. Refactor your code to use assertMatchesRegularExpression() instead.',
-    'assertNotRegExp() is deprecated and will be removed in PHPUnit 10. Refactor your code to use assertDoesNotMatchRegularExpression() instead.',
-    'assertDirectoryNotExists() is deprecated and will be removed in PHPUnit 10. Refactor your code to use assertDirectoryDoesNotExist() instead.',
-    'Support for using expectException() with PHPUnit\\Framework\\Error\\Warning is deprecated and will be removed in PHPUnit 10. Use expectWarning() instead.',
-    'Support for using expectException() with PHPUnit\\Framework\\Error\\Error is deprecated and will be removed in PHPUnit 10. Use expectError() instead.',
-    'assertDirectoryNotIsWritable() is deprecated and will be removed in PHPUnit 10. Refactor your code to use assertDirectoryIsNotWritable() instead.',
-    'assertFileNotIsWritable() is deprecated and will be removed in PHPUnit 10. Refactor your code to use assertFileIsNotWritable() instead.',
-    // cspell:disable-next-line
-    'The at() matcher has been deprecated. It will be removed in PHPUnit 10. Please refactor your test to not rely on the order in which methods are invoked.',
-    // PHPUnit 9.6.
-    'Expecting E_WARNING and E_USER_WARNING is deprecated and will no longer be possible in PHPUnit 10.',
-    'Expecting E_ERROR and E_USER_ERROR is deprecated and will no longer be possible in PHPUnit 10.',
-    'assertObjectHasAttribute() is deprecated and will be removed in PHPUnit 10. Refactor your test to use assertObjectHasProperty() instead.',
-    'assertObjectNotHasAttribute() is deprecated and will be removed in PHPUnit 10. Refactor your test to use assertObjectNotHasProperty() instead.',
-  ];
-
-  /**
-   * Converts PHPUnit deprecation warnings to E_USER_DEPRECATED.
-   *
-   * @param string $warning
-   *   The warning message raised in tests.
-   *
-   * @see \PHPUnit\Framework\TestCase::addWarning()
-   *
-   * @internal
-   */
-  public function addWarning(string $warning): void {
-    if (in_array($warning, self::$deprecationWarnings, TRUE)) {
-      // Convert listed PHPUnit deprecations into E_USER_DEPRECATED and prevent
-      // each from being raised as a test warning.
-      @trigger_error($warning, E_USER_DEPRECATED);
-      return;
-    }
-
-    // Otherwise, let the parent raise any warning not specifically listed.
-    parent::addWarning($warning);
-  }
-
-}
diff --git a/core/tests/Drupal/Tests/UnitTestCase.php b/core/tests/Drupal/Tests/UnitTestCase.php
index 2ca419d204..6bff44c085 100644
--- a/core/tests/Drupal/Tests/UnitTestCase.php
+++ b/core/tests/Drupal/Tests/UnitTestCase.php
@@ -10,12 +10,11 @@
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\StringTranslation\PluralTranslatableMarkup;
-use Drupal\Tests\Traits\PhpUnitWarnings;
+use Drupal\TestTools\Extension\DeprecationBridge\ExpectDeprecationTrait;
 use Drupal\TestTools\TestVarDumper;
 use PHPUnit\Framework\TestCase;
 use Prophecy\PhpUnit\ProphecyTrait;
 use Symfony\Component\VarDumper\VarDumper;
-use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;
 
 /**
  * Provides a base class and helpers for Drupal unit tests.
@@ -27,7 +26,6 @@
  */
 abstract class UnitTestCase extends TestCase {
 
-  use PhpUnitWarnings;
   use PhpUnitCompatibilityTrait;
   use ProphecyTrait;
   use ExpectDeprecationTrait;
diff --git a/core/tests/TestSuites/BuildTestSuite.php b/core/tests/TestSuites/BuildTestSuite.php
deleted file mode 100644
index c26bf44e59..0000000000
--- a/core/tests/TestSuites/BuildTestSuite.php
+++ /dev/null
@@ -1,34 +0,0 @@
-<?php
-
-declare(strict_types=1);
-
-namespace Drupal\Tests\TestSuites;
-
-require_once __DIR__ . '/TestSuiteBase.php';
-
-/**
- * Discovers tests for the build test suite.
- *
- * @deprecated in drupal:10.3.0 and is removed from drupal:11.0.0. There is no
- *   replacement and test discovery will be handled differently in PHPUnit 10.
- *
- * @see https://www.drupal.org/node/3405829
- */
-class BuildTestSuite extends TestSuiteBase {
-
-  /**
-   * Factory method which loads up a suite with all build tests.
-   *
-   * @return static
-   *   The test suite.
-   */
-  public static function suite() {
-    $root = dirname(__DIR__, 3);
-
-    $suite = new static('build');
-    $suite->addTestsBySuiteNamespace($root, 'Build');
-
-    return $suite;
-  }
-
-}
diff --git a/core/tests/TestSuites/FunctionalJavascriptTestSuite.php b/core/tests/TestSuites/FunctionalJavascriptTestSuite.php
deleted file mode 100644
index 5ae2325121..0000000000
--- a/core/tests/TestSuites/FunctionalJavascriptTestSuite.php
+++ /dev/null
@@ -1,34 +0,0 @@
-<?php
-
-declare(strict_types=1);
-
-namespace Drupal\Tests\TestSuites;
-
-require_once __DIR__ . '/TestSuiteBase.php';
-
-/**
- * Discovers tests for the functional-javascript test suite.
- *
- * @deprecated in drupal:10.3.0 and is removed from drupal:11.0.0. There is no
- *   replacement and test discovery will be handled differently in PHPUnit 10.
- *
- * @see https://www.drupal.org/node/3405829
- */
-class FunctionalJavascriptTestSuite extends TestSuiteBase {
-
-  /**
-   * Factory method which loads up a suite with all functional javascript tests.
-   *
-   * @return static
-   *   The test suite.
-   */
-  public static function suite() {
-    $root = dirname(__DIR__, 3);
-
-    $suite = new static('functional-javascript');
-    $suite->addTestsBySuiteNamespace($root, 'FunctionalJavascript');
-
-    return $suite;
-  }
-
-}
diff --git a/core/tests/TestSuites/FunctionalTestSuite.php b/core/tests/TestSuites/FunctionalTestSuite.php
deleted file mode 100644
index 20aed98dee..0000000000
--- a/core/tests/TestSuites/FunctionalTestSuite.php
+++ /dev/null
@@ -1,34 +0,0 @@
-<?php
-
-declare(strict_types=1);
-
-namespace Drupal\Tests\TestSuites;
-
-require_once __DIR__ . '/TestSuiteBase.php';
-
-/**
- * Discovers tests for the functional test suite.
- *
- * @deprecated in drupal:10.3.0 and is removed from drupal:11.0.0. There is no
- *   replacement and test discovery will be handled differently in PHPUnit 10.
- *
- * @see https://www.drupal.org/node/3405829
- */
-class FunctionalTestSuite extends TestSuiteBase {
-
-  /**
-   * Factory method which loads up a suite with all functional tests.
-   *
-   * @return static
-   *   The test suite.
-   */
-  public static function suite() {
-    $root = dirname(__DIR__, 3);
-
-    $suite = new static('functional');
-    $suite->addTestsBySuiteNamespace($root, 'Functional');
-
-    return $suite;
-  }
-
-}
diff --git a/core/tests/TestSuites/KernelTestSuite.php b/core/tests/TestSuites/KernelTestSuite.php
deleted file mode 100644
index 0916c8528f..0000000000
--- a/core/tests/TestSuites/KernelTestSuite.php
+++ /dev/null
@@ -1,34 +0,0 @@
-<?php
-
-declare(strict_types=1);
-
-namespace Drupal\Tests\TestSuites;
-
-require_once __DIR__ . '/TestSuiteBase.php';
-
-/**
- * Discovers tests for the kernel test suite.
- *
- * @deprecated in drupal:10.3.0 and is removed from drupal:11.0.0. There is no
- *   replacement and test discovery will be handled differently in PHPUnit 10.
- *
- * @see https://www.drupal.org/node/3405829
- */
-class KernelTestSuite extends TestSuiteBase {
-
-  /**
-   * Factory method which loads up a suite with all kernel tests.
-   *
-   * @return static
-   *   The test suite.
-   */
-  public static function suite() {
-    $root = dirname(__DIR__, 3);
-
-    $suite = new static('kernel');
-    $suite->addTestsBySuiteNamespace($root, 'Kernel');
-
-    return $suite;
-  }
-
-}
diff --git a/core/tests/TestSuites/TestSuiteBase.php b/core/tests/TestSuites/TestSuiteBase.php
deleted file mode 100644
index 435116d865..0000000000
--- a/core/tests/TestSuites/TestSuiteBase.php
+++ /dev/null
@@ -1,75 +0,0 @@
-<?php
-
-declare(strict_types=1);
-
-namespace Drupal\Tests\TestSuites;
-
-use Drupal\Core\Test\TestDiscovery;
-use PHPUnit\Framework\TestSuite;
-
-/**
- * Base class for Drupal test suites.
- *
- * @deprecated in drupal:10.3.0 and is removed from drupal:11.0.0. There is no
- *   replacement and test discovery will be handled differently in PHPUnit 10.
- *
- * @see https://www.drupal.org/node/3405829
- */
-abstract class TestSuiteBase extends TestSuite {
-
-  /**
-   * Finds extensions in a Drupal installation.
-   *
-   * An extension is defined as a directory with an *.info.yml file in it.
-   *
-   * @param string $root
-   *   Path to the root of the Drupal installation.
-   *
-   * @return string[]
-   *   Associative array of extension paths, with extension name as keys.
-   */
-  protected function findExtensionDirectories($root) {
-    $extension_roots = \drupal_phpunit_contrib_extension_directory_roots($root);
-
-    $extension_directories = array_map('drupal_phpunit_find_extension_directories', $extension_roots);
-    return array_reduce($extension_directories, 'array_merge', []);
-  }
-
-  /**
-   * Find and add tests to the suite for core and any extensions.
-   *
-   * @param string $root
-   *   Path to the root of the Drupal installation.
-   * @param string $suite_namespace
-   *   SubNamespace used to separate test suite. Examples: Unit, Functional.
-   */
-  protected function addTestsBySuiteNamespace($root, $suite_namespace) {
-    // Core's tests are in the namespace Drupal\{$suite_namespace}Tests\ and are
-    // always inside of core/tests/Drupal/{$suite_namespace}Tests. The exception
-    // to this is Unit tests for historical reasons.
-    if ($suite_namespace == 'Unit') {
-      $tests = TestDiscovery::scanDirectory("Drupal\\Tests\\", "$root/core/tests/Drupal/Tests");
-      $tests = array_flip(array_filter(array_flip($tests), function ($test_class) {
-        // The Listeners directory does not contain tests. Use the class name
-        // to be compatible with all operating systems.
-        return !preg_match('/^Drupal\\\\Tests\\\\Listeners\\\\/', $test_class);
-      }));
-      $this->addTestFiles($tests);
-    }
-    else {
-      $this->addTestFiles(TestDiscovery::scanDirectory("Drupal\\{$suite_namespace}Tests\\", "$root/core/tests/Drupal/{$suite_namespace}Tests"));
-    }
-
-    // Extensions' tests will always be in the namespace
-    // Drupal\Tests\$extension_name\$suite_namespace\ and be in the
-    // $extension_path/tests/src/$suite_namespace directory. Not all extensions
-    // will have all kinds of tests.
-    foreach ($this->findExtensionDirectories($root) as $extension_name => $dir) {
-      $test_path = "$dir/tests/src/$suite_namespace";
-      if (is_dir($test_path)) {
-        $this->addTestFiles(TestDiscovery::scanDirectory("Drupal\\Tests\\$extension_name\\$suite_namespace\\", $test_path));
-      }
-    }
-  }
-
-}
diff --git a/core/tests/TestSuites/UnitTestSuite.php b/core/tests/TestSuites/UnitTestSuite.php
deleted file mode 100644
index db779652db..0000000000
--- a/core/tests/TestSuites/UnitTestSuite.php
+++ /dev/null
@@ -1,34 +0,0 @@
-<?php
-
-declare(strict_types=1);
-
-namespace Drupal\Tests\TestSuites;
-
-require_once __DIR__ . '/TestSuiteBase.php';
-
-/**
- * Discovers tests for the unit test suite.
- *
- * @deprecated in drupal:10.3.0 and is removed from drupal:11.0.0. There is no
- *   replacement and test discovery will be handled differently in PHPUnit 10.
- *
- * @see https://www.drupal.org/node/3405829
- */
-class UnitTestSuite extends TestSuiteBase {
-
-  /**
-   * Factory method which loads up a suite with all unit tests.
-   *
-   * @return static
-   *   The test suite.
-   */
-  public static function suite() {
-    $root = dirname(__DIR__, 3);
-
-    $suite = new static('unit');
-    $suite->addTestsBySuiteNamespace($root, 'Unit');
-
-    return $suite;
-  }
-
-}
diff --git a/core/tests/bootstrap.php b/core/tests/bootstrap.php
index 50bacbe2b0..d3c5e5fc7b 100644
--- a/core/tests/bootstrap.php
+++ b/core/tests/bootstrap.php
@@ -7,7 +7,10 @@
  * @see phpunit.xml.dist
  */
 
-use Drupal\TestTools\PhpUnitCompatibility\ClassWriter;
+use Drupal\TestTools\Extension\DeprecationBridge\BootstrapErrorHandler;
+use Drupal\TestTools\Extension\DeprecationBridge\DeprecationHandler;
+use Drupal\TestTools\Extension\HtmlLogging\HtmlOutputLogger;
+use Symfony\Component\ErrorHandler\DebugClassLoader;
 
 /**
  * Finds all valid extension directories recursively within a given directory.
@@ -142,8 +145,6 @@ function drupal_phpunit_populate_class_loader() {
 $loader = drupal_phpunit_populate_class_loader();
 class_alias('\Drupal\Tests\DocumentElement', '\Behat\Mink\Element\DocumentElement', TRUE);
 
-ClassWriter::mutateTestBase($loader);
-
 // Set sane locale settings, to ensure consistent string, dates, times and
 // numbers handling.
 // @see \Drupal\Core\DrupalKernel::bootEnvironment()
@@ -160,11 +161,24 @@ class_alias('\Drupal\Tests\DocumentElement', '\Behat\Mink\Element\DocumentElemen
 // reduce the fragility of the testing system in general.
 date_default_timezone_set('Australia/Sydney');
 
-// Ensure ignored deprecation patterns listed in .deprecation-ignore.txt are
-// considered in testing.
-if (getenv('SYMFONY_DEPRECATIONS_HELPER') === FALSE) {
-  $deprecation_ignore_filename = realpath(__DIR__ . "/../.deprecation-ignore.txt");
-  putenv("SYMFONY_DEPRECATIONS_HELPER=ignoreFile=$deprecation_ignore_filename");
+// Bootstrap the DeprecationHandler extension and the DebugClassloader to report
+// deprecations in PHPUnit 10+.
+if ($deprecationBridgeConfiguration = DeprecationHandler::getConfiguration()) {
+  DeprecationHandler::init($deprecationBridgeConfiguration['ignoreFile'] ?? NULL);
+
+  // Need to have an early error handler to manage deprecations triggered by
+  // DebugClassLoader, that occur before tests' setUp() methods are called.
+  set_error_handler(new BootstrapErrorHandler());
+
+  // Enable the DebugClassLoader to get deprecations for methods' signature
+  // changes.
+  DebugClassLoader::enable();
+}
+
+// Functional tests HTML output logging.
+$browserTestOutputDirectory = getenv('BROWSERTEST_OUTPUT_DIRECTORY');
+if ($browserTestOutputDirectory !== FALSE) {
+  HtmlOutputLogger::init($browserTestOutputDirectory, (bool) getenv('BROWSERTEST_OUTPUT_VERBOSE') ?? FALSE);
 }
 
 // Drupal expects to be run from its root directory. This ensures all test types
