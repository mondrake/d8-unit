diff --git a/core/modules/views/src/Plugin/views/query/Sql.php b/core/modules/views/src/Plugin/views/query/Sql.php
index 035df8b593..8ee25e095f 100644
--- a/core/modules/views/src/Plugin/views/query/Sql.php
+++ b/core/modules/views/src/Plugin/views/query/Sql.php
@@ -1380,9 +1380,9 @@ public function query($get_count = FALSE) {
         // Handle group by of field without table alias to avoid ambiguous
         // column error.
         if ($field == $this->view->storage->get('base_field')) {
-          $field = $this->view->storage->get('base_table') . '.' . $field;
+          $field = $this->view->storage->get('base_table') . '].[' . $field;
         }
-        $query->groupBy($field);
+        $query->groupBy('[' . $field . ']');
       }
       if (!empty($this->having) && $condition = $this->buildCondition('having')) {
         $query->havingCondition($condition);
diff --git a/core/modules/views/tests/src/Kernel/QueryGroupByTest.php b/core/modules/views/tests/src/Kernel/QueryGroupByTest.php
index 171688321e..716efb8217 100644
--- a/core/modules/views/tests/src/Kernel/QueryGroupByTest.php
+++ b/core/modules/views/tests/src/Kernel/QueryGroupByTest.php
@@ -230,7 +230,8 @@ public function testGroupByBaseField() {
     $view->displayHandlers->get('default')->options['fields']['name']['group_type'] = 'min';
     unset($view->displayHandlers->get('default')->options['fields']['id']['group_type']);
     $this->executeView($view);
-    $this->assertStringContainsString('GROUP BY entity_test.id', (string) $view->build_info['query'], 'GROUP BY field includes the base table name when grouping on the base field.');
+dump((string) $view->build_info['query']);
+    $this->assertMatchesRegularExpression('/GROUP BY .entity_test.\..id./', (string) $view->build_info['query'], 'GROUP BY field includes the base table name when grouping on the base field.');
   }
 
   /**
