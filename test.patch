diff --git a/core/lib/Drupal/Core/Test/AssertMailTrait.php b/core/lib/Drupal/Core/Test/AssertMailTrait.php
index 9e60079e12..0d8cdd4942 100644
--- a/core/lib/Drupal/Core/Test/AssertMailTrait.php
+++ b/core/lib/Drupal/Core/Test/AssertMailTrait.php
@@ -57,12 +57,15 @@ protected function getMails(array $filter = []) {
    *   this default.
    *
    * @return bool
-   *   TRUE on pass, FALSE on fail.
+   *   TRUE on pass.
    */
   protected function assertMail($name, $value = '', $message = '', $group = 'Email') {
     $captured_emails = $this->container->get('state')->get('system.test_mail_collector') ?: [];
     $email = end($captured_emails);
-    return $this->assertTrue($email && isset($email[$name]) && $email[$name] == $value, $message, $group);
+    $this->assertNotNull($email);
+    $this->assertArrayHasKey($name, $email);
+    $this->assertEquals($value, $email[$name], $message);
+    return TRUE;
   }
 
   /**
diff --git a/core/modules/aggregator/tests/src/Functional/AggregatorRenderingTest.php b/core/modules/aggregator/tests/src/Functional/AggregatorRenderingTest.php
index fd6c673254..eb83562075 100644
--- a/core/modules/aggregator/tests/src/Functional/AggregatorRenderingTest.php
+++ b/core/modules/aggregator/tests/src/Functional/AggregatorRenderingTest.php
@@ -62,12 +62,14 @@ public function testBlockLinks() {
     // Confirm items appear as links.
     $items = $this->container->get('entity_type.manager')->getStorage('aggregator_item')->loadByFeed($feed->id(), 1);
     $links = $this->xpath('//a[@href = :href]', [':href' => reset($items)->getLink()]);
-    $this->assert(isset($links[0]), 'Item link found.');
+    $this->assertArrayHasKey(0, $links);
+    $this->assertNotNull($links[0]);
 
     // Find the expected read_more link.
     $href = $feed->toUrl()->toString();
     $links = $this->xpath('//a[@href = :href]', [':href' => $href]);
-    $this->assert(isset($links[0]), new FormattableMarkup('Link to href %href found.', ['%href' => $href]));
+    $this->assertArrayHasKey(0, $links);
+    $this->assertNotNull($links[0], new FormattableMarkup('Link to href %href found.', ['%href' => $href]));
     $cache_tags_header = $this->drupalGetHeader('X-Drupal-Cache-Tags');
     $cache_tags = explode(' ', $cache_tags_header);
     $this->assertContains('aggregator_feed:' . $feed->id(), $cache_tags);
@@ -119,7 +121,8 @@ public function testFeedPage() {
     // Find the expected read_more link on the sources page.
     $href = $feed->toUrl()->toString();
     $links = $this->xpath('//a[@href = :href]', [':href' => $href]);
-    $this->assertTrue(isset($links[0]), new FormattableMarkup('Link to href %href found.', ['%href' => $href]));
+    $this->assertArrayHasKey(0, $links);
+    $this->assertNotNull($links[0]);
     $cache_tags_header = $this->drupalGetHeader('X-Drupal-Cache-Tags');
     $cache_tags = explode(' ', $cache_tags_header);
     $this->assertContains('aggregator_feed:' . $feed->id(), $cache_tags);
diff --git a/core/modules/aggregator/tests/src/Functional/AggregatorTestBase.php b/core/modules/aggregator/tests/src/Functional/AggregatorTestBase.php
index 5d36dd270f..d5533d698f 100644
--- a/core/modules/aggregator/tests/src/Functional/AggregatorTestBase.php
+++ b/core/modules/aggregator/tests/src/Functional/AggregatorTestBase.php
@@ -79,7 +79,7 @@ public function createFeed($feed_url = NULL, array $edit = []) {
 
     // Verify that the creation message contains a link to a feed.
     $view_link = $this->xpath('//div[@class="messages"]//a[contains(@href, :href)]', [':href' => 'aggregator/sources/']);
-    $this->assert(isset($view_link), 'The message area contains a link to a feed');
+    $this->assertNotNull($view_link, 'The message area contains a link to a feed');
 
     $fids = \Drupal::entityQuery('aggregator_feed')->condition('title', $edit['title[0][value]'])->condition('url', $edit['url[0][value]'])->execute();
     $this->assertNotEmpty($fids, 'The feed found in database.');
diff --git a/core/modules/aggregator/tests/src/Functional/UpdateFeedItemTest.php b/core/modules/aggregator/tests/src/Functional/UpdateFeedItemTest.php
index 4c5a3d3ab3..5a792b7c4a 100644
--- a/core/modules/aggregator/tests/src/Functional/UpdateFeedItemTest.php
+++ b/core/modules/aggregator/tests/src/Functional/UpdateFeedItemTest.php
@@ -48,7 +48,7 @@ public function testUpdateFeedItem() {
 
     // Verify that the creation message contains a link to a feed.
     $view_link = $this->xpath('//div[@class="messages"]//a[contains(@href, :href)]', [':href' => 'aggregator/sources/']);
-    $this->assert(isset($view_link), 'The message area contains a link to a feed');
+    $this->assertNotNull($view_link, 'The message area contains a link to a feed');
 
     $fids = \Drupal::entityQuery('aggregator_feed')->condition('url', $edit['url[0][value]'])->execute();
     $feed = Feed::load(array_values($fids)[0]);
diff --git a/core/modules/aggregator/tests/src/Functional/UpdateFeedTest.php b/core/modules/aggregator/tests/src/Functional/UpdateFeedTest.php
index 798bc55781..e36e11988f 100644
--- a/core/modules/aggregator/tests/src/Functional/UpdateFeedTest.php
+++ b/core/modules/aggregator/tests/src/Functional/UpdateFeedTest.php
@@ -36,7 +36,7 @@ public function testUpdateFeed() {
 
       // Verify that the creation message contains a link to a feed.
       $view_link = $this->xpath('//div[@class="messages"]//a[contains(@href, :href)]', [':href' => 'aggregator/sources/']);
-      $this->assert(isset($view_link), 'The message area contains a link to a feed');
+      $this->assertNotNull($view_link, 'The message area contains a link to a feed');
 
       // Check feed data.
       $this->assertUrl($feed->toUrl('canonical', ['absolute' => TRUE])->toString());
diff --git a/core/modules/big_pipe/tests/src/Functional/BigPipeTest.php b/core/modules/big_pipe/tests/src/Functional/BigPipeTest.php
index 92efb10376..283f54b562 100644
--- a/core/modules/big_pipe/tests/src/Functional/BigPipeTest.php
+++ b/core/modules/big_pipe/tests/src/Functional/BigPipeTest.php
@@ -267,7 +267,8 @@ public function testBigPipeNoJs() {
     $this->assertNoRaw(BigPipe::STOP_SIGNAL, 'BigPipe stop signal absent.');
 
     // Verifying BigPipe assets are absent.
-    $this->assertTrue(!isset($this->getDrupalSettings()['bigPipePlaceholderIds']) && empty($this->getDrupalSettings()['ajaxPageState']), 'BigPipe drupalSettings and BigPipe asset library absent.');
+    $this->assertArrayNotHasKey('bigPipePlaceholderIds', $this->getDrupalSettings());
+    $this->assertEmpty($this->getDrupalSettings()['ajaxPageState']);
     $this->assertRaw('</body>', 'Closing body tag present.');
 
     // Verify that 4xx responses work fine. (4xx responses are handled by
@@ -483,7 +484,7 @@ protected function assertBigPipeNoJsMetaRefreshRedirect() {
     $this->assertStringStartsWith('big_pipe_nojs=1', $headers[0]['Set-Cookie'][0], 'The first response sets the big_pipe_nojs cookie.');
     $this->assertEqual($original_url, $headers[0]['Location'][0], 'The first response redirected back to the original page.');
     $this->assertTrue(empty(array_diff(['cookies:big_pipe_nojs', 'session.exists'], explode(' ', $headers[0]['X-Drupal-Cache-Contexts'][0]))), 'The first response varies by the "cookies:big_pipe_nojs" and "session.exists" cache contexts.');
-    $this->assertFalse(isset($headers[0]['Surrogate-Control']), 'The first response has no "Surrogate-Control" header.');
+    $this->assertArrayNotHasKey('Surrogate-Control', $headers[0], 'The first response has no "Surrogate-Control" header.');
 
     // Second response: redirect followed.
     $this->assertEqual(200, $statuses[1], 'The second response was a 200.');
diff --git a/core/modules/block/tests/src/Kernel/BlockViewBuilderTest.php b/core/modules/block/tests/src/Kernel/BlockViewBuilderTest.php
index 70d7e1e152..7fd9c00c16 100644
--- a/core/modules/block/tests/src/Kernel/BlockViewBuilderTest.php
+++ b/core/modules/block/tests/src/Kernel/BlockViewBuilderTest.php
@@ -205,9 +205,13 @@ public function testBlockViewBuilderViewAlter() {
     // alter the eventual content.
     \Drupal::state()->set('block_test_view_alter_append_pre_render_prefix', TRUE);
     $build = $this->getBlockRenderArray();
-    $this->assertFalse(isset($build['#prefix']), 'The appended #pre_render callback has not yet run before rendering.');
+    // Verify that the appended #pre_render callback has not yet run before
+    // rendering.
+    $this->assertArrayNotHasKey('#prefix', $build);
     $this->assertIdentical((string) $this->renderer->renderRoot($build), 'Hiya!<br>');
-    $this->assertTrue(isset($build['#prefix']) && $build['#prefix'] === 'Hiya!<br>', 'A cached block without content is altered.');
+    $this->assertArrayHasKey('#prefix', $build);
+    $this->assertNotNull($build['#prefix']);
+    $this->assertSame('Hiya!<br>', $build['#prefix'], 'A cached block without content is altered.');
   }
 
   /**
@@ -266,7 +270,8 @@ public function testBlockViewBuilderBuildAlter() {
     foreach ([TRUE, FALSE] as $value) {
       \Drupal::state()->set('block_test_block_alter_create_placeholder', $value);
       $build = $this->getBlockRenderArray();
-      $this->assertTrue(isset($build['#create_placeholder']));
+      $this->assertArrayHasKey('#create_placeholder', $build);
+      $this->assertNotNull($build['#create_placeholder']);
       $this->assertIdentical($value, $build['#create_placeholder']);
     }
     \Drupal::state()->set('block_test_block_alter_create_placeholder', NULL);
@@ -297,7 +302,7 @@ protected function assertBlockRenderedWithExpectedCacheability(array $expected_k
     $this->assertIdentical($expected_contexts, $build['#cache']['contexts']);
     $this->assertIdentical($expected_tags, $build['#cache']['tags']);
     $this->assertIdentical($expected_max_age, $build['#cache']['max-age']);
-    $this->assertFalse(isset($build['#create_placeholder']));
+    $this->assertArrayNotHasKey('#create_placeholder', $build);
     // - the rendered render array;
     $this->renderer->renderRoot($build);
     // - the render cache item.
diff --git a/core/modules/block_content/tests/src/Functional/BlockContentTypeTest.php b/core/modules/block_content/tests/src/Functional/BlockContentTypeTest.php
index 38ea25e555..7324a1b459 100644
--- a/core/modules/block_content/tests/src/Functional/BlockContentTypeTest.php
+++ b/core/modules/block_content/tests/src/Functional/BlockContentTypeTest.php
@@ -73,7 +73,10 @@ public function testBlockContentTypeCreation() {
     $this->assertInstanceOf(BlockContentType::class, $block_type);
 
     $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('block_content', 'foo');
-    $this->assertTrue(isset($field_definitions['body']), 'Body field created when using the UI to create block content types.');
+    // Verify that body field is created when using the UI to create block
+    // content types.
+    $this->assertArrayHasKey('body', $field_definitions);
+    $this->assertNotNull($field_definitions['body']);
 
     // Check that the block type was created in site default language.
     $default_langcode = \Drupal::languageManager()->getDefaultLanguage()->getId();
@@ -82,11 +85,16 @@ public function testBlockContentTypeCreation() {
     // Create block types programmatically.
     $this->createBlockContentType('basic', TRUE);
     $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('block_content', 'basic');
-    $this->assertTrue(isset($field_definitions['body']), "Body field for 'basic' block type created when using the testing API to create block content types.");
+    // Verify that body field for 'basic' block type created when using the
+    // testing API to create block content types.
+    $this->assertArrayHasKey('body', $field_definitions);
+    $this->assertNotNull($field_definitions['body']);
 
     $this->createBlockContentType('other');
     $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('block_content', 'other');
-    $this->assertFalse(isset($field_definitions['body']), "Body field for 'other' block type not created when using the testing API to create block content types.");
+    // Verify that body field for 'other' block type not created when using the
+    // testing API to create block content types.
+    $this->assertArrayNotHasKey('body', $field_definitions);
 
     $block_type = BlockContentType::load('other');
     $this->assertInstanceOf(BlockContentType::class, $block_type);
@@ -108,7 +116,9 @@ public function testBlockContentTypeEditing() {
     $this->createBlockContentType('other');
 
     $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions('block_content', 'other');
-    $this->assertFalse(isset($field_definitions['body']), 'Body field was not created when using the API to create block content types.');
+    // Verify that body field was not created when using the API to create block
+    // content types.
+    $this->assertArrayNotHasKey('body', $field_definitions);
 
     // Verify that title and body fields are displayed.
     $this->drupalGet('block/add/basic');
diff --git a/core/modules/book/tests/src/Kernel/BookUninstallTest.php b/core/modules/book/tests/src/Kernel/BookUninstallTest.php
index 9d2d5497cd..566ab5d007 100644
--- a/core/modules/book/tests/src/Kernel/BookUninstallTest.php
+++ b/core/modules/book/tests/src/Kernel/BookUninstallTest.php
@@ -85,7 +85,7 @@ public function testBookUninstall() {
     $book_node->delete();
     // No nodes exist therefore the book module is not required.
     $module_data = \Drupal::service('extension.list.module')->getList();
-    $this->assertFalse(isset($module_data['book']->info['required']), 'The book module is not required.');
+    $this->assertArrayNotHasKey('required', $module_data['book']->info, 'The book module is not required.');
 
     $node = Node::create(['title' => $this->randomString(), 'type' => $content_type->id()]);
     $node->save();
diff --git a/core/modules/ckeditor/tests/src/Functional/CKEditorLoadingTest.php b/core/modules/ckeditor/tests/src/Functional/CKEditorLoadingTest.php
index 39c7e9a3a7..031618585b 100644
--- a/core/modules/ckeditor/tests/src/Functional/CKEditorLoadingTest.php
+++ b/core/modules/ckeditor/tests/src/Functional/CKEditorLoadingTest.php
@@ -207,10 +207,14 @@ public function testLoadingWithoutInternalButtons() {
     $this->drupalLogin($this->normalUser);
     $this->drupalGet('node/add/article');
     $editor_settings = $this->getDrupalSettings()['editor']['formats']['filtered_html']['editorSettings'];
-    $this->assertTrue(isset($editor_settings['customConfig']));
-    $this->assertTrue(isset($editor_settings['entities']));
-    $this->assertTrue(isset($editor_settings['allowedContent']));
-    $this->assertTrue(isset($editor_settings['disallowedContent']));
+    $this->assertArrayHasKey('customConfig', $editor_settings);
+    $this->assertNotNull($editor_settings['customConfig']);
+    $this->assertArrayHasKey('entities', $editor_settings);
+    $this->assertNotNull($editor_settings['entities']);
+    $this->assertArrayHasKey('allowedContent', $editor_settings);
+    $this->assertNotNull($editor_settings['allowedContent']);
+    $this->assertArrayHasKey('disallowedContent', $editor_settings);
+    $this->assertNotNull($editor_settings['disallowedContent']);
   }
 
   /**
diff --git a/core/modules/comment/tests/src/Functional/CommentFieldsTest.php b/core/modules/comment/tests/src/Functional/CommentFieldsTest.php
index 6afee3a03f..35bcc80b5d 100644
--- a/core/modules/comment/tests/src/Functional/CommentFieldsTest.php
+++ b/core/modules/comment/tests/src/Functional/CommentFieldsTest.php
@@ -57,7 +57,7 @@ public function testCommentDefaultFields() {
     $field_storage = FieldStorageConfig::loadByName('comment', 'comment_body');
     $this->assertInstanceOf(FieldStorageConfig::class, $field_storage);
     $field = FieldConfig::loadByName('comment', 'comment', 'comment_body');
-    $this->assertTrue(isset($field), new FormattableMarkup('The comment_body field is present for comments on type @type', ['@type' => $type_name]));
+    $this->assertNotNull($field, new FormattableMarkup('The comment_body field is present for comments on type @type', ['@type' => $type_name]));
 
     // Test adding a field that defaults to CommentItemInterface::CLOSED.
     $this->addDefaultCommentField('node', 'test_node_type', 'who_likes_ponies', CommentItemInterface::CLOSED, 'who_likes_ponies');
diff --git a/core/modules/comment/tests/src/Kernel/CommentDefaultFormatterCacheTagsTest.php b/core/modules/comment/tests/src/Kernel/CommentDefaultFormatterCacheTagsTest.php
index 0bd3d23de3..447b9550d3 100644
--- a/core/modules/comment/tests/src/Kernel/CommentDefaultFormatterCacheTagsTest.php
+++ b/core/modules/comment/tests/src/Kernel/CommentDefaultFormatterCacheTagsTest.php
@@ -151,7 +151,7 @@ public function testCacheTags() {
 
     // The children (fields) of the entity render array are only built in case
     // of a cache miss.
-    $this->assertFalse(isset($build['entity']['comment']), 'Cache hit');
+    $this->assertArrayNotHasKey('comment', $build['entity'], 'Cache hit');
   }
 
 }
diff --git a/core/modules/config/tests/src/Functional/ConfigImportAllTest.php b/core/modules/config/tests/src/Functional/ConfigImportAllTest.php
index 9e60c53fbe..44bdaa8ab4 100644
--- a/core/modules/config/tests/src/Functional/ConfigImportAllTest.php
+++ b/core/modules/config/tests/src/Functional/ConfigImportAllTest.php
@@ -103,9 +103,15 @@ public function testInstallUninstall() {
     // Can not uninstall config and use admin/config/development/configuration!
     unset($modules_to_uninstall['config']);
 
-    $this->assertTrue(isset($modules_to_uninstall['comment']), 'The comment module will be disabled');
-    $this->assertTrue(isset($modules_to_uninstall['file']), 'The File module will be disabled');
-    $this->assertTrue(isset($modules_to_uninstall['editor']), 'The Editor module will be disabled');
+    // Verify that the comment module will be disabled.
+    $this->assertArrayHasKey('comment', $modules_to_uninstall);
+    $this->assertNotNull($modules_to_uninstall['comment']);
+    // Verify that the File module will be disabled.
+    $this->assertArrayHasKey('file', $modules_to_uninstall);
+    $this->assertNotNull($modules_to_uninstall['file']);
+    // Verify that editor module will be disabled.
+    $this->assertArrayHasKey('editor', $modules_to_uninstall);
+    $this->assertNotNull($modules_to_uninstall['editor']);
 
     // Uninstall all modules that can be uninstalled.
     \Drupal::service('module_installer')->uninstall(array_keys($modules_to_uninstall));
diff --git a/core/modules/config/tests/src/Functional/ConfigImportUITest.php b/core/modules/config/tests/src/Functional/ConfigImportUITest.php
index df904e56f7..9e1729ff55 100644
--- a/core/modules/config/tests/src/Functional/ConfigImportUITest.php
+++ b/core/modules/config/tests/src/Functional/ConfigImportUITest.php
@@ -149,7 +149,8 @@ public function testImport() {
     $this->assertIdentical($original_dynamic_data, $this->config($dynamic_name)->get());
 
     // Verify the cache got cleared.
-    $this->assertTrue(isset($GLOBALS['hook_cache_flush']));
+    $this->assertArrayHasKey('hook_cache_flush', $GLOBALS);
+    $this->assertNotNull($GLOBALS['hook_cache_flush']);
 
     $this->rebuildContainer();
     $this->assertTrue(\Drupal::moduleHandler()->moduleExists('ban'), 'Ban module installed during import.');
@@ -220,7 +221,8 @@ public function testImport() {
     $this->assertTrue(empty($installed), 'No modules installed during import');
 
     $theme_info = \Drupal::service('theme_handler')->listInfo();
-    $this->assertFalse(isset($theme_info['bartik']), 'Bartik theme uninstalled during import.');
+    // Verify that bartik theme is uninstalled during import.
+    $this->assertArrayNotHasKey('bartik', $theme_info);
 
     // Verify that the automated_cron.settings configuration object was only
     // deleted once during the import process.
@@ -508,11 +510,12 @@ public function testExtensionValidation() {
     // Node depends on text.
     unset($core['module']['text']);
     $module_data = $this->container->get('extension.list.module')->getList();
-    $this->assertTrue(isset($module_data['node']->requires['text']), 'The Node module depends on the Text module.');
+    $this->assertNotNull($module_data['node']->requires['text'], 'The Node module depends on the Text module.');
     // Bartik depends on Stable.
     unset($core['theme']['test_basetheme']);
     $theme_data = \Drupal::service('theme_handler')->rebuildThemeData();
-    $this->assertTrue(isset($theme_data['test_subtheme']->requires['test_basetheme']), 'The Test Subtheme theme depends on the Test Basetheme theme.');
+    $this->assertArrayHasKey('test_subtheme', $theme_data);
+    $this->assertNotNull($theme_data['test_subtheme']->requires['test_basetheme'], 'The Test Subtheme theme depends on the Test Basetheme theme.');
     // This module does not exist.
     $core['module']['does_not_exist'] = 0;
     // This theme does not exist.
diff --git a/core/modules/contact/tests/src/Functional/ContactSitewideTest.php b/core/modules/contact/tests/src/Functional/ContactSitewideTest.php
index a1c6846d8d..c4d1b8c115 100644
--- a/core/modules/contact/tests/src/Functional/ContactSitewideTest.php
+++ b/core/modules/contact/tests/src/Functional/ContactSitewideTest.php
@@ -172,7 +172,7 @@ public function testSiteWideContact() {
 
     // Verify that the creation message contains a link to a contact form.
     $view_link = $this->xpath('//div[@class="messages"]//a[contains(@href, :href)]', [':href' => 'contact/']);
-    $this->assert(isset($view_link), 'The message area contains a link to a contact form.');
+    $this->assertNotNull($view_link, 'The message area contains a link to a contact form.');
 
     // Create first valid form.
     $this->addContactForm($id = mb_strtolower($this->randomMachineName(16)), $label = $this->randomMachineName(16), implode(',', [$recipients[0]]), '', TRUE);
@@ -180,7 +180,7 @@ public function testSiteWideContact() {
 
     // Verify that the creation message contains a link to a contact form.
     $view_link = $this->xpath('//div[@class="messages"]//a[contains(@href, :href)]', [':href' => 'contact/']);
-    $this->assert(isset($view_link), 'The message area contains a link to a contact form.');
+    $this->assertNotNull($view_link, 'The message area contains a link to a contact form.');
 
     // Check that the form was created in site default language.
     $langcode = $this->config('contact.form.' . $id)->get('langcode');
diff --git a/core/modules/content_moderation/tests/src/Functional/ViewsModerationStateFilterTest.php b/core/modules/content_moderation/tests/src/Functional/ViewsModerationStateFilterTest.php
index 0589e7ade7..94f40e794e 100644
--- a/core/modules/content_moderation/tests/src/Functional/ViewsModerationStateFilterTest.php
+++ b/core/modules/content_moderation/tests/src/Functional/ViewsModerationStateFilterTest.php
@@ -127,7 +127,8 @@ public function testModerationStateFilterDependencyHandling() {
 
     $view = $this->loadViewUnchanged($view_id);
     $this->assertWorkflowDependencies(['editorial', 'translation'], $view);
-    $this->assertTrue(isset($view->getDisplay('default')['display_options']['filters']['moderation_state']));
+    $this->assertArrayHasKey('moderation_state', $view->getDisplay('default')['display_options']['filters']);
+    $this->assertNotNull($view->getDisplay('default')['display_options']['filters']['moderation_state']);
     $this->assertTrue($view->status());
 
     // Remove the 'Translation' workflow.
@@ -137,7 +138,7 @@ public function testModerationStateFilterDependencyHandling() {
     // view can be saved and there are no more config dependencies.
     $view = $this->loadViewUnchanged($view_id);
     $this->assertFalse($view->status());
-    $this->assertFalse(isset($view->getDisplay('default')['display_options']['filters']['moderation_state']));
+    $this->assertArrayNotHasKey('moderation_state', $view->getDisplay('default')['display_options']['filters']);
     $this->drupalPostForm("admin/structure/views/view/$view_id", [], 'Save');
     $this->assertWorkflowDependencies([], $view);
   }
@@ -350,7 +351,7 @@ protected function assertWorkflowDependencies(array $workflow_ids, ViewEntityInt
       $this->assertSame($expected, $dependencies['config']);
     }
     else {
-      $this->assertTrue(!isset($dependencies['config']));
+      $this->assertArrayNotHasKey('config', $dependencies);
     }
   }
 
diff --git a/core/modules/content_moderation/tests/src/Kernel/EntityTypeInfoTest.php b/core/modules/content_moderation/tests/src/Kernel/EntityTypeInfoTest.php
index c977f1bf21..1ab95bef64 100644
--- a/core/modules/content_moderation/tests/src/Kernel/EntityTypeInfoTest.php
+++ b/core/modules/content_moderation/tests/src/Kernel/EntityTypeInfoTest.php
@@ -121,11 +121,12 @@ public function testBaseFieldOnlyAddedToModeratedEntityTypes() {
     ])->save();
 
     $base_fields = $this->entityTypeInfo->entityBaseFieldInfo($definition);
-    $this->assertFalse(isset($base_fields['moderation_state']));
+    $this->assertArrayNotHasKey('moderation_state', $base_fields);
 
     $this->enableModeration('entity_test_with_bundle', 'moderated');
     $base_fields = $this->entityTypeInfo->entityBaseFieldInfo($definition);
-    $this->assertTrue(isset($base_fields['moderation_state']));
+    $this->assertArrayHasKey('moderation_state', $base_fields);
+    $this->assertNotNull($base_fields['moderation_state']);
   }
 
   /**
diff --git a/core/modules/content_moderation/tests/src/Kernel/ModerationStateFieldItemListTest.php b/core/modules/content_moderation/tests/src/Kernel/ModerationStateFieldItemListTest.php
index 92423626c5..dccdfcb3eb 100644
--- a/core/modules/content_moderation/tests/src/Kernel/ModerationStateFieldItemListTest.php
+++ b/core/modules/content_moderation/tests/src/Kernel/ModerationStateFieldItemListTest.php
@@ -346,7 +346,7 @@ public function testWorkflowCustomizedInitialState() {
     // Test a node for a workflow that hasn't been updated to include the
     // 'default_moderation_state' setting. We must be backwards compatible with
     // configuration that was exported before this change was introduced.
-    $this->assertFalse(isset($configuration['default_moderation_state']));
+    $this->assertArrayNotHasKey('default_moderation_state', $configuration);
     $legacy_configuration_node = Node::create([
       'title' => 'Test title',
       'type' => 'example',
diff --git a/core/modules/content_translation/tests/src/Functional/ContentTranslationLinkTagTest.php b/core/modules/content_translation/tests/src/Functional/ContentTranslationLinkTagTest.php
index a1a62fec79..eef43853fb 100644
--- a/core/modules/content_translation/tests/src/Functional/ContentTranslationLinkTagTest.php
+++ b/core/modules/content_translation/tests/src/Functional/ContentTranslationLinkTagTest.php
@@ -118,7 +118,8 @@ function ($langcode) use ($url_base, $languageManager) {
         $args = [':href' => $url_alternate->toString(), ':hreflang' => $langcode_alternate];
         $links = $this->xpath('head/link[@rel = "alternate" and @href = :href and @hreflang = :hreflang]', $args);
         $message = sprintf('The "%s" translation has the correct alternate hreflang link for "%s": %s.', $langcode, $langcode_alternate, $url->toString());
-        $this->assertTrue(isset($links[0]), $message);
+        $this->assertArrayHasKey(0, $links, $message);
+        $this->assertNotNull($links[0]);
       }
     }
   }
diff --git a/core/modules/content_translation/tests/src/Functional/ContentTranslationSyncImageTest.php b/core/modules/content_translation/tests/src/Functional/ContentTranslationSyncImageTest.php
index 14c72d3ee9..1f7082f440 100644
--- a/core/modules/content_translation/tests/src/Functional/ContentTranslationSyncImageTest.php
+++ b/core/modules/content_translation/tests/src/Functional/ContentTranslationSyncImageTest.php
@@ -221,7 +221,7 @@ public function testImageFieldSync() {
 
     // Check that the dropped value is the right one.
     $removed_fid = $this->files[0]->fid;
-    $this->assertTrue(!isset($fids[$removed_fid]), new FormattableMarkup('Field item @fid has been correctly removed.', ['@fid' => $removed_fid]));
+    $this->assertArrayNotHasKey($removed_fid, $fids, new FormattableMarkup('Field item @fid has been correctly removed.', ['@fid' => $removed_fid]));
 
     // Add back an item for the dropped value and perform synchronization again.
     $values[$langcode][$removed_fid] = [
diff --git a/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceAdminTest.php b/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceAdminTest.php
index 520c67b89b..2161544d20 100644
--- a/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceAdminTest.php
+++ b/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceAdminTest.php
@@ -348,7 +348,7 @@ public function testMultipleTargetBundles() {
     $vocabularies[1]->delete();
     $field_config = FieldConfig::load($field_id);
     $this->assertFalse($field_config->getSetting('handler_settings')['auto_create']);
-    $this->assertFalse(isset($field_config->getSetting('handler_settings')['auto_create_bundle']));
+    $this->assertArrayNotHasKey('auto_create_bundle', $field_config->getSetting('handler_settings'));
   }
 
   /**
diff --git a/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceFieldDefaultValueTest.php b/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceFieldDefaultValueTest.php
index 0457ba614b..7a8b733024 100644
--- a/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceFieldDefaultValueTest.php
+++ b/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceFieldDefaultValueTest.php
@@ -94,7 +94,8 @@ public function testEntityReferenceDefaultValue() {
 
     // Check if the ID has been converted to UUID in config entity.
     $config_entity = $this->config('field.field.node.reference_content.' . $field_name)->get();
-    $this->assertTrue(isset($config_entity['default_value'][0]['target_uuid']), 'Default value contains target_uuid property');
+    $this->assertArrayHasKey('target_uuid', $config_entity['default_value'][0], 'Default value contains target_uuid property');
+    $this->assertNotNull($config_entity['default_value'][0]['target_uuid'], 'Default value contains target_uuid property');
     $this->assertEqual($config_entity['default_value'][0]['target_uuid'], $referenced_node->uuid(), 'Content uuid and config entity uuid are the same');
     // Ensure the configuration has the expected dependency on the entity that
     // is being used a default value.
diff --git a/core/modules/field/tests/src/Functional/FieldImportDeleteUninstallUiTest.php b/core/modules/field/tests/src/Functional/FieldImportDeleteUninstallUiTest.php
index d1c7647aab..c347c1fd8b 100644
--- a/core/modules/field/tests/src/Functional/FieldImportDeleteUninstallUiTest.php
+++ b/core/modules/field/tests/src/Functional/FieldImportDeleteUninstallUiTest.php
@@ -122,8 +122,8 @@ public function testImportDeleteUninstall() {
     $this->assertFalse(\Drupal::moduleHandler()->moduleExists('telephone'));
     $this->assertNull(\Drupal::service('entity.repository')->loadEntityByUuid('field_storage_config', $field_storage->uuid()), 'The telephone field has been deleted by the configuration synchronization');
     $deleted_storages = \Drupal::state()->get('field.storage.deleted', []);
-    $this->assertFalse(isset($deleted_storages[$field_storage->uuid()]), 'Telephone field has been completed removed from the system.');
-    $this->assertFalse(isset($deleted_storages[$field_storage->uuid()]), 'Text field has been completed removed from the system.');
+    $this->assertArrayNotHasKey($field_storage->uuid(), $deleted_storages, 'Telephone field has been completed removed from the system.');
+    $this->assertArrayNotHasKey($field_storage->uuid(), $deleted_storages, 'Text field has been completed removed from the system.');
   }
 
 }
diff --git a/core/modules/field/tests/src/Functional/FormTest.php b/core/modules/field/tests/src/Functional/FormTest.php
index 381ec8df9e..8c70ce94a2 100644
--- a/core/modules/field/tests/src/Functional/FormTest.php
+++ b/core/modules/field/tests/src/Functional/FormTest.php
@@ -272,7 +272,8 @@ public function testFieldFormUnlimited() {
 
     // Check if aria-describedby attribute is placed on multiple value widgets.
     $elements = $this->xpath('//table[@id="field-unlimited-values" and @aria-describedby="edit-field-unlimited--description"]');
-    $this->assertTrue(isset($elements[0]), t('aria-describedby attribute is properly placed on multiple value widgets.'));
+    $this->assertArrayHasKey(0, $elements);
+    $this->assertNotNull($elements[0]);
 
     // Press 'add more' button -> 2 widgets.
     $this->drupalPostForm(NULL, [], t('Add another item'));
@@ -359,11 +360,14 @@ public function testFieldFormUnlimitedRequired() {
     $this->drupalGet('entity_test/add');
     // Check that the Required symbol is present for the multifield label.
     $element = $this->xpath('//h4[contains(@class, "label") and contains(@class, "js-form-required") and contains(text(), :value)]', [':value' => $this->field['label']]);
-    $this->assertTrue(isset($element[0]), 'Required symbol added field label.');
+    $this->assertArrayHasKey(0, $element);
+    $this->assertNotNull($element[0]);
     // Check that the label of the field input is visually hidden and contains
     // the field title and an indication of the delta for a11y.
     $element = $this->xpath('//label[@for=:for and contains(@class, "visually-hidden") and contains(text(), :value)]', [':for' => 'edit-field-unlimited-0-value', ':value' => $this->field['label'] . ' (value 1)']);
-    $this->assertTrue(isset($element[0]), 'Required symbol not added for field input.');
+    // Verify that required symbol not added for field input.
+    $this->assertArrayHasKey(0, $element);
+    $this->assertNotNull($element[0]);
   }
 
   /**
diff --git a/core/modules/field/tests/src/Functional/Views/FieldUITest.php b/core/modules/field/tests/src/Functional/Views/FieldUITest.php
index 4ed44e31ea..ff913829c6 100644
--- a/core/modules/field/tests/src/Functional/Views/FieldUITest.php
+++ b/core/modules/field/tests/src/Functional/Views/FieldUITest.php
@@ -98,7 +98,8 @@ public function testHandlerUI() {
 
     // Ensure that the view depends on the field storage.
     $dependencies = \Drupal::service('config.manager')->findConfigEntityDependents('config', [$this->fieldStorages[0]->getConfigDependencyName()]);
-    $this->assertTrue(isset($dependencies['views.view.test_view_fieldapi']), 'The view is dependent on the field storage.');
+    $this->assertArrayHasKey('views.view.test_view_fieldapi', $dependencies, 'The view is dependent on the field storage.');
+    $this->assertNotNull($dependencies['views.view.test_view_fieldapi']);
   }
 
   /**
diff --git a/core/modules/field/tests/src/Kernel/BulkDeleteTest.php b/core/modules/field/tests/src/Kernel/BulkDeleteTest.php
index a94f2f59c5..4eb4c0e539 100644
--- a/core/modules/field/tests/src/Kernel/BulkDeleteTest.php
+++ b/core/modules/field/tests/src/Kernel/BulkDeleteTest.php
@@ -266,8 +266,10 @@ public function testPurgeWithDeletedAndActiveField() {
 
     // The field still exists, deleted, with the same field name.
     $fields = \Drupal::entityTypeManager()->getStorage('field_config')->loadByProperties(['uuid' => $deleted_field_uuid, 'include_deleted' => TRUE]);
-    $this->assertTrue(isset($fields[$deleted_field_uuid]) && $fields[$deleted_field_uuid]->isDeleted(), 'The field exists and is deleted');
-    $this->assertTrue(isset($fields[$deleted_field_uuid]) && $fields[$deleted_field_uuid]->getName() == $field_name);
+    $this->assertArrayHasKey($deleted_field_uuid, $fields);
+    $this->assertNotNull($fields[$deleted_field_uuid]);
+    $this->assertTrue($fields[$deleted_field_uuid]->isDeleted(), 'The field exists and is deleted');
+    $this->assertEquals($field_name, $fields[$deleted_field_uuid]->getName());
 
     for ($i = 0; $i < 10; $i++) {
       $entity = $this->container->get('entity_type.manager')
@@ -364,7 +366,7 @@ public function testPurgeField() {
     // The field storage still exists, not deleted, because it has a second
     // field.
     $storages = \Drupal::entityTypeManager()->getStorage('field_storage_config')->loadByProperties(['uuid' => $field_storage->uuid(), 'include_deleted' => TRUE]);
-    $this->assertTrue(isset($storages[$field_storage->uuid()]), 'The field storage exists and is not deleted');
+    $this->assertArrayHasKey($field_storage->uuid(), $storages, 'The field storage exists and is not deleted');
   }
 
   /**
@@ -403,7 +405,9 @@ public function testPurgeFieldStorage() {
 
     // The field still exists, deleted.
     $fields = \Drupal::entityTypeManager()->getStorage('field_config')->loadByProperties(['uuid' => $field->uuid(), 'include_deleted' => TRUE]);
-    $this->assertTrue(isset($fields[$field->uuid()]) && $fields[$field->uuid()]->isDeleted(), 'The field exists and is deleted');
+    $this->assertArrayHasKey($field->uuid(), $fields);
+    $this->assertNotNull($fields[$field->uuid()]);
+    $this->assertTrue($fields[$field->uuid()]->isDeleted(), 'The field exists and is deleted');
 
     // Purge again to purge the field.
     field_purge_batch(0);
@@ -413,7 +417,9 @@ public function testPurgeFieldStorage() {
     $this->assertCount(0, $fields, 'The field is purged.');
     // The field storage still exists, not deleted.
     $storages = \Drupal::entityTypeManager()->getStorage('field_storage_config')->loadByProperties(['uuid' => $field_storage->uuid(), 'include_deleted' => TRUE]);
-    $this->assertTrue(isset($storages[$field_storage->uuid()]) && !$storages[$field_storage->uuid()]->isDeleted(), 'The field storage exists and is not deleted');
+    $this->assertArrayHasKey($field_storage->uuid(), $storages);
+    $this->assertNotNull($storages[$field_storage->uuid()]);
+    $this->assertFalse($storages[$field_storage->uuid()]->isDeleted(), 'The field storage exists and is not deleted');
 
     // Delete the second field.
     $bundle = next($this->bundles);
@@ -438,9 +444,13 @@ public function testPurgeFieldStorage() {
 
     // The field and the storage still exist, deleted.
     $fields = \Drupal::entityTypeManager()->getStorage('field_config')->loadByProperties(['uuid' => $field->uuid(), 'include_deleted' => TRUE]);
-    $this->assertTrue(isset($fields[$field->uuid()]) && $fields[$field->uuid()]->isDeleted(), 'The field exists and is deleted');
+    $this->assertArrayHasKey($field->uuid(), $fields);
+    $this->assertNotNull($fields[$field->uuid()]);
+    $this->assertTrue($fields[$field->uuid()]->isDeleted(), 'The field exists and is deleted');
     $storages = \Drupal::entityTypeManager()->getStorage('field_storage_config')->loadByProperties(['uuid' => $field_storage->uuid(), 'include_deleted' => TRUE]);
-    $this->assertTrue(isset($storages[$field_storage->uuid()]) && $storages[$field_storage->uuid()]->isDeleted(), 'The field storage exists and is deleted');
+    $this->assertArrayHasKey($field_storage->uuid(), $storages);
+    $this->assertNotNull($storages[$field_storage->uuid()]);
+    $this->assertTrue($storages[$field_storage->uuid()]->isDeleted(), 'The field storage exists and is deleted');
 
     // Purge again to purge the field and the storage.
     field_purge_batch(0);
diff --git a/core/modules/field/tests/src/Kernel/ConfigFieldDefinitionTest.php b/core/modules/field/tests/src/Kernel/ConfigFieldDefinitionTest.php
index 28154ab771..c21558f7f4 100644
--- a/core/modules/field/tests/src/Kernel/ConfigFieldDefinitionTest.php
+++ b/core/modules/field/tests/src/Kernel/ConfigFieldDefinitionTest.php
@@ -44,10 +44,11 @@ protected function setUp(): void {
    */
   public function testBundleFieldDefinition() {
     $definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions($this->entityType, $this->bundle);
-    $this->assertTrue(isset($definitions[$this->fieldTestData->field->getName()]));
+    $this->assertArrayHasKey($this->fieldTestData->field->getName(), $definitions);
+    $this->assertNotNull($definitions[$this->fieldTestData->field->getName()]);
     $this->assertInstanceOf(FieldDefinitionInterface::class, $definitions[$this->fieldTestData->field->getName()]);
     // Make sure fields on other entity types are not exposed.
-    $this->assertFalse(isset($definitions[$this->fieldTestData->field_rev->getName()]));
+    $this->assertArrayNotHasKey($this->fieldTestData->field_rev->getName(), $definitions);
   }
 
   /**
@@ -55,10 +56,11 @@ public function testBundleFieldDefinition() {
    */
   public function testFieldStorageDefinition() {
     $field_storage_definitions = \Drupal::service('entity_field.manager')->getFieldStorageDefinitions($this->entityType);
-    $this->assertTrue(isset($field_storage_definitions[$this->fieldTestData->field->getName()]));
+    $this->assertArrayHasKey($this->fieldTestData->field->getName(), $field_storage_definitions);
+    $this->assertNotNull($field_storage_definitions[$this->fieldTestData->field->getName()]);
     $this->assertInstanceOf(FieldStorageDefinitionInterface::class, $field_storage_definitions[$this->fieldTestData->field->getName()]);
     // Make sure storages on other entity types are not exposed.
-    $this->assertFalse(isset($field_storage_definitions[$this->fieldTestData->field_rev->getName()]));
+    $this->assertArrayNotHasKey($this->fieldTestData->field_rev->getName(), $field_storage_definitions);
   }
 
 }
diff --git a/core/modules/field/tests/src/Kernel/EntityReference/EntityReferenceFormatterTest.php b/core/modules/field/tests/src/Kernel/EntityReference/EntityReferenceFormatterTest.php
index 3cf32050f1..ce44f31f07 100644
--- a/core/modules/field/tests/src/Kernel/EntityReference/EntityReferenceFormatterTest.php
+++ b/core/modules/field/tests/src/Kernel/EntityReference/EntityReferenceFormatterTest.php
@@ -187,7 +187,7 @@ public function testIdFormatter() {
 
     $this->assertEqual($build[0]['#plain_text'], $this->referencedEntity->id(), sprintf('The markup returned by the %s formatter is correct for an item with a saved entity.', $formatter));
     $this->assertEqual($build[0]['#cache']['tags'], $this->referencedEntity->getCacheTags(), sprintf('The %s formatter has the expected cache tags.', $formatter));
-    $this->assertTrue(!isset($build[1]), sprintf('The markup returned by the %s formatter is correct for an item with a unsaved entity.', $formatter));
+    $this->assertArrayNotHasKey(1, $build, sprintf('The markup returned by the %s formatter is correct for an item with a unsaved entity.', $formatter));
   }
 
   /**
diff --git a/core/modules/field/tests/src/Kernel/EntityReference/Views/EntityReferenceRelationshipTest.php b/core/modules/field/tests/src/Kernel/EntityReference/Views/EntityReferenceRelationshipTest.php
index 2ead85e261..65bc55ac54 100644
--- a/core/modules/field/tests/src/Kernel/EntityReference/Views/EntityReferenceRelationshipTest.php
+++ b/core/modules/field/tests/src/Kernel/EntityReference/Views/EntityReferenceRelationshipTest.php
@@ -359,8 +359,9 @@ public function testEntityReferenceConfigEntity() {
     $views_data = Views::viewsData()->getAll();
     // Test that a relationship got added for content entities but not config
     // entities.
-    $this->assertTrue(isset($views_data['entity_test__field_test_data']['field_test_data']['relationship']));
-    $this->assertFalse(isset($views_data['entity_test__field_test_config_entity']['field_test_config_entity']['relationship']));
+    $this->assertArrayHasKey('relationship', $views_data['entity_test__field_test_data']['field_test_data']);
+    $this->assertNotNull($views_data['entity_test__field_test_data']['field_test_data']['relationship']);
+    $this->assertArrayNotHasKey('relationship', $views_data['entity_test__field_test_config_entity']['field_test_config_entity']);
   }
 
 }
diff --git a/core/modules/field/tests/src/Kernel/FieldAttachOtherTest.php b/core/modules/field/tests/src/Kernel/FieldAttachOtherTest.php
index 8d3284db24..5b34cf68ed 100644
--- a/core/modules/field/tests/src/Kernel/FieldAttachOtherTest.php
+++ b/core/modules/field/tests/src/Kernel/FieldAttachOtherTest.php
@@ -285,7 +285,7 @@ public function testEntityFormDisplayBuildForm() {
     $form_state = new FormState();
     $display->buildForm($entity, $form, $form_state);
 
-    $this->assertFalse(isset($form[$this->fieldTestData->field_name]), 'The first field does not exist in the form');
+    $this->assertArrayNotHasKey($this->fieldTestData->field_name, $form);
     $this->assertEqual($form[$this->fieldTestData->field_name_2]['widget']['#title'], $this->fieldTestData->field_2->getLabel(), "Second field's form title is {$this->fieldTestData->field_2->getLabel()}");
     for ($delta = 0; $delta < $this->fieldTestData->field_storage_2->getCardinality(); $delta++) {
       // field_test_widget uses 'textfield'
diff --git a/core/modules/field/tests/src/Kernel/FieldCrudTest.php b/core/modules/field/tests/src/Kernel/FieldCrudTest.php
index dd40dcff59..3e7746c863 100644
--- a/core/modules/field/tests/src/Kernel/FieldCrudTest.php
+++ b/core/modules/field/tests/src/Kernel/FieldCrudTest.php
@@ -79,7 +79,7 @@ public function testCreateField() {
     $field_type_manager = \Drupal::service('plugin.manager.field.field_type');
 
     $this->assertTrue($config['settings']['config_data_from_field_setting']);
-    $this->assertTrue(!isset($config['settings']['field_setting_from_config_data']));
+    $this->assertArrayNotHasKey('field_setting_from_config_data', $config['settings']);
 
     // Since we are working with raw configuration, this needs to be unset
     // manually.
diff --git a/core/modules/field/tests/src/Kernel/FieldImportCreateTest.php b/core/modules/field/tests/src/Kernel/FieldImportCreateTest.php
index c7138e0e6a..bc4b40b454 100644
--- a/core/modules/field/tests/src/Kernel/FieldImportCreateTest.php
+++ b/core/modules/field/tests/src/Kernel/FieldImportCreateTest.php
@@ -59,14 +59,17 @@ public function testImportCreateDefault() {
       ->condition('bundle', 'entity_test')
       ->execute();
     $this->assertCount(2, $ids);
-    $this->assertTrue(isset($ids['entity_test.entity_test.field_test_import']));
-    $this->assertTrue(isset($ids['entity_test.entity_test.field_test_import_2']));
+    $this->assertArrayHasKey('entity_test.entity_test.field_test_import', $ids);
+    $this->assertNotNull($ids['entity_test.entity_test.field_test_import']);
+    $this->assertArrayHasKey('entity_test.entity_test.field_test_import_2', $ids);
+    $this->assertNotNull($ids['entity_test.entity_test.field_test_import_2']);
     $ids = \Drupal::entityQuery('field_config')
       ->condition('entity_type', 'entity_test')
       ->condition('bundle', 'test_bundle')
       ->execute();
     $this->assertCount(1, $ids);
-    $this->assertTrue(isset($ids['entity_test.test_bundle.field_test_import_2']));
+    $this->assertArrayHasKey('entity_test.test_bundle.field_test_import_2', $ids);
+    $this->assertNotNull($ids['entity_test.test_bundle.field_test_import_2']);
   }
 
   /**
diff --git a/core/modules/field/tests/src/Kernel/FieldImportDeleteTest.php b/core/modules/field/tests/src/Kernel/FieldImportDeleteTest.php
index 5282923131..bf04c05277 100644
--- a/core/modules/field/tests/src/Kernel/FieldImportDeleteTest.php
+++ b/core/modules/field/tests/src/Kernel/FieldImportDeleteTest.php
@@ -108,8 +108,9 @@ public function testImportDelete() {
 
     // Check that only the first storage definition is preserved in state.
     $deleted_storages = \Drupal::state()->get('field.storage.deleted', []);
-    $this->assertTrue(isset($deleted_storages[$field_storage_uuid]));
-    $this->assertFalse(isset($deleted_storages[$field_storage_uuid_2]));
+    $this->assertArrayHasKey($field_storage_uuid, $deleted_storages);
+    $this->assertNotNull($deleted_storages[$field_storage_uuid]);
+    $this->assertArrayNotHasKey($field_storage_uuid_2, $deleted_storages);
 
     // Purge field data, and check that the storage definition has been
     // completely removed once the data is purged.
diff --git a/core/modules/field/tests/src/Kernel/FieldImportDeleteUninstallTest.php b/core/modules/field/tests/src/Kernel/FieldImportDeleteUninstallTest.php
index 095a2cdcd5..3cd7c4191f 100644
--- a/core/modules/field/tests/src/Kernel/FieldImportDeleteUninstallTest.php
+++ b/core/modules/field/tests/src/Kernel/FieldImportDeleteUninstallTest.php
@@ -102,8 +102,9 @@ public function testImportDeleteUninstall() {
     $this->assertFalse(\Drupal::moduleHandler()->moduleExists('telephone'));
     $this->assertNull(\Drupal::service('entity.repository')->loadEntityByUuid('field_storage_config', $field_storage->uuid()), 'The test field has been deleted by the configuration synchronization');
     $deleted_storages = \Drupal::state()->get('field.storage.deleted', []);
-    $this->assertFalse(isset($deleted_storages[$field_storage->uuid()]), 'Telephone field has been completed removed from the system.');
-    $this->assertTrue(isset($deleted_storages[$unrelated_field_storage->uuid()]), 'Unrelated field not purged by configuration synchronization.');
+    $this->assertArrayNotHasKey($field_storage->uuid(), $deleted_storages);
+    $this->assertArrayHasKey($unrelated_field_storage->uuid(), $deleted_storages);
+    $this->assertNotNull($deleted_storages[$unrelated_field_storage->uuid()]);
   }
 
   /**
@@ -151,7 +152,10 @@ public function testImportAlreadyDeletedUninstall() {
     $sync->write('core.extension', $core_extension);
 
     $deleted_storages = \Drupal::state()->get('field.storage.deleted', []);
-    $this->assertTrue(isset($deleted_storages[$field_storage_uuid]), 'Field has been deleted and needs purging before configuration synchronization.');
+    // Verify that field has been deleted and needs purging before configuration
+    // synchronization.
+    $this->assertArrayHasKey($field_storage_uuid, $deleted_storages);
+    $this->assertNotNull($deleted_storages[$field_storage_uuid]);
 
     $steps = $this->configImporter()->initialize();
     $this->assertIdentical($steps[0], ['\Drupal\field\ConfigImporterFieldPurger', 'process'], 'The additional process configuration synchronization step has been added.');
@@ -162,7 +166,8 @@ public function testImportAlreadyDeletedUninstall() {
 
     $this->assertFalse(\Drupal::moduleHandler()->moduleExists('telephone'));
     $deleted_storages = \Drupal::state()->get('field.storage.deleted', []);
-    $this->assertFalse(isset($deleted_storages[$field_storage_uuid]), 'Field has been completed removed from the system.');
+    // Verify that field has been completed removed from the system.
+    $this->assertArrayNotHasKey($field_storage_uuid, $deleted_storages);
   }
 
 }
diff --git a/core/modules/field/tests/src/Kernel/FieldStorageCrudTest.php b/core/modules/field/tests/src/Kernel/FieldStorageCrudTest.php
index 362bb85084..b4d4b4ff88 100644
--- a/core/modules/field/tests/src/Kernel/FieldStorageCrudTest.php
+++ b/core/modules/field/tests/src/Kernel/FieldStorageCrudTest.php
@@ -55,7 +55,7 @@ public function testCreate() {
     $field_storage_config = $this->config('field.storage.' . $field_storage->id())->get();
 
     $this->assertTrue($field_storage_config['settings']['config_data_from_storage_setting']);
-    $this->assertTrue(!isset($field_storage_config['settings']['storage_setting_from_config_data']));
+    $this->assertArrayNotHasKey('storage_setting_from_config_data', $field_storage_config['settings']);
 
     // Since we are working with raw configuration, this needs to be unset
     // manually.
diff --git a/core/modules/field/tests/src/Kernel/Migrate/d6/MigrateFieldFormatterSettingsTest.php b/core/modules/field/tests/src/Kernel/Migrate/d6/MigrateFieldFormatterSettingsTest.php
index d93d79b49a..fe2f13be0e 100644
--- a/core/modules/field/tests/src/Kernel/Migrate/d6/MigrateFieldFormatterSettingsTest.php
+++ b/core/modules/field/tests/src/Kernel/Migrate/d6/MigrateFieldFormatterSettingsTest.php
@@ -75,11 +75,16 @@ public function testEntityDisplaySettings() {
 
     // Check that we can migrate multiple fields.
     $content = $display->get('content');
-    $this->assertTrue(isset($content['field_test']), 'Settings for field_test exist.');
-    $this->assertTrue(isset($content['field_test_two']), "Settings for field_test_two exist.");
+    // Verify that settings for field_test exist.
+    $this->assertArrayHasKey('field_test', $content);
+    $this->assertNotNull($content['field_test']);
+    // Verify that settings for field_test_two exist.
+    $this->assertArrayHasKey('field_test_two', $content);
+    $this->assertNotNull($content['field_test_two']);
 
     // Check that we can migrate a field where exclude is not set.
-    $this->assertTrue(isset($content['field_test_exclude_unset']), "Settings for field_test_exclude_unset exist.");
+    $this->assertArrayHasKey('field_test_exclude_unset', $content);
+    $this->assertNotNull($content['field_test_exclude_unset']);
 
     // Test the number field formatter settings are correct.
     $expected['weight'] = 1;
diff --git a/core/modules/field/tests/src/Kernel/String/RawStringFormatterTest.php b/core/modules/field/tests/src/Kernel/String/RawStringFormatterTest.php
index f8dcde2612..8e761520af 100644
--- a/core/modules/field/tests/src/Kernel/String/RawStringFormatterTest.php
+++ b/core/modules/field/tests/src/Kernel/String/RawStringFormatterTest.php
@@ -122,7 +122,7 @@ public function testStringFormatter() {
 
     // Verify the cache tags.
     $build = $entity->{$this->fieldName}->view();
-    $this->assertTrue(!isset($build[0]['#cache']), 'The string formatter has no cache tags.');
+    $this->assertArrayNotHasKey('#cache', $build[0], 'The string formatter has no cache tags.');
   }
 
 }
diff --git a/core/modules/field/tests/src/Kernel/String/StringFormatterTest.php b/core/modules/field/tests/src/Kernel/String/StringFormatterTest.php
index e018e6c0c1..c2291d3a6a 100644
--- a/core/modules/field/tests/src/Kernel/String/StringFormatterTest.php
+++ b/core/modules/field/tests/src/Kernel/String/StringFormatterTest.php
@@ -132,7 +132,7 @@ public function testStringFormatter() {
 
     // Verify the cache tags.
     $build = $entity->{$this->fieldName}->view();
-    $this->assertTrue(!isset($build[0]['#cache']), 'The string formatter has no cache tags.');
+    $this->assertArrayNotHasKey('#cache', $build[0], 'The string formatter has no cache tags.');
 
     $value = $this->randomMachineName();
     $entity->{$this->fieldName}->value = $value;
diff --git a/core/modules/field_ui/tests/src/Functional/FieldUIDeleteTest.php b/core/modules/field_ui/tests/src/Functional/FieldUIDeleteTest.php
index 156664f00f..8b5219e285 100644
--- a/core/modules/field_ui/tests/src/Functional/FieldUIDeleteTest.php
+++ b/core/modules/field_ui/tests/src/Functional/FieldUIDeleteTest.php
@@ -127,7 +127,9 @@ public function testDeleteField() {
 
     $xml = $this->cssSelect('#edit-entity-deletes');
     // Test that nothing is scheduled for deletion.
-    $this->assertFalse(isset($xml[0]), 'The field currently being deleted is not shown in the entity deletions.');
+    // Verify that the field currently being deleted is not shown in the entity
+    // deletions.
+    $this->assertArrayNotHasKey(0, $xml);
 
     // Delete the second field.
     $this->fieldUIDeleteField($bundle_path2, "node.$type_name2.$field_name", $field_label, $type_name2);
diff --git a/core/modules/field_ui/tests/src/Kernel/EntityDisplayTest.php b/core/modules/field_ui/tests/src/Kernel/EntityDisplayTest.php
index 2bc6f1f37b..f8f3ba6c99 100644
--- a/core/modules/field_ui/tests/src/Kernel/EntityDisplayTest.php
+++ b/core/modules/field_ui/tests/src/Kernel/EntityDisplayTest.php
@@ -328,11 +328,11 @@ public function testBaseFieldComponent() {
     $display->save();
     $config = $this->config('core.entity_view_display.' . $display->id());
     $data = $config->get();
-    $this->assertFalse(isset($data['content']['test_no_display']));
-    $this->assertFalse(isset($data['hidden']['test_no_display']));
+    $this->assertArrayNotHasKey('test_no_display', $data['content']);
+    $this->assertArrayNotHasKey('test_no_display', $data['hidden']);
     $this->assertEqual($data['content']['test_display_configurable'], $expected['test_display_configurable']);
-    $this->assertFalse(isset($data['content']['test_display_non_configurable']));
-    $this->assertFalse(isset($data['hidden']['test_display_non_configurable']));
+    $this->assertArrayNotHasKey('test_display_non_configurable', $data['content']);
+    $this->assertArrayNotHasKey('test_display_non_configurable', $data['hidden']);
 
     // Check that defaults are correctly filled when loading the display.
     $display = EntityViewDisplay::load($display->id());
diff --git a/core/modules/field_ui/tests/src/Kernel/EntityFormDisplayTest.php b/core/modules/field_ui/tests/src/Kernel/EntityFormDisplayTest.php
index d63f63c208..697ff09f48 100644
--- a/core/modules/field_ui/tests/src/Kernel/EntityFormDisplayTest.php
+++ b/core/modules/field_ui/tests/src/Kernel/EntityFormDisplayTest.php
@@ -165,11 +165,11 @@ public function testBaseFieldComponent() {
     $display->save();
     $config = $this->config('core.entity_form_display.' . $display->id());
     $data = $config->get();
-    $this->assertFalse(isset($data['content']['test_no_display']));
-    $this->assertFalse(isset($data['hidden']['test_no_display']));
+    $this->assertArrayNotHasKey('test_no_display', $data['content']);
+    $this->assertArrayNotHasKey('test_no_display', $data['hidden']);
     $this->assertEqual($data['content']['test_display_configurable'], $expected['test_display_configurable']);
-    $this->assertFalse(isset($data['content']['test_display_non_configurable']));
-    $this->assertFalse(isset($data['hidden']['test_display_non_configurable']));
+    $this->assertArrayNotHasKey('test_display_non_configurable', $data['content']);
+    $this->assertArrayNotHasKey('test_display_non_configurable', $data['hidden']);
 
     // Check that defaults are correctly filled when loading the display.
     $display = EntityFormDisplay::load($display->id());
diff --git a/core/modules/file/tests/src/Functional/FileFieldWidgetTest.php b/core/modules/file/tests/src/Functional/FileFieldWidgetTest.php
index e7b9c19c12..df5f42fc12 100644
--- a/core/modules/file/tests/src/Functional/FileFieldWidgetTest.php
+++ b/core/modules/file/tests/src/Functional/FileFieldWidgetTest.php
@@ -107,7 +107,8 @@ public function testSingleValuedWidget() {
     // Test label has correct 'for' attribute.
     $input = $this->xpath('//input[@name="files[' . $field_name . '_0]"]');
     $label = $this->xpath('//label[@for="' . $input[0]->getAttribute('id') . '"]');
-    $this->assertTrue(isset($label[0]), 'Label for upload found.');
+    $this->assertArrayHasKey(0, $label, 'Label for upload found.');
+    $this->assertNotNull($label[0]);
 
     // Save the node and ensure it does not have the file.
     $this->drupalPostForm(NULL, [], t('Save'));
diff --git a/core/modules/file/tests/src/Functional/SaveUploadFormTest.php b/core/modules/file/tests/src/Functional/SaveUploadFormTest.php
index bd7891920b..770678fa05 100644
--- a/core/modules/file/tests/src/Functional/SaveUploadFormTest.php
+++ b/core/modules/file/tests/src/Functional/SaveUploadFormTest.php
@@ -129,8 +129,10 @@ public function testNormal() {
 
     // Load both files using File::loadMultiple().
     $files = File::loadMultiple([$file1->id(), $file2->id()]);
-    $this->assertTrue(isset($files[$file1->id()]), 'File was loaded successfully');
-    $this->assertTrue(isset($files[$file2->id()]), 'File was loaded successfully');
+    $this->assertArrayHasKey($file1->id(), $files);
+    $this->assertNotNull($files[$file1->id()]);
+    $this->assertArrayHasKey($file2->id(), $files);
+    $this->assertNotNull($files[$file2->id()]);
 
     // Upload a third file to a subdirectory.
     $image3 = current($this->drupalGetTestFiles('image'));
diff --git a/core/modules/file/tests/src/Functional/SaveUploadTest.php b/core/modules/file/tests/src/Functional/SaveUploadTest.php
index c4d9ee49f3..d197fa3b86 100644
--- a/core/modules/file/tests/src/Functional/SaveUploadTest.php
+++ b/core/modules/file/tests/src/Functional/SaveUploadTest.php
@@ -122,8 +122,10 @@ public function testNormal() {
 
     // Load both files using File::loadMultiple().
     $files = File::loadMultiple([$file1->id(), $file2->id()]);
-    $this->assertTrue(isset($files[$file1->id()]), 'File was loaded successfully');
-    $this->assertTrue(isset($files[$file2->id()]), 'File was loaded successfully');
+    $this->assertArrayHasKey($file1->id(), $files);
+    $this->assertNotNull($files[$file1->id()]);
+    $this->assertArrayHasKey($file2->id(), $files);
+    $this->assertNotNull($files[$file2->id()]);
 
     // Upload a third file to a subdirectory.
     $image3 = current($this->drupalGetTestFiles('image'));
diff --git a/core/modules/file/tests/src/Kernel/UsageTest.php b/core/modules/file/tests/src/Kernel/UsageTest.php
index 043770fc13..fe51fa2cfe 100644
--- a/core/modules/file/tests/src/Kernel/UsageTest.php
+++ b/core/modules/file/tests/src/Kernel/UsageTest.php
@@ -45,8 +45,8 @@ public function testGetUsage() {
     $usage = $this->container->get('file.usage')->listUsage($file);
 
     $this->assertCount(2, $usage['testing'], 'Returned the correct number of items.');
-    $this->assertTrue(isset($usage['testing']['foo'][1]), 'Returned the correct id.');
-    $this->assertTrue(isset($usage['testing']['bar'][2]), 'Returned the correct id.');
+    $this->assertArrayHasKey(1, $usage['testing']['foo'], 'Returned the correct id.');
+    $this->assertArrayHasKey(2, $usage['testing']['bar'], 'Returned the correct id.');
     $this->assertEqual($usage['testing']['foo'][1], 1, 'Returned the correct count.');
     $this->assertEqual($usage['testing']['bar'][2], 2, 'Returned the correct count.');
   }
diff --git a/core/modules/filter/tests/src/Functional/FilterFormatAccessTest.php b/core/modules/filter/tests/src/Functional/FilterFormatAccessTest.php
index 16ca25643d..8ed2a51141 100644
--- a/core/modules/filter/tests/src/Functional/FilterFormatAccessTest.php
+++ b/core/modules/filter/tests/src/Functional/FilterFormatAccessTest.php
@@ -157,9 +157,10 @@ public function testFormatPermissions() {
     foreach ($elements as $element) {
       $options[$element->getValue()] = $element;
     }
-    $this->assertTrue(isset($options[$this->allowedFormat->id()]), 'The allowed text format appears as an option when adding a new node.');
-    $this->assertFalse(isset($options[$this->disallowedFormat->id()]), 'The disallowed text format does not appear as an option when adding a new node.');
-    $this->assertFalse(isset($options[filter_fallback_format()]), 'The fallback format does not appear as an option when adding a new node.');
+    $this->assertArrayHasKey($this->allowedFormat->id(), $options);
+    $this->assertNotNull($options[$this->allowedFormat->id()]);
+    $this->assertArrayNotHasKey($this->disallowedFormat->id(), $options);
+    $this->assertArrayNotHasKey(filter_fallback_format(), $options);
 
     // Check regular user access to the filter tips pages.
     $this->drupalGet('filter/tips/' . $this->allowedFormat->id());
diff --git a/core/modules/filter/tests/src/Kernel/FilterAPITest.php b/core/modules/filter/tests/src/Kernel/FilterAPITest.php
index 833e47491d..edcedc13f5 100644
--- a/core/modules/filter/tests/src/Kernel/FilterAPITest.php
+++ b/core/modules/filter/tests/src/Kernel/FilterAPITest.php
@@ -485,7 +485,10 @@ public function testDependencyRemoval() {
     // Use the get method to match the assert after the module has been
     // uninstalled.
     $filters = $filter_format->get('filters');
-    $this->assertTrue(isset($filters['filter_test_restrict_tags_and_attributes']), 'The filter plugin filter_test_restrict_tags_and_attributes is configured by the filtered_html filter format.');
+    // Verify that the filter plugin filter_test_restrict_tags_and_attributes is
+    // configured by the filtered_html filter format.
+    $this->assertArrayHasKey('filter_test_restrict_tags_and_attributes', $filters);
+    $this->assertNotNull($filters['filter_test_restrict_tags_and_attributes']);
 
     drupal_static_reset('filter_formats');
     \Drupal::entityTypeManager()->getStorage('filter_format')->resetCache();
@@ -507,7 +510,9 @@ public function testDependencyRemoval() {
     // Use the get method since the FilterFormat::filters() method only returns
     // existing plugins.
     $filters = $filter_format->get('filters');
-    $this->assertFalse(isset($filters['filter_test_restrict_tags_and_attributes']), 'The filter plugin filter_test_restrict_tags_and_attributes is not configured by the filtered_html filter format.');
+    // Verify that the filter plugin filter_test_restrict_tags_and_attributes is
+    // not configured by the filtered_html filter format.
+    $this->assertArrayNotHasKey('filter_test_restrict_tags_and_attributes', $filters);
   }
 
   /**
diff --git a/core/modules/filter/tests/src/Kernel/FilterCrudTest.php b/core/modules/filter/tests/src/Kernel/FilterCrudTest.php
index 83509ee176..1fa8918595 100644
--- a/core/modules/filter/tests/src/Kernel/FilterCrudTest.php
+++ b/core/modules/filter/tests/src/Kernel/FilterCrudTest.php
@@ -68,7 +68,7 @@ public function testTextFormatCrud() {
     $format->disable()->save();
 
     $formats = filter_formats();
-    $this->assertTrue(!isset($formats[$format->id()]), 'filter_formats: Disabled text format no longer exists.');
+    $this->assertArrayNotHasKey($format->id(), $formats, 'filter_formats: Disabled text format no longer exists.');
   }
 
   /**
diff --git a/core/modules/filter/tests/src/Kernel/Migrate/d6/MigrateFilterFormatTest.php b/core/modules/filter/tests/src/Kernel/Migrate/d6/MigrateFilterFormatTest.php
index 9e746b1c79..c37c5c5779 100644
--- a/core/modules/filter/tests/src/Kernel/Migrate/d6/MigrateFilterFormatTest.php
+++ b/core/modules/filter/tests/src/Kernel/Migrate/d6/MigrateFilterFormatTest.php
@@ -35,9 +35,9 @@ public function testFilterFormat() {
     $this->assertTrue($filters['filter_html']['status']);
 
     // These should be false by default.
-    $this->assertFalse(isset($filters['filter_html_escape']));
-    $this->assertFalse(isset($filters['filter_caption']));
-    $this->assertFalse(isset($filters['filter_html_image_secure']));
+    $this->assertArrayNotHasKey('filter_html_escape', $filters);
+    $this->assertArrayNotHasKey('filter_caption', $filters);
+    $this->assertArrayNotHasKey('filter_html_image_secure', $filters);
 
     // Check variables migrated into filter.
     $this->assertSame('<a href hreflang> <em> <strong> <cite> <code> <ul type> <ol start type> <li> <dl> <dt> <dd>', $filters['filter_html']['settings']['allowed_html']);
diff --git a/core/modules/forum/tests/src/Functional/ForumTest.php b/core/modules/forum/tests/src/Functional/ForumTest.php
index db6dc6fefe..e012e59776 100644
--- a/core/modules/forum/tests/src/Functional/ForumTest.php
+++ b/core/modules/forum/tests/src/Functional/ForumTest.php
@@ -375,7 +375,8 @@ private function doAdminTests($user) {
     $this->assertField('parent[]', 'Parent field found.');
     // Test relations widget exists.
     $relations_widget = $this->xpath("//details[@id='edit-relations']");
-    $this->assertTrue(isset($relations_widget[0]), 'Relations widget element found.');
+    $this->assertArrayHasKey(0, $relations_widget, 'Relations widget element found.');
+    $this->assertNotNull($relations_widget[0]);
   }
 
   /**
diff --git a/core/modules/image/tests/src/Functional/ImageAdminStylesTest.php b/core/modules/image/tests/src/Functional/ImageAdminStylesTest.php
index 6b94ca575c..ce42101176 100644
--- a/core/modules/image/tests/src/Functional/ImageAdminStylesTest.php
+++ b/core/modules/image/tests/src/Functional/ImageAdminStylesTest.php
@@ -168,12 +168,13 @@ public function testStyle() {
 
     // Assert that every effect was saved.
     foreach (array_keys($effect_edits) as $effect_name) {
-      $this->assertTrue(isset($uuids[$effect_name]), new FormattableMarkup(
+      $this->assertArrayHasKey($effect_name, $uuids, new FormattableMarkup(
         'A %effect_name effect was saved with ID %uuid',
         [
           '%effect_name' => $effect_name,
           '%uuid' => $uuids[$effect_name],
         ]));
+      $this->assertNotNull($uuids[$effect_name]);
     }
 
     // Image style overview form (ordering and renaming).
diff --git a/core/modules/image/tests/src/Functional/ImageFieldValidateTest.php b/core/modules/image/tests/src/Functional/ImageFieldValidateTest.php
index e02b0ed604..b8aca13807 100644
--- a/core/modules/image/tests/src/Functional/ImageFieldValidateTest.php
+++ b/core/modules/image/tests/src/Functional/ImageFieldValidateTest.php
@@ -180,11 +180,15 @@ public function testRequiredAttributes() {
     // Look for form-required for the alt text.
     $elements = $this->xpath('//label[@for="edit-' . $field_name . '-0-alt" and @class="js-form-required form-required"]/following-sibling::input[@id="edit-' . $field_name . '-0-alt"]');
 
-    $this->assertTrue(isset($elements[0]), 'Required marker is shown for the required alt text.');
+    // Verify that required marker is shown for the required alt text.
+    $this->assertArrayHasKey(0, $elements);
+    $this->assertNotNull($elements[0]);
 
     $elements = $this->xpath('//label[@for="edit-' . $field_name . '-0-title" and @class="js-form-required form-required"]/following-sibling::input[@id="edit-' . $field_name . '-0-title"]');
 
-    $this->assertTrue(isset($elements[0]), 'Required marker is shown for the required title text.');
+    // Verify that required marker is shown for the required title text.
+    $this->assertArrayHasKey(0, $elements);
+    $this->assertNotNull($elements[0]);
 
     $this->assertText(t('Alternative text field is required.'));
     $this->assertText(t('Title field is required.'));
diff --git a/core/modules/jsonapi/tests/src/Kernel/Normalizer/JsonApiDocumentTopLevelNormalizerTest.php b/core/modules/jsonapi/tests/src/Kernel/Normalizer/JsonApiDocumentTopLevelNormalizerTest.php
index 9ca239a615..3f31158dac 100644
--- a/core/modules/jsonapi/tests/src/Kernel/Normalizer/JsonApiDocumentTopLevelNormalizerTest.php
+++ b/core/modules/jsonapi/tests/src/Kernel/Normalizer/JsonApiDocumentTopLevelNormalizerTest.php
@@ -258,7 +258,7 @@ public function testNormalize() {
         'self' => ['href' => Url::fromUri('internal:/jsonapi/node/article/' . $this->node->uuid() . '/relationships/node_type', ['query' => ['resourceVersion' => 'id:' . $this->node->getRevisionId()]])->setAbsolute()->toString(TRUE)->getGeneratedUrl()],
       ],
     ], $normalized['data']['relationships']['node_type']);
-    $this->assertTrue(!isset($normalized['data']['attributes']['created']));
+    $this->assertArrayNotHasKey('created', $normalized['data']['attributes']);
     $this->assertEquals([
       'alt' => 'test alt',
       'title' => 'test title',
@@ -285,7 +285,7 @@ public function testNormalize() {
     $this->assertSame('taxonomy_term--tags', $normalized['included'][1]['type']);
     $this->assertSame($this->term1->label(), $normalized['included'][1]['attributes']['name']);
     $this->assertCount(12, $normalized['included'][1]['attributes']);
-    $this->assertTrue(!isset($normalized['included'][1]['attributes']['created']));
+    $this->assertArrayNotHasKey('created', $normalized['included'][1]['attributes']);
     // Make sure that the cache tags for the includes and the requested entities
     // are bubbling as expected.
     $this->assertSame(
diff --git a/core/modules/language/tests/src/Functional/LanguageNegotiationInfoTest.php b/core/modules/language/tests/src/Functional/LanguageNegotiationInfoTest.php
index 2a3c5d9c69..ab4748c60e 100644
--- a/core/modules/language/tests/src/Functional/LanguageNegotiationInfoTest.php
+++ b/core/modules/language/tests/src/Functional/LanguageNegotiationInfoTest.php
@@ -113,7 +113,9 @@ public function testInfoAlterations() {
     ]);
 
     $negotiation = $this->config('language.types')->get('negotiation.' . $type . '.enabled');
-    $this->assertFalse(isset($negotiation[$interface_method_id]), 'Interface language negotiation method removed from the stored settings.');
+    // Verify that interface language negotiation method removed from the stored
+    // settings.
+    $this->assertArrayNotHasKey($interface_method_id, $negotiation);
 
     $this->drupalGet('admin/config/regional/language/detection');
     $this->assertNoFieldByName($form_field, NULL, 'Interface language negotiation method unavailable.');
@@ -156,7 +158,9 @@ public function testInfoAlterations() {
     // Check that unavailable language negotiation methods are not present in
     // the negotiation settings.
     $negotiation = $this->config('language.types')->get('negotiation.' . $type . '.enabled');
-    $this->assertFalse(isset($negotiation[$test_method_id]), 'The disabled test language negotiation method is not part of the content language negotiation settings.');
+    // Verify that the disabled test language negotiation method is not part of
+    // the content language negotiation settings.
+    $this->assertArrayNotHasKey($test_method_id, $negotiation);
 
     // Check that configuration page presents the correct options and settings.
     $this->assertNoRaw(t('Test language detection'), 'No test language type configuration available.');
diff --git a/core/modules/language/tests/src/Functional/LanguageSwitchingTest.php b/core/modules/language/tests/src/Functional/LanguageSwitchingTest.php
index a45af25d06..ac94827d6b 100644
--- a/core/modules/language/tests/src/Functional/LanguageSwitchingTest.php
+++ b/core/modules/language/tests/src/Functional/LanguageSwitchingTest.php
@@ -276,12 +276,16 @@ public function testLanguageBodyClass() {
     // Check if the default (English) admin/config page has the right class.
     $this->drupalGet('admin/config');
     $class = $this->xpath('//body[contains(@class, :class)]', [':class' => $searched_class]);
-    $this->assertTrue(isset($class[0]), t('The path-admin class appears on default language.'));
+    // Verify that the path-admin class appears on default language.
+    $this->assertArrayHasKey(0, $class);
+    $this->assertNotNull($class[0]);
 
     // Check if the French admin/config page has the right class.
     $this->drupalGet('fr/admin/config');
     $class = $this->xpath('//body[contains(@class, :class)]', [':class' => $searched_class]);
-    $this->assertTrue(isset($class[0]), t('The path-admin class same as on default language.'));
+    // Verify that the path-admin class same as on default language.
+    $this->assertArrayHasKey(0, $class);
+    $this->assertNotNull($class[0]);
 
     // The testing profile sets the user/login page as the frontpage. That
     // redirects authenticated users to their profile page, so check with an
@@ -291,12 +295,17 @@ public function testLanguageBodyClass() {
     // Check if the default (English) frontpage has the right class.
     $this->drupalGet('<front>');
     $class = $this->xpath('//body[contains(@class, :class)]', [':class' => 'path-frontpage']);
-    $this->assertTrue(isset($class[0]), 'path-frontpage class found on the body tag');
+    // Verify that the path-frontpage class found on the body tag.
+    $this->assertArrayHasKey(0, $class);
+    $this->assertNotNull($class[0]);
 
     // Check if the French frontpage has the right class.
     $this->drupalGet('fr');
     $class = $this->xpath('//body[contains(@class, :class)]', [':class' => 'path-frontpage']);
-    $this->assertTrue(isset($class[0]), 'path-frontpage class found on the body tag with french as the active language');
+    // Verify that the path-frontpage class found on the body tag with french as
+    // the active language.
+    $this->assertArrayHasKey(0, $class);
+    $this->assertNotNull($class[0]);
 
   }
 
@@ -316,17 +325,20 @@ protected function doTestLanguageLinkActiveClassAuthenticated() {
     // Language code 'none' link should be active.
     $langcode = 'none';
     $links = $this->xpath('//a[@id = :id and @data-drupal-link-system-path = :path]', [':id' => 'no_lang_link', ':path' => $path]);
-    $this->assertTrue(isset($links[0]), t('A link generated by :function to the current :language page with langcode :langcode has the correct attributes that will allow the drupal.active-link library to mark it as active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertArrayHasKey(0, $links, t('A link generated by :function to the current :language page with langcode :langcode has the correct attributes that will allow the drupal.active-link library to mark it as active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertNotNull($links[0]);
 
     // Language code 'en' link should be active.
     $langcode = 'en';
     $links = $this->xpath('//a[@id = :id and @hreflang = :lang and @data-drupal-link-system-path = :path]', [':id' => 'en_link', ':lang' => 'en', ':path' => $path]);
-    $this->assertTrue(isset($links[0]), t('A link generated by :function to the current :language page with langcode :langcode has the correct attributes that will allow the drupal.active-link library to mark it as active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertArrayHasKey(0, $links, t('A link generated by :function to the current :language page with langcode :langcode has the correct attributes that will allow the drupal.active-link library to mark it as active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertNotNull($links[0]);
 
     // Language code 'fr' link should not be active.
     $langcode = 'fr';
     $links = $this->xpath('//a[@id = :id and @hreflang = :lang and @data-drupal-link-system-path = :path]', [':id' => 'fr_link', ':lang' => 'fr', ':path' => $path]);
-    $this->assertTrue(isset($links[0]), t('A link generated by :function to the current :language page with langcode :langcode has the correct attributes that will allow the drupal.active-link library to NOT mark it as active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertArrayHasKey(0, $links, t('A link generated by :function to the current :language page with langcode :langcode has the correct attributes that will allow the drupal.active-link library to NOT mark it as active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertNotNull($links[0]);
 
     // Verify that drupalSettings contains the correct values.
     $settings = $this->getDrupalSettings();
@@ -341,17 +353,20 @@ protected function doTestLanguageLinkActiveClassAuthenticated() {
     // Language code 'none' link should be active.
     $langcode = 'none';
     $links = $this->xpath('//a[@id = :id and @data-drupal-link-system-path = :path]', [':id' => 'no_lang_link', ':path' => $path]);
-    $this->assertTrue(isset($links[0]), t('A link generated by :function to the current :language page with langcode :langcode has the correct attributes that will allow the drupal.active-link library to mark it as active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertArrayHasKey(0, $links, t('A link generated by :function to the current :language page with langcode :langcode has the correct attributes that will allow the drupal.active-link library to mark it as active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertNotNull($links[0]);
 
     // Language code 'en' link should not be active.
     $langcode = 'en';
     $links = $this->xpath('//a[@id = :id and @hreflang = :lang and @data-drupal-link-system-path = :path]', [':id' => 'en_link', ':lang' => 'en', ':path' => $path]);
-    $this->assertTrue(isset($links[0]), t('A link generated by :function to the current :language page with langcode :langcode has the correct attributes that will allow the drupal.active-link library to NOT mark it as active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertArrayHasKey(0, $links, t('A link generated by :function to the current :language page with langcode :langcode has the correct attributes that will allow the drupal.active-link library to NOT mark it as active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertNotNull($links[0]);
 
     // Language code 'fr' link should be active.
     $langcode = 'fr';
     $links = $this->xpath('//a[@id = :id and @hreflang = :lang and @data-drupal-link-system-path = :path]', [':id' => 'fr_link', ':lang' => 'fr', ':path' => $path]);
-    $this->assertTrue(isset($links[0]), t('A link generated by :function to the current :language page with langcode :langcode has the correct attributes that will allow the drupal.active-link library to mark it as active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertArrayHasKey(0, $links, t('A link generated by :function to the current :language page with langcode :langcode has the correct attributes that will allow the drupal.active-link library to mark it as active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertNotNull($links[0]);
 
     // Verify that drupalSettings contains the correct values.
     $settings = $this->getDrupalSettings();
@@ -377,17 +392,20 @@ protected function doTestLanguageLinkActiveClassAnonymous() {
     // Language code 'none' link should be active.
     $langcode = 'none';
     $links = $this->xpath('//a[@id = :id and contains(@class, :class)]', [':id' => 'no_lang_link', ':class' => 'is-active']);
-    $this->assertTrue(isset($links[0]), t('A link generated by :function to the current :language page with langcode :langcode is marked active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertArrayHasKey(0, $links, t('A link generated by :function to the current :language page with langcode :langcode is marked active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertNotNull($links[0]);
 
     // Language code 'en' link should be active.
     $langcode = 'en';
     $links = $this->xpath('//a[@id = :id and contains(@class, :class)]', [':id' => 'en_link', ':class' => 'is-active']);
-    $this->assertTrue(isset($links[0]), t('A link generated by :function to the current :language page with langcode :langcode is marked active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertArrayHasKey(0, $links, t('A link generated by :function to the current :language page with langcode :langcode is marked active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertNotNull($links[0]);
 
     // Language code 'fr' link should not be active.
     $langcode = 'fr';
     $links = $this->xpath('//a[@id = :id and not(contains(@class, :class))]', [':id' => 'fr_link', ':class' => 'is-active']);
-    $this->assertTrue(isset($links[0]), t('A link generated by :function to the current :language page with langcode :langcode is NOT marked active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertArrayHasKey(0, $links, t('A link generated by :function to the current :language page with langcode :langcode is NOT marked active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertNotNull($links[0]);
 
     // Test links generated by the link generator on a French page.
     $current_language = 'French';
@@ -396,17 +414,20 @@ protected function doTestLanguageLinkActiveClassAnonymous() {
     // Language code 'none' link should be active.
     $langcode = 'none';
     $links = $this->xpath('//a[@id = :id and contains(@class, :class)]', [':id' => 'no_lang_link', ':class' => 'is-active']);
-    $this->assertTrue(isset($links[0]), t('A link generated by :function to the current :language page with langcode :langcode is marked active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertArrayHasKey(0, $links, t('A link generated by :function to the current :language page with langcode :langcode is marked active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertNotNull($links[0]);
 
     // Language code 'en' link should not be active.
     $langcode = 'en';
     $links = $this->xpath('//a[@id = :id and not(contains(@class, :class))]', [':id' => 'en_link', ':class' => 'is-active']);
-    $this->assertTrue(isset($links[0]), t('A link generated by :function to the current :language page with langcode :langcode is NOT marked active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertArrayHasKey(0, $links, t('A link generated by :function to the current :language page with langcode :langcode is NOT marked active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertNotNull($links[0]);
 
     // Language code 'fr' link should be active.
     $langcode = 'fr';
     $links = $this->xpath('//a[@id = :id and contains(@class, :class)]', [':id' => 'fr_link', ':class' => 'is-active']);
-    $this->assertTrue(isset($links[0]), t('A link generated by :function to the current :language page with langcode :langcode is marked active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertArrayHasKey(0, $links, t('A link generated by :function to the current :language page with langcode :langcode is marked active.', [':function' => $function_name, ':language' => $current_language, ':langcode' => $langcode]));
+    $this->assertNotNull($links[0]);
   }
 
   /**
diff --git a/core/modules/language/tests/src/Unit/LanguageNegotiationUrlTest.php b/core/modules/language/tests/src/Unit/LanguageNegotiationUrlTest.php
index eeea62f7ef..9e9c12580c 100644
--- a/core/modules/language/tests/src/Unit/LanguageNegotiationUrlTest.php
+++ b/core/modules/language/tests/src/Unit/LanguageNegotiationUrlTest.php
@@ -95,7 +95,7 @@ public function testPathPrefix($prefix, $prefixes, $expected_langcode) {
       $expected_cacheability->setCacheContexts(['languages:' . LanguageInterface::TYPE_URL]);
     }
     else {
-      $this->assertFalse(isset($options['prefix']));
+      $this->assertArrayNotHasKey('prefix', $options);
     }
     $this->assertEquals($expected_cacheability, $cacheability);
   }
diff --git a/core/modules/locale/tests/src/Functional/LocaleConfigTranslationTest.php b/core/modules/locale/tests/src/Functional/LocaleConfigTranslationTest.php
index 2f0edcf43d..bad352bd4f 100644
--- a/core/modules/locale/tests/src/Functional/LocaleConfigTranslationTest.php
+++ b/core/modules/locale/tests/src/Functional/LocaleConfigTranslationTest.php
@@ -139,7 +139,9 @@ public function testConfigTranslation() {
     $string = $this->storage->findString(['source' => 'Medium (220×220)', 'context' => '', 'type' => 'configuration']);
     $this->assertNotEmpty($string, 'Configuration strings have been created upon installation.');
     $locations = $string->getLocations();
-    $this->assertTrue(isset($locations['configuration']) && isset($locations['configuration']['image.style.medium']), 'Configuration string has been created with the right location');
+    $this->assertArrayHasKey('configuration', $locations);
+    $this->assertArrayHasKey('image.style.medium', $locations['configuration']);
+    $this->assertNotNull($locations['configuration']['image.style.medium'], 'Configuration string has been created with the right location');
 
     // Check the string is unique and has no translation yet.
     $translations = $this->storage->getTranslations(['language' => $this->langcode, 'type' => 'configuration', 'name' => 'image.style.medium']);
diff --git a/core/modules/locale/tests/src/Functional/LocaleJavascriptTranslationTest.php b/core/modules/locale/tests/src/Functional/LocaleJavascriptTranslationTest.php
index 3b40098974..ac22884ddd 100644
--- a/core/modules/locale/tests/src/Functional/LocaleJavascriptTranslationTest.php
+++ b/core/modules/locale/tests/src/Functional/LocaleJavascriptTranslationTest.php
@@ -100,11 +100,12 @@ public function testFileParsing() {
         $args = ['%source' => $str, '%context' => $context];
 
         // Make sure that the string was found in the file.
-        $this->assertTrue(isset($source_strings[$str]), new FormattableMarkup('Found source string: %source', $args));
+        $this->assertArrayHasKey($str, $source_strings, new FormattableMarkup('Found source string: %source', $args));
+        $this->assertNotNull($source_strings[$str]);
 
         // Make sure that the proper context was matched.
         $message = $context ? new FormattableMarkup('Context for %source is %context', $args) : new FormattableMarkup('Context for %source is blank', $args);
-        $this->assertTrue(isset($source_strings[$str]) && $source_strings[$str] === $context, $message);
+        $this->assertSame($context, $source_strings[$str], $message);
       }
 
       $this->assertSame(count($test_strings), count($source_strings), 'Found correct number of source strings.');
diff --git a/core/modules/locale/tests/src/Functional/LocaleUpdateTest.php b/core/modules/locale/tests/src/Functional/LocaleUpdateTest.php
index b3a6e26b43..46b6a837e1 100644
--- a/core/modules/locale/tests/src/Functional/LocaleUpdateTest.php
+++ b/core/modules/locale/tests/src/Functional/LocaleUpdateTest.php
@@ -329,9 +329,11 @@ public function testEnableUninstallModule() {
 
     // Check if the file data is removed from the database.
     $history = locale_translation_get_file_history();
-    $this->assertFalse(isset($history['locale_test_translate']), 'Project removed from the file history');
+    // Verify that project removed from the file history.
+    $this->assertArrayNotHasKey('locale_test_translate', $history);
     $projects = locale_translation_get_projects();
-    $this->assertFalse(isset($projects['locale_test_translate']), 'Project removed from the project list');
+    // Verify that project removed from the project list.
+    $this->assertArrayNotHasKey('locale_test_translate', $projects);
   }
 
   /**
diff --git a/core/modules/locale/tests/src/Kernel/LocaleStringTest.php b/core/modules/locale/tests/src/Kernel/LocaleStringTest.php
index b54b33b55d..bf0e6ee455 100644
--- a/core/modules/locale/tests/src/Kernel/LocaleStringTest.php
+++ b/core/modules/locale/tests/src/Kernel/LocaleStringTest.php
@@ -147,11 +147,17 @@ public function testStringSearchApi() {
     // Try quick search function with different field combinations.
     $langcode = 'es';
     $found = $this->storage->findTranslation(['language' => $langcode, 'source' => $source1->source, 'context' => $source1->context]);
-    $this->assertTrue($found && isset($found->language) && isset($found->translation) && !$found->isNew(), 'Translation not found searching by source and context.');
+    $this->assertNotNull($found);
+    $this->assertNotNull($found->language);
+    $this->assertNotNull($found->translation);
+    $this->assertFalse($found->isNew(), 'Translation not found searching by source and context.');
     $this->assertEquals($translate1[$langcode]->translation, $found->translation);
     // Now try a translation not found.
     $found = $this->storage->findTranslation(['language' => $langcode, 'source' => $source3->source, 'context' => $source3->context]);
-    $this->assertTrue($found && $found->lid == $source3->lid && !isset($found->translation) && $found->isNew());
+    $this->assertNotNull($found);
+    $this->assertEquals($source3->lid, $found->lid);
+    $this->assertNotNull($found->translation);
+    $this->assertTrue($found->isNew());
 
     // Load all translations. For next queries we'll be loading only translated
     // strings.
diff --git a/core/modules/menu_link_content/tests/src/Kernel/PathAliasMenuLinkContentTest.php b/core/modules/menu_link_content/tests/src/Kernel/PathAliasMenuLinkContentTest.php
index 0a7c9fbbcf..3c197f3132 100644
--- a/core/modules/menu_link_content/tests/src/Kernel/PathAliasMenuLinkContentTest.php
+++ b/core/modules/menu_link_content/tests/src/Kernel/PathAliasMenuLinkContentTest.php
@@ -82,7 +82,8 @@ public function testPathAliasChange() {
     // Delete the alias.
     $path_alias->delete();
     $tree = \Drupal::menuTree()->load('tools', new MenuTreeParameters());
-    $this->assertTrue(isset($tree[$menu_link_content->getPluginId()]));
+    $this->assertArrayHasKey($menu_link_content->getPluginId(), $tree);
+    $this->assertNotNull($tree[$menu_link_content->getPluginId()]);
     $this->assertEqual('', $tree[$menu_link_content->getPluginId()]->link->getRouteName());
     // Verify the plugin now references a path that does not match any route.
     $this->assertEqual('base:my-blog', $tree[$menu_link_content->getPluginId()]->link->getUrlObject()->getUri());
diff --git a/core/modules/node/tests/src/Functional/NodeBlockFunctionalTest.php b/core/modules/node/tests/src/Functional/NodeBlockFunctionalTest.php
index 54f11056e4..f3bd833a79 100644
--- a/core/modules/node/tests/src/Functional/NodeBlockFunctionalTest.php
+++ b/core/modules/node/tests/src/Functional/NodeBlockFunctionalTest.php
@@ -151,7 +151,8 @@ public function testRecentNodeBlock() {
 
     $block = Block::load($edit['id']);
     $visibility = $block->getVisibility();
-    $this->assertTrue(isset($visibility['node_type']['bundles']['article']), 'Visibility settings were saved to configuration');
+    $this->assertArrayHasKey('article', $visibility['node_type']['bundles'], 'Visibility settings were saved to configuration');
+    $this->assertNotNull($visibility['node_type']['bundles']['article'], 'Visibility settings were saved to configuration');
 
     // Create a page node.
     $node5 = $this->drupalCreateNode(['uid' => $this->adminUser->id(), 'type' => 'page']);
diff --git a/core/modules/node/tests/src/Functional/NodeCreationTest.php b/core/modules/node/tests/src/Functional/NodeCreationTest.php
index 33c87ede1e..cd99f7224e 100644
--- a/core/modules/node/tests/src/Functional/NodeCreationTest.php
+++ b/core/modules/node/tests/src/Functional/NodeCreationTest.php
@@ -64,7 +64,7 @@ public function testNodeCreation() {
 
     // Verify that the creation message contains a link to a node.
     $view_link = $this->xpath('//div[@class="messages"]//a[contains(@href, :href)]', [':href' => 'node/']);
-    $this->assert(isset($view_link), 'The message area contains a link to a node');
+    $this->assertNotNull($view_link, 'The message area contains a link to a node');
 
     // Check that the node exists in the database.
     $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
@@ -155,7 +155,7 @@ public function testUnpublishedNodeCreation() {
 
     // Verify that the creation message contains a link to a node.
     $view_link = $this->xpath('//div[@class="messages"]//a[contains(@href, :href)]', [':href' => 'node/']);
-    $this->assert(isset($view_link), 'The message area contains a link to a node');
+    $this->assertNotNull($view_link, 'The message area contains a link to a node');
   }
 
   /**
diff --git a/core/modules/node/tests/src/Functional/NodeLoadMultipleTest.php b/core/modules/node/tests/src/Functional/NodeLoadMultipleTest.php
index 9eb63723d6..bc974b2d17 100644
--- a/core/modules/node/tests/src/Functional/NodeLoadMultipleTest.php
+++ b/core/modules/node/tests/src/Functional/NodeLoadMultipleTest.php
@@ -57,9 +57,12 @@ public function testNodeMultipleLoad() {
     // Load nodes by nid. Nodes 1, 2 and 4 will be loaded.
     $nodes = Node::loadMultiple([1, 2, 4]);
     $this->assertCount(3, $nodes);
-    $this->assertTrue(isset($nodes[$node1->id()]), 'Node is correctly keyed in the array');
-    $this->assertTrue(isset($nodes[$node2->id()]), 'Node is correctly keyed in the array');
-    $this->assertTrue(isset($nodes[$node4->id()]), 'Node is correctly keyed in the array');
+    $this->assertArrayHasKey($node1->id(), $nodes);
+    $this->assertNotNull($nodes[$node1->id()]);
+    $this->assertArrayHasKey($node2->id(), $nodes);
+    $this->assertNotNull($nodes[$node2->id()]);
+    $this->assertArrayHasKey($node4->id(), $nodes);
+    $this->assertNotNull($nodes[$node4->id()]);
     foreach ($nodes as $node) {
       $this->assertIsObject($node);
     }
diff --git a/core/modules/node/tests/src/Functional/NodeTranslationUITest.php b/core/modules/node/tests/src/Functional/NodeTranslationUITest.php
index fd4203b915..0cb87b1209 100644
--- a/core/modules/node/tests/src/Functional/NodeTranslationUITest.php
+++ b/core/modules/node/tests/src/Functional/NodeTranslationUITest.php
@@ -421,7 +421,8 @@ protected function doTestAlternateHreflangLinks(Node $node) {
           $links = $this->xpath('head/link[@rel = "alternate" and @href = :href and @hreflang = :hreflang]',
              [':href' => $language_url->toString(), ':hreflang' => $alternate_langcode]);
           if ($translations[$alternate_langcode]->isPublished()) {
-            $this->assert(isset($links[0]), new FormattableMarkup('The %langcode node translation has the correct alternate hreflang link for %alternate_langcode: %link.', ['%langcode' => $langcode, '%alternate_langcode' => $alternate_langcode, '%link' => $url->toString()]));
+            $this->assertArrayHasKey(0, $links);
+            $this->assertNotNull($links[0], new FormattableMarkup('The %langcode node translation has the correct alternate hreflang link for %alternate_langcode: %link.', ['%langcode' => $langcode, '%alternate_langcode' => $alternate_langcode, '%link' => $url->toString()]));
           }
           else {
             $this->assertFalse(isset($links[0]), new FormattableMarkup('The %langcode node translation has an hreflang link for unpublished %alternate_langcode translation: %link.', ['%langcode' => $langcode, '%alternate_langcode' => $alternate_langcode, '%link' => $url->toString()]));
diff --git a/core/modules/node/tests/src/Functional/NodeTypeTest.php b/core/modules/node/tests/src/Functional/NodeTypeTest.php
index 312756e957..d0af4a77f8 100644
--- a/core/modules/node/tests/src/Functional/NodeTypeTest.php
+++ b/core/modules/node/tests/src/Functional/NodeTypeTest.php
@@ -38,9 +38,12 @@ class NodeTypeTest extends NodeTestBase {
   public function testNodeTypeGetFunctions() {
     $node_types = NodeType::loadMultiple();
     $node_names = node_type_get_names();
-
-    $this->assertTrue(isset($node_types['article']), 'Node type article is available.');
-    $this->assertTrue(isset($node_types['page']), 'Node type basic page is available.');
+    // Verify that node type article is available.
+    $this->assertArrayHasKey('article', $node_types);
+    $this->assertNotNull($node_types['article']);
+    // Verify that node type basic page is available.
+    $this->assertArrayHasKey('page', $node_types);
+    $this->assertNotNull($node_types['page']);
 
     $this->assertEqual($node_types['article']->label(), $node_names['article'], 'Correct node type base has been returned.');
 
diff --git a/core/modules/rest/tests/src/Functional/Views/StyleSerializerTest.php b/core/modules/rest/tests/src/Functional/Views/StyleSerializerTest.php
index f2e919a7e7..b723089750 100644
--- a/core/modules/rest/tests/src/Functional/Views/StyleSerializerTest.php
+++ b/core/modules/rest/tests/src/Functional/Views/StyleSerializerTest.php
@@ -575,7 +575,8 @@ public function testFieldRawOutput() {
     $view->save();
     $this->executeView($view);
     foreach (Json::decode($this->drupalGet('test/serialize/field', ['query' => ['_format' => 'json']])) as $index => $values) {
-      $this->assertTrue(!isset($values['created']), 'Excluded value not found.');
+      // Verify that excluded value not found.
+      $this->assertArrayNotHasKey('created', $values);
     }
     // Test that the excluded field is not shown in the row options.
     $this->drupalGet('admin/structure/views/nojs/display/test_serializer_display_field/rest_export_1/row_options');
@@ -611,7 +612,8 @@ public function testLivePreview() {
 
     $build = $view->preview();
     $rendered_json = $build['#plain_text'];
-    $this->assertTrue(!isset($build['#markup']) && $rendered_json == $expected, 'Ensure the previewed json is escaped.');
+    $this->assertArrayNotHasKey('#markup', $build[], 'Ensure the previewed json is escaped.');
+    $this->assertEquals($expected, $rendered_json, 'Ensure the previewed json is escaped.');
     $view->destroy();
 
     $expected = $serializer->serialize($entities, 'xml');
diff --git a/core/modules/search/tests/src/Functional/SearchAdvancedSearchFormTest.php b/core/modules/search/tests/src/Functional/SearchAdvancedSearchFormTest.php
index 6236fd27ea..b7f6786178 100644
--- a/core/modules/search/tests/src/Functional/SearchAdvancedSearchFormTest.php
+++ b/core/modules/search/tests/src/Functional/SearchAdvancedSearchFormTest.php
@@ -102,11 +102,17 @@ public function testFormRefill() {
     foreach ($edit as $key => $value) {
       if ($key != 'type[page]') {
         $elements = $this->xpath('//input[@name=:name]', [':name' => $key]);
-        $this->assertTrue(isset($elements[0]) && $elements[0]->getValue() == $value, "Field $key is set to $value");
+        // Verify that field $key is set to $value.
+        $this->assertArrayHasKey(0, $elements);
+        $this->assertNotNull($elements[0]);
+        $this->assertEquals($value, $elements[0]->getValue(), "Field $key is set to $value");
       }
       else {
         $elements = $this->xpath('//input[@name=:name]', [':name' => $key]);
-        $this->assertTrue(isset($elements[0]) && !empty($elements[0]->getAttribute('checked')), "Field $key is checked");
+        // Verify that field $key is checked.
+        $this->assertArrayHasKey(0, $elements);
+        $this->assertNotNull($elements[0]);
+        $this->assertNotEmpty($elements[0]->getAttribute('checked'), "Field $key is checked"); 
       }
     }
 
diff --git a/core/modules/shortcut/tests/src/Functional/ShortcutSetsTest.php b/core/modules/shortcut/tests/src/Functional/ShortcutSetsTest.php
index da460695c0..93443d4c7e 100644
--- a/core/modules/shortcut/tests/src/Functional/ShortcutSetsTest.php
+++ b/core/modules/shortcut/tests/src/Functional/ShortcutSetsTest.php
@@ -190,7 +190,7 @@ public function testShortcutSetDelete() {
 
     $this->drupalPostForm('admin/config/user-interface/shortcut/manage/' . $new_set->id() . '/delete', [], t('Delete'));
     $sets = ShortcutSet::loadMultiple();
-    $this->assertFalse(isset($sets[$new_set->id()]), 'Successfully deleted a shortcut set.');
+    $this->assertArrayNotHasKey($new_set->id(), $sets);
   }
 
   /**
@@ -208,7 +208,9 @@ public function testShortcutSetCreateWithSetName() {
     $random_name = $this->randomMachineName();
     $new_set = $this->generateShortcutSet($random_name, $random_name);
     $sets = ShortcutSet::loadMultiple();
-    $this->assertTrue(isset($sets[$random_name]), 'Successfully created a shortcut set with a defined set name.');
+    // Verify that successfully created a shortcut set with a defined set name.
+    $this->assertArrayHasKey($random_name, $sets);
+    $this->assertNotNull($sets[$random_name]);
     $this->drupalGet('user/' . $this->adminUser->id() . '/shortcuts');
     $this->assertText($new_set->label(), 'Generated shortcut set was listed as a choice on the user account page.');
   }
diff --git a/core/modules/statistics/tests/src/Functional/StatisticsLoggingTest.php b/core/modules/statistics/tests/src/Functional/StatisticsLoggingTest.php
index 23b810d080..9ed658a859 100644
--- a/core/modules/statistics/tests/src/Functional/StatisticsLoggingTest.php
+++ b/core/modules/statistics/tests/src/Functional/StatisticsLoggingTest.php
@@ -106,13 +106,15 @@ public function testLogging() {
     $this->drupalGet('node');
     $settings = $this->getDrupalSettings();
     $this->assertSession()->responseNotMatches($expected_library, 'Statistics library JS not found on node page.');
-    $this->assertFalse(isset($settings['statistics']), 'Statistics settings not found on node page.');
+    // Verify that statistics settings not found on node page.
+    $this->assertArrayNotHasKey('statistics', $settings);
 
     // Verify that logging scripts are not found on a non-existent node page.
     $this->drupalGet('node/9999');
     $settings = $this->getDrupalSettings();
     $this->assertSession()->responseNotMatches($expected_library, 'Statistics library JS not found on non-existent node page.');
-    $this->assertFalse(isset($settings['statistics']), 'Statistics settings not found on node page.');
+    // Verify that statistics settings not found on node page.
+    $this->assertArrayNotHasKey('statistics', $settings);
 
     // Verify that logging scripts are found on a valid node page.
     $this->drupalGet($path);
diff --git a/core/modules/system/tests/src/Functional/Common/UrlTest.php b/core/modules/system/tests/src/Functional/Common/UrlTest.php
index 20686be4bd..e77d7ef3ae 100644
--- a/core/modules/system/tests/src/Functional/Common/UrlTest.php
+++ b/core/modules/system/tests/src/Functional/Common/UrlTest.php
@@ -127,20 +127,39 @@ public function testLinkAttributes() {
 
     $this->drupalGet($path, $options_no_query);
     $links = $this->xpath('//a[@href = :href and contains(@class, :class)]', [':href' => Url::fromRoute('common_test.l_active_class', [], $options_no_query)->toString(), ':class' => 'is-active']);
-    $this->assertTrue(isset($links[0]), 'A link generated by the link generator to the current page is marked active.');
+    // Verify that a link generated by the link generator to the current page is
+    // marked active.
+    $this->assertArrayHasKey(0, $links);
+    $this->assertNotNull($links[0]);
 
     $links = $this->xpath('//a[@href = :href and not(contains(@class, :class))]', [':href' => Url::fromRoute('common_test.l_active_class', [], $options_query)->toString(), ':class' => 'is-active']);
-    $this->assertTrue(isset($links[0]), 'A link generated by the link generator to the current page with a query string when the current page has no query string is not marked active.');
+    // Verify that a link generated by the link generator to the current page
+    // with a query string when the current page has no query string is not
+    // marked active.
+    $this->assertArrayHasKey(0, $links);
+    $this->assertNotNull($links[0]);
 
     $this->drupalGet($path, $options_query);
     $links = $this->xpath('//a[@href = :href and contains(@class, :class)]', [':href' => Url::fromRoute('common_test.l_active_class', [], $options_query)->toString(), ':class' => 'is-active']);
-    $this->assertTrue(isset($links[0]), 'A link generated by the link generator to the current page with a query string that matches the current query string is marked active.');
+    // Verify that a link generated by the link generator to the current page
+    // with a query string that matches the current query string is marked
+    // active.
+    $this->assertArrayHasKey(0, $links);
+    $this->assertNotNull($links[0]);
 
     $links = $this->xpath('//a[@href = :href and contains(@class, :class)]', [':href' => Url::fromRoute('common_test.l_active_class', [], $options_query_reverse)->toString(), ':class' => 'is-active']);
-    $this->assertTrue(isset($links[0]), 'A link generated by the link generator to the current page with a query string that has matching parameters to the current query string but in a different order is marked active.');
+    // Verify that a link generated by the link generator to the current page
+    // with a query string that has matching parameters to the current query
+    // string but in a different order is marked active.
+    $this->assertArrayHasKey(0, $links);
+    $this->assertNotNull($links[0]);
 
     $links = $this->xpath('//a[@href = :href and not(contains(@class, :class))]', [':href' => Url::fromRoute('common_test.l_active_class', [], $options_no_query)->toString(), ':class' => 'is-active']);
-    $this->assertTrue(isset($links[0]), 'A link generated by the link generator to the current page without a query string when the current page has a query string is not marked active.');
+    // Verify that a link generated by the link generator to the current page
+    // without a query string when the current page has a query string is not
+    // marked active.
+    $this->assertArrayHasKey(0, $links);
+    $this->assertNotNull($links[0]);
 
     // Test adding a custom class in links produced by
     // \Drupal\Core\Utility\LinkGeneratorInterface::generate() and #type 'link'.
diff --git a/core/modules/system/tests/src/Functional/Entity/EntityRevisionsTest.php b/core/modules/system/tests/src/Functional/Entity/EntityRevisionsTest.php
index 90bf02763e..7952132088 100644
--- a/core/modules/system/tests/src/Functional/Entity/EntityRevisionsTest.php
+++ b/core/modules/system/tests/src/Functional/Entity/EntityRevisionsTest.php
@@ -170,7 +170,7 @@ protected function runRevisionsTests($entity_type) {
       }
 
       // Check non-revisioned values are loaded.
-      $this->assertTrue(isset($entity_revision->created->value), new FormattableMarkup('%entity_type: Non-revisioned field is loaded.', ['%entity_type' => $entity_type]));
+      $this->assertNotNull($entity_revision->created->value, new FormattableMarkup('%entity_type: Non-revisioned field is loaded.', ['%entity_type' => $entity_type]));
       $this->assertEqual($entity_revision->created->value, $values['en'][2]['created'], new FormattableMarkup('%entity_type: Non-revisioned field value is the same between revisions.', ['%entity_type' => $entity_type]));
     }
 
diff --git a/core/modules/system/tests/src/Functional/Entity/EntityTranslationFormTest.php b/core/modules/system/tests/src/Functional/Entity/EntityTranslationFormTest.php
index 6975d1dd12..b6fee35841 100644
--- a/core/modules/system/tests/src/Functional/Entity/EntityTranslationFormTest.php
+++ b/core/modules/system/tests/src/Functional/Entity/EntityTranslationFormTest.php
@@ -100,7 +100,7 @@ public function testEntityFormLanguage() {
 
     // Verify that the creation message contains a link to a node.
     $view_link = $this->xpath('//div[@class="messages"]//a[contains(@href, :href)]', [':href' => 'node/']);
-    $this->assert(isset($view_link), 'The message area contains a link to a node');
+    $this->assertNotNull($view_link, 'The message area contains a link to a node');
 
     // Check to make sure the node was created.
     $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
diff --git a/core/modules/system/tests/src/Functional/Form/ConfirmFormTest.php b/core/modules/system/tests/src/Functional/Form/ConfirmFormTest.php
index d28ccb6b20..ac85a1e2e0 100644
--- a/core/modules/system/tests/src/Functional/Form/ConfirmFormTest.php
+++ b/core/modules/system/tests/src/Functional/Form/ConfirmFormTest.php
@@ -85,7 +85,9 @@ public function testConfirmFormWithExternalDestination() {
   public function assertCancelLinkUrl(Url $url, $message = '', $group = 'Other') {
     $links = $this->xpath('//a[@href=:url]', [':url' => $url->toString()]);
     $message = ($message ? $message : new FormattableMarkup('Cancel link with URL %url found.', ['%url' => $url->toString()]));
-    return $this->assertTrue(isset($links[0]), $message, $group);
+    $this->assertArrayHasKey(0, $links, $message);
+    $this->assertNotNull($links[0]);
+    return TRUE;
   }
 
 }
diff --git a/core/modules/system/tests/src/Functional/Form/ElementsLabelsTest.php b/core/modules/system/tests/src/Functional/Form/ElementsLabelsTest.php
index ea9cc48ba2..8980e8ba71 100644
--- a/core/modules/system/tests/src/Functional/Form/ElementsLabelsTest.php
+++ b/core/modules/system/tests/src/Functional/Form/ElementsLabelsTest.php
@@ -34,60 +34,97 @@ public function testFormLabels() {
     // Check that the checkbox/radio processing is not interfering with
     // basic placement.
     $elements = $this->xpath('//input[@id="edit-form-checkboxes-test-third-checkbox"]/following-sibling::label[@for="edit-form-checkboxes-test-third-checkbox" and @class="option"]');
-    $this->assertTrue(isset($elements[0]), 'Label follows field and label option class correct for regular checkboxes.');
+    // Verify that label follows field and label option class correct for
+    // regular checkboxes.
+    $this->assertArrayHasKey(0, $elements);
+    $this->assertNotNull($elements[0]);
 
     // Make sure the label is rendered for checkboxes.
     $elements = $this->xpath('//input[@id="edit-form-checkboxes-test-0"]/following-sibling::label[@for="edit-form-checkboxes-test-0" and @class="option"]');
-    $this->assertTrue(isset($elements[0]), 'Label 0 found checkbox.');
+    // Verify that label 0 found checkbox.
+    $this->assertArrayHasKey(0, $elements);
+    $this->assertNotNull($elements[0]);
 
     $elements = $this->xpath('//input[@id="edit-form-radios-test-second-radio"]/following-sibling::label[@for="edit-form-radios-test-second-radio" and @class="option"]');
-    $this->assertTrue(isset($elements[0]), 'Label follows field and label option class correct for regular radios.');
+    // Verify that label follows field and label option class correct for
+    // regular radios.
+    $this->assertArrayHasKey(0, $elements);
+    $this->assertNotNull($elements[0]);
 
     // Make sure the label is rendered for radios.
     $elements = $this->xpath('//input[@id="edit-form-radios-test-0"]/following-sibling::label[@for="edit-form-radios-test-0" and @class="option"]');
-    $this->assertTrue(isset($elements[0]), 'Label 0 found radios.');
+    // Verify that label 0 found radios.
+    $this->assertArrayHasKey(0, $elements);
+    $this->assertNotNull($elements[0]);
 
     // Exercise various defaults for checkboxes and modifications to ensure
     // appropriate override and correct behavior.
     $elements = $this->xpath('//input[@id="edit-form-checkbox-test"]/following-sibling::label[@for="edit-form-checkbox-test" and @class="option"]');
-    $this->assertTrue(isset($elements[0]), 'Label follows field and label option class correct for a checkbox by default.');
+    // Verify that label follows field and label option class correct for a
+    // checkbox by default.
+    $this->assertArrayHasKey(0, $elements);
+    $this->assertNotNull($elements[0]);
 
     // Exercise various defaults for textboxes and modifications to ensure
     // appropriate override and correct behavior.
     $elements = $this->xpath('//label[@for="edit-form-textfield-test-title-and-required" and @class="js-form-required form-required"]/following-sibling::input[@id="edit-form-textfield-test-title-and-required"]');
-    $this->assertTrue(isset($elements[0]), 'Label precedes textfield, with required marker inside label.');
+    // Verify that label precedes textfield, with required marker inside label.
+    $this->assertArrayHasKey(0, $elements);
+    $this->assertNotNull($elements[0]);
 
     $elements = $this->xpath('//input[@id="edit-form-textfield-test-no-title-required"]/preceding-sibling::label[@for="edit-form-textfield-test-no-title-required" and @class="js-form-required form-required"]');
-    $this->assertTrue(isset($elements[0]), 'Label tag with required marker precedes required textfield with no title.');
+    // Verify that label tag with required marker precedes required textfield
+    // with no title.
+    $this->assertArrayHasKey(0, $elements);
+    $this->assertNotNull($elements[0]);
 
     $elements = $this->xpath('//input[@id="edit-form-textfield-test-title-invisible"]/preceding-sibling::label[@for="edit-form-textfield-test-title-invisible" and @class="visually-hidden"]');
-    $this->assertTrue(isset($elements[0]), 'Label preceding field and label class is visually-hidden.');
+    // Verify that label preceding field and label class is visually-hidden.
+    $this->assertArrayHasKey(0, $elements);
+    $this->assertNotNull($elements[0]);
 
     $elements = $this->xpath('//input[@id="edit-form-textfield-test-title"]/preceding-sibling::span[@class="js-form-required form-required"]');
-    $this->assertFalse(isset($elements[0]), 'No required marker on non-required field.');
+    // Verify that no required marker on non-required field.
+    $this->assertArrayNotHasKey(0, $elements);
 
     $elements = $this->xpath('//input[@id="edit-form-textfield-test-title-after"]/following-sibling::label[@for="edit-form-textfield-test-title-after" and @class="option"]');
-    $this->assertTrue(isset($elements[0]), 'Label after field and label option class correct for text field.');
+    // Verify that label after field and label option class correct for text
+    // field.
+    $this->assertArrayHasKey(0, $elements);
+    $this->assertNotNull($elements[0]);
 
     $elements = $this->xpath('//label[@for="edit-form-textfield-test-title-no-show"]');
-    $this->assertFalse(isset($elements[0]), 'No label tag when title set not to display.');
+    // Verify that no label tag when title set not to display.
+    $this->assertArrayNotHasKey(0, $elements);
 
     $elements = $this->xpath('//div[contains(@class, "js-form-item-form-textfield-test-title-invisible") and contains(@class, "form-no-label")]');
-    $this->assertTrue(isset($elements[0]), 'Field class is form-no-label when there is no label.');
+    // Verify that field class is form-no-label when there is no label.
+    $this->assertArrayHasKey(0, $elements);
+    $this->assertNotNull($elements[0]);
 
     // Check #field_prefix and #field_suffix placement.
     $elements = $this->xpath('//span[@class="field-prefix"]/following-sibling::div[@id="edit-form-radios-test"]');
-    $this->assertTrue(isset($elements[0]), 'Properly placed the #field_prefix element after the label and before the field.');
+    // Verify that properly placed the #field_prefix element after the label and
+    // before the field.
+    $this->assertArrayHasKey(0, $elements);
+    $this->assertNotNull($elements[0]);
 
     $elements = $this->xpath('//span[@class="field-suffix"]/preceding-sibling::div[@id="edit-form-radios-test"]');
-    $this->assertTrue(isset($elements[0]), 'Properly places the #field_suffix element immediately after the form field.');
+    // Verify that properly places the #field_suffix element immediately after
+    // the form field.
+    $this->assertArrayHasKey(0, $elements);
+    $this->assertNotNull($elements[0]);
 
     // Check #prefix and #suffix placement.
     $elements = $this->xpath('//div[@id="form-test-textfield-title-prefix"]/following-sibling::div[contains(@class, \'js-form-item-form-textfield-test-title\')]');
-    $this->assertTrue(isset($elements[0]), 'Properly places the #prefix element before the form item.');
+    // Verify that properly places the #prefix element before the form item.
+    $this->assertArrayHasKey(0, $elements);
+    $this->assertNotNull($elements[0]);
 
     $elements = $this->xpath('//div[@id="form-test-textfield-title-suffix"]/preceding-sibling::div[contains(@class, \'js-form-item-form-textfield-test-title\')]');
-    $this->assertTrue(isset($elements[0]), 'Properly places the #suffix element before the form item.');
+    // Verify that properly places the #suffix element before the form item.
+    $this->assertArrayHasKey(0, $elements);
+    $this->assertNotNull($elements[0]);
 
     // Check title attribute for radios and checkboxes.
     $elements = $this->xpath('//div[@id="edit-form-checkboxes-title-attribute"]');
@@ -123,13 +160,18 @@ public function testFormDescriptions() {
     $field_id = 'edit-form-textfield-test-description-after';
     $description_id = $field_id . '--description';
     $elements = $this->xpath('//input[@id="' . $field_id . '" and @aria-describedby="' . $description_id . '"]/following-sibling::div[@id="' . $description_id . '"]');
-    $this->assertTrue(isset($elements[0]), t('Properly places the #description element after the form item.'));
+    // Verify that properly places the #description element after the form item.
+    $this->assertArrayHasKey(0, $elements);
+    $this->assertNotNull($elements[0]);
 
     // Check #description placement with #description_display='before'.
     $field_id = 'edit-form-textfield-test-description-before';
     $description_id = $field_id . '--description';
     $elements = $this->xpath('//input[@id="' . $field_id . '" and @aria-describedby="' . $description_id . '"]/preceding-sibling::div[@id="' . $description_id . '"]');
-    $this->assertTrue(isset($elements[0]), t('Properly places the #description element before the form item.'));
+    // Verify that properly places the #description element before the form
+    // item.
+    $this->assertArrayHasKey(0, $elements);
+    $this->assertNotNull($elements[0]);
 
     // Check if the class is 'visually-hidden' on the form element description
     // for the option with #description_display='invisible' and also check that
@@ -137,7 +179,9 @@ public function testFormDescriptions() {
     $field_id = 'edit-form-textfield-test-description-invisible';
     $description_id = $field_id . '--description';
     $elements = $this->xpath('//input[@id="' . $field_id . '" and @aria-describedby="' . $description_id . '"]/following-sibling::div[contains(@class, "visually-hidden")]');
-    $this->assertTrue(isset($elements[0]), t('Properly renders the #description element visually-hidden.'));
+    // Verify that properly renders the #description element visually-hidden.
+    $this->assertArrayHasKey(0, $elements);
+    $this->assertNotNull($elements[0]);
   }
 
   /**
diff --git a/core/modules/system/tests/src/Functional/Form/ElementsTableSelectTest.php b/core/modules/system/tests/src/Functional/Form/ElementsTableSelectTest.php
index 91f7b2863c..cca038d07d 100644
--- a/core/modules/system/tests/src/Functional/Form/ElementsTableSelectTest.php
+++ b/core/modules/system/tests/src/Functional/Form/ElementsTableSelectTest.php
@@ -161,11 +161,14 @@ public function testMultipleTrueOptionchecker() {
 
     // Test with a valid value.
     list(, , $errors) = $this->formSubmitHelper($form, ['tableselect' => ['row1' => 'row1']]);
-    $this->assertFalse(isset($errors['tableselect']), 'Option checker allows valid values for checkboxes.');
+    // Verify that option checker allows valid values for checkboxes.
+    $this->assertArrayNotHasKey('tableselect', $errors);
 
     // Test with an invalid value.
     list(, , $errors) = $this->formSubmitHelper($form, ['tableselect' => ['non_existing_value' => 'non_existing_value']]);
-    $this->assertTrue(isset($errors['tableselect']), 'Option checker disallows invalid values for checkboxes.');
+    // Verify that option checker disallows invalid values for checkboxes.
+    $this->assertArrayHasKey('tableselect', $errors);
+    $this->assertNotNull($errors['tableselect']);
 
   }
 
@@ -185,11 +188,14 @@ public function testMultipleFalseOptionchecker() {
 
     // Test with a valid value.
     list(, , $errors) = $this->formSubmitHelper($form, ['tableselect' => 'row1']);
-    $this->assertFalse(isset($errors['tableselect']), 'Option checker allows valid values for radio buttons.');
+    // Verify that option checker allows valid values for radio buttons.
+    $this->assertArrayNotHasKey('tableselect', $errors);
 
     // Test with an invalid value.
     list(, , $errors) = $this->formSubmitHelper($form, ['tableselect' => 'non_existing_value']);
-    $this->assertTrue(isset($errors['tableselect']), 'Option checker disallows invalid values for radio buttons.');
+    // Verify that option checker disallows invalid values for radio buttons.
+    $this->assertArrayHasKey('tableselect', $errors);
+    $this->assertNotNull($errors['tableselect']);
   }
 
   /**
diff --git a/core/modules/system/tests/src/Functional/Form/ElementsVerticalTabsTest.php b/core/modules/system/tests/src/Functional/Form/ElementsVerticalTabsTest.php
index 443a9deaf6..fcc1ba4719 100644
--- a/core/modules/system/tests/src/Functional/Form/ElementsVerticalTabsTest.php
+++ b/core/modules/system/tests/src/Functional/Form/ElementsVerticalTabsTest.php
@@ -2,7 +2,6 @@
 
 namespace Drupal\Tests\system\Functional\Form;
 
-use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Serialization\Json;
 use Drupal\Tests\BrowserTestBase;
 
@@ -69,13 +68,17 @@ public function testWrapperNotShownWhenEmpty() {
     // Test admin user can see vertical tabs and wrapper.
     $this->drupalGet('form_test/vertical-tabs');
     $wrapper = $this->xpath("//div[@data-vertical-tabs-panes]");
-    $this->assertTrue(isset($wrapper[0]), 'Vertical tab panes found.');
+    // Verify that vertical tab panes found.
+    $this->assertArrayHasKey(0, $wrapper);
+    $this->assertNotNull($wrapper[0]);
 
     // Test wrapper markup not present for non-privileged web user.
     $this->drupalLogin($this->webUser);
     $this->drupalGet('form_test/vertical-tabs');
     $wrapper = $this->xpath("//div[@data-vertical-tabs-panes]");
-    $this->assertFalse(isset($wrapper[0]), 'Vertical tab wrappers are not displayed to unprivileged users.');
+    // Verify that vertical tab wrappers are not displayed to unprivileged
+    // users.
+    $this->assertArrayNotHasKey(0, $wrapper);
   }
 
   /**
@@ -96,7 +99,7 @@ public function testDefaultTab() {
    */
   public function testDefaultTabCleaned() {
     $values = Json::decode($this->drupalPostForm('form_test/form-state-values-clean', [], t('Submit')));
-    $this->assertFalse(isset($values['vertical_tabs__active_tab']), new FormattableMarkup('%element was removed.', ['%element' => 'vertical_tabs__active_tab']));
+    $this->assertArrayNotHasKey('vertical_tabs__active_tab', $values);
   }
 
 }
diff --git a/core/modules/system/tests/src/Functional/Form/FormTest.php b/core/modules/system/tests/src/Functional/Form/FormTest.php
index 505a7d0628..8e41327d50 100644
--- a/core/modules/system/tests/src/Functional/Form/FormTest.php
+++ b/core/modules/system/tests/src/Functional/Form/FormTest.php
@@ -131,7 +131,8 @@ public function testRequiredFields() {
           $form_output = ($type == 'radios') ? '' : \Drupal::service('renderer')->renderRoot($form);
           if ($required) {
             // Make sure we have a form error for this element.
-            $this->assertTrue(isset($errors[$element]), "Check empty($key) '$type' field '$element'");
+            $this->assertArrayHasKey($element, $errors, "Check empty($key) '$type' field '$element'");
+            $this->assertNotNull($errors[$element]);
             if (!empty($form_output)) {
               // Make sure the form element is marked as required.
               $this->assertRegExp($required_marker_preg, (string) $form_output, "Required '$type' field is marked as required");
@@ -852,7 +853,8 @@ public function testDisabledMarkup() {
         ':div-class' => $class,
         ':value' => isset($item['#value']) ? $item['#value'] : '',
       ]);
-      $this->assertTrue(isset($element[0]), new FormattableMarkup('Disabled form element class found for #type %type.', ['%type' => $item['#type']]));
+      $this->assertArrayHasKey(0, $element, new FormattableMarkup('Disabled form element class found for #type %type.', ['%type' => $item['#type']]));
+      $this->assertNotNull($element[0]);
     }
 
     // Verify special element #type text-format.
@@ -860,12 +862,14 @@ public function testDisabledMarkup() {
       ':name' => 'text_format[value]',
       ':div-class' => 'form-disabled',
     ]);
-    $this->assertTrue(isset($element[0]), new FormattableMarkup('Disabled form element class found for #type %type.', ['%type' => 'text_format[value]']));
+    $this->assertArrayHasKey(0, $element, new FormattableMarkup('Disabled form element class found for #type %type.', ['%type' => 'text_format[value]']));
+    $this->assertNotNull($element[0]);
     $element = $this->xpath('//div[contains(@class, :div-class)]/descendant::select[@name=:name]', [
       ':name' => 'text_format[format]',
       ':div-class' => 'form-disabled',
     ]);
-    $this->assertTrue(isset($element[0]), new FormattableMarkup('Disabled form element class found for #type %type.', ['%type' => 'text_format[format]']));
+    $this->assertArrayHasKey(0, $element, new FormattableMarkup('Disabled form element class found for #type %type.', ['%type' => 'text_format[format]']));
+    $this->assertNotNull($element[0]);
   }
 
   /**
diff --git a/core/modules/system/tests/src/Functional/Form/StateValuesCleanTest.php b/core/modules/system/tests/src/Functional/Form/StateValuesCleanTest.php
index 917ae1af90..d55a970f31 100644
--- a/core/modules/system/tests/src/Functional/Form/StateValuesCleanTest.php
+++ b/core/modules/system/tests/src/Functional/Form/StateValuesCleanTest.php
@@ -40,22 +40,23 @@ public function testFormStateValuesClean() {
     ];
 
     // Verify that all internal Form API elements were removed.
-    $this->assertFalse(isset($values['form_id']), new FormattableMarkup('%element was removed.', ['%element' => 'form_id']));
-    $this->assertFalse(isset($values['form_token']), new FormattableMarkup('%element was removed.', ['%element' => 'form_token']));
-    $this->assertFalse(isset($values['form_build_id']), new FormattableMarkup('%element was removed.', ['%element' => 'form_build_id']));
-    $this->assertFalse(isset($values['op']), new FormattableMarkup('%element was removed.', ['%element' => 'op']));
+    $this->assertArrayNotHasKey('form_id', $values);
+    $this->assertArrayNotHasKey('form_token', $values);
+    $this->assertArrayNotHasKey('form_build_id', $values);
+    $this->assertArrayNotHasKey('op', $values);
 
     // Verify that all buttons were removed.
-    $this->assertFalse(isset($values['foo']), new FormattableMarkup('%element was removed.', ['%element' => 'foo']));
-    $this->assertFalse(isset($values['bar']), new FormattableMarkup('%element was removed.', ['%element' => 'bar']));
+    $this->assertArrayNotHasKey('foo', $values);
+    $this->assertArrayNotHasKey('bar', $values);
     $this->assertFalse(isset($values['baz']['foo']), new FormattableMarkup('%element was removed.', ['%element' => 'foo']));
     $this->assertFalse(isset($values['baz']['baz']), new FormattableMarkup('%element was removed.', ['%element' => 'baz']));
 
     // Verify values manually added for cleaning were removed.
-    $this->assertFalse(isset($values['wine']), new FormattableMarkup('%element was removed.', ['%element' => 'wine']));
+    $this->assertArrayNotHasKey('wine', $values);
 
     // Verify that nested form value still exists.
-    $this->assertTrue(isset($values['baz']['beer']), 'Nested form value still exists.');
+    $this->assertArrayHasKey('beer', $values['baz']);
+    $this->assertNotNull($values['baz']['beer'], 'Nested form value still exists.');
 
     // Verify that actual form values equal resulting form values.
     $this->assertEqual($values, $result, 'Expected form values equal actual form values.');
diff --git a/core/modules/system/tests/src/Functional/Routing/RouterTest.php b/core/modules/system/tests/src/Functional/Routing/RouterTest.php
index 771d5ac563..e72811974c 100644
--- a/core/modules/system/tests/src/Functional/Routing/RouterTest.php
+++ b/core/modules/system/tests/src/Functional/Routing/RouterTest.php
@@ -78,15 +78,15 @@ public function testFinishResponseSubscriber() {
     // 3. controller result: Response object, globally cacheable route access.
     $this->drupalGet('router_test/test1');
     $headers = $session->getResponseHeaders();
-    $this->assertFalse(isset($headers['X-Drupal-Cache-Contexts']));
-    $this->assertFalse(isset($headers['X-Drupal-Cache-Tags']));
-    $this->assertFalse(isset($headers['X-Drupal-Cache-Max-Age']));
+    $this->assertArrayNotHasKey('X-Drupal-Cache-Contexts', $headers);
+    $this->assertArrayNotHasKey('X-Drupal-Cache-Tags', $headers);
+    $this->assertArrayNotHasKey('X-Drupal-Cache-Max-Age', $headers);
     // 4. controller result: Response object, per-role cacheable route access.
     $this->drupalGet('router_test/test20');
     $headers = $session->getResponseHeaders();
-    $this->assertFalse(isset($headers['X-Drupal-Cache-Contexts']));
-    $this->assertFalse(isset($headers['X-Drupal-Cache-Tags']));
-    $this->assertFalse(isset($headers['X-Drupal-Cache-Max-Age']));
+    $this->assertArrayNotHasKey('X-Drupal-Cache-Contexts', $headers);
+    $this->assertArrayNotHasKey('X-Drupal-Cache-Tags', $headers);
+    $this->assertArrayNotHasKey('X-Drupal-Cache-Max-Age', $headers);
     // 5. controller result: CacheableResponse object, globally cacheable route access.
     $this->drupalGet('router_test/test21');
     $headers = $session->getResponseHeaders();
@@ -102,17 +102,20 @@ public function testFinishResponseSubscriber() {
     // headers are not sent when their container parameter is set to FALSE.
     $this->drupalGet('router_test/test18');
     $headers = $session->getResponseHeaders();
-    $this->assertTrue(isset($headers['X-Drupal-Cache-Contexts']));
-    $this->assertTrue(isset($headers['X-Drupal-Cache-Tags']));
-    $this->assertTrue(isset($headers['X-Drupal-Cache-Max-Age']));
+    $this->assertArrayHasKey('X-Drupal-Cache-Contexts', $headers);
+    $this->assertNotNull($headers['X-Drupal-Cache-Contexts']);
+    $this->assertArrayHasKey('X-Drupal-Cache-Tags', $headers);
+    $this->assertNotNull($headers['X-Drupal-Cache-Tags']);
+    $this->assertArrayHasKey('X-Drupal-Cache-Max-Age', $headers);
+    $this->assertNotNull($headers['X-Drupal-Cache-Max-Age']);
     $this->setContainerParameter('http.response.debug_cacheability_headers', FALSE);
     $this->rebuildContainer();
     $this->resetAll();
     $this->drupalGet('router_test/test18');
     $headers = $session->getResponseHeaders();
-    $this->assertFalse(isset($headers['X-Drupal-Cache-Contexts']));
-    $this->assertFalse(isset($headers['X-Drupal-Cache-Tags']));
-    $this->assertFalse(isset($headers['X-Drupal-Cache-Max-Age']));
+    $this->assertArrayNotHasKey('X-Drupal-Cache-Contexts', $headers);
+    $this->assertArrayNotHasKey('X-Drupal-Cache-Tags', $headers);
+    $this->assertArrayNotHasKey('X-Drupal-Cache-Max-Age', $headers);
   }
 
   /**
diff --git a/core/modules/system/tests/src/Functional/System/SiteMaintenanceTest.php b/core/modules/system/tests/src/Functional/System/SiteMaintenanceTest.php
index 38da8000fe..70696a8641 100644
--- a/core/modules/system/tests/src/Functional/System/SiteMaintenanceTest.php
+++ b/core/modules/system/tests/src/Functional/System/SiteMaintenanceTest.php
@@ -64,7 +64,8 @@ public function testSiteMaintenance() {
     $this->drupalGet(Url::fromRoute('user.page'));
     // JS should be aggregated, so drupal.js is not in the page source.
     $links = $this->xpath('//script[contains(@src, :href)]', [':href' => '/core/misc/drupal.js']);
-    $this->assertFalse(isset($links[0]), 'script /core/misc/drupal.js not in page');
+    // Verify that the script /core/misc/drupal.js not in page.
+    $this->assertArrayNotHasKey(0, $links);
     // Turn on maintenance mode.
     $edit = [
       'maintenance_mode' => 1,
@@ -78,7 +79,9 @@ public function testSiteMaintenance() {
     $this->drupalGet(Url::fromRoute('user.page'));
     // JS should not be aggregated, so drupal.js is expected in the page source.
     $links = $this->xpath('//script[contains(@src, :href)]', [':href' => '/core/misc/drupal.js']);
-    $this->assertTrue(isset($links[0]), 'script /core/misc/drupal.js in page');
+    // Verify that the script /core/misc/drupal.js in page.
+    $this->assertArrayHasKey(0, $links);
+    $this->assertNotNull($links[0]);
     $this->assertRaw($admin_message, 'Found the site maintenance mode message.');
 
     // Logout and verify that offline message is displayed.
diff --git a/core/modules/system/tests/src/Functional/System/TokenScanTest.php b/core/modules/system/tests/src/Functional/System/TokenScanTest.php
index 77e28d6ede..9be88cfce8 100644
--- a/core/modules/system/tests/src/Functional/System/TokenScanTest.php
+++ b/core/modules/system/tests/src/Functional/System/TokenScanTest.php
@@ -30,13 +30,20 @@ public function testTokenScan() {
     $text .= 'Last an existing token: [node:author:name].';
     $token_wannabes = \Drupal::token()->scan($text);
 
-    $this->assertTrue(isset($token_wannabes['valid']['simple']), 'A simple valid token has been matched.');
-    $this->assertTrue(isset($token_wannabes['valid']['token with: spaces']), 'A valid token with space characters in the token name has been matched.');
-    $this->assertFalse(isset($token_wannabes['not valid']), 'An invalid token with spaces in the token type has not been matched.');
-    $this->assertFalse(isset($token_wannabes['empty token']), 'An empty token has not been matched.');
+    $this->assertArrayHasKey('simple', $token_wannabes['valid']);
+    $this->assertNotNull($token_wannabes['valid']['simple'], 'A simple valid token has been matched.');
+    $this->assertArrayHasKey('token with: spaces', $token_wannabes['valid']);
+    $this->assertNotNull($token_wannabes['valid']['token with: spaces'], 'A valid token with space characters in the token name has been matched.');
+    // Verify that an invalid token with spaces in the token type has not been
+    // matched.
+    $this->assertArrayNotHasKey('not valid', $token_wannabes);
+    // Verify that an empty token has not been matched.
+    $this->assertArrayNotHasKey('empty token', $token_wannabes);
     $this->assertFalse(isset($token_wannabes['']['empty token type']), 'An empty token type has not been matched.');
     $this->assertFalse(isset($token_wannabes['']['']), 'An empty token and type has not been matched.');
-    $this->assertTrue(isset($token_wannabes['node']), 'An existing valid token has been matched.');
+    // Verify that an existing valid token has been matched.
+    $this->assertArrayHasKey('node', $token_wannabes);
+    $this->assertNotNull($token_wannabes['node']);
   }
 
 }
diff --git a/core/modules/system/tests/src/FunctionalJavascript/FrameworkTest.php b/core/modules/system/tests/src/FunctionalJavascript/FrameworkTest.php
index 8e1d576ca1..65b0d10b0e 100644
--- a/core/modules/system/tests/src/FunctionalJavascript/FrameworkTest.php
+++ b/core/modules/system/tests/src/FunctionalJavascript/FrameworkTest.php
@@ -43,7 +43,7 @@ public function testLazyLoad() {
 
     // Verify that the base page doesn't have the settings and files that are to
     // be lazy loaded as part of the next requests.
-    $this->assertTrue(!isset($original_settings[$expected['setting_name']]), new FormattableMarkup('Page originally lacks the %setting, as expected.', ['%setting' => $expected['setting_name']]));
+    $this->assertArrayNotHasKey($expected['setting_name'], $original_settings, new FormattableMarkup('Page originally lacks the %setting, as expected.', ['%setting' => $expected['setting_name']]));
     $this->assertNotContains($expected['library_1'], $original_libraries, new FormattableMarkup('Page originally lacks the %library library, as expected.', ['%library' => $expected['library_1']]));
     $this->assertNotContains($expected['library_2'], $original_libraries, new FormattableMarkup('Page originally lacks the %library library, as expected.', ['%library' => $expected['library_2']]));
 
@@ -54,7 +54,7 @@ public function testLazyLoad() {
     $new_libraries = explode(',', $new_settings['ajaxPageState']['libraries']);
 
     // Verify the setting was not added when not expected.
-    $this->assertTrue(!isset($new_settings[$expected['setting_name']]), new FormattableMarkup('Page still lacks the %setting, as expected.', ['%setting' => $expected['setting_name']]));
+    $this->assertArrayNotHasKey($expected['setting_name'], $new_settings, new FormattableMarkup('Page still lacks the %setting, as expected.', ['%setting' => $expected['setting_name']]));
     $this->assertNotContains($expected['library_1'], $new_libraries, new FormattableMarkup('Page still lacks the %library library, as expected.', ['%library' => $expected['library_1']]));
     $this->assertNotContains($expected['library_2'], $new_libraries, new FormattableMarkup('Page still lacks the %library library, as expected.', ['%library' => $expected['library_2']]));
 
diff --git a/core/modules/system/tests/src/Kernel/Extension/ModuleHandlerTest.php b/core/modules/system/tests/src/Kernel/Extension/ModuleHandlerTest.php
index 241de1bba0..f713bcfd93 100644
--- a/core/modules/system/tests/src/Kernel/Extension/ModuleHandlerTest.php
+++ b/core/modules/system/tests/src/Kernel/Extension/ModuleHandlerTest.php
@@ -297,14 +297,15 @@ public function testModuleStreamWrappers() {
     // file_test.module provides (among others) a 'dummy' stream wrapper.
     // Verify that it is not registered yet to prevent false positives.
     $stream_wrappers = \Drupal::service('stream_wrapper_manager')->getWrappers();
-    $this->assertFalse(isset($stream_wrappers['dummy']));
+    $this->assertArrayNotHasKey('dummy', $stream_wrappers);
     $this->moduleInstaller()->install(['file_test']);
     // Verify that the stream wrapper is available even without calling
     // \Drupal::service('stream_wrapper_manager')->getWrappers() again.
     // If the stream wrapper is not available file_exists() will raise a notice.
     file_exists('dummy://');
     $stream_wrappers = \Drupal::service('stream_wrapper_manager')->getWrappers();
-    $this->assertTrue(isset($stream_wrappers['dummy']));
+    $this->assertArrayHasKey('dummy', $stream_wrappers);
+    $this->assertNotNull($stream_wrappers['dummy']);
   }
 
   /**
diff --git a/core/modules/taxonomy/tests/src/Functional/LoadMultipleTest.php b/core/modules/taxonomy/tests/src/Functional/LoadMultipleTest.php
index dd1ac8fbfa..c8f1f2676c 100644
--- a/core/modules/taxonomy/tests/src/Functional/LoadMultipleTest.php
+++ b/core/modules/taxonomy/tests/src/Functional/LoadMultipleTest.php
@@ -55,7 +55,7 @@ public function testTaxonomyTermMultipleLoad() {
     // Load terms from the vocabulary by vid.
     $terms3 = $term_storage->loadByProperties(['vid' => $vocabulary->id()]);
     $this->assertCount(4, $terms3, 'Correct number of terms were loaded.');
-    $this->assertFalse(isset($terms3[$deleted->id()]));
+    $this->assertArrayNotHasKey($deleted->id(), $terms3);
 
     // Create a single term and load it by name.
     $term = $this->createTerm($vocabulary);
diff --git a/core/modules/taxonomy/tests/src/Functional/TermTest.php b/core/modules/taxonomy/tests/src/Functional/TermTest.php
index d67c393bc6..860e9b98e5 100644
--- a/core/modules/taxonomy/tests/src/Functional/TermTest.php
+++ b/core/modules/taxonomy/tests/src/Functional/TermTest.php
@@ -114,21 +114,27 @@ public function testTaxonomyTermHierarchy() {
     // Check the hierarchy.
     $children = $taxonomy_storage->loadChildren($term1->id());
     $parents = $taxonomy_storage->loadParents($term2->id());
-    $this->assertTrue(isset($children[$term2->id()]), 'Child found correctly.');
-    $this->assertTrue(isset($parents[$term1->id()]), 'Parent found correctly.');
+    $this->assertArrayHasKey($term2->id(), $children);
+    $this->assertNotNull($children[$term2->id()]);
+    $this->assertArrayHasKey($term1->id(), $parents);
+    $this->assertNotNull($parents[$term1->id()]);
 
     // Load and save a term, confirming that parents are still set.
     $term = Term::load($term2->id());
     $term->save();
     $parents = $taxonomy_storage->loadParents($term2->id());
-    $this->assertTrue(isset($parents[$term1->id()]), 'Parent found correctly.');
+    $this->assertArrayHasKey($term1->id(), $parents);
+    $this->assertNotNull($parents[$term1->id()]);
 
     // Create a third term and save this as a parent of term2.
     $term3 = $this->createTerm($this->vocabulary);
     $term2->parent = [$term1->id(), $term3->id()];
     $term2->save();
     $parents = $taxonomy_storage->loadParents($term2->id());
-    $this->assertTrue(isset($parents[$term1->id()]) && isset($parents[$term3->id()]), 'Both parents found successfully.');
+    $this->assertArrayHasKey($term1->id(), $parents);
+    $this->assertNotNull($parents[$term1->id()]);
+    $this->assertArrayHasKey($term3->id(), $parents);
+    $this->assertNotNull($parents[$term3->id()]);
   }
 
   /**
@@ -278,7 +284,7 @@ public function testNodeTermCreationAndDeletion() {
 
     // Verify that the creation message contains a link to a node.
     $view_link = $this->xpath('//div[@class="messages"]//a[contains(@href, :href)]', [':href' => 'node/']);
-    $this->assert(isset($view_link), 'The message area contains a link to a node');
+    $this->assertNotNull($view_link, 'The message area contains a link to a node');
 
     foreach ($terms as $term) {
       $this->assertText($term, 'The term was saved and appears on the node page.');
@@ -500,19 +506,23 @@ public function testTaxonomyGetTermByName() {
 
     // Load the term with the exact name.
     $terms = taxonomy_term_load_multiple_by_name($term->getName());
-    $this->assertTrue(isset($terms[$term->id()]), 'Term loaded using exact name.');
+    $this->assertArrayHasKey($term->id(), $terms);
+    $this->assertNotNull($terms[$term->id()]);
 
     // Load the term with space concatenated.
     $terms = taxonomy_term_load_multiple_by_name('  ' . $term->getName() . '   ');
-    $this->assertTrue(isset($terms[$term->id()]), 'Term loaded with extra whitespace.');
+    $this->assertArrayHasKey($term->id(), $terms);
+    $this->assertNotNull($terms[$term->id()]);
 
     // Load the term with name uppercased.
     $terms = taxonomy_term_load_multiple_by_name(strtoupper($term->getName()));
-    $this->assertTrue(isset($terms[$term->id()]), 'Term loaded with uppercased name.');
+    $this->assertArrayHasKey($term->id(), $terms);
+    $this->assertNotNull($terms[$term->id()]);
 
     // Load the term with name lowercased.
     $terms = taxonomy_term_load_multiple_by_name(strtolower($term->getName()));
-    $this->assertTrue(isset($terms[$term->id()]), 'Term loaded with lowercased name.');
+    $this->assertArrayHasKey($term->id(), $terms);
+    $this->assertNotNull($terms[$term->id()]);
 
     // Try to load an invalid term name.
     $terms = taxonomy_term_load_multiple_by_name('Banana');
@@ -537,7 +547,8 @@ public function testTaxonomyGetTermByName() {
     // Load single term when restricted to one vocabulary.
     $terms = taxonomy_term_load_multiple_by_name($term->getName(), $this->vocabulary->id());
     $this->assertCount(1, $terms, 'One term loaded when restricted by vocabulary.');
-    $this->assertTrue(isset($terms[$term->id()]), 'Term loaded using exact name and vocabulary machine name.');
+    $this->assertArrayHasKey($term->id(), $terms);
+    $this->assertNotNull($terms[$term->id()]);
 
     // Create a new term with another name.
     $term2 = $this->createTerm($this->vocabulary);
diff --git a/core/modules/taxonomy/tests/src/Functional/VocabularyPermissionsTest.php b/core/modules/taxonomy/tests/src/Functional/VocabularyPermissionsTest.php
index c729074312..6cb9aa18d4 100644
--- a/core/modules/taxonomy/tests/src/Functional/VocabularyPermissionsTest.php
+++ b/core/modules/taxonomy/tests/src/Functional/VocabularyPermissionsTest.php
@@ -247,7 +247,7 @@ public function testVocabularyPermissionsTaxonomyTerm() {
 
     // Verify that the creation message contains a link to a term.
     $view_link = $this->xpath('//div[@class="messages"]//a[contains(@href, :href)]', [':href' => 'term/']);
-    $this->assert(isset($view_link), 'The message area contains a link to a term');
+    $this->assertNotNull($view_link, 'The message area contains a link to a term');
 
     $terms = \Drupal::entityTypeManager()
       ->getStorage('taxonomy_term')
@@ -322,7 +322,7 @@ public function testVocabularyPermissionsTaxonomyTerm() {
 
     // Verify that the update message contains a link to a term.
     $view_link = $this->xpath('//div[@class="messages"]//a[contains(@href, :href)]', [':href' => 'term/']);
-    $this->assert(isset($view_link), 'The message area contains a link to a term');
+    $this->assertNotNull($view_link, 'The message area contains a link to a term');
 
     // Ensure the term cannot be deleted.
     $this->drupalGet('taxonomy/term/' . $term->id() . '/delete');
diff --git a/core/modules/views/tests/src/Functional/Plugin/DisplayTest.php b/core/modules/views/tests/src/Functional/Plugin/DisplayTest.php
index 8b4ed31b1f..d158524b6c 100644
--- a/core/modules/views/tests/src/Functional/Plugin/DisplayTest.php
+++ b/core/modules/views/tests/src/Functional/Plugin/DisplayTest.php
@@ -60,8 +60,9 @@ public function testDisplayPlugin() {
     // Add a new 'display_test' display and test it's there.
     $view->storage->addDisplay('display_test');
     $displays = $view->storage->get('display');
-
-    $this->assertTrue(isset($displays['display_test_1']), 'Added display has been assigned to "display_test_1"');
+    // Verify that added display has been assigned to "display_test_1".
+    $this->assertArrayHasKey('display_test_1', $displays);
+    $this->assertNotNull($displays['display_test_1']);
 
     // Check the display options are like expected.
     $options = [
diff --git a/core/modules/views/tests/src/Functional/ViewAjaxTest.php b/core/modules/views/tests/src/Functional/ViewAjaxTest.php
index 85998adc3c..0f9f0ac97e 100644
--- a/core/modules/views/tests/src/Functional/ViewAjaxTest.php
+++ b/core/modules/views/tests/src/Functional/ViewAjaxTest.php
@@ -36,7 +36,8 @@ public function testAjaxView() {
     $this->drupalGet('test_ajax_view');
 
     $drupal_settings = $this->getDrupalSettings();
-    $this->assertTrue(isset($drupal_settings['views']['ajax_path']), 'The Ajax callback path is set in drupalSettings.');
+    $this->assertArrayHasKey('ajax_path', $drupal_settings['views']);
+    $this->assertNotNull($drupal_settings['views']['ajax_path'], 'The Ajax callback path is set in drupalSettings.');
     $this->assertCount(1, $drupal_settings['views']['ajaxViews']);
     $view_entry = array_keys($drupal_settings['views']['ajaxViews'])[0];
     $this->assertEqual($drupal_settings['views']['ajaxViews'][$view_entry]['view_name'], 'test_ajax_view', 'The view\'s ajaxViews array entry has the correct \'view_name\' key.');
diff --git a/core/modules/views/tests/src/Kernel/EventSubscriber/ViewsEntitySchemaSubscriberIntegrationTest.php b/core/modules/views/tests/src/Kernel/EventSubscriber/ViewsEntitySchemaSubscriberIntegrationTest.php
index fec962da58..f5a3e6d68b 100644
--- a/core/modules/views/tests/src/Kernel/EventSubscriber/ViewsEntitySchemaSubscriberIntegrationTest.php
+++ b/core/modules/views/tests/src/Kernel/EventSubscriber/ViewsEntitySchemaSubscriberIntegrationTest.php
@@ -101,10 +101,14 @@ public function testDeleteEntityType() {
     $views = $entity_storage->loadMultiple();
 
     // Ensure that all test views exists.
-    $this->assertTrue(isset($views['test_view_entity_test']));
-    $this->assertTrue(isset($views['test_view_entity_test_revision']));
-    $this->assertTrue(isset($views['test_view_entity_test_data']));
-    $this->assertTrue(isset($views['test_view_entity_test_additional_base_field']));
+    $this->assertArrayHasKey('test_view_entity_test', $views);
+    $this->assertNotNull($views['test_view_entity_test']);
+    $this->assertArrayHasKey('test_view_entity_test_revision', $views);
+    $this->assertNotNull($views['test_view_entity_test_revision']);
+    $this->assertArrayHasKey('test_view_entity_test_data', $views);
+    $this->assertNotNull($views['test_view_entity_test_data']);
+    $this->assertArrayHasKey('test_view_entity_test_additional_base_field', $views);
+    $this->assertNotNull($views['test_view_entity_test_additional_base_field']);
 
     $event = new EntityTypeEvent($this->entityTypeManager->getDefinition('entity_test_update'));
     $this->eventDispatcher->dispatch($event, EntityTypeEvents::DELETE);
@@ -115,10 +119,14 @@ public function testDeleteEntityType() {
 
     // Ensure that all test views still exists after the deletion of the
     // entity type.
-    $this->assertTrue(isset($views['test_view_entity_test']));
-    $this->assertTrue(isset($views['test_view_entity_test_revision']));
-    $this->assertTrue(isset($views['test_view_entity_test_data']));
-    $this->assertTrue(isset($views['test_view_entity_test_additional_base_field']));
+    $this->assertArrayHasKey('test_view_entity_test', $views);
+    $this->assertNotNull($views['test_view_entity_test']);
+    $this->assertArrayHasKey('test_view_entity_test_revision', $views);
+    $this->assertNotNull($views['test_view_entity_test_revision']);
+    $this->assertArrayHasKey('test_view_entity_test_data', $views);
+    $this->assertNotNull($views['test_view_entity_test_data']);
+    $this->assertArrayHasKey('test_view_entity_test_additional_base_field', $views);
+    $this->assertNotNull($views['test_view_entity_test_additional_base_field']);
 
     // Ensure that they are all disabled.
     $this->assertFalse($views['test_view_entity_test']->status());
@@ -555,10 +563,13 @@ protected function assertUpdatedViews($updated_view_ids) {
     $view_save_count = \Drupal::state()->get('views_test_data.view_save_count', []);
     foreach ($all_view_ids as $view_id) {
       if (in_array($view_id, $updated_view_ids, TRUE)) {
-        $this->assertTrue(isset($view_save_count[$view_id]), "The $view_id view has been updated.");
+        // Verify that the $view_id view has been updated.
+        $this->assertArrayHasKey($view_id, $view_save_count);
+        $this->assertNotNull($view_save_count[$view_id]);
       }
       else {
-        $this->assertFalse(isset($view_save_count[$view_id]), "The $view_id view has not been updated.");
+        // Verify that the $view_id view has not been updated.
+        $this->assertArrayNotHasKey($view_id, $view_save_count);
       }
     }
 
diff --git a/core/modules/views/tests/src/Kernel/Handler/AreaDisplayLinkTest.php b/core/modules/views/tests/src/Kernel/Handler/AreaDisplayLinkTest.php
index 2ce2465550..6878518c71 100644
--- a/core/modules/views/tests/src/Kernel/Handler/AreaDisplayLinkTest.php
+++ b/core/modules/views/tests/src/Kernel/Handler/AreaDisplayLinkTest.php
@@ -307,9 +307,11 @@ protected function assertFormOptions(ViewExecutable $view, $display_link_id) {
     $form = [];
     $form_state = new FormState();
     $view->display_handler->getHandler('header', $display_link_id)->buildOptionsForm($form, $form_state);
-    $this->assertTrue(isset($form['display_id']['#options']['page_1']));
-    $this->assertTrue(isset($form['display_id']['#options']['page_2']));
-    $this->assertFalse(isset($form['display_id']['#options']['block_1']));
+    $this->assertArrayHasKey('page_1', $form['display_id']['#options']);
+    $this->assertNotNull($form['display_id']['#options']['page_1']);
+    $this->assertArrayHasKey('page_2', $form['display_id']['#options']);
+    $this->assertNotNull($form['display_id']['#options']['page_2']);
+    $this->assertArrayNotHasKey('block_1', $form['display_id']['#options']);
   }
 
   /**
diff --git a/core/modules/views/tests/src/Kernel/Handler/AreaEntityTest.php b/core/modules/views/tests/src/Kernel/Handler/AreaEntityTest.php
index aa819bbf5d..55e31f26ae 100644
--- a/core/modules/views/tests/src/Kernel/Handler/AreaEntityTest.php
+++ b/core/modules/views/tests/src/Kernel/Handler/AreaEntityTest.php
@@ -180,8 +180,10 @@ public function doTestRender($entities) {
     $form_state = (new FormState())
       ->set('type', 'header');
     $view->display_handler->getHandler('header', 'entity_entity_test')->buildOptionsForm($form, $form_state);
-    $this->assertTrue(isset($form['view_mode']['#options']['test']), 'Ensure that the test view mode is available.');
-    $this->assertTrue(isset($form['view_mode']['#options']['default']), 'Ensure that the default view mode is available.');
+    $this->assertArrayHasKey('test', $form['view_mode']['#options']);
+    $this->assertNotNull($form['view_mode']['#options']['test'], 'Ensure that the test view mode is available.');
+    $this->assertArrayHasKey('default', $form['view_mode']['#options']);
+    $this->assertNotNull($form['view_mode']['#options']['default'], 'Ensure that the default view mode is available.');
   }
 
   /**
diff --git a/core/modules/views/tests/src/Kernel/Handler/FieldFieldAccessTestBase.php b/core/modules/views/tests/src/Kernel/Handler/FieldFieldAccessTestBase.php
index 1f9b017bdb..961b343c31 100644
--- a/core/modules/views/tests/src/Kernel/Handler/FieldFieldAccessTestBase.php
+++ b/core/modules/views/tests/src/Kernel/Handler/FieldFieldAccessTestBase.php
@@ -123,7 +123,8 @@ protected function assertFieldAccess($entity_type_id, $field_name, $field_conten
     $this->setRawContent($renderer->renderRoot($build));
 
     $this->assertText($field_content);
-    $this->assertTrue(isset($executable->field[$field_name]));
+    $this->assertArrayHasKey($field_name, $executable->field);
+    $this->assertNotNull($executable->field[$field_name]);
 
     $account_switcher->switchTo($this->userWithoutAccess);
     $executable = Views::getView($view_id);
@@ -131,7 +132,7 @@ protected function assertFieldAccess($entity_type_id, $field_name, $field_conten
     $this->setRawContent($renderer->renderRoot($build));
 
     $this->assertNoText($field_content);
-    $this->assertFalse(isset($executable->field[$field_name]));
+    $this->assertArrayNotHasKey($field_name, $executable->field);
 
     \Drupal::state()->delete('views_field_access_test-field');
   }
diff --git a/core/modules/views/tests/src/Kernel/Handler/FilterNumericTest.php b/core/modules/views/tests/src/Kernel/Handler/FilterNumericTest.php
index a2c2fe6f51..ab135f2132 100644
--- a/core/modules/views/tests/src/Kernel/Handler/FilterNumericTest.php
+++ b/core/modules/views/tests/src/Kernel/Handler/FilterNumericTest.php
@@ -439,10 +439,12 @@ public function testAllowEmpty() {
     $id_operators = $view->filter['id']->operators();
     $age_operators = $view->filter['age']->operators();
 
-    $this->assertFalse(isset($id_operators['empty']));
-    $this->assertFalse(isset($id_operators['not empty']));
-    $this->assertTrue(isset($age_operators['empty']));
-    $this->assertTrue(isset($age_operators['not empty']));
+    $this->assertArrayNotHasKey('empty', $id_operators);
+    $this->assertArrayNotHasKey('not empty', $id_operators);
+    $this->assertArrayHasKey('empty', $age_operators);
+    $this->assertNotNull($age_operators['empty']);
+    $this->assertArrayHasKey('not empty', $age_operators);
+    $this->assertNotNull($age_operators['not empty']);
   }
 
   protected function getGroupedExposedFilters() {
diff --git a/core/modules/views/tests/src/Kernel/ModuleTest.php b/core/modules/views/tests/src/Kernel/ModuleTest.php
index 6c2f707875..0436d3257f 100644
--- a/core/modules/views/tests/src/Kernel/ModuleTest.php
+++ b/core/modules/views/tests/src/Kernel/ModuleTest.php
@@ -232,7 +232,8 @@ public function testViewsPluginList() {
       list($plugin_type, $plugin_id) = explode(':', $key);
       $plugin_def = $this->container->get("plugin.manager.views.$plugin_type")->getDefinition($plugin_id);
 
-      $this->assertTrue(isset($plugin_list[$key]), new FormattableMarkup('The expected @key plugin list key was found.', ['@key' => $key]));
+      $this->assertArrayHasKey($key, $plugin_list, new FormattableMarkup('The expected @key plugin list key was found.', ['@key' => $key]));
+      $this->assertNotNull($plugin_list[$key]);
       $plugin_details = $plugin_list[$key];
 
       $this->assertEqual($plugin_details['type'], $plugin_type, 'The expected plugin type was found.');
diff --git a/core/modules/views/tests/src/Kernel/Plugin/DisplayPageTest.php b/core/modules/views/tests/src/Kernel/Plugin/DisplayPageTest.php
index ab18fe1f1f..735860fc4f 100644
--- a/core/modules/views/tests/src/Kernel/Plugin/DisplayPageTest.php
+++ b/core/modules/views/tests/src/Kernel/Plugin/DisplayPageTest.php
@@ -120,7 +120,8 @@ public function testPageRouterItems() {
   public function testMenuLinks() {
     \Drupal::service('plugin.manager.menu.link')->rebuild();
     $tree = \Drupal::menuTree()->load('admin', new MenuTreeParameters());
-    $this->assertTrue(isset($tree['system.admin']->subtree['views_view:views.test_page_display_menu.page_4']));
+    $this->assertArrayHasKey('views_view:views.test_page_display_menu.page_4', $tree['system.admin']->subtreed);
+    $this->assertNotNull($tree['system.admin']->subtree['views_view:views.test_page_display_menu.page_4']);
     $menu_link = $tree['system.admin']->subtree['views_view:views.test_page_display_menu.page_4']->link;
     $this->assertEqual($menu_link->getTitle(), 'Test child (with parent)');
     $this->assertEqual($menu_link->isExpanded(), TRUE);
diff --git a/core/modules/views/tests/src/Kernel/Plugin/RowEntityTest.php b/core/modules/views/tests/src/Kernel/Plugin/RowEntityTest.php
index 6b7ebe252a..aa1d6811b3 100644
--- a/core/modules/views/tests/src/Kernel/Plugin/RowEntityTest.php
+++ b/core/modules/views/tests/src/Kernel/Plugin/RowEntityTest.php
@@ -69,7 +69,8 @@ public function testEntityRow() {
     $form_state->set('view', $view->storage);
     $view->rowPlugin->buildOptionsForm($form, $form_state);
 
-    $this->assertTrue(isset($form['view_mode']['#options']['default']), 'Ensure that the default view mode is available');
+    $this->assertArrayHasKey('default', $form['view_mode']['#options']);
+    $this->assertNotNull($form['view_mode']['#options']['default'], 'Ensure that the default view mode is available');
   }
 
 }
diff --git a/core/modules/views/tests/src/Kernel/ViewExecutableTest.php b/core/modules/views/tests/src/Kernel/ViewExecutableTest.php
index 30efd0dd49..e0c85adb8d 100644
--- a/core/modules/views/tests/src/Kernel/ViewExecutableTest.php
+++ b/core/modules/views/tests/src/Kernel/ViewExecutableTest.php
@@ -194,7 +194,7 @@ public function testConstructing() {
   public function testProperties() {
     $view = Views::getView('test_destroy');
     foreach ($this->executableProperties as $property) {
-      $this->assertTrue(isset($view->{$property}));
+      $this->assertNotNull($view->{$property});
     }
 
     // Per default exposed input should fall back to an empty array.
@@ -402,7 +402,8 @@ protected function getProtectedProperty($instance, $property) {
   public function testGetHandlerTypes() {
     $types = ViewExecutable::getHandlerTypes();
     foreach (['field', 'filter', 'argument', 'sort', 'header', 'footer', 'empty'] as $type) {
-      $this->assertTrue(isset($types[$type]));
+      $this->assertArrayHasKey($type, $types);
+      $this->assertNotNull($types[$type]);
       // @todo The key on the display should be footers, headers and empties
       //   or something similar instead of the singular, but so long check for
       //   this special case.
diff --git a/core/modules/views/tests/src/Unit/EntityViewsDataTest.php b/core/modules/views/tests/src/Unit/EntityViewsDataTest.php
index a88b019bcc..cbf7524205 100644
--- a/core/modules/views/tests/src/Unit/EntityViewsDataTest.php
+++ b/core/modules/views/tests/src/Unit/EntityViewsDataTest.php
@@ -216,9 +216,9 @@ public function testBaseTables() {
 
     $this->assertFalse(isset($data['entity_test']['table']['defaults']));
 
-    $this->assertFalse(isset($data['entity_test_mul_property_data']));
-    $this->assertFalse(isset($data['revision_table']));
-    $this->assertFalse(isset($data['revision_data_table']));
+    $this->assertArrayNotHasKey('entity_test_mul_property_data', $data);
+    $this->assertArrayNotHasKey('revision_table', $data);
+    $this->assertArrayNotHasKey('revision_data_table', $data);
   }
 
   /**
@@ -251,8 +251,8 @@ public function testDataTable() {
     // Ensure the join information is set up properly.
     $this->assertCount(1, $base_views_data['table']['join']);
     $this->assertEquals(['entity_test_mul_property_data' => ['left_field' => 'id', 'field' => 'id', 'type' => 'INNER']], $base_views_data['table']['join']);
-    $this->assertFalse(isset($data['revision_table']));
-    $this->assertFalse(isset($data['revision_data_table']));
+    $this->assertArrayNotHasKey('revision_table', $data);
+    $this->assertArrayNotHasKey('revision_data_table', $data);
   }
 
   /**
@@ -285,7 +285,7 @@ public function testRevisionTableWithoutDataTable() {
     $revision_data = $data['entity_test_mulrev_revision'];
     $this->assertCount(1, $revision_data['table']['join']);
     $this->assertEquals(['entity_test' => ['left_field' => 'revision_id', 'field' => 'revision_id', 'type' => 'INNER']], $revision_data['table']['join']);
-    $this->assertFalse(isset($data['data_table']));
+    $this->assertArrayNotHasKey('data_table', $data);
   }
 
   /**
@@ -333,7 +333,7 @@ public function testRevisionTableWithRevisionDataTableAndDataTable() {
       ],
     ], $revision_base_data['table']['join']);
 
-    $this->assertFalse(isset($data['data_table']));
+    $this->assertArrayNotHasKey('data_table', $data);
   }
 
   /**
@@ -379,7 +379,7 @@ public function testRevisionTableWithRevisionDataTable() {
         'type' => 'INNER',
       ],
     ], $revision_base_data['table']['join']);
-    $this->assertFalse(isset($data['data_table']));
+    $this->assertArrayNotHasKey('data_table', $data);
   }
 
   /**
diff --git a/core/modules/views_ui/tests/src/Functional/DefaultViewsTest.php b/core/modules/views_ui/tests/src/Functional/DefaultViewsTest.php
index 46bc66a9d2..50f4f2137d 100644
--- a/core/modules/views_ui/tests/src/Functional/DefaultViewsTest.php
+++ b/core/modules/views_ui/tests/src/Functional/DefaultViewsTest.php
@@ -241,7 +241,7 @@ public function clickViewsOperationLink($label, $unique_href_part) {
         break;
       }
     }
-    $this->assertTrue(isset($index), new FormattableMarkup('Link to "@label" containing @part found.', ['@label' => $label, '@part' => $unique_href_part]));
+    $this->assertNotEmpty($index, new FormattableMarkup('Link to "@label" containing @part found.', ['@label' => $label, '@part' => $unique_href_part]));
     if (isset($index)) {
       return $this->clickLink((string) $label, $index);
     }
diff --git a/core/modules/views_ui/tests/src/Functional/HandlerTest.php b/core/modules/views_ui/tests/src/Functional/HandlerTest.php
index 9f9962abc1..c2ccd1e164 100644
--- a/core/modules/views_ui/tests/src/Functional/HandlerTest.php
+++ b/core/modules/views_ui/tests/src/Functional/HandlerTest.php
@@ -126,13 +126,14 @@ public function testUICRUD() {
 
       $this->assertLinkByHref($edit_handler_url, 0, 'The handler edit link appears in the UI.');
       $links = $this->xpath('//a[starts-with(normalize-space(text()), :label)]', [':label' => $random_label]);
-      $this->assertTrue(isset($links[0]), 'The handler edit link has the right label');
+      $this->assertArrayHasKey(0, $links, 'The handler edit link has the right label');
 
       // Save the view and have a look whether the handler was added as expected.
       $this->drupalPostForm(NULL, [], t('Save'));
       $view = $this->container->get('entity_type.manager')->getStorage('view')->load('test_view_empty');
       $display = $view->getDisplay('default');
-      $this->assertTrue(isset($display['display_options'][$type_info['plural']][$id]), 'Ensure the field was added to the view itself.');
+      $this->assertArrayHasKey($id, $display['display_options'][$type_info['plural']]);
+      $this->assertNotNull($display['display_options'][$type_info['plural']][$id], 'Ensure the field was added to the view itself.');
 
       // Remove the item and check that it's removed
       $this->drupalPostForm($edit_handler_url, [], t('Remove'));
@@ -162,7 +163,8 @@ public function testUICRUD() {
     $this->drupalPostForm(NULL, [], t('Save'));
     $view = $this->container->get('entity_type.manager')->getStorage('view')->load('test_view_empty');
     $display = $view->getDisplay('default');
-    $this->assertTrue(isset($display['display_options'][$type_info['plural']][$id]), 'Ensure the field was added to the view itself.');
+    $this->assertArrayHasKey($id, $display['display_options'][$type_info['plural']]);
+    $this->assertNotNull($display['display_options'][$type_info['plural']][$id], 'Ensure the field was added to the view itself.');
   }
 
   /**
diff --git a/core/modules/workflows/tests/src/Kernel/PredefinedWorkflowTypeTest.php b/core/modules/workflows/tests/src/Kernel/PredefinedWorkflowTypeTest.php
index 2f294fd915..c93fc70481 100644
--- a/core/modules/workflows/tests/src/Kernel/PredefinedWorkflowTypeTest.php
+++ b/core/modules/workflows/tests/src/Kernel/PredefinedWorkflowTypeTest.php
@@ -46,7 +46,7 @@ public function testPredefinedWorkflowType() {
 
     // No states configuration is stored for this workflow.
     $configuration = $workflow->getTypePlugin()->getConfiguration();
-    $this->assertFalse(isset($configuration['states']));
+    $this->assertArrayNotHasKey('states', $configuration);
   }
 
 }
diff --git a/core/modules/workspaces/tests/src/Kernel/WorkspaceCRUDTest.php b/core/modules/workspaces/tests/src/Kernel/WorkspaceCRUDTest.php
index 75bfdc0135..0c1fff90ef 100644
--- a/core/modules/workspaces/tests/src/Kernel/WorkspaceCRUDTest.php
+++ b/core/modules/workspaces/tests/src/Kernel/WorkspaceCRUDTest.php
@@ -292,8 +292,8 @@ public function testDeletingPublishedWorkspace() {
     $this->assertFalse($revisions[1]->isDefaultRevision());
     $this->assertFalse($revisions[2]->isDefaultRevision());
     $this->assertTrue($revisions[3]->isDefaultRevision());
-    $this->assertFalse(isset($revisions[4]));
-    $this->assertFalse(isset($revisions[5]));
+    $this->assertArrayNotHasKey(4, $revisions);
+    $this->assertArrayNotHasKey(5, $revisions);
   }
 
   /**
diff --git a/core/tests/Drupal/KernelTests/Core/Cache/GenericCacheBackendUnitTestBase.php b/core/tests/Drupal/KernelTests/Core/Cache/GenericCacheBackendUnitTestBase.php
index 4074a2b64c..f1905e6c48 100644
--- a/core/tests/Drupal/KernelTests/Core/Cache/GenericCacheBackendUnitTestBase.php
+++ b/core/tests/Drupal/KernelTests/Core/Cache/GenericCacheBackendUnitTestBase.php
@@ -320,8 +320,10 @@ public function testGetMultiple() {
     $this->assertTrue($ret['test2']->created >= REQUEST_TIME && $ret['test2']->created <= round(microtime(TRUE), 3), 'Created time is correct.');
     $this->assertEqual($ret['test2']->expire, Cache::PERMANENT, 'Expire time is correct.');
     // Test return - ensure it does not contain nonexistent cache ids.
-    $this->assertFalse(isset($ret['test19']), "Nonexistent cache id test19 is not set.");
-    $this->assertFalse(isset($ret['test21']), "Nonexistent cache id test21 is not set.");
+    // Verify that nonexistent cache id test19 is not set.
+    $this->assertArrayNotHasKey('test19', $ret);
+    // Verify that nonexistent cache id test21 is not set.
+    $this->assertArrayNotHasKey('test21', $ret);
     // Test values.
     $this->assertIdentical($ret['test2']->data, 3, "Existing cache id test2 has the correct value.");
     $this->assertIdentical($ret['test3']->data, 5, "Existing cache id test3 has the correct value.");
@@ -349,9 +351,12 @@ public function testGetMultiple() {
     $this->assert(isset($ret['test7']), "Existing cache id test7 is set");
     $this->assert(isset($ret['test19']), "Added cache id test19 is set");
     // Test return - ensure it does not contain nonexistent cache ids.
-    $this->assertFalse(isset($ret['test3']), "Deleted cache id test3 is not set");
-    $this->assertFalse(isset($ret['test6']), "Deleted cache id test6 is not set");
-    $this->assertFalse(isset($ret['test21']), "Nonexistent cache id test21 is not set");
+    // Verify that deleted cache id test3 is not set.
+    $this->assertArrayNotHasKey('test3', $ret);
+    // Verify that deleted cache id test6 is not set.
+    $this->assertArrayNotHasKey('test6', $ret);
+    // Verify that nonexistent cache id test21 is not set.
+    $this->assertArrayNotHasKey('test21', $ret);
     // Test values.
     $this->assertIdentical($ret['test2']->data, 3, "Existing cache id test2 has the correct value.");
     $this->assertIdentical($ret['test7']->data, 17, "Existing cache id test7 has the correct value.");
diff --git a/core/tests/Drupal/KernelTests/Core/Config/ConfigDependencyTest.php b/core/tests/Drupal/KernelTests/Core/Config/ConfigDependencyTest.php
index c1e801dfe9..52fcbca9f3 100644
--- a/core/tests/Drupal/KernelTests/Core/Config/ConfigDependencyTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Config/ConfigDependencyTest.php
@@ -30,7 +30,11 @@ public function testNonEntity() {
     $this->installConfig(['system']);
     $config_manager = \Drupal::service('config.manager');
     $dependents = $config_manager->findConfigEntityDependents('module', ['system']);
-    $this->assertTrue(isset($dependents['system.site']), 'Simple configuration system.site has a UUID key even though it is not a configuration entity and therefore is found when looking for dependencies of the System module.');
+    // Verify that simple configuration system.site has a UUID key even though
+    // it is not a configuration entity and therefore is found when looking for
+    // dependencies of the System module.
+    $this->assertArrayHasKey('system.site', $dependents);
+    $this->assertNotNull($dependents['system.site']);
     // Ensure that calling
     // \Drupal\Core\Config\ConfigManager::findConfigEntityDependentsAsEntities()
     // does not try to load system.site as an entity.
@@ -58,11 +62,19 @@ public function testDependencyManagement() {
     $entity1->save();
 
     $dependents = $config_manager->findConfigEntityDependents('module', ['node']);
-    $this->assertTrue(isset($dependents['config_test.dynamic.entity1']), 'config_test.dynamic.entity1 has a dependency on the Node module.');
+    // Verify that the config_test.dynamic.entity1 has a dependency on the Node
+    // module.
+    $this->assertArrayHasKey('config_test.dynamic.entity1', $dependents);
+    $this->assertNotNull($dependents['config_test.dynamic.entity1']);
     $dependents = $config_manager->findConfigEntityDependents('module', ['config_test']);
-    $this->assertTrue(isset($dependents['config_test.dynamic.entity1']), 'config_test.dynamic.entity1 has a dependency on the config_test module.');
+    // Verify that the config_test.dynamic.entity1 has a dependency on the
+    // config_test module.
+    $this->assertArrayHasKey('config_test.dynamic.entity1', $dependents);
+    $this->assertNotNull($dependents['config_test.dynamic.entity1']);
     $dependents = $config_manager->findConfigEntityDependents('module', ['views']);
-    $this->assertFalse(isset($dependents['config_test.dynamic.entity1']), 'config_test.dynamic.entity1 does not have a dependency on the Views module.');
+    // Verify that the config_test.dynamic.entity1 does not have a dependency on
+    // the Views module.
+    $this->assertArrayNotHasKey('config_test.dynamic.entity1', $dependents);
     // Ensure that the provider of the config entity is not actually written to
     // the dependencies array.
     $raw_config = $this->config('config_test.dynamic.entity1');
@@ -79,10 +91,21 @@ public function testDependencyManagement() {
 
     // Test getting $entity1's dependencies as configuration dependency objects.
     $dependents = $config_manager->findConfigEntityDependents('config', [$entity1->getConfigDependencyName()]);
-    $this->assertFalse(isset($dependents['config_test.dynamic.entity1']), 'config_test.dynamic.entity1 does not have a dependency on itself.');
-    $this->assertTrue(isset($dependents['config_test.dynamic.entity2']), 'config_test.dynamic.entity2 has a dependency on config_test.dynamic.entity1.');
-    $this->assertTrue(isset($dependents['config_test.dynamic.entity3']), 'config_test.dynamic.entity3 has a dependency on config_test.dynamic.entity1.');
-    $this->assertTrue(isset($dependents['config_test.dynamic.entity4']), 'config_test.dynamic.entity4 has a dependency on config_test.dynamic.entity1.');
+    // Verify that the config_test.dynamic.entity1 does not have a dependency on
+    // itself.
+    $this->assertArrayNotHasKey('config_test.dynamic.entity1', $dependents);
+    // Verify that the config_test.dynamic.entity2 has a dependency on
+    // config_test.dynamic.entity1.
+    $this->assertArrayHasKey('config_test.dynamic.entity2', $dependents);
+    $this->assertNotNull($dependents['config_test.dynamic.entity2']);
+    // Verify that the config_test.dynamic.entity3 has a dependency on
+    // config_test.dynamic.entity1.
+    $this->assertArrayHasKey('config_test.dynamic.entity3', $dependents);
+    $this->assertNotNull($dependents['config_test.dynamic.entity3']);
+    // Verify that the config_test.dynamic.entity4 has a dependency on
+    // config_test.dynamic.entity1.
+    $this->assertArrayHasKey('config_test.dynamic.entity4', $dependents);
+    $this->assertNotNull($dependents['config_test.dynamic.entity4']);
 
     // Test getting $entity2's dependencies as entities.
     $dependents = $config_manager->findConfigEntityDependentsAsEntities('config', [$entity2->getConfigDependencyName()]);
@@ -95,10 +118,22 @@ public function testDependencyManagement() {
     // Test getting node module's dependencies as configuration dependency
     // objects.
     $dependents = $config_manager->findConfigEntityDependents('module', ['node']);
-    $this->assertTrue(isset($dependents['config_test.dynamic.entity1']), 'config_test.dynamic.entity1 has a dependency on the Node module.');
-    $this->assertTrue(isset($dependents['config_test.dynamic.entity2']), 'config_test.dynamic.entity2 has a dependency on the Node module.');
-    $this->assertTrue(isset($dependents['config_test.dynamic.entity3']), 'config_test.dynamic.entity3 has a dependency on the Node module.');
-    $this->assertTrue(isset($dependents['config_test.dynamic.entity4']), 'config_test.dynamic.entity4 has a dependency on the Node module.');
+    // Verify that the config_test.dynamic.entity1 has a dependency on the Node
+    // module.
+    $this->assertArrayHasKey('config_test.dynamic.entity1', $dependents);
+    $this->assertNotNull($dependents['config_test.dynamic.entity1']);
+    // Verify that the config_test.dynamic.entity2 has a dependency on the Node
+    // module.
+    $this->assertArrayHasKey('config_test.dynamic.entity2', $dependents);
+    $this->assertNotNull($dependents['config_test.dynamic.entity2']);
+    // Verify that the config_test.dynamic.entity3 has a dependency on the Node
+    // module.
+    $this->assertArrayHasKey('config_test.dynamic.entity3', $dependents);
+    $this->assertNotNull($dependents['config_test.dynamic.entity3']);
+    // Verify that the config_test.dynamic.entity4 has a dependency on the Node
+    // module.
+    $this->assertArrayHasKey('config_test.dynamic.entity4', $dependents);
+    $this->assertNotNull($dependents['config_test.dynamic.entity4']);
 
     // Test getting node module's dependencies as configuration dependency
     // objects after making $entity3 also dependent on node module but $entity1
@@ -106,10 +141,20 @@ public function testDependencyManagement() {
     $entity1->setEnforcedDependencies([])->save();
     $entity3->setEnforcedDependencies(['module' => ['node'], 'config' => [$entity2->getConfigDependencyName()]])->save();
     $dependents = $config_manager->findConfigEntityDependents('module', ['node']);
-    $this->assertFalse(isset($dependents['config_test.dynamic.entity1']), 'config_test.dynamic.entity1 does not have a dependency on the Node module.');
-    $this->assertFalse(isset($dependents['config_test.dynamic.entity2']), 'config_test.dynamic.entity2 does not have a dependency on the Node module.');
-    $this->assertTrue(isset($dependents['config_test.dynamic.entity3']), 'config_test.dynamic.entity3 has a dependency on the Node module.');
-    $this->assertTrue(isset($dependents['config_test.dynamic.entity4']), 'config_test.dynamic.entity4 has a dependency on the Node module.');
+    // Verify that the config_test.dynamic.entity1 does not have a dependency on
+    // the Node module.
+    $this->assertArrayNotHasKey('config_test.dynamic.entity1', $dependents);
+    // Verify that the config_test.dynamic.entity2 does not have a dependency on
+    // the Node module.
+    $this->assertArrayNotHasKey('config_test.dynamic.entity2', $dependents);
+    // Verify that the config_test.dynamic.entity3 has a dependency on the Node
+    // module.
+    $this->assertArrayHasKey('config_test.dynamic.entity3', $dependents);
+    $this->assertNotNull($dependents['config_test.dynamic.entity3']);
+    // Verify that the config_test.dynamic.entity4 has a dependency on the Node
+    // module.
+    $this->assertArrayHasKey('config_test.dynamic.entity4', $dependents);
+    $this->assertNotNull($dependents['config_test.dynamic.entity4']);
 
     // Test dependency on a content entity.
     $entity_test = EntityTest::create([
@@ -119,10 +164,21 @@ public function testDependencyManagement() {
     $entity_test->save();
     $entity2->setEnforcedDependencies(['config' => [$entity1->getConfigDependencyName()], 'content' => [$entity_test->getConfigDependencyName()]])->save();
     $dependents = $config_manager->findConfigEntityDependents('content', [$entity_test->getConfigDependencyName()]);
-    $this->assertFalse(isset($dependents['config_test.dynamic.entity1']), 'config_test.dynamic.entity1 does not have a dependency on the content entity.');
-    $this->assertTrue(isset($dependents['config_test.dynamic.entity2']), 'config_test.dynamic.entity2 has a dependency on the content entity.');
-    $this->assertTrue(isset($dependents['config_test.dynamic.entity3']), 'config_test.dynamic.entity3 has a dependency on the content entity (via entity2).');
-    $this->assertTrue(isset($dependents['config_test.dynamic.entity4']), 'config_test.dynamic.entity4 has a dependency on the content entity (via entity3).');
+    // Verify that the config_test.dynamic.entity1 does not have a dependency on
+    // the content entity.
+    $this->assertArrayNotHasKey('config_test.dynamic.entity1', $dependents);
+    // Verify that the config_test.dynamic.entity2 has a dependency on the
+    // content entity.
+    $this->assertArrayHasKey('config_test.dynamic.entity2', $dependents);
+    $this->assertNotNull($dependents['config_test.dynamic.entity2']);
+    // Verify that the config_test.dynamic.entity3 has a dependency on the
+    // content entity (via entity2).
+    $this->assertArrayHasKey('config_test.dynamic.entity3', $dependents);
+    $this->assertNotNull($dependents['config_test.dynamic.entity3']);
+    // Verify that the config_test.dynamic.entity4 has a dependency on the
+    // content entity (via entity3).
+    $this->assertArrayHasKey('config_test.dynamic.entity4', $dependents);
+    $this->assertNotNull($dependents['config_test.dynamic.entity4']);
 
     // Create a configuration entity of a different type with the same ID as one
     // of the entities already created.
diff --git a/core/tests/Drupal/KernelTests/Core/Config/ConfigImporterTest.php b/core/tests/Drupal/KernelTests/Core/Config/ConfigImporterTest.php
index 1e6c1b3ead..08a887d6bb 100644
--- a/core/tests/Drupal/KernelTests/Core/Config/ConfigImporterTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Config/ConfigImporterTest.php
@@ -76,7 +76,7 @@ public function testNoImport() {
     $this->assertIdentical($config->get('id'), 'dotted.default');
 
     // Verify that a bare $this->config() does not involve module APIs.
-    $this->assertFalse(isset($GLOBALS['hook_config_test']));
+    $this->assertArrayNotHasKey('hook_config_test', $GLOBALS);
   }
 
   /**
@@ -143,12 +143,15 @@ public function testDeleted() {
     $this->assertIdentical($config->get('id'), NULL);
 
     // Verify that appropriate module API hooks have been invoked.
-    $this->assertTrue(isset($GLOBALS['hook_config_test']['load']));
-    $this->assertFalse(isset($GLOBALS['hook_config_test']['presave']));
-    $this->assertFalse(isset($GLOBALS['hook_config_test']['insert']));
-    $this->assertFalse(isset($GLOBALS['hook_config_test']['update']));
-    $this->assertTrue(isset($GLOBALS['hook_config_test']['predelete']));
-    $this->assertTrue(isset($GLOBALS['hook_config_test']['delete']));
+    $this->assertArrayHasKey('load', $GLOBALS['hook_config_test']);
+    $this->assertNotNull($GLOBALS['hook_config_test']['load']);
+    $this->assertArrayNotHasKey('presave', $GLOBALS['hook_config_test']);
+    $this->assertArrayNotHasKey('insert', $GLOBALS['hook_config_test']);
+    $this->assertArrayNotHasKey('update', $GLOBALS['hook_config_test']);
+    $this->assertArrayHasKey('predelete', $GLOBALS['hook_config_test']);
+    $this->assertNotNull($GLOBALS['hook_config_test']['predelete']);
+    $this->assertArrayHasKey('delete', $GLOBALS['hook_config_test']);
+    $this->assertNotNull($GLOBALS['hook_config_test']['delete']);
 
     $this->assertFalse($this->configImporter->hasUnprocessedConfigurationChanges());
     $logs = $this->configImporter->getErrors();
@@ -192,16 +195,19 @@ public function testNew() {
     $this->assertIdentical($config->get('label'), $original_dynamic_data['label']);
 
     // Verify that appropriate module API hooks have been invoked.
-    $this->assertFalse(isset($GLOBALS['hook_config_test']['load']));
-    $this->assertTrue(isset($GLOBALS['hook_config_test']['presave']));
-    $this->assertTrue(isset($GLOBALS['hook_config_test']['insert']));
-    $this->assertFalse(isset($GLOBALS['hook_config_test']['update']));
-    $this->assertFalse(isset($GLOBALS['hook_config_test']['predelete']));
-    $this->assertFalse(isset($GLOBALS['hook_config_test']['delete']));
+    $this->assertArrayNotHasKey('load', $GLOBALS['hook_config_test']);
+    $this->assertArrayHasKey('presave', $GLOBALS['hook_config_test']);
+    $this->assertNotNull($GLOBALS['hook_config_test']['presave']);
+    $this->assertArrayHasKey('insert', $GLOBALS['hook_config_test']);
+    $this->assertNotNull($GLOBALS['hook_config_test']['insert']);
+    $this->assertArrayNotHasKey('update', $GLOBALS['hook_config_test']);
+    $this->assertArrayNotHasKey('predelete', $GLOBALS['hook_config_test']);
+    $this->assertArrayNotHasKey('delete', $GLOBALS['hook_config_test']);
 
     // Verify that hook_config_import_steps_alter() can add steps to
     // configuration synchronization.
-    $this->assertTrue(isset($GLOBALS['hook_config_test']['config_import_steps_alter']));
+    $this->assertArrayHasKey('config_import_steps_alter', $GLOBALS['hook_config_test']);
+    $this->assertNotNull($GLOBALS['hook_config_test']['config_import_steps_alter']);
 
     // Verify that there is nothing more to import.
     $this->assertFalse($this->configImporter->hasUnprocessedConfigurationChanges());
@@ -519,12 +525,15 @@ public function testUpdated() {
     $this->assertIdentical($sync->read($dynamic_name), $original_dynamic_data);
 
     // Verify that appropriate module API hooks have been invoked.
-    $this->assertTrue(isset($GLOBALS['hook_config_test']['load']));
-    $this->assertTrue(isset($GLOBALS['hook_config_test']['presave']));
-    $this->assertFalse(isset($GLOBALS['hook_config_test']['insert']));
-    $this->assertTrue(isset($GLOBALS['hook_config_test']['update']));
-    $this->assertFalse(isset($GLOBALS['hook_config_test']['predelete']));
-    $this->assertFalse(isset($GLOBALS['hook_config_test']['delete']));
+    $this->assertArrayHasKey('load', $GLOBALS['hook_config_test']);
+    $this->assertNotNull($GLOBALS['hook_config_test']['load']);
+    $this->assertArrayHasKey('presave', $GLOBALS['hook_config_test']);
+    $this->assertNotNull($GLOBALS['hook_config_test']['presave']);
+    $this->assertArrayNotHasKey('insert', $GLOBALS['hook_config_test']);
+    $this->assertArrayHasKey('update', $GLOBALS['hook_config_test']);
+    $this->assertNotNull($GLOBALS['hook_config_test']['update']);
+    $this->assertArrayNotHasKey('predelete', $GLOBALS['hook_config_test']);
+    $this->assertArrayNotHasKey('delete', $GLOBALS['hook_config_test']);
 
     // Verify that there is nothing more to import.
     $this->assertFalse($this->configImporter->hasUnprocessedConfigurationChanges());
diff --git a/core/tests/Drupal/KernelTests/Core/Config/ConfigInstallTest.php b/core/tests/Drupal/KernelTests/Core/Config/ConfigInstallTest.php
index 0897ef8666..4209f4d861 100644
--- a/core/tests/Drupal/KernelTests/Core/Config/ConfigInstallTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Config/ConfigInstallTest.php
@@ -184,7 +184,8 @@ public function testCollectionInstallationCollectionConfigEntity() {
     // a label.
     $name = 'config_test.dynamic.dotted.default';
     $data = $active_storage->read($name);
-    $this->assertTrue(isset($data['uuid']));
+    $this->assertArrayHasKey('uuid', $data);
+    $this->assertNotNull($data['uuid']);
     $data = $collection_storage->read($name);
     $this->assertSame(['label' => 'entity'], $data);
   }
@@ -239,7 +240,7 @@ public function testLanguage() {
     // Test imported configuration with implicit language code.
     $storage = new InstallStorage();
     $data = $storage->read('config_test.dynamic.dotted.english');
-    $this->assertTrue(!isset($data['langcode']));
+    $this->assertArrayNotHasKey('langcode', $data);
     $this->assertEqual(
       $this->config('config_test.dynamic.dotted.english')->get('langcode'),
       'en'
diff --git a/core/tests/Drupal/KernelTests/Core/Config/ConfigOverrideTest.php b/core/tests/Drupal/KernelTests/Core/Config/ConfigOverrideTest.php
index 3a9a289512..69e3a68ad7 100644
--- a/core/tests/Drupal/KernelTests/Core/Config/ConfigOverrideTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Config/ConfigOverrideTest.php
@@ -48,7 +48,7 @@ public function testConfOverride() {
     $active = $this->container->get('config.storage');
     $data = $active->read('config_test.system');
     $this->assertIdentical($data['foo'], $expected_original_data['foo']);
-    $this->assertFalse(isset($data['baz']));
+    $this->assertArrayNotHasKey('baz', $data);
     $this->assertIdentical($data['404'], $expected_original_data['404']);
 
     // Get the configuration object with overrides.
@@ -104,7 +104,7 @@ public function testConfOverride() {
     // Verify that the new configuration data exists. Have to read storage
     // directly otherwise overrides will apply.
     $this->assertIdentical($data['foo'], $expected_new_data['foo']);
-    $this->assertFalse(isset($data['baz']));
+    $this->assertArrayNotHasKey('baz', $data);
     $this->assertIdentical($data['404'], $expected_new_data['404']);
 
     // Verify that the overrides are still working.
diff --git a/core/tests/Drupal/KernelTests/Core/Database/ConnectionUnitTest.php b/core/tests/Drupal/KernelTests/Core/Database/ConnectionUnitTest.php
index 2005550da8..c516b19531 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/ConnectionUnitTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/ConnectionUnitTest.php
@@ -2,7 +2,6 @@
 
 namespace Drupal\KernelTests\Core\Database;
 
-use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Database\Database;
 use Drupal\KernelTests\KernelTestBase;
 
@@ -98,7 +97,8 @@ protected function getConnectionId() {
    */
   protected function assertConnection($id) {
     $list = $this->monitor->query($this->getQuery()['processlist'])->fetchAllKeyed(0, 0);
-    return $this->assertTrue(isset($list[$id]), new FormattableMarkup('Connection ID @id found.', ['@id' => $id]));
+    $this->assertArrayHasKey($id, $list);
+    $this->assertNotNull($list[$id]);
   }
 
   /**
@@ -109,7 +109,7 @@ protected function assertConnection($id) {
    */
   protected function assertNoConnection($id) {
     $list = $this->monitor->query($this->getQuery()['processlist'])->fetchAllKeyed(0, 0);
-    return $this->assertFalse(isset($list[$id]), new FormattableMarkup('Connection ID @id not found.', ['@id' => $id]));
+    $this->assertArrayNotHasKey($id, $list);
   }
 
   /**
diff --git a/core/tests/Drupal/KernelTests/Core/Database/SelectComplexTest.php b/core/tests/Drupal/KernelTests/Core/Database/SelectComplexTest.php
index 773a5c7e87..1a79260ca7 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/SelectComplexTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/SelectComplexTest.php
@@ -238,7 +238,7 @@ public function testCountQueryRemovals() {
     $db_type = Database::getConnection()->databaseType();
     $this->assertEqual($orderby['name'], ($db_type == 'pgsql' ? 'ASC NULLS FIRST' : 'ASC'), 'Query correctly sets ordering clause.');
     $orderby = $count->getOrderBy();
-    $this->assertFalse(isset($orderby['name']), 'Count query correctly unsets ordering clause.');
+    $this->assertArrayNotHasKey('name', $orderby);
 
     // Make sure that the count query works.
     $count = $count->execute()->fetchField();
diff --git a/core/tests/Drupal/KernelTests/Core/Entity/EntityDefinitionUpdateTest.php b/core/tests/Drupal/KernelTests/Core/Entity/EntityDefinitionUpdateTest.php
index 400037adf0..fc5f207c2e 100644
--- a/core/tests/Drupal/KernelTests/Core/Entity/EntityDefinitionUpdateTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Entity/EntityDefinitionUpdateTest.php
@@ -84,14 +84,17 @@ public function testNewEntityType() {
 
     // Check that the "entity_test_new" is not defined.
     $entity_types = $this->entityTypeManager->getDefinitions();
-    $this->assertFalse(isset($entity_types[$entity_type_id]), 'The "entity_test_new" entity type does not exist.');
+    // Verify that the "entity_test_new" entity type does not exist.
+    $this->assertArrayNotHasKey($entity_type_id, $entity_types);
     $this->assertFalse($schema->tableExists($entity_type_id), 'Schema for the "entity_test_new" entity type does not exist.');
 
     // Check that the "entity_test_new" is now defined and the related schema
     // has been created.
     $this->enableNewEntityType();
     $entity_types = $this->entityTypeManager->getDefinitions();
-    $this->assertTrue(isset($entity_types[$entity_type_id]), 'The "entity_test_new" entity type exists.');
+    // Verify that the "entity_test_new" entity type exists.
+    $this->assertArrayHasKey($entity_type_id, $entity_types);
+    $this->assertNotNull($entity_types[$entity_type_id]);
     $this->assertTrue($schema->tableExists($entity_type_id), 'Schema for the "entity_test_new" entity type has been created.');
   }
 
diff --git a/core/tests/Drupal/KernelTests/Core/Entity/EntityReferenceFieldTest.php b/core/tests/Drupal/KernelTests/Core/Entity/EntityReferenceFieldTest.php
index a219ac38ac..b70c9d2839 100644
--- a/core/tests/Drupal/KernelTests/Core/Entity/EntityReferenceFieldTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Entity/EntityReferenceFieldTest.php
@@ -185,7 +185,7 @@ public function testReferencedEntitiesMultipleLoad() {
       else {
         // A non-existent or NULL entity target id must not return any item in
         // the target entities set.
-        $this->assertFalse(isset($entities[$delta]));
+        $this->assertArrayNotHasKey($delta, $entities);
       }
     }
   }
diff --git a/core/tests/Drupal/KernelTests/Core/Entity/EntityTranslationTest.php b/core/tests/Drupal/KernelTests/Core/Entity/EntityTranslationTest.php
index 506f1f458a..1cb3cc55d8 100644
--- a/core/tests/Drupal/KernelTests/Core/Entity/EntityTranslationTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Entity/EntityTranslationTest.php
@@ -491,9 +491,15 @@ protected function doTestEntityTranslationAPI($entity_type) {
     $entity->save();
     $hooks = $this->getHooksInfo();
 
-    $this->assertTrue(isset($hooks['entity_translation_create']), 'The generic entity translation creation hook is run when adding and removing a translation without storing it.');
+    // Verify that the generic entity translation creation hook is run when
+    // adding and removing a translation without storing it.
+    $this->assertArrayHasKey('entity_translation_create', $hooks);
+    $this->assertNotNull($hooks['entity_translation_create']);
     unset($hooks['entity_translation_create']);
-    $this->assertTrue(isset($hooks[$entity_type . '_translation_create']), 'The entity-type-specific entity translation creation hook is run when adding and removing a translation without storing it.');
+    // Verify that the entity-type-specific entity translation creation hook is
+    // run when adding and removing a translation without storing it.
+    $this->assertArrayHasKey($entity_type . '_translation_create', $hooks);
+    $this->assertNotNull($hooks[$entity_type . '_translation_create']);
     unset($hooks[$entity_type . '_translation_create']);
 
     $this->assertEmpty($hooks, 'No other hooks beyond the entity translation creation hooks are run when adding and removing a translation without storing it.');
diff --git a/core/tests/Drupal/KernelTests/Core/Entity/FieldWidgetConstraintValidatorTest.php b/core/tests/Drupal/KernelTests/Core/Entity/FieldWidgetConstraintValidatorTest.php
index 2a35cce185..3154bc0182 100644
--- a/core/tests/Drupal/KernelTests/Core/Entity/FieldWidgetConstraintValidatorTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Entity/FieldWidgetConstraintValidatorTest.php
@@ -114,16 +114,17 @@ public function testValidationWithCompositeConstraint() {
     $entity->save();
 
     $errors = $this->getErrorsForEntity($entity);
-    $this->assertFalse(isset($errors['name']));
-    $this->assertFalse(isset($errors['type']));
+    $this->assertArrayNotHasKey('name', $errors);
+    $this->assertArrayNotHasKey('type', $errors);
 
     // Provide an invalid value for the name field.
     $entity = EntityTestCompositeConstraint::create([
       'name' => 'failure-field-name',
     ]);
     $errors = $this->getErrorsForEntity($entity);
-    $this->assertTrue(isset($errors['name']));
-    $this->assertFalse(isset($errors['type']));
+    $this->assertArrayHasKey('name', $errors);
+    $this->assertNotNull($errors['name']);
+    $this->assertArrayNotHasKey('type', $errors);
 
     // Hide the second field (type) and ensure the validation still happens. The
     // error message appears on the first field (name).
@@ -131,8 +132,9 @@ public function testValidationWithCompositeConstraint() {
       'name' => 'failure-field-name',
     ]);
     $errors = $this->getErrorsForEntity($entity, ['type']);
-    $this->assertTrue(isset($errors['name']));
-    $this->assertFalse(isset($errors['type']));
+    $this->assertArrayHasKey('name', $errors);
+    $this->assertNotNull($errors['name']);
+    $this->assertArrayNotHasKey('type', $errors);
 
     // Provide a violation again, but this time hide the first field (name).
     // Ensure that the validation still happens and the error message is moved
@@ -141,8 +143,9 @@ public function testValidationWithCompositeConstraint() {
       'name' => 'failure-field-name',
     ]);
     $errors = $this->getErrorsForEntity($entity, ['name']);
-    $this->assertFalse(isset($errors['name']));
-    $this->assertTrue(isset($errors['type']));
+    $this->assertArrayNotHasKey('name', $errors);
+    $this->assertArrayHasKey('type', $errors);
+    $this->assertNotNull($errors['type']);
     $this->assertEqual($errors['type'], new FormattableMarkup('The validation failed because the value conflicts with the value in %field_name, which you cannot access.', ['%field_name' => 'name']));
   }
 
diff --git a/core/tests/Drupal/KernelTests/Core/Form/FormValidationMessageOrderTest.php b/core/tests/Drupal/KernelTests/Core/Form/FormValidationMessageOrderTest.php
index 6755fd53d8..041566d095 100644
--- a/core/tests/Drupal/KernelTests/Core/Form/FormValidationMessageOrderTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Form/FormValidationMessageOrderTest.php
@@ -82,7 +82,8 @@ public function testLimitValidationErrors() {
 
     $messages = \Drupal::messenger()->all();
     \Drupal::messenger()->deleteAll();
-    $this->assertTrue(isset($messages['error']));
+    $this->assertArrayHasKey('error', $messages);
+    $this->assertNotNull($messages['error']);
     $error_messages = $messages['error'];
     $this->assertEqual($error_messages[0], 'Three field is required.');
     $this->assertEqual($error_messages[1], 'Four field is required.');
diff --git a/core/tests/Drupal/KernelTests/Core/Form/TriggeringElementProgrammedTest.php b/core/tests/Drupal/KernelTests/Core/Form/TriggeringElementProgrammedTest.php
index b2552c8cca..9607c78864 100644
--- a/core/tests/Drupal/KernelTests/Core/Form/TriggeringElementProgrammedTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Form/TriggeringElementProgrammedTest.php
@@ -75,8 +75,11 @@ public function testLimitValidationErrors() {
 
     // Verify that only the specified section was validated.
     $errors = $form_state->getErrors();
-    $this->assertTrue(isset($errors['one']), "Section 'one' was validated.");
-    $this->assertFalse(isset($errors['two']), "Section 'two' was not validated.");
+    // Verify that section 'one' was validated.
+    $this->assertArrayHasKey('one', $errors);
+    $this->assertNotNull($errors['one']);
+    // Verify that section 'two' was not validated.
+    $this->assertArrayNotHasKey('two', $errors);
 
     // Verify that there are only values for the specified section.
     $this->assertTrue($form_state->hasValue('one'), "Values for section 'one' found.");
diff --git a/core/tests/Drupal/KernelTests/Core/KeyValueStore/StorageTestBase.php b/core/tests/Drupal/KernelTests/Core/KeyValueStore/StorageTestBase.php
index ca4a30f184..f918874578 100644
--- a/core/tests/Drupal/KernelTests/Core/KeyValueStore/StorageTestBase.php
+++ b/core/tests/Drupal/KernelTests/Core/KeyValueStore/StorageTestBase.php
@@ -145,7 +145,8 @@ public function testNonExistingKeys() {
     // Verify that a non-existing key is not returned when getting multiple keys.
     $stores[0]->set('bar', 'baz');
     $values = $stores[0]->getMultiple(['foo', 'bar']);
-    $this->assertFalse(isset($values['foo']), "Key 'foo' not found.");
+    // Verify that key 'foo' not found.
+    $this->assertArrayNotHasKey('foo', $values);
     $this->assertIdentical($values['bar'], 'baz');
   }
 
diff --git a/core/tests/Drupal/KernelTests/Core/Theme/ThemeInstallerTest.php b/core/tests/Drupal/KernelTests/Core/Theme/ThemeInstallerTest.php
index 7973648f62..8fbf57b5da 100644
--- a/core/tests/Drupal/KernelTests/Core/Theme/ThemeInstallerTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Theme/ThemeInstallerTest.php
@@ -62,14 +62,15 @@ public function testInstall() {
     $name = 'test_basetheme';
 
     $themes = $this->themeHandler()->listInfo();
-    $this->assertFalse(isset($themes[$name]));
+    $this->assertArrayNotHasKey($name, $themes);
 
     $this->themeInstaller()->install([$name]);
 
     $this->assertIdentical($this->extensionConfig()->get("theme.$name"), 0);
 
     $themes = $this->themeHandler()->listInfo();
-    $this->assertTrue(isset($themes[$name]));
+    $this->assertArrayHasKey($name, $themes);
+    $this->assertNotNull($themes[$name]);
     $this->assertEqual($themes[$name]->getName(), $name);
 
     // Verify that test_basetheme.settings is active.
@@ -91,14 +92,17 @@ public function testInstallSubTheme() {
     $this->themeInstaller()->install([$name]);
 
     $themes = $this->themeHandler()->listInfo();
-    $this->assertTrue(isset($themes[$name]));
-    $this->assertTrue(isset($themes[$base_name]));
+    $this->assertArrayHasKey($name, $themes);
+    $this->assertNotNull($themes[$name]);
+    $this->assertArrayHasKey($base_name, $themes);
+    $this->assertNotNull($themes[$base_name]);
 
     $this->themeInstaller()->uninstall([$name]);
 
     $themes = $this->themeHandler()->listInfo();
-    $this->assertFalse(isset($themes[$name]));
-    $this->assertTrue(isset($themes[$base_name]));
+    $this->assertArrayNotHasKey($name, $themes);
+    $this->assertArrayHasKey($base_name, $themes);
+    $this->assertNotNull($themes[$base_name]);
   }
 
   /**
@@ -222,8 +226,10 @@ public function testUninstallDefault() {
     $this->config('system.theme')->set('default', $name)->save();
 
     $themes = $this->themeHandler()->listInfo();
-    $this->assertTrue(isset($themes[$name]));
-    $this->assertTrue(isset($themes[$other_name]));
+    $this->assertArrayHasKey($name, $themes);
+    $this->assertNotNull($themes[$name]);
+    $this->assertArrayHasKey($other_name, $themes);
+    $this->assertNotNull($themes[$other_name]);
 
     try {
       $message = 'ThemeInstaller::uninstall() throws InvalidArgumentException upon disabling default theme.';
@@ -235,8 +241,10 @@ public function testUninstallDefault() {
     }
 
     $themes = $this->themeHandler()->listInfo();
-    $this->assertTrue(isset($themes[$name]));
-    $this->assertTrue(isset($themes[$other_name]));
+    $this->assertArrayHasKey($name, $themes);
+    $this->assertNotNull($themes[$name]);
+    $this->assertArrayHasKey($other_name, $themes);
+    $this->assertNotNull($themes[$other_name]);
   }
 
   /**
@@ -249,8 +257,10 @@ public function testUninstallAdmin() {
     $this->config('system.theme')->set('admin', $name)->save();
 
     $themes = $this->themeHandler()->listInfo();
-    $this->assertTrue(isset($themes[$name]));
-    $this->assertTrue(isset($themes[$other_name]));
+    $this->assertArrayHasKey($name, $themes);
+    $this->assertNotNull($themes[$name]);
+    $this->assertArrayHasKey($other_name, $themes);
+    $this->assertNotNull($themes[$other_name]);
 
     try {
       $message = 'ThemeInstaller::uninstall() throws InvalidArgumentException upon disabling admin theme.';
@@ -262,8 +272,10 @@ public function testUninstallAdmin() {
     }
 
     $themes = $this->themeHandler()->listInfo();
-    $this->assertTrue(isset($themes[$name]));
-    $this->assertTrue(isset($themes[$other_name]));
+    $this->assertArrayHasKey($name, $themes);
+    $this->assertNotNull($themes[$name]);
+    $this->assertArrayHasKey($other_name, $themes);
+    $this->assertNotNull($themes[$other_name]);
   }
 
   /**
@@ -277,8 +289,9 @@ public function testUninstallSubTheme() {
     $this->themeInstaller()->uninstall([$name]);
 
     $themes = $this->themeHandler()->listInfo();
-    $this->assertFalse(isset($themes[$name]));
-    $this->assertTrue(isset($themes[$base_name]));
+    $this->assertArrayNotHasKey($name, $themes);
+    $this->assertArrayHasKey($base_name, $themes);
+    $this->assertNotNull($themes[$base_name]);
   }
 
   /**
@@ -300,15 +313,17 @@ public function testUninstallBaseBeforeSubTheme() {
     }
 
     $themes = $this->themeHandler()->listInfo();
-    $this->assertTrue(isset($themes[$name]));
-    $this->assertTrue(isset($themes[$sub_name]));
+    $this->assertArrayHasKey($name, $themes);
+    $this->assertNotNull($themes[$name]);
+    $this->assertArrayHasKey($sub_name, $themes);
+    $this->assertNotNull($themes[$sub_name]);
 
     // Verify that uninstalling both at the same time works.
     $this->themeInstaller()->uninstall([$name, $sub_name]);
 
     $themes = $this->themeHandler()->listInfo();
-    $this->assertFalse(isset($themes[$name]));
-    $this->assertFalse(isset($themes[$sub_name]));
+    $this->assertArrayNotHasKey($name, $themes);
+    $this->assertArrayNotHasKey($sub_name, $themes);
   }
 
   /**
@@ -351,7 +366,8 @@ public function testUninstall() {
     // Ensure that the uninstalled theme can be installed again.
     $this->themeInstaller()->install([$name]);
     $themes = $this->themeHandler()->listInfo();
-    $this->assertTrue(isset($themes[$name]));
+    $this->assertArrayHasKey($name, $themes);
+    $this->assertNotNull($themes[$name]);
     $this->assertEqual($themes[$name]->getName(), $name);
     $this->assertNotEmpty($this->config("$name.settings")->get());
   }
@@ -391,17 +407,21 @@ public function testThemeInfoAlter() {
     $this->assertTrue($this->moduleHandler()->moduleExists('module_test'));
 
     $themes = $this->themeHandler()->listInfo();
-    $this->assertTrue(isset($themes[$name]->info['regions']['test_region']));
+    $this->assertArrayHasKey('test_region', $themes[$name]->info['regions']);
+    $this->assertNotNull($themes[$name]->info['regions']['test_region']);
 
     // Legacy assertions.
     // @todo Remove once theme initialization/info has been modernized.
     // @see https://www.drupal.org/node/2228093
     $info = \Drupal::service('extension.list.theme')->getExtensionInfo($name);
-    $this->assertTrue(isset($info['regions']['test_region']));
+    $this->assertArrayHasKey('test_region', $info['regions']);
+    $this->assertNotNull($info['regions']['test_region']);
     $regions = system_region_list($name);
-    $this->assertTrue(isset($regions['test_region']));
+    $this->assertArrayHasKey('test_region', $regions);
+    $this->assertNotNull($regions['test_region']);
     $theme_list = \Drupal::service('theme_handler')->listInfo();
-    $this->assertTrue(isset($theme_list[$name]->info['regions']['test_region']));
+    $this->assertArrayHasKey('test_region', $theme_list[$name]->info['regions']);
+    $this->assertNotNull($theme_list[$name]->info['regions']['test_region']);
 
     $this->moduleInstaller()->uninstall(['module_test']);
     $this->assertFalse($this->moduleHandler()->moduleExists('module_test'));
@@ -415,7 +435,7 @@ public function testThemeInfoAlter() {
     $info = \Drupal::service('extension.list.theme')->getExtensionInfo($name);
     $this->assertFalse(isset($info['regions']['test_region']));
     $regions = system_region_list($name);
-    $this->assertFalse(isset($regions['test_region']));
+    $this->assertArrayNotHasKey('test_region', $regions);
     $theme_list = \Drupal::service('theme_handler')->listInfo();
     $this->assertFalse(isset($theme_list[$name]->info['regions']['test_region']));
   }
diff --git a/core/tests/Drupal/KernelTests/Core/TypedData/TypedDataTest.php b/core/tests/Drupal/KernelTests/Core/TypedData/TypedDataTest.php
index 196e94fe0c..2887e0dd1b 100644
--- a/core/tests/Drupal/KernelTests/Core/TypedData/TypedDataTest.php
+++ b/core/tests/Drupal/KernelTests/Core/TypedData/TypedDataTest.php
@@ -379,8 +379,9 @@ public function testTypedDataLists() {
     $typed_data[] = 'four';
     $this->assertEqual($typed_data[3]->getValue(), 'four');
     $this->assertEqual($typed_data->count(), 4);
-    $this->assertTrue(isset($typed_data[0]));
-    $this->assertTrue(!isset($typed_data[6]));
+    $this->assertArrayHasKey(0, $typed_data);
+    $this->assertNotNull($typed_data[0]);
+    $this->assertArrayNotHasKey(6, $typed_data);
 
     // Test isEmpty and cloning.
     $this->assertFalse($typed_data->isEmpty());
@@ -642,14 +643,25 @@ public function testTypedDataValidation() {
 
     // Test getting constraint definitions by type.
     $definitions = $this->typedDataManager->getValidationConstraintManager()->getDefinitionsByType('entity');
-    $this->assertTrue(isset($definitions['EntityType']), 'Constraint plugin found for type entity.');
-    $this->assertTrue(isset($definitions['Null']), 'Constraint plugin found for type entity.');
-    $this->assertTrue(isset($definitions['NotNull']), 'Constraint plugin found for type entity.');
+    // Verify that constraint plugin found for type entity.
+    $this->assertArrayHasKey('EntityType', $definitions);
+    $this->assertNotNull($definitions['EntityType']);
+    // Verify that constraint plugin found for type entity.
+    $this->assertArrayHasKey('Null', $definitions);
+    $this->assertNotNull($definitions['Null']);
+    // Verify that constraint plugin found for type entity.
+    $this->assertArrayHasKey('NotNull', $definitions);
+    $this->assertNotNull($definitions['NotNull']);
 
     $definitions = $this->typedDataManager->getValidationConstraintManager()->getDefinitionsByType('string');
-    $this->assertFalse(isset($definitions['EntityType']), 'Constraint plugin not found for type string.');
-    $this->assertTrue(isset($definitions['Null']), 'Constraint plugin found for type string.');
-    $this->assertTrue(isset($definitions['NotNull']), 'Constraint plugin found for type string.');
+    // Verify that constraint plugin not found for type string.
+    $this->assertArrayNotHasKey('EntityType', $definitions);
+    // Verify that constraint plugin found for type string.
+    $this->assertArrayHasKey('Null', $definitions);
+    $this->assertNotNull($definitions['Null']);
+    // Verify that constraint plugin found for type string.
+    $this->assertArrayHasKey('NotNull', $definitions);
+    $this->assertNotNull($definitions['NotNull']);
 
     // Test automatic 'required' validation.
     $definition = DataDefinition::create('integer')
diff --git a/core/tests/Drupal/Tests/Component/Annotation/Doctrine/DocParserTest.php b/core/tests/Drupal/Tests/Component/Annotation/Doctrine/DocParserTest.php
index 5d14526931..27f3e03d9c 100644
--- a/core/tests/Drupal/Tests/Component/Annotation/Doctrine/DocParserTest.php
+++ b/core/tests/Drupal/Tests/Component/Annotation/Doctrine/DocParserTest.php
@@ -43,7 +43,8 @@ public function testNestedArraysWithNestedAnnotation()
         $this->assertIsArray($annot->foo[2]);
 
         $nestedArray = $annot->foo[2];
-        $this->assertTrue(isset($nestedArray['key']));
+        $this->assertArrayHasKey('key', $nestedArray);
+        $this->assertNotNull($nestedArray['key']);
         $this->assertInstanceOf(Name::class, $nestedArray['key']);
     }
 
@@ -63,7 +64,8 @@ public function testBasicAnnotations()
         $annot = $result[0];
         $this->assertNull($annot->value);
         $this->assertIsArray($annot->foo);
-        $this->assertTrue(isset($annot->foo['key1']));
+        $this->assertArrayHasKey('key1', $annot->foo);
+        $this->assertNotNull($annot->foo['key1']);
 
         // Numerical arrays
         $result = $parser->parse('@Name({2="foo", 4="bar"})');
@@ -182,8 +184,10 @@ public function testTypicalMethodDocBlock()
 
         $result = $parser->parse($docblock);
         $this->assertCount(2, $result);
-        $this->assertTrue(isset($result[0]));
-        $this->assertTrue(isset($result[1]));
+        $this->assertArrayHasKey(0, $result);
+        $this->assertNotNull($result[0]);
+        $this->assertArrayHasKey(1, $result);
+        $this->assertNotNull($result[1]);
         $annot = $result[0];
         $this->assertInstanceOf(Name::class, $annot);
         $this->assertEquals("bar", $annot->foo);
diff --git a/core/tests/Drupal/Tests/Component/Graph/GraphTest.php b/core/tests/Drupal/Tests/Component/Graph/GraphTest.php
index eb7d7e3cbd..dee77e3654 100644
--- a/core/tests/Drupal/Tests/Component/Graph/GraphTest.php
+++ b/core/tests/Drupal/Tests/Component/Graph/GraphTest.php
@@ -59,7 +59,8 @@ public function testDepthFirstSearch() {
     $this->assertReversePaths($graph, $expected_reverse_paths);
 
     // Assert that DFS didn't created "missing" vertexes automatically.
-    $this->assertFalse(isset($graph[6]), 'Vertex 6 has not been created');
+    // Verify that vertex 6 has not been created.
+    $this->assertArrayNotHasKey(6, $graph);
 
     $expected_components = [
       [1, 2, 3, 4, 5, 7],
diff --git a/core/tests/Drupal/Tests/Component/Utility/NestedArrayTest.php b/core/tests/Drupal/Tests/Component/Utility/NestedArrayTest.php
index 6e52b8d5d4..58b159e8cd 100644
--- a/core/tests/Drupal/Tests/Component/Utility/NestedArrayTest.php
+++ b/core/tests/Drupal/Tests/Component/Utility/NestedArrayTest.php
@@ -114,7 +114,8 @@ public function testUnsetValue() {
     $parents = $this->parents;
     $parents[] = 'foo';
     NestedArray::unsetValue($this->form, $parents, $key_existed);
-    $this->assertTrue(isset($this->form['details']['element']['#value']), 'Outermost nested element key still exists.');
+    $this->assertArrayHasKey('#value', $this->form['details']['element']);
+    $this->assertNotNull($this->form['details']['element']['#value'], 'Outermost nested element key still exists.');
     $this->assertFalse($key_existed, 'Non-existing key not found.');
 
     // Verify unsetting a nested element.
diff --git a/core/tests/Drupal/Tests/Component/Utility/RandomTest.php b/core/tests/Drupal/Tests/Component/Utility/RandomTest.php
index fa37326fd0..ecc7746fcd 100644
--- a/core/tests/Drupal/Tests/Component/Utility/RandomTest.php
+++ b/core/tests/Drupal/Tests/Component/Utility/RandomTest.php
@@ -33,7 +33,7 @@ public function testRandomStringUniqueness() {
     $random = new Random();
     for ($i = 0; $i <= 50; $i++) {
       $str = $random->string(1, TRUE);
-      $this->assertFalse(isset($strings[$str]), 'Generated duplicate random string ' . $str);
+      $this->assertArrayNotHasKey($str, $strings, 'Generated duplicate random string ' . $str);
       $strings[$str] = TRUE;
     }
   }
@@ -48,7 +48,7 @@ public function testRandomNamesUniqueness() {
     $random = new Random();
     for ($i = 0; $i <= 10; $i++) {
       $str = $random->name(1, TRUE);
-      $this->assertFalse(isset($names[$str]), 'Generated duplicate random name ' . $str);
+      $this->assertArrayNotHasKey($str, $names, 'Generated duplicate random string ' . $str);
       $names[$str] = TRUE;
     }
   }
diff --git a/core/tests/Drupal/Tests/Core/Ajax/AjaxResponseTest.php b/core/tests/Drupal/Tests/Core/Ajax/AjaxResponseTest.php
index 18cb2a6454..3a02ecc3e4 100644
--- a/core/tests/Drupal/Tests/Core/Ajax/AjaxResponseTest.php
+++ b/core/tests/Drupal/Tests/Core/Ajax/AjaxResponseTest.php
@@ -63,7 +63,7 @@ public function testCommands() {
 
     $commands = $this->ajaxResponse->getCommands();
     $this->assertSame(['command' => 'one'], $commands[1]);
-    $this->assertFalse(isset($commands[2]));
+    $this->assertArrayNotHasKey(2, $commands);
     $this->assertSame(['command' => 'three', 'class' => 'test-class'], $commands[0]);
   }
 
diff --git a/core/tests/Drupal/Tests/Core/Asset/LibraryDiscoveryParserTest.php b/core/tests/Drupal/Tests/Core/Asset/LibraryDiscoveryParserTest.php
index 6f0fe430a5..f5fd977cfe 100644
--- a/core/tests/Drupal/Tests/Core/Asset/LibraryDiscoveryParserTest.php
+++ b/core/tests/Drupal/Tests/Core/Asset/LibraryDiscoveryParserTest.php
@@ -481,7 +481,8 @@ public function testLibraryWithLicenses() {
     $library = $libraries['no-license-info'];
     $this->assertCount(1, $library['css']);
     $this->assertCount(1, $library['js']);
-    $this->assertTrue(isset($library['license']));
+    $this->assertArrayHasKey('license', $library);
+    $this->assertNotNull($library['license']);
     $default_license = [
       'name' => 'GNU-GPL-2.0-or-later',
       'url' => 'https://www.drupal.org/licensing/faq',
diff --git a/core/tests/Drupal/Tests/Core/Entity/Enhancer/EntityRouteEnhancerTest.php b/core/tests/Drupal/Tests/Core/Entity/Enhancer/EntityRouteEnhancerTest.php
index 297628262c..53154132ff 100644
--- a/core/tests/Drupal/Tests/Core/Entity/Enhancer/EntityRouteEnhancerTest.php
+++ b/core/tests/Drupal/Tests/Core/Entity/Enhancer/EntityRouteEnhancerTest.php
@@ -46,7 +46,7 @@ public function testEnhancer() {
     $new_defaults = $route_enhancer->enhance($defaults, $request);
     $this->assertEquals('\Drupal\Core\Entity\Controller\EntityListController::listing', $new_defaults['_controller'], 'The entity list controller was not set.');
     $this->assertEquals('entity_test.default', $new_defaults['entity_type']);
-    $this->assertFalse(isset($new_defaults['_entity_list']));
+    $this->assertArrayNotHasKey('_entity_list', $new_defaults);
 
     // Set _entity_view and ensure that the entity view controller is set.
     $defaults = [];
@@ -57,7 +57,7 @@ public function testEnhancer() {
     $this->assertEquals('\Drupal\Core\Entity\Controller\EntityViewController::view', $defaults['_controller'], 'The entity view controller was not set.');
     $this->assertEquals($defaults['_entity'], 'Mock entity');
     $this->assertEquals($defaults['view_mode'], 'full');
-    $this->assertFalse(isset($defaults['_entity_view']));
+    $this->assertArrayNotHasKey('_entity_view', $defaults);
 
     // Set _entity_view and ensure that the entity view controller is set using
     // a converter.
@@ -76,7 +76,7 @@ public function testEnhancer() {
     $this->assertEquals('\Drupal\Core\Entity\Controller\EntityViewController::view', $defaults['_controller'], 'The entity view controller was not set.');
     $this->assertEquals($defaults['_entity'], 'Mock entity');
     $this->assertEquals($defaults['view_mode'], 'full');
-    $this->assertFalse(isset($defaults['_entity_view']));
+    $this->assertArrayNotHasKey('_entity_view', $defaults);
 
     // Set _entity_view without a view mode.
     $defaults = [];
@@ -87,7 +87,7 @@ public function testEnhancer() {
     $this->assertEquals('\Drupal\Core\Entity\Controller\EntityViewController::view', $defaults['_controller'], 'The entity view controller was not set.');
     $this->assertEquals($defaults['_entity'], 'Mock entity');
     $this->assertTrue(empty($defaults['view_mode']));
-    $this->assertFalse(isset($defaults['_entity_view']));
+    $this->assertArrayNotHasKey('_entity_view', $defaults);
   }
 
 }
diff --git a/core/tests/Drupal/Tests/Core/Entity/EntityFieldManagerTest.php b/core/tests/Drupal/Tests/Core/Entity/EntityFieldManagerTest.php
index 9456586b65..5cc8c491bb 100644
--- a/core/tests/Drupal/Tests/Core/Entity/EntityFieldManagerTest.php
+++ b/core/tests/Drupal/Tests/Core/Entity/EntityFieldManagerTest.php
@@ -288,7 +288,7 @@ public function testGetBaseFieldDefinitionsTranslatableEntityTypeDefaultLangcode
 
     $definitions = $this->entityFieldManager->getBaseFieldDefinitions('test_entity_type');
 
-    $this->assertTrue(isset($definitions[$default_langcode_key]));
+    $this->assertArrayHasKey($default_langcode_key, $definitions);
   }
 
   /**
diff --git a/core/tests/Drupal/Tests/Core/Form/FormBuilderTest.php b/core/tests/Drupal/Tests/Core/Form/FormBuilderTest.php
index 8060341d32..579299978b 100644
--- a/core/tests/Drupal/Tests/Core/Form/FormBuilderTest.php
+++ b/core/tests/Drupal/Tests/Core/Form/FormBuilderTest.php
@@ -898,17 +898,19 @@ public function testFormTokenCacheability($token, $is_authenticated, $expected_f
     $form_state = new FormState();
     $built_form = $this->formBuilder->buildForm($form_arg, $form_state);
     if (!isset($expected_form_cacheability) || ($method == 'get' && !is_string($token))) {
-      $this->assertFalse(isset($built_form['#cache']));
+      $this->assertArrayNotHasKey('#cache', $built_form);
     }
     else {
-      $this->assertTrue(isset($built_form['#cache']));
+      $this->assertArrayHasKey('#cache', $built_form);
+      $this->assertNotNull($built_form['#cache']);
       $this->assertEquals($expected_form_cacheability, $built_form['#cache']);
     }
     if (!isset($expected_token_cacheability)) {
-      $this->assertFalse(isset($built_form['form_token']));
+      $this->assertArrayNotHasKey('form_token', $built_form);
     }
     else {
-      $this->assertTrue(isset($built_form['form_token']));
+      $this->assertArrayHasKey('form_token', $built_form);
+      $this->assertNotNull($built_form['form_token']);
       $this->assertEquals($expected_token_cacheability, $built_form['form_token']['#cache']);
     }
   }
diff --git a/core/tests/Drupal/Tests/Core/Menu/ContextualLinkManagerTest.php b/core/tests/Drupal/Tests/Core/Menu/ContextualLinkManagerTest.php
index a56c883e37..2e125348f0 100644
--- a/core/tests/Drupal/Tests/Core/Menu/ContextualLinkManagerTest.php
+++ b/core/tests/Drupal/Tests/Core/Menu/ContextualLinkManagerTest.php
@@ -363,8 +363,9 @@ public function testGetContextualLinksArrayByGroupAccessCheck() {
     $result = $this->contextualLinkManager->getContextualLinksArrayByGroup('group1', ['key' => 'value']);
 
     // Ensure that access checking was respected.
-    $this->assertTrue(isset($result['test_plugin1']));
-    $this->assertFalse(isset($result['test_plugin2']));
+    $this->assertArrayHasKey('test_plugin1', $result);
+    $this->assertNotNull($result['test_plugin1']);
+    $this->assertArrayNotHasKey('test_plugin2', $result);
   }
 
   /**
diff --git a/core/tests/Drupal/Tests/Core/Render/RendererPlaceholdersTest.php b/core/tests/Drupal/Tests/Core/Render/RendererPlaceholdersTest.php
index c9f3544462..8647918c9e 100644
--- a/core/tests/Drupal/Tests/Core/Render/RendererPlaceholdersTest.php
+++ b/core/tests/Drupal/Tests/Core/Render/RendererPlaceholdersTest.php
@@ -630,7 +630,8 @@ public function testCacheableParent($test_element, $args, array $expected_placeh
     $element['#prefix'] = '<p>#cache enabled, GET</p>';
     $output = $this->renderer->renderRoot($element);
     $this->assertSame('<p>#cache enabled, GET</p><p>This is a rendered placeholder!</p>', (string) $output, 'Output is overridden.');
-    $this->assertTrue(isset($element['#printed']), 'No cache hit');
+    $this->assertArrayHasKey('#printed', $element);
+    $this->assertNotNull($element['#printed']);
     $this->assertSame('<p>#cache enabled, GET</p><p>This is a rendered placeholder!</p>', (string) $element['#markup'], '#markup is overridden.');
     $expected_js_settings = [
       'foo' => 'bar',
@@ -743,7 +744,7 @@ public function testCacheableParent($test_element, $args, array $expected_placeh
     $element['#prefix'] = '<p>#cache enabled, GET</p>';
     $output = $this->renderer->renderRoot($element);
     $this->assertSame('<p>#cache enabled, GET</p><p>This is a rendered placeholder!</p>', (string) $output, 'Output is overridden.');
-    $this->assertFalse(isset($element['#printed']), 'Cache hit');
+    $this->assertArrayNotHasKey('#printed', $element);
     $this->assertSame('<p>#cache enabled, GET</p><p>This is a rendered placeholder!</p>', (string) $element['#markup'], '#markup is overridden.');
     $expected_js_settings = [
       'foo' => 'bar',
@@ -773,7 +774,8 @@ public function testCacheableParentWithPostRequest($test_element, $args) {
     $element['#prefix'] = '<p>#cache enabled, POST</p>';
     $output = $this->renderer->renderRoot($element);
     $this->assertSame('<p>#cache enabled, POST</p><p>This is a rendered placeholder!</p>', (string) $output, 'Output is overridden.');
-    $this->assertTrue(isset($element['#printed']), 'No cache hit');
+    $this->assertArrayHasKey('#printed', $element);
+    $this->assertNotNull($element['#printed']);
     $this->assertSame('<p>#cache enabled, POST</p><p>This is a rendered placeholder!</p>', (string) $element['#markup'], '#markup is overridden.');
     $expected_js_settings = [
       'foo' => 'bar',
@@ -1000,7 +1002,8 @@ public function testRenderChildrenPlaceholdersDifferentArguments() {
 </details>
 HTML;
     $this->assertSame($expected_output, (string) $output, 'Output is not overridden.');
-    $this->assertTrue(isset($element['#printed']), 'No cache hit');
+    $this->assertArrayHasKey('#printed', $element);
+    $this->assertNotNull($element['#printed']);
     $this->assertSame($expected_output, (string) $element['#markup'], '#markup is not overridden.');
     $expected_js_settings = [
       'foo' => 'bar',
@@ -1049,7 +1052,7 @@ public function testRenderChildrenPlaceholdersDifferentArguments() {
     $element = $test_element;
     $output = $this->renderer->renderRoot($element);
     $this->assertSame($expected_output, (string) $output, 'Output is not overridden.');
-    $this->assertFalse(isset($element['#printed']), 'Cache hit');
+    $this->assertArrayNotHasKey('#printed', $element);
     $this->assertSame($element['#attached']['drupalSettings'], $expected_js_settings, '#attached is modified; both the original JavaScript setting and the ones added by each placeholder #lazy_builder callback exist.');
 
     // Use the exact same element, but now unset #cache; ensure we get the same
diff --git a/core/tests/Drupal/Tests/Core/Render/RendererTest.php b/core/tests/Drupal/Tests/Core/Render/RendererTest.php
index 1d381ca926..7ec706c045 100644
--- a/core/tests/Drupal/Tests/Core/Render/RendererTest.php
+++ b/core/tests/Drupal/Tests/Core/Render/RendererTest.php
@@ -819,13 +819,14 @@ public function testRenderCache() {
     // process (which will set $element['#printed']).
     $element = $test_element;
     $this->renderer->renderRoot($element);
-    $this->assertTrue(isset($element['#printed']), 'No cache hit');
+    $this->assertArrayHasKey('#printed', $element);
+    $this->assertNotNull($element['#printed']);
 
     // Render the element again and confirm that it is retrieved from the cache
     // instead (so $element['#printed'] will not be set).
     $element = $test_element;
     $this->renderer->renderRoot($element);
-    $this->assertFalse(isset($element['#printed']), 'Cache hit');
+    $this->assertArrayNotHasKey('#printed', $element);
 
     // Test that cache tags are correctly collected from the render element,
     // including the ones from its subchild.
diff --git a/core/tests/Drupal/Tests/Core/Template/AttributeTest.php b/core/tests/Drupal/Tests/Core/Template/AttributeTest.php
index 81a1312198..bd4bdfa162 100644
--- a/core/tests/Drupal/Tests/Core/Template/AttributeTest.php
+++ b/core/tests/Drupal/Tests/Core/Template/AttributeTest.php
@@ -23,7 +23,8 @@ class AttributeTest extends UnitTestCase {
    */
   public function testConstructor() {
     $attribute = new Attribute(['class' => ['example-class']]);
-    $this->assertTrue(isset($attribute['class']));
+    $this->assertArrayHasKey('class', $attribute);
+    $this->assertNotNull($attribute['class']);
     $this->assertEquals(new AttributeArray('class', ['example-class']), $attribute['class']);
 
     // Test adding boolean attributes through the constructor.
@@ -33,14 +34,16 @@ public function testConstructor() {
 
     // Test that non-array values with name "class" are cast to array.
     $attribute = new Attribute(['class' => 'example-class']);
-    $this->assertTrue(isset($attribute['class']));
+    $this->assertArrayHasKey('class', $attribute);
+    $this->assertNotNull($attribute['class']);
     $this->assertEquals(new AttributeArray('class', ['example-class']), $attribute['class']);
 
     // Test that safe string objects work correctly.
     $safe_string = $this->prophesize(MarkupInterface::class);
     $safe_string->__toString()->willReturn('example-class');
     $attribute = new Attribute(['class' => $safe_string->reveal()]);
-    $this->assertTrue(isset($attribute['class']));
+    $this->assertArrayHasKey('class', $attribute);
+    $this->assertNotNull($attribute['class']);
     $this->assertEquals(new AttributeArray('class', ['example-class']), $attribute['class']);
   }
 
@@ -51,7 +54,8 @@ public function testSet() {
     $attribute = new Attribute();
     $attribute['class'] = ['example-class'];
 
-    $this->assertTrue(isset($attribute['class']));
+    $this->assertArrayHasKey('class', $attribute);
+    $this->assertNotNull($attribute['class']);
     $this->assertEquals(new AttributeArray('class', ['example-class']), $attribute['class']);
   }
 
@@ -71,7 +75,7 @@ public function testAdd() {
   public function testRemove() {
     $attribute = new Attribute(['class' => ['example-class']]);
     unset($attribute['class']);
-    $this->assertFalse(isset($attribute['class']));
+    $this->assertArrayNotHasKey('class', $attribute);
   }
 
   /**
