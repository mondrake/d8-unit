diff --git a/core/modules/node/tests/src/Functional/NodeTitleTest.php b/core/modules/node/tests/src/Functional/NodeTitleTest.php
index 0d1a93e502..13459bdf6f 100644
--- a/core/modules/node/tests/src/Functional/NodeTitleTest.php
+++ b/core/modules/node/tests/src/Functional/NodeTitleTest.php
@@ -91,7 +91,7 @@ public function testNodeTitle() {
     $node = $this->drupalCreateNode($settings);
     // Test that 0 appears as <title>.
     $this->drupalGet('node/' . $node->id());
-    $this->assertSession()->titleEquals('0 | Drupal');
+    $this->assertSession()->titleEquals('0 | Drupalfail');
     // Test that 0 appears in the template <h1>.
     $xpath = '//h1';
     $this->assertSame('0', $this->xpath($xpath)[0]->getText(), 'Node title is displayed as 0.');
diff --git a/core/modules/system/tests/src/Functional/Bootstrap/DrupalMessengerServiceTest.php b/core/modules/system/tests/src/Functional/Bootstrap/DrupalMessengerServiceTest.php
index 0671fdf0c4..72e7ac36a8 100644
--- a/core/modules/system/tests/src/Functional/Bootstrap/DrupalMessengerServiceTest.php
+++ b/core/modules/system/tests/src/Functional/Bootstrap/DrupalMessengerServiceTest.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\Tests\system\Functional\Bootstrap;
 
+use Behat\Mink\Exception\ExpectationException;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
-use PHPUnit\Framework\AssertionFailedError;
 
 /**
  * Tests the Messenger service.
@@ -112,7 +112,7 @@ public function testStatusMessageAssertions(): void {
     try {
       $this->assertSession()->statusMessageContains('This message is not real');
     }
-    catch (AssertionFailedError $e) {
+    catch (ExpectationException $e) {
       $expected_failure_occurred = TRUE;
     }
     $this->assertTrue($expected_failure_occurred, 'WebAssert::statusMessageContains() did not fail when it should have failed.');
@@ -121,7 +121,7 @@ public function testStatusMessageAssertions(): void {
     try {
       $this->assertSession()->statusMessageNotContains('markup');
     }
-    catch (AssertionFailedError $e) {
+    catch (ExpectationException $e) {
       $expected_failure_occurred = TRUE;
     }
     $this->assertTrue($expected_failure_occurred, 'WebAssert::statusMessageNotContains() did not fail when it should have failed.');
@@ -130,7 +130,7 @@ public function testStatusMessageAssertions(): void {
     try {
       $this->assertSession()->statusMessageExists('error');
     }
-    catch (AssertionFailedError $e) {
+    catch (ExpectationException $e) {
       $expected_failure_occurred = TRUE;
     }
     $this->assertTrue($expected_failure_occurred, 'WebAssert::statusMessageExists() did not fail when it should have failed.');
@@ -139,7 +139,7 @@ public function testStatusMessageAssertions(): void {
     try {
       $this->assertSession()->statusMessageNotExists();
     }
-    catch (AssertionFailedError $e) {
+    catch (ExpectationException $e) {
       $expected_failure_occurred = TRUE;
     }
     $this->assertTrue($expected_failure_occurred, 'WebAssert::statusMessageNotExists() did not fail when it should have failed.');
diff --git a/core/tests/Drupal/FunctionalTests/WebAssertTest.php b/core/tests/Drupal/FunctionalTests/WebAssertTest.php
index 6b13dc3184..2e1b837f74 100644
--- a/core/tests/Drupal/FunctionalTests/WebAssertTest.php
+++ b/core/tests/Drupal/FunctionalTests/WebAssertTest.php
@@ -5,7 +5,6 @@
 use Behat\Mink\Exception\ExpectationException;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
-use Behat\Mink\Exception\ResponseTextException;
 use PHPUnit\Framework\AssertionFailedError;
 
 /**
@@ -81,7 +80,7 @@ public function testPageTextContainsOnce() {
     $this->drupalGet('test-page');
     $this->assertSession()->pageTextContainsOnce('Test page text.');
 
-    $this->expectException(ResponseTextException::class);
+    $this->expectException(AssertionFailedError::class);
     $this->expectExceptionMessage("Failed asserting that the page matches the pattern '/does\\-not\\-exist/ui' 1 time(s), 0 found.");
     $this->assertSession()->pageTextContainsOnce('does-not-exist');
   }
diff --git a/core/tests/Drupal/Tests/BrowserTestBase.php b/core/tests/Drupal/Tests/BrowserTestBase.php
index cd75578c4e..0fa08bd154 100644
--- a/core/tests/Drupal/Tests/BrowserTestBase.php
+++ b/core/tests/Drupal/Tests/BrowserTestBase.php
@@ -3,6 +3,7 @@
 namespace Drupal\Tests;
 
 use Behat\Mink\Driver\BrowserKitDriver;
+use Behat\Mink\Exception\Exception as MinkException;
 use Behat\Mink\Element\Element;
 use Behat\Mink\Mink;
 use Behat\Mink\Selector\SelectorsHandler;
@@ -16,11 +17,13 @@
 use Drupal\Tests\block\Traits\BlockCreationTrait;
 use Drupal\Tests\node\Traits\ContentTypeCreationTrait;
 use Drupal\Tests\node\Traits\NodeCreationTrait;
+use Drupal\Tests\Traits\UnsuccessfulTestHandlerTrait;
 use Drupal\Tests\Traits\PhpUnitWarnings;
 use Drupal\Tests\user\Traits\UserCreationTrait;
 use Drupal\TestTools\Comparator\MarkupInterfaceComparator;
 use Drupal\TestTools\TestVarDumper;
 use GuzzleHttp\Cookie\CookieJar;
+use PHPUnit\Framework\AssertionFailedError;
 use PHPUnit\Framework\TestCase;
 use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;
 use Symfony\Component\VarDumper\VarDumper;
@@ -68,6 +71,7 @@ abstract class BrowserTestBase extends TestCase {
     createUser as drupalCreateUser;
   }
   use XdebugRequestTrait;
+  use UnsuccessfulTestHandlerTrait;
   use PhpUnitWarnings;
   use PhpUnitCompatibilityTrait;
   use ExpectDeprecationTrait;
@@ -424,6 +428,28 @@ protected function cleanupEnvironment() {
     \Drupal::service('file_system')->deleteRecursive($this->siteDirectory, [$this, 'filePreDeleteCallback']);
   }
 
+  /**
+   * Handles unsuccessful tests.
+   *
+   * Converts Mink's exceptions into PHPUnit failures.
+   *
+   * @param \Throwable $t
+   *   The error or exception thrown by the unsuccessful test.
+   */
+  protected function unsuccessfulTestHandler(\Throwable $t): void {
+    if ($t instanceof MinkException) {
+dump( $t->getTrace());
+      $e = new AssertionFailedError(get_class($t) . ": " . $t->getMessage(), $t->getCode(), $t);
+//      $trace = $t->getTrace();
+//      foreach ($trace as $i => $call) {
+//        unset($trace[$i]['args']);
+//      }
+//      $reflection = new \ReflectionProperty($e, 'serializableTrace');
+//      $reflection->setValue($e, $trace);
+      throw $e;
+    }
+  }
+
   /**
    * {@inheritdoc}
    */
diff --git a/core/tests/Drupal/Tests/Traits/UnsuccessfulTestHandlerTrait.php b/core/tests/Drupal/Tests/Traits/UnsuccessfulTestHandlerTrait.php
new file mode 100644
index 0000000000..492d309ef2
--- /dev/null
+++ b/core/tests/Drupal/Tests/Traits/UnsuccessfulTestHandlerTrait.php
@@ -0,0 +1,20 @@
+<?php
+
+namespace Drupal\Tests\Traits;
+
+/**
+ * Post-processes Drupal tests' failures.
+ *
+ * @internal
+ */
+trait UnsuccessfulTestHandlerTrait {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function onNotSuccessfulTest(\Throwable $t): void {
+    $this->unsuccessfulTestHandler($t);
+    parent::onNotSuccessfulTest($t);
+  }
+
+}
diff --git a/core/tests/Drupal/Tests/WebAssert.php b/core/tests/Drupal/Tests/WebAssert.php
index 404796e973..9c20fcbda7 100644
--- a/core/tests/Drupal/Tests/WebAssert.php
+++ b/core/tests/Drupal/Tests/WebAssert.php
@@ -3,7 +3,6 @@
 namespace Drupal\Tests;
 
 use Behat\Mink\Exception\ExpectationException;
-use Behat\Mink\Exception\ResponseTextException;
 use Behat\Mink\WebAssert as MinkWebAssert;
 use Behat\Mink\Element\ElementInterface;
 use Behat\Mink\Element\TraversableElement;
@@ -12,7 +11,6 @@
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Url;
 use PHPUnit\Framework\Assert;
-use PHPUnit\Framework\AssertionFailedError;
 use PHPUnit\Framework\Constraint\ArrayHasKey;
 use PHPUnit\Framework\Constraint\IsIdentical;
 use PHPUnit\Framework\Constraint\IsEqual;
@@ -694,12 +692,7 @@ public function hiddenFieldValueNotEquals($field, $value, TraversableElement $co
   public function pageTextContainsOnce($text) {
     assert(func_num_args() === 1);
     $regex = '/' . preg_quote($text, '/') . '/ui';
-    try {
-      $this->pageTextMatchesCount(1, $regex);
-    }
-    catch (AssertionFailedError $e) {
-      throw new ResponseTextException($e->getMessage(), $this->session->getDriver());
-    }
+    $this->pageTextMatchesCount(1, $regex);
   }
 
   /**
@@ -1028,13 +1021,7 @@ public function checkboxNotChecked($field, TraversableElement $container = NULL)
    *   The optional message type: status, error, or warning.
    */
   public function statusMessageExists(string $type = NULL): void {
-    $selector = $this->buildStatusMessageSelector(NULL, $type);
-    try {
-      $this->elementExists('xpath', $selector);
-    }
-    catch (ExpectationException $e) {
-      Assert::fail($e->getMessage());
-    }
+    $this->elementExists('xpath', $this->buildStatusMessageSelector(NULL, $type));
   }
 
   /**
@@ -1044,13 +1031,7 @@ public function statusMessageExists(string $type = NULL): void {
    *   The optional message type: status, error, or warning.
    */
   public function statusMessageNotExists(string $type = NULL): void {
-    $selector = $this->buildStatusMessageSelector(NULL, $type);
-    try {
-      $this->elementNotExists('xpath', $selector);
-    }
-    catch (ExpectationException $e) {
-      Assert::fail($e->getMessage());
-    }
+    $this->elementNotExists('xpath', $this->buildStatusMessageSelector(NULL, $type));
   }
 
   /**
@@ -1062,13 +1043,7 @@ public function statusMessageNotExists(string $type = NULL): void {
    *   The optional message type: status, error, or warning.
    */
   public function statusMessageContains(string $message, string $type = NULL): void {
-    $selector = $this->buildStatusMessageSelector($message, $type);
-    try {
-      $this->elementExists('xpath', $selector);
-    }
-    catch (ExpectationException $e) {
-      Assert::fail($e->getMessage());
-    }
+    $this->elementExists('xpath', $this->buildStatusMessageSelector($message, $type));
   }
 
   /**
@@ -1080,13 +1055,7 @@ public function statusMessageContains(string $message, string $type = NULL): voi
    *   The optional message type: status, error, or warning.
    */
   public function statusMessageNotContains(string $message, string $type = NULL): void {
-    $selector = $this->buildStatusMessageSelector($message, $type);
-    try {
-      $this->elementNotExists('xpath', $selector);
-    }
-    catch (ExpectationException $e) {
-      Assert::fail($e->getMessage());
-    }
+    $this->elementNotExists('xpath', $this->buildStatusMessageSelector($message, $type));
   }
 
   /**
