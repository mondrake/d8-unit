diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index 67dc4a1a1a4..97b528c25be 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -1480,7 +1480,7 @@ public function startTransaction($name = '') {
   public function rollBack($savepoint_name = 'drupal_transaction') {
     @trigger_error(__METHOD__ . '() is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Do not rollback the connection, roll back the Transaction objects instead. See https://www.drupal.org/node/3381002', E_USER_DEPRECATED);
     if ($this->transactionManager()) {
-      $this->transactionManager()->rollback($savepoint_name);
+      $this->transactionManager()->rollback($savepoint_name, 'bc-force-rollback');
       return;
     }
     if (!$this->inTransaction()) {
diff --git a/core/lib/Drupal/Core/Database/Transaction.php b/core/lib/Drupal/Core/Database/Transaction.php
index 47069baafba..fbcc58eb358 100644
--- a/core/lib/Drupal/Core/Database/Transaction.php
+++ b/core/lib/Drupal/Core/Database/Transaction.php
@@ -34,6 +34,11 @@ class Transaction {
    * A boolean value to indicate whether this transaction has been rolled back.
    *
    * @var bool
+   *
+   * @deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. There is
+   *   no replecement.
+   *
+   * @see https://www.drupal.org/node/3381002
    */
   protected $rolledBack = FALSE;
 
@@ -47,7 +52,11 @@ class Transaction {
    */
   protected $name;
 
-  public function __construct(Connection $connection, $name = NULL) {
+  public function __construct(
+    Connection $connection,
+    $name = NULL,
+    protected readonly string $id = '',
+  ) {
     if ($connection->transactionManager()) {
       $this->connection = $connection;
       $this->name = $name;
@@ -76,7 +85,7 @@ public function __construct(Connection $connection, $name = NULL) {
 
   public function __destruct() {
     if ($this->connection->transactionManager()) {
-      $this->connection->transactionManager()->unpile($this->name);
+      $this->connection->transactionManager()->unpile($this->name, $this->id);
       return;
     }
     // Start of BC layer.
@@ -107,7 +116,7 @@ public function name() {
    */
   public function rollBack() {
     if ($this->connection->transactionManager()) {
-      $this->connection->transactionManager()->rollback($this->name);
+      $this->connection->transactionManager()->rollback($this->name, $this->id);
       return;
     }
     // Start of BC layer.
diff --git a/core/lib/Drupal/Core/Database/Transaction/TransactionManagerBase.php b/core/lib/Drupal/Core/Database/Transaction/TransactionManagerBase.php
index 112077b90ee..6c2a883e9f6 100644
--- a/core/lib/Drupal/Core/Database/Transaction/TransactionManagerBase.php
+++ b/core/lib/Drupal/Core/Database/Transaction/TransactionManagerBase.php
@@ -37,11 +37,11 @@ abstract class TransactionManagerBase implements TransactionManagerInterface {
   private array $stack = [];
 
   /**
-   * A list of Drupal transactions rolled back but not yet unpiled.
+   * The stack of Drupal transaction ids.
    *
-   * @var array<string,true>
+   * @var array<string,string>
    */
-  private array $rollbacks = [];
+  private array $idStack = [];
 
   /**
    * A list of post-transaction callbacks.
@@ -106,34 +106,41 @@ protected function stack(): array {
    */
   protected function resetStack(): void {
     $this->stack = [];
+    $this->idStack = [];
   }
 
   /**
    * Adds an item to the transaction stack.
    *
    * Drivers should not override this method unless they also override the
-   * $stack property.
+   * $stack and $idStack properties.
    *
    * @param string $name
    *   The name of the transaction.
    * @param \Drupal\Core\Database\Transaction\StackItemType $type
    *   The stack item type.
+   * @param string $id
+   *   The id of the transaction.
    */
-  protected function addStackItem(string $name, StackItemType $type): void {
+  protected function addStackItem(string $name, StackItemType $type, string $id): void {
     $this->stack[$name] = $type;
+    $this->idStack[$id] = $name;
   }
 
   /**
    * Removes an item from the transaction stack.
    *
    * Drivers should not override this method unless they also override the
-   * $stack property.
+   * $stack and $idStack properties.
    *
    * @param string $name
    *   The name of the transaction.
+   * @param string $id
+   *   The id of the transaction.
    */
-  protected function removeStackItem(string $name): void {
+  protected function removeStackItem(string $name, string $id): void {
     unset($this->stack[$name]);
+    unset($this->idStack[$id]);
   }
 
   /**
@@ -176,20 +183,23 @@ public function push(string $name = ''): Transaction {
       $type = StackItemType::Savepoint;
     }
 
+    // Define an unique id for the transaction.
+    $id = uniqid();
+
     // Push the transaction on the stack, increasing its depth.
-    $this->addStackItem($name, $type);
+    $this->addStackItem($name, $type, $id);
 
-    return new Transaction($this->connection, $name);
+    return new Transaction($this->connection, $name, $id);
   }
 
   /**
    * {@inheritdoc}
    */
-  public function unpile(string $name): void {
-    // If an already rolled back Drupal transaction, do nothing on the client
-    // connection, just cleanup the list of transactions rolled back.
-    if (isset($this->rollbacks[$name])) {
-      unset($this->rollbacks[$name]);
+  public function unpile(string $name, string $id): void {
+    // If an already committed or rolled back Drupal transaction, or if the
+    // stacks were reset leaving Transaction objects orphaned (for example in
+    // case of a DDL statement breaking an active transaction), do nothing.
+    if (!isset($this->idStack[$id])) {
       return;
     }
 
@@ -208,7 +218,7 @@ public function unpile(string $name): void {
     }
 
     // Remove the transaction from the stack.
-    $this->removeStackItem($name);
+    $this->removeStackItem($name, $id);
 
     // If this was the last Drupal transaction open, we can commit the client
     // transaction.
@@ -223,7 +233,7 @@ public function unpile(string $name): void {
   /**
    * {@inheritdoc}
    */
-  public function rollback(string $name): void {
+  public function rollback(string $name, string $id): void {
     if (!$this->inTransaction()) {
       throw new TransactionNoActiveException();
     }
@@ -239,8 +249,13 @@ public function rollback(string $name): void {
       throw new TransactionOutOfOrderException();
     }
 
-    $this->rollbacks[$name] = TRUE;
-    $this->removeStackItem($name);
+    // BC layer.
+    // @todo remove in drupal:11.0.0.
+    if ($id === 'bc-force-rollback') {
+      $id = array_search($name, $this->idStack, TRUE);
+    }
+
+    $this->removeStackItem($name, $id);
 
     // If this was the last Drupal transaction open, we can commit the client
     // transaction.
diff --git a/core/lib/Drupal/Core/Database/Transaction/TransactionManagerInterface.php b/core/lib/Drupal/Core/Database/Transaction/TransactionManagerInterface.php
index 86d5de4ac5a..1bd0cd3e5fd 100644
--- a/core/lib/Drupal/Core/Database/Transaction/TransactionManagerInterface.php
+++ b/core/lib/Drupal/Core/Database/Transaction/TransactionManagerInterface.php
@@ -36,6 +36,8 @@ public function has(string $name): bool;
    * This begins a client connection transaction if there is not one active,
    * or adds a savepoint to the active one.
    *
+   * This method should only be called internally by a database driver.
+   *
    * @param string $name
    *   (optional) The name of the savepoint.
    *
@@ -54,15 +56,19 @@ public function push(string $name = ''): Transaction;
    * This method should only be called by a Transaction object going out of
    * scope.
    *
+   * This method should only be called internally by a database driver.
+   *
    * @param string $name
-   *   (optional) The name of the savepoint.
+   *   The name of the transaction.
+   * @param string $id
+   *   The id of the transaction.
    *
    * @throws \Drupal\Core\Database\TransactionOutOfOrderException
    *   If a Drupal Transaction with the specified name does not exist.
    * @throws \Drupal\Core\Database\TransactionCommitFailedException
    *   If the commit of the root transaction failed.
    */
-  public function unpile(string $name): void;
+  public function unpile(string $name, string $id): void;
 
   /**
    * Rolls back a Drupal transaction.
@@ -72,8 +78,12 @@ public function unpile(string $name): void;
    * to rolling back the client connection (or to committing it in the edge
    * case when the root was unpiled earlier).
    *
+   * This method should only be called internally by a database driver.
+   *
    * @param string $name
-   *   (optional) The name of the savepoint.
+   *   The name of the transaction.
+   * @param string $id
+   *   The id of the transaction.
    *
    * @throws \Drupal\Core\Database\TransactionNoActiveException
    *   If there is no active client connection.
@@ -83,7 +93,7 @@ public function unpile(string $name): void;
    * @throws \Drupal\Core\Database\TransactionCommitFailedException
    *   If the commit of the root transaction failed.
    */
-  public function rollback(string $name): void;
+  public function rollback(string $name, string $id): void;
 
   /**
    * Adds a root transaction end callback.
