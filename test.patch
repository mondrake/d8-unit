diff --git a/core/lib/Drupal/Core/Database/Schema.php b/core/lib/Drupal/Core/Database/Schema.php
index 9153cd9ef8f0d9564b96276530c4abbfee8a4b3a..3b2fd00a83bfeddbb8947aa4fe8375a50fec5cd1 100644
--- a/core/lib/Drupal/Core/Database/Schema.php
+++ b/core/lib/Drupal/Core/Database/Schema.php
@@ -6,6 +6,22 @@
 
 /**
  * Provides a base implementation for Database Schema.
+ *
+ * @phpstan-type TableColumnDefinition array{
+ *   'description': string,
+ *   'type': string,
+ *   'serialize': bool,
+ *   'size': string,
+ *   'not null': bool,
+ *   'default': scalar|array<scalar>,
+ *   'length': string,
+ *   'unsigned': bool,
+ *   'precision': int,
+ *   'scale': int,
+ *   'binary': bool
+ * }
+ * @phpstan-type TableColumns array<string, TableColumnDefinition>
+ * @phpstan-type KeyColumns array<string|array{0: string, 1: int}>
  */
 abstract class Schema implements PlaceholderInterface {
 
@@ -321,6 +337,8 @@ abstract public function dropTable($table);
    *   If the specified table doesn't exist.
    * @throws \Drupal\Core\Database\SchemaObjectExistsException
    *   If the specified table already has a field by that name.
+   * @throws \Drupal\Core\Database\SchemaException
+   *   If the specified keys fail validation.
    */
   abstract public function addField($table, $field, $spec, $keys_new = []);
 
@@ -357,15 +375,53 @@ abstract public function indexExists($table, $name);
    * @param $table
    *   The table to be altered.
    * @param $fields
-   *   Fields for the primary key.
+   *   Fields for the primary key. Partial column length specifications are not
+   *   allowed.
    *
    * @throws \Drupal\Core\Database\SchemaObjectDoesNotExistException
    *   If the specified table doesn't exist.
    * @throws \Drupal\Core\Database\SchemaObjectExistsException
    *   If the specified table already has a primary key.
+   * @throws \Drupal\Core\Database\SchemaException
+   *   If the specified key fails validation.
    */
   abstract public function addPrimaryKey($table, $fields);
 
+  /**
+   * Validates a primary key schema definition.
+   *
+   * @param KeyColumns $key_fields
+   *   An array containing the fields that will form the primary key.
+   * @param TableColumns $fields
+   *   (Optional) An array containing the field specifications of the table,
+   *   as per the schema data structure format.
+   *
+   * @throws \Drupal\Core\Database\SchemaException
+   *   If the specified fields fail validation.
+   */
+  protected function validatePrimaryKeySchema(array $key_fields, array $fields = []): void {
+    // Ensure no partial column length specified.
+    $fixed_key_fields = [];
+    foreach ($key_fields as $key_field) {
+      if (is_array($key_field)) {
+        @trigger_error('Specification of primary key with column length is deprecated in drupal:10.2.0 and will throw a SchemaException from drupal:11.0.0. Specify full columns for a primary key, or use an index for columns with partial length. See https://www.drupal.org/node/3375071', E_USER_DEPRECATED);
+        $fixed_key_fields[] = $key_field[0];
+      }
+      else {
+        $fixed_key_fields[] = $key_field;
+      }
+    }
+
+    // Ensure primary key is not null.
+    if (!empty($fields)) {
+      foreach (array_intersect($fixed_key_fields, array_keys($fields)) as $field_name) {
+        if (!isset($fields[$field_name]['not null']) || $fields[$field_name]['not null'] !== TRUE) {
+          throw new SchemaException("The '$field_name' field specification does not define 'not null' as TRUE.");
+        }
+      }
+    }
+  }
+
   /**
    * Drop the primary key.
    *
@@ -406,15 +462,38 @@ protected function findPrimaryKeyColumns($table) {
    * @param $name
    *   The name of the key.
    * @param $fields
-   *   An array of field names.
+   *   An array of field names. Partial column length specifications are not
+   *   allowed.
    *
    * @throws \Drupal\Core\Database\SchemaObjectDoesNotExistException
    *   If the specified table doesn't exist.
    * @throws \Drupal\Core\Database\SchemaObjectExistsException
    *   If the specified table already has a key by that name.
+   * @throws \Drupal\Core\Database\SchemaException
+   *   If the specified key fails validation.
    */
   abstract public function addUniqueKey($table, $name, $fields);
 
+  /**
+   * Validates a unique key schema definition.
+   *
+   * @param KeyColumns $key_fields
+   *   An array containing the fields that will form the unique key.
+   * @param TableColumns $fields
+   *   (Optional) An array containing the field specifications of the table,
+   *   as per the schema data structure format.
+   *
+   * @throws \Drupal\Core\Database\SchemaException
+   *   If the specified key fails validation.
+   */
+  protected function validateUniqueKeySchema(array $key_fields, array $fields = []): void {
+    foreach ($key_fields as $key_field) {
+      if (is_array($key_field)) {
+        @trigger_error('Specification of unique keys with column length is deprecated in drupal:10.2.0 and will throw a SchemaException from drupal:11.0.0. Specify full columns for an unique key, or use an index for columns with partial length. See https://www.drupal.org/node/3375071', E_USER_DEPRECATED);
+      }
+    }
+  }
+
   /**
    * Drop a unique key.
    *
@@ -592,6 +671,8 @@ protected function introspectIndexSchema($table) {
    *   If the specified table or source field doesn't exist.
    * @throws \Drupal\Core\Database\SchemaObjectExistsException
    *   If the specified destination field already exists.
+   * @throws \Drupal\Core\Database\SchemaException
+   *   If the specified keys fail validation.
    */
   abstract public function changeField($table, $field, $field_new, $spec, $keys_new = []);
 
@@ -605,6 +686,8 @@ abstract public function changeField($table, $field, $field_new, $spec, $keys_ne
    *
    * @throws \Drupal\Core\Database\SchemaObjectExistsException
    *   If the specified table already exists.
+   * @throws \Drupal\Core\Database\SchemaException
+   *   If the table definition fails validation.
    * @throws \BadMethodCallException
    *   When ::createTableSql() is not implemented in the concrete driver class.
    */
@@ -714,8 +797,14 @@ protected function escapeDefaultValue($value) {
    * @throws \Drupal\Core\Database\SchemaException
    *   Thrown if any primary key field specification does not exist or if they
    *   do not define 'not null' as TRUE.
+   *
+   * @deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Use
+   *   ::validatePrimaryKeySchema() instead.
+   *
+   * @see https://www.drupal.org/node/3375071
    */
   protected function ensureNotNullPrimaryKey(array $primary_key, array $fields) {
+    @trigger_error(__METHOD__ . ' is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Use ::validatePrimaryKeySchema() instead. See https://www.drupal.org/node/3375071', E_USER_DEPRECATED);
     foreach (array_intersect($primary_key, array_keys($fields)) as $field_name) {
       if (!isset($fields[$field_name]['not null']) || $fields[$field_name]['not null'] !== TRUE) {
         throw new SchemaException("The '$field_name' field specification does not define 'not null' as TRUE.");
diff --git a/core/lib/Drupal/Core/Database/database.api.php b/core/lib/Drupal/Core/Database/database.api.php
index 50e4bb506073d73cbf8aab0026a9f27b6d97e846..b628e86b8d74642fb8f12458fce0949cdca4ce13 100644
--- a/core/lib/Drupal/Core/Database/database.api.php
+++ b/core/lib/Drupal/Core/Database/database.api.php
@@ -323,10 +323,12 @@
  *     'numeric' columns must specify 'precision' and 'scale', and type
  *     'varchar' must specify the 'length' parameter.
  *  - 'primary key': An array of one or more key column specifiers (see below)
- *    that form the primary key.
+ *    that form the primary key. Primary keys do not allow partial column length
+ *    specifications.
  *  - 'unique keys': An associative array of unique keys ('keyname' =>
  *    specification). Each specification is an array of one or more
  *    key column specifiers (see below) that form a unique key on the table.
+ *    Unique keys do not allow partial column length specifications.
  *  - 'foreign keys': An associative array of relations ('my_relation' =>
  *    specification). Each specification is an array containing the name of
  *    the referenced table ('table'), and an array of column mappings
@@ -340,9 +342,10 @@
  *
  * A key column specifier is either a string naming a column or an array of two
  * elements, column name and length, specifying a prefix of the named column.
- * Note that some DBMS drivers may opt to ignore the prefix length configuration
- * and still use the whole field value for the key. Code should therefore not
- * rely on this functionality.
+ * Partial column length for a column can only be specified for indexes. Note
+ * that some DBMS drivers may opt to ignore the prefix length configuration and
+ * still use the whole field value for the key. Code should therefore not rely
+ * on this functionality.
  *
  * As an example, this is the schema definition for the 'users_data' table. It
  * shows five fields ('uid', 'module', 'name', 'value', and 'serialized'), the
diff --git a/core/modules/mysql/src/Driver/Database/mysql/Schema.php b/core/modules/mysql/src/Driver/Database/mysql/Schema.php
index d0076f3481e08431635f1e6b12077ee1a12d1eb8..8566cd81dce6824947abf8433b6decab40d3b3eb 100644
--- a/core/modules/mysql/src/Driver/Database/mysql/Schema.php
+++ b/core/modules/mysql/src/Driver/Database/mysql/Schema.php
@@ -101,7 +101,12 @@ protected function createTableSql($name, $table) {
 
     // Process keys & indexes.
     if (!empty($table['primary key']) && is_array($table['primary key'])) {
-      $this->ensureNotNullPrimaryKey($table['primary key'], $table['fields']);
+      $this->validatePrimaryKeySchema($table['primary key'], $table['fields']);
+    }
+    if (!empty($table['unique keys'])) {
+      foreach ($table['unique keys'] as $key_fields) {
+        $this->validateUniqueKeySchema($key_fields, $table['fields']);
+      }
     }
     $keys = $this->createKeysSql($table);
     if (count($keys)) {
@@ -404,9 +409,15 @@ public function addField($table, $field, $spec, $keys_new = []) {
     }
 
     // Fields that are part of a PRIMARY KEY must be added as NOT NULL.
-    $is_primary_key = isset($keys_new['primary key']) && in_array($field, $keys_new['primary key'], TRUE);
+    $is_primary_key = isset($keys_new['primary key']) && in_array($field, $this->fieldNames($keys_new['primary key']), TRUE);
     if ($is_primary_key) {
-      $this->ensureNotNullPrimaryKey($keys_new['primary key'], [$field => $spec]);
+      $this->validatePrimaryKeySchema($keys_new['primary key'], [$field => $spec]);
+    }
+
+    if (!empty($keys_new['unique keys'])) {
+      foreach ($keys_new['unique keys'] as $key_fields) {
+        $this->validateUniqueKeySchema($key_fields, [$field => $spec]);
+      }
     }
 
     $fixnull = FALSE;
@@ -489,6 +500,7 @@ public function indexExists($table, $name) {
    * {@inheritdoc}
    */
   public function addPrimaryKey($table, $fields) {
+    $this->validatePrimaryKeySchema($fields);
     if (!$this->tableExists($table)) {
       throw new SchemaObjectDoesNotExistException("Cannot add primary key to table '$table': table doesn't exist.");
     }
@@ -526,6 +538,7 @@ protected function findPrimaryKeyColumns($table) {
    * {@inheritdoc}
    */
   public function addUniqueKey($table, $name, $fields) {
+    $this->validateUniqueKeySchema($fields);
     if (!$this->tableExists($table)) {
       throw new SchemaObjectDoesNotExistException("Cannot add unique key '$name' to table '$table': table doesn't exist.");
     }
@@ -617,8 +630,13 @@ public function changeField($table, $field, $field_new, $spec, $keys_new = []) {
     if (($field != $field_new) && $this->fieldExists($table, $field_new)) {
       throw new SchemaObjectExistsException("Cannot rename field '$table.$field' to '$field_new': target field already exists.");
     }
-    if (isset($keys_new['primary key']) && in_array($field_new, $keys_new['primary key'], TRUE)) {
-      $this->ensureNotNullPrimaryKey($keys_new['primary key'], [$field_new => $spec]);
+    if (isset($keys_new['primary key']) && in_array($field_new, $this->fieldNames($keys_new['primary key']), TRUE)) {
+      $this->validatePrimaryKeySchema($keys_new['primary key'], [$field_new => $spec]);
+    }
+    if (!empty($keys_new['unique keys'])) {
+      foreach ($keys_new['unique keys'] as $key_fields) {
+        $this->validateUniqueKeySchema($key_fields, [$field_new => $spec]);
+      }
     }
 
     $sql = 'ALTER TABLE {' . $table . '} CHANGE [' . $field . '] ' . $this->createFieldSql($field_new, $this->processField($spec));
diff --git a/core/modules/mysql/tests/src/Kernel/mysql/SchemaUniquePrefixedKeysIndexTest.php b/core/modules/mysql/tests/src/Kernel/mysql/SchemaUniquePrefixedKeysIndexTest.php
index 2d7c962bf6f2c1d77d5df6a275d401368bfc3d65..57730723f78d7a346f88f7c7d7b1d93c49bf49bc 100644
--- a/core/modules/mysql/tests/src/Kernel/mysql/SchemaUniquePrefixedKeysIndexTest.php
+++ b/core/modules/mysql/tests/src/Kernel/mysql/SchemaUniquePrefixedKeysIndexTest.php
@@ -8,6 +8,7 @@
  * Tests adding UNIQUE keys to tables.
  *
  * @group Database
+ * @group legacy
  */
 class SchemaUniquePrefixedKeysIndexTest extends SchemaUniquePrefixedKeysIndexTestBase {
 
diff --git a/core/modules/pgsql/src/Driver/Database/pgsql/Schema.php b/core/modules/pgsql/src/Driver/Database/pgsql/Schema.php
index a7a389a67f9a1dfaa82aacc1f359b6a09feb93fc..3e103152b791ac0d357c2220a9c54414f9b0ceb9 100644
--- a/core/modules/pgsql/src/Driver/Database/pgsql/Schema.php
+++ b/core/modules/pgsql/src/Driver/Database/pgsql/Schema.php
@@ -291,11 +291,12 @@ protected function createTableSql($name, $table) {
 
     $sql_keys = [];
     if (!empty($table['primary key']) && is_array($table['primary key'])) {
-      $this->ensureNotNullPrimaryKey($table['primary key'], $table['fields']);
+      $this->validatePrimaryKeySchema($table['primary key'], $table['fields']);
       $sql_keys[] = 'CONSTRAINT ' . $this->ensureIdentifiersLength($name, '', 'pkey') . ' PRIMARY KEY (' . $this->createPrimaryKeySql($table['primary key']) . ')';
     }
     if (isset($table['unique keys']) && is_array($table['unique keys'])) {
       foreach ($table['unique keys'] as $key_name => $key) {
+        $this->validateUniqueKeySchema($key, $table['fields']);
         // Use the createPrimaryKeySql(), which already discards any prefix
         // lengths passed as part of the key column specifiers. (Postgres
         // doesn't support setting a prefix length for PRIMARY or UNIQUE
@@ -641,9 +642,15 @@ public function addField($table, $field, $spec, $new_keys = []) {
     }
 
     // Fields that are part of a PRIMARY KEY must be added as NOT NULL.
-    $is_primary_key = isset($new_keys['primary key']) && in_array($field, $new_keys['primary key'], TRUE);
+    $is_primary_key = isset($new_keys['primary key']) && in_array($field, $this->fieldNames($new_keys['primary key']), TRUE);
     if ($is_primary_key) {
-      $this->ensureNotNullPrimaryKey($new_keys['primary key'], [$field => $spec]);
+      $this->validatePrimaryKeySchema($new_keys['primary key'], [$field => $spec]);
+    }
+
+    if (!empty($new_keys['unique keys'])) {
+      foreach ($new_keys['unique keys'] as $key_fields) {
+        $this->validateUniqueKeySchema($key_fields, [$field => $spec]);
+      }
     }
 
     $fixnull = FALSE;
@@ -766,6 +773,7 @@ public function constraintExists($table, $name) {
    * {@inheritdoc}
    */
   public function addPrimaryKey($table, $fields) {
+    $this->validatePrimaryKeySchema($fields);
     if (!$this->tableExists($table)) {
       throw new SchemaObjectDoesNotExistException("Cannot add primary key to table '$table': table doesn't exist.");
     }
@@ -804,6 +812,7 @@ protected function findPrimaryKeyColumns($table) {
    * {@inheritdoc}
    */
   public function addUniqueKey($table, $name, $fields) {
+    $this->validateUniqueKeySchema($fields);
     if (!$this->tableExists($table)) {
       throw new SchemaObjectDoesNotExistException("Cannot add unique key '$name' to table '$table': table doesn't exist.");
     }
@@ -903,8 +912,13 @@ public function changeField($table, $field, $field_new, $spec, $new_keys = []) {
     if (($field != $field_new) && $this->fieldExists($table, $field_new)) {
       throw new SchemaObjectExistsException("Cannot rename field '$table.$field' to '$field_new': target field already exists.");
     }
-    if (isset($new_keys['primary key']) && in_array($field_new, $new_keys['primary key'], TRUE)) {
-      $this->ensureNotNullPrimaryKey($new_keys['primary key'], [$field_new => $spec]);
+    if (isset($new_keys['primary key']) && in_array($field_new, $this->fieldNames($new_keys['primary key']), TRUE)) {
+      $this->validatePrimaryKeySchema($new_keys['primary key'], [$field_new => $spec]);
+    }
+    if (!empty($new_keys['unique keys'])) {
+      foreach ($new_keys['unique keys'] as $key_fields) {
+        $this->validateUniqueKeySchema($key_fields, [$field_new => $spec]);
+      }
     }
 
     $spec = $this->processField($spec);
diff --git a/core/modules/pgsql/tests/src/Kernel/pgsql/SchemaUniquePrefixedKeysIndexTest.php b/core/modules/pgsql/tests/src/Kernel/pgsql/SchemaUniquePrefixedKeysIndexTest.php
index c7285e4ee263dca310d90bde0bbdb936da8bc271..240aaa4b89e96ecf3aa55371d50062e511abf272 100644
--- a/core/modules/pgsql/tests/src/Kernel/pgsql/SchemaUniquePrefixedKeysIndexTest.php
+++ b/core/modules/pgsql/tests/src/Kernel/pgsql/SchemaUniquePrefixedKeysIndexTest.php
@@ -8,6 +8,7 @@
  * Tests adding UNIQUE keys to tables.
  *
  * @group Database
+ * @group legacy
  */
 class SchemaUniquePrefixedKeysIndexTest extends SchemaUniquePrefixedKeysIndexTestBase {
 
diff --git a/core/modules/sqlite/src/Driver/Database/sqlite/Schema.php b/core/modules/sqlite/src/Driver/Database/sqlite/Schema.php
index eb836eb453635d4d866179ee5a2339378d731b2e..66ab30c0420b20313eea3093aafd40bb73a84b3b 100644
--- a/core/modules/sqlite/src/Driver/Database/sqlite/Schema.php
+++ b/core/modules/sqlite/src/Driver/Database/sqlite/Schema.php
@@ -48,7 +48,12 @@ public function fieldExists($table, $column) {
    */
   public function createTableSql($name, $table) {
     if (!empty($table['primary key']) && is_array($table['primary key'])) {
-      $this->ensureNotNullPrimaryKey($table['primary key'], $table['fields']);
+      $this->validatePrimaryKeySchema($table['primary key'], $table['fields']);
+    }
+    if (!empty($table['unique keys'])) {
+      foreach ($table['unique keys'] as $key_fields) {
+        $this->validateUniqueKeySchema($key_fields, $table['fields']);
+      }
     }
 
     $sql = [];
@@ -315,8 +320,13 @@ public function addField($table, $field, $specification, $keys_new = []) {
     if ($this->fieldExists($table, $field)) {
       throw new SchemaObjectExistsException("Cannot add field '$table.$field': field already exists.");
     }
-    if (isset($keys_new['primary key']) && in_array($field, $keys_new['primary key'], TRUE)) {
-      $this->ensureNotNullPrimaryKey($keys_new['primary key'], [$field => $specification]);
+    if (isset($keys_new['primary key']) && in_array($field, $this->fieldNames($keys_new['primary key']), TRUE)) {
+      $this->validatePrimaryKeySchema($keys_new['primary key'], [$field => $specification]);
+    }
+    if (!empty($keys_new['unique keys'])) {
+      foreach ($keys_new['unique keys'] as $key_fields) {
+        $this->validateUniqueKeySchema($key_fields, [$field => $specification]);
+      }
     }
 
     // SQLite doesn't have a full-featured ALTER TABLE statement. It only
@@ -606,8 +616,13 @@ public function changeField($table, $field, $field_new, $spec, $keys_new = []) {
     if (($field != $field_new) && $this->fieldExists($table, $field_new)) {
       throw new SchemaObjectExistsException("Cannot rename field '$table.$field' to '$field_new': target field already exists.");
     }
-    if (isset($keys_new['primary key']) && in_array($field_new, $keys_new['primary key'], TRUE)) {
-      $this->ensureNotNullPrimaryKey($keys_new['primary key'], [$field_new => $spec]);
+    if (isset($keys_new['primary key']) && in_array($field_new, $this->fieldNames($keys_new['primary key']), TRUE)) {
+      $this->validatePrimaryKeySchema($keys_new['primary key'], [$field_new => $spec]);
+    }
+    if (!empty($keys_new['unique keys'])) {
+      foreach ($keys_new['unique keys'] as $key_fields) {
+        $this->validateUniqueKeySchema($key_fields, [$field_new => $spec]);
+      }
     }
 
     $old_schema = $this->introspectSchema($table);
@@ -714,6 +729,7 @@ public function dropIndex($table, $name) {
    * {@inheritdoc}
    */
   public function addUniqueKey($table, $name, $fields) {
+    $this->validateUniqueKeySchema($fields);
     if (!$this->tableExists($table)) {
       throw new SchemaObjectDoesNotExistException("Cannot add unique key '$name' to table '$table': table doesn't exist.");
     }
@@ -758,7 +774,7 @@ public function addPrimaryKey($table, $fields) {
     }
 
     $new_schema['primary key'] = $fields;
-    $this->ensureNotNullPrimaryKey($new_schema['primary key'], $new_schema['fields']);
+    $this->validatePrimaryKeySchema($new_schema['primary key'], $new_schema['fields']);
     $this->alterTable($table, $old_schema, $new_schema);
   }
 
diff --git a/core/modules/sqlite/tests/src/Kernel/sqlite/SchemaUniquePrefixedKeysIndexTest.php b/core/modules/sqlite/tests/src/Kernel/sqlite/SchemaUniquePrefixedKeysIndexTest.php
index 108eda059603a8e451b1e5d12a28191f0af66c72..eee545e0244a07bc700b51b9b06978b7b76caf2a 100644
--- a/core/modules/sqlite/tests/src/Kernel/sqlite/SchemaUniquePrefixedKeysIndexTest.php
+++ b/core/modules/sqlite/tests/src/Kernel/sqlite/SchemaUniquePrefixedKeysIndexTest.php
@@ -8,6 +8,7 @@
  * Tests adding UNIQUE keys to tables.
  *
  * @group Database
+ * @group legacy
  */
 class SchemaUniquePrefixedKeysIndexTest extends SchemaUniquePrefixedKeysIndexTestBase {
 
diff --git a/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificSchemaTestBase.php b/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificSchemaTestBase.php
index 96933c2333494818f10903697a38d7413413a36b..9d40b97bf0df991613f9da813e1cd27b6533583d 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificSchemaTestBase.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificSchemaTestBase.php
@@ -764,6 +764,196 @@ public function testInvalidPrimaryKeyAddition(): void {
     $this->schema->addField($table_name, 'new_test_field', ['type' => 'int'], ['primary key' => ['test_field', 'new_test_field']]);
   }
 
+  /**
+   * @covers ::validatePrimaryKeySchema
+   * @group legacy
+   */
+  public function testInvalidPrimaryKeyColumnsOnCreateTable(): void {
+    $this->expectDeprecation("Specification of primary key with column length is deprecated in drupal:10.2.0 and will throw a SchemaException from drupal:11.0.0. Specify full columns for a primary key, or use an index for columns with partial length. See https://www.drupal.org/node/3375071");
+    // Test with partial column length.
+    $this->schema->createTable('table_with_invalid_pk', [
+      'description' => 'Table with partial column length primary key.',
+      'fields' => [
+        'test_field_1'  => [
+          'type' => 'varchar',
+          'length' => 50,
+          'not null' => TRUE,
+        ],
+      ],
+      'primary key' => [['test_field_1', 10]],
+    ]);
+  }
+
+  /**
+   * @covers ::validatePrimaryKeySchema
+   * @group legacy
+   */
+  public function testInvalidPrimaryKeyColumnsOnAddPrimaryKey(): void {
+    $this->expectDeprecation("Specification of primary key with column length is deprecated in drupal:10.2.0 and will throw a SchemaException from drupal:11.0.0. Specify full columns for a primary key, or use an index for columns with partial length. See https://www.drupal.org/node/3375071");
+    // Test with partial column length.
+    $this->schema->createTable('table_with_invalid_pk', [
+      'description' => 'Table with partial column length primary key.',
+      'fields' => [
+        'test_field_1'  => [
+          'type' => 'varchar',
+          'length' => 50,
+          'not null' => TRUE,
+        ],
+      ],
+    ]);
+    $this->schema->addPrimaryKey('table_with_invalid_pk', [['test_field_1', 10]]);
+  }
+
+  /**
+   * @covers ::validatePrimaryKeySchema
+   * @group legacy
+   */
+  public function testInvalidPrimaryKeyColumnsOnAddField(): void {
+    $this->expectDeprecation("Specification of primary key with column length is deprecated in drupal:10.2.0 and will throw a SchemaException from drupal:11.0.0. Specify full columns for a primary key, or use an index for columns with partial length. See https://www.drupal.org/node/3375071");
+    // Test with partial column length.
+    $this->schema->createTable('table_with_invalid_pk', [
+      'description' => 'Table with partial column length primary key.',
+      'fields' => [
+        'test_field_1'  => [
+          'type' => 'varchar',
+          'length' => 50,
+          'not null' => TRUE,
+        ],
+      ],
+    ]);
+    $this->schema->addField('table_with_invalid_pk', 'new_test_field', [
+      'type' => 'varchar',
+      'length' => 50,
+      'not null' => TRUE,
+    ], [
+      'primary key' => [['new_test_field', 10]],
+    ]);
+  }
+
+  /**
+   * @covers ::validatePrimaryKeySchema
+   * @group legacy
+   */
+  public function testInvalidPrimaryKeyColumnsOnChangeField(): void {
+    $this->expectDeprecation("Specification of primary key with column length is deprecated in drupal:10.2.0 and will throw a SchemaException from drupal:11.0.0. Specify full columns for a primary key, or use an index for columns with partial length. See https://www.drupal.org/node/3375071");
+    // Test with partial column length.
+    $this->schema->createTable('table_with_invalid_pk', [
+      'description' => 'Table with partial column length primary key.',
+      'fields' => [
+        'test_field_1'  => [
+          'type' => 'varchar',
+          'length' => 50,
+          'not null' => TRUE,
+        ],
+      ],
+    ]);
+    $this->schema->changeField('table_with_invalid_pk', 'test_field_1', 'test_field_1', [
+      'type' => 'varchar',
+      'length' => 20,
+      'not null' => TRUE,
+    ], [
+      'primary key' => [['test_field_1', 10]],
+    ]);
+  }
+
+  /**
+   * @covers ::validateUniqueKeySchema
+   * @group legacy
+   */
+  public function testInvalidUniqueKeyColumnsOnCreateTable(): void {
+    $this->expectDeprecation("Specification of unique keys with column length is deprecated in drupal:10.2.0 and will throw a SchemaException from drupal:11.0.0. Specify full columns for an unique key, or use an index for columns with partial length. See https://www.drupal.org/node/3375071");
+    // Test with partial column length.
+    $this->schema->createTable('table_with_invalid_unique_key', [
+      'description' => 'Table with partial column length unique key.',
+      'fields' => [
+        'test_field_1'  => [
+          'type' => 'varchar',
+          'length' => 50,
+          'not null' => TRUE,
+        ],
+      ],
+      'unique keys' => [
+        'test_unique_key' => [['test_field_1', 10]],
+      ],
+    ]);
+  }
+
+  /**
+   * @covers ::validateUniqueKeySchema
+   * @group legacy
+   */
+  public function testInvalidUniqueKeyColumnsOnAddUniqueKey(): void {
+    $this->expectDeprecation("Specification of unique keys with column length is deprecated in drupal:10.2.0 and will throw a SchemaException from drupal:11.0.0. Specify full columns for an unique key, or use an index for columns with partial length. See https://www.drupal.org/node/3375071");
+    // Test with partial column length.
+    $this->schema->createTable('table_with_invalid_unique_key', [
+      'description' => 'Table with partial column length unique key.',
+      'fields' => [
+        'test_field_1'  => [
+          'type' => 'varchar',
+          'length' => 50,
+          'not null' => TRUE,
+        ],
+      ],
+    ]);
+    $this->schema->addUniqueKey('table_with_invalid_unique_key', 'test_unique_key', [['test_field_1', 10]]);
+  }
+
+  /**
+   * @covers ::validateUniqueKeySchema
+   * @group legacy
+   */
+  public function testInvalidUniqueKeyColumnsOnAddField(): void {
+    $this->expectDeprecation("Specification of unique keys with column length is deprecated in drupal:10.2.0 and will throw a SchemaException from drupal:11.0.0. Specify full columns for an unique key, or use an index for columns with partial length. See https://www.drupal.org/node/3375071");
+    // Test with partial column length.
+    $this->schema->createTable('table_with_invalid_unique_key', [
+      'description' => 'Table with partial column length unique key.',
+      'fields' => [
+        'test_field_1'  => [
+          'type' => 'varchar',
+          'length' => 50,
+          'not null' => TRUE,
+        ],
+      ],
+    ]);
+    $this->schema->addField('table_with_invalid_unique_key', 'new_test_field', [
+      'type' => 'varchar',
+      'length' => 50,
+      'not null' => TRUE,
+    ], [
+      'unique keys' => [
+        'test_unique_key' => [['new_test_field', 10]],
+      ],
+    ]);
+  }
+
+  /**
+   * @covers ::validateUniqueKeySchema
+   * @group legacy
+   */
+  public function testInvalidUniqueKeyColumnsOnChangeField(): void {
+    $this->expectDeprecation("Specification of unique keys with column length is deprecated in drupal:10.2.0 and will throw a SchemaException from drupal:11.0.0. Specify full columns for an unique key, or use an index for columns with partial length. See https://www.drupal.org/node/3375071");
+    // Test with partial column length.
+    $this->schema->createTable('table_with_invalid_unique_key', [
+      'description' => 'Table with partial column length unique key.',
+      'fields' => [
+        'test_field_1'  => [
+          'type' => 'varchar',
+          'length' => 50,
+          'not null' => TRUE,
+        ],
+      ],
+    ]);
+    $this->schema->changeField('table_with_invalid_unique_key', 'test_field_1', 'test_field_1', [
+      'type' => 'varchar',
+      'length' => 20,
+      'not null' => TRUE,
+    ], [
+      'unique keys' => [
+        'test_unique_key' => [['test_field_1', 10]],
+      ],
+    ]);
+  }
+
   /**
    * Tests changing the primary key with an invalid field specification.
    */
diff --git a/core/tests/Drupal/KernelTests/Core/Database/SchemaUniquePrefixedKeysIndexTestBase.php b/core/tests/Drupal/KernelTests/Core/Database/SchemaUniquePrefixedKeysIndexTestBase.php
index 12313abf989c90a3d571fa1103100f38e420646c..75a16e1709e502bb4efe9870ad40d3a0bbabc10a 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/SchemaUniquePrefixedKeysIndexTestBase.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/SchemaUniquePrefixedKeysIndexTestBase.php
@@ -8,6 +8,10 @@
  * Tests adding UNIQUE keys to tables.
  *
  * @group Database
+ * @group legacy
+ *
+ * @todo in drupal:11.0.0, do not drop this test but rather test full length
+ *   columns.
  */
 abstract class SchemaUniquePrefixedKeysIndexTestBase extends DriverSpecificDatabaseTestBase {
 
@@ -28,6 +32,7 @@ abstract class SchemaUniquePrefixedKeysIndexTestBase extends DriverSpecificDatab
    * Tests UNIQUE keys put directly on the table definition.
    */
   public function testCreateTable(): void {
+    $this->expectDeprecation('Specification of unique keys with column length is deprecated in drupal:10.2.0 and will throw a SchemaException from drupal:11.0.0. Specify full columns for an unique key, or use an index for columns with partial length. See https://www.drupal.org/node/3375071');
     $this->connection->schema()->createTable('test_unique', [
       'fields' => [
         'field' => [
@@ -47,6 +52,7 @@ public function testCreateTable(): void {
    * Tests adding a UNIQUE key to an existing table.
    */
   public function testAddUniqueKey(): void {
+    $this->expectDeprecation('Specification of unique keys with column length is deprecated in drupal:10.2.0 and will throw a SchemaException from drupal:11.0.0. Specify full columns for an unique key, or use an index for columns with partial length. See https://www.drupal.org/node/3375071');
     $this->connection->schema()
       ->addUniqueKey('test_people', 'job', [['job', 10]]);
 
@@ -57,6 +63,7 @@ public function testAddUniqueKey(): void {
    * Tests adding a new field with UNIQUE key.
    */
   public function testAddField(): void {
+    $this->expectDeprecation('Specification of unique keys with column length is deprecated in drupal:10.2.0 and will throw a SchemaException from drupal:11.0.0. Specify full columns for an unique key, or use an index for columns with partial length. See https://www.drupal.org/node/3375071');
     $field_spec = [
       'type' => 'varchar',
       'length' => 50,
@@ -76,6 +83,7 @@ public function testAddField(): void {
    * Tests changing a field to add a UNIQUE key.
    */
   public function testChangeField(): void {
+    $this->expectDeprecation('Specification of unique keys with column length is deprecated in drupal:10.2.0 and will throw a SchemaException from drupal:11.0.0. Specify full columns for an unique key, or use an index for columns with partial length. See https://www.drupal.org/node/3375071');
     $field_spec = [
       'description' => "The person's job",
       'type' => 'varchar_ascii',
