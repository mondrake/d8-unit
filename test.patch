diff --git a/core/modules/comment/tests/src/Functional/CommentCSSTest.php b/core/modules/comment/tests/src/Functional/CommentCSSTest.php
index bff7bed185..63710e8c26 100644
--- a/core/modules/comment/tests/src/Functional/CommentCSSTest.php
+++ b/core/modules/comment/tests/src/Functional/CommentCSSTest.php
@@ -88,43 +88,40 @@ public function testCommentClasses() {
 
       // Verify the data-history-node-id attribute, which is necessary for the
       // by-viewer class and the "new" indicator, see below.
-      $this->assertCount(1, $this->xpath('//*[@data-history-node-id="' . $node->id() . '"]'), 'data-history-node-id attribute is set on node.');
+      $this->assertSession()->elementsCount('xpath', "//*[@data-history-node-id=\"{$node->id()}\"]", 1);
 
       // Verify classes if the comment is visible for the current user.
       if ($case['comment_status'] == CommentInterface::PUBLISHED || $case['user'] == 'admin') {
         // Verify the by-anonymous class.
-        $comments = $this->xpath('//*[contains(@class, "comment") and contains(@class, "by-anonymous")]');
         if ($case['comment_uid'] == 0) {
-          $this->assertCount(1, $comments, 'by-anonymous class found.');
+          $this->assertSession()->elementsCount('xpath', '//*[contains(@class, "comment") and contains(@class, "by-anonymous")]', 1);
         }
         else {
-          $this->assertCount(0, $comments, 'by-anonymous class not found.');
+          $this->assertSession()->elementNotExists('xpath', '//*[contains(@class, "comment") and contains(@class, "by-anonymous")]');
         }
 
         // Verify the by-node-author class.
-        $comments = $this->xpath('//*[contains(@class, "comment") and contains(@class, "by-node-author")]');
         if ($case['comment_uid'] > 0 && $case['comment_uid'] == $case['node_uid']) {
-          $this->assertCount(1, $comments, 'by-node-author class found.');
+          $this->assertSession()->elementsCount('xpath', '//*[contains(@class, "comment") and contains(@class, "by-node-author")]', 1);
         }
         else {
-          $this->assertCount(0, $comments, 'by-node-author class not found.');
+          $this->assertSession()->elementNotExists('xpath', '//*[contains(@class, "comment") and contains(@class, "by-node-author")]');
         }
 
         // Verify the data-comment-user-id attribute, which is used by the
         // drupal.comment-by-viewer library to add a by-viewer when the current
         // user (the viewer) was the author of the comment. We do this in Java-
         // Script to prevent breaking the render cache.
-        $this->assertCount(1, $this->xpath('//*[contains(@class, "comment") and @data-comment-user-id="' . $case['comment_uid'] . '"]'), 'data-comment-user-id attribute is set on comment.');
+        $this->assertSession()->elementsCount('xpath', '//*[contains(@class, "comment") and @data-comment-user-id="' . $case['comment_uid'] . '"]', 1);
         $this->assertRaw(drupal_get_path('module', 'comment') . '/js/comment-by-viewer.js');
       }
 
       // Verify the unpublished class.
-      $comments = $this->xpath('//*[contains(@class, "comment") and contains(@class, "unpublished")]');
       if ($case['comment_status'] == CommentInterface::NOT_PUBLISHED && $case['user'] == 'admin') {
-        $this->assertCount(1, $comments, 'unpublished class found.');
+        $this->assertSession()->elementsCount('xpath', '//*[contains(@class, "comment") and contains(@class, "unpublished")]', 1);
       }
       else {
-        $this->assertCount(0, $comments, 'unpublished class not found.');
+        $this->assertSession()->elementNotExists('xpath', '//*[contains(@class, "comment") and contains(@class, "unpublished")]');
       }
 
       // Verify the data-comment-timestamp attribute, which is used by the
@@ -132,7 +129,7 @@ public function testCommentClasses() {
       // comment that was created or changed after the last time the current
       // user read the corresponding node.
       if ($case['comment_status'] == CommentInterface::PUBLISHED || $case['user'] == 'admin') {
-        $this->assertCount(1, $this->xpath('//*[contains(@class, "comment")]/*[@data-comment-timestamp="' . $comment->getChangedTime() . '"]'), 'data-comment-timestamp attribute is set on comment');
+        $this->assertSession()->elementsCount('xpath', '//*[contains(@class, "comment")]/*[@data-comment-timestamp="' . $comment->getChangedTime() . '"]', 1);
         $expectedJS = ($case['user'] !== 'anonymous');
         $this->assertIdentical($expectedJS, isset($settings['ajaxPageState']['libraries']) && in_array('comment/drupal.comment-new-indicator', explode(',', $settings['ajaxPageState']['libraries'])), 'drupal.comment-new-indicator library is present.');
       }
diff --git a/core/modules/comment/tests/src/Functional/CommentInterfaceTest.php b/core/modules/comment/tests/src/Functional/CommentInterfaceTest.php
index 2af323a516..fc5cf73b21 100644
--- a/core/modules/comment/tests/src/Functional/CommentInterfaceTest.php
+++ b/core/modules/comment/tests/src/Functional/CommentInterfaceTest.php
@@ -83,12 +83,9 @@ public function testCommentInterface() {
     $this->drupalGet('node/' . $this->node->id());
     $this->assertText($subject_text, 'Individual comment subject found.');
     $this->assertText($comment_text, 'Individual comment body found.');
-    $arguments = [
-      ':link' => base_path() . 'comment/' . $comment->id() . '#comment-' . $comment->id(),
-    ];
-    $pattern_permalink = '//footer[contains(@class,"comment__meta")]/a[contains(@href,:link) and text()="Permalink"]';
-    $permalink = $this->xpath($pattern_permalink, $arguments);
-    $this->assertTrue(!empty($permalink), 'Permalink link found.');
+    // Verify that Permalink link is present.
+    $link = base_path() . 'comment/' . $comment->id() . '#comment-' . $comment->id();
+    $this->assertSession()->elementExists('xpath', "//footer[contains(@class,\"comment__meta\")]/a[contains(@href, \"{$link})\" and text() = \"Permalink\"]");
 
     // Set comments to have subject and preview to optional.
     $this->drupalLogout();
diff --git a/core/modules/comment/tests/src/Functional/CommentNewIndicatorTest.php b/core/modules/comment/tests/src/Functional/CommentNewIndicatorTest.php
index 76ecbdd67d..69fad8ce3e 100644
--- a/core/modules/comment/tests/src/Functional/CommentNewIndicatorTest.php
+++ b/core/modules/comment/tests/src/Functional/CommentNewIndicatorTest.php
@@ -66,7 +66,7 @@ public function testCommentNewCommentsIndicator() {
     // used by the drupal.node-new-comments-link library to determine whether
     // a "x new comments" link might be necessary or not. We do this in
     // JavaScript to prevent breaking the render cache.
-    $this->assertCount(0, $this->xpath('//*[@data-history-node-last-comment-timestamp]'), 'data-history-node-last-comment-timestamp attribute is not set.');
+    $this->assertSession()->elementNotExists('xpath', '//*[@data-history-node-last-comment-timestamp]');
 
     // Create a new comment. This helper function may be run with different
     // comment settings so use $comment->save() to avoid complex setup.
@@ -94,8 +94,8 @@ public function testCommentNewCommentsIndicator() {
     // value, the drupal.node-new-comments-link library would determine that the
     // node received a comment after the user last viewed it, and hence it would
     // perform an HTTP request to render the "new comments" node link.
-    $this->assertCount(1, $this->xpath('//*[@data-history-node-last-comment-timestamp="' . $comment->getChangedTime() . '"]'), 'data-history-node-last-comment-timestamp attribute is set to the correct value.');
-    $this->assertCount(1, $this->xpath('//*[@data-history-node-field-name="comment"]'), 'data-history-node-field-name attribute is set to the correct value.');
+    $this->assertSession()->elementsCount('xpath', '//*[@data-history-node-last-comment-timestamp="' . $comment->getChangedTime() . '"]', 1);
+    $this->assertSession()->elementsCount('xpath', '//*[@data-history-node-field-name="comment"]', 1);
     // The data will be pre-seeded on this particular page in drupalSettings, to
     // avoid the need for the client to make a separate request to the server.
     $settings = $this->getDrupalSettings();
diff --git a/core/modules/comment/tests/src/Functional/CommentNonNodeTest.php b/core/modules/comment/tests/src/Functional/CommentNonNodeTest.php
index b7816e64b0..75f53d2d19 100644
--- a/core/modules/comment/tests/src/Functional/CommentNonNodeTest.php
+++ b/core/modules/comment/tests/src/Functional/CommentNonNodeTest.php
@@ -287,8 +287,7 @@ public function testCommentFunctionality() {
 
     // Test breadcrumb on comment add page.
     $this->drupalGet('comment/reply/entity_test/' . $this->entity->id() . '/comment');
-    $xpath = '//nav[@class="breadcrumb"]/ol/li[last()]/a';
-    $this->assertEqual(current($this->xpath($xpath))->getText(), $this->entity->label(), 'Last breadcrumb item is equal to node title on comment reply page.');
+    $this->assertSession()->elementTextContains('xpath', '//nav[@class="breadcrumb"]/ol/li[last()]/a', $this->entity->label());
 
     // Post a comment.
     /** @var \Drupal\comment\CommentInterface $comment1 */
@@ -297,18 +296,15 @@ public function testCommentFunctionality() {
 
     // Test breadcrumb on comment reply page.
     $this->drupalGet('comment/reply/entity_test/' . $this->entity->id() . '/comment/' . $comment1->id());
-    $xpath = '//nav[@class="breadcrumb"]/ol/li[last()]/a';
-    $this->assertEqual(current($this->xpath($xpath))->getText(), $comment1->getSubject(), 'Last breadcrumb item is equal to comment title on comment reply page.');
+    $this->assertSession()->elementTextContains('xpath', '//nav[@class="breadcrumb"]/ol/li[last()]/a', $comment1->getSubject());
 
     // Test breadcrumb on comment edit page.
     $this->drupalGet('comment/' . $comment1->id() . '/edit');
-    $xpath = '//nav[@class="breadcrumb"]/ol/li[last()]/a';
-    $this->assertEqual(current($this->xpath($xpath))->getText(), $comment1->getSubject(), 'Last breadcrumb item is equal to comment subject on edit page.');
+    $this->assertSession()->elementTextContains('xpath', '//nav[@class="breadcrumb"]/ol/li[last()]/a', $comment1->getSubject());
 
     // Test breadcrumb on comment delete page.
     $this->drupalGet('comment/' . $comment1->id() . '/delete');
-    $xpath = '//nav[@class="breadcrumb"]/ol/li[last()]/a';
-    $this->assertEqual(current($this->xpath($xpath))->getText(), $comment1->getSubject(), 'Last breadcrumb item is equal to comment subject on delete confirm page.');
+    $this->assertSession()->elementTextContains('xpath', '//nav[@class="breadcrumb"]/ol/li[last()]/a', $comment1->getSubject());
 
     // Unpublish the comment.
     $this->performCommentOperation($comment1, 'unpublish');
diff --git a/core/modules/comment/tests/src/Functional/CommentPreviewTest.php b/core/modules/comment/tests/src/Functional/CommentPreviewTest.php
index ffdcd3d53f..20db40cf39 100644
--- a/core/modules/comment/tests/src/Functional/CommentPreviewTest.php
+++ b/core/modules/comment/tests/src/Functional/CommentPreviewTest.php
@@ -112,16 +112,14 @@ public function testCommentPreviewDuplicateSubmission() {
     // Store the content of this page.
     $this->drupalPostForm(NULL, [], 'Save');
     $this->assertText('Your comment has been posted.');
-    $elements = $this->xpath('//section[contains(@class, "comment-wrapper")]/article');
-    $this->assertCount(1, $elements);
+    $this->assertSession()->elementsCount('xpath', '//section[contains(@class, "comment-wrapper")]/article', 1);
 
     // Go back and re-submit the form.
     $this->getSession()->getDriver()->back();
     $submit_button = $this->assertSession()->buttonExists('Save');
     $submit_button->click();
     $this->assertText('Your comment has been posted.');
-    $elements = $this->xpath('//section[contains(@class, "comment-wrapper")]/article');
-    $this->assertCount(2, $elements);
+    $this->assertSession()->elementsCount('xpath', '//section[contains(@class, "comment-wrapper")]/article', 2);
   }
 
   /**
diff --git a/core/modules/comment/tests/src/Functional/Views/CommentAdminTest.php b/core/modules/comment/tests/src/Functional/Views/CommentAdminTest.php
index 8fa3f7bb54..a3d34a2b34 100644
--- a/core/modules/comment/tests/src/Functional/Views/CommentAdminTest.php
+++ b/core/modules/comment/tests/src/Functional/Views/CommentAdminTest.php
@@ -126,20 +126,21 @@ public function testApprovalAdminInterface() {
     $this->drupalPostForm('admin/content/comment', [], t('Apply to selected items'));
     $this->assertText(t('Select one or more comments to perform the update on.'));
 
-    $subject_link = $this->xpath('//table/tbody/tr/td/a[contains(@href, :href) and contains(@title, :title) and text()=:text]', [
+    // Verify that comment listing shows the correct subject link.
+    $subject_link = $this->assertSession()->buildXPathQuery('//table/tbody/tr/td/a[contains(@href, :href) and contains(@title, :title) and text()=:text]', [
       ':href' => $comments[0]->permalink()->toString(),
       ':title' => Unicode::truncate($comments[0]->get('comment_body')->value, 128),
       ':text' => $comments[0]->getSubject(),
     ]);
-    $this->assertTrue(!empty($subject_link), 'Comment listing shows the correct subject link.');
+    $this->assertSession()->elementExists('xpath', $subject_link);
     $this->assertText($author_name . ' (not verified)', 'Anonymous author name is displayed correctly.');
 
-    $subject_link = $this->xpath('//table/tbody/tr/td/a[contains(@href, :href) and contains(@title, :title) and text()=:text]', [
+    $subject_link = $this->assertSession()->buildXPathQuery('//table/tbody/tr/td/a[contains(@href, :href) and contains(@title, :title) and text()=:text]', [
       ':href' => $anonymous_comment4->permalink()->toString(),
       ':title' => Unicode::truncate($body, 128),
       ':text' => $subject,
     ]);
-    $this->assertTrue(!empty($subject_link), 'Comment listing shows the correct subject link.');
+    $this->assertSession()->elementExists('xpath', $subject_link);
     $this->assertText($author_name . ' (not verified)', 'Anonymous author name is displayed correctly.');
 
     // Delete multiple comments in one operation.
@@ -206,16 +207,17 @@ public function testCommentedEntityLabel() {
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/content/comment');
 
-    $comment_author_link = $this->xpath('//table/tbody/tr[1]/td/a[contains(@href, :href) and text()=:text]', [
+    // Verify that comment listing links to comment author.
+    $comment_author_link = $this->assertSession()->buildXPathQuery('//table/tbody/tr[1]/td/a[contains(@href, :href) and text()=:text]', [
       ':href' => $this->webUser->toUrl()->toString(),
       ':text' => $this->webUser->label(),
     ]);
-    $this->assertTrue(!empty($comment_author_link), 'Comment listing links to comment author.');
-    $comment_author_link = $this->xpath('//table/tbody/tr[2]/td/a[contains(@href, :href) and text()=:text]', [
+    $this->assertSession()->elementExists('xpath', $comment_author_link);
+    $comment_author_link = $this->assertSession()->buildXPathQuery('//table/tbody/tr[2]/td/a[contains(@href, :href) and text()=:text]', [
       ':href' => $this->webUser->toUrl()->toString(),
       ':text' => $this->webUser->label(),
     ]);
-    $this->assertTrue(!empty($comment_author_link), 'Comment listing links to comment author.');
+    $this->assertSession()->elementExists('xpath', $comment_author_link);
     // Admin page contains label of both entities.
     $this->assertText(Html::escape($this->node->label()), 'Node title is visible.');
     $this->assertText(Html::escape($block_content->label()), 'Block content label is visible.');
diff --git a/core/modules/comment/tests/src/Functional/Views/CommentRowTest.php b/core/modules/comment/tests/src/Functional/Views/CommentRowTest.php
index 7b96549005..f03831cfd3 100644
--- a/core/modules/comment/tests/src/Functional/Views/CommentRowTest.php
+++ b/core/modules/comment/tests/src/Functional/Views/CommentRowTest.php
@@ -27,8 +27,8 @@ class CommentRowTest extends CommentTestBase {
   public function testCommentRow() {
     $this->drupalGet('test-comment-row');
 
-    $result = $this->xpath('//article[contains(@class, "comment")]');
-    $this->assertCount(1, $result, 'One rendered comment found.');
+    // Check that only one rendered comment is found.
+    $this->assertSession()->elementsCount('xpath', '//*[contains(@class, "comment") and contains(@class, "unpublished")]', 1);
   }
 
 }
diff --git a/core/modules/comment/tests/src/Kernel/Views/CommentUserNameTest.php b/core/modules/comment/tests/src/Kernel/Views/CommentUserNameTest.php
index d10a3b91fe..17e8f2a6cb 100644
--- a/core/modules/comment/tests/src/Kernel/Views/CommentUserNameTest.php
+++ b/core/modules/comment/tests/src/Kernel/Views/CommentUserNameTest.php
@@ -155,10 +155,7 @@ public function testUsername() {
     $this->assertLink('Anonymous comment title');
     // Display plugin of the view is showing the name field. When comment
     // belongs to an authenticated user the name field has no value.
-    $comment_author = $this->xpath('//div[contains(@class, :class)]/span[normalize-space(text())=""]', [
-      ':class' => 'views-field-subject',
-    ]);
-    $this->assertTrue(!empty($comment_author));
+    $this->assertSession()->elementExists('xpath', '//div[contains(@class, "views-field-subject")]/span[normalize-space(text())=""]');
     // When comment belongs to an anonymous user the name field has a value and
     // it is rendered correctly.
     $this->assertLink('barry (not verified)');
