diff --git a/core/modules/views/src/Plugin/views/query/Sql.php b/core/modules/views/src/Plugin/views/query/Sql.php
index 14b335b63f..0f03b38254 100644
--- a/core/modules/views/src/Plugin/views/query/Sql.php
+++ b/core/modules/views/src/Plugin/views/query/Sql.php
@@ -1530,13 +1530,17 @@ public function execute(ViewExecutable $view) {
         }
 
         $result = $query->execute();
-        $result->setFetchMode(\PDO::FETCH_CLASS, 'Drupal\views\ResultRow');
+        $result->setFetchMode(\PDO::FETCH_OBJ);
 
         // Setup the result row objects.
-        $view->result = iterator_to_array($result);
-        array_walk($view->result, function (ResultRow $row, $index) {
-          $row->index = $index;
-        });
+        $i = 0;
+        $view->result = [];
+        foreach ($result as $rowObj) {
+          $view->result[] = new ResultRow([
+            'data' => $rowObj,
+            'index' => $i++,
+          ]);
+        }
 
         $view->pager->postExecute($view->result);
         $view->pager->updatePageInfo();
diff --git a/core/modules/views/src/ResultRow.php b/core/modules/views/src/ResultRow.php
index 2399f69983..956a583519 100644
--- a/core/modules/views/src/ResultRow.php
+++ b/core/modules/views/src/ResultRow.php
@@ -5,9 +5,13 @@
 /**
  * A class representing a view result row.
  */
-#[\AllowDynamicProperties]
 class ResultRow {
 
+  /**
+   * Raw row data.
+   */
+  protected \stdClass $data;
+
   /**
    * The entity for this result.
    *
@@ -51,4 +55,55 @@ public function resetEntityData() {
     $this->_relationship_entities = [];
   }
 
+  /**
+   * Implements the magic method for getting object properties.
+   *
+   * @param string $name
+   *   Property name.
+   *
+   * @return mixed
+   *   The value of the property.
+   */
+  public function __get(string $name): mixed {
+    if (property_exists($name, $this->data)) {
+      return $this->data->$name;
+    }
+    throw new \RuntimeException();
+  }
+
+  /**
+   * Implements the magic method to determines whether a property is set.
+   *
+   * @param string $name
+   *   Property name.
+   *
+   * @return bool
+   *   True if property is set.
+   */
+  public function __isset(string $name): bool {
+    return isset($this->data->$name);
+  }
+
+  /**
+   * Implements the magic method to set a property.
+   *
+   * @param $name
+   *   Property name.
+   * @param mixed $value
+   *   The value of the property.
+   */
+  public function __set(string $name, mixed $value): void {
+    $this->data->$name = $value;
+  }
+
+  /**
+   * Implements the magic method to unset a property.
+   *
+   * @param $name
+   *   Property name.
+   */
+  public function __unset($name): void {
+    unset($this->data->$name);
+  }
+
 }
