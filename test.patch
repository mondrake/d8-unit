diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/Column.php b/core/lib/Drupal/Core/Database/SchemaDefinition/Column.php
new file mode 100644
index 0000000000..b61dfb69d6
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/Column.php
@@ -0,0 +1,31 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a database table's column.
+ */
+final class Column implements SchemaDefinitionInterface {
+
+  /**
+   * Constructor.
+   */
+  public function __construct(
+    public readonly string $name,
+    public readonly string $type,
+    public readonly Property|string $description = Property::Undefined,
+    public readonly Property|bool $serialize = Property::Undefined,
+    public readonly Property|string $size = Property::Undefined,
+    public readonly Property|bool $notNull = Property::Undefined,
+    public readonly Property|string|int $default = Property::Undefined,
+    public readonly Property|int $length = Property::Undefined,
+    public readonly Property|bool $unsigned = Property::Undefined,
+    public readonly Property|int $precision = Property::Undefined,
+    public readonly Property|int $scale = Property::Undefined,
+    public readonly Property|bool $binary = Property::Undefined,
+  ) {
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/ConvertDefinitionTrait.php b/core/lib/Drupal/Core/Database/SchemaDefinition/ConvertDefinitionTrait.php
new file mode 100644
index 0000000000..11b7605d7d
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/ConvertDefinitionTrait.php
@@ -0,0 +1,34 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Interface for objects describing database elements.
+ */
+trait ConvertDefinitionTrait {
+
+  final protected function convertTableToSchemaDefinition(array $spec): array {
+    if (!empty($spec['primary key'])) {
+      $spec['primary key'] = $this->convertPrimaryKeyToSchemaDefinition($spec['primary key']);
+    }
+    if (!empty($spec['indexes'])) {
+      $spec['indexes'] = $this->convertIndexesToSchemaDefinition($spec['indexes']);
+    }
+    return $spec;
+  }
+
+  final protected function convertPrimaryKeyToSchemaDefinition(PrimaryKey|array $primaryKey): PrimaryKey {
+    return $primaryKey instanceof PrimaryKey ? $primaryKey : new PrimaryKey($primaryKey);
+  }
+
+  final protected function convertIndexesToSchemaDefinition(array $indexes): array {
+    return array_map(fn(int|string $key, Index|array $value): Index => $this->convertIndexToSchemaDefinition($key, $value), array_keys($indexes), $indexes);
+  }
+
+  final protected function convertIndexToSchemaDefinition(string|int $name, Index|array $index): Index {
+    return $index instanceof Index ? $index : new Index($name, $index);
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/ForeignKey.php b/core/lib/Drupal/Core/Database/SchemaDefinition/ForeignKey.php
new file mode 100644
index 0000000000..a76e8dd334
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/ForeignKey.php
@@ -0,0 +1,24 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a database foreign key.
+ */
+final class UniqueKey extends KeyBase {
+
+  /**
+   * Constructor.
+   */
+  public function __construct(
+    public readonly string $name,
+    public readonly string $foreignTable,
+    array $columns,
+    public readonly array $foreignColumns,
+  ) {
+    parent::__construct($columns);
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/Index.php b/core/lib/Drupal/Core/Database/SchemaDefinition/Index.php
new file mode 100644
index 0000000000..0a9e72dff1
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/Index.php
@@ -0,0 +1,22 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a database index.
+ */
+final class Index extends KeyBase {
+
+  /**
+   * Constructor.
+   */
+  public function __construct(
+    public readonly string $name,
+    array $columns,
+  ) {
+    parent::__construct($columns);
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/KeyBase.php b/core/lib/Drupal/Core/Database/SchemaDefinition/KeyBase.php
new file mode 100644
index 0000000000..ca9c743602
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/KeyBase.php
@@ -0,0 +1,33 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Base class for table keys (primary, unique, index).
+ */
+abstract class KeyBase implements SchemaDefinitionInterface {
+
+  public readonly array $columns;
+
+  /**
+   * Constructor.
+   */
+  public function __construct(array $columns) {
+    $cols = [];
+    foreach ($columns as $columnDefinition) {
+      if ($columnDefinition instanceof KeyColumn) {
+        $cols[] = $columnDefinition;
+      }
+      elseif (is_array($columnDefinition)) {
+        $cols[] = new KeyColumn($columnDefinition[0], $columnDefinition[1]);
+      }
+      else {
+        $cols[] = new KeyColumn($columnDefinition);
+      }
+    }
+    $this->columns = $cols;
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/KeyColumn.php b/core/lib/Drupal/Core/Database/SchemaDefinition/KeyColumn.php
new file mode 100644
index 0000000000..314a7c7e05
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/KeyColumn.php
@@ -0,0 +1,21 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a column of a database index or key.
+ */
+final class KeyColumn implements SchemaDefinitionInterface {
+
+  /**
+   * Constructor.
+   */
+  public function __construct(
+    public readonly string $name,
+    public readonly ?int $length = NULL,
+  ) {
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/PrimaryKey.php b/core/lib/Drupal/Core/Database/SchemaDefinition/PrimaryKey.php
new file mode 100644
index 0000000000..b0c78786e5
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/PrimaryKey.php
@@ -0,0 +1,19 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a table's primary key.
+ */
+final class PrimaryKey extends KeyBase {
+
+  /**
+   * Constructor.
+   */
+  public function __construct(array $columns) {
+    parent::__construct($columns);
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/Property.php b/core/lib/Drupal/Core/Database/SchemaDefinition/Property.php
new file mode 100644
index 0000000000..6bee3da7d9
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/Property.php
@@ -0,0 +1,14 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Enumeration of property special cases for SchemaDefinition.
+ */
+enum Property {
+
+  case Undefined;
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/SchemaDefinitionInterface.php b/core/lib/Drupal/Core/Database/SchemaDefinition/SchemaDefinitionInterface.php
new file mode 100644
index 0000000000..2d3489f872
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/SchemaDefinitionInterface.php
@@ -0,0 +1,11 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Interface for objects describing database elements.
+ */
+interface SchemaDefinitionInterface {
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/Table.php b/core/lib/Drupal/Core/Database/SchemaDefinition/Table.php
new file mode 100644
index 0000000000..ac68d80dce
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/Table.php
@@ -0,0 +1,26 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a database table.
+ */
+final class Table implements SchemaDefinitionInterface {
+
+  /**
+   * Constructor.
+   */
+  public function __construct(
+    public readonly string $name,
+    public readonly array $columns,
+    public readonly Property|string $description = Property::Undefined,
+    public readonly Property|PrimaryKey $primaryKey = Property::Undefined,
+    public readonly Property|array $uniqueKeys = Property::Undefined,
+    public readonly Property|array $indexes = Property::Undefined,
+    public readonly Property|array $foreignKeys = Property::Undefined,
+  ) {
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/UniqueKey.php b/core/lib/Drupal/Core/Database/SchemaDefinition/UniqueKey.php
new file mode 100644
index 0000000000..68a3b7e052
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/UniqueKey.php
@@ -0,0 +1,22 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a database unique key.
+ */
+final class UniqueKey extends KeyBase {
+
+  /**
+   * Constructor.
+   */
+  public function __construct(
+    public readonly string $name,
+    array $columns,
+  ) {
+    parent::__construct($columns);
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Extension/ModuleInstaller.php b/core/lib/Drupal/Core/Extension/ModuleInstaller.php
index 289ecffe41..d8e738989c 100644
--- a/core/lib/Drupal/Core/Extension/ModuleInstaller.php
+++ b/core/lib/Drupal/Core/Extension/ModuleInstaller.php
@@ -656,6 +656,7 @@ public function validateUninstall(array $module_list) {
    */
   protected function installSchema(string $module): void {
     $tables = $this->moduleHandler->invoke($module, 'schema') ?? [];
+dump($tables);
     $schema = $this->connection->schema();
     foreach ($tables as $name => $table) {
       $schema->createTable($name, $table);
diff --git a/core/modules/system/system.install b/core/modules/system/system.install
index 079fa6cbf7..1c73c692bf 100644
--- a/core/modules/system/system.install
+++ b/core/modules/system/system.install
@@ -13,6 +13,12 @@
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Database\Database;
+use Drupal\Core\Database\SchemaDefinition\Column;
+use Drupal\Core\Database\SchemaDefinition\ForeignKey;
+use Drupal\Core\Database\SchemaDefinition\Index;
+use Drupal\Core\Database\SchemaDefinition\KeyColumn;
+use Drupal\Core\Database\SchemaDefinition\PrimaryKey;
+use Drupal\Core\Database\SchemaDefinition\Table;
 use Drupal\Core\DrupalKernel;
 use Drupal\Core\Extension\ExtensionLifecycle;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -1629,56 +1635,62 @@ function system_schema() {
     'primary key' => ['value'],
   ];
 
-  $schema['sessions'] = [
-    'description' => "Drupal's session handlers read and write into the sessions table. Each record represents a user session, either anonymous or authenticated.",
-    'fields' => [
-      'uid' => [
-        'description' => 'The {users}.uid corresponding to a session, or 0 for anonymous user.',
-        'type' => 'int',
-        'unsigned' => TRUE,
-        'not null' => TRUE,
-      ],
-      'sid' => [
-        'description' => "A session ID (hashed). The value is generated by Drupal's session handlers.",
-        'type' => 'varchar_ascii',
-        'length' => 128,
-        'not null' => TRUE,
-      ],
-      'hostname' => [
-        'description' => 'The IP address that last used this session ID (sid).',
-        'type' => 'varchar_ascii',
-        'length' => 128,
-        'not null' => TRUE,
-        'default' => '',
-      ],
-      'timestamp' => [
-        'description' => 'The Unix timestamp when this session last requested a page. Old records are purged by PHP automatically.',
-        'type' => 'int',
-        'not null' => TRUE,
-        'default' => 0,
-        'size' => 'big',
-      ],
-      'session' => [
-        'description' => 'The serialized contents of the user\'s session, an array of name/value pairs that persists across page requests by this session ID. Drupal loads the user\'s session from here at the start of each request and saves it at the end.',
-        'type' => 'blob',
-        'not null' => FALSE,
-        'size' => 'big',
-      ],
+  $schema[] = new Table(
+    name: 'sessions',
+    description: "Drupal's session handlers read and write into the sessions table. Each record represents a user session, either anonymous or authenticated.",
+    columns: [
+      new Column(
+        name: 'uid',
+        description: 'The {users}.uid corresponding to a session, or 0 for anonymous user.',
+        type: 'int',
+        unsigned: TRUE,
+        notNull: TRUE,
+      ),
+      new Column(
+        name: 'sid',
+        description: "A session ID (hashed). The value is generated by Drupal's session handlers.",
+        type: 'varchar_ascii',
+        length: 128,
+        notNull: TRUE,
+      ),
+      new Column(
+        name: 'hostname',
+        description: 'The IP address that last used this session ID (sid).',
+        type: 'varchar_ascii',
+        length: 128,
+        notNull: TRUE,
+        default: '',
+      ),
+      new Column(
+        name: 'timestamp',
+        description: 'The Unix timestamp when this session last requested a page. Old records are purged by PHP automatically.',
+        type: 'int',
+        notNull: TRUE,
+        default: 0,
+        size: 'big',
+      ),
+      new Column(
+        name: 'session',
+        description: 'The serialized contents of the user\'s session, an array of name/value pairs that persists across page requests by this session ID. Drupal loads the user\'s session from here at the start of each request and saves it at the end.',
+        type: 'blob',
+        notNull: FALSE,
+        size: 'big',
+      ),
     ],
-    'primary key' => [
-      'sid',
+    primaryKey: new PrimaryKey(['sid']),
+    indexes: [
+      new Index('timestamp', ['timestamp']),
+      new Index('uid', ['uid']),
     ],
-    'indexes' => [
-      'timestamp' => ['timestamp'],
-      'uid' => ['uid'],
+    foreignKeys: [
+      new ForeignKey(
+        name: 'session_user',
+        foreignTable: 'users',
+        columns: ['uid']
+        foreignColumns: ['uid'],
+      ),
     ],
-    'foreign keys' => [
-      'session_user' => [
-        'table' => 'users',
-        'columns' => ['uid' => 'uid'],
-      ],
-    ],
-  ];
+  );
 
   return $schema;
 }
