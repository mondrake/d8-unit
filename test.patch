diff --git a/core/modules/image/image.module b/core/modules/image/image.module
index 0d8bd4b1f26..5d9189d4b47 100644
--- a/core/modules/image/image.module
+++ b/core/modules/image/image.module
@@ -15,6 +15,7 @@
 use Drupal\file\FileInterface;
 use Drupal\image\Controller\ImageStyleDownloadController;
 use Drupal\image\Entity\ImageStyle;
+use Drupal\image\ImageProcessor\TransformedDimensions;
 
 /**
  * The name of the query parameter for image derivative tokens.
@@ -280,12 +281,8 @@ function template_preprocess_image_style(&$variables) {
   $style = ImageStyle::load($variables['style_name']);
 
   // Determine the dimensions of the styled image.
-  $dimensions = [
-    'width' => $variables['width'],
-    'height' => $variables['height'],
-  ];
-
-  $style->transformDimensions($dimensions, $variables['uri']);
+  $dimensions = new TransformedDimensions($variables['width'], $variables['height'], $variables['uri']);
+  $style->transformDimensions($dimensions, NULL);
 
   $variables['image'] = [
     '#theme' => 'image',
diff --git a/core/modules/image/src/Entity/ImageStyle.php b/core/modules/image/src/Entity/ImageStyle.php
index f975dc10932..23a0c45dd37 100644
--- a/core/modules/image/src/Entity/ImageStyle.php
+++ b/core/modules/image/src/Entity/ImageStyle.php
@@ -17,6 +17,7 @@
 use Drupal\Core\Url;
 use Drupal\image\ImageEffectPluginCollection;
 use Drupal\image\ImageEffectInterface;
+use Drupal\image\ImageProcessor\TransformedDimensions;
 use Drupal\image\ImageStyleInterface;
 use Drupal\Component\Utility\Crypt;
 use Drupal\Component\Utility\UrlHelper;
@@ -346,10 +347,21 @@ public function createDerivative($original_uri, $derivative_uri) {
   /**
    * {@inheritdoc}
    */
-  public function transformDimensions(array &$dimensions, $uri) {
+  public function transformDimensions(array|TransformedDimensions &$dimensions, $uri): void {
+    if (is_array($dimensions)) {
+      @trigger_error('one', E_USER_DEPRECATED);
+    }
+    if (isset(func_get_args()[1])) {
+      @trigger_error('two', E_USER_DEPRECATED);
+    }
+    $d = ['width' => $dimensions['width'], 'height' => $dimensions['height']];
     foreach ($this->getEffects() as $effect) {
-      $effect->transformDimensions($dimensions, $uri);
+      $effectMethod = new \ReflectionMethod($effect, 'transformDimensions');
+throw new \Exception(var_export($effectMethod->getParameters()[0]->getType()->getTypes()));
+      $effect->transformDimensions($d, $dimensions->uri);
     }
+    $dimensions['width'] = $d['width'];
+    $dimensions['height'] = $d['height'];
   }
 
   /**
diff --git a/core/modules/image/src/ImageEffectBase.php b/core/modules/image/src/ImageEffectBase.php
index 58be370c1e6..c02efaf4813 100644
--- a/core/modules/image/src/ImageEffectBase.php
+++ b/core/modules/image/src/ImageEffectBase.php
@@ -65,7 +65,7 @@ public static function create(ContainerInterface $container, array $configuratio
   /**
    * {@inheritdoc}
    */
-  public function transformDimensions(array &$dimensions, $uri) {
+  public function transformDimensions(/* TransformedDimensions $dimensions */ array &$dimensions, $uri) {
     // Most image effects will not change the dimensions. This base
     // implementation represents this behavior. Override this method if your
     // image effect does change the dimensions.
diff --git a/core/modules/image/src/ImageEffectInterface.php b/core/modules/image/src/ImageEffectInterface.php
index 3ac21e4b39d..4df28bdc386 100644
--- a/core/modules/image/src/ImageEffectInterface.php
+++ b/core/modules/image/src/ImageEffectInterface.php
@@ -33,7 +33,7 @@ public function applyEffect(ImageInterface $image);
   /**
    * Determines the dimensions of the styled image.
    *
-   * @param array &$dimensions
+   * @param array|\Drupal\image\ImageProcessor\TransformedDimensions &$dimensions
    *   Dimensions to be modified - an array with the following keys:
    *   - width: the width in pixels, or NULL if unknown
    *   - height: the height in pixels, or NULL if unknown
@@ -48,7 +48,7 @@ public function applyEffect(ImageInterface $image);
    *   be aware that performing IO on the URI may lead to decrease in
    *   performance.
    */
-  public function transformDimensions(array &$dimensions, $uri);
+  public function transformDimensions(/* TransformedDimensions $dimensions */ array &$dimensions, $uri);
 
   /**
    * Returns the extension of the derivative after applying this image effect.
diff --git a/core/modules/image/src/ImageProcessor/TransformedDimensions.php b/core/modules/image/src/ImageProcessor/TransformedDimensions.php
new file mode 100644
index 00000000000..1829828af28
--- /dev/null
+++ b/core/modules/image/src/ImageProcessor/TransformedDimensions.php
@@ -0,0 +1,69 @@
+<?php
+
+namespace Drupal\image\ImageProcessor;
+
+/**
+ * Keeps track of the image dimensions transformation by a style.
+ */
+class TransformedDimensions implements \ArrayAccess {
+
+  /**
+   * The current width.
+   */
+  protected ?int $width;
+
+  /**
+   * The current height.
+   */
+  protected ?int $height;
+
+  /**
+   * Any third party key added to legacy $dimensions array.
+   *
+   * @deprecated
+   */
+  protected array $thirdPartyKey = [];
+
+  public function __construct(
+    public readonly int $originalWidth,
+    public readonly int $originalHeight,
+    public readonly ?string $uri,
+  ) {
+    $this->width = $this->originalWidth;
+    $this->height = $this->originalHeight;
+  }
+
+  public function offsetExists(mixed $offset): bool {
+    if (in_array($offset, ['width', 'height'])) {
+      return TRUE;
+    }
+    return array_key_exists($offset, $this->thirdPartyKey);
+  }
+
+  public function offsetGet(mixed $offset): mixed {
+    return match ($offset) {
+      'width' => $this->width,
+      'height' => $this->height,
+      default => $this->thirdPartyKey[$offset],
+    };
+  }
+
+  public function offsetSet(mixed $offset, mixed $value): void {
+    if ($offset === 'width') {
+      $this->width = $value;
+    }
+    elseif ($offset === 'height') {
+      $this->height = $value;
+    }
+    else {
+      $this->thirdPartyKey[$offset] = $value;
+    }
+  }
+
+  public function offsetUnset(mixed $offset): void {
+    if (!in_array($offset, ['width', 'height'])) {
+      unset($offset);
+    }
+  }
+
+}
diff --git a/core/modules/image/src/ImageStyleInterface.php b/core/modules/image/src/ImageStyleInterface.php
index 2339858e761..eee5be226e4 100644
--- a/core/modules/image/src/ImageStyleInterface.php
+++ b/core/modules/image/src/ImageStyleInterface.php
@@ -111,7 +111,7 @@ public function createDerivative($original_uri, $derivative_uri);
    * - width: Integer with the derivative image width.
    * - height: Integer with the derivative image height.
    *
-   * @param array $dimensions
+   * @param array|\Drupal\image\ImageProcessor\TransformedDimensions $dimensions
    *   Associative array passed by reference. Implementations have to store the
    *   resulting width and height, in pixels.
    * @param string $uri
@@ -125,7 +125,7 @@ public function createDerivative($original_uri, $derivative_uri);
    *
    * @see ImageEffectInterface::transformDimensions
    */
-  public function transformDimensions(array &$dimensions, $uri);
+  public function transformDimensions(/* TransformedDimensions $dimensions */ array &$dimensions, $uri);
 
   /**
    * Determines the extension of the derivative without generating it.
diff --git a/core/modules/image/src/Plugin/ImageEffect/ResizeImageEffect.php b/core/modules/image/src/Plugin/ImageEffect/ResizeImageEffect.php
index ea49e4b23d6..85e97bea177 100644
--- a/core/modules/image/src/Plugin/ImageEffect/ResizeImageEffect.php
+++ b/core/modules/image/src/Plugin/ImageEffect/ResizeImageEffect.php
@@ -7,6 +7,7 @@
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\image\Attribute\ImageEffect;
 use Drupal\image\ConfigurableImageEffectBase;
+use Drupal\image\ImageProcessor\TransformedDimensions;
 
 /**
  * Resizes an image resource.
@@ -32,7 +33,7 @@ public function applyEffect(ImageInterface $image) {
   /**
    * {@inheritdoc}
    */
-  public function transformDimensions(array &$dimensions, $uri) {
+  public function transformDimensions(array|TransformedDimensions &$dimensions, $uri) {
     // The new image will have the exact dimensions defined for the effect.
     $dimensions['width'] = $this->configuration['width'];
     $dimensions['height'] = $this->configuration['height'];
diff --git a/core/modules/image/src/Plugin/ImageEffect/ScaleImageEffect.php b/core/modules/image/src/Plugin/ImageEffect/ScaleImageEffect.php
index 7019260c2ae..165ac9be7ef 100644
--- a/core/modules/image/src/Plugin/ImageEffect/ScaleImageEffect.php
+++ b/core/modules/image/src/Plugin/ImageEffect/ScaleImageEffect.php
@@ -7,6 +7,7 @@
 use Drupal\Core\Image\ImageInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\image\Attribute\ImageEffect;
+use Drupal\image\ImageProcessor\TransformedDimensions;
 
 /**
  * Scales an image resource.
@@ -32,7 +33,7 @@ public function applyEffect(ImageInterface $image) {
   /**
    * {@inheritdoc}
    */
-  public function transformDimensions(array &$dimensions, $uri) {
+  public function transformDimensions(array|TransformedDimensions &$dimensions, $uri) {
     if ($dimensions['width'] && $dimensions['height']) {
       Image::scaleDimensions($dimensions, $this->configuration['width'], $this->configuration['height'], $this->configuration['upscale']);
     }
diff --git a/core/modules/image/tests/src/Kernel/ImageEffectsTest.php b/core/modules/image/tests/src/Kernel/ImageEffectsTest.php
index 6b7662e33e4..951f5b2f878 100644
--- a/core/modules/image/tests/src/Kernel/ImageEffectsTest.php
+++ b/core/modules/image/tests/src/Kernel/ImageEffectsTest.php
@@ -7,6 +7,7 @@
 use Drupal\Core\Form\FormState;
 use Drupal\image\Entity\ImageStyle;
 use Drupal\image\Form\ImageEffectEditForm;
+use Drupal\image\ImageProcessor\TransformedDimensions;
 use Drupal\Tests\Traits\Core\Image\ToolkitTestTrait;
 use Drupal\KernelTests\KernelTestBase;
 
@@ -44,6 +45,15 @@ protected function setUp(): void {
     $this->imageEffectPluginManager = $this->container->get('plugin.manager.image.effect');
   }
 
+  public function testTransformedDimensions(): void {
+    $d = new TransformedDimensions(40, 20, 'public://image.png');
+    $this->assertSame(40, $d->originalWidth);
+    $this->assertSame(20, $d->originalHeight);
+    $this->assertSame('public://image.png', $d->uri);
+    $this->assertSame(40, $d['width']);
+    $this->assertSame(20, $d['height']);
+  }
+
   /**
    * Tests the 'image_resize' effect.
    */
