diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index 7e405e1b1b..7512012d2d 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -62,6 +62,11 @@ abstract class Connection {
    * transaction.
    *
    * @var array
+   *
+   * @deprecated in drupal:10.0.2 and is removed from drupal:11.0.0. The
+   *   transaction stack is now managed by TransactionManager.
+   *
+   * @see https://www.drupal.org/node/5555555
    */
   protected $transactionLayers = [];
 
@@ -204,8 +209,13 @@ abstract class Connection {
    * Post-root (non-nested) transaction commit callbacks.
    *
    * @var callable[]
+   *
+   * @deprecated in drupal:10.0.2 and is removed from drupal:11.0.0. The
+   *   transaction end callbacks are now managed by TransactionRoot.
+   *
+   * @see https://www.drupal.org/node/5555555
    */
-  protected $rootTransactionEndCallbacks = [];
+  public $rootTransactionEndCallbacks = [];
 
   /**
    * The identifier quote characters for the database type.
@@ -226,6 +236,11 @@ abstract class Connection {
    */
   private array $enabledEvents = [];
 
+  /**
+   * The transaction manager.
+   */
+  protected TransactionManager $transactionManager;
+
   /**
    * Constructs a Connection object.
    *
@@ -276,6 +291,21 @@ public function __destruct() {
     $this->connection = NULL;
   }
 
+  /**
+   * Returns the client-level database connection object.
+   *
+   * This method should normally be used only within database driver code. Not
+   * doing so is a risk of introducing code that is not database independent.
+   *
+   * @return object|null
+   *   The client-level database connection, for example \PDO.
+   *
+   * @internal
+   */
+  public function getClientConnection(): ?object {
+    return $this->connection;
+  }
+
   /**
    * Returns the default query options for any given query.
    *
@@ -1294,6 +1324,19 @@ public function escapeLike($string) {
     return addcslashes($string, '\%_');
   }
 
+  /**
+   * Returns the transaction manager.
+   *
+   * @return \Drupal\Core\Database\TransactionManager
+   *   The transaction manager.
+   */
+  public function transactionManager(): TransactionManagerInterface {
+    if (!isset($this->transactionManager)) {
+      $this->transactionManager = new TransactionManager($this);
+    }
+    return $this->transactionManager;
+  }
+
   /**
    * Determines if there is an active transaction open.
    *
@@ -1301,7 +1344,7 @@ public function escapeLike($string) {
    *   TRUE if we're currently in a transaction, FALSE otherwise.
    */
   public function inTransaction() {
-    return ($this->transactionDepth() > 0);
+    return $this->transactionManager()->inTransaction();
   }
 
   /**
@@ -1311,6 +1354,7 @@ public function inTransaction() {
    *   The current transaction depth.
    */
   public function transactionDepth() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
     return count($this->transactionLayers);
   }
 
@@ -1326,8 +1370,7 @@ public function transactionDepth() {
    * @see \Drupal\Core\Database\Transaction
    */
   public function startTransaction($name = '') {
-    $class = $this->getDriverClass('Transaction');
-    return new $class($this, $name);
+    return $this->transactionManager()->start($this, $name);
   }
 
   /**
@@ -1345,50 +1388,7 @@ public function startTransaction($name = '') {
    * @see \Drupal\Core\Database\Transaction::rollBack()
    */
   public function rollBack($savepoint_name = 'drupal_transaction') {
-    if (!$this->inTransaction()) {
-      throw new TransactionNoActiveException();
-    }
-    // A previous rollback to an earlier savepoint may mean that the savepoint
-    // in question has already been accidentally committed.
-    if (!isset($this->transactionLayers[$savepoint_name])) {
-      throw new TransactionNoActiveException();
-    }
-
-    // We need to find the point we're rolling back to, all other savepoints
-    // before are no longer needed. If we rolled back other active savepoints,
-    // we need to throw an exception.
-    $rolled_back_other_active_savepoints = FALSE;
-    while ($savepoint = array_pop($this->transactionLayers)) {
-      if ($savepoint == $savepoint_name) {
-        // If it is the last the transaction in the stack, then it is not a
-        // savepoint, it is the transaction itself so we will need to roll back
-        // the transaction rather than a savepoint.
-        if (empty($this->transactionLayers)) {
-          break;
-        }
-        $this->query('ROLLBACK TO SAVEPOINT ' . $savepoint);
-        $this->popCommittableTransactions();
-        if ($rolled_back_other_active_savepoints) {
-          throw new TransactionOutOfOrderException();
-        }
-        return;
-      }
-      else {
-        $rolled_back_other_active_savepoints = TRUE;
-      }
-    }
-
-    // Notify the callbacks about the rollback.
-    $callbacks = $this->rootTransactionEndCallbacks;
-    $this->rootTransactionEndCallbacks = [];
-    foreach ($callbacks as $callback) {
-      call_user_func($callback, FALSE);
-    }
-
-    $this->connection->rollBack();
-    if ($rolled_back_other_active_savepoints) {
-      throw new TransactionOutOfOrderException();
-    }
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
   }
 
   /**
@@ -1404,18 +1404,7 @@ public function rollBack($savepoint_name = 'drupal_transaction') {
    * @see \Drupal\Core\Database\Transaction
    */
   public function pushTransaction($name) {
-    if (isset($this->transactionLayers[$name])) {
-      throw new TransactionNameNonUniqueException($name . " is already in use.");
-    }
-    // If we're already in a transaction then we want to create a savepoint
-    // rather than try to create another transaction.
-    if ($this->inTransaction()) {
-      $this->query('SAVEPOINT ' . $name);
-    }
-    else {
-      $this->connection->beginTransaction();
-    }
-    $this->transactionLayers[$name] = $name;
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
   }
 
   /**
@@ -1434,17 +1423,7 @@ public function pushTransaction($name) {
    * @see \Drupal\Core\Database\Transaction
    */
   public function popTransaction($name) {
-    // The transaction has already been committed earlier. There is nothing we
-    // need to do. If this transaction was part of an earlier out-of-order
-    // rollback, an exception would already have been thrown by
-    // Database::rollBack().
-    if (!isset($this->transactionLayers[$name])) {
-      return;
-    }
-
-    // Mark this layer as committable.
-    $this->transactionLayers[$name] = FALSE;
-    $this->popCommittableTransactions();
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
   }
 
   /**
@@ -1469,7 +1448,7 @@ public function popTransaction($name) {
    * @see \Drupal\Core\Database\Connection::doCommit()
    */
   public function addRootTransactionEndCallback(callable $callback) {
-    if (!$this->transactionLayers) {
+    if ($this->transactionManager()->stackDepth() === 0) {
       throw new \LogicException('Root transaction end callbacks can only be added when there is an active transaction.');
     }
     $this->rootTransactionEndCallbacks[] = $callback;
@@ -1481,22 +1460,7 @@ public function addRootTransactionEndCallback(callable $callback) {
    * @internal
    */
   protected function popCommittableTransactions() {
-    // Commit all the committable layers.
-    foreach (array_reverse($this->transactionLayers) as $name => $active) {
-      // Stop once we found an active transaction.
-      if ($active) {
-        break;
-      }
-
-      // If there are no more layers left then we should commit.
-      unset($this->transactionLayers[$name]);
-      if (empty($this->transactionLayers)) {
-        $this->doCommit();
-      }
-      else {
-        $this->query('RELEASE SAVEPOINT ' . $name);
-      }
-    }
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
   }
 
   /**
@@ -1505,18 +1469,7 @@ protected function popCommittableTransactions() {
    * @internal
    */
   protected function doCommit() {
-    $success = $this->connection->commit();
-    if (!empty($this->rootTransactionEndCallbacks)) {
-      $callbacks = $this->rootTransactionEndCallbacks;
-      $this->rootTransactionEndCallbacks = [];
-      foreach ($callbacks as $callback) {
-        call_user_func($callback, $success);
-      }
-    }
-
-    if (!$success) {
-      throw new TransactionCommitFailedException();
-    }
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
   }
 
   /**
@@ -1644,6 +1597,7 @@ abstract public function mapConditionOperator($operator);
    * @see \Drupal\Core\Database\Transaction
    */
   public function commit() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
     throw new TransactionExplicitCommitNotAllowedException();
   }
 
diff --git a/core/lib/Drupal/Core/Database/Exception/TransactionCommitFailedException.php b/core/lib/Drupal/Core/Database/Exception/TransactionCommitFailedException.php
new file mode 100644
index 0000000000..e82da8603b
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Exception/TransactionCommitFailedException.php
@@ -0,0 +1,8 @@
+<?php
+
+namespace Drupal\Core\Database\Exception;
+
+/**
+ * Exception thrown when a commit() function fails.
+ */
+class TransactionCommitFailedException extends TransactionException {}
diff --git a/core/lib/Drupal/Core/Database/Exception/TransactionException.php b/core/lib/Drupal/Core/Database/Exception/TransactionException.php
new file mode 100644
index 0000000000..c1f042bcf7
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Exception/TransactionException.php
@@ -0,0 +1,10 @@
+<?php
+
+namespace Drupal\Core\Database\Exception;
+
+use Drupal\Core\Database\DatabaseException;
+
+/**
+ * Exception thrown by an error in a database transaction.
+ */
+class TransactionException extends \RuntimeException implements DatabaseException {}
diff --git a/core/lib/Drupal/Core/Database/Exception/TransactionNameNonUniqueException.php b/core/lib/Drupal/Core/Database/Exception/TransactionNameNonUniqueException.php
new file mode 100644
index 0000000000..ff98bda2b4
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Exception/TransactionNameNonUniqueException.php
@@ -0,0 +1,8 @@
+<?php
+
+namespace Drupal\Core\Database\Exception;
+
+/**
+ * Exception thrown when a savepoint or transaction name occurs twice.
+ */
+class TransactionNameNonUniqueException extends TransactionException {}
diff --git a/core/lib/Drupal/Core/Database/Exception/TransactionNoActiveException.php b/core/lib/Drupal/Core/Database/Exception/TransactionNoActiveException.php
new file mode 100644
index 0000000000..813acbfc6c
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Exception/TransactionNoActiveException.php
@@ -0,0 +1,8 @@
+<?php
+
+namespace Drupal\Core\Database\Exception;
+
+/**
+ * Exception for when rollbacks are called with no active transaction.
+ */
+class TransactionNoActiveException extends TransactionException {}
diff --git a/core/lib/Drupal/Core/Database/Exception/TransactionOutOfOrderException.php b/core/lib/Drupal/Core/Database/Exception/TransactionOutOfOrderException.php
new file mode 100644
index 0000000000..eb7f6cbfc6
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Exception/TransactionOutOfOrderException.php
@@ -0,0 +1,8 @@
+<?php
+
+namespace Drupal\Core\Database\Exception;
+
+/**
+ * Exception thrown when a rollBack() resulted in other active transactions being rolled-back.
+ */
+class TransactionOutOfOrderException extends TransactionException {}
diff --git a/core/lib/Drupal/Core/Database/Transaction.php b/core/lib/Drupal/Core/Database/Transaction.php
index 76d5fc8f5f..187a010337 100644
--- a/core/lib/Drupal/Core/Database/Transaction.php
+++ b/core/lib/Drupal/Core/Database/Transaction.php
@@ -48,6 +48,7 @@ class Transaction {
   protected $name;
 
   public function __construct(Connection $connection, $name = NULL) {
+    @trigger_error(__CLASS__ . ' is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
     $this->connection = $connection;
     // If there is no transaction depth, then no transaction has started. Name
     // the transaction 'drupal_transaction'.
diff --git a/core/lib/Drupal/Core/Database/TransactionCommitFailedException.php b/core/lib/Drupal/Core/Database/TransactionCommitFailedException.php
index f1dbf95654..11ce62b5b0 100644
--- a/core/lib/Drupal/Core/Database/TransactionCommitFailedException.php
+++ b/core/lib/Drupal/Core/Database/TransactionCommitFailedException.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Core\Database;
 
+@trigger_error('Drupal\\Core\\Database\\TransactionCommitFailedException is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
+
 /**
  * Exception thrown when a commit() function fails.
  */
diff --git a/core/lib/Drupal/Core/Database/TransactionException.php b/core/lib/Drupal/Core/Database/TransactionException.php
index c0380da549..56b9f99099 100644
--- a/core/lib/Drupal/Core/Database/TransactionException.php
+++ b/core/lib/Drupal/Core/Database/TransactionException.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Core\Database;
 
+@trigger_error('Drupal\\Core\\Database\\TransactionException is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
+
 /**
  * Exception thrown by an error in a database transaction.
  */
diff --git a/core/lib/Drupal/Core/Database/TransactionExplicitCommitNotAllowedException.php b/core/lib/Drupal/Core/Database/TransactionExplicitCommitNotAllowedException.php
index 5d3434228a..b4d9426b9b 100644
--- a/core/lib/Drupal/Core/Database/TransactionExplicitCommitNotAllowedException.php
+++ b/core/lib/Drupal/Core/Database/TransactionExplicitCommitNotAllowedException.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Core\Database;
 
+@trigger_error('Drupal\\Core\\Database\\TransactionExplicitCommitNotAllowedException is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
+
 /**
  * Exception to deny attempts to explicitly manage transactions.
  *
diff --git a/core/lib/Drupal/Core/Database/TransactionManager.php b/core/lib/Drupal/Core/Database/TransactionManager.php
new file mode 100644
index 0000000000..02fdabc76d
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/TransactionManager.php
@@ -0,0 +1,209 @@
+<?php
+
+namespace Drupal\Core\Database;
+
+use Drupal\Core\Database\Exception\TransactionCommitFailedException;
+use Drupal\Core\Database\Exception\TransactionNameNonUniqueException;
+use Drupal\Core\Database\Exception\TransactionNoActiveException;
+use Drupal\Core\Database\Exception\TransactionOutOfOrderException;
+
+/**
+ * @todo
+ */
+class TransactionManager implements TransactionManagerInterface {
+
+  /**
+   * Tracks the number of "layers" of transactions currently active.
+   *
+   * On many databases transactions cannot nest.  Instead, we track
+   * nested calls to transactions and collapse them into a single
+   * transaction.
+   *
+   * @var array
+   */
+  private array $stack = [];
+
+  /**
+   * @param \Drupal\Core\Database\Connection $connection
+   *   The database connection.
+   */
+  public function __construct(
+    protected readonly Connection $connection,
+  ) {
+  }
+
+  /**
+   * Determines if there is an active transaction open.
+   *
+   * @return bool
+   *   TRUE if we're currently in a transaction, FALSE otherwise.
+   */
+  public function inTransaction(): bool {
+    return $this->stackDepth() > 0;
+  }
+
+  public function current() {
+    if (!$this->inTransaction()) {
+      return NULL;
+    }
+    return $this->stack[array_key_last($this->stack)];
+  }
+
+  /**
+   * Returns a new Transaction object on the database connection.
+   *
+   * @param \Drupal\Core\Database\Connection $connection
+   *   The database connection.
+   * @param string $name
+   *   (optional) The name of the savepoint.
+   *
+   * @return \Drupal\Core\Database\TransactionRoot|\Drupal\Core\Database\TransactionSavepoint
+   *   A Transaction object.
+   *
+   * @throws \Drupal\Core\Database\Exception\TransactionNameNonUniqueException
+   */
+  public function start(Connection $connection, string $name = '') {
+    // If there is no transaction depth, then no transaction has started. Name
+    // the transaction 'drupal_transaction'.
+    if ($this->stackDepth() === 0) {
+      $name = 'drupal_transaction';
+    }
+    // Within transactions, savepoints are used. Each savepoint requires a
+    // name. So if no name is present we need to create one.
+    elseif (!$name) {
+      $name = 'savepoint_' . $this->stackDepth();
+    }
+
+    if ($this->has($name)) {
+      throw new TransactionNameNonUniqueException($name . " is already in use.");
+    }
+
+    // Push the transaction on the stack, increasing the depth of transaction
+    // nesting.
+    $this->stack[$name] = (new TransactionRoot($connection, $name, $this->stackDepth()))->initialize();
+
+    return $this->stack[$name];
+  }
+
+  /**
+   * Returns the current depth of the transaction nesting.
+   *
+   * @return int
+   *   The current depth of the transaction nesting.
+   */
+  public function stackDepth(): int {
+    return count($this->stack);
+  }
+
+  /**
+   * Checks if a named transaction is active.
+   *
+   * @param string $name
+   *   The name of the transaction.
+   *
+   * @return bool
+   *   TRUE if the transaction is active, FALSE otherwise.
+   */
+  public function has(string $name): bool {
+    return isset($this->stack[$name]);
+  }
+
+  /**
+   * Marks a named transaction as committable.
+   *
+   * @param string $name
+   *   The name of the transaction.
+   */
+  public function markCommittable(string $name): void {
+    if ($this->has($name)) {
+      $this->stack[$name] = FALSE;
+    }
+  }
+
+  public function popCommittableTransactions() {
+    // Commit all the committable layers.
+    foreach (array_reverse($this->stack) as $name => $active) {
+      // Stop once we found an active transaction.
+      if ($active) {
+        break;
+      }
+
+      // If there are no more layers left then we should commit.
+      unset($this->stack[$name]);
+      if ($this->stackDepth() === 0) {
+        $this->doCommit();
+      }
+      else {
+        $this->connection->query('RELEASE SAVEPOINT ' . $name);
+      }
+    }
+  }
+
+  /**
+   * Do the actual commit, invoke post-commit callbacks.
+   *
+   * @internal
+   */
+  private function doCommit() {
+    $success = $this->connection->getClientConnection()->commit();
+    if (!empty($this->connection->rootTransactionEndCallbacks)) {
+      $callbacks = $this->connection->rootTransactionEndCallbacks;
+      $this->connection->rootTransactionEndCallbacks = [];
+      foreach ($callbacks as $callback) {
+        call_user_func($callback, $success);
+      }
+    }
+
+    if (!$success) {
+      throw new TransactionCommitFailedException();
+    }
+  }
+
+  public function rollBack($savepoint_name = 'drupal_transaction') {
+    if (!$this->inTransaction()) {
+      throw new TransactionNoActiveException();
+    }
+    // A previous rollback to an earlier savepoint may mean that the savepoint
+    // in question has already been accidentally committed.
+    if (!isset($this->stack[$savepoint_name])) {
+      throw new TransactionNoActiveException();
+    }
+
+    // We need to find the point we're rolling back to, all other savepoints
+    // before are no longer needed. If we rolled back other active savepoints,
+    // we need to throw an exception.
+    $rolled_back_other_active_savepoints = FALSE;
+    while ($savepoint = array_pop($this->stack)) {
+      if ($savepoint == $savepoint_name) {
+        // If it is the last the transaction in the stack, then it is not a
+        // savepoint, it is the transaction itself so we will need to roll back
+        // the transaction rather than a savepoint.
+        if ($this->stackDepth() === 0) {
+          break;
+        }
+        $this->connection->query('ROLLBACK TO SAVEPOINT ' . $savepoint);
+        $this->popCommittableTransactions();
+        if ($rolled_back_other_active_savepoints) {
+          throw new TransactionOutOfOrderException();
+        }
+        return;
+      }
+      else {
+        $rolled_back_other_active_savepoints = TRUE;
+      }
+    }
+
+    // Notify the callbacks about the rollback.
+    $callbacks = $this->connection->rootTransactionEndCallbacks;
+    $this->connection->rootTransactionEndCallbacks = [];
+    foreach ($callbacks as $callback) {
+      call_user_func($callback, FALSE);
+    }
+
+    $this->connection->getClientConnection()->rollBack();
+    if ($rolled_back_other_active_savepoints) {
+      throw new TransactionOutOfOrderException();
+    }
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/TransactionManagerInterface.php b/core/lib/Drupal/Core/Database/TransactionManagerInterface.php
new file mode 100644
index 0000000000..cb793d7abe
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/TransactionManagerInterface.php
@@ -0,0 +1,9 @@
+<?php
+
+namespace Drupal\Core\Database;
+
+/**
+ * @todo
+ */
+interface TransactionManagerInterface {
+}
diff --git a/core/lib/Drupal/Core/Database/TransactionNameNonUniqueException.php b/core/lib/Drupal/Core/Database/TransactionNameNonUniqueException.php
index 8265620b25..e74039500a 100644
--- a/core/lib/Drupal/Core/Database/TransactionNameNonUniqueException.php
+++ b/core/lib/Drupal/Core/Database/TransactionNameNonUniqueException.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Core\Database;
 
+@trigger_error('Drupal\\Core\\Database\\TransactionNameNonUniqueException is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
+
 /**
  * Exception thrown when a savepoint or transaction name occurs twice.
  */
diff --git a/core/lib/Drupal/Core/Database/TransactionNoActiveException.php b/core/lib/Drupal/Core/Database/TransactionNoActiveException.php
index b868a3d155..f1638b4881 100644
--- a/core/lib/Drupal/Core/Database/TransactionNoActiveException.php
+++ b/core/lib/Drupal/Core/Database/TransactionNoActiveException.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Core\Database;
 
+@trigger_error('Drupal\\Core\\Database\\TransactionNoActiveException is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
+
 /**
  * Exception for when popTransaction() is called with no active transaction.
  */
diff --git a/core/lib/Drupal/Core/Database/TransactionOutOfOrderException.php b/core/lib/Drupal/Core/Database/TransactionOutOfOrderException.php
index d7b07df3ea..689c964ceb 100644
--- a/core/lib/Drupal/Core/Database/TransactionOutOfOrderException.php
+++ b/core/lib/Drupal/Core/Database/TransactionOutOfOrderException.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Core\Database;
 
+@trigger_error('Drupal\\Core\\Database\\TransactionOutOfOrderException is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
+
 /**
  * Exception thrown when a rollBack() resulted in other active transactions being rolled-back.
  */
diff --git a/core/lib/Drupal/Core/Database/TransactionRoot.php b/core/lib/Drupal/Core/Database/TransactionRoot.php
new file mode 100644
index 0000000000..07d0a9f378
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/TransactionRoot.php
@@ -0,0 +1,95 @@
+<?php
+
+namespace Drupal\Core\Database;
+
+// dump(\Drupal\Core\Utility\Error::formatBacktrace(debug_backtrace()));
+
+/**
+ * A wrapper class for creating and managing database transactions.
+ *
+ * Not all databases or database configurations support transactions. For
+ * example, MySQL MyISAM tables do not. It is also easy to begin a transaction
+ * and then forget to commit it, which can lead to connection errors when
+ * another transaction is started.
+ *
+ * This class acts as a wrapper for transactions. To begin a transaction,
+ * simply instantiate it. When the object goes out of scope and is destroyed
+ * it will automatically commit. It also will check to see if the specified
+ * connection supports transactions. If not, it will simply skip any transaction
+ * commands, allowing user-space code to proceed normally. The only difference
+ * is that rollbacks won't actually do anything.
+ *
+ * In the vast majority of cases, you should not instantiate this class
+ * directly. Instead, call ->startTransaction(), from the appropriate connection
+ * object.
+ */
+class TransactionRoot extends Transaction {
+
+  public function __construct(
+    Connection $connection,
+    $name = NULL,
+    protected readonly int $depth = 0,
+  ) {
+    $this->connection = $connection;
+    $this->name = $name;
+  }
+
+  public function __destruct() {
+// global $yyy; if ($yyy) dump([__METHOD__, $this->name, $this->depth]);
+    // If we rolled back then the transaction would have already been popped.
+    if (!$this->rolledBack) {
+      // The transaction has already been committed earlier. There is nothing we
+      // need to do. If this transaction was part of an earlier out-of-order
+      // rollback, an exception would already have been thrown by
+      // Database::rollBack().
+      if (!$this->connection->transactionManager()->has($this->name)) {
+        return;
+      }
+
+      // Mark this layer as committable.
+      $this->connection->transactionManager()->markCommittable($this->name);
+      $this->connection->transactionManager()->popCommittableTransactions();
+    }
+  }
+
+  public function initialize(): static {
+// global $yyy; if ($yyy) dump([__METHOD__, $this->name, $this->depth]);
+    // If we're already in a Drupal transaction then we want to create a
+    // database savepoint, rather than try to begin another database
+    // transaction.
+    if ($this->depth !== 0) {
+      $this->connection->query('SAVEPOINT ' . $this->name);
+    }
+    else {
+      $this->beginTransaction();
+    }
+
+    return $this;
+  }
+
+  /**
+   * Begins a transaction on the client connection.
+   *
+   * @return bool
+   *   Returns TRUE on success or FALSE on failure.
+   */
+  protected function beginTransaction(): bool {
+    return $this->connection->getClientConnection()->beginTransaction();
+  }
+
+  /**
+   * Rolls back the current transaction.
+   *
+   * This is just a wrapper method to rollback whatever transaction stack we are
+   * currently in, which is managed by the connection object itself. Note that
+   * logging needs to happen after a transaction has been rolled back or the log
+   * messages will be rolled back too.
+   *
+   * @see \Drupal\Core\Database\Connection::rollBack()
+   */
+  public function rollBack() {
+    $this->rolledBack = TRUE;
+    $this->connection->transactionManager()->rollBack($this->name);
+  }
+
+}
diff --git a/core/tests/Drupal/KernelTests/Core/Database/DeleteTruncateTest.php b/core/tests/Drupal/KernelTests/Core/Database/DeleteTruncateTest.php
index 689d40ac9a..b52a3801c2 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/DeleteTruncateTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/DeleteTruncateTest.php
@@ -130,7 +130,7 @@ public function testTruncateTransactionRollback() {
 
     // Roll back the transaction, and check that we are back to status before
     // insert and truncate.
-    $this->connection->rollBack();
+    $this->connection->transactionManager()->current()->rollBack();
     $this->assertFalse($this->connection->inTransaction());
     $num_records_after = $this->connection->select('test')->countQuery()->execute()->fetchField();
     $this->assertEquals($num_records_before, $num_records_after);
diff --git a/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificTransactionTestBase.php b/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificTransactionTestBase.php
index ebbf60826a..fd7ccd8edc 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificTransactionTestBase.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificTransactionTestBase.php
@@ -57,7 +57,7 @@ class DriverSpecificTransactionTestBase extends DriverSpecificDatabaseTestBase {
    *   Whether to execute a DDL statement during the inner transaction.
    */
   protected function transactionOuterLayer($suffix, $rollback = FALSE, $ddl_statement = FALSE) {
-    $depth = $this->connection->transactionDepth();
+    $depth = $this->connection->transactionManager()->stackDepth();
     $txn = $this->connection->startTransaction();
 
     // Insert a single row into the testing table.
@@ -80,7 +80,7 @@ protected function transactionOuterLayer($suffix, $rollback = FALSE, $ddl_statem
       // Roll back the transaction, if requested.
       // This rollback should propagate to the last savepoint.
       $txn->rollBack();
-      $this->assertSame($depth, $this->connection->transactionDepth(), 'Transaction has rolled back to the last savepoint after calling rollBack().');
+      $this->assertSame($depth, $this->connection->transactionManager()->stackDepth(), 'Transaction has rolled back to the last savepoint after calling rollBack().');
     }
   }
 
@@ -98,14 +98,14 @@ protected function transactionOuterLayer($suffix, $rollback = FALSE, $ddl_statem
    *   Whether to execute a DDL statement during the transaction.
    */
   protected function transactionInnerLayer($suffix, $rollback = FALSE, $ddl_statement = FALSE) {
-    $depth = $this->connection->transactionDepth();
+    $depth = $this->connection->transactionManager()->stackDepth();
     // Start a transaction. If we're being called from ->transactionOuterLayer,
     // then we're already in a transaction. Normally, that would make starting
     // a transaction here dangerous, but the database API handles this problem
     // for us by tracking the nesting and avoiding the danger.
     $txn = $this->connection->startTransaction();
 
-    $depth2 = $this->connection->transactionDepth();
+    $depth2 = $this->connection->transactionManager()->stackDepth();
     $this->assertGreaterThan($depth, $depth2, 'Transaction depth has increased with new transaction.');
 
     // Insert a single row into the testing table.
@@ -138,7 +138,7 @@ protected function transactionInnerLayer($suffix, $rollback = FALSE, $ddl_statem
       // Roll back the transaction, if requested.
       // This rollback should propagate to the last savepoint.
       $txn->rollBack();
-      $this->assertSame($depth, $this->connection->transactionDepth(), 'Transaction has rolled back to the last savepoint after calling rollBack().');
+      $this->assertSame($depth, $this->connection->transactionManager()->stackDepth(), 'Transaction has rolled back to the last savepoint after calling rollBack().');
     }
   }
 
