diff --git a/core/assets/scaffold/files/default.settings.php b/core/assets/scaffold/files/default.settings.php
index ee3b49c0a8..02f3e5e7a8 100644
--- a/core/assets/scaffold/files/default.settings.php
+++ b/core/assets/scaffold/files/default.settings.php
@@ -222,6 +222,27 @@
  *     'prefix' => '',
  *   ];
  * @endcode
+ *
+ * Sample Database configuration format for a driver that is extending another
+ * database driver.
+ * @code
+ *   $databases['default']['default'] = [
+ *     'driver' => 'my_driver',
+ *     'namespace' => 'Drupal\my_module\Driver\Database\my_driver',
+ *     'autoload' => 'modules/my_module/src/Driver/Database/my_driver/',
+ *     'database' => 'databasename',
+ *     'username' => 'sqlusername',
+ *     'password' => 'sqlpassword',
+ *     'host' => 'localhost',
+ *     'prefix' => '',
+ *     'dependencies' => [
+ *       'parent_module' => [
+ *         'namespace' => 'Drupal\parent_module',
+ *         'autoload' => 'core/modules/parent_module/src/',
+ *       ],
+ *     ],
+ *   ];
+ * @endcode
  */
 
 /**
diff --git a/core/core.services.yml b/core/core.services.yml
index 6b972c88d4..2625c4f022 100644
--- a/core/core.services.yml
+++ b/core/core.services.yml
@@ -550,6 +550,9 @@ services:
   extension.list.theme_engine:
     class: Drupal\Core\Extension\ThemeEngineExtensionList
     arguments: ['%app.root%', 'theme_engine', '@cache.default', '@info_parser', '@module_handler', '@state', '%install_profile%']
+  extension.list.database_driver:
+    class: Drupal\Core\Extension\DatabaseDriverList
+    arguments: ['%app.root%', 'database_driver', '@cache.default', '@info_parser', '@module_handler', '@state', '@config.factory', '@extension.list.profile', '%install_profile%']
   extension.path.resolver:
     class: Drupal\Core\Extension\ExtensionPathResolver
     arguments: ['@extension.list.module', '@extension.list.profile', '@extension.list.theme', '@extension.list.theme_engine']
diff --git a/core/includes/install.inc b/core/includes/install.inc
index 63b5ee5589..2f0bd5aae1 100644
--- a/core/includes/install.inc
+++ b/core/includes/install.inc
@@ -165,61 +165,26 @@ function drupal_detect_database_types() {
  *   An array of available database driver installer objects.
  */
 function drupal_get_database_types() {
-  $databases = [];
-  $drivers = [];
-
-  // The internal database driver name is any valid PHP identifier.
-  $mask = ExtensionDiscovery::PHP_FUNCTION_PATTERN;
-
-  // Find drivers in the Drupal\Driver namespace.
-  // @todo remove discovering in the Drupal\Driver namespace in D10.
-  /** @var \Drupal\Core\File\FileSystemInterface $file_system */
-  $file_system = \Drupal::service('file_system');
-  $files = [];
-  if (is_dir(DRUPAL_ROOT . '/drivers/lib/Drupal/Driver/Database')) {
-    $files = $file_system->scanDirectory(DRUPAL_ROOT . '/drivers/lib/Drupal/Driver/Database/', $mask, ['recurse' => FALSE]);
-  }
-  foreach ($files as $file) {
-    if (file_exists($file->uri . '/Install/Tasks.php')) {
-      // The namespace doesn't need to be added here, because
-      // db_installer_object() will find it.
-      $drivers[$file->filename] = NULL;
-    }
-  }
-
-  // Find drivers in Drupal module namespaces.
   /** @var \Composer\Autoload\ClassLoader $class_loader */
   $class_loader = \Drupal::service('class_loader');
-  // We cannot use the file cache because it does not always exist.
-  $extension_discovery = new ExtensionDiscovery(DRUPAL_ROOT, FALSE, []);
-  $modules = $extension_discovery->scan('module');
-  foreach ($modules as $module) {
-    $module_driver_path = DRUPAL_ROOT . '/' . $module->getPath() . '/src/Driver/Database';
-    if (is_dir($module_driver_path)) {
-      $driver_files = $file_system->scanDirectory($module_driver_path, $mask, ['recurse' => FALSE]);
-      foreach ($driver_files as $driver_file) {
-        $tasks_file = $module_driver_path . '/' . $driver_file->filename . '/Install/Tasks.php';
-        if (file_exists($tasks_file)) {
-          $namespace = 'Drupal\\' . $module->getName() . '\\Driver\\Database\\' . $driver_file->filename;
-
-          // Add the driver with its own classes' namespace.
-          $drivers[$driver_file->filename] = $namespace;
-
-          // The directory needs to be added to the autoloader, because this is
-          // early in the installation process: the module hasn't been enabled
-          // yet and the database connection info array (including its 'autoload'
-          // key) hasn't been created yet.
-          $class_loader->addPsr4($namespace . '\\', $module->getPath() . '/src/Driver/Database/' . $driver_file->filename);
-        }
-      }
-    }
-  }
 
-  foreach ($drivers as $driver => $namespace) {
-    $installer_class = $namespace . "\\Install\\Tasks";
-    $installer = new $installer_class();
-    if ($installer->installable()) {
-      $databases[$driver] = $installer;
+  // Find installable database drivers in modules.
+  $databases = [];
+  foreach (\Drupal::service('extension.list.database_driver')->getList() as $module_drivers) {
+    foreach ($module_drivers as $driver => $autoloading) {
+      // The directory needs to be added to the autoloader, because this is
+      // early in the installation process: the module hasn't been enabled
+      // yet and the database connection info array (including its 'autoload'
+      // key) hasn't been created yet.
+      $class_loader->addPsr4($autoloading['namespace'] . '\\', $autoloading['autoload']);
+      foreach ($autoloading['dependencies'] ?? [] as $dependency) {
+        $class_loader->addPsr4($dependency['namespace'] . '\\', $dependency['autoload']);
+      }
+      $installer_class = $autoloading['namespace'] . "\\Install\\Tasks";
+      $installer = new $installer_class();
+      if ($installer->installable()) {
+        $databases[$driver] = $installer;
+      }
     }
   }
 
diff --git a/core/lib/Drupal/Core/Database/Database.php b/core/lib/Drupal/Core/Database/Database.php
index 9b5364942b..3fdb454073 100644
--- a/core/lib/Drupal/Core/Database/Database.php
+++ b/core/lib/Drupal/Core/Database/Database.php
@@ -320,6 +320,18 @@ abstract class Database {
       // for the driver.
       if (isset($info['autoload']) && $class_loader && $app_root) {
         $class_loader->addPsr4($info['namespace'] . '\\', $app_root . '/' . $info['autoload']);
+
+        // When the database driver is extending from other database drivers,
+        // then add autoload directory for the parent database driver modules
+        // as well.
+        if (!empty($info['dependencies'])) {
+          assert(is_array($info['dependencies']));
+          foreach ($info['dependencies'] as $dependency) {
+            if (isset($dependency['namespace']) && isset($dependency['autoload'])) {
+              $class_loader->addPsr4($dependency['namespace'] . '\\', $app_root . '/' . $dependency['autoload']);
+            }
+          }
+        }
       }
     }
   }
@@ -529,7 +541,6 @@ public static function convertDbUrlToConnectionInfo($url, $root, ?bool $include_
     // Determine if the database driver is provided by a module.
     // @todo https://www.drupal.org/project/drupal/issues/3250999. Refactor when
     // all database drivers are provided by modules.
-    $module = NULL;
     $connection_class = NULL;
     $url_components = parse_url($url);
     $url_component_query = $url_components['query'] ?? '';
@@ -542,19 +553,27 @@ public static function convertDbUrlToConnectionInfo($url, $root, ?bool $include_
     }
 
     if (isset($query['module']) && $query['module']) {
-      $module = $query['module'];
+      $autoloadInfo = Database::getDriverAutoloadInfo($root, $query['module'], $driver, $include_test_drivers);
+
       // Set up an additional autoloader. We don't use the main autoloader as
       // this method can be called before Drupal is installed and is never
       // called during regular runtime.
-      $namespace = "Drupal\\$module\\Driver\\Database\\$driver";
-      $psr4_base_directory = Database::findDriverAutoloadDirectory($namespace, $root, $include_test_drivers);
       $additional_class_loader = new ClassLoader();
-      $additional_class_loader->addPsr4($namespace . '\\', $psr4_base_directory);
+      $additional_class_loader->addPsr4($autoloadInfo['namespace'] . '\\', $autoloadInfo['autoload']);
+      $connection_class = $autoloadInfo['namespace'] . '\\Connection';
+
+      // When the database driver is extending another database driver, then
+      // add autoload the parent database driver as well.
+      if (isset($autoloadInfo['dependencies'])) {
+        foreach ($autoloadInfo['dependencies'] as $dependency) {
+          $additional_class_loader->addPsr4($dependency['namespace'] . '\\', $dependency['autoload']);
+        }
+      }
+
       $additional_class_loader->register(TRUE);
-      $connection_class = $namespace . '\\Connection';
     }
 
-    if (!$module) {
+    if (!isset($query['module'])) {
       // Determine the connection class to use. Discover if the URL has a valid
       // driver scheme for a Drupal 8 style custom driver.
       // @todo Remove this in Drupal 10.
@@ -570,13 +589,54 @@ public static function convertDbUrlToConnectionInfo($url, $root, ?bool $include_
     // If the driver is provided by a module add the necessary information to
     // autoload the code.
     // @see \Drupal\Core\Site\Settings::initialize()
-    if (isset($psr4_base_directory)) {
-      $options['autoload'] = $psr4_base_directory;
+    if (isset($autoloadInfo)) {
+      $options['autoload'] = $autoloadInfo['autoload'];
+      if (isset($autoloadInfo['dependencies'])) {
+        $options['dependencies'] = $autoloadInfo['dependencies'];
+      }
     }
 
     return $options;
   }
 
+  /**
+   * Returns information to allow PHP classes autoloading of a database driver.
+   *
+   * @param string $root
+   *   The root directory of the Drupal installation.
+   * @param string $module
+   *   The database driver's module name.
+   * @param string $driver
+   *   The driver name.
+   * @param bool|null $includeTestDrivers
+   *   (optional) Whether to include test extensions. If FALSE, all 'tests'
+   *   directories are excluded in the search. When NULL will be determined by
+   *   the extension_discovery_scan_tests setting.
+   *
+   * @return array
+   *   An array with a 'namespace' and a 'autoload' definition for the driver.
+   *   When the driver's module has dependencies, a 'dependencies' key that
+   *   itself is an array of autoload/namespace pairs is also present.
+   *
+   * @throws \RuntimeException
+   *   Exception thrown when a module or a driver do not exist.
+   * @throws \Drupal\Core\Extension\InfoParserException
+   *   Thrown when a module.info.yml fails parsing.
+   */
+  public static function getDriverAutoloadInfo(string $root, string $module, string $driver, ?bool $includeTestDrivers = NULL): array {
+    $data = \Drupal::service('extension.list.database_driver')->getList($includeTestDrivers);
+
+    if (!isset($data[$module])) {
+      throw new \RuntimeException(sprintf("Cannot find the module '%s' for the database driver '%s'", $module, $driver));
+    }
+
+    if (!isset($data[$module][$driver])) {
+      throw new \RuntimeException(sprintf("Cannot find the database driver '%s' in the module '%s'", $driver, $module));
+    }
+
+    return $data[$module][$driver];
+  }
+
   /**
    * Finds the directory to add to the autoloader for the driver's namespace.
    *
@@ -631,8 +691,14 @@ public static function convertDbUrlToConnectionInfo($url, $root, ?bool $include_
    *
    * @throws \RuntimeException
    *   Exception thrown when a module provided database driver does not exist.
+   *
+   * @deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use
+   *   Database::getDriverAutoloadInfo() instead.
+   *
+   * @see https://www.drupal.org/node/3258175
    */
   public static function findDriverAutoloadDirectory($namespace, $root, ?bool $include_test_drivers = NULL) {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use Database::getDriverAutoloadInfo() instead. See https://www.drupal.org/node/3258175', E_USER_DEPRECATED);
     // As explained by this method's documentation, return FALSE if the
     // namespace is not a sub-namespace of a Drupal module.
     if (!static::isWithinModuleNamespace($namespace)) {
@@ -703,9 +769,9 @@ public static function getConnectionInfoAsUrl($key = 'default') {
    *   TRUE if the passed in namespace is a sub-namespace of a Drupal module's
    *   namespace.
    *
-   * @todo https://www.drupal.org/project/drupal/issues/3125476 Remove if we
-   *   add this to the extension API or if
-   *   \Drupal\Core\Database\Database::getConnectionInfoAsUrl() is removed.
+   * @todo remove in Drupal 11.
+   *
+   * @see https://www.drupal.org/node/3256524
    */
   private static function isWithinModuleNamespace(string $namespace) {
     [$first, $second] = explode('\\', $namespace, 3);
diff --git a/core/lib/Drupal/Core/Extension/DatabaseDriverList.php b/core/lib/Drupal/Core/Extension/DatabaseDriverList.php
new file mode 100644
index 0000000000..1d405687b5
--- /dev/null
+++ b/core/lib/Drupal/Core/Extension/DatabaseDriverList.php
@@ -0,0 +1,145 @@
+<?php
+
+namespace Drupal\Core\Extension;
+
+/**
+ * Provides a list of available database drivers.
+ *
+ * @internal
+ *   This class is not yet stable and therefore there are no guarantees that the
+ *   internal implementations including constructor signature and protected
+ *   properties / methods will not change over time. This will be reviewed after
+ *   https://www.drupal.org/project/drupal/issues/2940481
+ */
+class DatabaseDriverList extends ExtensionList {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getExtensionDiscovery() {
+    return new ExtensionDiscovery($this->root, FALSE);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function doScanExtensions(?bool $includeTestDrivers) {
+    return $this->getExtensionDiscovery()->scan('module', $includeTestDrivers);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getInstalledExtensionNames() {
+    return [$this->installProfile];
+  }
+
+  /**
+   * Returns autoloader information for all database drivers.
+   *
+   * For Drupal sites that manage their codebase with Composer, the package
+   * that provides the database driver should add the driver's namespace to
+   * Composer's autoloader. However, to support sites that add Drupal modules
+   * without Composer, and because the database connection must be established
+   * before Drupal adds the module's entire namespace to the autoloader, the
+   * database connection info array can include an "autoload" key containing
+   * the autoload directory for the driver's namespace. For requests that
+   * connect to the database via a connection info array, the value of the
+   * "autoload" key is automatically added to the autoloader.
+   *
+   * This method can be called to find the default value of that key when the
+   * database connection info array isn't available. This includes:
+   * - Console commands and test runners that connect to a database specified
+   *   by a database URL rather than a connection info array.
+   * - During installation, prior to the connection info array being written to
+   *   settings.php.
+   *
+   * This method returns an array with the driver's namespace and autoload
+   * directory that must be added to the autoloader, as well as those of any
+   * dependency specified in the driver's module.info.yml file.
+   *
+   * @param bool|null $includeTestDrivers
+   *   (optional) Whether to include test extensions. If FALSE, all 'tests'
+   *   directories are excluded in the search. When NULL will be determined by
+   *   the extension_discovery_scan_tests setting.
+   *
+   * @return array
+   *   An associative array in the format
+   *   @code
+   *     ['module_a' => [
+   *        'driver_1' => [
+   *          'autoload' => 'path_to_modules/module_a/src/Driver/Database/driver_1/',
+   *          'namespace' => 'Drupal\\module_a\\Driver\\Database\\driver_1',
+   *          'dependencies' => [
+   *            'module_x' => [
+   *              'autoload' => 'path_to_modules/module_x/src/',
+   *              'namespace' => 'Drupal\\module_x',
+   *            ],
+   *          ],
+   *        ],
+   *        'driver_2' => [ ... ],
+   *      'module_b' => [ ... ],
+   *     ]
+   *   @endcode
+   *
+   * @throws \RuntimeException
+   *   Exception thrown when a module provided database driver does not exist.
+   * @throws \Drupal\Core\Extension\InfoParserException
+   *   Thrown when a module.info.yml fails parsing.
+   */
+  public function doList(?bool $includeTestDrivers = NULL): array {
+    $modules = $this->doScanExtensions($includeTestDrivers);
+
+    // Determine the modules that contain at least one installable database
+    // driver.
+    $extensions = [];
+    foreach ($modules as $module) {
+      $moduleDriverDirectory = $this->root . DIRECTORY_SEPARATOR . $module->getPath() . DIRECTORY_SEPARATOR . 'src'  . DIRECTORY_SEPARATOR . 'Driver'  . DIRECTORY_SEPARATOR . 'Database';
+      if (is_dir($moduleDriverDirectory)) {
+        // Use directory iterator to avoid services.
+        $directoryIterator = new \DirectoryIterator($moduleDriverDirectory);
+        foreach ($directoryIterator as $fileInfo) {
+          if ($fileInfo->isDir() && !$fileInfo->isDot() && file_exists($moduleDriverDirectory . DIRECTORY_SEPARATOR . $fileInfo->getFilename() . DIRECTORY_SEPARATOR . 'Install'  . DIRECTORY_SEPARATOR . 'Tasks.php')) {
+            $modules[$module->getName()][] = $fileInfo->getFilename();
+          }
+        }
+      }
+    }
+
+    // Determine the autoloading information for the drivers and their
+    // dependencies.
+/*    $autoloadInfo = [];
+    foreach ($extensions as $module => $drivers) {
+      // When the module has dependencies, collect them.
+      $moduleInfo = (new InfoParser($this->root))->parse($this->root . DIRECTORY_SEPARATOR . $modules[$module]->getPathname());
+      $moduleDependencies = [];
+      if (isset($moduleInfo['dependencies']) && is_array($moduleInfo['dependencies'])) {
+        foreach ($moduleInfo['dependencies'] as $dependency) {
+          $dependencyData = Dependency::createFromString($dependency);
+          $dependencyNamespace = "Drupal\\{$dependencyData->getName()}";
+          if (!isset($modules[$dependencyData->getName()])) {
+            throw new \RuntimeException(sprintf("Cannot find the module '%s' that is required by module '%s'", $dependencyData->getName(), $module));
+          }
+          $dependencyAutoload = $modules[$dependencyData->getName()]->getPath() . '/src/';
+          $moduleDependencies[$dependencyData->getName()] = [
+            'namespace' => $dependencyNamespace,
+            'autoload' => $dependencyAutoload,
+          ];
+        }
+      }
+
+      // Determine namespace and path of the driver, associating dependencies
+      // where relevant.
+      foreach ($drivers as $driver) {
+        $autoloadInfo[$module][$driver]['autoload'] = $modules[$module]->getPath() . DIRECTORY_SEPARATOR . 'src/Driver/Database' . DIRECTORY_SEPARATOR . $driver . DIRECTORY_SEPARATOR;
+        $autoloadInfo[$module][$driver]['namespace'] = "Drupal\\$module\\Driver\\Database\\$driver";
+        if ($moduleDependencies !== []) {
+          $autoloadInfo[$module][$driver]['dependencies'] = $moduleDependencies;
+        }
+      }
+    }
+*/
+    return $extensions;
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Extension/ExtensionList.php b/core/lib/Drupal/Core/Extension/ExtensionList.php
index 0ac671965b..1c052fd713 100644
--- a/core/lib/Drupal/Core/Extension/ExtensionList.php
+++ b/core/lib/Drupal/Core/Extension/ExtensionList.php
@@ -21,7 +21,9 @@
 abstract class ExtensionList {
 
   /**
-   * The type of the extension: "module", "theme" or "profile".
+   * The type of the extension.
+   *
+   * Possible values: "module", "theme", "profile" or "database_driver".
    *
    * @var string
    */
diff --git a/core/lib/Drupal/Core/Installer/Form/SiteSettingsForm.php b/core/lib/Drupal/Core/Installer/Form/SiteSettingsForm.php
index dc26547122..af730c1161 100644
--- a/core/lib/Drupal/Core/Installer/Form/SiteSettingsForm.php
+++ b/core/lib/Drupal/Core/Installer/Form/SiteSettingsForm.php
@@ -159,13 +159,11 @@ public function validateForm(array &$form, FormStateInterface $form_state) {
     $drivers = drupal_get_database_types();
     $reflection = new \ReflectionClass($drivers[$driver]);
     $install_namespace = $reflection->getNamespaceName();
-    // Cut the trailing \Install from namespace.
-    $database['namespace'] = substr($install_namespace, 0, strrpos($install_namespace, '\\'));
+    [, $module] = explode('\\', $install_namespace);
+
     $database['driver'] = $driver;
-    // See default.settings.php for an explanation of the 'autoload' key.
-    if ($autoload = Database::findDriverAutoloadDirectory($database['namespace'], DRUPAL_ROOT)) {
-      $database['autoload'] = $autoload;
-    }
+    $autoloading = Database::getDriverAutoloadInfo(DRUPAL_ROOT, $module, $driver);
+    $database = array_merge($database, $autoloading);
 
     $form_state->set('database', $database);
     foreach ($this->getDatabaseErrors($database, $form_state->getValue('settings_file')) as $name => $message) {
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Connection.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Connection.php
index a87a0d3869..9de6eda72c 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Connection.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Connection.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Connection.php';
-
 use Drupal\mysql\Driver\Database\mysql\Connection as CoreConnection;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Insert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Insert.php
index 8c15b608fe..5c253174bc 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Insert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Insert.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Insert.php';
-
 use Drupal\mysql\Driver\Database\mysql\Insert as CoreInsert;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Install/Tasks.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Install/Tasks.php
index 2b20ba147f..4a6f247bb9 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Install/Tasks.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Install/Tasks.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysql\Install;
 
-include_once dirname(__DIR__, 9) . '/mysql/src/Driver/Database/mysql/Install/Tasks.php';
-
 use Drupal\mysql\Driver\Database\mysql\Install\Tasks as CoreTasks;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Schema.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Schema.php
index b3a2dc01fe..bc1bf9eec2 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Schema.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Schema.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Schema.php';
-
 use Drupal\mysql\Driver\Database\mysql\Schema as CoreSchema;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Upsert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Upsert.php
index dd2d71af8c..d2bd76e6ea 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Upsert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Upsert.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Upsert.php';
-
 use Drupal\mysql\Driver\Database\mysql\Upsert as CoreUpsert;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Connection.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Connection.php
index 6ef463cb15..447c3acd48 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Connection.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Connection.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Connection.php';
-
 use Drupal\mysql\Driver\Database\mysql\Connection as CoreConnection;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Insert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Insert.php
index f1a54e3cac..f29049d5af 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Insert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Insert.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Insert.php';
-
 use Drupal\mysql\Driver\Database\mysql\Insert as CoreInsert;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Install/Tasks.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Install/Tasks.php
index 647268c7b8..42a7c52d7e 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Install/Tasks.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Install/Tasks.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion\Install;
 
-include_once dirname(__DIR__, 9) . '/mysql/src/Driver/Database/mysql/Install/Tasks.php';
-
 use Drupal\mysql\Driver\Database\mysql\Install\Tasks as CoreTasks;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Schema.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Schema.php
index 4e73921584..0b608b4baf 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Schema.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Schema.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Schema.php';
-
 use Drupal\mysql\Driver\Database\mysql\Schema as CoreSchema;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Upsert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Upsert.php
index 2513c7357b..58a792b644 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Upsert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Upsert.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Upsert.php';
-
 use Drupal\mysql\Driver\Database\mysql\Upsert as CoreUpsert;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Connection.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Connection.php
index e45d48ade9..f9f15f091d 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Connection.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Connection.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Connection.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Connection as CoreConnection;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Delete.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Delete.php
index 92081533cb..29840d0dfa 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Delete.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Delete.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Delete.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Delete as CoreDelete;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Insert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Insert.php
index 957373ffc3..a35e74d445 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Insert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Insert.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Insert.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Insert as CoreInsert;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Install/Tasks.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Install/Tasks.php
index a8c096438f..51fcd27967 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Install/Tasks.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Install/Tasks.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql\Install;
 
-include_once dirname(__DIR__, 9) . '/pgsql/src/Driver/Database/pgsql/Install/Tasks.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Install\Tasks as CoreTasks;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Schema.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Schema.php
index df0c45c222..522311cdc2 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Schema.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Schema.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Schema.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Schema as CoreSchema;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Select.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Select.php
index b11fbefe11..12fe909b2e 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Select.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Select.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Select.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Select as CoreSelect;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Truncate.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Truncate.php
index 61b58711ff..416c082563 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Truncate.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Truncate.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Truncate.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Truncate as CoreTruncate;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Update.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Update.php
index e30ace4bc8..48d3f0380e 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Update.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Update.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Update.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Update as CoreUpdate;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Upsert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Upsert.php
index b36b039bf9..93e51d1ae0 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Upsert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Upsert.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Upsert.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Upsert as CoreUpsert;
 
 /**
diff --git a/core/modules/system/tests/src/Functional/System/DatabaseDriverProvidedByModuleTest.php b/core/modules/system/tests/src/Functional/System/DatabaseDriverProvidedByModuleTest.php
index e81ced70d3..450651c171 100644
--- a/core/modules/system/tests/src/Functional/System/DatabaseDriverProvidedByModuleTest.php
+++ b/core/modules/system/tests/src/Functional/System/DatabaseDriverProvidedByModuleTest.php
@@ -50,6 +50,12 @@ public function testDatabaseDriverIsProvidedByModuleButTheModuleIsNotEnabled():
       'driver' => 'Drivertest' . ucfirst($driver),
       'namespace' => 'Drupal\\driver_test\\Driver\\Database\\Drivertest' . ucfirst($driver),
       'autoload' => 'core/modules/system/tests/modules/driver_test/src/Driver/Database/Drivertest' . ucfirst($driver),
+      'dependencies' => [
+        $driver => [
+          'namespace' => "Drupal\\{$driver}",
+          'autoload' => "core/modules/$driver/src/",
+        ],
+      ],
     ];
     if (isset($connection_info['default']['port'])) {
       $database['port'] = $connection_info['default']['port'];
diff --git a/core/modules/system/tests/src/Functional/Update/DatabaseVersionCheckUpdateTest.php b/core/modules/system/tests/src/Functional/Update/DatabaseVersionCheckUpdateTest.php
index 2202dc000b..a2d47bc6b6 100644
--- a/core/modules/system/tests/src/Functional/Update/DatabaseVersionCheckUpdateTest.php
+++ b/core/modules/system/tests/src/Functional/Update/DatabaseVersionCheckUpdateTest.php
@@ -39,7 +39,7 @@ public function testUpdate() {
     // Use a database driver that reports a fake database version that does
     // not meet requirements. Only change the necessary settings in the database
     // settings array so that run-tests.sh continues to work.
-    $autoload = Database::findDriverAutoloadDirectory('Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion', \Drupal::root());
+    $autoloading = Database::getDriverAutoloadInfo(\Drupal::root(), 'driver_test', 'DrivertestMysqlDeprecatedVersion');
     $settings['databases']['default']['default']['driver'] = (object) [
       'value' => 'DrivertestMysqlDeprecatedVersion',
       'required' => TRUE,
@@ -49,7 +49,11 @@ public function testUpdate() {
       'required' => TRUE,
     ];
     $settings['databases']['default']['default']['autoload'] = (object) [
-      'value' => $autoload,
+      'value' => $autoloading['autoload'],
+      'required' => TRUE,
+    ];
+    $settings['databases']['default']['default']['dependencies'] = (object) [
+      'value' => $autoloading['dependencies'],
       'required' => TRUE,
     ];
     $settings['settings'] = [
diff --git a/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingBrokenDatabaseSettingsTest.php b/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingBrokenDatabaseSettingsTest.php
index 3a42b319c1..50a5ece5a9 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingBrokenDatabaseSettingsTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingBrokenDatabaseSettingsTest.php
@@ -35,7 +35,8 @@ protected function prepareEnvironment() {
     $connection_info['default']['driver'] = 'DrivertestMysqlDeprecatedVersion';
     $namespace = 'Drupal\\driver_test\\Driver\\Database\\DrivertestMysqlDeprecatedVersion';
     $connection_info['default']['namespace'] = $namespace;
-    $connection_info['default']['autoload'] = Database::findDriverAutoloadDirectory($namespace, \Drupal::root());
+    $autoloading = Database::getDriverAutoloadInfo(\Drupal::root(), 'driver_test', 'DrivertestMysqlDeprecatedVersion');
+    $connection_info['default']['autoload'] = $autoloading['autoload'];
 
     $this->settings['databases']['default'] = (object) [
       'value' => $connection_info,
diff --git a/core/tests/Drupal/FunctionalTests/Installer/InstallerNonDefaultDatabaseDriverTest.php b/core/tests/Drupal/FunctionalTests/Installer/InstallerNonDefaultDatabaseDriverTest.php
index c7e4dff8b8..406e992bb0 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/InstallerNonDefaultDatabaseDriverTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/InstallerNonDefaultDatabaseDriverTest.php
@@ -61,6 +61,21 @@ public function testInstalled() {
     $this->assertStringContainsString("'driver' => '{$this->testDriverName}',", $contents);
     $this->assertStringContainsString("'autoload' => 'core/modules/system/tests/modules/driver_test/src/Driver/Database/{$this->testDriverName}/',", $contents);
 
+    $dependencies = "'dependencies' => " . PHP_EOL .
+      "  array (" . PHP_EOL .
+      "    'mysql' => " . PHP_EOL .
+      "    array (" . PHP_EOL .
+      "      'namespace' => 'Drupal\\\\mysql'," . PHP_EOL .
+      "      'autoload' => 'core/modules/mysql/src/'," . PHP_EOL .
+      "    )," . PHP_EOL .
+      "    'pgsql' => " . PHP_EOL .
+      "    array (" . PHP_EOL .
+      "      'namespace' => 'Drupal\\\\pgsql'," . PHP_EOL .
+      "      'autoload' => 'core/modules/pgsql/src/'," . PHP_EOL .
+      "    )," . PHP_EOL .
+      "  )," . PHP_EOL;
+    $this->assertStringContainsString($dependencies, $contents);
+
     // Assert that the module "driver_test" has been installed.
     $this->assertEquals(\Drupal::service('module_handler')->getModule('driver_test'), new Extension($this->root, 'module', 'core/modules/system/tests/modules/driver_test/driver_test.info.yml'));
 
diff --git a/core/tests/Drupal/Tests/Core/Database/DatabaseTest.php b/core/tests/Drupal/Tests/Core/Database/DatabaseTest.php
index bf61c2467c..dd25bdb17b 100644
--- a/core/tests/Drupal/Tests/Core/Database/DatabaseTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/DatabaseTest.php
@@ -55,8 +55,11 @@ protected function setUp(): void {
   /**
    * @covers ::findDriverAutoloadDirectory
    * @dataProvider providerFindDriverAutoloadDirectory
+   * @group legacy
    */
   public function testFindDriverAutoloadDirectory($expected, $namespace, $include_test_drivers) {
+    $this->expectDeprecation('Drupal\Core\Database\Database::findDriverAutoloadDirectory() is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use Database::getDriverAutoloadInfo() instead. See https://www.drupal.org/node/3258175');
+    // The only module that provides a driver in core is a test module.
     $this->assertSame($expected, Database::findDriverAutoloadDirectory($namespace, $this->root, $include_test_drivers));
   }
 
@@ -76,8 +79,10 @@ public function providerFindDriverAutoloadDirectory() {
   /**
    * @covers ::findDriverAutoloadDirectory
    * @dataProvider providerFindDriverAutoloadDirectoryException
+   * @group legacy
    */
   public function testFindDriverAutoloadDirectoryException($expected_message, $namespace, $include_tests) {
+    $this->expectDeprecation('Drupal\Core\Database\Database::findDriverAutoloadDirectory() is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use Database::getDriverAutoloadInfo() instead. See https://www.drupal.org/node/3258175');
     $this->expectException(\RuntimeException::class);
     $this->expectExceptionMessage($expected_message);
     Database::findDriverAutoloadDirectory($namespace, $this->root, $include_tests);
diff --git a/core/tests/Drupal/Tests/Core/Database/DriverModuleMissingDependenciesTest.php b/core/tests/Drupal/Tests/Core/Database/DriverModuleMissingDependenciesTest.php
new file mode 100644
index 0000000000..4bef826cef
--- /dev/null
+++ b/core/tests/Drupal/Tests/Core/Database/DriverModuleMissingDependenciesTest.php
@@ -0,0 +1,52 @@
+<?php
+
+namespace Drupal\Tests\Core\Database;
+
+use Drupal\Core\Database\Database;
+use Drupal\Core\Site\Settings;
+use Drupal\Tests\UnitTestCase;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * Tests for database driver module with missing dependency.
+ *
+ * These tests run in isolation since we don't want the database static to
+ * affect other tests. We also use a fake root directory to avoid the failing
+ * module to get into normal extensions discovery.
+ *
+ * @coversDefaultClass \Drupal\Core\Database\Database
+ *
+ * @runTestsInSeparateProcesses
+ * @preserveGlobalState disabled
+ *
+ * @group Database
+ */
+class DriverModuleMissingDependenciesTest extends UnitTestCase {
+
+  /**
+   * @covers ::discoverDriversAutoloadInfo
+   */
+  public function testDetermineDriversAutoloadingFailingOnMissingDependency(): void {
+    // Mock the container so we don't need to mock drupal_valid_test_ua().
+    // @see \Drupal\Core\Extension\ExtensionDiscovery::scan()
+    $container = $this->createMock(ContainerInterface::class);
+    $container->expects($this->any())
+      ->method('has')
+      ->with('kernel')
+      ->willReturn(TRUE);
+    $container->expects($this->any())
+      ->method('getParameter')
+      ->with('site.path')
+      ->willReturn('');
+    \Drupal::setContainer($container);
+
+    new Settings(['extension_discovery_scan_tests' => TRUE]);
+
+    $root = realpath(dirname(__FILE__) . '/fixtures');
+
+    $this->expectException(\RuntimeException::class);
+    $this->expectExceptionMessage("Cannot find the module 'a_really_missing_module' that is required by module 'driver_missing_dependency_test'");
+    Database::discoverDriversAutoloadInfo($root);
+  }
+
+}
diff --git a/core/tests/Drupal/Tests/Core/Database/UrlConversionTest.php b/core/tests/Drupal/Tests/Core/Database/UrlConversionTest.php
index 2e836da87c..6081b7d757 100644
--- a/core/tests/Drupal/Tests/Core/Database/UrlConversionTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/UrlConversionTest.php
@@ -135,6 +135,16 @@ public function providerConvertDbUrlToConnectionInfo() {
           'port' => 3306,
           'namespace' => 'Drupal\driver_test\Driver\Database\DrivertestMysql',
           'autoload' => 'core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/',
+          'dependencies' => [
+            'mysql' => [
+              'namespace' => 'Drupal\mysql',
+              'autoload' => 'core/modules/mysql/src/',
+            ],
+            'pgsql' => [
+              'namespace' => 'Drupal\pgsql',
+              'autoload' => 'core/modules/pgsql/src/',
+            ],
+          ],
         ],
         TRUE,
       ],
@@ -150,6 +160,16 @@ public function providerConvertDbUrlToConnectionInfo() {
           'port' => 3306,
           'namespace' => 'Drupal\driver_test\Driver\Database\DrivertestMysql',
           'autoload' => 'core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/',
+          'dependencies' => [
+            'mysql' => [
+              'namespace' => 'Drupal\mysql',
+              'autoload' => 'core/modules/mysql/src/',
+            ],
+            'pgsql' => [
+              'namespace' => 'Drupal\pgsql',
+              'autoload' => 'core/modules/pgsql/src/',
+            ],
+          ],
         ],
         TRUE,
       ],
@@ -164,6 +184,16 @@ public function providerConvertDbUrlToConnectionInfo() {
           'port' => 5432,
           'namespace' => 'Drupal\driver_test\Driver\Database\DrivertestPgsql',
           'autoload' => 'core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/',
+          'dependencies' => [
+            'mysql' => [
+              'namespace' => 'Drupal\mysql',
+              'autoload' => 'core/modules/mysql/src/',
+            ],
+            'pgsql' => [
+              'namespace' => 'Drupal\pgsql',
+              'autoload' => 'core/modules/pgsql/src/',
+            ],
+          ],
         ],
         TRUE,
       ],
@@ -179,6 +209,16 @@ public function providerConvertDbUrlToConnectionInfo() {
           'port' => 5432,
           'namespace' => 'Drupal\driver_test\Driver\Database\DrivertestPgsql',
           'autoload' => 'core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/',
+          'dependencies' => [
+            'mysql' => [
+              'namespace' => 'Drupal\mysql',
+              'autoload' => 'core/modules/mysql/src/',
+            ],
+            'pgsql' => [
+              'namespace' => 'Drupal\pgsql',
+              'autoload' => 'core/modules/pgsql/src/',
+            ],
+          ],
         ],
         TRUE,
       ],
@@ -390,6 +430,29 @@ public function providerGetConnectionInfoAsUrl() {
     ];
     $expected_url8 = 'DrivertestPgsql://test_user:test_pass@test_host:5432/test_database?module=driver_test#pre';
 
+    $info9 = [
+      'database' => 'test_database',
+      'username' => 'test_user',
+      'password' => 'test_pass',
+      'prefix' => '',
+      'host' => 'test_host',
+      'port' => '3306',
+      'driver' => 'DrivertestMysql',
+      'namespace' => 'Drupal\\driver_test\\Driver\\Database\\DrivertestMysql',
+      'autoload' => 'core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/',
+      'dependencies' => [
+        'mysql' => [
+          'namespace' => 'Drupal\mysql',
+          'autoload' => 'core/modules/mysql/src/',
+        ],
+        'pgsql' => [
+          'namespace' => 'Drupal\pgsql',
+          'autoload' => 'core/modules/pgsql/src/',
+        ],
+      ],
+    ];
+    $expected_url9 = 'DrivertestMysql://test_user:test_pass@test_host:3306/test_database?module=driver_test';
+
     return [
       [$info1, $expected_url1],
       [$info2, $expected_url2],
@@ -399,6 +462,7 @@ public function providerGetConnectionInfoAsUrl() {
       [$info6, $expected_url6],
       [$info7, $expected_url7],
       [$info8, $expected_url8],
+      [$info9, $expected_url9],
     ];
   }
 
@@ -449,7 +513,7 @@ public function providerInvalidArgumentGetConnectionInfoAsUrl() {
   public function testDriverModuleDoesNotExist() {
     $url = 'mysql://test_user:test_pass@test_host:3306/test_database?module=does_not_exist';
     $this->expectException(\RuntimeException::class);
-    $this->expectExceptionMessage("Cannot find the module 'does_not_exist' for the database driver namespace 'Drupal\does_not_exist\Driver\Database\mysql'");
+    $this->expectExceptionMessage("Cannot find the module 'does_not_exist' for the database driver 'mysql'");
     Database::convertDbUrlToConnectionInfo($url, $this->root, TRUE);
   }
 
@@ -459,7 +523,7 @@ public function testDriverModuleDoesNotExist() {
   public function testModuleDriverDoesNotExist() {
     $url = 'mysql://test_user:test_pass@test_host:3306/test_database?module=driver_test';
     $this->expectException(\RuntimeException::class);
-    $this->expectExceptionMessage("Cannot find the database driver namespace 'Drupal\driver_test\Driver\Database\mysql' in module 'driver_test'");
+    $this->expectExceptionMessage("Cannot find the database driver 'mysql' in the module 'driver_test'");
     Database::convertDbUrlToConnectionInfo($url, $this->root, TRUE);
   }
 
diff --git a/core/tests/Drupal/Tests/Core/Database/fixtures/core/modules/driver_missing_dependency_test/driver_missing_dependency_test.info.yml b/core/tests/Drupal/Tests/Core/Database/fixtures/core/modules/driver_missing_dependency_test/driver_missing_dependency_test.info.yml
new file mode 100644
index 0000000000..165db40f36
--- /dev/null
+++ b/core/tests/Drupal/Tests/Core/Database/fixtures/core/modules/driver_missing_dependency_test/driver_missing_dependency_test.info.yml
@@ -0,0 +1,7 @@
+name: 'Contrib database driver test with a missing dependency'
+type: module
+description: 'Support database contrib driver testing.'
+package: Testing
+version: VERSION
+dependencies:
+  - drupal:a_really_missing_module
diff --git a/core/tests/Drupal/Tests/Core/Database/fixtures/core/modules/driver_missing_dependency_test/src/Driver/Database/MissingDependency/Install/Tasks.php b/core/tests/Drupal/Tests/Core/Database/fixtures/core/modules/driver_missing_dependency_test/src/Driver/Database/MissingDependency/Install/Tasks.php
new file mode 100644
index 0000000000..43eeee5fa4
--- /dev/null
+++ b/core/tests/Drupal/Tests/Core/Database/fixtures/core/modules/driver_missing_dependency_test/src/Driver/Database/MissingDependency/Install/Tasks.php
@@ -0,0 +1,19 @@
+<?php
+
+namespace Drupal\driver_missing_dependency_test\Driver\Database\MissingDependency\Install;
+
+use Drupal\Core\Database\Install\Tasks as CoreTasks;
+
+/**
+ * Specifies fake installation tasks for test.
+ */
+class Tasks extends CoreTasks {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function name() {
+    return t('Fake driver by the driver_missing_dependency_test module');
+  }
+
+}
diff --git a/sites/default/default.settings.php b/sites/default/default.settings.php
index ee3b49c0a8..02f3e5e7a8 100644
--- a/sites/default/default.settings.php
+++ b/sites/default/default.settings.php
@@ -222,6 +222,27 @@
  *     'prefix' => '',
  *   ];
  * @endcode
+ *
+ * Sample Database configuration format for a driver that is extending another
+ * database driver.
+ * @code
+ *   $databases['default']['default'] = [
+ *     'driver' => 'my_driver',
+ *     'namespace' => 'Drupal\my_module\Driver\Database\my_driver',
+ *     'autoload' => 'modules/my_module/src/Driver/Database/my_driver/',
+ *     'database' => 'databasename',
+ *     'username' => 'sqlusername',
+ *     'password' => 'sqlpassword',
+ *     'host' => 'localhost',
+ *     'prefix' => '',
+ *     'dependencies' => [
+ *       'parent_module' => [
+ *         'namespace' => 'Drupal\parent_module',
+ *         'autoload' => 'core/modules/parent_module/src/',
+ *       ],
+ *     ],
+ *   ];
+ * @endcode
  */
 
 /**
