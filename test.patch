diff --git a/core/modules/comment/tests/src/Kernel/CommentValidationTest.php b/core/modules/comment/tests/src/Kernel/CommentValidationTest.php
index 2e6af32070..254deeed8c 100644
--- a/core/modules/comment/tests/src/Kernel/CommentValidationTest.php
+++ b/core/modules/comment/tests/src/Kernel/CommentValidationTest.php
@@ -101,7 +101,7 @@ public function testValidation() {
     $violations = $comment->validate();
     $this->assertCount(1, $violations, "Violation found on author name collision");
     $this->assertEquals("name", $violations[0]->getPropertyPath());
-    $this->assertEquals(t('The name you used (%name) belongs to a registered user.', ['%name' => 'test']), $violations[0]->getMessage());
+    $this->assertEquals('The name you used (test) belongs to a registered user.', $violations[0]->getMessage());
 
     // Make the name valid.
     $comment->set('name', 'valid unused name');
@@ -197,7 +197,7 @@ protected function assertLengthViolation(CommentInterface $comment, string $fiel
     $this->assertCount(1, $violations, "Violation found when $field_name is too long.");
     $this->assertEquals("{$field_name}.0.value", $violations[0]->getPropertyPath());
     $field_label = $comment->get($field_name)->getFieldDefinition()->getLabel();
-    $this->assertEquals(t('%name: may not be longer than @max characters.', ['%name' => $field_label, '@max' => $length]), $violations[0]->getMessage());
+    $this->assertEquals("{$field_label}: may not be longer than {$length} characters.", $violations[0]->getMessage());
   }
 
 }
diff --git a/core/modules/dblog/tests/src/Kernel/Views/ViewsIntegrationTest.php b/core/modules/dblog/tests/src/Kernel/Views/ViewsIntegrationTest.php
index 12ec986813..08a9f5b34f 100644
--- a/core/modules/dblog/tests/src/Kernel/Views/ViewsIntegrationTest.php
+++ b/core/modules/dblog/tests/src/Kernel/Views/ViewsIntegrationTest.php
@@ -71,6 +71,8 @@ public function testMessages() {
       if ($index == 2) {
         // Make sure that unsafe link differs from the rendered link, so we know
         // that some filtering actually happened.
+dump(['expected', $entry['variables']['link']]);
+dump(['actual  ', $link_field]);
         $this->assertNotEquals($entry['variables']['link'], $link_field);
       }
       $this->assertEquals(Xss::filterAdmin($entry['variables']['link']), $link_field);
diff --git a/core/tests/Drupal/TestTools/Comparator/MarkupInterfaceComparator.php b/core/tests/Drupal/TestTools/Comparator/MarkupInterfaceComparator.php
index 71ea80b82d..41edf69fab 100644
--- a/core/tests/Drupal/TestTools/Comparator/MarkupInterfaceComparator.php
+++ b/core/tests/Drupal/TestTools/Comparator/MarkupInterfaceComparator.php
@@ -25,8 +25,8 @@ public function accepts($expected, $actual) {
    * {@inheritdoc}
    */
   public function assertEquals($expected, $actual, $delta = 0.0, $canonicalize = FALSE, $ignoreCase = FALSE) {
-    $expected_safe = (string) $expected;
-    $actual_safe = (string) $actual;
+    $expected_safe = strip_tags((string) $expected);
+    $actual_safe = strip_tags((string) $actual);
     $comparator = $this->factory->getComparatorFor($expected_safe, $actual_safe);
     $comparator->assertEquals($expected_safe, $actual_safe, $delta, $canonicalize, $ignoreCase);
   }
