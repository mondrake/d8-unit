diff --git a/core/drupalci.yml b/core/drupalci.yml
index 82edd46046..c0d6553d91 100644
--- a/core/drupalci.yml
+++ b/core/drupalci.yml
@@ -25,24 +25,24 @@ build:
         testgroups: '--all'
         suppress-deprecations: false
         halt-on-fail: false
-      run_tests.build:
-        # Limit concurrency due to disk space concerns.
-        concurrency: 15
-        types: 'PHPUnit-Build'
-        testgroups: '--all'
-        suppress-deprecations: false
-        halt-on-fail: false
-      run_tests.functional:
-        types: 'PHPUnit-Functional'
-        testgroups: '--all'
-        suppress-deprecations: false
-        halt-on-fail: false
-      run_tests.javascript:
-        concurrency: 15
-        types: 'PHPUnit-FunctionalJavascript'
-        testgroups: '--all'
-        suppress-deprecations: false
-        halt-on-fail: false
-      # Run nightwatch testing.
-      # @see https://www.drupal.org/project/drupal/issues/2869825
-      nightwatchjs:
+#      run_tests.build:
+#        # Limit concurrency due to disk space concerns.
+#        concurrency: 15
+#        types: 'PHPUnit-Build'
+#        testgroups: '--all'
+#        suppress-deprecations: false
+#        halt-on-fail: false
+#      run_tests.functional:
+#        types: 'PHPUnit-Functional'
+#        testgroups: '--all'
+#        suppress-deprecations: false
+#        halt-on-fail: false
+#      run_tests.javascript:
+#        concurrency: 15
+#        types: 'PHPUnit-FunctionalJavascript'
+#        testgroups: '--all'
+#        suppress-deprecations: false
+#        halt-on-fail: false
+#      # Run nightwatch testing.
+#      # @see https://www.drupal.org/project/drupal/issues/2869825
+#      nightwatchjs:
diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index a5c78acc44..1cf68f102a 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -2,7 +2,6 @@
 
 namespace Drupal\Core\Database;
 
-use Drupal\Component\Assertion\Inspector;
 use Drupal\Core\Database\Query\Condition;
 use Drupal\Core\Database\Query\Delete;
 use Drupal\Core\Database\Query\Insert;
@@ -129,13 +128,6 @@ abstract class Connection {
    */
   protected $schema = NULL;
 
-  /**
-   * The prefixes used by this database connection.
-   *
-   * @var array
-   */
-  protected $prefixes = [];
-
   /**
    * List of search values for use in prefixTables().
    *
@@ -158,41 +150,9 @@ abstract class Connection {
   protected $unprefixedTablesMap = [];
 
   /**
-   * List of escaped database, table, and field names, keyed by unescaped names.
-   *
-   * @var array
-   *
-   * @deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. This is no
-   *   longer used. Use \Drupal\Core\Database\Connection::$escapedTables or
-   *   \Drupal\Core\Database\Connection::$escapedFields instead.
-   *
-   * @see https://www.drupal.org/node/2986894
-   */
-  protected $escapedNames = [];
-
-  /**
-   * List of escaped table names, keyed by unescaped names.
-   *
-   * @var array
-   */
-  protected $escapedTables = [];
-
-  /**
-   * List of escaped field names, keyed by unescaped names.
-   *
-   * There are cases in which escapeField() is called on an empty string. In
-   * this case it should always return an empty string.
-   *
-   * @var array
+   * @todo
    */
-  protected $escapedFields = ["" => ""];
-
-  /**
-   * List of escaped aliases names, keyed by unescaped aliases.
-   *
-   * @var array
-   */
-  protected $escapedAliases = [];
+  protected $identifierHandler;
 
   /**
    * Post-root (non-nested) transaction commit callbacks.
@@ -202,15 +162,16 @@ abstract class Connection {
   protected $rootTransactionEndCallbacks = [];
 
   /**
-   * The identifier quote characters for the database type.
-   *
-   * An array containing the start and end identifier quote characters for the
-   * database type. The ANSI SQL standard identifier quote character is a double
-   * quotation mark.
+   * Implements the magic __get() method.
    *
-   * @var string[]
+   * @todo Remove the method in Drupal 10.
    */
-  protected $identifierQuotes;
+  public function __get($name) {
+    if (in_array($name, ['escapedNames', 'escapedTables', 'escapedFields', 'escapedAliases', 'identifierQuotes', 'prefixes'])) {
+      @trigger_error("Connection::\${$name} should not be accessed in drupal:9.x.0 and is removed from drupal:10.0.0. This is no longer used. See https://www.drupal.org/node/1234567", E_USER_DEPRECATED);
+      return [];
+    }
+  }
 
   /**
    * Constructs a Connection object.
@@ -224,12 +185,6 @@ abstract class Connection {
    *   - Other driver-specific options.
    */
   public function __construct(\PDO $connection, array $connection_options) {
-    if ($this->identifierQuotes === NULL) {
-      @trigger_error('In drupal:10.0.0 not setting the $identifierQuotes property in the concrete Connection class will result in an RuntimeException. See https://www.drupal.org/node/2986894', E_USER_DEPRECATED);
-      $this->identifierQuotes = ['', ''];
-    }
-
-    assert(count($this->identifierQuotes) === 2 && Inspector::assertAllStrings($this->identifierQuotes), '\Drupal\Core\Database\Connection::$identifierQuotes must contain 2 string values');
     // The 'transactions' option is deprecated.
     if (isset($connection_options['transactions'])) {
       @trigger_error('Passing a \'transactions\' connection option to ' . __METHOD__ . ' is deprecated in drupal:9.1.0 and is removed in drupal:10.0.0. All database drivers must support transactions. See https://www.drupal.org/node/2278745', E_USER_DEPRECATED);
@@ -408,18 +363,18 @@ public function getConnectionOptions() {
    */
   protected function setPrefix($prefix) {
     if (is_array($prefix)) {
-      $this->prefixes = $prefix + ['default' => ''];
+      $prefix = $prefix + ['default' => ''];
     }
     else {
-      $this->prefixes = ['default' => $prefix];
+      $prefix = ['default' => $prefix];
     }
 
-    [$start_quote, $end_quote] = $this->identifierQuotes;
+    [$start_quote, $end_quote] = ['"', '"'];
     // Set up variables for use in prefixTables(). Replace table-specific
     // prefixes first.
     $this->prefixSearch = [];
     $this->prefixReplace = [];
-    foreach ($this->prefixes as $key => $val) {
+    foreach ($prefix as $key => $val) {
       if ($key != 'default') {
         $this->prefixSearch[] = '{' . $key . '}';
         // $val can point to another database like 'database.users'. In this
@@ -433,16 +388,20 @@ protected function setPrefix($prefix) {
     // $this->prefixes['default'] can point to another database like
     // 'other_db.'. In this instance we need to quote the identifiers correctly.
     // For example, "other_db"."PREFIX_table_name".
-    $this->prefixReplace[] = $start_quote . str_replace('.', $end_quote . '.' . $start_quote, $this->prefixes['default']);
+    $this->prefixReplace[] = $start_quote . str_replace('.', $end_quote . '.' . $start_quote, $prefix['default']);
     $this->prefixSearch[] = '}';
     $this->prefixReplace[] = $end_quote;
 
     // Set up a map of prefixed => un-prefixed tables.
-    foreach ($this->prefixes as $table_name => $prefix) {
+    foreach ($prefix as $table_name => $px) {
       if ($table_name !== 'default') {
-        $this->unprefixedTablesMap[$prefix . $table_name] = $table_name;
+        $this->unprefixedTablesMap[$px . $table_name] = $table_name;
       }
     }
+
+    if ($this->identifierHandler) {
+      $this->identifierHandler->setPrefix($prefix);
+    }
   }
 
   /**
@@ -460,7 +419,12 @@ protected function setPrefix($prefix) {
    *   The properly-prefixed string.
    */
   public function prefixTables($sql) {
-    return str_replace($this->prefixSearch, $this->prefixReplace, $sql);
+    $replacements = $tables = [];
+    preg_match_all('/(\{(\S*)\})/', $sql, $tables, PREG_SET_ORDER, 0);
+    foreach ($tables as $table) {
+      $replacements[$table[1]] = $this->identifierHandler->getPlatformTableName($table[2], TRUE, TRUE);
+    }
+    return str_replace(array_keys($replacements), array_values($replacements), $sql);
   }
 
   /**
@@ -484,7 +448,14 @@ public function prefixTables($sql) {
    *   This method should only be called by database API code.
    */
   public function quoteIdentifiers($sql) {
-    return str_replace(['[', ']'], $this->identifierQuotes, $sql);
+    preg_match_all('/(\[(.+?)\])/', $sql, $matches);
+    $identifiers = [];
+    $i = 0;
+    foreach ($matches[1] as $match) {
+      $identifiers[$match] = $this->identifierHandler->getPlatformIdentifierName($matches[2][$i]);
+      $i++;
+    }
+    return strtr($sql, $identifiers);
   }
 
   /**
@@ -495,14 +466,12 @@ public function quoteIdentifiers($sql) {
    *
    * @param string $table
    *   (optional) The table to find the prefix for.
+   *
+   * @todo deprecate
    */
   public function tablePrefix($table = 'default') {
-    if (isset($this->prefixes[$table])) {
-      return $this->prefixes[$table];
-    }
-    else {
-      return $this->prefixes['default'];
-    }
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:9.x.0 and is removed from drupal:10.0.0. @todo. See https://www.drupal.org/node/1234567', E_USER_DEPRECATED);
+    return $this->identifierHandler->tablePrefix($table);
   }
 
   /**
@@ -525,9 +494,7 @@ public function getUnprefixedTablesMap() {
    * @return string
    */
   public function getFullQualifiedTableName($table) {
-    $options = $this->getConnectionOptions();
-    $prefix = $this->tablePrefix($table);
-    return $options['database'] . '.' . $prefix . $table;
+    return $this->identifierHandler->getPlatformDatabaseName($this->getConnectionOptions()['database']) . '.' . $this->identifierHandler->getPlatformTableName($table, TRUE, TRUE);
   }
 
   /**
@@ -677,10 +644,7 @@ public function getLogger() {
    *   A table prefix-parsed string for the sequence name.
    */
   public function makeSequenceName($table, $field) {
-    $sequence_name = $this->prefixTables('{' . $table . '}_' . $field . '_seq');
-    // Remove identifier quotes as we are constructing a new name from a
-    // prefixed and quoted table name.
-    return str_replace($this->identifierQuotes, '', $sequence_name);
+    $sequence_name = $this->identifierHandler->getPlatformTableName($table, TRUE, FALSE) . "_{$field}_seq";
   }
 
   /**
@@ -991,6 +955,10 @@ public function getDriverClass($class) {
       }
       else {
         switch ($class) {
+          case 'IdentifierHandler':
+            $this->driverClasses[$class] = IdentifierHandler::class;
+            break;
+
           case 'Condition':
             $this->driverClasses[$class] = Condition::class;
             break;
@@ -1229,9 +1197,7 @@ public function condition($conjunction) {
    *   The sanitized database name.
    */
   public function escapeDatabase($database) {
-    $database = preg_replace('/[^A-Za-z0-9_]+/', '', $database);
-    [$start_quote, $end_quote] = $this->identifierQuotes;
-    return $start_quote . $database . $end_quote;
+    return $this->identifierHandler->getPlatformDatabaseName($database);
   }
 
   /**
@@ -1252,10 +1218,7 @@ public function escapeDatabase($database) {
    * @see \Drupal\Core\Database\Connection::setPrefix()
    */
   public function escapeTable($table) {
-    if (!isset($this->escapedTables[$table])) {
-      $this->escapedTables[$table] = preg_replace('/[^A-Za-z0-9_.]+/', '', $table);
-    }
-    return $this->escapedTables[$table];
+    return $this->identifierHandler->getPlatformTableName($table);
   }
 
   /**
@@ -1272,14 +1235,7 @@ public function escapeTable($table) {
    *   The sanitized field name.
    */
   public function escapeField($field) {
-    if (!isset($this->escapedFields[$field])) {
-      $escaped = preg_replace('/[^A-Za-z0-9_.]+/', '', $field);
-      [$start_quote, $end_quote] = $this->identifierQuotes;
-      // Sometimes fields have the format table_alias.field. In such cases
-      // both identifiers should be quoted, for example, "table_alias"."field".
-      $this->escapedFields[$field] = $start_quote . str_replace('.', $end_quote . '.' . $start_quote, $escaped) . $end_quote;
-    }
-    return $this->escapedFields[$field];
+    return $this->identifierHandler->getPlatformColumnName($field);
   }
 
   /**
@@ -1297,11 +1253,7 @@ public function escapeField($field) {
    *   The sanitized alias name.
    */
   public function escapeAlias($field) {
-    if (!isset($this->escapedAliases[$field])) {
-      [$start_quote, $end_quote] = $this->identifierQuotes;
-      $this->escapedAliases[$field] = $start_quote . preg_replace('/[^A-Za-z0-9_]+/', '', $field) . $end_quote;
-    }
-    return $this->escapedAliases[$field];
+    return $this->identifierHandler->getPlatformAliasName($field);
   }
 
   /**
@@ -1982,4 +1934,18 @@ public function getPagerManager(): PagerManagerInterface {
     return \Drupal::service('pager.manager');
   }
 
+  /**
+   * @todo
+   */
+  public function getIdentifierHandler(): IdentifierHandler {
+    return $this->identifierHandler;
+  }
+
+  /**
+   * @todo remove, debug only
+   */
+  public function dumpIdentifiers(): void {
+    $this->identifierHandler->doDump();
+  }
+
 }
diff --git a/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php b/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php
index fe281cb3d9..43f439c235 100644
--- a/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php
+++ b/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php
@@ -85,9 +85,15 @@ class Connection extends DatabaseConnection {
   const MIN_MAX_ALLOWED_PACKET = 1024;
 
   /**
-   * {@inheritdoc}
+   * Constructs a connection object.
    */
-  protected $identifierQuotes = ['"', '"'];
+  public function __construct(\PDO $connection, array $connection_options) {
+    parent::__construct($connection, $connection_options);
+
+    // Initialize the identifier handler.
+    $identifier_handler_class = $this->getDriverClass('IdentifierHandler');
+    $this->identifierHandler = new $identifier_handler_class($connection_options['prefix']);
+  }
 
   /**
    * {@inheritdoc}
diff --git a/core/lib/Drupal/Core/Database/Driver/pgsql/Connection.php b/core/lib/Drupal/Core/Database/Driver/pgsql/Connection.php
index b996735aab..ada53b70c0 100644
--- a/core/lib/Drupal/Core/Database/Driver/pgsql/Connection.php
+++ b/core/lib/Drupal/Core/Database/Driver/pgsql/Connection.php
@@ -68,11 +68,6 @@ class Connection extends DatabaseConnection {
    */
   protected $transactionalDDLSupport = TRUE;
 
-  /**
-   * {@inheritdoc}
-   */
-  protected $identifierQuotes = ['"', '"'];
-
   /**
    * Constructs a connection object.
    */
@@ -86,6 +81,10 @@ public function __construct(\PDO $connection, array $connection_options) {
     if (isset($connection_options['init_commands'])) {
       $this->connection->exec(implode('; ', $connection_options['init_commands']));
     }
+
+    // Initialize the identifier handler.
+    $identifier_handler_class = $this->getDriverClass('IdentifierHandler');
+    $this->identifierHandler = new $identifier_handler_class($connection_options['prefix']);
   }
 
   /**
diff --git a/core/lib/Drupal/Core/Database/Driver/sqlite/Connection.php b/core/lib/Drupal/Core/Database/Driver/sqlite/Connection.php
index 64957038d2..55d5ceeaf3 100644
--- a/core/lib/Drupal/Core/Database/Driver/sqlite/Connection.php
+++ b/core/lib/Drupal/Core/Database/Driver/sqlite/Connection.php
@@ -74,11 +74,6 @@ class Connection extends DatabaseConnection {
    */
   protected $transactionalDDLSupport = TRUE;
 
-  /**
-   * {@inheritdoc}
-   */
-  protected $identifierQuotes = ['"', '"'];
-
   /**
    * Constructs a \Drupal\Core\Database\Driver\sqlite\Connection object.
    */
@@ -86,7 +81,13 @@ public function __construct(\PDO $connection, array $connection_options) {
     parent::__construct($connection, $connection_options);
 
     // Attach one database for each registered prefix.
-    $prefixes = $this->prefixes;
+    $prefixes = $connection_options['prefix'] ?? [];
+    if (is_array($prefixes)) {
+      $prefixes += ['default' => ''];
+    }
+    else {
+      $prefixes = ['default' => $prefixes];
+    }
     foreach ($prefixes as &$prefix) {
       // Empty prefix means query the main database -- no need to attach anything.
       if (!empty($prefix)) {
@@ -111,6 +112,10 @@ public function __construct(\PDO $connection, array $connection_options) {
     }
     // Regenerate the prefixes replacement table.
     $this->setPrefix($prefixes);
+
+    // Initialize the identifier handler.
+    $identifier_handler_class = $this->getDriverClass('IdentifierHandler');
+    $this->identifierHandler = new $identifier_handler_class($prefixes);
   }
 
   /**
@@ -387,7 +392,7 @@ public function queryTemporary($query, array $args = [], array $options = []) {
     // Generate a new temporary table name and protect it from prefixing.
     // SQLite requires that temporary tables to be non-qualified.
     $tablename = $this->generateTemporaryTableName();
-    $prefixes = $this->prefixes;
+    $prefixes = $this->identifierHandler->getPrefix();
     $prefixes[$tablename] = '';
     $this->setPrefix($prefixes);
 
@@ -461,10 +466,8 @@ public function nextId($existing_id = 0) {
    * {@inheritdoc}
    */
   public function getFullQualifiedTableName($table) {
-    $prefix = $this->tablePrefix($table);
-
     // Don't include the SQLite database file name as part of the table name.
-    return $prefix . $table;
+    return $this->identifierHandler->getPlatformTableName($table, TRUE, TRUE);
   }
 
   /**
diff --git a/core/lib/Drupal/Core/Database/IdentifierHandler.php b/core/lib/Drupal/Core/Database/IdentifierHandler.php
new file mode 100644
index 0000000000..927f59fad3
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/IdentifierHandler.php
@@ -0,0 +1,228 @@
+<?php
+
+namespace Drupal\Core\Database;
+
+/**
+ * @todo
+ */
+class IdentifierHandler {
+
+  const GENERIC = 0x0;
+  const DATABASE = 0x4;
+  const SEQUENCE = 0x5;
+  const TABLE = 0x7;
+  const PREFIXED_TABLE = 0x8;
+  const COLUMN = 0xC;
+  const INDEX = 0xD;
+  const ALIAS = 0x10;
+
+  /**
+   * The identifier quote characters for the database type.
+   *
+   * An array containing the start and end identifier quote characters for the
+   * database type. The ANSI SQL standard identifier quote character is a double
+   * quotation mark.
+   *
+   * @var string[]
+   */
+  protected $identifierQuotes;
+
+  /**
+   * The table prefixes used by this database connection.
+   *
+   * @var array
+   */
+  protected $prefixes;
+
+  /**
+   * @todo
+   */
+  protected $identifiers;
+
+  /**
+   * Constructs a Connection object.
+   *
+   * @param string[] $prefixes
+   *   The list of prefixes used by this database connection.
+   * @param string[] $identifier_quotes
+   *   The identifier quote characters. Defaults to an empty strings.
+   */
+  public function __construct(array $prefixes, array $identifier_quotes = ['"', '"']) {
+    $this->setPrefix($prefixes);
+    $this->identifierQuotes = $identifier_quotes;
+  }
+
+  /**
+   * Set the list of prefixes used by this database connection.
+   *
+   * @param array $prefix
+   *   An array of prefixes, in any of the multiple forms documented in
+   *   default.settings.php.
+   */
+  public function setPrefix(array $prefix): void {
+    $this->prefixes = $prefix;
+  }
+
+  /**
+   * @todo remove in D10
+   */
+  public function getPrefix(): array {
+    return $this->prefixes;
+  }
+
+  /**
+   * Find the prefix for a table.
+   *
+   * This function is for when you want to know the prefix of a table. This
+   * is not used in prefixTables due to performance reasons.
+   *
+   * @param string $table
+   *   (optional) The table to find the prefix for.
+   *
+   * @todo remove in D10
+   */
+  public function tablePrefix(?string $table = 'default'): string {
+    if (isset($this->prefixes[$table])) {
+      return $this->prefixes[$table];
+    }
+    else {
+      return $this->prefixes['default'];
+    }
+  }
+
+  /**
+   * @todo
+   */
+  protected function setIdentifier(string $identifier, string $platform_identifier, int $type): void {
+    $is_alias = (bool) ($type & static::ALIAS);
+    $type = $type & 0xF;
+    if (!$is_alias) {
+      $this->identifiers['identifier'][$identifier][$type] = $platform_identifier;
+      $this->identifiers['platform'][$platform_identifier][$type] = $identifier;
+    }
+    else {
+      $this->identifiers['identifier'][$identifier][static::ALIAS][$type] = $platform_identifier;
+      $this->identifiers['platform'][$platform_identifier][static::ALIAS][$type] = $identifier;
+    }
+  }
+
+  /**
+   * @todo
+   */
+  protected function hasIdentifier(string $identifier, int $type = 0): bool {
+    return isset($this->identifiers['identifier'][$identifier][$type]);
+  }
+
+  /**
+   * @todo remove, debug only
+   */
+  public function doDump() {
+    dump($this->identifiers);
+  }
+
+  /**
+   * @todo
+   */
+  public function getPlatformIdentifierName(string $original_name, bool $quoted = TRUE): string {
+    if (!$this->hasIdentifier($original_name, static::GENERIC)) {
+      $this->setIdentifier($original_name, $this->resolvePlatformGenericIdentifier($original_name), static::GENERIC);
+    }
+    [$start_quote, $end_quote] = $this->identifierQuotes;
+    $identifier = $this->identifiers['identifier'][$original_name][static::GENERIC];
+    return $quoted ? $start_quote . $identifier . $end_quote : $identifier;
+  }
+
+  /**
+   * @todo
+   */
+  public function getPlatformDatabaseName(string $original_name, bool $quoted = TRUE): string {
+    if (!$this->hasIdentifier($original_name, static::DATABASE)) {
+      $this->setIdentifier($original_name, $this->resolvePlatformDatabaseIdentifier($original_name), static::DATABASE);
+    }
+    [$start_quote, $end_quote] = $this->identifierQuotes;
+    return $quoted ?
+      $start_quote . $this->identifiers['identifier'][$original_name][static::DATABASE] . $end_quote :
+      $this->identifiers['identifier'][$original_name][static::DATABASE];
+  }
+
+  /**
+   * @todo
+   */
+  public function getPlatformTableName(string $original_name, bool $prefixed = FALSE, bool $quoted = FALSE): string {
+    if (!$this->hasIdentifier($original_name, static::TABLE)) {
+      $table_name = $this->resolvePlatformTableIdentifier($original_name);
+      $this->setIdentifier($original_name, $table_name, static::TABLE);
+      $prefix = isset($this->prefixes[$table_name]) ? $this->prefixes[$table_name] : $this->prefixes['default'];
+      $this->setIdentifier($original_name, $prefix . $table_name, static::PREFIXED_TABLE);
+    }
+    [$start_quote, $end_quote] = $this->identifierQuotes;
+    $table = $prefixed ? $this->identifiers['identifier'][$original_name][static::PREFIXED_TABLE] : $this->identifiers['identifier'][$original_name][static::TABLE];
+    return $quoted ? $start_quote . str_replace(".", "$end_quote.$start_quote", $table) . $end_quote : $table;
+  }
+
+  /**
+   * @todo
+   */
+  public function getPlatformColumnName(string $original_name, bool $quoted = TRUE): string {
+    if ($original_name === '') {
+      return '';
+    }
+    if (!$this->hasIdentifier($original_name, static::COLUMN)) {
+      $this->setIdentifier($original_name, $this->resolvePlatformColumnIdentifier($original_name), static::COLUMN);
+    }
+    // Sometimes fields have the format table_alias.field. In such cases
+    // both identifiers should be quoted, for example, "table_alias"."field".
+    [$start_quote, $end_quote] = $this->identifierQuotes;
+    return $quoted ?
+      $start_quote . str_replace(".", "$end_quote.$start_quote", $this->identifiers['identifier'][$original_name][static::COLUMN]) . $end_quote :
+      $this->identifiers['identifier'][$original_name][static::COLUMN];
+  }
+
+  /**
+   * @todo
+   */
+  public function getPlatformAliasName(string $original_name, int $type = 0, bool $quoted = TRUE): string {
+    if (!$this->hasIdentifier($original_name, static::ALIAS)) {
+      $this->setIdentifier($original_name, $this->resolvePlatformGenericIdentifier($original_name, $type), $type | static::ALIAS);
+    }
+    [$start_quote, $end_quote] = $this->identifierQuotes;
+    $alias = $this->identifiers['identifier'][$original_name][static::ALIAS][$type] ?? $this->identifiers['identifier'][$original_name][static::ALIAS][0];
+    return $quoted ? $start_quote . $alias . $end_quote : $alias;
+  }
+
+  /**
+   * @todo
+   */
+  protected function resolvePlatformGenericIdentifier(string $identifier): string {
+    return $identifier;
+  }
+
+  /**
+   * @todo
+   */
+  protected function resolvePlatformDatabaseIdentifier(string $identifier): string {
+    return preg_replace('/[^A-Za-z0-9_]+/', '', $identifier);
+  }
+
+  /**
+   * @todo
+   */
+  protected function resolvePlatformTableIdentifier(string $identifier): string {
+    return preg_replace('/[^A-Za-z0-9_.]+/', '', $identifier);
+  }
+
+  /**
+   * @todo
+   */
+  protected function resolvePlatformColumnIdentifier(string $identifier): string {
+    return preg_replace('/[^A-Za-z0-9_.]+/', '', $identifier);
+  }
+
+  /**
+   * @todo
+   */
+  protected function resolvePlatformAliasIdentifier(string $identifier, int $type = 0): string {
+    return preg_replace('/[^A-Za-z0-9_.]+/', '', $identifier);
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/Schema.php b/core/lib/Drupal/Core/Database/Schema.php
index fe932d3bce..01f077e193 100644
--- a/core/lib/Drupal/Core/Database/Schema.php
+++ b/core/lib/Drupal/Core/Database/Schema.php
@@ -84,23 +84,21 @@ public function nextPlaceholder() {
   protected function getPrefixInfo($table = 'default', $add_prefix = TRUE) {
     $info = [
       'schema' => $this->defaultSchema,
-      'prefix' => $this->connection->tablePrefix($table),
+      'prefix' => $this->connection->getIdentifierHandler()->tablePrefix($table),
     ];
-    if ($add_prefix) {
-      $table = $info['prefix'] . $table;
-    }
+    $table_identifier = $this->connection->getIdentifierHandler()->getPlatformTableName($table ?? '', $add_prefix);
     // If the prefix contains a period in it, then that means the prefix also
     // contains a schema reference in which case we will change the schema key
     // to the value before the period in the prefix. Everything after the dot
     // will be prefixed onto the front of the table.
-    if (($pos = strpos($table, '.')) !== FALSE) {
+    if (($pos = strpos($table_identifier, '.')) !== FALSE) {
       // Grab everything before the period.
-      $info['schema'] = substr($table, 0, $pos);
+      $info['schema'] = substr($table_identifier, 0, $pos);
       // Grab everything after the dot.
-      $info['table'] = substr($table, ++$pos);
+      $info['table'] = substr($table_identifier, ++$pos);
     }
     else {
-      $info['table'] = $table;
+      $info['table'] = $table_identifier;
     }
     return $info;
   }
@@ -192,7 +190,7 @@ public function findTables($table_expression) {
     $condition->compile($this->connection, $this);
 
     $individually_prefixed_tables = $this->connection->getUnprefixedTablesMap();
-    $default_prefix = $this->connection->tablePrefix();
+    $default_prefix = $this->connection->getIdentifierHandler()->tablePrefix();
     $default_prefix_length = strlen($default_prefix);
     $tables = [];
     // Normally, we would heartily discourage the use of string
@@ -204,7 +202,7 @@ public function findTables($table_expression) {
     foreach ($results as $table) {
       // Take into account tables that have an individual prefix.
       if (isset($individually_prefixed_tables[$table->table_name])) {
-        $prefix_length = strlen($this->connection->tablePrefix($individually_prefixed_tables[$table->table_name]));
+        $prefix_length = strlen($this->connection->getIdentifierHandler()->tablePrefix($individually_prefixed_tables[$table->table_name]));
       }
       elseif ($default_prefix && substr($table->table_name, 0, $default_prefix_length) !== $default_prefix) {
         // This table name does not start the default prefix, which means that
diff --git a/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php b/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php
index c4eb924f0b..bda1fffbc0 100644
--- a/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php
@@ -3,6 +3,7 @@
 namespace Drupal\Tests\Core\Database;
 
 use Composer\Autoload\ClassLoader;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Statement;
 use Drupal\Core\Database\StatementWrapper;
 use Drupal\Tests\Core\Database\Stub\StubConnection;
@@ -49,6 +50,8 @@ public function providerPrefixRoundTrip() {
    * Exercise setPrefix() and tablePrefix().
    *
    * @dataProvider providerPrefixRoundTrip
+   *
+   * @group legacy
    */
   public function testPrefixRoundTrip($expected, $prefix_info) {
     $mock_pdo = $this->createMock('Drupal\Tests\Core\Database\Stub\StubPDO');
@@ -63,6 +66,7 @@ public function testPrefixRoundTrip($expected, $prefix_info) {
     $set_prefix->invokeArgs($connection, [$prefix_info]);
     // Check the round-trip.
     foreach ($expected as $table => $prefix) {
+      $this->expectDeprecation('Drupal\Core\Database\Connection::tablePrefix() is deprecated in drupal:9.x.0 and is removed from drupal:10.0.0. @todo. See https://www.drupal.org/node/1234567');
       $this->assertEquals($prefix, $connection->tablePrefix($table));
     }
   }
@@ -601,29 +605,11 @@ public function testEscapeDatabase($expected, $name, array $identifier_quote = [
    * @group legacy
    */
   public function testIdentifierQuotesDeprecation() {
-    $this->expectDeprecation('In drupal:10.0.0 not setting the $identifierQuotes property in the concrete Connection class will result in an RuntimeException. See https://www.drupal.org/node/2986894');
-    $mock_pdo = $this->createMock(StubPDO::class);
-    new StubConnection($mock_pdo, [], NULL);
-  }
-
-  /**
-   * @covers ::__construct
-   */
-  public function testIdentifierQuotesAssertCount() {
-    $this->expectException(\AssertionError::class);
-    $this->expectExceptionMessage('\Drupal\Core\Database\Connection::$identifierQuotes must contain 2 string values');
-    $mock_pdo = $this->createMock(StubPDO::class);
-    new StubConnection($mock_pdo, [], ['"']);
-  }
-
-  /**
-   * @covers ::__construct
-   */
-  public function testIdentifierQuotesAssertString() {
-    $this->expectException(\AssertionError::class);
-    $this->expectExceptionMessage('\Drupal\Core\Database\Connection::$identifierQuotes must contain 2 string values');
+    $this->expectDeprecation('Connection::$identifierQuotes should not be accessed in drupal:9.x.0 and is removed from drupal:10.0.0. This is no longer used. See https://www.drupal.org/node/1234567');
     $mock_pdo = $this->createMock(StubPDO::class);
-    new StubConnection($mock_pdo, [], [0, '1']);
+    $mock_connection = new StubConnection($mock_pdo, [], ['"', '"']);
+    $this->assertInstanceOf(Connection::class, $mock_connection);
+    $test_identifier_quotes = $mock_connection->identifierQuotes;
   }
 
   /**
diff --git a/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php b/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php
index 146ba0891c..9f168b758f 100644
--- a/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php
+++ b/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php
@@ -45,12 +45,17 @@ class StubConnection extends Connection {
    *   A class to use as a statement class for deprecation testing.
    */
   public function __construct(\PDO $connection, array $connection_options, $identifier_quotes = ['', ''], $statement_class = NULL) {
-    $this->identifierQuotes = $identifier_quotes;
     if ($statement_class) {
       $this->statementClass = $statement_class;
       $this->statementWrapperClass = NULL;
     }
     parent::__construct($connection, $connection_options);
+
+    // Initialize the identifier handler.
+    $prefix = $connection_options['prefix'] ?? ['default' => ''];
+    $prefix = is_array($prefix) ? $prefix : ['default' => $prefix];
+    $identifier_handler_class = $this->getDriverClass('IdentifierHandler');
+    $this->identifierHandler = new $identifier_handler_class($prefix, $identifier_quotes);
   }
 
   /**
