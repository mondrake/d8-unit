diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index 39a856e966e..67d314e6938 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\Core\Database;
 
-use Drupal\Component\Assertion\Inspector;
 use Drupal\Core\Database\Event\DatabaseEvent;
 use Drupal\Core\Database\Exception\EventException;
+use Drupal\Core\Database\Identifier\IdentifierHandler;
 use Drupal\Core\Database\Query\Condition;
 use Drupal\Core\Database\Query\Delete;
 use Drupal\Core\Database\Query\Insert;
@@ -111,13 +111,6 @@ abstract class Connection {
    */
   protected $schema = NULL;
 
-  /**
-   * The prefix used by this database connection.
-   *
-   * @var string
-   */
-  protected string $prefix;
-
   /**
    * Replacements to fully qualify {table} placeholders in SQL strings.
    *
@@ -177,28 +170,9 @@ abstract class Connection {
   protected $unprefixedTablesMap = [];
 
   /**
-   * List of escaped table names, keyed by unescaped names.
-   *
-   * @var array
-   */
-  protected $escapedTables = [];
-
-  /**
-   * List of escaped field names, keyed by unescaped names.
-   *
-   * There are cases in which escapeField() is called on an empty string. In
-   * this case it should always return an empty string.
-   *
-   * @var array
-   */
-  protected $escapedFields = ["" => ""];
-
-  /**
-   * List of escaped aliases names, keyed by unescaped aliases.
-   *
-   * @var array
+   * @todo
    */
-  protected $escapedAliases = [];
+  protected IdentifierHandler $identifierHandler;
 
   /**
    * Post-root (non-nested) transaction commit callbacks.
@@ -207,17 +181,6 @@ abstract class Connection {
    */
   protected $rootTransactionEndCallbacks = [];
 
-  /**
-   * The identifier quote characters for the database type.
-   *
-   * An array containing the start and end identifier quote characters for the
-   * database type. The ANSI SQL standard identifier quote character is a double
-   * quotation mark.
-   *
-   * @var string[]
-   */
-  protected $identifierQuotes;
-
   /**
    * Tracks the database API events to be dispatched.
    *
@@ -238,11 +201,8 @@ abstract class Connection {
    *   - Other driver-specific options.
    */
   public function __construct(object $connection, array $connection_options) {
-    assert(count($this->identifierQuotes) === 2 && Inspector::assertAllStrings($this->identifierQuotes), '\Drupal\Core\Database\Connection::$identifierQuotes must contain 2 string values');
-
     // Manage the table prefix.
     $connection_options['prefix'] = $connection_options['prefix'] ?? '';
-    $this->setPrefix($connection_options['prefix']);
 
     // Work out the database driver namespace if none is provided. This normally
     // written to setting.php by installer or set by
@@ -255,6 +215,18 @@ public function __construct(object $connection, array $connection_options) {
     $this->connectionOptions = $connection_options;
   }
 
+  /**
+   * Implements the magic __get() method.
+   *
+   * @todo Remove the method in Drupal 1x.
+   */
+  public function __get($name) {
+    if (in_array($name, ['prefix', 'escapedTables', 'escapedFields', 'escapedAliases', 'identifierQuotes'])) {
+      @trigger_error("Connection::\${$name} should not be accessed in drupal:9.x.0 and is removed from drupal:10.0.0. This is no longer used. See https://www.drupal.org/node/1234567", E_USER_DEPRECATED);
+      return [];
+    }
+  }
+
   /**
    * Opens a client connection.
    *
@@ -381,7 +353,8 @@ public function attachDatabase(string $database): void {
    * @return string $prefix
    */
   public function getPrefix(): string {
-    return $this->prefix;
+    // @trigger_error(__METHOD__ . '() is deprecated in drupal:9.x.0 and is removed from drupal:10.0.0. @todo. See https://www.drupal.org/node/1234567', E_USER_DEPRECATED);
+    return $this->identifierHandler->getTablePrefix();
   }
 
   /**
@@ -391,12 +364,7 @@ public function getPrefix(): string {
    *   A single prefix.
    */
   protected function setPrefix($prefix) {
-    assert(is_string($prefix), 'The \'$prefix\' argument to ' . __METHOD__ . '() must be a string');
-    $this->prefix = $prefix;
-    $this->tablePlaceholderReplacements = [
-      $this->identifierQuotes[0] . str_replace('.', $this->identifierQuotes[1] . '.' . $this->identifierQuotes[0], $prefix),
-      $this->identifierQuotes[1],
-    ];
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:9.x.0 and is removed from drupal:10.0.0. @todo. See https://www.drupal.org/node/1234567', E_USER_DEPRECATED);
   }
 
   /**
@@ -414,7 +382,12 @@ protected function setPrefix($prefix) {
    *   The properly-prefixed string.
    */
   public function prefixTables($sql) {
-    return str_replace(['{', '}'], $this->tablePlaceholderReplacements, $sql);
+    $replacements = $tables = [];
+    preg_match_all('/(\{(\S*)\})/', $sql, $tables, PREG_SET_ORDER, 0);
+    foreach ($tables as $table) {
+      $replacements[$table[1]] = $this->identifierHandler->getPlatformTableName($table[2], TRUE, TRUE);
+    }
+    return str_replace(array_keys($replacements), array_values($replacements), $sql);
   }
 
   /**
@@ -438,7 +411,14 @@ public function prefixTables($sql) {
    *   This method should only be called by database API code.
    */
   public function quoteIdentifiers($sql) {
-    return str_replace(['[', ']'], $this->identifierQuotes, $sql);
+    preg_match_all('/(\[(.+?)\])/', $sql, $matches);
+    $identifiers = [];
+    $i = 0;
+    foreach ($matches[1] as $match) {
+      $identifiers[$match] = $this->identifierHandler->getPlatformIdentifierName($matches[2][$i]);
+      $i++;
+    }
+    return strtr($sql, $identifiers);
   }
 
   /**
@@ -457,7 +437,7 @@ public function quoteIdentifiers($sql) {
    */
   public function tablePrefix($table = 'default') {
     @trigger_error(__METHOD__ . '() is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Instead, you should just use Connection::getPrefix(). See https://www.drupal.org/node/3260849', E_USER_DEPRECATED);
-    return $this->prefix;
+    return $this->identifierHandler->getTablePrefix();
   }
 
   /**
@@ -486,9 +466,7 @@ public function getUnprefixedTablesMap() {
    * @return string
    */
   public function getFullQualifiedTableName($table) {
-    $options = $this->getConnectionOptions();
-    $prefix = $this->getPrefix();
-    return $options['database'] . '.' . $prefix . $table;
+    return $this->identifierHandler->getPlatformDatabaseName($this->getConnectionOptions()['database']) . '.' . $this->identifierHandler->getPlatformTableName($table, TRUE, TRUE);
   }
 
   /**
@@ -670,10 +648,7 @@ public function getLogger() {
    *   A table prefix-parsed string for the sequence name.
    */
   public function makeSequenceName($table, $field) {
-    $sequence_name = $this->prefixTables('{' . $table . '}_' . $field . '_seq');
-    // Remove identifier quotes as we are constructing a new name from a
-    // prefixed and quoted table name.
-    return str_replace($this->identifierQuotes, '', $sequence_name);
+    return $this->identifierHandler->getPlatformTableName($table, TRUE, FALSE) . "_{$field}_seq";
   }
 
   /**
@@ -986,6 +961,13 @@ public function exceptionHandler() {
     return new $class();
   }
 
+  /**
+   * @todo
+   */
+  public function getIdentifierHandler(): IdentifierHandler {
+    return $this->identifierHandler;
+  }
+
   /**
    * Prepares and returns a SELECT query object.
    *
@@ -1227,9 +1209,7 @@ public function condition($conjunction) {
    *   The sanitized database name.
    */
   public function escapeDatabase($database) {
-    $database = preg_replace('/[^A-Za-z0-9_]+/', '', $database);
-    [$start_quote, $end_quote] = $this->identifierQuotes;
-    return $start_quote . $database . $end_quote;
+    return $this->identifierHandler->getPlatformDatabaseName($database);
   }
 
   /**
@@ -1250,10 +1230,7 @@ public function escapeDatabase($database) {
    * @see \Drupal\Core\Database\Connection::setPrefix()
    */
   public function escapeTable($table) {
-    if (!isset($this->escapedTables[$table])) {
-      $this->escapedTables[$table] = preg_replace('/[^A-Za-z0-9_.]+/', '', $table);
-    }
-    return $this->escapedTables[$table];
+    return $this->identifierHandler->getPlatformTableName($table);
   }
 
   /**
@@ -1270,14 +1247,7 @@ public function escapeTable($table) {
    *   The sanitized field name.
    */
   public function escapeField($field) {
-    if (!isset($this->escapedFields[$field])) {
-      $escaped = preg_replace('/[^A-Za-z0-9_.]+/', '', $field);
-      [$start_quote, $end_quote] = $this->identifierQuotes;
-      // Sometimes fields have the format table_alias.field. In such cases
-      // both identifiers should be quoted, for example, "table_alias"."field".
-      $this->escapedFields[$field] = $start_quote . str_replace('.', $end_quote . '.' . $start_quote, $escaped) . $end_quote;
-    }
-    return $this->escapedFields[$field];
+    return $this->identifierHandler->getPlatformColumnName($field);
   }
 
   /**
@@ -1295,11 +1265,7 @@ public function escapeField($field) {
    *   The sanitized alias name.
    */
   public function escapeAlias($field) {
-    if (!isset($this->escapedAliases[$field])) {
-      [$start_quote, $end_quote] = $this->identifierQuotes;
-      $this->escapedAliases[$field] = $start_quote . preg_replace('/[^A-Za-z0-9_]+/', '', $field) . $end_quote;
-    }
-    return $this->escapedAliases[$field];
+    return $this->identifierHandler->getPlatformAliasName($field);
   }
 
   /**
diff --git a/core/lib/Drupal/Core/Database/Identifier/IdentifierHandler.php b/core/lib/Drupal/Core/Database/Identifier/IdentifierHandler.php
new file mode 100644
index 00000000000..4d9aeb4c4e5
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Identifier/IdentifierHandler.php
@@ -0,0 +1,178 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\Identifier;
+
+/**
+ * @todo
+ */
+class IdentifierHandler {
+
+  /**
+   * @var array{'identifier':array<string,array<int,string>>,'platform':array<string,array<int,string>>}
+   */
+  protected array $identifiers;
+
+  /**
+   * @var array{'identifier':array<string,array<int,string>>,'platform':array<string,array<int,string>>}
+   */
+  protected array $aliases;
+
+  /**
+   * Constructs an IdentifierHandler object.
+   *
+   * @param string $tablePrefix
+   *   The table prefix to be used by the database connection.
+   * @param array{0:string, 1:string} $identifierQuotes
+   *   The identifier quote characters for the database type. An array
+   *   containing the start and end identifier quote characters for the
+   *   database type. The ANSI SQL standard identifier quote character is a
+   *   double quotation mark.
+   */
+  public function __construct(
+    protected string $tablePrefix,
+    protected array $identifierQuotes = ['"', '"'],
+  ) {
+  }
+
+  /**
+   * @todo
+   */
+  public function getTablePrefix(): string {
+    return $this->tablePrefix;
+  }
+
+  /**
+   * @todo
+   */
+  protected function setIdentifier(string $identifier, string $platform_identifier, IdentifierType $type, bool $isAlias): void {
+    if (!$isAlias) {
+      $this->identifiers['identifier'][$identifier][$type->value] = $platform_identifier;
+      $this->identifiers['platform'][$platform_identifier][$type->value] = $identifier;
+    }
+    else {
+      $this->aliases['identifier'][$identifier][$type->value] = $platform_identifier;
+      $this->aliases['platform'][$platform_identifier][$type->value] = $identifier;
+    }
+  }
+
+  /**
+   * @todo
+   */
+  protected function hasIdentifier(string $identifier, IdentifierType $type): bool {
+    return isset($this->identifiers['identifier'][$identifier][$type->value]);
+  }
+
+  /**
+   * @todo
+   */
+  public function getPlatformIdentifierName(string $original_name, bool $quoted = TRUE): string {
+    if (!$this->hasIdentifier($original_name, IdentifierType::Generic)) {
+      $this->setIdentifier($original_name, $this->resolvePlatformGenericIdentifier($original_name), IdentifierType::Generic, FALSE);
+    }
+    [$start_quote, $end_quote] = $this->identifierQuotes;
+    $identifier = $this->identifiers['identifier'][$original_name][IdentifierType::Generic->value];
+    return $quoted ? $start_quote . $identifier . $end_quote : $identifier;
+  }
+
+  /**
+   * @todo
+   */
+  public function getPlatformDatabaseName(string $original_name, bool $quoted = TRUE): string {
+    $original_name = (string) preg_replace('/[^A-Za-z0-9_]+/', '', $original_name);
+    if (!$this->hasIdentifier($original_name, IdentifierType::Database)) {
+      $this->setIdentifier($original_name, $this->resolvePlatformDatabaseIdentifier($original_name), IdentifierType::Database, FALSE);
+    }
+    [$start_quote, $end_quote] = $this->identifierQuotes;
+    return $quoted ?
+      $start_quote . $this->identifiers['identifier'][$original_name][IdentifierType::Database->value] . $end_quote :
+      $this->identifiers['identifier'][$original_name][IdentifierType::Database->value];
+  }
+
+  /**
+   * @todo
+   */
+  public function getPlatformTableName(string $original_name, bool $prefixed = FALSE, bool $quoted = FALSE): string {
+    $original_name = (string) preg_replace('/[^A-Za-z0-9_.]+/', '', $original_name);
+    if (!$this->hasIdentifier($original_name, IdentifierType::Table)) {
+      $table_name = $this->resolvePlatformTableIdentifier($original_name);
+      $this->setIdentifier($original_name, $table_name, IdentifierType::Table, FALSE);
+      $this->setIdentifier($original_name, $this->getTablePrefix() . $table_name, IdentifierType::PrefixedTable, FALSE);
+    }
+    [$start_quote, $end_quote] = $this->identifierQuotes;
+    $table = $prefixed ? $this->identifiers['identifier'][$original_name][IdentifierType::PrefixedTable->value] : $this->identifiers['identifier'][$original_name][IdentifierType::Table->value];
+    return $quoted ? $start_quote . str_replace(".", "$end_quote.$start_quote", $table) . $end_quote : $table;
+  }
+
+  /**
+   * @todo
+   */
+  public function getPlatformColumnName(string $original_name, bool $quoted = TRUE): string {
+    if ($original_name === '') {
+      return '';
+    }
+    $original_name = (string) preg_replace('/[^A-Za-z0-9_.]+/', '', $original_name);
+    if (!$this->hasIdentifier($original_name, IdentifierType::Column)) {
+      $this->setIdentifier($original_name, $this->resolvePlatformColumnIdentifier($original_name), IdentifierType::Column, FALSE);
+    }
+    // Sometimes fields have the format table_alias.field. In such cases
+    // both identifiers should be quoted, for example, "table_alias"."field".
+    [$start_quote, $end_quote] = $this->identifierQuotes;
+    return $quoted ?
+      $start_quote . str_replace(".", "$end_quote.$start_quote", $this->identifiers['identifier'][$original_name][IdentifierType::Column->value]) . $end_quote :
+      $this->identifiers['identifier'][$original_name][IdentifierType::Column->value];
+  }
+
+  /**
+   * @todo
+   */
+  public function getPlatformAliasName(string $original_name, IdentifierType $type = IdentifierType::Generic, bool $quoted = TRUE): string {
+    $original_name = (string) preg_replace('/[^A-Za-z0-9_]+/', '', $original_name);
+    if ($original_name[0] === $this->identifierQuotes[0]) {
+      $original_name = substr($original_name, 1, -1);
+    }
+    if (!$this->hasIdentifier($original_name, IdentifierType::Alias)) {
+      $this->setIdentifier($original_name, $this->resolvePlatformGenericIdentifier($original_name), $type, TRUE);
+    }
+    [$start_quote, $end_quote] = $this->identifierQuotes;
+    $alias = $this->aliases['identifier'][$original_name][$type->value] ?? $this->identifiers['identifier'][$original_name][0];
+    return $quoted ? $start_quote . $alias . $end_quote : $alias;
+  }
+
+  /**
+   * @todo
+   */
+  protected function resolvePlatformGenericIdentifier(string $identifier): string {
+    return $identifier;
+  }
+
+  /**
+   * @todo
+   */
+  protected function resolvePlatformDatabaseIdentifier(string $identifier): string {
+    return $identifier;
+  }
+
+  /**
+   * @todo
+   */
+  protected function resolvePlatformTableIdentifier(string $identifier): string {
+    return $identifier;
+  }
+
+  /**
+   * @todo
+   */
+  protected function resolvePlatformColumnIdentifier(string $identifier): string {
+    return $identifier;
+  }
+
+  /**
+   * @todo
+   */
+  protected function resolvePlatformAliasIdentifier(string $identifier, int $type = 0): string {
+    return $identifier;
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/Identifier/IdentifierType.php b/core/lib/Drupal/Core/Database/Identifier/IdentifierType.php
new file mode 100644
index 00000000000..d957767fce5
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Identifier/IdentifierType.php
@@ -0,0 +1,25 @@
+<?php
+
+/**
+ * @file
+ * Enum for database identifier types.
+ */
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\Identifier;
+
+/**
+ * Enum for database identifier types.
+ */
+enum IdentifierType: int {
+  case Generic = 0x0;
+  case Database = 0x4;
+  case Sequence = 0x5;
+  case Table = 0x7;
+  case PrefixedTable = 0x8;
+  case Column = 0xC;
+  case Index = 0xD;
+
+  case Alias = 0x100;
+}
diff --git a/core/lib/Drupal/Core/Database/Schema.php b/core/lib/Drupal/Core/Database/Schema.php
index 9153cd9ef8f..4d7d516866e 100644
--- a/core/lib/Drupal/Core/Database/Schema.php
+++ b/core/lib/Drupal/Core/Database/Schema.php
@@ -82,12 +82,16 @@ public function nextPlaceholder() {
    *   A keyed array with information about the schema, table name and prefix.
    */
   protected function getPrefixInfo($table = 'default', $add_prefix = TRUE) {
+    $prefix = $this->connection->getPrefix();
     $info = [
       'schema' => $this->defaultSchema,
-      'prefix' => $this->connection->getPrefix(),
+      'prefix' => $prefix,
     ];
-    if ($add_prefix) {
-      $table = $info['prefix'] . $table;
+    if (strpos($table, '%') !== FALSE) {
+      $table = ($add_prefix ? $prefix : '') . $table;
+    }
+    else {
+      $table = $this->connection->getIdentifierHandler()->getPlatformTableName($table, $add_prefix);
     }
     // If the prefix contains a period in it, then that means the prefix also
     // contains a schema reference in which case we will change the schema key
diff --git a/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapTest.php b/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapTest.php
index cf7cf0a9b84..058b1526fc4 100644
--- a/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapTest.php
+++ b/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapTest.php
@@ -975,8 +975,8 @@ public function testGetQualifiedMapTablePrefix() {
     $qualified_map_table = $this->getIdMap()->getQualifiedMapTableName();
     // The SQLite driver is a special flower. It will prefix tables with
     // PREFIX.TABLE, instead of the standard PREFIXTABLE.
-    // @see \Drupal\sqlite\Driver\Database\sqlite\Connection::__construct()
-    $this->assertEquals('prefix.migrate_map_sql_idmap_test', $qualified_map_table);
+    // @see \Drupal\Core\Database\Driver\sqlite\Connection::__construct()
+    $this->assertEquals('"prefix"."migrate_map_sql_idmap_test"', $qualified_map_table);
   }
 
   /**
diff --git a/core/modules/mysql/src/Driver/Database/mysql/Connection.php b/core/modules/mysql/src/Driver/Database/mysql/Connection.php
index e0b33c856f0..35496e263f5 100644
--- a/core/modules/mysql/src/Driver/Database/mysql/Connection.php
+++ b/core/modules/mysql/src/Driver/Database/mysql/Connection.php
@@ -9,6 +9,7 @@
 use Drupal\Core\Database\DatabaseException;
 use Drupal\Core\Database\DatabaseExceptionWrapper;
 use Drupal\Core\Database\DatabaseNotFoundException;
+use Drupal\Core\Database\Identifier\IdentifierHandler;
 use Drupal\Core\Database\Query\Condition;
 use Drupal\Core\Database\StatementWrapperIterator;
 use Drupal\Core\Database\SupportsTemporaryTablesInterface;
@@ -91,11 +92,6 @@ class Connection extends DatabaseConnection implements SupportsTemporaryTablesIn
    */
   const MIN_MAX_ALLOWED_PACKET = 1024;
 
-  /**
-   * {@inheritdoc}
-   */
-  protected $identifierQuotes = ['"', '"'];
-
   /**
    * {@inheritdoc}
    */
@@ -122,10 +118,10 @@ public function __construct(\PDO $connection, array $connection_options) {
       }
     }
 
-    if ($this->identifierQuotes === ['"', '"'] && !$is_ansi_quotes_mode) {
-      $this->identifierQuotes = ['`', '`'];
-    }
     parent::__construct($connection, $connection_options);
+
+    // Initialize the identifier handler.
+    $this->identifierHandler = new IdentifierHandler($this->connectionOptions['prefix'], $is_ansi_quotes_mode ? ['"', '"'] : ['`', '`']);
   }
 
   /**
diff --git a/core/modules/mysql/tests/src/Unit/ConnectionTest.php b/core/modules/mysql/tests/src/Unit/ConnectionTest.php
index 84200f8aaa0..446d27c5c94 100644
--- a/core/modules/mysql/tests/src/Unit/ConnectionTest.php
+++ b/core/modules/mysql/tests/src/Unit/ConnectionTest.php
@@ -66,7 +66,6 @@ private function createConnection(): Connection {
 
       public function __construct(\PDO $connection) {
         $this->connection = $connection;
-        $this->setPrefix('');
       }
 
     };
diff --git a/core/modules/pgsql/src/Driver/Database/pgsql/Connection.php b/core/modules/pgsql/src/Driver/Database/pgsql/Connection.php
index 3ba9748bcdd..7eef9005eb1 100644
--- a/core/modules/pgsql/src/Driver/Database/pgsql/Connection.php
+++ b/core/modules/pgsql/src/Driver/Database/pgsql/Connection.php
@@ -7,6 +7,7 @@
 use Drupal\Core\Database\DatabaseAccessDeniedException;
 use Drupal\Core\Database\DatabaseNotFoundException;
 use Drupal\Core\Database\ExceptionHandler;
+use Drupal\Core\Database\Identifier\IdentifierHandler;
 use Drupal\Core\Database\Query\Condition;
 use Drupal\Core\Database\StatementInterface;
 use Drupal\Core\Database\StatementWrapperIterator;
@@ -67,11 +68,6 @@ class Connection extends DatabaseConnection implements SupportsTemporaryTablesIn
    */
   protected $transactionalDDLSupport = TRUE;
 
-  /**
-   * {@inheritdoc}
-   */
-  protected $identifierQuotes = ['"', '"'];
-
   /**
    * Constructs a connection object.
    */
@@ -95,26 +91,9 @@ public function __construct(\PDO $connection, array $connection_options) {
     if (isset($connection_options['init_commands'])) {
       $this->connection->exec(implode('; ', $connection_options['init_commands']));
     }
-  }
 
-  /**
-   * {@inheritdoc}
-   */
-  protected function setPrefix($prefix) {
-    assert(is_string($prefix), 'The \'$prefix\' argument to ' . __METHOD__ . '() must be a string');
-    $this->prefix = $prefix;
-
-    // Add the schema name if it is not set to public, otherwise it will use the
-    // default schema name.
-    $quoted_schema = '';
-    if (isset($this->connectionOptions['schema']) && ($this->connectionOptions['schema'] !== 'public')) {
-      $quoted_schema = $this->identifierQuotes[0] . $this->connectionOptions['schema'] . $this->identifierQuotes[1] . '.';
-    }
-
-    $this->tablePlaceholderReplacements = [
-      $quoted_schema . $this->identifierQuotes[0] . str_replace('.', $this->identifierQuotes[1] . '.' . $this->identifierQuotes[0], $prefix),
-      $this->identifierQuotes[1],
-    ];
+    // Initialize the identifier handler.
+    $this->identifierHandler = new IdentifierHandler($connection_options['prefix']);
   }
 
   /**
@@ -346,7 +325,7 @@ public function getFullQualifiedTableName($table) {
 
     // The fully qualified table name in PostgreSQL is in the form of
     // <database>.<schema>.<table>.
-    return $options['database'] . '.' . $schema . '.' . $this->getPrefix() . $table;
+    return $options['database'] . '.' . $schema . '.' . $this->identifierHandler->getPlatformTableName($table, TRUE, FALSE);
   }
 
   /**
diff --git a/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php b/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php
index 0c14efb20f7..8d7352a8592 100644
--- a/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php
+++ b/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php
@@ -6,6 +6,7 @@
 use Drupal\Core\Database\DatabaseExceptionWrapper;
 use Drupal\Core\Database\DatabaseNotFoundException;
 use Drupal\Core\Database\ExceptionHandler;
+use Drupal\Core\Database\Identifier\IdentifierHandler;
 use Drupal\Core\Database\Query\Condition;
 use Drupal\Core\Database\StatementInterface;
 use Drupal\Core\Database\SupportsTemporaryTablesInterface;
@@ -73,11 +74,6 @@ class Connection extends DatabaseConnection implements SupportsTemporaryTablesIn
    */
   protected $transactionalDDLSupport = TRUE;
 
-  /**
-   * {@inheritdoc}
-   */
-  protected $identifierQuotes = ['"', '"'];
-
   /**
    * Constructs a \Drupal\sqlite\Driver\Database\sqlite\Connection object.
    */
@@ -93,8 +89,8 @@ public function __construct(\PDO $connection, array $connection_options) {
       $prefix .= '.';
     }
 
-    // Regenerate the prefix.
-    $this->setPrefix($prefix);
+    // Initialize the identifier handler.
+    $this->identifierHandler = new IdentifierHandler($prefix);
   }
 
   /**
@@ -459,10 +455,8 @@ public function nextId($existing_id = 0) {
    * {@inheritdoc}
    */
   public function getFullQualifiedTableName($table) {
-    $prefix = $this->getPrefix();
-
     // Don't include the SQLite database file name as part of the table name.
-    return $prefix . $table;
+    return $this->identifierHandler->getPlatformTableName($table, TRUE, TRUE);
   }
 
   /**
diff --git a/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php b/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php
index 28670b71753..fa6e0c55c1c 100644
--- a/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php
@@ -17,53 +17,6 @@
  */
 class ConnectionTest extends UnitTestCase {
 
-  /**
-   * Data provider for testPrefixRoundTrip().
-   *
-   * @return array
-   *   Array of arrays with the following elements:
-   *   - Arguments to pass to Connection::setPrefix().
-   *   - Expected result from Connection::tablePrefix().
-   */
-  public function providerPrefixRoundTrip() {
-    return [
-      [
-        [
-          '' => 'test_',
-        ],
-        'test_',
-      ],
-      [
-        [
-          'fooTable' => 'foo_',
-          'barTable' => 'foo_',
-        ],
-        'foo_',
-      ],
-    ];
-  }
-
-  /**
-   * Exercise setPrefix() and tablePrefix().
-   *
-   * @dataProvider providerPrefixRoundTrip
-   */
-  public function testPrefixRoundTrip($expected, $prefix_info) {
-    $mock_pdo = $this->createMock('Drupal\Tests\Core\Database\Stub\StubPDO');
-    $connection = new StubConnection($mock_pdo, []);
-
-    // setPrefix() is protected, so we make it accessible with reflection.
-    $reflection = new \ReflectionClass('Drupal\Tests\Core\Database\Stub\StubConnection');
-    $set_prefix = $reflection->getMethod('setPrefix');
-
-    // Set the prefix data.
-    $set_prefix->invokeArgs($connection, [$prefix_info]);
-    // Check the round-trip.
-    foreach ($expected as $table => $prefix) {
-      $this->assertEquals($prefix, $connection->getPrefix());
-    }
-  }
-
   /**
    * Data provider for testPrefixTables().
    *
@@ -574,26 +527,6 @@ public function testEscapeDatabase($expected, $name, array $identifier_quote = [
     $this->assertEquals($expected, $connection->escapeDatabase($name));
   }
 
-  /**
-   * @covers ::__construct
-   */
-  public function testIdentifierQuotesAssertCount() {
-    $this->expectException(\AssertionError::class);
-    $this->expectExceptionMessage('\Drupal\Core\Database\Connection::$identifierQuotes must contain 2 string values');
-    $mock_pdo = $this->createMock(StubPDO::class);
-    new StubConnection($mock_pdo, [], ['"']);
-  }
-
-  /**
-   * @covers ::__construct
-   */
-  public function testIdentifierQuotesAssertString() {
-    $this->expectException(\AssertionError::class);
-    $this->expectExceptionMessage('\Drupal\Core\Database\Connection::$identifierQuotes must contain 2 string values');
-    $mock_pdo = $this->createMock(StubPDO::class);
-    new StubConnection($mock_pdo, [], [0, '1']);
-  }
-
   /**
    * @covers ::__construct
    */
diff --git a/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php b/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php
index 2ce07e0646b..701a4df045a 100644
--- a/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php
+++ b/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php
@@ -4,6 +4,7 @@
 
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\ExceptionHandler;
+use Drupal\Core\Database\Identifier\IdentifierHandler;
 use Drupal\Core\Database\Log;
 use Drupal\Core\Database\Query\Delete;
 use Drupal\Core\Database\Query\Insert;
@@ -46,8 +47,9 @@ class StubConnection extends Connection {
    *   The identifier quote characters. Defaults to an empty strings.
    */
   public function __construct(\PDO $connection, array $connection_options, $identifier_quotes = ['', '']) {
-    $this->identifierQuotes = $identifier_quotes;
     parent::__construct($connection, $connection_options);
+    // Initialize the identifier handler.
+    $this->identifierHandler = new IdentifierHandler($connection_options['prefix'] ?? '', $identifier_quotes);
   }
 
   /**
