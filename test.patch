diff --git a/core/modules/comment/tests/src/Unit/CommentLinkBuilderTest.php b/core/modules/comment/tests/src/Unit/CommentLinkBuilderTest.php
index 1b00a4ff02..70e27e8315 100644
--- a/core/modules/comment/tests/src/Unit/CommentLinkBuilderTest.php
+++ b/core/modules/comment/tests/src/Unit/CommentLinkBuilderTest.php
@@ -5,10 +5,13 @@
 use Drupal\comment\CommentLinkBuilder;
 use Drupal\comment\Plugin\Field\FieldType\CommentItemInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Url;
 use Drupal\node\NodeInterface;
 use Drupal\Tests\Traits\Core\GeneratePermutationsTrait;
 use Drupal\Tests\UnitTestCase;
+use Drupal\TestTools\DataProviderProphets;
+use Prophecy\Argument;
 
 /**
  * @coversDefaultClass \Drupal\comment\CommentLinkBuilder
@@ -55,10 +58,8 @@ class CommentLinkBuilderTest extends UnitTestCase {
 
   /**
    * Timestamp used in test.
-   *
-   * @var int
    */
-  protected $timestamp;
+  protected static int $timestamp;
 
   /**
    * @var \Drupal\comment\CommentLinkBuilderInterface
@@ -159,11 +160,11 @@ public function testCommentLinkBuilder(NodeInterface $node, $context, $has_acces
   /**
    * Data provider for ::testCommentLinkBuilder.
    */
-  public function getLinkCombinations() {
+  public static function getLinkCombinations() {
     $cases = [];
     // No links should be created if the entity doesn't have the field.
     $cases[] = [
-      $this->getMockNode(FALSE, CommentItemInterface::OPEN, CommentItemInterface::FORM_BELOW, 1),
+      static::getMockNode(FALSE, CommentItemInterface::OPEN, CommentItemInterface::FORM_BELOW, 1),
       ['view_mode' => 'teaser'],
       TRUE,
       TRUE,
@@ -174,7 +175,7 @@ public function getLinkCombinations() {
     foreach (['search_result', 'search_index', 'print'] as $view_mode) {
       // Nothing should be output in these view modes.
       $cases[] = [
-        $this->getMockNode(TRUE, CommentItemInterface::OPEN, CommentItemInterface::FORM_BELOW, 1),
+        static::getMockNode(TRUE, CommentItemInterface::OPEN, CommentItemInterface::FORM_BELOW, 1),
         ['view_mode' => $view_mode],
         TRUE,
         TRUE,
@@ -200,10 +201,10 @@ public function getLinkCombinations() {
         'teaser', 'rss', 'full',
       ],
     ];
-    $permutations = $this->generatePermutations($combinations);
+    $permutations = static::generatePermutations($combinations);
     foreach ($permutations as $combination) {
       $case = [
-        $this->getMockNode(TRUE, $combination['comments'], $combination['form_location'], $combination['comment_count']),
+        static::getMockNode(TRUE, $combination['comments'], $combination['form_location'], $combination['comment_count']),
         ['view_mode' => $combination['view_mode']],
         $combination['has_access_comments'],
         $combination['history_exists'],
@@ -267,56 +268,34 @@ public function getLinkCombinations() {
    * @param int $comment_count
    *   Number of comments against the field.
    *
-   * @return \Drupal\node\NodeInterface|\PHPUnit\Framework\MockObject\MockObject
-   *   Mock node for testing.
+   * @return \Drupal\node\NodeInterface
+   *   Mocked node for testing.
    */
-  protected function getMockNode($has_field, $comment_status, $form_location, $comment_count) {
-    $node = $this->createMock('\Drupal\node\NodeInterface');
-    $node->expects($this->any())
-      ->method('hasField')
-      ->willReturn($has_field);
+  protected static function getMockNode($has_field, $comment_status, $form_location, $comment_count) {
+    $prophet = DataProviderProphets::prophet(static::class);
 
-    if (empty($this->timestamp)) {
-      $this->timestamp = time();
+    if (empty(static::$timestamp)) {
+      static::$timestamp = time();
     }
     $field_item = (object) [
       'status' => $comment_status,
       'comment_count' => $comment_count,
-      'last_comment_timestamp' => $this->timestamp,
+      'last_comment_timestamp' => static::$timestamp,
     ];
-    $node->expects($this->any())
-      ->method('get')
-      ->with('comment')
-      ->willReturn($field_item);
-
-    $field_definition = $this->createMock('\Drupal\Core\Field\FieldDefinitionInterface');
-    $field_definition->expects($this->any())
-      ->method('getSetting')
-      ->with('form_location')
-      ->willReturn($form_location);
-    $node->expects($this->any())
-      ->method('getFieldDefinition')
-      ->with('comment')
-      ->willReturn($field_definition);
-
-    $node->expects($this->any())
-      ->method('language')
-      ->willReturn('und');
-
-    $node->expects($this->any())
-      ->method('getEntityTypeId')
-      ->willReturn('node');
 
-    $node->expects($this->any())
-      ->method('id')
-      ->willReturn(1);
+    $field_definition = $prophet->prophesize(FieldDefinitionInterface::class);
+    $field_definition->getSetting('form_location')->willReturn($form_location);
 
-    $url = Url::fromRoute('node.view');
-    $node->expects($this->any())
-      ->method('toUrl')
-      ->willReturn($url);
+    $node = $prophet->prophesize(NodeInterface::class);
+    $node->hasField(Argument::any())->willReturn($has_field);
+    $node->get('comment')->willReturn($field_item);
+    $node->getFieldDefinition('comment')->willReturn($field_definition->reveal());
+    $node->language()->willReturn('und');
+    $node->getEntityTypeId()->willReturn('node');
+    $node->id()->willReturn(1);
+    $node->toUrl()->willReturn(Url::fromRoute('node.view'));
 
-    return $node;
+    return $node->reveal();
   }
 
 }
@@ -325,7 +304,7 @@ protected function getMockNode($has_field, $comment_status, $form_location, $com
 
 if (!function_exists('history_read')) {
 
-  function history_read() {
+  function history_read($nid) {
     return 0;
   }
 
diff --git a/core/modules/config_translation/tests/src/Unit/ConfigMapperManagerTest.php b/core/modules/config_translation/tests/src/Unit/ConfigMapperManagerTest.php
index 6aad4e192d..ec3d0578ec 100644
--- a/core/modules/config_translation/tests/src/Unit/ConfigMapperManagerTest.php
+++ b/core/modules/config_translation/tests/src/Unit/ConfigMapperManagerTest.php
@@ -177,7 +177,7 @@ protected static function getNestedElement(array $elements) {
     // \Drupal\Core\Config\Schema\ArrayElement, but that is abstract, so we
     // need to mock one of the subclasses of it.
     $nested_element = (new Prophet())->prophesize(Mapping::class);
-    $nested_element->getIterator()->shouldBeCalledTimes(1)->willReturn(new \ArrayIterator($elements));
+    $nested_element->getIterator()->shouldBeCalledOnce()->willReturn(new \ArrayIterator($elements));
     return $nested_element->reveal();
   }
 
diff --git a/core/modules/contact/tests/src/Unit/MailHandlerTest.php b/core/modules/contact/tests/src/Unit/MailHandlerTest.php
index 1b3d34784b..18b1685668 100644
--- a/core/modules/contact/tests/src/Unit/MailHandlerTest.php
+++ b/core/modules/contact/tests/src/Unit/MailHandlerTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\contact\Unit;
 
+use Drupal\contact\ContactFormInterface;
 use Drupal\contact\MailHandler;
 use Drupal\contact\MailHandlerException;
 use Drupal\contact\MessageInterface;
@@ -9,7 +10,9 @@
 use Drupal\Core\Language\Language;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Tests\UnitTestCase;
+use Drupal\TestTools\DataProviderProphets;
 use Drupal\user\Entity\User;
+use Drupal\user\UserInterface;
 
 /**
  * @coversDefaultClass \Drupal\contact\MailHandler
@@ -157,7 +160,7 @@ function ($module, $key, $to, $langcode, $params, $from) use (&$results) {
   /**
    * Data provider for ::testSendMailMessages.
    */
-  public function getSendMailMessages() {
+  public static function getSendMailMessages() {
     $data = [];
     $recipients = ['admin@drupal.org', 'user@drupal.org'];
     $default_result = [
@@ -169,8 +172,8 @@ public function getSendMailMessages() {
       'from' => 'anonymous@drupal.org',
     ];
     $results = [];
-    $message = $this->getAnonymousMockMessage($recipients, '');
-    $sender = $this->getMockSender();
+    $message = static::getAnonymousMockMessage($recipients, '');
+    $sender = static::getMockSender();
     $result = [
       'key' => 'page_mail',
       'params' => [
@@ -183,8 +186,8 @@ public function getSendMailMessages() {
     $data[] = [$message, $sender, $results];
 
     $results = [];
-    $message = $this->getAnonymousMockMessage($recipients, 'reply');
-    $sender = $this->getMockSender();
+    $message = static::getAnonymousMockMessage($recipients, 'reply');
+    $sender = static::getMockSender();
     $result = [
       'key' => 'page_mail',
       'params' => [
@@ -201,8 +204,8 @@ public function getSendMailMessages() {
     $data[] = [$message, $sender, $results];
 
     $results = [];
-    $message = $this->getAnonymousMockMessage($recipients, '', TRUE);
-    $sender = $this->getMockSender();
+    $message = static::getAnonymousMockMessage($recipients, '', TRUE);
+    $sender = static::getMockSender();
     $result = [
       'key' => 'page_mail',
       'params' => [
@@ -218,8 +221,8 @@ public function getSendMailMessages() {
     $data[] = [$message, $sender, $results];
 
     $results = [];
-    $message = $this->getAnonymousMockMessage($recipients, 'reply', TRUE);
-    $sender = $this->getMockSender();
+    $message = static::getAnonymousMockMessage($recipients, 'reply', TRUE);
+    $sender = static::getMockSender();
     $result = [
       'key' => 'page_mail',
       'params' => [
@@ -239,8 +242,8 @@ public function getSendMailMessages() {
 
     // For authenticated user.
     $results = [];
-    $message = $this->getAuthenticatedMockMessage();
-    $sender = $this->getMockSender(FALSE, 'user@drupal.org');
+    $message = static::getAuthenticatedMockMessage();
+    $sender = static::getMockSender(FALSE, 'user@drupal.org');
     $result = [
       'module' => 'contact',
       'key' => 'user_mail',
@@ -257,8 +260,8 @@ public function getSendMailMessages() {
     $data[] = [$message, $sender, $results];
 
     $results = [];
-    $message = $this->getAuthenticatedMockMessage(TRUE);
-    $sender = $this->getMockSender(FALSE, 'user@drupal.org');
+    $message = static::getAuthenticatedMockMessage(TRUE);
+    $sender = static::getMockSender(FALSE, 'user@drupal.org');
     $result = [
       'module' => 'contact',
       'key' => 'user_mail',
@@ -289,31 +292,25 @@ public function getSendMailMessages() {
    * @param string $mail_address
    *   The mail address of the user.
    *
-   * @return \Drupal\Core\Session\AccountInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @return \Drupal\Core\Session\AccountInterface
    *   Mock sender for testing.
    */
-  protected function getMockSender($anonymous = TRUE, $mail_address = 'anonymous@drupal.org') {
-    $sender = $this->createMock(User::class);
-    $sender->expects($this->once())
-      ->method('isAnonymous')
-      ->willReturn($anonymous);
-    $sender->expects($this->any())
-      ->method('getEmail')
-      ->willReturn($mail_address);
-    $sender->expects($this->any())
-      ->method('getDisplayName')
-      ->willReturn('user');
+  protected static function getMockSender($anonymous = TRUE, $mail_address = 'anonymous@drupal.org') {
+    $sender = DataProviderProphets::prophet(static::class)->prophesize(User::class);
+    $sender->getFieldDefinitions()->shouldBeCalled();
+    $sender->getAccountName()->shouldBeCalled();
+    $sender->isAnonymous()->shouldBeCalledOnce()->willReturn($anonymous);
+    $sender->getEmail()->willReturn($mail_address);
+    $sender->getDisplayName()->willReturn('user');
     // User ID 1 has special implications, use 3 instead.
-    $sender->expects($this->any())
-      ->method('id')
-      ->willReturn($anonymous ? 0 : 3);
+    $sender->id()->willReturn($anonymous ? 0 : 3);
     if ($anonymous) {
       // Anonymous user values set in params include updated values for name and
       // mail.
       $sender->name = 'Anonymous (not verified)';
       $sender->mail = 'anonymous@drupal.org';
     }
-    return $sender;
+    return $sender->reveal();
   }
 
   /**
@@ -326,27 +323,17 @@ protected function getMockSender($anonymous = TRUE, $mail_address = 'anonymous@d
    * @param bool $copy_sender
    *   TRUE if a copy should be sent, FALSE if not.
    *
-   * @return \Drupal\contact\MessageInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @return \Drupal\contact\MessageInterface
    *   Mock message for testing.
    */
-  protected function getAnonymousMockMessage($recipients, $auto_reply, $copy_sender = FALSE) {
-    $message = $this->createMock('\Drupal\contact\MessageInterface');
-    $message->expects($this->any())
-      ->method('getSenderName')
-      ->willReturn('Anonymous');
-    $message->expects($this->once())
-      ->method('getSenderMail')
-      ->willReturn('anonymous@drupal.org');
-    $message->expects($this->any())
-      ->method('isPersonal')
-      ->willReturn(FALSE);
-    $message->expects($this->once())
-      ->method('copySender')
-      ->willReturn($copy_sender);
-    $message->expects($this->any())
-      ->method('getContactForm')
-      ->willReturn($this->getMockContactForm($recipients, $auto_reply));
-    return $message;
+  protected static function getAnonymousMockMessage($recipients, $auto_reply, $copy_sender = FALSE) {
+    $message = DataProviderProphets::prophet(static::class)->prophesize(MessageInterface::class);
+    $message->getSenderName()->willReturn('Anonymous');
+    $message->getSenderMail()->shouldBeCalledOnce()->willReturn('anonymous@drupal.org');
+    $message->isPersonal()->willReturn(FALSE);
+    $message->copySender()->shouldBeCalledOnce()->willReturn($copy_sender);
+    $message->getContactForm()->willReturn(static::getMockContactForm($recipients, $auto_reply));
+    return $message->reveal();
   }
 
   /**
@@ -355,34 +342,22 @@ protected function getAnonymousMockMessage($recipients, $auto_reply, $copy_sende
    * @param bool $copy_sender
    *   TRUE if a copy should be sent, FALSE if not.
    *
-   * @return \Drupal\contact\MessageInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @return \Drupal\contact\MessageInterface
    *   Mock message for testing.
    */
-  protected function getAuthenticatedMockMessage($copy_sender = FALSE) {
-    $message = $this->createMock('\Drupal\contact\MessageInterface');
-    $message->expects($this->any())
-      ->method('isPersonal')
-      ->willReturn(TRUE);
-    $message->expects($this->once())
-      ->method('copySender')
-      ->willReturn($copy_sender);
-    $recipient = $this->createMock('\Drupal\user\UserInterface');
-    $recipient->expects($this->once())
-      ->method('getEmail')
-      ->willReturn('user2@drupal.org');
-    $recipient->expects($this->any())
-      ->method('getDisplayName')
-      ->willReturn('user2');
-    $recipient->expects($this->once())
-      ->method('getPreferredLangcode')
-      ->willReturn('en');
-    $message->expects($this->any())
-      ->method('getPersonalRecipient')
-      ->willReturn($recipient);
-    $message->expects($this->any())
-      ->method('getContactForm')
-      ->willReturn($this->getMockContactForm('user2@drupal.org', FALSE));
-    return $message;
+  protected static function getAuthenticatedMockMessage($copy_sender = FALSE) {
+    $prophet = DataProviderProphets::prophet(static::class);
+    $message = $prophet->prophesize(MessageInterface::class);
+    $message->isPersonal()->willReturn(TRUE);
+    $message->copySender()->shouldBeCalledOnce()->willReturn($copy_sender);
+    $recipient = $prophet->prophesize(UserInterface::class);
+    $recipient->getAccountName()->shouldBeCalled();
+    $recipient->getEmail()->shouldBeCalledOnce()->willReturn('user2@drupal.org');
+    $recipient->getDisplayName()->willReturn('user2');
+    $recipient->getPreferredLangcode()->shouldBeCalledOnce()->willReturn('en');
+    $message->getPersonalRecipient()->willReturn($recipient->reveal());
+    $message->getContactForm()->willReturn(static::getMockContactForm('user2@drupal.org', FALSE));
+    return $message->reveal();
   }
 
   /**
@@ -393,19 +368,16 @@ protected function getAuthenticatedMockMessage($copy_sender = FALSE) {
    * @param string $auto_reply
    *   An auto-reply message to send to the message author.
    *
-   * @return \Drupal\contact\ContactFormInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @return \Drupal\contact\ContactFormInterface
    *   Mock message for testing.
    */
-  protected function getMockContactForm($recipients, $auto_reply) {
-    $contact_form = $this->createMock('\Drupal\contact\ContactFormInterface');
-    $contact_form->expects($this->once())
-      ->method('getRecipients')
-      ->willReturn($recipients);
-    $contact_form->expects($this->once())
-      ->method('getReply')
-      ->willReturn($auto_reply);
-
-    return $contact_form;
+  protected static function getMockContactForm($recipients, $auto_reply) {
+dump($recipients, $auto_reply);
+    $contact_form = DataProviderProphets::prophet(static::class)->prophesize(ContactFormInterface::class);
+    $contact_form->label()->shouldBeCalled();
+    $contact_form->getRecipients()->shouldBeCalledOnce()->willReturn($recipients);
+    $contact_form->getReply()->shouldBeCalledOnce()->willReturn($auto_reply);
+    return $contact_form->reveal();
   }
 
 }
diff --git a/core/phpstan-baseline.neon b/core/phpstan-baseline.neon
index d83b67c6b6..d5f2909433 100644
--- a/core/phpstan-baseline.neon
+++ b/core/phpstan-baseline.neon
@@ -845,16 +845,6 @@ parameters:
 			count: 1
 			path: modules/comment/src/CommentForm.php
 
-		-
-			message: "#^Function Drupal\\\\comment\\\\history_read invoked with 1 parameter, 0 required\\.$#"
-			count: 1
-			path: modules/comment/src/CommentLinkBuilder.php
-
-		-
-			message: "#^Function Drupal\\\\comment\\\\history_read invoked with 1 parameter, 0 required\\.$#"
-			count: 1
-			path: modules/comment/src/CommentManager.php
-
 		-
 			message: "#^Call to deprecated constant REQUEST_TIME\\: Deprecated in drupal\\:8\\.3\\.0 and is removed from drupal\\:11\\.0\\.0\\. Use \\\\Drupal\\:\\:time\\(\\)\\-\\>getRequestTime\\(\\); $#"
 			count: 2
diff --git a/core/tests/Drupal/TestTools/DataProviderProphets.php b/core/tests/Drupal/TestTools/DataProviderProphets.php
new file mode 100644
index 0000000000..464ed6198d
--- /dev/null
+++ b/core/tests/Drupal/TestTools/DataProviderProphets.php
@@ -0,0 +1,24 @@
+<?php
+
+namespace Drupal\TestTools;
+
+use Prophecy\Prophet;
+
+abstract class DataProviderProphets {
+
+  private static array $prophets = [];
+
+  public static function prophet(string $className): Prophet {
+    if (!isset(static::$prophets[$className])) {
+      static::$prophets[$className] = new Prophet();
+    }
+    return static::$prophets[$className];
+  }
+
+  public static function checkPredictions(string $className): void {
+    if (isset(static::$prophets[$className])) {
+      static::$prophets[$className]->checkPredictions();
+    }
+  }
+
+}
diff --git a/core/tests/Drupal/Tests/Traits/Core/GeneratePermutationsTrait.php b/core/tests/Drupal/Tests/Traits/Core/GeneratePermutationsTrait.php
index 6e222cb656..9ceafc3ae3 100644
--- a/core/tests/Drupal/Tests/Traits/Core/GeneratePermutationsTrait.php
+++ b/core/tests/Drupal/Tests/Traits/Core/GeneratePermutationsTrait.php
@@ -19,7 +19,7 @@ trait GeneratePermutationsTrait {
    *   'one' => [0, 1],
    *   'two' => [2, 3],
    * ];
-   * $permutations = $this->generatePermutations($parameters);
+   * $permutations = static::generatePermutations($parameters);
    * // Result:
    * $permutations == [
    *   ['one' => 0, 'two' => 2],
diff --git a/core/tests/Drupal/Tests/UnitTestCase.php b/core/tests/Drupal/Tests/UnitTestCase.php
index 0e1773deac..77104749fa 100644
--- a/core/tests/Drupal/Tests/UnitTestCase.php
+++ b/core/tests/Drupal/Tests/UnitTestCase.php
@@ -9,6 +9,7 @@
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\StringTranslation\PluralTranslatableMarkup;
 use Drupal\Tests\Traits\PhpUnitWarnings;
+use Drupal\TestTools\DataProviderProphets;
 use Drupal\TestTools\TestVarDumper;
 use PHPUnit\Framework\TestCase;
 use Prophecy\PhpUnit\ProphecyTrait;
@@ -46,6 +47,14 @@ public static function setUpBeforeClass(): void {
     VarDumper::setHandler(TestVarDumper::class . '::cliHandler');
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public static function tearDownAfterClass(): void {
+    DataProviderProphets::checkPredictions(static::class);
+    parent::tearDownAfterClass();
+  }
+
   /**
    * {@inheritdoc}
    */
