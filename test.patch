diff --git a/core/modules/editor/tests/src/Functional/EditorLoadingTest.php b/core/modules/editor/tests/src/Functional/EditorLoadingTest.php
index 5455251d..435dd189 100644
--- a/core/modules/editor/tests/src/Functional/EditorLoadingTest.php
+++ b/core/modules/editor/tests/src/Functional/EditorLoadingTest.php
@@ -176,8 +176,9 @@ public function testLoading() {
     $this->assertTrue($editor_js_present, 'Text Editor JavaScript is present.');
     $this->assertCount(1, $body, 'A body field exists.');
     $this->assertCount(1, $format_selector, 'A single text format selector exists on the page.');
-    $specific_format_selector = $this->xpath('//select[contains(@class, "filter-list") and @data-editor-for="edit-body-0-value"]');
-    $this->assertCount(1, $specific_format_selector, 'A single text format selector exists on the page and has a "data-editor-for" attribute with the correct value.');
+    // Verify that single text format selector exists on the page and has a
+    // "data-editor-for" attribute with the correct value.
+    $this->assertSession()->elementExists('xpath', '//select[contains(@class, "filter-list") and @data-editor-for="edit-body-0-value"]');
 
     // Load the editor image dialog form and make sure it does not fatal.
     $this->drupalGet('editor/dialog/image/full_html');
@@ -214,8 +215,10 @@ public function testLoading() {
     $this->assertTrue($editor_js_present, 'Text Editor JavaScript is present.');
     $this->assertCount(1, $body, 'A body field exists.');
     $this->assertCount(0, $format_selector, 'No text format selector exists on the page.');
-    $hidden_input = $this->xpath('//input[@type="hidden" and @value="plain_text" and @data-editor-for="edit-body-0-value"]');
-    $this->assertCount(1, $hidden_input, 'A single text format hidden input exists on the page and has a "data-editor-for" attribute with the correct value.');
+    // Verify that a single text format hidden input exists on the page and has
+    // a "data-editor-for" attribute with the correct value.
+    $hidden_input = $this->assertSession()->hiddenFieldValueEquals('body[0][format]', 'plain_text');
+    $this->assertSame('edit-body-0-value', $hidden_input->getAttribute('data-editor-for'));
 
     // Create an "article" node that uses the full_html text format, then try
     // to let the untrusted user edit it.
@@ -236,8 +239,8 @@ public function testLoading() {
     $this->assertCount(1, $body, 'A body field exists.');
     $this->assertFieldByXPath('//textarea[@id="edit-body-0-value" and @disabled="disabled"]', t('This field has been disabled because you do not have sufficient permissions to edit it.'), 'Text format access denied message found.');
     $this->assertCount(0, $format_selector, 'No text format selector exists on the page.');
-    $hidden_input = $this->xpath('//input[@type="hidden" and contains(@class, "editor")]');
-    $this->assertCount(0, $hidden_input, 'A single text format hidden input does not exist on the page.');
+    // Verify that no single text format hidden input exists on the page.
+    $this->assertSession()->elementNotExists('xpath', '//input[@type="hidden" and contains(@class, "editor")]');
   }
 
   /**
@@ -274,8 +277,10 @@ public function testSupportedElementTypes() {
     $this->assertTrue($editor_js_present, 'Text Editor JavaScript is present.');
     $this->assertCount(1, $field, 'A text field exists.');
     $this->assertCount(1, $format_selector, 'A single text format selector exists on the page.');
-    $specific_format_selector = $this->xpath('//select[contains(@class, "filter-list") and contains(@class, "editor") and @data-editor-for="edit-field-text-0-value"]');
-    $this->assertCount(1, $specific_format_selector, 'A single text format selector exists on the page and has the "editor" class and a "data-editor-for" attribute with the correct value.');
+    // Verify that a single text format selector exists on the page and that
+    // it has the "editor" class and a "data-editor-for" attribute with the
+    // correct value.'
+    $this->assertSession()->elementExists('xpath', '//select[contains(@class, "filter-list") and contains(@class, "editor") and @data-editor-for="edit-field-text-0-value"]');
 
     // Associate the trex text editor with the "Full HTML" text format.
     $editor->delete();
@@ -290,8 +295,9 @@ public function testSupportedElementTypes() {
     $this->assertFalse($editor_js_present, 'Text Editor JavaScript is not present.');
     $this->assertCount(1, $field, 'A text field exists.');
     $this->assertCount(1, $format_selector, 'A single text format selector exists on the page.');
-    $specific_format_selector = $this->xpath('//select[contains(@class, "filter-list") and contains(@class, "editor") and @data-editor-for="edit-field-text-0-value"]');
-    $this->assertCount(0, $specific_format_selector, 'No text format selector exists on the page with the "editor" class and a "data-editor-for" attribute with the expected value.');
+    // Verify that no text format selector exists on the page with the "editor"
+    // class and a "data-editor-for" attribute with the expected value.
+    $this->assertSession()->elementNotExists('xpath', '//select[contains(@class, "filter-list") and contains(@class, "editor") and @data-editor-for="edit-field-text-0-value"]');
   }
 
   protected function getThingsToCheck($field_name, $type = 'textarea') {
diff --git a/core/modules/editor/tests/src/Functional/EditorSecurityTest.php b/core/modules/editor/tests/src/Functional/EditorSecurityTest.php
index 95b1ffc8..babf947a 100644
--- a/core/modules/editor/tests/src/Functional/EditorSecurityTest.php
+++ b/core/modules/editor/tests/src/Functional/EditorSecurityTest.php
@@ -283,8 +283,8 @@ public function testInitialSecurity() {
       foreach ($case['users'] as $account) {
         $this->drupalLogin($account);
         $this->drupalGet('node/' . $case['node_id'] . '/edit');
-        $dom_node = $this->xpath('//textarea[@id="edit-body-0-value"]');
-        $this->assertIdentical($case['value'], $dom_node[0]->getText(), 'The value was correctly filtered for XSS attack vectors.');
+        // Verify that the value was correctly filtered for XSS attack vectors.
+        $this->assertSession()->fieldValueEquals("edit-body-0-value", $case['value']);
       }
     }
   }
@@ -396,9 +396,8 @@ public function testSwitchingSecurity() {
       $this->drupalGet('node/' . $case['node_id'] . '/edit');
 
       // Verify data- attributes.
-      $dom_node = $this->xpath('//textarea[@id="edit-body-0-value"]');
-      $this->assertIdentical(self::$sampleContent, $dom_node[0]->getAttribute('data-editor-value-original'), 'The data-editor-value-original attribute is correctly set.');
-      $this->assertIdentical('false', (string) $dom_node[0]->getAttribute('data-editor-value-is-changed'), 'The data-editor-value-is-changed attribute is correctly set.');
+      $this->assertSession()->elementAttributeContains('xpath', '//textarea[@id="edit-body-0-value"]', 'data-editor-value-original', self::$sampleContent);
+      $this->assertSession()->elementAttributeContains('xpath', '//textarea[@id="edit-body-0-value"]', 'data-editor-value-is-changed', 'false');
 
       // Switch to every other text format/editor and verify the results.
       foreach ($case['switch_to'] as $format => $expected_filtered_value) {
@@ -432,17 +431,17 @@ public function testEditorXssFilterOverride() {
     // First: the Standard text editor XSS filter.
     $this->drupalLogin($this->normalUser);
     $this->drupalGet('node/2/edit');
-    $dom_node = $this->xpath('//textarea[@id="edit-body-0-value"]');
-    $this->assertIdentical(self::$sampleContentSecured, $dom_node[0]->getText(), 'The value was filtered by the Standard text editor XSS filter.');
+    // The value was filtered by the Standard text editor XSS filter.
+    $this->assertSession()->fieldValueEquals("edit-body-0-value", self::$sampleContentSecured);
 
     // Enable editor_test.module's hook_editor_xss_filter_alter() implementation
     // to alter the text editor XSS filter class being used.
     \Drupal::state()->set('editor_test_editor_xss_filter_alter_enabled', TRUE);
 
-    // First: the Insecure text editor XSS filter.
+    // Check that the value gets filtered by the Insecure text editor XSS
+    // filter.
     $this->drupalGet('node/2/edit');
-    $dom_node = $this->xpath('//textarea[@id="edit-body-0-value"]');
-    $this->assertIdentical(self::$sampleContent, $dom_node[0]->getText(), 'The value was filtered by the Insecure text editor XSS filter.');
+    $this->assertSession()->fieldValueEquals("edit-body-0-value", self::$sampleContent);
   }
 
 }
