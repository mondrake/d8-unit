diff --git a/core/core.services.yml b/core/core.services.yml
index 62497cda5b..6b0f927928 100644
--- a/core/core.services.yml
+++ b/core/core.services.yml
@@ -1394,6 +1394,21 @@ services:
     class: Drupal\Core\StreamWrapper\TemporaryStream
     tags:
       - { name: stream_wrapper, scheme: temporary }
+  stream_wrapper.module:
+    class: Drupal\Core\StreamWrapper\ModuleStream
+    tags:
+      - { name: stream_wrapper, scheme: module }
+    arguments: ['@request_stack', '@module_handler']
+  stream_wrapper.theme:
+    class: Drupal\Core\StreamWrapper\ThemeStream
+    tags:
+      - { name: stream_wrapper, scheme: theme }
+    arguments: ['@request_stack', '@theme_handler']
+  stream_wrapper.profile:
+    class: Drupal\Core\StreamWrapper\ProfileStream
+    tags:
+      - { name: stream_wrapper, scheme: profile }
+    arguments: ['@request_stack', '@extension.list.profile']
   kernel_destruct_subscriber:
     class: Drupal\Core\EventSubscriber\KernelDestructionSubscriber
     tags:
diff --git a/core/lib/Drupal/Core/Extension/ExtensionList.php b/core/lib/Drupal/Core/Extension/ExtensionList.php
index a6c28a49a0..083c633fe5 100644
--- a/core/lib/Drupal/Core/Extension/ExtensionList.php
+++ b/core/lib/Drupal/Core/Extension/ExtensionList.php
@@ -391,6 +391,7 @@ public function getAllAvailableInfo() {
    *   name.
    */
   public function getAllInstalledInfo() {
+dump($this->getInstalledExtensionNames());
     return array_intersect_key($this->getAllAvailableInfo(), array_flip($this->getInstalledExtensionNames()));
   }
 
diff --git a/core/lib/Drupal/Core/StreamWrapper/ExtensionStreamBase.php b/core/lib/Drupal/Core/StreamWrapper/ExtensionStreamBase.php
new file mode 100644
index 0000000000..5ba1b3b1a6
--- /dev/null
+++ b/core/lib/Drupal/Core/StreamWrapper/ExtensionStreamBase.php
@@ -0,0 +1,103 @@
+<?php
+
+namespace Drupal\Core\StreamWrapper;
+
+use Symfony\Component\HttpFoundation\RequestStack;
+
+/**
+ * Defines a base stream wrapper implementation.
+ *
+ * ExtensionStreamBase is a read-only Drupal stream wrapper base class for
+ * system files located in extensions: modules, themes and installed profile.
+ */
+abstract class ExtensionStreamBase extends LocalReadOnlyStream {
+
+  /**
+   * The request stack object.
+   *
+   * @var \Symfony\Component\HttpFoundation\RequestStack
+   */
+  protected $requestStack;
+
+  /**
+   * Constructor.
+   *
+   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   *   The request stack service.
+   */
+  public function __construct(RequestStack $requestStack) {
+    $this->requestStack = $requestStack;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function getType() {
+    return StreamWrapperInterface::LOCAL | StreamWrapperInterface::READ;
+  }
+
+  /**
+   * Gets the module, theme, or profile name of the current URI.
+   *
+   * This will return the name of the module, theme or profile e.g.:
+   * @code
+   * ModuleStream::getOwnerName('module://foo')
+   * @endcode
+   * and
+   * @code
+   * ModuleStream::getOwnerName('module://foo/')
+   * @endcode
+   * will both return
+   * @code
+   * 'foo'
+   * @endcode
+   *
+   * @return string
+   *   The extension name.
+   */
+  protected function getOwnerName(): string {
+    $uri_parts = explode('://', $this->uri, 2);
+    return strtok($uri_parts[1], '/');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getTarget($uri = NULL) {
+    if ($target = strstr(parent::getTarget($uri), '/')) {
+      return trim($target, '/');
+    }
+    return '';
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getExternalUrl() {
+    $dir = $this->getDirectoryPath();
+    if (empty($dir)) {
+      throw new \RuntimeException("Extension directory for {$this->uri} does not exist.");
+    }
+    $path = rtrim(base_path() . $dir . '/' . $this->getTarget(), '/');
+    return $this->requestStack->getCurrentRequest()->getUriForPath($path);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function dirname($uri = NULL) {
+    if (!isset($uri)) {
+      $uri = $this->uri;
+    }
+    else {
+      $this->uri = $uri;
+    }
+
+    list($scheme) = explode('://', $uri, 2);
+    $dirname = dirname($this->getTarget($uri));
+    $dirname = $dirname !== '.' ? rtrim("/$dirname", '/') : '';
+
+    return "$scheme://{$this->getOwnerName()}{$dirname}";
+  }
+
+}
diff --git a/core/lib/Drupal/Core/StreamWrapper/LocalStream.php b/core/lib/Drupal/Core/StreamWrapper/LocalStream.php
index 7cef6cb4c9..7991b132c7 100644
--- a/core/lib/Drupal/Core/StreamWrapper/LocalStream.php
+++ b/core/lib/Drupal/Core/StreamWrapper/LocalStream.php
@@ -10,10 +10,13 @@
  * "sites/default/files/example.txt" and then PHP filesystem functions are
  * invoked.
  *
- * Drupal\Core\StreamWrapper\LocalStream implementations need to implement at least the
- * getDirectoryPath() and getExternalUrl() methods.
+ * \Drupal\Core\StreamWrapper\LocalStream implementations need to implement at
+ * least the getDirectoryPath() and getExternalUrl() methods.
  */
-abstract class LocalStream implements StreamWrapperInterface {
+abstract class LocalStream extends StreamWrapperBase {
+
+  use LocalStreamTrait;
+
   /**
    * Stream context resource.
    *
@@ -28,15 +31,6 @@
    */
   public $handle = NULL;
 
-  /**
-   * Instance URI (stream).
-   *
-   * A stream is referenced as "scheme://target".
-   *
-   * @var string
-   */
-  protected $uri;
-
   /**
    * {@inheritdoc}
    */
@@ -52,14 +46,7 @@ public static function getType() {
    * @return string
    *   String specifying the path.
    */
-  abstract public function getDirectoryPath();
-
-  /**
-   * {@inheritdoc}
-   */
-  public function setUri($uri) {
-    $this->uri = $uri;
-  }
+  abstract protected function getDirectoryPath();
 
   /**
    * {@inheritdoc}
@@ -68,33 +55,6 @@ public function getUri() {
     return $this->uri;
   }
 
-  /**
-   * Returns the local writable target of the resource within the stream.
-   *
-   * This function should be used in place of calls to realpath() or similar
-   * functions when attempting to determine the location of a file. While
-   * functions like realpath() may return the location of a read-only file, this
-   * method may return a URI or path suitable for writing that is completely
-   * separate from the URI used for reading.
-   *
-   * @param string $uri
-   *   Optional URI.
-   *
-   * @return string|bool
-   *   Returns a string representing a location suitable for writing of a file,
-   *   or FALSE if unable to write to the file such as with read-only streams.
-   */
-  protected function getTarget($uri = NULL) {
-    if (!isset($uri)) {
-      $uri = $this->uri;
-    }
-
-    list(, $target) = explode('://', $uri, 2);
-
-    // Remove erroneous leading or trailing, forward-slashes and backslashes.
-    return trim($target, '\/');
-  }
-
   /**
    * {@inheritdoc}
    */
@@ -137,6 +97,7 @@ protected function getLocalPath($uri = NULL) {
       $realpath = realpath(dirname($path)) . '/' . \Drupal::service('file_system')->basename($path);
     }
     $directory = realpath($this->getDirectoryPath());
+
     if (!$realpath || !$directory || strpos($realpath, $directory) !== 0) {
       return FALSE;
     }
@@ -157,7 +118,7 @@ public function stream_open($uri, $mode, $options, &$opened_path) {
     }
     $this->handle = ($options & STREAM_REPORT_ERRORS) ? fopen($path, $mode) : @fopen($path, $mode);
 
-    if ((bool) $this->handle && $options & STREAM_USE_PATH) {
+    if ((bool) $this->handle && ($options & STREAM_USE_PATH)) {
       $opened_path = $path;
     }
 
diff --git a/core/lib/Drupal/Core/StreamWrapper/LocalStreamTrait.php b/core/lib/Drupal/Core/StreamWrapper/LocalStreamTrait.php
new file mode 100644
index 0000000000..40c56c0bb7
--- /dev/null
+++ b/core/lib/Drupal/Core/StreamWrapper/LocalStreamTrait.php
@@ -0,0 +1,69 @@
+<?php
+
+namespace Drupal\Core\StreamWrapper;
+
+/**
+ * Provides common methods for local streams.
+ */
+trait LocalStreamTrait {
+
+  /**
+   * Gets the name of the directory from a given path.
+   *
+   * This method is usually accessed through drupal_dirname(), which wraps
+   * around the PHP dirname() function because it does not support stream
+   * wrappers.
+   *
+   * @param string $uri
+   *   A URI or path.
+   *
+   * @return string
+   *   A string containing the directory name.
+   *
+   * @see drupal_dirname()
+   */
+  public function dirname($uri = NULL) {
+    if (!isset($uri)) {
+      $uri = $this->uri;
+    }
+
+    list($scheme) = explode('://', $uri, 2);
+    $dirname = dirname($this->getTarget($uri));
+
+    return $dirname !== '.' ? "$scheme://$dirname" : "$scheme://";
+  }
+
+  /**
+   * Returns the local writable target of the resource within the stream.
+   *
+   * This function should be used in place of calls to realpath() or similar
+   * functions when attempting to determine the location of a file. While
+   * functions like realpath() may return the location of a read-only file, this
+   * method may return a URI or path suitable for writing that is completely
+   * separate from the URI used for reading.
+   *
+   * @param string $uri
+   *   Optional URI.
+   *
+   * @return string
+   *   Returns a string representing a location suitable for writing of a file.
+   *
+   * @throws \InvalidArgumentException
+   *   If a malformed $uri parameter is passed in.
+   */
+  protected function getTarget($uri = NULL) {
+    if (!isset($uri)) {
+      $uri = $this->uri;
+    }
+
+    $uri_parts = explode('://', $uri, 2);
+    if (count($uri_parts) === 1) {
+      // The delimiter ('://') was not found in $uri, malformed $uri passed.
+      throw new \InvalidArgumentException("Malformed uri parameter passed: $uri");
+    }
+
+    // Remove erroneous leading or trailing forward-slashes and backslashes.
+    return trim($uri_parts[1], '\/');
+  }
+
+}
diff --git a/core/lib/Drupal/Core/StreamWrapper/ModuleStream.php b/core/lib/Drupal/Core/StreamWrapper/ModuleStream.php
new file mode 100644
index 0000000000..d5e541fb98
--- /dev/null
+++ b/core/lib/Drupal/Core/StreamWrapper/ModuleStream.php
@@ -0,0 +1,73 @@
+<?php
+
+namespace Drupal\Core\StreamWrapper;
+
+use Drupal\Core\Extension\ModuleHandlerInterface;
+use Symfony\Component\HttpFoundation\RequestStack;
+
+/**
+ * Defines the read-only module:// stream wrapper for module files.
+ *
+ * Usage:
+ * @code
+ * module://{name}
+ * @endcode
+ * Points to the module {name} root directory. Only enabled modules can be
+ * referred.
+ */
+class ModuleStream extends ExtensionStreamBase {
+
+  /**
+   * The module handler service.
+   *
+   * @var \Drupal\Core\Extension\ModuleHandlerInterface
+   */
+  protected $moduleHandler;
+
+  /**
+   * Constructor.
+   *
+   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   *   The request stack service.
+   * @param \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler
+   *   The module handler service.
+   */
+  public function __construct(RequestStack $requestStack, ModuleHandlerInterface $moduleHandler) {
+    parent::__construct($requestStack);
+    $this->moduleHandler = $moduleHandler;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getOwnerName(): string {
+    $name = parent::getOwnerName();
+    if (!$this->moduleHandler->moduleExists($name)) {
+      // The module does not exist or is not installed.
+      throw new \RuntimeException("Module $name does not exist or is not installed");
+    }
+    return $name;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getDirectoryPath() {
+    return $this->moduleHandler->getModule($this->getOwnerName())->getPath();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getName() {
+    return $this->t('Module files');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getDescription() {
+    return $this->t('Local files stored under module directory.');
+  }
+
+}
diff --git a/core/lib/Drupal/Core/StreamWrapper/ProfileStream.php b/core/lib/Drupal/Core/StreamWrapper/ProfileStream.php
new file mode 100644
index 0000000000..a3daf9afd4
--- /dev/null
+++ b/core/lib/Drupal/Core/StreamWrapper/ProfileStream.php
@@ -0,0 +1,69 @@
+<?php
+
+namespace Drupal\Core\StreamWrapper;
+
+use Drupal\Core\Extension\ProfileExtensionList;
+use Symfony\Component\HttpFoundation\RequestStack;
+
+/**
+ * Defines the read-only profile:// stream wrapper for installed profile files.
+ *
+ * Usage:
+ * @code
+ * profile://
+ * @endcode
+ * Points to the installed profile root directory.
+ */
+class ProfileStream extends ExtensionStreamBase {
+
+  use LocalStreamTrait;
+
+  /**
+   * The profile extension list service.
+   *
+   * @var \Drupal\Core\Extension\ProfileExtensionList
+   */
+  protected $profileExtensionList;
+
+  /**
+   * ProfileStream constructor.
+   *
+   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   *   The request stack service.
+   * @param \Drupal\Core\Extension\ProfileExtensionList $profileExtensionList;
+   *   The profile extension list service.
+   */
+  public function __construct(RequestStack $requestStack, ProfileExtensionList $profileExtensionList) {
+    parent::__construct($requestStack);
+    $this->profileExtensionList = $profileExtensionList;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getOwnerName(): string {
+    return array_keys($this->profileExtensionList->getAllInstalledInfo())[0];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getDirectoryPath() {
+    return $this->profileExtensionList->getPath($this->getOwnerName());
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getName() {
+    return $this->t('Installed profile files');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getDescription() {
+    return $this->t('Local files stored under installed profile directory.');
+  }
+
+}
diff --git a/core/lib/Drupal/Core/StreamWrapper/ReadOnlyStream.php b/core/lib/Drupal/Core/StreamWrapper/ReadOnlyStream.php
index a2fa804363..026c40d730 100644
--- a/core/lib/Drupal/Core/StreamWrapper/ReadOnlyStream.php
+++ b/core/lib/Drupal/Core/StreamWrapper/ReadOnlyStream.php
@@ -12,43 +12,7 @@
  * Drupal\Core\StreamWrapper\ReadOnlyStream implementations need to implement
  * all the read-related classes.
  */
-abstract class ReadOnlyStream implements StreamWrapperInterface {
-  /**
-   * Stream context resource.
-   *
-   * @var resource
-   */
-  public $context;
-
-  /**
-   * A generic resource handle.
-   *
-   * @var resource
-   */
-  public $handle = NULL;
-
-  /**
-   * Instance URI (stream).
-   *
-   * A stream is referenced as "scheme://target".
-   *
-   * @var string
-   */
-  protected $uri;
-
-  /**
-   * {@inheritdoc}
-   */
-  public function setUri($uri) {
-    $this->uri = $uri;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function getUri() {
-    return $this->uri;
-  }
+abstract class ReadOnlyStream extends StreamWrapperBase {
 
   /**
    * Support for fopen(), file_get_contents(), etc.
diff --git a/core/lib/Drupal/Core/StreamWrapper/StreamWrapperBase.php b/core/lib/Drupal/Core/StreamWrapper/StreamWrapperBase.php
new file mode 100644
index 0000000000..366a2f11d7
--- /dev/null
+++ b/core/lib/Drupal/Core/StreamWrapper/StreamWrapperBase.php
@@ -0,0 +1,51 @@
+<?php
+
+namespace Drupal\Core\StreamWrapper;
+
+/**
+ * Provides a base class for all stream wrappers.
+ */
+abstract class StreamWrapperBase implements StreamWrapperInterface {
+
+  /**
+   * Stream context resource.
+   *
+   * @var resource
+   */
+  public $context;
+
+  /**
+   * A generic resource handle.
+   *
+   * @var resource
+   */
+  public $handle = NULL;
+
+  /**
+   * Instance URI (stream).
+   *
+   * A stream is referenced as "scheme://target".
+   *
+   * @var string
+   */
+  protected $uri;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setUri($uri) {
+    if (strpos($uri, '://') === FALSE) {
+      // The delimiter ('://') was not found in $uri, malformed $uri passed.
+      throw new \InvalidArgumentException("Malformed uri parameter passed: {$this->uri}");
+    }
+    $this->uri = $uri;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getUri() {
+    return $this->uri;
+  }
+
+}
diff --git a/core/lib/Drupal/Core/StreamWrapper/StreamWrapperInterface.php b/core/lib/Drupal/Core/StreamWrapper/StreamWrapperInterface.php
index 38a7758d0a..9e410a2928 100644
--- a/core/lib/Drupal/Core/StreamWrapper/StreamWrapperInterface.php
+++ b/core/lib/Drupal/Core/StreamWrapper/StreamWrapperInterface.php
@@ -175,7 +175,7 @@ public function realpath();
    *   An optional URI.
    *
    * @return string
-   *   A string containing the directory name, or FALSE if not applicable.
+   *   A string containing the directory name.
    *
    * @see \Drupal\Core\File\FileSystemInterface::dirname()
    */
diff --git a/core/lib/Drupal/Core/StreamWrapper/ThemeStream.php b/core/lib/Drupal/Core/StreamWrapper/ThemeStream.php
new file mode 100644
index 0000000000..373275f498
--- /dev/null
+++ b/core/lib/Drupal/Core/StreamWrapper/ThemeStream.php
@@ -0,0 +1,74 @@
+<?php
+
+namespace Drupal\Core\StreamWrapper;
+
+use Drupal\Core\Extension\ThemeHandlerInterface;
+use Symfony\Component\HttpFoundation\RequestStack;
+
+/**
+ * Defines the read-only theme:// stream wrapper for theme files.
+ *
+ * Usage:
+ *
+ * @code
+ * theme://{name}
+ * @endcode
+ * Points to the theme {name} root directory. Only installed themes can be
+ * referred.
+ */
+class ThemeStream extends ExtensionStreamBase {
+
+  /**
+   * The theme handler service.
+   *
+   * @var \Drupal\Core\Extension\ThemeHandlerInterface
+   */
+  protected $themeHandler;
+
+  /**
+   * Constructor.
+   *
+   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   *   The request stack service.
+   * @param \Drupal\Core\Extension\ThemeHandlerInterface $themeHandler
+   *   The theme handler service.
+   */
+  public function __construct(RequestStack $requestStack, ThemeHandlerInterface $themeHandler) {
+    parent::__construct($requestStack);
+    $this->themeHandler = $themeHandler;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getOwnerName(): string {
+    $name = parent::getOwnerName();
+    if (!$this->themeHandler->themeExists($name)) {
+      // The theme does not exist or is not installed.
+      throw new \RuntimeException("Theme $name does not exist or is not installed");
+    }
+    return $name;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getDirectoryPath() {
+    return $this->themeHandler->getTheme($this->getOwnerName())->getPath();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getName() {
+    return $this->t('Theme files');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getDescription() {
+    return $this->t('Local files stored under theme directory.');
+  }
+
+}
diff --git a/core/modules/image/config/install/image.settings.yml b/core/modules/image/config/install/image.settings.yml
index c92db4e155..7fa1d9b74f 100644
--- a/core/modules/image/config/install/image.settings.yml
+++ b/core/modules/image/config/install/image.settings.yml
@@ -1,3 +1,3 @@
-preview_image: core/modules/image/sample.png
+preview_image: module://image/sample.png
 allow_insecure_derivatives: false
 suppress_itok_output: false
diff --git a/core/modules/system/tests/src/Kernel/File/ExtensionStreamTest.php b/core/modules/system/tests/src/Kernel/File/ExtensionStreamTest.php
new file mode 100644
index 0000000000..2c564dcaa3
--- /dev/null
+++ b/core/modules/system/tests/src/Kernel/File/ExtensionStreamTest.php
@@ -0,0 +1,270 @@
+<?php
+
+namespace Drupal\Tests\system\Kernel\File;
+
+use Drupal\KernelTests\KernelTestBase;
+
+/**
+ * Tests system stream wrapper functions.
+ *
+ * @group File
+ */
+class ExtensionStreamTest extends KernelTestBase {
+
+  /**
+   * A list of extension stream wrappers keyed by scheme.
+   *
+   * @var \Drupal\Core\StreamWrapper\StreamWrapperInterface[]
+   */
+  protected $streamWrappers = [];
+
+  /**
+   * The base url for the current request.
+   *
+   * @var string
+   */
+  protected $baseUrl;
+
+  /**
+   * The list of modules to enable.
+   *
+   * @var string[]
+   */
+  protected static $modules = ['file_module_test', 'system'];
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setUp(): void {
+    parent::setUp();
+
+    // Find the base url to be used later in tests.
+    $this->baseUrl = $this->container->get('request_stack')->getCurrentRequest()->getUriForPath(base_path());
+
+    /** @var \Drupal\Core\StreamWrapper\StreamWrapperManagerInterface $stream_wrapper_manager */
+    $stream_wrapper_manager = $this->container->get('stream_wrapper_manager');
+    // Get stream wrapper instances.
+    foreach (['module', 'theme', 'profile'] as $scheme) {
+      $this->streamWrappers[$scheme] = $stream_wrapper_manager->getViaScheme($scheme);
+    }
+
+    /** @var \Drupal\Core\Extension\ThemeInstallerInterface $theme_installer */
+    $theme_installer = $this->container->get('theme_installer');
+    // Install Bartik and Seven themes.
+    $theme_installer->install(['bartik', 'seven']);
+  }
+
+  /**
+   * Tests invalid stream uris.
+   *
+   * @param string $uri
+   *   The URI being tested.
+   *
+   * @dataProvider providerInvalidUris
+   */
+  public function testInvalidStreamUri(string $uri): void {
+    // Set 'minimal' as installed profile for the purposes of this test.
+    $this->setInstallProfile('minimal');
+    $this->enableModules(['minimal']);
+
+    $message = "\\InvalidArgumentException thrown on invalid uri $uri.";
+    try {
+      $this->streamWrappers['module']->dirname($uri);
+      $this->fail($message);
+    }
+    catch (\InvalidArgumentException $e) {
+      $this->assertSame($e->getMessage(), "Malformed uri parameter passed: $uri", $message);
+    }
+  }
+
+  /**
+   * Provides test cases for testInvalidStreamUri()
+   *
+   * @return array[]
+   *   A list of urls to test.
+   */
+  public function providerInvalidUris(): array {
+    return [
+      ['invalid/uri'],
+      ['invalid_uri'],
+      ['module/invalid/uri'],
+      ['module/invalid_uri'],
+      ['module:invalid_uri'],
+      ['module::/invalid/uri'],
+      ['module::/invalid_uri'],
+      ['module//:invalid/uri'],
+      ['module//invalid_uri'],
+      ['module//invalid/uri'],
+    ];
+  }
+
+  /**
+   * Tests call of ::dirname() without setting a URI first.
+   */
+  public function testDirnameAsParameter(): void {
+    // Set 'minimal' as installed profile for the purposes of this test.
+    $this->setInstallProfile('minimal');
+    $this->enableModules(['minimal']);
+
+    $this->assertEquals('module://system', $this->streamWrappers['module']->dirname('module://system/system.admin.css'));
+  }
+
+  /**
+   * Test the extension stream wrapper methods.
+   *
+   * @param string $uri
+   *   The uri to be tested.
+   * @param string|\RuntimeException|\InvalidArgumentException $dirname
+   *   The expectation for dirname() method.
+   * @param string|\RuntimeException|\InvalidArgumentException $realpath
+   *   The expectation for realpath() method.
+   * @param string|\RuntimeException|\InvalidArgumentException $getExternalUrl
+   *   The expectation for getExternalUrl() method.
+   *
+   * @dataProvider providerStreamWrapperMethods
+   */
+  public function testStreamWrapperMethods(string $uri, $dirname, $realpath, $getExternalUrl): void {
+    // Set 'minimal' as installed profile for the purposes of this test.
+    $this->setInstallProfile('minimal');
+    $this->enableModules(['minimal']);
+
+    // Prefix realpath() expected value with Drupal root directory.
+    $realpath = is_string($realpath) ? DRUPAL_ROOT . $realpath : $realpath;
+    // Prefix getExternalUrl() expected value with base url.
+    $getExternalUrl = is_string($getExternalUrl) ? "{$this->baseUrl}$getExternalUrl" : $getExternalUrl;
+    $case = compact('dirname', 'realpath', 'getExternalUrl');
+
+    foreach ($case as $method => $expected) {
+      list($scheme,) = explode('://', $uri);
+      $this->streamWrappers[$scheme]->setUri($uri);
+      if ($expected instanceof \InvalidArgumentException || $expected instanceof \RuntimeException) {
+        /** @var \Exception $expected */
+        $message = sprintf('Exception thrown: %s("%s").', get_class($expected), $expected->getMessage());
+        try {
+          $this->streamWrappers[$scheme]->$method();
+          $this->fail($message);
+        }
+        catch (\InvalidArgumentException $e) {
+          $this->assertSame($expected->getMessage(), $e->getMessage(), $message);
+        }
+        catch (\RuntimeException $e) {
+          $this->assertSame($expected->getMessage(), $e->getMessage(), $message);
+        }
+      }
+      elseif (is_string($expected)) {
+        $this->assertSame($expected, $this->streamWrappers[$scheme]->$method());
+      }
+    }
+  }
+
+  /**
+   * Provides test cases for testStreamWrapperMethods().
+   *
+   * @return array[]
+   *   A list of test cases. Each case consists of the following items:
+   *   - The uri to be tested.
+   *   - The result or the exception when running dirname() method.
+   *   - The result or the exception when running realpath() method. The value
+   *     is prefixed later, in the test method, with the Drupal root directory.
+   *   - The result or the exception when running getExternalUrl() method. The
+   *     value is prefixed later, in the test method, with the base url.
+   */
+  public function providerStreamWrapperMethods(): array {
+    return [
+      // Cases for module:// stream wrapper.
+      [
+        'module://system',
+        'module://system',
+        '/core/modules/system',
+        'core/modules/system',
+      ],
+      [
+        'module://system/css/system.admin.css',
+        'module://system/css',
+        '/core/modules/system/css/system.admin.css',
+        'core/modules/system/css/system.admin.css',
+      ],
+      [
+        'module://file_module_test/file_module_test.dummy.inc',
+        'module://file_module_test',
+        '/core/modules/file/tests/file_module_test/file_module_test.dummy.inc',
+        'core/modules/file/tests/file_module_test/file_module_test.dummy.inc',
+      ],
+      [
+        'module://file_module_test/src/file_module_test.dummy.inc',
+        'module://file_module_test/src',
+        '/core/modules/file/tests/file_module_test/src/file_module_test.dummy.inc',
+        'core/modules/file/tests/file_module_test/src/file_module_test.dummy.inc',
+      ],
+      [
+        'module://ckeditor/ckeditor.info.yml',
+        new \RuntimeException('Module ckeditor does not exist or is not installed'),
+        new \RuntimeException('Module ckeditor does not exist or is not installed'),
+        new \RuntimeException('Module ckeditor does not exist or is not installed'),
+      ],
+      [
+        'module://foo_bar/foo.bar.js',
+        new \RuntimeException('Module foo_bar does not exist or is not installed'),
+        new \RuntimeException('Module foo_bar does not exist or is not installed'),
+        new \RuntimeException('Module foo_bar does not exist or is not installed'),
+      ],
+      // Cases for theme:// stream wrapper.
+      [
+        'theme://seven',
+        'theme://seven',
+        '/core/themes/seven',
+        'core/themes/seven',
+      ],
+      [
+        'theme://seven/style.css',
+        'theme://seven',
+        '/core/themes/seven/style.css',
+        'core/themes/seven/style.css',
+      ],
+      [
+        'theme://bartik/color/preview.js',
+        'theme://bartik/color',
+        '/core/themes/bartik/color/preview.js',
+        'core/themes/bartik/color/preview.js',
+      ],
+      [
+        'theme://fifteen/screenshot.png',
+        new \RuntimeException('Theme fifteen does not exist or is not installed'),
+        new \RuntimeException('Theme fifteen does not exist or is not installed'),
+        new \RuntimeException('Theme fifteen does not exist or is not installed'),
+      ],
+      [
+        'theme://stark/stark.info.yml',
+        new \RuntimeException('Theme stark does not exist or is not installed'),
+        new \RuntimeException('Theme stark does not exist or is not installed'),
+        new \RuntimeException('Theme stark does not exist or is not installed'),
+      ],
+      // Cases for profile:// stream wrapper.
+      [
+        'profile://',
+        'profile://',
+        '/core/profiles/minimal',
+        'core/profiles/minimal',
+      ],
+      [
+        'profile://config/install/block.block.stark_login.yml',
+        'profile://config/install',
+        '/core/profiles/minimal/config/install/block.block.stark_login.yml',
+        'core/profiles/minimal/config/install/block.block.stark_login.yml',
+      ],
+      [
+        'profile://config/install/node.type.article.yml',
+        'profile://config/install',
+        '/core/profiles/minimal/config/install/node.type.article.yml',
+        'core/profiles/minimal/config/install/node.type.article.yml',
+      ],
+      [
+        'profile://minimal.info.yml',
+        'profile://',
+        '/core/profiles/minimal/minimal.info.yml',
+        'core/profiles/minimal/minimal.info.yml',
+      ],
+    ];
+  }
+
+}
