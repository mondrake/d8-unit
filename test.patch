diff --git a/core/lib/Drupal/Component/Plugin/Discovery/AttributeClassDiscovery.php b/core/lib/Drupal/Component/Plugin/Discovery/AttributeClassDiscovery.php
index 3477b746cc8..a1efe090a5f 100644
--- a/core/lib/Drupal/Component/Plugin/Discovery/AttributeClassDiscovery.php
+++ b/core/lib/Drupal/Component/Plugin/Discovery/AttributeClassDiscovery.php
@@ -4,7 +4,6 @@
 
 use Drupal\Component\Plugin\Attribute\AttributeInterface;
 use Drupal\Component\Plugin\Attribute\Plugin;
-use Drupal\Component\FileCache\FileCacheFactory;
 use Drupal\Component\FileCache\FileCacheInterface;
 
 /**
@@ -33,8 +32,6 @@ public function __construct(
     protected readonly array $pluginNamespaces = [],
     protected readonly string $pluginDefinitionAttributeName = Plugin::class,
   ) {
-    $file_cache_suffix = str_replace('\\', '_', $this->pluginDefinitionAttributeName);
-    $this->fileCache = FileCacheFactory::get('attribute_discovery:' . $this->getFileCacheSuffix($file_cache_suffix));
   }
 
   /**
@@ -69,28 +66,12 @@ public function getDefinitions() {
           foreach ($iterator as $fileinfo) {
             assert($fileinfo instanceof \SplFileInfo);
             if ($fileinfo->getExtension() === 'php') {
-              if ($cached = $this->fileCache->get($fileinfo->getPathName())) {
-                if (isset($cached['id'])) {
-                  // Explicitly unserialize this to create a new object instance.
-                  $definitions[$cached['id']] = unserialize($cached['content']);
-                }
-                continue;
-              }
-
               $sub_path = $iterator->getSubIterator()->getSubPath();
               $sub_path = $sub_path ? str_replace(DIRECTORY_SEPARATOR, '\\', $sub_path) . '\\' : '';
               $class = $namespace . '\\' . $sub_path . $fileinfo->getBasename('.php');
-
-              ['id' => $id, 'content' => $content] = $this->parseClass($class, $fileinfo);
-
+              [$id, $content] = $this->parseClass($class, $fileinfo);
               if ($id) {
                 $definitions[$id] = $content;
-                // Explicitly serialize this to create a new object instance.
-                $this->fileCache->set($fileinfo->getPathName(), ['id' => $id, 'content' => serialize($content)]);
-              }
-              else {
-                // Store a NULL object, so the file is not parsed again.
-                $this->fileCache->set($fileinfo->getPathName(), [NULL]);
               }
             }
           }
@@ -122,7 +103,17 @@ public function getDefinitions() {
   protected function parseClass(string $class, \SplFileInfo $fileinfo): array {
     // @todo Consider performance improvements over using reflection.
     // @see https://www.drupal.org/project/drupal/issues/3395260.
-    $reflection_class = new \ReflectionClass($class);
+    try {
+      $reflection_class = new \ReflectionClass($class);
+    }
+    catch (\Throwable $t) {
+      // If reflection failed on the class, it could be due to the class
+      // implementing or extending from interfaces/classes that are not
+      // available to the classloader. This can happen in contrib when a class
+      // in a module extends from a class in another module that is not
+      // installed. In that case, just skip the plugin.
+      return ['id' => NULL, 'content' => NULL];
+    }
 
     $id = $content = NULL;
     if ($attributes = $reflection_class->getAttributes($this->pluginDefinitionAttributeName, \ReflectionAttribute::IS_INSTANCEOF)) {
diff --git a/core/phpstan.neon.dist b/core/phpstan.neon.dist
index 35bcfd1e64b..b261a1b12a1 100644
--- a/core/phpstan.neon.dist
+++ b/core/phpstan.neon.dist
@@ -33,10 +33,11 @@ parameters:
     - scripts/generate-d?-content.sh
     # Skip data files.
     - lib/Drupal/Component/Transliteration/data/*.php
-    # Below extends on purpose a non existing class for testing.
+    # Below extend on purpose non existing classes for testing.
     - modules/system/tests/modules/plugin_test/src/Plugin/plugin_test/fruit/ExtendingNonInstalledClass.php
     - modules/system/tests/modules/plugin_test/src/Plugin/plugin_test/custom_annotation/UsingNonInstalledTraitClass.php
     - modules/system/tests/modules/plugin_test/src/Plugin/plugin_test/custom_annotation/ExtendingNonInstalledClass.php
+    - tests/Drupal/Tests/Component/Plugin/Attribute/Fixtures/Plugins/PluginNamespace/AttributeDiscoveryTest2.php
 
   ignoreErrors:
     # new static() is a best practice in Drupal, so we cannot fix that.
diff --git a/core/tests/Drupal/Tests/Component/Plugin/Attribute/AttributeClassDiscoveryTest.php b/core/tests/Drupal/Tests/Component/Plugin/Attribute/AttributeClassDiscoveryTest.php
index f6c6370e7e1..3840bbdb40b 100644
--- a/core/tests/Drupal/Tests/Component/Plugin/Attribute/AttributeClassDiscoveryTest.php
+++ b/core/tests/Drupal/Tests/Component/Plugin/Attribute/AttributeClassDiscoveryTest.php
@@ -4,6 +4,7 @@
 
 namespace Drupal\Tests\Component\Plugin\Attribute;
 
+use Composer\Autoload\ClassLoader;
 use Drupal\Component\Plugin\Discovery\AttributeClassDiscovery;
 use Drupal\Component\FileCache\FileCacheFactory;
 use PHPUnit\Framework\TestCase;
@@ -29,7 +30,11 @@ protected function setUp(): void {
 
     // Normally the attribute classes would be autoloaded.
     include_once __DIR__ . '/Fixtures/CustomPlugin.php';
-    include_once __DIR__ . '/Fixtures/Plugins/PluginNamespace/AttributeDiscoveryTest1.php';
+
+    // Register classloader for the fixture plugins.
+    $additionalClassLoader = new ClassLoader();
+    $additionalClassLoader->addPsr4("com\\example\\PluginNamespace\\", __DIR__ . "/Fixtures/Plugins/PluginNamespace");
+    $additionalClassLoader->register(TRUE);
   }
 
   /**
diff --git a/core/tests/Drupal/Tests/Component/Plugin/Attribute/Fixtures/Plugins/PluginNamespace/AttributeDiscoveryTest2.php b/core/tests/Drupal/Tests/Component/Plugin/Attribute/Fixtures/Plugins/PluginNamespace/AttributeDiscoveryTest2.php
new file mode 100644
index 00000000000..d094b3b9793
--- /dev/null
+++ b/core/tests/Drupal/Tests/Component/Plugin/Attribute/Fixtures/Plugins/PluginNamespace/AttributeDiscoveryTest2.php
@@ -0,0 +1,16 @@
+<?php
+
+declare(strict_types=1);
+
+namespace com\example\PluginNamespace;
+
+use Drupal\a_module_that_does_not_exist\Plugin\Custom;
+
+/**
+ * Provides a custom test plugin that extends from a missing dependency.
+ */
+#[CustomPlugin(
+  id: "discovery_test_2",
+  title: "Discovery test plugin 2"
+)]
+class AttributeDiscoveryTest2 extends Custom {}
