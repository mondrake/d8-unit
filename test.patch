diff --git a/composer/Plugin/Scaffold/Operations/AppendOp.php b/composer/Plugin/Scaffold/Operations/AppendOp.php
index b9d0c0b9c6..63fefb1fd9 100644
--- a/composer/Plugin/Scaffold/Operations/AppendOp.php
+++ b/composer/Plugin/Scaffold/Operations/AppendOp.php
@@ -21,21 +21,21 @@ class AppendOp extends AbstractOperation {
   /**
    * Path to the source file to prepend, if any.
    *
-   * @var \Drupal\Composer\Plugin\Scaffold\ScaffoldFilePath
+   * @var \Drupal\Composer\Plugin\Scaffold\ScaffoldFilePath|null
    */
   protected $prepend;
 
   /**
    * Path to the source file to append, if any.
    *
-   * @var \Drupal\Composer\Plugin\Scaffold\ScaffoldFilePath
+   * @var \Drupal\Composer\Plugin\Scaffold\ScaffoldFilePath|null
    */
   protected $append;
 
   /**
    * Path to the default data to use when appending to an empty file.
    *
-   * @var \Drupal\Composer\Plugin\Scaffold\ScaffoldFilePath
+   * @var \Drupal\Composer\Plugin\Scaffold\ScaffoldFilePath|null
    */
   protected $default;
 
@@ -59,13 +59,13 @@ class AppendOp extends AbstractOperation {
   /**
    * Constructs an AppendOp.
    *
-   * @param \Drupal\Composer\Plugin\Scaffold\ScaffoldFilePath $prepend_path
+   * @param \Drupal\Composer\Plugin\Scaffold\ScaffoldFilePath|null $prepend_path
    *   The relative path to the prepend file.
-   * @param \Drupal\Composer\Plugin\Scaffold\ScaffoldFilePath $append_path
+   * @param \Drupal\Composer\Plugin\Scaffold\ScaffoldFilePath|null $append_path
    *   The relative path to the append file.
    * @param bool $force_append
    *   TRUE if is okay to append to a file that was not scaffolded.
-   * @param \Drupal\Composer\Plugin\Scaffold\ScaffoldFilePath $default_path
+   * @param \Drupal\Composer\Plugin\Scaffold\ScaffoldFilePath|null $default_path
    *   The relative path to the default data.
    */
   public function __construct(ScaffoldFilePath $prepend_path = NULL, ScaffoldFilePath $append_path = NULL, $force_append = FALSE, ScaffoldFilePath $default_path = NULL) {
@@ -189,7 +189,7 @@ public function scaffoldAtNewLocation(ScaffoldFilePath $destination) {
    *
    * @param string $contents
    *   The contents of the target file.
-   * @param \Drupal\Composer\Plugin\Scaffold\ScaffoldFilePath $data_path
+   * @param \Drupal\Composer\Plugin\Scaffold\ScaffoldFilePath|null $data_path
    *   The path to the data to append or prepend
    *
    * @return bool
diff --git a/core/lib/Drupal/Core/Config/Entity/Query/Condition.php b/core/lib/Drupal/Core/Config/Entity/Query/Condition.php
index a1a03409cc..9e3c20d4ce 100644
--- a/core/lib/Drupal/Core/Config/Entity/Query/Condition.php
+++ b/core/lib/Drupal/Core/Config/Entity/Query/Condition.php
@@ -154,7 +154,7 @@ protected function matchArray(array $condition, array $data, array $needs_matchi
    *
    * @param array $condition
    *   The condition array as created by the condition() method.
-   * @param string $value
+   * @param string|null $value
    *   The value to match against.
    *
    * @return bool
diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index 142e452ceb..d8514c4c25 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -1312,6 +1312,10 @@ public function transactionDepth() {
    *   A Transaction object.
    *
    * @see \Drupal\Core\Database\Transaction
+   *
+   * @throws \Exception
+   *   In case of any error occurring while initializing the transaction on the
+   *   database engine.
    */
   public function startTransaction($name = '') {
     $class = $this->getDriverClass('Transaction');
diff --git a/core/lib/Drupal/Core/Entity/EntityAutocompleteMatcherInterface.php b/core/lib/Drupal/Core/Entity/EntityAutocompleteMatcherInterface.php
index f339f19e75..6e3e74dab7 100644
--- a/core/lib/Drupal/Core/Entity/EntityAutocompleteMatcherInterface.php
+++ b/core/lib/Drupal/Core/Entity/EntityAutocompleteMatcherInterface.php
@@ -13,7 +13,7 @@ interface EntityAutocompleteMatcherInterface {
    *   The plugin ID of the entity reference selection handler.
    * @param array $selection_settings
    *   An array of settings that will be passed to the selection handler.
-   * @param string $string
+   * @param string|null $string
    *   (optional) The label of the entity to query by.
    *
    * @return array
diff --git a/core/lib/Drupal/Core/Entity/EntityDeleteMultipleAccessCheck.php b/core/lib/Drupal/Core/Entity/EntityDeleteMultipleAccessCheck.php
index cdb70747ef..5a571d2b4a 100644
--- a/core/lib/Drupal/Core/Entity/EntityDeleteMultipleAccessCheck.php
+++ b/core/lib/Drupal/Core/Entity/EntityDeleteMultipleAccessCheck.php
@@ -66,7 +66,7 @@ public function access(AccountInterface $account, $entity_type_id) {
       return AccessResult::neutral();
     }
     $selection = $this->tempStore->get($account->id() . ':' . $entity_type_id);
-    if (empty($selection) || !is_array($selection)) {
+    if (!is_array($selection)) {
       return AccessResult::neutral();
     }
 
diff --git a/core/lib/Drupal/Core/Entity/Plugin/Validation/Constraint/ReferenceAccessConstraintValidator.php b/core/lib/Drupal/Core/Entity/Plugin/Validation/Constraint/ReferenceAccessConstraintValidator.php
index 0641b62602..af507a11c6 100644
--- a/core/lib/Drupal/Core/Entity/Plugin/Validation/Constraint/ReferenceAccessConstraintValidator.php
+++ b/core/lib/Drupal/Core/Entity/Plugin/Validation/Constraint/ReferenceAccessConstraintValidator.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Core\Entity\Plugin\Validation\Constraint;
 
+use Drupal\Core\Field\FieldItemInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
 
@@ -14,10 +15,11 @@ class ReferenceAccessConstraintValidator extends ConstraintValidator {
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\Core\Field\FieldItemInterface $value */
-    if (!isset($value)) {
+    if (!($value instanceof FieldItemInterface)) {
+      @trigger_error('Not passing a ' . FieldItemInterface::class . ' object for $value to ' . __METHOD__ . '() is deprecated in drupal:10.1.0 and will throw an exception from drupal:11.0.0. @todo. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
       return;
     }
+
     $id = $value->target_id;
     // '0' or NULL are considered valid empty references.
     if (empty($id)) {
diff --git a/core/lib/Drupal/Core/Entity/Plugin/Validation/Constraint/ValidReferenceConstraintValidator.php b/core/lib/Drupal/Core/Entity/Plugin/Validation/Constraint/ValidReferenceConstraintValidator.php
index aef9fb0018..5940c959f0 100644
--- a/core/lib/Drupal/Core/Entity/Plugin/Validation/Constraint/ValidReferenceConstraintValidator.php
+++ b/core/lib/Drupal/Core/Entity/Plugin/Validation/Constraint/ValidReferenceConstraintValidator.php
@@ -6,6 +6,7 @@
 use Drupal\Core\Entity\EntityReferenceSelection\SelectionPluginManagerInterface;
 use Drupal\Core\Entity\EntityReferenceSelection\SelectionWithAutocreateInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Field\FieldItemListInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\Validator\Constraint;
 use Symfony\Component\Validator\ConstraintValidator;
@@ -56,11 +57,11 @@ public static function create(ContainerInterface $container) {
    * {@inheritdoc}
    */
   public function validate($value, Constraint $constraint) {
-    /** @var \Drupal\Core\Field\FieldItemListInterface $value */
-    /** @var ValidReferenceConstraint $constraint */
-    if (!isset($value)) {
+    if (!($value instanceof FieldItemListInterface)) {
+      @trigger_error('Not passing a ' . FieldItemListInterface::class . ' object for $value to ' . __METHOD__ . '() is deprecated in drupal:10.1.0 and will throw an exception from drupal:11.0.0. @todo. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
       return;
     }
+    assert($constraint instanceof ValidReferenceConstraint);
 
     // Collect new entities and IDs of existing entities across the field items.
     $new_entities = [];
diff --git a/core/lib/Drupal/Core/Entity/Sql/SqlContentEntityStorage.php b/core/lib/Drupal/Core/Entity/Sql/SqlContentEntityStorage.php
index b592f8a79b..082a49dd7e 100644
--- a/core/lib/Drupal/Core/Entity/Sql/SqlContentEntityStorage.php
+++ b/core/lib/Drupal/Core/Entity/Sql/SqlContentEntityStorage.php
@@ -820,6 +820,8 @@ public function save(EntityInterface $entity) {
    * {@inheritdoc}
    */
   public function restore(EntityInterface $entity) {
+    /** @var \Drupal\Core\Database\Transaction|null $transaction */
+    $transaction = NULL;
     try {
       $transaction = $this->database->startTransaction();
       // Insert the entity data in the base and data tables only for default
diff --git a/core/lib/Drupal/Core/Entity/Sql/SqlContentEntityStorageSchema.php b/core/lib/Drupal/Core/Entity/Sql/SqlContentEntityStorageSchema.php
index 48adc9772a..6715e4d9b2 100644
--- a/core/lib/Drupal/Core/Entity/Sql/SqlContentEntityStorageSchema.php
+++ b/core/lib/Drupal/Core/Entity/Sql/SqlContentEntityStorageSchema.php
@@ -721,6 +721,8 @@ public function onFieldStorageDefinitionDelete(FieldStorageDefinitionInterface $
 
     $table_mapping = $this->getTableMapping($this->entityType, [$storage_definition]);
     $field_table_name = $table_mapping->getFieldTableName($storage_definition->getName());
+    /** @var \Drupal\Core\Database\Transaction|null $transaction */
+    $transaction = NULL;
 
     if ($table_mapping->requiresDedicatedTableStorage($storage_definition)) {
       // Move the table to a unique name while the table contents are being
@@ -1725,6 +1727,8 @@ protected function deleteSharedTableSchema(FieldStorageDefinitionInterface $stor
    *   Rethrown exception if the table recreation fails.
    */
   protected function updateDedicatedTableSchema(FieldStorageDefinitionInterface $storage_definition, FieldStorageDefinitionInterface $original) {
+    /** @var \Drupal\Core\Database\Transaction|null $transaction */
+    $transaction = NULL;
     if (!$this->storage->countFieldData($original, TRUE)) {
       // There is no data. Re-create the tables completely.
       try {
@@ -1819,6 +1823,8 @@ protected function updateDedicatedTableSchema(FieldStorageDefinitionInterface $s
    *   Rethrown exception if the table recreation fails.
    */
   protected function updateSharedTableSchema(FieldStorageDefinitionInterface $storage_definition, FieldStorageDefinitionInterface $original) {
+    /** @var \Drupal\Core\Database\Transaction|null $transaction */
+    $transaction = NULL;
     if (!$this->storage->countFieldData($original, TRUE)) {
       try {
         if ($this->database->supportsTransactionalDDL()) {
@@ -2074,7 +2080,8 @@ protected function getSharedTableFieldSchema(FieldStorageDefinitionInterface $st
     $initial_value = $initial_value_from_field = [];
     $storage_definition_is_new = empty($this->loadFieldSchemaData($storage_definition));
     if ($storage_definition_is_new && $storage_definition instanceof BaseFieldDefinition && $table_mapping->allowsSharedTableStorage($storage_definition)) {
-      if (($initial_storage_value = $storage_definition->getInitialValue()) && !empty($initial_storage_value)) {
+      $initial_storage_value = $storage_definition->getInitialValue();
+      if (!empty($initial_storage_value)) {
         // We only support initial values for fields that are stored in shared
         // tables (i.e. single-value fields).
         // @todo Implement initial value support for multi-value fields in
diff --git a/core/lib/Drupal/Core/Entity/TranslatableRevisionableInterface.php b/core/lib/Drupal/Core/Entity/TranslatableRevisionableInterface.php
index 7460eeb16b..acfcf4c032 100644
--- a/core/lib/Drupal/Core/Entity/TranslatableRevisionableInterface.php
+++ b/core/lib/Drupal/Core/Entity/TranslatableRevisionableInterface.php
@@ -36,7 +36,7 @@ public function setRevisionTranslationAffected($affected);
   /**
    * Checks whether the current translation is affected by the current revision.
    *
-   * @return bool
+   * @return bool|null
    *   TRUE if the entity object is affected by the current revision, FALSE
    *   otherwise.
    */
diff --git a/core/lib/Drupal/Core/EventSubscriber/MenuRouterRebuildSubscriber.php b/core/lib/Drupal/Core/EventSubscriber/MenuRouterRebuildSubscriber.php
index 7d0d64c0ad..9c9a89e6ff 100644
--- a/core/lib/Drupal/Core/EventSubscriber/MenuRouterRebuildSubscriber.php
+++ b/core/lib/Drupal/Core/EventSubscriber/MenuRouterRebuildSubscriber.php
@@ -75,6 +75,8 @@ public function onRouterRebuild($event) {
    * Perform menu-specific rebuilding.
    */
   protected function menuLinksRebuild() {
+    /** @var \Drupal\Core\Database\Transaction|null $transaction */
+    $transaction = NULL;
     if ($this->lock->acquire(__FUNCTION__)) {
       try {
         $transaction = $this->connection->startTransaction();
diff --git a/core/lib/Drupal/Core/Field/FieldDefinition.php b/core/lib/Drupal/Core/Field/FieldDefinition.php
index 9fbc65937a..27a8d7d427 100644
--- a/core/lib/Drupal/Core/Field/FieldDefinition.php
+++ b/core/lib/Drupal/Core/Field/FieldDefinition.php
@@ -170,7 +170,7 @@ public function getDefaultValueLiteral() {
   /**
    * Set the default value callback for the field.
    *
-   * @param string $callback
+   * @param string|null $callback
    *   The default value callback.
    *
    * @return $this
diff --git a/core/lib/Drupal/Core/Form/FormBuilder.php b/core/lib/Drupal/Core/Form/FormBuilder.php
index cec9816125..531d8d7fac 100644
--- a/core/lib/Drupal/Core/Form/FormBuilder.php
+++ b/core/lib/Drupal/Core/Form/FormBuilder.php
@@ -793,17 +793,15 @@ public function prepareForm($form_id, &$form, FormStateInterface &$form_state) {
       }
     }
 
-    if (isset($form_id)) {
-      $form['form_id'] = [
-        '#type' => 'hidden',
-        '#value' => $form_id,
-        '#id' => Html::getUniqueId("edit-$form_id"),
-        // Form processing and validation require this value. Ensure the
-        // submitted form value appears literally, regardless of custom #tree
-        // and #parents being set elsewhere.
-        '#parents' => ['form_id'],
-      ];
-    }
+    $form['form_id'] = [
+      '#type' => 'hidden',
+      '#value' => $form_id,
+      '#id' => Html::getUniqueId("edit-$form_id"),
+      // Form processing and validation require this value. Ensure the
+      // submitted form value appears literally, regardless of custom #tree
+      // and #parents being set elsewhere.
+      '#parents' => ['form_id'],
+    ];
     if (!isset($form['#id'])) {
       $form['#id'] = Html::getUniqueId($form_id);
       // Provide a selector usable by JavaScript. As the ID is unique, it's not
diff --git a/core/lib/Drupal/Core/Form/FormCacheInterface.php b/core/lib/Drupal/Core/Form/FormCacheInterface.php
index 9898f50739..cd87a28f28 100644
--- a/core/lib/Drupal/Core/Form/FormCacheInterface.php
+++ b/core/lib/Drupal/Core/Form/FormCacheInterface.php
@@ -22,7 +22,7 @@ public function getCache($form_build_id, FormStateInterface $form_state);
    *
    * @param string $form_build_id
    *   The unique form build ID.
-   * @param array $form
+   * @param array|null $form
    *   The form to cache.
    * @param \Drupal\Core\Form\FormStateInterface $form_state
    *   The current state of the form.
diff --git a/core/lib/Drupal/Core/Menu/Form/MenuLinkDefaultForm.php b/core/lib/Drupal/Core/Menu/Form/MenuLinkDefaultForm.php
index 36b91f6b3c..5135a633cd 100644
--- a/core/lib/Drupal/Core/Menu/Form/MenuLinkDefaultForm.php
+++ b/core/lib/Drupal/Core/Menu/Form/MenuLinkDefaultForm.php
@@ -162,7 +162,7 @@ public function extractFormValues(array &$form, FormStateInterface $form_state)
     if (!empty($menu_name)) {
       $new_definition['menu_name'] = $menu_name;
     }
-    if (isset($parent)) {
+    if (!is_null($parent)) {
       $new_definition['parent'] = $parent;
     }
     return $new_definition;
diff --git a/core/lib/Drupal/Core/Render/Element/RenderElement.php b/core/lib/Drupal/Core/Render/Element/RenderElement.php
index 627b041e04..20cfa85ea3 100644
--- a/core/lib/Drupal/Core/Render/Element/RenderElement.php
+++ b/core/lib/Drupal/Core/Render/Element/RenderElement.php
@@ -177,11 +177,7 @@ public static function preRenderGroup($element) {
         $child['#group_details'] = TRUE;
         // Inject the element as new child element.
         $element[] = $child;
-
-        $sort = TRUE;
-      }
-      // Re-sort the element's children if we injected group member elements.
-      if (isset($sort)) {
+        // Re-sort the element's children if we injected group member elements.
         $element['#sorted'] = FALSE;
       }
     }
diff --git a/core/lib/Drupal/Core/Render/MainContent/AjaxRenderer.php b/core/lib/Drupal/Core/Render/MainContent/AjaxRenderer.php
index 189a7c489d..2dc67a9613 100644
--- a/core/lib/Drupal/Core/Render/MainContent/AjaxRenderer.php
+++ b/core/lib/Drupal/Core/Render/MainContent/AjaxRenderer.php
@@ -72,7 +72,7 @@ public function renderResponse(array $main_content, Request $request, RouteMatch
     $response->addCommand(new InsertCommand(NULL, $html));
     $status_messages = ['#type' => 'status_messages'];
     $output = $this->renderer->renderRoot($status_messages);
-    if (!empty($output)) {
+    if ($output !== '') {
       $response->addCommand(new PrependCommand(NULL, $output));
     }
     return $response;
diff --git a/core/lib/Drupal/Core/Render/MainContent/HtmlRenderer.php b/core/lib/Drupal/Core/Render/MainContent/HtmlRenderer.php
index 1786034ce8..3bc5cebbd3 100644
--- a/core/lib/Drupal/Core/Render/MainContent/HtmlRenderer.php
+++ b/core/lib/Drupal/Core/Render/MainContent/HtmlRenderer.php
@@ -356,10 +356,10 @@ function (callable $hook, string $module) use (&$page_bottom) {
         $hook($page_bottom);
       }
     );
-    if (!empty($page_top)) {
+    if ($page_top !== []) {
       $html['page_top'] = $page_top;
     }
-    if (!empty($page_bottom)) {
+    if ($page_bottom !== []) {
       $html['page_bottom'] = $page_bottom;
     }
   }
diff --git a/core/lib/Drupal/Core/Render/RenderCache.php b/core/lib/Drupal/Core/Render/RenderCache.php
index 674c00e28f..f87a5513d1 100644
--- a/core/lib/Drupal/Core/Render/RenderCache.php
+++ b/core/lib/Drupal/Core/Render/RenderCache.php
@@ -68,7 +68,7 @@ public function get(array $elements) {
     }
     $bin = $elements['#cache']['bin'] ?? 'render';
 
-    if (!empty($cid) && ($cache_bin = $this->cacheFactory->get($bin)) && $cache = $cache_bin->get($cid)) {
+    if (($cache_bin = $this->cacheFactory->get($bin)) && $cache = $cache_bin->get($cid)) {
       $cached_element = $cache->data;
       // Two-tier caching: redirect to actual (post-bubbling) cache item.
       // @see \Drupal\Core\Render\RendererInterface::render()
diff --git a/core/lib/Drupal/Core/Render/Renderer.php b/core/lib/Drupal/Core/Render/Renderer.php
index da19e3281f..5bf98f1394 100644
--- a/core/lib/Drupal/Core/Render/Renderer.php
+++ b/core/lib/Drupal/Core/Render/Renderer.php
@@ -592,7 +592,7 @@ public function executeInRenderContext(RenderContext $context, callable $callabl
   /**
    * Returns the current render context.
    *
-   * @return \Drupal\Core\Render\RenderContext
+   * @return \Drupal\Core\Render\RenderContext|null
    *   The current render context.
    */
   protected function getCurrentRenderContext() {
diff --git a/core/lib/Drupal/Core/Theme/ThemeManager.php b/core/lib/Drupal/Core/Theme/ThemeManager.php
index 6dfd871506..5978d49909 100644
--- a/core/lib/Drupal/Core/Theme/ThemeManager.php
+++ b/core/lib/Drupal/Core/Theme/ThemeManager.php
@@ -312,15 +312,13 @@ public function render($hook, array $variables) {
     // The theme engine may use a different extension and a different
     // renderer.
     $theme_engine = $active_theme->getEngine();
-    if (isset($theme_engine)) {
-      if ($info['type'] != 'module') {
-        if (function_exists($theme_engine . '_render_template')) {
-          $render_function = $theme_engine . '_render_template';
-        }
-        $extension_function = $theme_engine . '_extension';
-        if (function_exists($extension_function)) {
-          $extension = $extension_function();
-        }
+    if ($info['type'] != 'module') {
+      if (function_exists($theme_engine . '_render_template')) {
+        $render_function = $theme_engine . '_render_template';
+      }
+      $extension_function = $theme_engine . '_extension';
+      if (function_exists($extension_function)) {
+        $extension = $extension_function();
       }
     }
 
diff --git a/core/lib/Drupal/Core/TypedData/Validation/RecursiveContextualValidator.php b/core/lib/Drupal/Core/TypedData/Validation/RecursiveContextualValidator.php
index 29efd63f7e..8798e5db85 100644
--- a/core/lib/Drupal/Core/TypedData/Validation/RecursiveContextualValidator.php
+++ b/core/lib/Drupal/Core/TypedData/Validation/RecursiveContextualValidator.php
@@ -175,7 +175,7 @@ protected function validateNode(TypedDataInterface $data, $constraints = NULL, $
    *
    * @param mixed $value
    *   The validated value.
-   * @param string $cache_key
+   * @param string|null $cache_key
    *   The cache key used internally to ensure we don't validate the same
    *   constraint twice.
    * @param \Symfony\Component\Validator\Constraint[] $constraints
diff --git a/core/modules/workspaces/src/WorkspacePublisher.php b/core/modules/workspaces/src/WorkspacePublisher.php
index 3626325756..c1a8d97b2f 100644
--- a/core/modules/workspaces/src/WorkspacePublisher.php
+++ b/core/modules/workspaces/src/WorkspacePublisher.php
@@ -87,6 +87,8 @@ public function publish() {
       throw new WorkspaceConflictException();
     }
 
+    /** @var \Drupal\Core\Database\Transaction|null $transaction */
+    $transaction = NULL;
     try {
       $transaction = $this->database->startTransaction();
       // @todo Handle the publishing of a workspace with a batch operation in
diff --git a/core/phpstan-baseline.neon b/core/phpstan-baseline.neon
index a0c2ab9119..058d16d746 100644
--- a/core/phpstan-baseline.neon
+++ b/core/phpstan-baseline.neon
@@ -1,10 +1,5 @@
 parameters:
 	ignoreErrors:
-		-
-			message: "#^Variable \\$data_path in empty\\(\\) always exists and is not falsy\\.$#"
-			count: 1
-			path: ../composer/Plugin/Scaffold/Operations/AppendOp.php
-
 		-
 			message: "#^Variable \\$app_root might not be defined\\.$#"
 			count: 1
@@ -320,11 +315,6 @@ parameters:
 			count: 1
 			path: lib/Drupal/Core/Config/ConfigInstaller.php
 
-		-
-			message: "#^Variable \\$value in isset\\(\\) always exists and is not nullable\\.$#"
-			count: 2
-			path: lib/Drupal/Core/Config/Entity/Query/Condition.php
-
 		-
 			message: "#^Variable \\$theme_list might not be defined\\.$#"
 			count: 1
@@ -410,11 +400,6 @@ parameters:
 			count: 1
 			path: lib/Drupal/Core/Entity/ContentEntityNullStorage.php
 
-		-
-			message: "#^Variable \\$current_affected in isset\\(\\) always exists and is not nullable\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Entity/ContentEntityStorageBase.php
-
 		-
 			message: "#^Method Drupal\\\\Core\\\\Entity\\\\Controller\\\\EntityController\\:\\:deleteTitle\\(\\) should return string but return statement is missing\\.$#"
 			count: 1
@@ -425,11 +410,6 @@ parameters:
 			count: 2
 			path: lib/Drupal/Core/Entity/Entity/EntityFormDisplay.php
 
-		-
-			message: "#^Variable \\$string in isset\\(\\) always exists and is not nullable\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Entity/EntityAutocompleteMatcher.php
-
 		-
 			message: "#^Access to an undefined property Drupal\\\\Core\\\\Entity\\\\EntityBase\\:\\:\\$id\\.$#"
 			count: 1
@@ -440,11 +420,6 @@ parameters:
 			count: 1
 			path: lib/Drupal/Core/Entity/EntityConfirmFormBase.php
 
-		-
-			message: "#^Variable \\$selection in empty\\(\\) always exists and is not falsy\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Entity/EntityDeleteMultipleAccessCheck.php
-
 		-
 			message: "#^Access to an undefined property Drupal\\\\Core\\\\Entity\\\\EntityDisplayBase\\:\\:\\$_serializedKeys\\.$#"
 			count: 2
@@ -465,16 +440,6 @@ parameters:
 			count: 3
 			path: lib/Drupal/Core/Entity/Plugin/EntityReferenceSelection/DefaultSelection.php
 
-		-
-			message: "#^Variable \\$value in isset\\(\\) always exists and is not nullable\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Entity/Plugin/Validation/Constraint/ReferenceAccessConstraintValidator.php
-
-		-
-			message: "#^Variable \\$value in isset\\(\\) always exists and is not nullable\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Entity/Plugin/Validation/Constraint/ValidReferenceConstraintValidator.php
-
 		-
 			message: "#^Method Drupal\\\\Core\\\\Entity\\\\Query\\\\QueryBase\\:\\:getClass\\(\\) should return string but return statement is missing\\.$#"
 			count: 1
@@ -495,11 +460,6 @@ parameters:
 			count: 2
 			path: lib/Drupal/Core/Entity/Sql/SqlContentEntityStorage.php
 
-		-
-			message: "#^Variable \\$transaction in isset\\(\\) always exists and is not nullable\\.$#"
-			count: 2
-			path: lib/Drupal/Core/Entity/Sql/SqlContentEntityStorage.php
-
 		-
 			message: "#^Method Drupal\\\\Core\\\\Entity\\\\Sql\\\\SqlContentEntityStorageSchema\\:\\:processDataTable\\(\\) should return array but return statement is missing\\.$#"
 			count: 1
@@ -510,11 +470,6 @@ parameters:
 			count: 1
 			path: lib/Drupal/Core/Entity/Sql/SqlContentEntityStorageSchema.php
 
-		-
-			message: "#^Variable \\$initial_storage_value in empty\\(\\) always exists and is not falsy\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Entity/Sql/SqlContentEntityStorageSchema.php
-
 		-
 			message: "#^Call to deprecated constant REQUEST_TIME\\: Deprecated in drupal\\:8\\.3\\.0 and is removed from drupal\\:10\\.0\\.0\\. Use \\\\Drupal\\:\\:time\\(\\)\\-\\>getRequestTime\\(\\); $#"
 			count: 2
@@ -530,11 +485,6 @@ parameters:
 			count: 1
 			path: lib/Drupal/Core/Extension/ModuleHandler.php
 
-		-
-			message: "#^Variable \\$callback in isset\\(\\) always exists and is not nullable\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Field/FieldDefinition.php
-
 		-
 			message: "#^Method Drupal\\\\Core\\\\Field\\\\FieldItemBase\\:\\:generateSampleValue\\(\\) should return array but return statement is missing\\.$#"
 			count: 1
@@ -620,16 +570,6 @@ parameters:
 			count: 1
 			path: lib/Drupal/Core/Form/FormBuilder.php
 
-		-
-			message: "#^Variable \\$form_id in isset\\(\\) always exists and is not nullable\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Form/FormBuilder.php
-
-		-
-			message: "#^Variable \\$form in isset\\(\\) always exists and is not nullable\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Form/FormCache.php
-
 		-
 			message: "#^Method Drupal\\\\Core\\\\Form\\\\FormValidator\\:\\:setInvalidTokenError\\(\\) should return \\$this\\(Drupal\\\\Core\\\\Form\\\\FormValidator\\) but return statement is missing\\.$#"
 			count: 1
@@ -675,11 +615,6 @@ parameters:
 			count: 1
 			path: lib/Drupal/Core/Lock/NullLockBackend.php
 
-		-
-			message: "#^Variable \\$parent in isset\\(\\) always exists and is not nullable\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Menu/Form/MenuLinkDefaultForm.php
-
 		-
 			message: "#^Method Drupal\\\\Core\\\\Menu\\\\MenuLinkManager\\:\\:getInstance\\(\\) should return object\\|false but return statement is missing\\.$#"
 			count: 1
@@ -700,56 +635,16 @@ parameters:
 			count: 1
 			path: lib/Drupal/Core/Menu/MenuTreeStorage.php
 
-		-
-			message: "#^Variable \\$transaction in isset\\(\\) always exists and is not nullable\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Menu/MenuTreeStorage.php
-
 		-
 			message: "#^Constructor of class Drupal\\\\Core\\\\Queue\\\\Memory has an unused parameter \\$name\\.$#"
 			count: 1
 			path: lib/Drupal/Core/Queue/Memory.php
 
-		-
-			message: "#^Variable \\$sort in isset\\(\\) always exists and is not nullable\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Render/Element/RenderElement.php
-
-		-
-			message: "#^Variable \\$output in empty\\(\\) always exists and is not falsy\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Render/MainContent/AjaxRenderer.php
-
-		-
-			message: "#^Variable \\$page_bottom in empty\\(\\) always exists and is always falsy\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Render/MainContent/HtmlRenderer.php
-
-		-
-			message: "#^Variable \\$page_top in empty\\(\\) always exists and is always falsy\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Render/MainContent/HtmlRenderer.php
-
-		-
-			message: "#^Variable \\$cid in empty\\(\\) always exists and is not falsy\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Render/RenderCache.php
-
-		-
-			message: "#^Variable \\$context in isset\\(\\) always exists and is not nullable\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Render/Renderer.php
-
 		-
 			message: "#^Variable \\$render_start might not be defined\\.$#"
 			count: 1
 			path: lib/Drupal/Core/Render/Renderer.php
 
-		-
-			message: "#^Variable \\$transaction in isset\\(\\) always exists and is not nullable\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Routing/MatcherDumper.php
-
 		-
 			message: "#^Call to deprecated constant REQUEST_TIME\\: Deprecated in drupal\\:8\\.3\\.0 and is removed from drupal\\:10\\.0\\.0\\. Use \\\\Drupal\\:\\:time\\(\\)\\-\\>getRequestTime\\(\\); $#"
 			count: 2
@@ -800,11 +695,6 @@ parameters:
 			count: 1
 			path: lib/Drupal/Core/Theme/ThemeManager.php
 
-		-
-			message: "#^Variable \\$theme_engine in isset\\(\\) always exists and is not nullable\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Theme/ThemeManager.php
-
 		-
 			message: "#^Method Drupal\\\\Core\\\\TypedData\\\\ListDataDefinition\\:\\:setDataType\\(\\) should return static\\(Drupal\\\\Core\\\\TypedData\\\\ListDataDefinition\\) but return statement is missing\\.$#"
 			count: 1
@@ -815,11 +705,6 @@ parameters:
 			count: 2
 			path: lib/Drupal/Core/TypedData/TypedData.php
 
-		-
-			message: "#^Variable \\$cache_key in isset\\(\\) always exists and is not nullable\\.$#"
-			count: 1
-			path: lib/Drupal/Core/TypedData/Validation/RecursiveContextualValidator.php
-
 		-
 			message: "#^Class Drupal\\\\Core\\\\Update\\\\UpdateBackend constructor invoked with 2 parameters, 1 required\\.$#"
 			count: 1
@@ -3225,21 +3110,11 @@ parameters:
 			count: 1
 			path: modules/workspaces/src/Plugin/Validation/Constraint/EntityWorkspaceConflictConstraintValidator.php
 
-		-
-			message: "#^Variable \\$transaction in isset\\(\\) always exists and is not nullable\\.$#"
-			count: 1
-			path: modules/workspaces/src/WorkspaceAssociation.php
-
 		-
 			message: "#^Method Drupal\\\\workspaces\\\\WorkspaceMerger\\:\\:checkConflictsOnTarget\\(\\) should return array but return statement is missing\\.$#"
 			count: 1
 			path: modules/workspaces/src/WorkspaceMerger.php
 
-		-
-			message: "#^Variable \\$transaction in isset\\(\\) always exists and is not nullable\\.$#"
-			count: 1
-			path: modules/workspaces/src/WorkspaceMerger.php
-
 		-
 			message: "#^Method Drupal\\\\workspaces\\\\WorkspacePublisher\\:\\:checkConflictsOnTarget\\(\\) should return array but return statement is missing\\.$#"
 			count: 1
