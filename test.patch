diff --git a/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/RangeConstraint.php b/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/RangeConstraint.php
index 161aa10db2..60bb1365f0 100644
--- a/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/RangeConstraint.php
+++ b/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/RangeConstraint.php
@@ -19,7 +19,18 @@
  */
 class RangeConstraint extends Range {
 
-  public $minMessage = 'This value should be %limit or more.';
-  public $maxMessage = 'This value should be %limit or less.';
+  /**
+   * {@inheritdoc}
+   */
+  public function __construct(array $options = NULL) {
+    if (isset($options['min']) && isset($options['max'])) {
+      $options['notInRangeMessage'] = $options['notInRangeMessage'] ?? 'This value should be between %min and %max.';
+    }
+    else {
+      $options['minMessage'] = $options['minMessage'] ?? 'This value should be %limit or more.';
+      $options['maxMessage'] = $options['maxMessage'] ?? 'This value should be %limit or less.';
+    }
+    parent::__construct($options);
+  }
 
 }
diff --git a/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/RangeConstraintValidator.php b/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/RangeConstraintValidator.php
index b17a57d91a..2d1f956e05 100644
--- a/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/RangeConstraintValidator.php
+++ b/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/RangeConstraintValidator.php
@@ -50,7 +50,21 @@ public function validate($value, Constraint $constraint) {
       }
     }
 
-    if (NULL !== $constraint->max && $value > $max) {
+    $hasLowerLimit = NULL !== $constraint->min;
+    $hasUpperLimit = NULL !== $constraint->max;
+
+    if ($hasLowerLimit && $hasUpperLimit && ($value < $min || $value > $max)) {
+      $this->context->buildViolation($constraint->notInRangeMessage)
+        ->setParameter('{{ value }}', $this->formatValue($value, self::PRETTY_DATE))
+        ->setParameter('{{ min }}', $this->formatValue($min, self::PRETTY_DATE))
+        ->setParameter('{{ max }}', $this->formatValue($max, self::PRETTY_DATE))
+        ->setCode(Range::NOT_IN_RANGE_ERROR)
+        ->addViolation();
+
+        return;
+    }
+
+    if ($hasUpperLimit && $value > $max) {
       $this->context->buildViolation($constraint->maxMessage)
         ->setParameter('{{ value }}', $this->formatValue($value, self::PRETTY_DATE))
         ->setParameter('{{ limit }}', $this->formatValue($max, self::PRETTY_DATE))
@@ -60,7 +74,7 @@ public function validate($value, Constraint $constraint) {
       return;
     }
 
-    if (NULL !== $constraint->min && $value < $min) {
+    if ($hasLowerLimit && $value < $min) {
       $this->context->buildViolation($constraint->minMessage)
         ->setParameter('{{ value }}', $this->formatValue($value, self::PRETTY_DATE))
         ->setParameter('{{ limit }}', $this->formatValue($min, self::PRETTY_DATE))
diff --git a/core/modules/field/tests/src/Kernel/FieldCrudTest.php b/core/modules/field/tests/src/Kernel/FieldCrudTest.php
index 24ee726282..9aa282fc3a 100644
--- a/core/modules/field/tests/src/Kernel/FieldCrudTest.php
+++ b/core/modules/field/tests/src/Kernel/FieldCrudTest.php
@@ -183,7 +183,7 @@ protected function doFieldPropertyConstraintsTests() {
     $this->assertEquals(t('%name does not accept the value @value.', ['%name' => $field_name, '@value' => -2]), $violations[0]->getMessage());
 
     $this->assertEquals($field_name . '.0.value', $violations[1]->getPropertyPath());
-    $this->assertEquals(t('This value should be %limit or more.', ['%limit' => 0]), $violations[1]->getMessage());
+    $this->assertEquals(t('This value should be between %min and %max.', ['%min' => 0, '%max' => 32]), $violations[1]->getMessage());
 
     // Check that a value that is not specifically restricted but outside the
     // range triggers the expected violation.
