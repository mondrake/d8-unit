diff --git a/core/lib/Drupal/Core/Database/Query/PagerSelectExtender.php b/core/lib/Drupal/Core/Database/Query/PagerSelectExtender.php
index f32b1c733c..0b13ad6a82 100644
--- a/core/lib/Drupal/Core/Database/Query/PagerSelectExtender.php
+++ b/core/lib/Drupal/Core/Database/Query/PagerSelectExtender.php
@@ -3,6 +3,7 @@
 namespace Drupal\Core\Database\Query;
 
 use Drupal\Core\Database\Connection;
+use Drupal\Core\Pager\PagerManagerInterface;
 
 /**
  * Query extender for pager queries.
@@ -16,13 +17,6 @@
  */
 class PagerSelectExtender extends SelectExtender {
 
-  /**
-   * The highest element we've autogenerated so far.
-   *
-   * @var int
-   */
-  public static $maxElement = 0;
-
   /**
    * The number of elements per page to allow.
    *
@@ -44,14 +38,48 @@ class PagerSelectExtender extends SelectExtender {
    */
   protected $customCountQuery = FALSE;
 
-  public function __construct(SelectInterface $query, Connection $connection) {
+  /**
+   * The pager manager service.
+   *
+   * @var \Drupal\Core\Pager\PagerManagerInterface
+   */
+  protected $pagerManager;
+
+  /**
+   * Constructs a PagerSelectExtender object.
+   *
+   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   *   Select query object.
+   * @param \Drupal\Core\Database\Connection $connection
+   *   Database connection object.
+   * @param \Drupal\Core\Pager\PagerManagerInterface $pager_manager
+   *   The pager manager service.
+   */
+  public function __construct(SelectInterface $query, Connection $connection, PagerManagerInterface $pager_manager = NULL) {
     parent::__construct($query, $connection);
+    if (!$pager_manager) {
+      @trigger_error('The pager.manager service must be passed to PagerSelectExtender::__construct(), it is required before drupal:10.0.0.', E_USER_DEPRECATED);
+      $pager_manager = \Drupal::service('pager.manager');
+    }
+    $this->pagerManager = $pager_manager;
 
     // Add pager tag. Do this here to ensure that it is always added before
     // preExecute() is called.
     $this->addTag('pager');
   }
 
+  /**
+   * Implements the magic __get() method.
+   *
+   * @todo Remove the method in Drupal 10.
+   */
+  public function __get($name) {
+    if ($name === 'maxElement') {
+      @trigger_error("PagerSelectExtender::\$maxElement should not be accessed in drupal:9.2.0 and will error in drupal:10.0.0. Use \Drupal::service('pager.manager')->getMaxPagerElementId() instead. See https://www.drupal.org/node/3194594", E_USER_DEPRECATED);
+      return $this->pagerManager->getMaxPagerElementId();
+    }
+  }
+
   /**
    * Override the execute method.
    *
@@ -73,9 +101,7 @@ public function execute() {
     $this->ensureElement();
 
     $total_items = $this->getCountQuery()->execute()->fetchField();
-    /** @var \Drupal\Core\Pager\PagerManagerInterface $pager_manager */
-    $pager_manager = \Drupal::service('pager.manager');
-    $pager = $pager_manager->createPager($total_items, $this->limit, $this->element);
+    $pager = $this->pagerManager->createPager($total_items, $this->limit, $this->element);
     $this->range($pager->getCurrentPage() * $this->limit, $this->limit);
 
     // Now that we've added our pager-based range instructions, run the query normally.
@@ -84,15 +110,13 @@ public function execute() {
 
   /**
    * Ensure that there is an element associated with this query.
-   * If an element was not specified previously, then the value of the
-   * $maxElement counter is taken, after which the counter is incremented.
    *
    * After running this method, access $this->element to get the element for this
    * query.
    */
   protected function ensureElement() {
     if (!isset($this->element)) {
-      $this->element = self::$maxElement++;
+      $this->element = $this->pagerManager->getMaxPagerElementId() + 1;
     }
   }
 
@@ -151,9 +175,6 @@ public function limit($limit = 10) {
    * whatever reason you want to explicitly define an element for a given query,
    * you may do so here.
    *
-   * Setting the element here also increments the static $maxElement counter,
-   * which is used for determining the $element when there's none specified.
-   *
    * Note that no collision detection is done when setting an element ID
    * explicitly, so it is possible for two pagers to end up using the same ID
    * if both are set explicitly.
@@ -163,10 +184,22 @@ public function limit($limit = 10) {
    */
   public function element($element) {
     $this->element = $element;
-    if ($element >= self::$maxElement) {
-      self::$maxElement = $element + 1;
-    }
     return $this;
   }
 
+  /**
+   * Gets the element ID for this pager query.
+   *
+   * The element is used to differentiate different pager queries on the same
+   * page so that they may be operated independently.
+   *
+   * @return int
+   *   Element ID that is used to differentiate between different pager
+   *   queries.
+   */
+  public function getElement(): int {
+    $this->ensureElement();
+    return $this->element;
+  }
+
 }
diff --git a/core/lib/Drupal/Core/Database/Query/Select.php b/core/lib/Drupal/Core/Database/Query/Select.php
index 94cbf92b14..242b8afc9e 100644
--- a/core/lib/Drupal/Core/Database/Query/Select.php
+++ b/core/lib/Drupal/Core/Database/Query/Select.php
@@ -319,12 +319,15 @@ public function havingCompile(Connection $connection) {
    */
   public function extend($extender_name) {
     $parts = explode('\\', $extender_name);
-    $class = end($parts);
-    $driver_class = $this->connection->getDriverClass($class);
-    if ($driver_class !== $class) {
-      return new $driver_class($this, $this->connection);
+    $base_class = end($parts);
+    $driver_class = $this->connection->getDriverClass($base_class);
+    $class = $driver_class !== $base_class ? $driver_class : $extender_name;
+    if ($class instanceof PagerSelectExtender) {
+      return new $class($this, $this->connection, \Drupal::service('pager.manager'));
+    }
+    else {
+      return new $class($this, $this->connection);
     }
-    return new $extender_name($this, $this->connection);
   }
 
   /**
diff --git a/core/lib/Drupal/Core/Database/Query/SelectExtender.php b/core/lib/Drupal/Core/Database/Query/SelectExtender.php
index 0681813f04..b14c0779ce 100644
--- a/core/lib/Drupal/Core/Database/Query/SelectExtender.php
+++ b/core/lib/Drupal/Core/Database/Query/SelectExtender.php
@@ -222,12 +222,15 @@ public function extend($extender_name) {
     // you will replace all the earlier extenders with the last extender,
     // instead of creating list of objects that extend each other.
     $parts = explode('\\', $extender_name);
-    $class = end($parts);
-    $driver_class = $this->connection->getDriverClass($class);
-    if ($driver_class !== $class) {
-      return new $driver_class($this, $this->connection);
+    $base_class = end($parts);
+    $driver_class = $this->connection->getDriverClass($base_class);
+    $class = $driver_class !== $base_class ? $driver_class : $extender_name;
+    if ($class instanceof PagerSelectExtender) {
+      return new $class($this, $this->connection, \Drupal::service('pager.manager'));
+    }
+    else {
+      return new $class($this, $this->connection);
     }
-    return new $extender_name($this, $this->connection);
   }
 
   /* Alter accessors to expose the query data to alter hooks. */
diff --git a/core/lib/Drupal/Core/DependencyInjection/YamlFileLoader.php b/core/lib/Drupal/Core/DependencyInjection/YamlFileLoader.php
index 542c2848f7..8fa002c6e3 100644
--- a/core/lib/Drupal/Core/DependencyInjection/YamlFileLoader.php
+++ b/core/lib/Drupal/Core/DependencyInjection/YamlFileLoader.php
@@ -120,7 +120,9 @@ private function parseDefinitions($content, $file)
             list($provider, ) = explode('.', $basename, 2);
         }
         foreach ($content['services'] as $id => $service) {
-            $service['tags'][] = ['name' => '_provider', 'provider' => $provider];
+            if (is_array($service)) {
+              $service['tags'][] = ['name' => '_provider', 'provider' => $provider];
+            }
             $this->parseDefinition($id, $service, $file);
         }
     }
diff --git a/core/lib/Drupal/Core/Entity/Query/QueryBase.php b/core/lib/Drupal/Core/Entity/Query/QueryBase.php
index a1e5e2c923..6c43c919ee 100644
--- a/core/lib/Drupal/Core/Entity/Query/QueryBase.php
+++ b/core/lib/Drupal/Core/Entity/Query/QueryBase.php
@@ -2,7 +2,6 @@
 
 namespace Drupal\Core\Entity\Query;
 
-use Drupal\Core\Database\Query\PagerSelectExtender;
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Utility\TableSort;
 
@@ -289,10 +288,7 @@ public function pager($limit = 10, $element = NULL) {
     // Even when not using SQL, storing the element PagerSelectExtender is as
     // good as anywhere else.
     if (!isset($element)) {
-      $element = PagerSelectExtender::$maxElement++;
-    }
-    elseif ($element >= PagerSelectExtender::$maxElement) {
-      PagerSelectExtender::$maxElement = $element + 1;
+      $element = \Drupal::service('pager.manager')->getMaxPagerElementId() + 1;
     }
 
     $this->pager = [
diff --git a/core/lib/Drupal/Core/Pager/PagerManager.php b/core/lib/Drupal/Core/Pager/PagerManager.php
index 5e29724dc1..36d10a1de4 100644
--- a/core/lib/Drupal/Core/Pager/PagerManager.php
+++ b/core/lib/Drupal/Core/Pager/PagerManager.php
@@ -90,12 +90,9 @@ public function getUpdatedParameters(array $query, $element, $index) {
   }
 
   /**
-   * Gets the extent of the pager page element IDs.
-   *
-   * @return int
-   *   The maximum element ID available, -1 if there are no elements.
+   * {@inheritdoc}
    */
-  protected function getMaxPagerElementId() {
+  public function getMaxPagerElementId() {
     return empty($this->pagers) ? -1 : max(array_keys($this->pagers));
   }
 
diff --git a/core/lib/Drupal/Core/Pager/PagerManagerInterface.php b/core/lib/Drupal/Core/Pager/PagerManagerInterface.php
index 94db9320ac..b818b81341 100644
--- a/core/lib/Drupal/Core/Pager/PagerManagerInterface.php
+++ b/core/lib/Drupal/Core/Pager/PagerManagerInterface.php
@@ -33,7 +33,7 @@ interface PagerManagerInterface {
    * before executing it. For example:
    * @code
    *   $query = $connection->select('some_table')
-   *     ->extend('Drupal\Core\Database\Query\PagerSelectExtender');
+   *     ->extend(PagerSelectExtender::class);
    * @endcode
    *
    * However, if you are using a different method for generating the items to be
@@ -163,4 +163,12 @@ public function findPage(int $pager_id = 0): int;
    */
   public function getUpdatedParameters(array $query, $element, $index);
 
+  /**
+   * Gets the extent of the pager page element IDs.
+   *
+   * @return int
+   *   The maximum element ID available, -1 if there are no elements.
+   */
+  public function getMaxPagerElementId();
+
 }
diff --git a/core/lib/Drupal/Core/Validation/ConstraintFactory.php b/core/lib/Drupal/Core/Validation/ConstraintFactory.php
new file mode 100644
index 0000000000..3196dae1cb
--- /dev/null
+++ b/core/lib/Drupal/Core/Validation/ConstraintFactory.php
@@ -0,0 +1,38 @@
+<?php
+
+namespace Drupal\Core\Validation;
+
+use Drupal\Core\Plugin\Factory\ContainerFactory;
+use Symfony\Component\Validator\Constraint;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+
+/**
+ * Constraint plugin factory.
+ *
+ * Symfony Constraint plugins are created as Drupal plugins, but the default
+ * plugin constructor is not compatible.
+ */
+class ConstraintFactory extends ContainerFactory {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function createInstance($plugin_id, array $configuration = []) {
+    $plugin_definition = $this->discovery->getDefinition($plugin_id);
+    $plugin_class = static::getPluginClass($plugin_id, $plugin_definition, $this->interface);
+
+    // If the plugin provides a factory method, pass the container to it.
+    if (is_subclass_of($plugin_class, ContainerFactoryPluginInterface::class)) {
+      return $plugin_class::create(\Drupal::getContainer(), $configuration, $plugin_id, $plugin_definition);
+    }
+
+    // If the plugin is a Symfony Constraint, use the correct constructor.
+    if (is_subclass_of($plugin_class, Constraint::class)) {
+      return new $plugin_class($configuration);
+    }
+
+    // Otherwise, create the plugin as normal.
+    return new $plugin_class($configuration, $plugin_id, $plugin_definition);
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Validation/ConstraintManager.php b/core/lib/Drupal/Core/Validation/ConstraintManager.php
index 79da1d6e8a..c5faab67ed 100644
--- a/core/lib/Drupal/Core/Validation/ConstraintManager.php
+++ b/core/lib/Drupal/Core/Validation/ConstraintManager.php
@@ -40,6 +40,7 @@ class ConstraintManager extends DefaultPluginManager {
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
+    $this->factory = new ConstraintFactory($this);
     parent::__construct('Plugin/Validation/Constraint', $namespaces, $module_handler, NULL, 'Drupal\Core\Validation\Annotation\Constraint');
     $this->alterInfo('validation_constraint');
     $this->setCacheBackend($cache_backend, 'validation_constraint_plugins');
diff --git a/core/modules/comment/src/CommentStorage.php b/core/modules/comment/src/CommentStorage.php
index 65429fd600..1b2c1b843a 100644
--- a/core/modules/comment/src/CommentStorage.php
+++ b/core/modules/comment/src/CommentStorage.php
@@ -5,6 +5,7 @@
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Cache\MemoryCache\MemoryCacheInterface;
 use Drupal\Core\Database\Connection;
+use Drupal\Core\Database\Query\PagerSelectExtender;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeBundleInfoInterface;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -287,7 +288,7 @@ public function loadThread(EntityInterface $entity, $field_name, $mode, $comment
       ->addMetaData('field_name', $field_name);
 
     if ($comments_per_page) {
-      $query = $query->extend('Drupal\Core\Database\Query\PagerSelectExtender')
+      $query = $query->extend(PagerSelectExtender::class)
         ->limit($comments_per_page);
       if ($pager_id) {
         $query->element($pager_id);
diff --git a/core/modules/dblog/src/Controller/DbLogController.php b/core/modules/dblog/src/Controller/DbLogController.php
index fc231b8014..03d2ccc493 100644
--- a/core/modules/dblog/src/Controller/DbLogController.php
+++ b/core/modules/dblog/src/Controller/DbLogController.php
@@ -9,6 +9,8 @@
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Database\Connection;
+use Drupal\Core\Database\Query\PagerSelectExtender;
+use Drupal\Core\Database\Query\TableSortExtender;
 use Drupal\Core\Datetime\DateFormatterInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Form\FormBuilderInterface;
@@ -161,8 +163,8 @@ public function overview() {
     ];
 
     $query = $this->database->select('watchdog', 'w')
-      ->extend('\Drupal\Core\Database\Query\PagerSelectExtender')
-      ->extend('\Drupal\Core\Database\Query\TableSortExtender');
+      ->extend(PagerSelectExtender::class)
+      ->extend(TableSortExtender::class);
     $query->fields('w', [
       'wid',
       'uid',
@@ -427,8 +429,8 @@ public function topLogMessages($type) {
     $count_query->condition('type', $type);
 
     $query = $this->database->select('watchdog', 'w')
-      ->extend('\Drupal\Core\Database\Query\PagerSelectExtender')
-      ->extend('\Drupal\Core\Database\Query\TableSortExtender');
+      ->extend(PagerSelectExtender::class)
+      ->extend(TableSortExtender::class);
     $query->addExpression('COUNT([wid])', 'count');
     $query = $query
       ->fields('w', ['message', 'variables'])
diff --git a/core/modules/forum/src/ForumManager.php b/core/modules/forum/src/ForumManager.php
index 1e5c323da8..3a5ec47c74 100644
--- a/core/modules/forum/src/ForumManager.php
+++ b/core/modules/forum/src/ForumManager.php
@@ -4,6 +4,8 @@
 
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Database\Connection;
+use Drupal\Core\Database\Query\PagerSelectExtender;
+use Drupal\Core\Database\Query\TableSortExtender;
 use Drupal\Core\DependencyInjection\DependencySerializationTrait;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -160,8 +162,8 @@ public function getTopics($tid, AccountInterface $account) {
     }
 
     $query = $this->connection->select('forum_index', 'f')
-      ->extend('Drupal\Core\Database\Query\PagerSelectExtender')
-      ->extend('Drupal\Core\Database\Query\TableSortExtender');
+      ->extend(PagerSelectExtender::class)
+      ->extend(TableSortExtender::class);
     $query->fields('f');
     $query
       ->condition('f.tid', $tid)
@@ -187,7 +189,7 @@ public function getTopics($tid, AccountInterface $account) {
       $nodes = $this->entityTypeManager->getStorage('node')->loadMultiple($nids);
 
       $query = $this->connection->select('node_field_data', 'n')
-        ->extend('Drupal\Core\Database\Query\TableSortExtender');
+        ->extend(TableSortExtender::class);
       $query->fields('n', ['nid']);
 
       $query->join('comment_entity_statistics', 'ces', "[n].[nid] = [ces].[entity_id] AND [ces].[field_name] = 'comment_forum' AND [ces].[entity_type] = 'node'");
diff --git a/core/modules/locale/src/StringDatabaseStorage.php b/core/modules/locale/src/StringDatabaseStorage.php
index 7b4d4ba0e5..74e94fca5d 100644
--- a/core/modules/locale/src/StringDatabaseStorage.php
+++ b/core/modules/locale/src/StringDatabaseStorage.php
@@ -3,6 +3,7 @@
 namespace Drupal\locale;
 
 use Drupal\Core\Database\Connection;
+use Drupal\Core\Database\Query\PagerSelectExtender;
 
 /**
  * Defines a class to store localized strings in the database.
@@ -442,7 +443,7 @@ protected function dbStringSelect(array $conditions, array $options = []) {
     }
 
     if (!empty($options['pager limit'])) {
-      $query = $query->extend('Drupal\Core\Database\Query\PagerSelectExtender')->limit($options['pager limit']);
+      $query = $query->extend(PagerSelectExtender::class)->limit($options['pager limit']);
     }
 
     return $query;
diff --git a/core/modules/node/src/Plugin/Search/NodeSearch.php b/core/modules/node/src/Plugin/Search/NodeSearch.php
index 9d89ea9a82..b23112ae31 100644
--- a/core/modules/node/src/Plugin/Search/NodeSearch.php
+++ b/core/modules/node/src/Plugin/Search/NodeSearch.php
@@ -7,6 +7,7 @@
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Database\Connection;
+use Drupal\Core\Database\Query\PagerSelectExtender;
 use Drupal\Core\Database\Query\SelectExtender;
 use Drupal\Core\Database\StatementInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
@@ -22,7 +23,7 @@
 use Drupal\search\Plugin\ConfigurableSearchPluginBase;
 use Drupal\search\Plugin\SearchIndexingInterface;
 use Drupal\search\SearchIndexInterface;
-use Drupal\Search\SearchQuery;
+use Drupal\search\SearchQuery;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
@@ -261,8 +262,8 @@ protected function findResults() {
     // Build matching conditions.
     $query = $this->databaseReplica
       ->select('search_index', 'i')
-      ->extend('Drupal\search\SearchQuery')
-      ->extend('Drupal\Core\Database\Query\PagerSelectExtender');
+      ->extend(SearchQuery::class)
+      ->extend(PagerSelectExtender::class);
     $query->join('node_field_data', 'n', '[n].[nid] = [i].[sid] AND [n].[langcode] = [i].[langcode]');
     $query->condition('n.status', 1)
       ->addTag('node_access')
diff --git a/core/modules/search/tests/src/Kernel/SearchMatchTest.php b/core/modules/search/tests/src/Kernel/SearchMatchTest.php
index a44705438f..51f2945f15 100644
--- a/core/modules/search/tests/src/Kernel/SearchMatchTest.php
+++ b/core/modules/search/tests/src/Kernel/SearchMatchTest.php
@@ -6,6 +6,7 @@
 use Drupal\Core\Language\LanguageInterface;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\search\SearchIndexInterface;
+use Drupal\search\SearchQuery;
 
 /**
  * Indexes content and queries it.
@@ -164,7 +165,7 @@ public function _testQueries() {
     $connection = Database::getConnection();
     foreach ($queries as $query => $results) {
       $result = $connection->select('search_index', 'i')
-        ->extend('Drupal\search\SearchQuery')
+        ->extend(SearchQuery::class)
         ->searchExpression($query, static::SEARCH_TYPE)
         ->execute();
 
@@ -184,7 +185,7 @@ public function _testQueries() {
     ];
     foreach ($queries as $query => $results) {
       $result = $connection->select('search_index', 'i')
-        ->extend('Drupal\search\SearchQuery')
+        ->extend(SearchQuery::class)
         ->searchExpression($query, static::SEARCH_TYPE_2)
         ->execute();
 
@@ -207,7 +208,7 @@ public function _testQueries() {
     ];
     foreach ($queries as $query => $results) {
       $result = $connection->select('search_index', 'i')
-        ->extend('Drupal\search\SearchQuery')
+        ->extend(SearchQuery::class)
         ->searchExpression($query, static::SEARCH_TYPE_JPN)
         ->execute();
 
diff --git a/core/modules/serialization/src/Normalizer/NormalizerBase.php b/core/modules/serialization/src/Normalizer/NormalizerBase.php
index 8792e5088d..f1539b62a6 100644
--- a/core/modules/serialization/src/Normalizer/NormalizerBase.php
+++ b/core/modules/serialization/src/Normalizer/NormalizerBase.php
@@ -48,8 +48,8 @@ public function supportsNormalization($data, $format = NULL) {
    * Implements \Symfony\Component\Serializer\Normalizer\DenormalizerInterface::supportsDenormalization()
    *
    * This class doesn't implement DenormalizerInterface, but most of its child
-   * classes do, so this method is implemented at this level to reduce code
-   * duplication.
+   * classes do. Therefore, this method is implemented at this level to reduce
+   * code duplication.
    */
   public function supportsDenormalization($data, $type, $format = NULL) {
     // If the format is not supported return now.
diff --git a/core/modules/system/tests/modules/database_test/src/Controller/DatabaseTestController.php b/core/modules/system/tests/modules/database_test/src/Controller/DatabaseTestController.php
index 50eb440e58..2364e39fc7 100644
--- a/core/modules/system/tests/modules/database_test/src/Controller/DatabaseTestController.php
+++ b/core/modules/system/tests/modules/database_test/src/Controller/DatabaseTestController.php
@@ -4,6 +4,8 @@
 
 use Drupal\Core\Controller\ControllerBase;
 use Drupal\Core\Database\Connection;
+use Drupal\Core\Database\Query\PagerSelectExtender;
+use Drupal\Core\Database\Query\TableSortExtender;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpFoundation\JsonResponse;
 
@@ -71,7 +73,7 @@ public function pagerQueryEven($limit) {
 
     // This should result in 2 pages of results.
     $query = $query
-      ->extend('Drupal\Core\Database\Query\PagerSelectExtender')
+      ->extend(PagerSelectExtender::class)
       ->limit($limit);
 
     $names = $query->execute()->fetchCol();
@@ -97,7 +99,7 @@ public function pagerQueryOdd($limit) {
 
     // This should result in 4 pages of results.
     $query = $query
-      ->extend('Drupal\Core\Database\Query\PagerSelectExtender')
+      ->extend(PagerSelectExtender::class)
       ->limit($limit);
 
     $names = $query->execute()->fetchCol();
@@ -128,7 +130,7 @@ public function testTablesort() {
       ->fields('t', ['tid', 'pid', 'task', 'priority']);
 
     $query = $query
-      ->extend('Drupal\Core\Database\Query\TableSortExtender')
+      ->extend(TableSortExtender::class)
       ->orderByHeader($header);
 
     // We need all the results at once to check the sort.
@@ -160,7 +162,7 @@ public function testTablesortFirst() {
       ->fields('t', ['tid', 'pid', 'task', 'priority']);
 
     $query = $query
-      ->extend('Drupal\Core\Database\Query\TableSortExtender')
+      ->extend(TableSortExtender::class)
       ->orderByHeader($header)
       ->orderBy('priority');
 
diff --git a/core/modules/system/tests/modules/database_test/src/Form/DatabaseTestForm.php b/core/modules/system/tests/modules/database_test/src/Form/DatabaseTestForm.php
index 3e35ba3816..5570c96f5f 100644
--- a/core/modules/system/tests/modules/database_test/src/Form/DatabaseTestForm.php
+++ b/core/modules/system/tests/modules/database_test/src/Form/DatabaseTestForm.php
@@ -3,6 +3,8 @@
 namespace Drupal\database_test\Form;
 
 use Drupal\Core\Database\Database;
+use Drupal\Core\Database\Query\PagerSelectExtender;
+use Drupal\Core\Database\Query\TableSortExtender;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\user\Entity\User;
@@ -38,8 +40,8 @@ public function buildForm(array $form, FormStateInterface $form_state) {
     $count_query->addExpression('COUNT([u].[uid])');
 
     $query = $query
-      ->extend('Drupal\Core\Database\Query\PagerSelectExtender')
-      ->extend('Drupal\Core\Database\Query\TableSortExtender');
+      ->extend(PagerSelectExtender::class)
+      ->extend(TableSortExtender::class);
     $query
       ->fields('u', ['uid'])
       ->limit(50)
diff --git a/core/modules/system/tests/modules/entity_test/src/Plugin/Validation/Constraint/EntityTestContainerFactoryPlugin.php b/core/modules/system/tests/modules/entity_test/src/Plugin/Validation/Constraint/EntityTestContainerFactoryPlugin.php
new file mode 100644
index 0000000000..224e7bbd1f
--- /dev/null
+++ b/core/modules/system/tests/modules/entity_test/src/Plugin/Validation/Constraint/EntityTestContainerFactoryPlugin.php
@@ -0,0 +1,31 @@
+<?php
+
+namespace Drupal\entity_test\Plugin\Validation\Constraint;
+
+use Drupal\Component\Plugin\PluginBase;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * A dummy constraint for testing \Drupal\Core\Validation\ConstraintFactory.
+ *
+ * @Constraint(
+ *   id = "EntityTestContainerFactoryPlugin",
+ *   label = @Translation("Constraint that implements ContainerFactoryPluginInterface."),
+ *   type = "entity"
+ * )
+ */
+class EntityTestContainerFactoryPlugin extends PluginBase implements ContainerFactoryPluginInterface {
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+    return new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+    );
+  }
+
+}
diff --git a/core/modules/system/tests/modules/entity_test/src/Plugin/Validation/Constraint/EntityTestDefaultPlugin.php b/core/modules/system/tests/modules/entity_test/src/Plugin/Validation/Constraint/EntityTestDefaultPlugin.php
new file mode 100644
index 0000000000..14b4f58933
--- /dev/null
+++ b/core/modules/system/tests/modules/entity_test/src/Plugin/Validation/Constraint/EntityTestDefaultPlugin.php
@@ -0,0 +1,16 @@
+<?php
+
+namespace Drupal\entity_test\Plugin\Validation\Constraint;
+
+use Drupal\Component\Plugin\PluginBase;
+
+/**
+ * A dummy constraint for testing \Drupal\Core\Validation\ConstraintFactory.
+ *
+ * @Constraint(
+ *   id = "EntityTestDefaultPlugin",
+ *   label = @Translation("Constraint that extends PluginBase."),
+ *   type = "entity"
+ * )
+ */
+class EntityTestDefaultPlugin extends PluginBase {}
diff --git a/core/modules/system/tests/src/Functional/Database/SelectPagerDefaultTest.php b/core/modules/system/tests/src/Functional/Database/SelectPagerDefaultTest.php
index ef2bbcbd73..4da8e0aa23 100644
--- a/core/modules/system/tests/src/Functional/Database/SelectPagerDefaultTest.php
+++ b/core/modules/system/tests/src/Functional/Database/SelectPagerDefaultTest.php
@@ -4,6 +4,7 @@
 
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Database\Database;
+use Drupal\Core\Database\Query\PagerSelectExtender;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
@@ -94,7 +95,7 @@ public function testOddPagerQuery() {
   public function testInnerPagerQuery() {
     $connection = Database::getConnection();
     $query = $connection->select('test', 't')
-      ->extend('Drupal\Core\Database\Query\PagerSelectExtender');
+      ->extend(PagerSelectExtender::class);
     $query
       ->fields('t', ['age'])
       ->orderBy('age')
@@ -117,7 +118,7 @@ public function testInnerPagerQuery() {
    */
   public function testHavingPagerQuery() {
     $query = Database::getConnection()->select('test', 't')
-      ->extend('Drupal\Core\Database\Query\PagerSelectExtender');
+      ->extend(PagerSelectExtender::class);
     $query
       ->fields('t', ['name'])
       ->orderBy('name')
@@ -143,34 +144,37 @@ public function testElementNumbers() {
     \Drupal::getContainer()->get('request_stack')->push($request);
 
     $connection = Database::getConnection();
-    $name = $connection->select('test', 't')
-      ->extend('Drupal\Core\Database\Query\PagerSelectExtender')
+    $query = $connection->select('test', 't')
+      ->extend(PagerSelectExtender::class)
       ->element(2)
       ->fields('t', ['name'])
       ->orderBy('age')
-      ->limit(1)
-      ->execute()
+      ->limit(1);
+    $this->assertSame(2, $query->getElement());
+    $name = $query->execute()
       ->fetchField();
     $this->assertEqual($name, 'Paul', 'Pager query #1 with a specified element ID returned the correct results.');
 
-    // Setting an element smaller than the previous one
-    // should not overwrite the pager $maxElement with a smaller value.
-    $name = $connection->select('test', 't')
-      ->extend('Drupal\Core\Database\Query\PagerSelectExtender')
+    // Setting an element smaller than the previous one should not collide with
+    // the existing pager.
+    $query = $connection->select('test', 't')
+      ->extend(PagerSelectExtender::class)
       ->element(1)
       ->fields('t', ['name'])
       ->orderBy('age')
-      ->limit(1)
-      ->execute()
+      ->limit(1);
+    $this->assertSame(1, $query->getElement());
+    $name = $query->execute()
       ->fetchField();
     $this->assertEqual($name, 'George', 'Pager query #2 with a specified element ID returned the correct results.');
 
-    $name = $connection->select('test', 't')
-      ->extend('Drupal\Core\Database\Query\PagerSelectExtender')
+    $query = $connection->select('test', 't')
+      ->extend(PagerSelectExtender::class)
       ->fields('t', ['name'])
       ->orderBy('age')
-      ->limit(1)
-      ->execute()
+      ->limit(1);
+    $this->assertSame(3, $query->getElement());
+    $name = $query->execute()
       ->fetchField();
     $this->assertEqual($name, 'John', 'Pager query #3 with a generated element ID returned the correct results.');
 
diff --git a/core/modules/user/src/Plugin/Search/UserSearch.php b/core/modules/user/src/Plugin/Search/UserSearch.php
index 66c2dec0b4..28f5d0e833 100644
--- a/core/modules/user/src/Plugin/Search/UserSearch.php
+++ b/core/modules/user/src/Plugin/Search/UserSearch.php
@@ -4,6 +4,7 @@
 
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Database\Connection;
+use Drupal\Core\Database\Query\PagerSelectExtender;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -119,7 +120,7 @@ public function execute() {
     // Run the query to find matching users.
     $query = $this->database
       ->select('users_field_data', 'users')
-      ->extend('Drupal\Core\Database\Query\PagerSelectExtender');
+      ->extend(PagerSelectExtender::class);
     $query->fields('users', ['uid']);
     $query->condition('default_langcode', 1);
     if ($this->currentUser->hasPermission('administer users')) {
diff --git a/core/modules/user/tests/src/Kernel/Migrate/d6/MigrateUserPictureD6FileTest.php b/core/modules/user/tests/src/Kernel/Migrate/d6/MigrateUserPictureD6FileTest.php
index 95616814fe..27d2da1485 100644
--- a/core/modules/user/tests/src/Kernel/Migrate/d6/MigrateUserPictureD6FileTest.php
+++ b/core/modules/user/tests/src/Kernel/Migrate/d6/MigrateUserPictureD6FileTest.php
@@ -24,7 +24,30 @@ protected function setUp(): void {
 
     $this->installEntitySchema('file');
     $this->executeMigration('d6_user_picture_file');
-    $this->setUpMigratedFiles();
+  }
+
+  /**
+   * Tests the Drupal 6 user pictures to Drupal 8 migration.
+   */
+  public function testUserPictures() {
+    $file_ids = [];
+    foreach ($this->migration->getIdMap() as $destination_ids) {
+      $file_ids[] = reset($destination_ids);
+    }
+    $files = File::loadMultiple($file_ids);
+    /** @var \Drupal\file\FileInterface $file */
+    $file = array_shift($files);
+    $this->assertSame('image-test.jpg', $file->getFilename());
+    $this->assertSame('public://image-test.jpg', $file->getFileUri());
+    $this->assertSame('2', $file->getOwnerId());
+    $this->assertSame('1901', $file->getSize());
+    $this->assertSame('image/jpeg', $file->getMimeType());
+
+    $file = array_shift($files);
+    $this->assertSame('image-test.png', $file->getFilename());
+    $this->assertSame('public://image-test.png', $file->getFileUri());
+    $this->assertSame('8', $file->getOwnerId());
+    $this->assertEmpty($files);
   }
 
   /**
@@ -58,6 +81,7 @@ protected function assertEntity($fid, $name, $size, $uri, $type, $uid) {
    * Tests the D6 user pictures migration in combination with D6 file.
    */
   public function testUserPicturesWithD6File() {
+    $this->setUpMigratedFiles();
     $this->assertEntity(1, 'image-test.jpg', '1901', 'public://image-test.jpg', 'image/jpeg', '2');
     $this->assertEntity(2, 'image-test.png', '125', 'public://image-test.png', 'image/png', '8');
     $this->assertEntity(3, 'Image1.png', '39325', 'public://image-1.png', 'image/png', '1');
diff --git a/core/modules/user/tests/src/Kernel/Migrate/d6/MigrateUserPictureFileTest.php b/core/modules/user/tests/src/Kernel/Migrate/d6/MigrateUserPictureFileTest.php
deleted file mode 100644
index 09222aaf12..0000000000
--- a/core/modules/user/tests/src/Kernel/Migrate/d6/MigrateUserPictureFileTest.php
+++ /dev/null
@@ -1,52 +0,0 @@
-<?php
-
-namespace Drupal\Tests\user\Kernel\Migrate\d6;
-
-use Drupal\file\Entity\File;
-use Drupal\Tests\file\Kernel\Migrate\d6\FileMigrationTestTrait;
-use Drupal\Tests\migrate_drupal\Kernel\d6\MigrateDrupal6TestBase;
-
-/**
- * User pictures migration.
- *
- * @group migrate_drupal_6
- */
-class MigrateUserPictureFileTest extends MigrateDrupal6TestBase {
-
-  use FileMigrationTestTrait;
-
-  /**
-   * {@inheritdoc}
-   */
-  protected function setUp(): void {
-    parent::setUp();
-
-    $this->installEntitySchema('file');
-    $this->executeMigration('d6_user_picture_file');
-  }
-
-  /**
-   * Tests the Drupal 6 user pictures to Drupal 8 migration.
-   */
-  public function testUserPictures() {
-    $file_ids = [];
-    foreach ($this->migration->getIdMap() as $destination_ids) {
-      $file_ids[] = reset($destination_ids);
-    }
-    $files = File::loadMultiple($file_ids);
-    /** @var \Drupal\file\FileInterface $file */
-    $file = array_shift($files);
-    $this->assertSame('image-test.jpg', $file->getFilename());
-    $this->assertSame('public://image-test.jpg', $file->getFileUri());
-    $this->assertSame('2', $file->getOwnerId());
-    $this->assertSame('1901', $file->getSize());
-    $this->assertSame('image/jpeg', $file->getMimeType());
-
-    $file = array_shift($files);
-    $this->assertSame('image-test.png', $file->getFilename());
-    $this->assertSame('public://image-test.png', $file->getFileUri());
-    $this->assertSame('8', $file->getOwnerId());
-    $this->assertEmpty($files);
-  }
-
-}
diff --git a/core/tests/Drupal/KernelTests/Core/Database/SelectComplexTest.php b/core/tests/Drupal/KernelTests/Core/Database/SelectComplexTest.php
index a844664336..a0062b07cd 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/SelectComplexTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/SelectComplexTest.php
@@ -4,6 +4,7 @@
 
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Database\Database;
+use Drupal\Core\Database\Query\PagerSelectExtender;
 use Drupal\Core\Database\RowCountException;
 use Drupal\user\Entity\User;
 
@@ -210,7 +211,7 @@ public function testCountQuery() {
    */
   public function testHavingCountQuery() {
     $query = $this->connection->select('test')
-      ->extend('Drupal\Core\Database\Query\PagerSelectExtender')
+      ->extend(PagerSelectExtender::class)
       ->groupBy('age')
       ->having('[age] + 1 > 0');
     $query->addField('test', 'age');
diff --git a/core/tests/Drupal/Tests/Core/Database/SelectTest.php b/core/tests/Drupal/KernelTests/Core/Database/SelectExtenderTest.php
similarity index 90%
rename from core/tests/Drupal/Tests/Core/Database/SelectTest.php
rename to core/tests/Drupal/KernelTests/Core/Database/SelectExtenderTest.php
index b28bde61ac..5a23f9a250 100644
--- a/core/tests/Drupal/Tests/Core/Database/SelectTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/SelectExtenderTest.php
@@ -1,19 +1,20 @@
 <?php
 
-namespace Drupal\Tests\Core\Database;
+namespace Drupal\KernelTests\Core\Database;
 
 use Composer\Autoload\ClassLoader;
+use Drupal\Core\Database\Query\SelectExtender;
+use Drupal\KernelTests\KernelTestBase;
 use Drupal\Tests\Core\Database\Stub\StubConnection;
 use Drupal\Tests\Core\Database\Stub\StubPDO;
-use Drupal\Tests\UnitTestCase;
 
 /**
- * Tests the Connection class.
+ * Tests the Select query extender classes.
  *
  * @coversDefaultClass \Drupal\Core\Database\Query\Select
  * @group Database
  */
-class SelectTest extends UnitTestCase {
+class SelectExtenderTest extends KernelTestBase {
 
   /**
    * Data provider for testExtend().
@@ -24,7 +25,7 @@ class SelectTest extends UnitTestCase {
    *   - The database driver namespace.
    *   - The namespaced class name for which to extend.
    */
-  public function providerExtend() {
+  public function providerExtend(): array {
     return [
       [
         'Drupal\Core\Database\Query\PagerSelectExtender',
@@ -114,7 +115,7 @@ public function providerExtend() {
    * @covers \Drupal\Core\Database\Query\SelectExtender::extend
    * @dataProvider providerExtend
    */
-  public function testExtend($expected, $namespace, $extend) {
+  public function testExtend(string $expected, string $namespace, string $extend): void {
     $additional_class_loader = new ClassLoader();
     $additional_class_loader->addPsr4("Drupal\\corefake\\Driver\\Database\\corefake\\", __DIR__ . "/../../../../../tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefake");
     $additional_class_loader->addPsr4("Drupal\\corefake\\Driver\\Database\\corefakeWithAllCustomClasses\\", __DIR__ . "/../../../../../tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefakeWithAllCustomClasses");
@@ -128,8 +129,8 @@ public function testExtend($expected, $namespace, $extend) {
     $this->assertEquals($expected, get_class($select));
 
     // Get an instance of the class \Drupal\Core\Database\Query\SelectExtender.
-    $select_extender = $connection->select('test')->extend('Drupal\Core\Database\Query\SelectExtender');
-    $this->assertEquals('Drupal\Core\Database\Query\SelectExtender', get_class($select_extender));
+    $select_extender = $connection->select('test')->extend(SelectExtender::class);
+    $this->assertEquals(SelectExtender::class, get_class($select_extender));
 
     // Tests the method \Drupal\Core\Database\Query\SelectExtender::extend().
     $select_extender_extended = $select_extender->extend($extend);
diff --git a/core/tests/Drupal/KernelTests/Core/Database/SelectTest.php b/core/tests/Drupal/KernelTests/Core/Database/SelectTest.php
index b051bbadad..2b2cc1e2f4 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/SelectTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/SelectTest.php
@@ -5,6 +5,7 @@
 use Drupal\Core\Database\InvalidQueryException;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Database\DatabaseExceptionWrapper;
+use Drupal\Core\Database\Query\SelectExtender;
 
 /**
  * Tests the Select query builder.
@@ -280,7 +281,7 @@ public function testAlwaysFalseCondition() {
    */
   public function testExtenderAlwaysFalseCondition() {
     $names = $this->connection->select('test', 'test')
-      ->extend('Drupal\Core\Database\Query\SelectExtender')
+      ->extend(SelectExtender::class)
       ->fields('test', ['name'])
       ->condition('age', 27)
       ->execute()->fetchCol();
@@ -289,7 +290,7 @@ public function testExtenderAlwaysFalseCondition() {
     $this->assertSame($names[0], 'George');
 
     $names = $this->connection->select('test', 'test')
-      ->extend('Drupal\Core\Database\Query\SelectExtender')
+      ->extend(SelectExtender::class)
       ->fields('test', ['name'])
       ->condition('age', 27)
       ->alwaysFalse()
diff --git a/core/tests/Drupal/KernelTests/Core/Database/TaggingTest.php b/core/tests/Drupal/KernelTests/Core/Database/TaggingTest.php
index d667d22915..09550dca19 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/TaggingTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/TaggingTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\KernelTests\Core\Database;
 
+use Drupal\Core\Database\Query\SelectExtender;
+
 /**
  * Tests the tagging capabilities of the Select builder.
  *
@@ -60,7 +62,7 @@ public function testHasAnyTag() {
    */
   public function testExtenderHasTag() {
     $query = $this->connection->select('test')
-      ->extend('Drupal\Core\Database\Query\SelectExtender');
+      ->extend(SelectExtender::class);
     $query->addField('test', 'name');
     $query->addField('test', 'age', 'age');
 
@@ -75,7 +77,7 @@ public function testExtenderHasTag() {
    */
   public function testExtenderHasAllTags() {
     $query = $this->connection->select('test')
-      ->extend('Drupal\Core\Database\Query\SelectExtender');
+      ->extend(SelectExtender::class);
     $query->addField('test', 'name');
     $query->addField('test', 'age', 'age');
 
@@ -91,7 +93,7 @@ public function testExtenderHasAllTags() {
    */
   public function testExtenderHasAnyTag() {
     $query = $this->connection->select('test')
-      ->extend('Drupal\Core\Database\Query\SelectExtender');
+      ->extend(SelectExtender::class);
     $query->addField('test', 'name');
     $query->addField('test', 'age', 'age');
 
diff --git a/core/tests/Drupal/KernelTests/Core/Pager/PagerManagerTest.php b/core/tests/Drupal/KernelTests/Core/Pager/PagerManagerTest.php
index 3f1442141c..2f5d31161a 100644
--- a/core/tests/Drupal/KernelTests/Core/Pager/PagerManagerTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Pager/PagerManagerTest.php
@@ -53,4 +53,36 @@ public function testFindPage() {
     $this->assertEquals(10, $pager_manager->findPage(1));
   }
 
+  /**
+   * @covers ::getMaxPagerElementId
+   *
+   * @dataProvider providerTestGetMaxPagerElementId
+   */
+  public function testGetMaxPagerElementId(array $elements, int $expected_max_element_id): void {
+    /* @var $pager_manager \Drupal\Core\Pager\PagerManagerInterface */
+    $pager_manager = $this->container->get('pager.manager');
+
+    foreach ($elements as $element) {
+      $pager_manager->createPager(30, 10, $element);
+    }
+
+    $this->assertEquals($expected_max_element_id, $pager_manager->getMaxPagerElementId());
+  }
+
+  /**
+   * Provides test cases for PagerManagerTest::testGetMaxPagerElementId().
+   *
+   * @return array
+   *   An array of test cases, each which the following values:
+   *   - Array of elements to pass to PagerManager::createPager().
+   *   - The expected value returned by PagerManager::getMaxPagerElementId().
+   */
+  public function providerTestGetMaxPagerElementId(): array {
+    return [
+      'no_pager' => [[], -1],
+      'single_pager' => [[0], 0],
+      'multiple_pagers' => [[30, 10, 20], 30],
+    ];
+  }
+
 }
diff --git a/core/tests/Drupal/KernelTests/Core/Validation/ConstraintFactoryTest.php b/core/tests/Drupal/KernelTests/Core/Validation/ConstraintFactoryTest.php
new file mode 100644
index 0000000000..dbbde13f7d
--- /dev/null
+++ b/core/tests/Drupal/KernelTests/Core/Validation/ConstraintFactoryTest.php
@@ -0,0 +1,48 @@
+<?php
+
+namespace Drupal\KernelTests\Core\Validation;
+
+use Drupal\Component\Plugin\PluginBase;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\KernelTests\KernelTestBase;
+use Symfony\Component\Validator\Constraint;
+
+/**
+ * @coversDefaultClass \Drupal\Core\Validation\ConstraintFactory
+ *
+ * @group Validation
+ */
+class ConstraintFactoryTest extends KernelTestBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = ['entity_test'];
+
+  /**
+   * @covers ::createInstance
+   */
+  public function testCreateInstance() {
+    $constraint_manager = \Drupal::typedDataManager()->getValidationConstraintManager();
+
+    // If the plugin is a \Symfony\Component\Validator\Constraint, they will be
+    // created first.
+    $this->assertInstanceOf(Constraint::class, $constraint_manager->create('Uuid', []));
+
+    // If the plugin implements the
+    // \Drupal\Core\Plugin\ContainerFactoryPluginInterface, they will be created
+    // second.
+    $container_factory_plugin = $constraint_manager->create('EntityTestContainerFactoryPlugin', []);
+    $this->assertNotInstanceOf(Constraint::class, $container_factory_plugin);
+    $this->assertInstanceOf(ContainerFactoryPluginInterface::class, $container_factory_plugin);
+
+    // Plugins that are not a \Symfony\Component\Validator\Constraint or do not
+    // implement the \Drupal\Core\Plugin\ContainerFactoryPluginInterface are
+    // created last.
+    $default_plugin = $constraint_manager->create('EntityTestDefaultPlugin', []);
+    $this->assertNotInstanceOf(Constraint::class, $default_plugin);
+    $this->assertNotInstanceOf(ContainerFactoryPluginInterface::class, $default_plugin);
+    $this->assertInstanceOf(PluginBase::class, $default_plugin);
+  }
+
+}
diff --git a/core/tests/Drupal/Tests/Core/DependencyInjection/YamlFileLoaderTest.php b/core/tests/Drupal/Tests/Core/DependencyInjection/YamlFileLoaderTest.php
index cdc1f18b1a..011db5f393 100644
--- a/core/tests/Drupal/Tests/Core/DependencyInjection/YamlFileLoaderTest.php
+++ b/core/tests/Drupal/Tests/Core/DependencyInjection/YamlFileLoaderTest.php
@@ -26,8 +26,9 @@ protected function setUp(): void {
   public function testParseDefinitionsWithProvider() {
     $yml = <<<YAML
 services:
-  example_service:
+  example_service_1:
     class: \Drupal\Core\ExampleClass
+  example_service_2: '@example_service_1'
   example_private_service:
     class: \Drupal\Core\ExampleClass
     public: false
@@ -45,11 +46,12 @@ class: \Drupal\Core\ExampleClass
     $yaml_file_loader = new YamlFileLoader($builder);
     $yaml_file_loader->load('vfs://drupal/modules/example/example.yml');
 
-    $this->assertEquals(['_provider' => [['provider' => 'example']]], $builder->getDefinition('example_service')->getTags());
-    $this->assertTrue($builder->getDefinition('example_service')->isPublic());
+    $this->assertEquals(['_provider' => [['provider' => 'example']]], $builder->getDefinition('example_service_1')->getTags());
+    $this->assertEquals('example_service_1', $builder->getAlias('example_service_2')->__toString());
+    $this->assertTrue($builder->getDefinition('example_service_1')->isPublic());
     $this->assertFalse($builder->getDefinition('example_private_service')->isPublic());
     $builder->compile();
-    $this->assertTrue($builder->has('example_service'));
+    $this->assertTrue($builder->has('example_service_1'));
     $this->assertFalse($builder->has('example_private_service'));
   }
 
