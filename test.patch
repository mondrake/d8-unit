diff --git a/core/modules/inline_form_errors/tests/src/Unit/FormErrorHandlerTest.php b/core/modules/inline_form_errors/tests/src/Unit/FormErrorHandlerTest.php
index 962f107955..fd3880a7ce 100644
--- a/core/modules/inline_form_errors/tests/src/Unit/FormErrorHandlerTest.php
+++ b/core/modules/inline_form_errors/tests/src/Unit/FormErrorHandlerTest.php
@@ -120,12 +120,19 @@ protected function setUp(): void {
   public function testErrorMessagesInline() {
     $this->messenger->expects($this->exactly(4))
       ->method('addError')
-      ->withConsecutive(
-        ['no title given', FALSE],
-        ['element is invisible', FALSE],
-        ['this missing element is invalid', FALSE],
-        ['3 errors have been found: <ul-comma-list-mock><li-mock>Test 1</li-mock><li-mock>Test 2 &amp; a half</li-mock><li-mock>Test 3</li-mock></ul-comma-list-mock>', FALSE],
-      );
+      ->willReturnCallback(function (...$args) {
+        static $callSequence = [
+          ['no title given', FALSE],
+          ['element is invisible', FALSE],
+          ['this missing element is invalid', FALSE],
+          [
+            '3 errors have been found: <ul-comma-list-mock><li-mock>Test 1</li-mock><li-mock>Test 2 &amp; a half</li-mock><li-mock>Test 3</li-mock></ul-comma-list-mock>',
+            FALSE,
+          ],
+        ];
+        $expectedArgs = array_shift($callSequence);
+        $this->assertSame($expectedArgs, $args);
+      });
 
     $this->renderer->expects($this->once())
       ->method('renderPlain')
@@ -164,15 +171,19 @@ public function testErrorMessagesNotInline() {
     // Asserts all messages are summarized.
     $this->messenger->expects($this->exactly(7))
       ->method('addMessage')
-      ->withConsecutive(
-        ['invalid', 'error', FALSE],
-        ['invalid', 'error', FALSE],
-        ['invalid', 'error', FALSE],
-        ['no error message', 'error', FALSE],
-        ['no title given', 'error', FALSE],
-        ['element is invisible', 'error', FALSE],
-        ['this missing element is invalid', 'error', FALSE],
-      );
+      ->willReturnCallback(function (...$args) {
+        static $callSequence = [
+          ['invalid', 'error', FALSE],
+          ['invalid', 'error', FALSE],
+          ['invalid', 'error', FALSE],
+          ['no error message', 'error', FALSE],
+          ['no title given', 'error', FALSE],
+          ['element is invisible', 'error', FALSE],
+          ['this missing element is invalid', 'error', FALSE],
+        ];
+        $expectedArgs = array_shift($callSequence);
+        $this->assertSame($expectedArgs, $args);
+      });
 
     $this->renderer->expects($this->never())
       ->method('renderPlain');
diff --git a/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapEnsureTablesTest.php b/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapEnsureTablesTest.php
index f4a4dc2596..3a02101d71 100644
--- a/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapEnsureTablesTest.php
+++ b/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapEnsureTablesTest.php
@@ -124,12 +124,16 @@ public function testEnsureTablesNotExist() {
         ['migrate_map_sql_idmap_test', FALSE],
         ['migrate_message_sql_idmap_test', FALSE],
       ]);
+
+    $callSequence = [
+      [['migrate_map_sql_idmap_test', $map_table_schema]],
+      [['migrate_message_sql_idmap_test', $table_schema]],
+    ];
     $schema->expects($this->exactly(2))
       ->method('createTable')
-      ->withConsecutive(
-        ['migrate_map_sql_idmap_test', $map_table_schema],
-        ['migrate_message_sql_idmap_test', $table_schema],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $this->runEnsureTablesTest($schema);
   }
@@ -152,36 +156,45 @@ public function testEnsureTablesExist() {
         ['migrate_map_sql_idmap_test', 'hash', FALSE],
         ['migrate_map_sql_idmap_test', 'source_ids_hash', FALSE],
       ]);
-    $schema->expects($this->exactly(3))
-      ->method('addField')
-      ->withConsecutive(
+    $callSequence = [
+      [[
+        'migrate_map_sql_idmap_test',
+        'rollback_action',
         [
-          'migrate_map_sql_idmap_test', 'rollback_action', [
-            'type' => 'int',
-            'size' => 'tiny',
-            'unsigned' => TRUE,
-            'not null' => TRUE,
-            'default' => 0,
-            'description' => 'Flag indicating what to do for this item on rollback',
-          ],
+          'type' => 'int',
+          'size' => 'tiny',
+          'unsigned' => TRUE,
+          'not null' => TRUE,
+          'default' => 0,
+          'description' => 'Flag indicating what to do for this item on rollback',
         ],
+      ]],
+      [[
+        'migrate_map_sql_idmap_test',
+        'hash',
         [
-          'migrate_map_sql_idmap_test', 'hash', [
-            'type' => 'varchar',
-            'length' => '64',
-            'not null' => FALSE,
-            'description' => 'Hash of source row data, for detecting changes',
-          ],
+          'type' => 'varchar',
+          'length' => '64',
+          'not null' => FALSE,
+          'description' => 'Hash of source row data, for detecting changes',
         ],
+      ]],
+      [[
+        'migrate_map_sql_idmap_test',
+        'source_ids_hash',
         [
-          'migrate_map_sql_idmap_test', 'source_ids_hash', [
-            'type' => 'varchar',
-            'length' => '64',
-            'not null' => TRUE,
-            'description' => 'Hash of source ids. Used as primary key',
-          ],
+          'type' => 'varchar',
+          'length' => '64',
+          'not null' => TRUE,
+          'description' => 'Hash of source ids. Used as primary key',
         ],
-      );
+      ]],
+  ];
+  $schema->expects($this->exactly(3))
+      ->method('addField')
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $this->runEnsureTablesTest($schema);
   }
diff --git a/core/modules/pgsql/tests/src/Unit/SchemaTest.php b/core/modules/pgsql/tests/src/Unit/SchemaTest.php
index 3b9192fdea..1cac9516d9 100644
--- a/core/modules/pgsql/tests/src/Unit/SchemaTest.php
+++ b/core/modules/pgsql/tests/src/Unit/SchemaTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\pgsql\Unit;
 
+use Drupal\Core\Database\StatementInterface;
 use Drupal\pgsql\Driver\Database\pgsql\Schema;
 use Drupal\Tests\UnitTestCase;
 
@@ -48,21 +49,20 @@ public function testComputedConstraintName($table_name, $name, $expected) {
     $max_identifier_length = 63;
     $schema = new Schema($this->connection);
 
-    $statement = $this->createMock('\Drupal\Core\Database\StatementInterface');
+    $statement = $this->createMock(StatementInterface::class);
     $statement->expects($this->any())
       ->method('fetchField')
       ->willReturn($max_identifier_length);
 
+    $callSequence = [
+      [[$this->anything()], $statement],
+      [["SELECT 1 FROM pg_constraint WHERE conname = '{$expected}'"], $this->createMock(StatementInterface::class)],
+    ];
     $this->connection->expects($this->exactly(2))
       ->method('query')
-      ->withConsecutive(
-        [$this->anything()],
-        ["SELECT 1 FROM pg_constraint WHERE conname = '$expected'"],
-      )
-      ->willReturnOnConsecutiveCalls(
-        $statement,
-        $this->createMock('\Drupal\Core\Database\StatementInterface'),
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): StatementInterface {
+        return $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $schema->constraintExists($table_name, $name);
   }
diff --git a/core/tests/Drupal/Tests/Core/TempStore/PrivateTempStoreTest.php b/core/tests/Drupal/Tests/Core/TempStore/PrivateTempStoreTest.php
index efc048cf36..a224e427e9 100644
--- a/core/tests/Drupal/Tests/Core/TempStore/PrivateTempStoreTest.php
+++ b/core/tests/Drupal/Tests/Core/TempStore/PrivateTempStoreTest.php
@@ -102,16 +102,16 @@ protected function setUp(): void {
   public function testGet() {
     $this->keyValue->expects($this->exactly(3))
       ->method('get')
-      ->withConsecutive(
-        ['1:test_2'],
-        ['1:test'],
-        ['1:test'],
-      )
-      ->willReturnOnConsecutiveCalls(
-        FALSE,
-        $this->ownObject,
-        $this->otherObject,
-      );
+      ->willReturnCallback(function (...$args) {
+        static $callSequence = [
+          [['1:test_2'], FALSE],
+          [['1:test'], $this->ownObject],
+          [['1:test'], $this->otherObject],
+        ];
+        [$expectedArgs, $return] = array_shift($callSequence);
+        $this->assertSame($expectedArgs, $args);
+        return $return;
+      });
 
     $this->assertNull($this->tempStore->get('test_2'));
     $this->assertSame($this->ownObject->data, $this->tempStore->get('test'));
@@ -248,16 +248,16 @@ public function testDelete() {
 
     $this->keyValue->expects($this->exactly(3))
       ->method('get')
-      ->withConsecutive(
-        ['1:test_1'],
-        ['1:test_2'],
-        ['1:test_3'],
-      )
-      ->willReturnOnConsecutiveCalls(
-        FALSE,
-        $this->ownObject,
-        $this->otherObject,
-      );
+      ->willReturnCallback(function (...$args) {
+        static $callSequence = [
+          [['1:test_1'], FALSE],
+          [['1:test_2'], $this->ownObject],
+          [['1:test_3'], $this->otherObject],
+        ];
+        [$expectedArgs, $return] = array_shift($callSequence);
+        $this->assertSame($expectedArgs, $args);
+        return $return;
+      });
     $this->keyValue->expects($this->once())
       ->method('delete')
       ->with('1:test_2');
diff --git a/core/tests/Drupal/Tests/Core/TempStore/SharedTempStoreTest.php b/core/tests/Drupal/Tests/Core/TempStore/SharedTempStoreTest.php
index 4df06f7a4c..1aa8d055e1 100644
--- a/core/tests/Drupal/Tests/Core/TempStore/SharedTempStoreTest.php
+++ b/core/tests/Drupal/Tests/Core/TempStore/SharedTempStoreTest.php
@@ -101,14 +101,15 @@ protected function setUp(): void {
   public function testGet() {
     $this->keyValue->expects($this->exactly(2))
       ->method('get')
-      ->withConsecutive(
-        ['test_2'],
-        ['test'],
-      )
-      ->willReturnOnConsecutiveCalls(
-        FALSE,
-        $this->ownObject,
-      );
+      ->willReturnCallback(function (...$args) {
+        static $callSequence = [
+          [['test_2'], FALSE],
+          [['test'], $this->ownObject],
+        ];
+        [$expectedArgs, $return] = array_shift($callSequence);
+        $this->assertSame($expectedArgs, $args);
+        return $return;
+      });
 
     $this->assertNull($this->tempStore->get('test_2'));
     $this->assertSame($this->ownObject->data, $this->tempStore->get('test'));
@@ -122,16 +123,16 @@ public function testGet() {
   public function testGetIfOwner() {
     $this->keyValue->expects($this->exactly(3))
       ->method('get')
-      ->withConsecutive(
-        ['test_2'],
-        ['test'],
-        ['test'],
-      )
-      ->willReturnOnConsecutiveCalls(
-        FALSE,
-        $this->ownObject,
-        $this->otherObject,
-      );
+      ->willReturnCallback(function (...$args) {
+        static $callSequence = [
+          [['test_2'], FALSE],
+          [['test'], $this->ownObject],
+          [['test'], $this->otherObject],
+        ];
+        [$expectedArgs, $return] = array_shift($callSequence);
+        $this->assertSame($expectedArgs, $args);
+        return $return;
+      });
 
     $this->assertNull($this->tempStore->getIfOwner('test_2'));
     $this->assertSame($this->ownObject->data, $this->tempStore->getIfOwner('test'));
@@ -328,16 +329,16 @@ public function testDeleteIfOwner() {
 
     $this->keyValue->expects($this->exactly(3))
       ->method('get')
-      ->withConsecutive(
-        ['test_1'],
-        ['test_2'],
-        ['test_3'],
-      )
-      ->willReturnOnConsecutiveCalls(
-        FALSE,
-        $this->ownObject,
-        $this->otherObject,
-      );
+      ->willReturnCallback(function (...$args) {
+        static $callSequence = [
+          [['test_1'], FALSE],
+          [['test_2'], $this->ownObject],
+          [['test_3'], $this->otherObject],
+        ];
+        [$expectedArgs, $return] = array_shift($callSequence);
+        $this->assertSame($expectedArgs, $args);
+        return $return;
+      });
     $this->keyValue->expects($this->once())
       ->method('delete')
       ->with('test_2');
diff --git a/core/tests/Drupal/Tests/UnitTestCase.php b/core/tests/Drupal/Tests/UnitTestCase.php
index 44f46e6bb8..dafa344876 100644
--- a/core/tests/Drupal/Tests/UnitTestCase.php
+++ b/core/tests/Drupal/Tests/UnitTestCase.php
@@ -11,6 +11,7 @@
 use Drupal\Core\StringTranslation\PluralTranslatableMarkup;
 use Drupal\Tests\Traits\PhpUnitWarnings;
 use Drupal\TestTools\TestVarDumper;
+use PHPUnit\Framework\Constraint\Constraint;
 use PHPUnit\Framework\TestCase;
 use Prophecy\PhpUnit\ProphecyTrait;
 use Symfony\Component\VarDumper\VarDumper;
@@ -259,4 +260,30 @@ protected function getClassResolverStub() {
     return $class_resolver;
   }
 
+  /**
+   * @todo
+   */
+  protected function consecutiveCallsCallback(array &$expectedConsecutiveCalls, mixed ...$args): mixed {
+    $call = array_shift($expectedConsecutiveCalls);
+    $expectedArgs = $call[0];
+    $actualArgs = $args[0];
+
+dump([__METHOD__, 'bbb', $expectedArgs, $actualArgs]);
+    for ($i = 0; $i < count($expectedArgs); $i++) {
+dump([__METHOD__, 'ccc', $i, $expectedArgs[$i], $actualArgs[$i]]);
+      if ($expectedArgs[$i] instanceof Constraint) {
+        $expectedArgs[$i]->evaluate($actualArgs[$i]);
+      }
+      else {
+        $this->assertEquals($expectedArgs[$i], $actualArgs[$i]);
+      }
+    }
+
+    if (array_key_exists(1, $call)) {
+      return $call[1];
+    }
+
+    return NULL;
+  }
+
 }
