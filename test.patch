diff --git a/core/includes/install.core.inc b/core/includes/install.core.inc
index 15ec5704b3..eb606db3fa 100644
--- a/core/includes/install.core.inc
+++ b/core/includes/install.core.inc
@@ -399,9 +399,9 @@ function install_begin_request($class_loader, &$install_state) {
 
   if ($install_state['settings_verified']) {
     try {
-      $system_schema = system_schema();
+      $system_schema = system_schema(returnArraySchema: FALSE);
       end($system_schema);
-      $table = key($system_schema);
+      $table = current($system_schema)->name;
       $install_state['base_system_verified'] = Database::getConnection()->schema()->tableExists($table);
     }
     catch (DatabaseExceptionWrapper $e) {
@@ -1177,9 +1177,9 @@ function install_verify_database_settings($site_path) {
  *   installing the System module.
  */
 function install_verify_database_ready() {
-  $system_schema = system_schema();
+  $system_schema = system_schema(returnArraySchema: FALSE);
   end($system_schema);
-  $table = key($system_schema);
+  $table = current($system_schema)->name;
 
   $existing_install = FALSE;
   if (Database::getConnectionInfo()) {
diff --git a/core/lib/Drupal/Core/Batch/BatchStorage.php b/core/lib/Drupal/Core/Batch/BatchStorage.php
index a7733535ba..c00acaabd8 100644
--- a/core/lib/Drupal/Core/Batch/BatchStorage.php
+++ b/core/lib/Drupal/Core/Batch/BatchStorage.php
@@ -6,6 +6,13 @@
 use Drupal\Core\Access\CsrfTokenGenerator;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\DatabaseException;
+use Drupal\Core\Database\SchemaDefinition\Column;
+use Drupal\Core\Database\SchemaDefinition\ColumnSize;
+use Drupal\Core\Database\SchemaDefinition\ColumnType;
+use Drupal\Core\Database\SchemaDefinition\ConvertDefinition;
+use Drupal\Core\Database\SchemaDefinition\Index;
+use Drupal\Core\Database\SchemaDefinition\PrimaryKey;
+use Drupal\Core\Database\SchemaDefinition\Table;
 use Symfony\Component\HttpFoundation\Session\SessionInterface;
 
 class BatchStorage implements BatchStorageInterface {
@@ -195,6 +202,9 @@ protected function ensureTableExists() {
     try {
       $database_schema = $this->connection->schema();
       $schema_definition = $this->schemaDefinition();
+      if (!$this->connection->supportsSchemaDefinition()) {
+        $schema_definition = ConvertDefinition::tableToArray($schema_definition);
+      }
       $database_schema->createTable(static::TABLE_NAME, $schema_definition);
     }
     // If another process has already created the batch table, attempting to
@@ -232,38 +242,46 @@ protected function catchException(\Exception $e) {
    * @internal
    */
   public function schemaDefinition() {
-    return [
-      'description' => 'Stores details about batches (processes that run in multiple HTTP requests).',
-      'fields' => [
-        'bid' => [
-          'description' => 'Primary Key: Unique batch ID.',
-          'type' => 'serial',
-          'unsigned' => TRUE,
-          'not null' => TRUE,
-        ],
-        'token' => [
-          'description' => "A string token generated against the current user's session id and the batch id, used to ensure that only the user who submitted the batch can effectively access it.",
-          'type' => 'varchar_ascii',
-          'length' => 64,
-          'not null' => TRUE,
-        ],
-        'timestamp' => [
-          'description' => 'A Unix timestamp indicating when this batch was submitted for processing. Stale batches are purged at cron time.',
-          'type' => 'int',
-          'not null' => TRUE,
-        ],
-        'batch' => [
-          'description' => 'A serialized array containing the processing data for the batch.',
-          'type' => 'blob',
-          'not null' => FALSE,
-          'size' => 'big',
-        ],
+    return new Table(
+      name: static::TABLE_NAME,
+      description: 'Stores details about batches (processes that run in multiple HTTP requests).',
+      columns: [
+        new Column(
+          name: 'bid',
+          description: 'Primary Key: Unique batch ID.',
+          type: ColumnType::Serial,
+          unsigned: TRUE,
+          notNull: TRUE,
+        ),
+        new Column(
+          name: 'token',
+          description: "A string token generated against the current user's session id and the batch id, used to ensure that only the user who submitted the batch can effectively access it.",
+          type: ColumnType::VarcharAscii,
+          length: 64,
+          notNull: TRUE,
+        ),
+        new Column(
+          name: 'timestamp',
+          description: 'A Unix timestamp indicating when this batch was submitted for processing. Stale batches are purged at cron time.',
+          type: ColumnType::Int,
+          notNull: TRUE,
+        ),
+        new Column(
+          name: 'batch',
+          description: 'A serialized array containing the processing data for the batch.',
+          type: ColumnType::Blob,
+          size: ColumnSize::Big,
+          notNull: FALSE,
+        ),
       ],
-      'primary key' => ['bid'],
-      'indexes' => [
-        'token' => ['token'],
+      primaryKey: new PrimaryKey(['bid']),
+      indexes: [
+        new Index(
+          name: 'token',
+          columns: ['token'],
+        ),
       ],
-    ];
+    );
   }
 
 }
diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index cdaf0d19dd..498c6d829a 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -1767,6 +1767,19 @@ public function supportsTransactionalDDL() {
     return $this->transactionalDDLSupport;
   }
 
+  /**
+   * Determines if this driver can handle SchemaDefinition objects.
+   *
+   * @return bool
+   *   TRUE if this driver can handle SchemaDefinition objects directly, FALSE
+   *   if they have to be converted to the legacy array-based specifications.
+   *
+   * @internal
+   */
+  public function supportsSchemaDefinition(): bool {
+    return FALSE;
+  }
+
   /**
    * Returns the name of the database engine accessed by this driver.
    *
diff --git a/core/lib/Drupal/Core/Database/Exception/SchemaDefinitionException.php b/core/lib/Drupal/Core/Database/Exception/SchemaDefinitionException.php
new file mode 100644
index 0000000000..fc0b178ac6
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Exception/SchemaDefinitionException.php
@@ -0,0 +1,12 @@
+<?php
+
+namespace Drupal\Core\Database\Exception;
+
+use Drupal\Core\Database\DatabaseException;
+use Drupal\Core\Database\SchemaException;
+
+/**
+ * Exception thrown by the Schema Definition API.
+ */
+class SchemaDefinitionException extends SchemaException implements DatabaseException {
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/Column.php b/core/lib/Drupal/Core/Database/SchemaDefinition/Column.php
new file mode 100644
index 0000000000..e34c037703
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/Column.php
@@ -0,0 +1,89 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a database table's column.
+ */
+final class Column implements SchemaDefinitionInterface {
+
+  /**
+   * Constructor.
+   *
+   * @param string $name
+   *   The column name.
+   * @param ColumnType $type
+   *   (Optional) The column data type, generic. Each database will map this to
+   *   its own definition. This argument is mandatory unless $dbSpecificType is
+   *   specified. See
+   *   \Drupal\Core\Database\SchemaDefinition\ColumnType for allowed values.
+   * @param Property|string $description
+   *   (Optional) A string in non-markup plain text describing this field and
+   *   its purpose. References to other tables should be enclosed in curly
+   *   brackets. For example, the users_data table 'uid' field description
+   *   might contain "The {users}.uid this record affects."
+   * @param Property|bool $serialize
+   *   (Optional) A boolean indicating whether the field will be stored as a
+   *   serialized string.
+   * @param ColumnSize $size
+   *   (Optional) The column data size. This is a hint about the largest value
+   *   the column will store. See
+   *   \Drupal\Core\Database\SchemaDefinition\ColumnSize for allowed values.
+   * @param Property|bool $notNull
+   *   (Optional)  If true, no NULL values will be allowed in this database
+   *   column. Defaults to false.
+   * @param Property|string|int|null $default
+   *   (Optional) The field's default value. The PHP type of the value
+   *   matters: '', '0', and 0 are all different. If you specify '0' as the
+   *   default value for a type 'int' field it will not work because '0' is a
+   *   string containing the character "zero", not an integer.
+   * @param Property|int $length
+   *   (Optional) The maximal length of a type 'char', 'varchar' or 'text'
+   *   field. Ignored for other field types.
+   * @param Property|bool $unsigned
+   *   (Optional) A boolean indicating whether a type 'int', 'float' and
+   *   'numeric' only is signed or unsigned. Defaults to FALSE. Ignored for
+   *    other field types.
+   * @param Property|int $precision
+   *   (Optional) Mandatory for type 'numeric' fields, indicates the precision
+   *   (total number of significant digits). Ignored for other field types.
+   * @param Property|int $scale
+   *   (Optional) Mandatory for type 'numeric' fields, indicates the scale
+   *   (decimal digits right of the decimal point). Ignored for other field
+   *   types.
+   * @param Property|bool $binary
+   *   (Optional) A boolean indicating that MySQL should force 'char',
+   *   'varchar' or 'text' fields to use case-sensitive binary collation. This
+   *   has no effect on other database types for which case sensitivity is
+   *   already the default behavior.
+   * @param Property|array<string,string> $dbSpecificType
+   *   (Optional) If you need to use a column type not included in the
+   *   officially supported list of types above, you can specify a type for
+   *   each database backend. Specify this as an associative array having the
+   *   database type ('mysql', 'sqlite', 'pgsql', 'oracle', etc.) as the key,
+   *   and the database specific type as the value.
+   *
+   * @see \Drupal\Core\Database\SchemaDefinition\ColumnType
+   * @see \Drupal\Core\Database\SchemaDefinition\ColumnSize
+   */
+  public function __construct(
+    public readonly string $name,
+    public readonly ColumnType $type = ColumnType::Undefined,
+    public readonly Property|string $description = Property::Undefined,
+    public readonly Property|bool $serialize = Property::Undefined,
+    public readonly ColumnSize $size = ColumnSize::Undefined,
+    public readonly Property|bool $notNull = Property::Undefined,
+    public readonly Property|string|int|NULL $default = Property::Undefined,
+    public readonly Property|int $length = Property::Undefined,
+    public readonly Property|bool $unsigned = Property::Undefined,
+    public readonly Property|int $precision = Property::Undefined,
+    public readonly Property|int $scale = Property::Undefined,
+    public readonly Property|bool $binary = Property::Undefined,
+    public readonly Property|array $dbSpecificType = Property::Undefined,
+  ) {
+dump(debug_backtrace(0, 2));
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/ColumnSize.php b/core/lib/Drupal/Core/Database/SchemaDefinition/ColumnSize.php
new file mode 100644
index 0000000000..c305730185
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/ColumnSize.php
@@ -0,0 +1,28 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Enumeration of cases for column size.
+ *
+ * It represents a hint about the largest value a column will store and
+ * determines which of the database engine specific data types will be used
+ * (e.g. on MySQL, TINYINT vs. INT vs. BIGINT). 'normal', the default, selects
+ * the base type (e.g. on MySQL, INT, VARCHAR, BLOB, etc.). Not all sizes are
+ * available for all data types. See DatabaseSchema::getFieldTypeMap() for
+ * possible combinations.
+ */
+enum ColumnSize: string {
+
+  case Normal = 'normal';
+
+  case Tiny = 'tiny';
+  case Small = 'small';
+  case Medium = 'medium';
+  case Big = 'big';
+
+  case Undefined = 'und';
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/ColumnType.php b/core/lib/Drupal/Core/Database/SchemaDefinition/ColumnType.php
new file mode 100644
index 0000000000..a6a79eb7de
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/ColumnType.php
@@ -0,0 +1,34 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Enumeration of cases for column type.
+ *
+ * It represents the generic data type of a table column. Most types just map
+ * to the according database engine specific data types.
+ */
+enum ColumnType: string {
+
+  // String related types.
+  case Char = 'char';
+  case Varchar = 'varchar';
+  // This is to indicate limiting the accepted characters in the column to the
+  // US ASCII subset only.
+  case VarcharAscii = 'varchar_ascii';
+  case Text = 'text';
+
+  case Int = 'int';
+  // This is to indicate auto incrementing fields. For example, this will
+  // expand to 'INT auto_increment' on MySQL.
+  case Serial = 'serial';
+  case Float = 'float';
+  case Numeric = 'numeric';
+
+  case Blob = 'blob';
+
+  case Undefined = 'und';
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/ConvertDefinition.php b/core/lib/Drupal/Core/Database/SchemaDefinition/ConvertDefinition.php
new file mode 100644
index 0000000000..144d349996
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/ConvertDefinition.php
@@ -0,0 +1,198 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * An helper class to convert SchemaDefinition objects to legacy array.
+ *
+ * @internal
+ */
+abstract class ConvertDefinition {
+
+  /**
+   * Converts an array of Table objects.
+   *
+   * @internal
+   */
+  final public static function schemaToArray(array $schema): array {
+    $spec = [];
+    foreach ($schema as $table) {
+      $spec[$table->name] = self::tableToArray($table);
+    }
+    return $spec;
+  }
+
+  /**
+   * Converts a Table object.
+   *
+   * @internal
+   */
+  final public static function tableToArray(Table $table): array {
+    $spec = [];
+    if ($table->description !== Property::Undefined) {
+      $spec['description'] = $table->description;
+    }
+    if ($table->columns !== Property::Undefined) {
+      $spec['fields'] = self::columnsToArray($table->columns);
+    }
+    if ($table->primaryKey !== Property::Undefined) {
+      $spec['primary key'] = self::primaryKeyToArray($table->primaryKey);
+    }
+    if ($table->uniqueKeys !== Property::Undefined) {
+      $spec['unique keys'] = self::uniqueKeysToArray($table->uniqueKeys);
+    }
+    if ($table->indexes !== Property::Undefined) {
+      $spec['indexes'] = self::indexesToArray($table->indexes);
+    }
+    if ($table->foreignKeys !== Property::Undefined) {
+      $spec['foreign keys'] = self::foreignKeysToArray($table->foreignKeys);
+    }
+    return $spec;
+  }
+
+  /**
+   * Converts an array of Column objects.
+   *
+   * @internal
+   */
+  final public static function columnsToArray(array $columns): array {
+    $spec = [];
+    foreach ($columns as $column) {
+      $spec[$column->name] = self::columnToArray($column);
+    }
+    return $spec;
+  }
+
+  /**
+   * Converts a Column object.
+   *
+   * @internal
+   */
+  final public static function columnToArray(Column $column): array {
+    $spec = [];
+    if ($column->type !== ColumnType::Undefined) {
+      $spec['type'] = $column->type->value;
+    }
+    if ($column->description !== Property::Undefined) {
+      $spec['description'] = $column->description;
+    }
+    if ($column->serialize !== Property::Undefined) {
+      $spec['serialize'] = $column->serialize;
+    }
+    if ($column->size !== ColumnSize::Undefined) {
+      $spec['size'] = $column->size->value;
+    }
+    if ($column->notNull !== Property::Undefined) {
+      $spec['not null'] = $column->notNull;
+    }
+    if ($column->default !== Property::Undefined) {
+      $spec['default'] = $column->default;
+    }
+    if ($column->length !== Property::Undefined) {
+      $spec['length'] = $column->length;
+    }
+    if ($column->unsigned !== Property::Undefined) {
+      $spec['unsigned'] = $column->unsigned;
+    }
+    if ($column->precision !== Property::Undefined) {
+      $spec['precision'] = $column->precision;
+    }
+    if ($column->scale !== Property::Undefined) {
+      $spec['scale'] = $column->scale;
+    }
+    if ($column->binary !== Property::Undefined) {
+      $spec['binary'] = $column->binary;
+    }
+    if ($column->dbSpecificType !== Property::Undefined) {
+      foreach ($column->dbSpecificType as $db => $dbType) {
+        $spec[$db . '_type'] = $dbType;
+      }
+    }
+    return $spec;
+  }
+
+  /**
+   * Converts an array of KeyColumn objects.
+   *
+   * @internal
+   */
+  final public static function keyColumnsToArray(array $columns): array {
+    $spec = [];
+    foreach ($columns as $column) {
+      $spec[] = self::keyColumnToArray($column);
+    }
+    return $spec;
+  }
+
+  /**
+   * Converts a KeyColumn object.
+   *
+   * @internal
+   */
+  final public static function keyColumnToArray(KeyColumn $column): string|array {
+    if ($column->length !== NULL) {
+      return [$column->name, $column->length];
+    }
+    return $column->name;
+  }
+
+  /**
+   * Converts a PrimaryKey object.
+   *
+   * @internal
+   */
+  final public static function primaryKeyToArray(PrimaryKey $primaryKey): array {
+    return self::keyColumnsToArray($primaryKey->columns);
+  }
+
+  /**
+   * Converts an array of UniqueKey objects.
+   *
+   * @internal
+   */
+  final public static function uniqueKeysToArray(array $uniqueKeys): array {
+    $spec = [];
+    foreach ($uniqueKeys as $uniqueKey) {
+      $spec[$uniqueKey->name] = self::keyColumnsToArray($uniqueKey->columns);
+    }
+    return $spec;
+  }
+
+  /**
+   * Converts an array of Index objects.
+   *
+   * @internal
+   */
+  final public static function indexesToArray(array $indexes): array {
+    $spec = [];
+    foreach ($indexes as $index) {
+      $spec[$index->name] = self::keyColumnsToArray($index->columns);
+    }
+    return $spec;
+  }
+
+  /**
+   * Converts an array of ForeignKey objects.
+   *
+   * @internal
+   */
+  final public static function foreignKeysToArray(array $foreignKeys): array {
+    $spec = [];
+    foreach ($foreignKeys as $foreignKey) {
+      $cols = self::keyColumnsToArray($foreignKey->columns);
+      $foreignCols = self::keyColumnsToArray($foreignKey->foreignColumns);
+      $match = [];
+      for ($i = 0; $i < count($cols); $i++) {
+        $match[$cols[$i]] = $foreignCols[$i];
+      }
+      $spec[$foreignKey->name] = [
+        'table' => $foreignKey->foreignTable,
+        'columns' => $match,
+      ];
+    }
+    return $spec;
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/ForeignKey.php b/core/lib/Drupal/Core/Database/SchemaDefinition/ForeignKey.php
new file mode 100644
index 0000000000..4c9541fbeb
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/ForeignKey.php
@@ -0,0 +1,47 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a database foreign key.
+ */
+final class ForeignKey extends KeyBase {
+
+  /**
+   * The foreign key columns.
+   *
+   * @var KeyColumn[]
+   *   The list of KeyColumn objects of the foreign table.
+   */
+  public readonly array $foreignColumns;
+
+  /**
+   * Constructor.
+   *
+   * @param string $name
+   *   The foreign key name.
+   * @param string $foreignTable
+   *   The foreign (referenced) table name.
+   * @param list<KeyColumn|string|array{0:string, 1:int}> $columns
+   *   A mix of key column specifiers, being KeyColumn objects, strings naming
+   *   columns, or arrays of two elements, column name and length, specifying a
+   *   prefix of the named column.
+   * @param list<KeyColumn|string|array{0:string, 1:int}> $foreignColumns
+   *   A mix of key column specifiers of the foreign (referenced) table, being
+   *   KeyColumn objects, strings naming columns, or arrays of two elements,
+   *   column name and length, specifying a prefix of the named column.
+   */
+  public function __construct(
+    public readonly string $name,
+    public readonly string $foreignTable,
+    array $columns,
+    array $foreignColumns,
+  ) {
+    parent::__construct($columns);
+    $this->foreignColumns = $this->buildColumns($foreignColumns);
+    assert(count($this->columns) === count($this->foreignColumns), "Mismatching count of columns for the {$this->name} foreign key.");
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/Index.php b/core/lib/Drupal/Core/Database/SchemaDefinition/Index.php
new file mode 100644
index 0000000000..e5292b5f60
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/Index.php
@@ -0,0 +1,29 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a database index.
+ */
+final class Index extends KeyBase {
+
+  /**
+   * Constructor.
+   *
+   * @param string $name
+   *   The index name.
+   * @param list<KeyColumn|string|array{0:string, 1:int}> $columns
+   *   A mix of key column specifiers, being KeyColumn objects, strings naming
+   *   columns, or arrays of two elements, column name and length, specifying a
+   *   prefix of the named column.
+   */
+  public function __construct(
+    public readonly string $name,
+    array $columns,
+  ) {
+    parent::__construct($columns);
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/KeyBase.php b/core/lib/Drupal/Core/Database/SchemaDefinition/KeyBase.php
new file mode 100644
index 0000000000..b135d4ed37
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/KeyBase.php
@@ -0,0 +1,59 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Base class for table keys (primary, unique, index).
+ */
+abstract class KeyBase implements SchemaDefinitionInterface {
+
+  /**
+   * The key columns.
+   *
+   * @var KeyColumn[]
+   *   The list of KeyColumn objects.
+   */
+  public readonly array $columns;
+
+  /**
+   * Constructor.
+   *
+   * @param list<KeyColumn|string|array{0:string, 1:int}> $columns
+   *   A mix of key column specifiers, being KeyColumn objects, strings naming
+   *   columns, or arrays of two elements, column name and length, specifying a
+   *   prefix of the named column.
+   */
+  public function __construct(array $columns) {
+    $this->columns = $this->buildColumns($columns);
+  }
+
+  /**
+   * Builds an array of KeyColumn objects from a mixed list of columns.
+   *
+   * @param list<KeyColumn|string|array{0:string, 1:int}> $rawColumns
+   *   A mix of key column specifiers, being KeyColumn objects, strings naming
+   *   columns, or arrays of two elements, column name and length, specifying a
+   *   prefix of the named column.
+   *
+   * @return KeyColumn[]
+   *   The normalized list of KeyColumn objects.
+   */
+  protected function buildColumns(array $rawColumns): array {
+    $columns = [];
+    foreach ($rawColumns as $rawColumn) {
+      if ($rawColumn instanceof KeyColumn) {
+        $columns[] = $rawColumn;
+      }
+      elseif (is_array($rawColumn)) {
+        $columns[] = new KeyColumn($rawColumn[0], $rawColumn[1]);
+      }
+      else {
+        $columns[] = new KeyColumn($rawColumn);
+      }
+    }
+    return $columns;
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/KeyColumn.php b/core/lib/Drupal/Core/Database/SchemaDefinition/KeyColumn.php
new file mode 100644
index 0000000000..d54b7e3f1f
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/KeyColumn.php
@@ -0,0 +1,26 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a column of a database index or key.
+ */
+final class KeyColumn implements SchemaDefinitionInterface {
+
+  /**
+   * Constructor.
+   *
+   * @param string $name
+   *   The column name.
+   * @param int|null $length
+   *   (Optional) if set, specifies a prefix of the named column.
+   */
+  public function __construct(
+    public readonly string $name,
+    public readonly ?int $length = NULL,
+  ) {
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/PrimaryKey.php b/core/lib/Drupal/Core/Database/SchemaDefinition/PrimaryKey.php
new file mode 100644
index 0000000000..a176fad02f
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/PrimaryKey.php
@@ -0,0 +1,24 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a table's primary key.
+ */
+final class PrimaryKey extends KeyBase {
+
+  /**
+   * Constructor.
+   *
+   * @param list<KeyColumn|string|array{0:string, 1:int}> $columns
+   *   A mix of key column specifiers, being KeyColumn objects, strings naming
+   *   columns, or arrays of two elements, column name and length, specifying a
+   *   prefix of the named column.
+   */
+  public function __construct(array $columns) {
+    parent::__construct($columns);
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/Property.php b/core/lib/Drupal/Core/Database/SchemaDefinition/Property.php
new file mode 100644
index 0000000000..6bee3da7d9
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/Property.php
@@ -0,0 +1,14 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Enumeration of property special cases for SchemaDefinition.
+ */
+enum Property {
+
+  case Undefined;
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/SchemaDefinitionInterface.php b/core/lib/Drupal/Core/Database/SchemaDefinition/SchemaDefinitionInterface.php
new file mode 100644
index 0000000000..2d3489f872
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/SchemaDefinitionInterface.php
@@ -0,0 +1,11 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Interface for objects describing database elements.
+ */
+interface SchemaDefinitionInterface {
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/Table.php b/core/lib/Drupal/Core/Database/SchemaDefinition/Table.php
new file mode 100644
index 0000000000..e31fd72ebd
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/Table.php
@@ -0,0 +1,48 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a database table.
+ */
+final class Table implements SchemaDefinitionInterface {
+
+  /**
+   * Constructor.
+   *
+   * @param string $name
+   *   The table name.
+   * @param Property|Column[] $columns
+   *   (Optional) An array that describes the table's database columns. This is
+   *   normally mandatory. Some methods in the Schema API - for example
+   *   Schema::addField() - require partial table definition, so this is
+   *   optional to support it.
+   * @param Property|string $description
+   *   (Optional) A string in non-markup plain text describing this table and
+   *   its purpose. References to other tables should be enclosed in curly
+   *   brackets.
+   * @param Property|PrimaryKey $primaryKey
+   *   (Optional) The primary key of the table.
+   * @param Property|UniqueKey[] $uniqueKeys
+   *   (Optional) An array of unique keys for the table.
+   * @param Property|Index[] $indexes
+   *   (Optional) An array of indexes for the table.
+   * @param Property|ForeignKey[] $foreignKeys
+   *   (Optional) An array of foreign keys for the table. This argument is for
+   *   documentation purposes only; foreign keys are not created in the
+   *   database, nor are they enforced by Drupal.
+   */
+  public function __construct(
+    public readonly string $name,
+    public readonly Property|array $columns = Property::Undefined,
+    public readonly Property|string $description = Property::Undefined,
+    public readonly Property|PrimaryKey $primaryKey = Property::Undefined,
+    public readonly Property|array $uniqueKeys = Property::Undefined,
+    public readonly Property|array $indexes = Property::Undefined,
+    public readonly Property|array $foreignKeys = Property::Undefined,
+  ) {
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/UniqueKey.php b/core/lib/Drupal/Core/Database/SchemaDefinition/UniqueKey.php
new file mode 100644
index 0000000000..7bb8e49142
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/UniqueKey.php
@@ -0,0 +1,29 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a database unique key.
+ */
+final class UniqueKey extends KeyBase {
+
+  /**
+   * Constructor.
+   *
+   * @param string $name
+   *   The unique key name.
+   * @param list<KeyColumn|string|array{0:string, 1:int}> $columns
+   *   A mix of key column specifiers, being KeyColumn objects, strings naming
+   *   columns, or arrays of two elements, column name and length, specifying a
+   *   prefix of the named column.
+   */
+  public function __construct(
+    public readonly string $name,
+    array $columns,
+  ) {
+    parent::__construct($columns);
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/database.api.php b/core/lib/Drupal/Core/Database/database.api.php
index 50e4bb5060..76321868eb 100644
--- a/core/lib/Drupal/Core/Database/database.api.php
+++ b/core/lib/Drupal/Core/Database/database.api.php
@@ -6,6 +6,14 @@
  */
 
 use Drupal\Core\Database\Query\SelectInterface;
+use Drupal\Core\Database\SchemaDefinition\Column;
+use Drupal\Core\Database\SchemaDefinition\ColumnSize;
+use Drupal\Core\Database\SchemaDefinition\ColumnType;
+use Drupal\Core\Database\SchemaDefinition\ConvertDefinition;
+use Drupal\Core\Database\SchemaDefinition\ForeignKey;
+use Drupal\Core\Database\SchemaDefinition\Index;
+use Drupal\Core\Database\SchemaDefinition\PrimaryKey;
+use Drupal\Core\Database\SchemaDefinition\Table;
 
 /**
  * @defgroup database Database abstraction layer
@@ -502,8 +510,8 @@ function hook_query_TAG_alter(Drupal\Core\Database\Query\AlterableInterface $que
 /**
  * Define the current version of the database schema.
  *
- * A Drupal schema definition is an array structure representing one or more
- * tables and their related keys and indexes. A schema is defined by
+ * A Drupal schema definition is a structure of value objects representing one
+ * or more tables and their related keys and indexes. A schema is defined by
  * hook_schema() which must live in your module's .install file.
  *
  * The tables declared by this hook will be automatically created when the
@@ -516,75 +524,93 @@ function hook_query_TAG_alter(Drupal\Core\Database\Query\AlterableInterface $que
  * engines. You don't have to deal with the different SQL dialects for table
  * creation and alteration of the supported database engines.
  *
- * See the Schema API Handbook at https://www.drupal.org/node/146843 for details
- * on schema definition structures. Note that foreign key definitions are for
- * documentation purposes only; foreign keys are not created in the database,
- * nor are they enforced by Drupal.
+ * See the Schema API page at
+ * https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Database%21database.api.php/group/schemaapi
+ * for details on schema definition structures. Note that foreign key
+ * definitions are for documentation purposes only; foreign keys are not
+ * created in the database, nor are they enforced by Drupal.
+ *
+ * @param bool $returnArraySchema
+ *   (Optional) FALSE indicates to return an array of
+ *   Drupal\Core\Database\SchemaDefinition\Table objects, TRUE to return
+ *   an array-based schema based on legacy (prior to Drupal xx.yy.zz)
+ *   definition. Defaults to TRUE.
  *
  * @return array
- *   A schema definition structure array. For each element of the
- *   array, the key is a table name and the value is a table structure
- *   definition.
+ *   A schema definition structure array. Depending on the $returnArraySchema
+ *   parameter: if TRUE for each element of the array, the key is a table name
+ *   and the value is a legacy array-based table structure definition; if FALSE
+ *   the array is a list of Drupal\Core\Database\SchemaDefinition\Table
+ *   objects.
  *
  * @ingroup schemaapi
  */
-function hook_schema() {
-  $schema['users_data'] = [
-    'description' => 'Stores module data as key/value pairs per user.',
-    'fields' => [
-      'uid' => [
-        'description' => 'The {users}.uid this record affects.',
-        'type' => 'int',
-        'unsigned' => TRUE,
-        'not null' => TRUE,
-        'default' => 0,
-      ],
-      'module' => [
-        'description' => 'The name of the module declaring the variable.',
-        'type' => 'varchar_ascii',
-        'length' => DRUPAL_EXTENSION_NAME_MAX_LENGTH,
-        'not null' => TRUE,
-        'default' => '',
-      ],
-      'name' => [
-        'description' => 'The identifier of the data.',
-        'type' => 'varchar_ascii',
-        'length' => 128,
-        'not null' => TRUE,
-        'default' => '',
-      ],
-      'value' => [
-        'description' => 'The value.',
-        'type' => 'blob',
-        'not null' => FALSE,
-        'size' => 'big',
-      ],
-      'serialized' => [
-        'description' => 'Whether value is serialized.',
-        'type' => 'int',
-        'size' => 'tiny',
-        'unsigned' => TRUE,
-        'default' => 0,
-      ],
+function hook_schema(bool $returnArraySchema = TRUE) {
+  $schema[] = new Table(
+    name: 'users_data',
+    description: 'Stores module data as key/value pairs per user.',
+    columns: [
+      new Column(
+        name: 'uid',
+        description: 'The {users}.uid this record affects.',
+        type: ColumnType::Int,
+        unsigned: TRUE,
+        notNull: TRUE,
+        default: 0,
+      ),
+      new Column(
+        name: 'module',
+        description: 'The name of the module declaring the variable.',
+        type: ColumnType::VarcharAscii,
+        length: DRUPAL_EXTENSION_NAME_MAX_LENGTH,
+        notNull: TRUE,
+        default: '',
+      ),
+      new Column(
+        name: 'name',
+        description: 'The identifier of the data.',
+        type: ColumnType::VarcharAscii,
+        length: 128,
+        notNull: TRUE,
+        default: '',
+      ),
+      new Column(
+        name: 'value',
+        description: 'The value.',
+        type: ColumnType::Blob,
+        size: ColumnSize::Big,
+        notNull: FALSE,
+      ),
+      new Column(
+        name: 'serialized',
+        description: 'Whether value is serialized.',
+        type: ColumnType::Int,
+        size: ColumnSize::Tiny,
+        unsigned: TRUE,
+        default: 0,
+      ),
     ],
-    'primary key' => ['uid', 'module', 'name'],
-    'indexes' => [
-      'module' => ['module'],
-      'name' => ['name'],
+    primaryKey: new PrimaryKey(['uid', 'module', 'name']),
+    indexes: [
+      new Index(name: 'module', columns: ['module']),
+      new Index(name: 'name', columns: ['name']),
     ],
     // For documentation purposes only; foreign keys are not created in the
     // database.
-    'foreign keys' => [
-      'data_user' => [
-        'table' => 'users',
-        'columns' => [
-          'uid' => 'uid',
-        ],
-      ],
+    foreignKeys: [
+      new ForeignKey(
+       name: 'data_user',
+       foreignTable: 'users',
+       columns: ['uid'],
+       foreignColumns: ['uid'],
+      ),
     ],
-  ];
+  );
 
-  return $schema;
+  return match ($returnArraySchema) {
+    TRUE => ConvertDefinition::schemaToArray($schema),
+    FALSE => $schema,
+  };
 }
 
 /**
diff --git a/core/lib/Drupal/Core/Extension/ModuleInstaller.php b/core/lib/Drupal/Core/Extension/ModuleInstaller.php
index 289ecffe41..022d10e5d4 100644
--- a/core/lib/Drupal/Core/Extension/ModuleInstaller.php
+++ b/core/lib/Drupal/Core/Extension/ModuleInstaller.php
@@ -5,6 +5,8 @@
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Database\Connection;
+use Drupal\Core\Database\SchemaDefinition\ConvertDefinition;
+use Drupal\Core\Database\SchemaDefinition\Table;
 use Drupal\Core\DrupalKernelInterface;
 use Drupal\Core\Entity\EntityStorageException;
 use Drupal\Core\Entity\FieldableEntityInterface;
@@ -655,9 +657,15 @@ public function validateUninstall(array $module_list) {
    * @internal
    */
   protected function installSchema(string $module): void {
-    $tables = $this->moduleHandler->invoke($module, 'schema') ?? [];
+    $tables = $this->moduleHandler->invoke($module, 'schema', [FALSE]) ?? [];
     $schema = $this->connection->schema();
     foreach ($tables as $name => $table) {
+      if ($table instanceof Table) {
+        $name = $table->name;
+        if (!$this->connection->supportsSchemaDefinition()) {
+          $table = ConvertDefinition::tableToArray($table);
+        }
+      }
       $schema->createTable($name, $table);
     }
   }
@@ -671,11 +679,14 @@ protected function installSchema(string $module): void {
    * @internal
    */
   protected function uninstallSchema(string $module): void {
-    $tables = $this->moduleHandler->invoke($module, 'schema') ?? [];
+    $tables = $this->moduleHandler->invoke($module, 'schema', [FALSE]) ?? [];
     $schema = $this->connection->schema();
-    foreach (array_keys($tables) as $table) {
-      if ($schema->tableExists($table)) {
-        $schema->dropTable($table);
+    foreach ($tables as $name => $table) {
+      if ($table instanceof Table) {
+        $name = $table->name;
+      }
+      if ($schema->tableExists($name)) {
+        $schema->dropTable($name);
       }
     }
   }
diff --git a/core/modules/system/system.install b/core/modules/system/system.install
index 8f557e9ac4..8f19e98d4e 100644
--- a/core/modules/system/system.install
+++ b/core/modules/system/system.install
@@ -13,6 +13,14 @@
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Database\Database;
+use Drupal\Core\Database\SchemaDefinition\Column;
+use Drupal\Core\Database\SchemaDefinition\ColumnSize;
+use Drupal\Core\Database\SchemaDefinition\ColumnType;
+use Drupal\Core\Database\SchemaDefinition\ConvertDefinition;
+use Drupal\Core\Database\SchemaDefinition\ForeignKey;
+use Drupal\Core\Database\SchemaDefinition\Index;
+use Drupal\Core\Database\SchemaDefinition\PrimaryKey;
+use Drupal\Core\Database\SchemaDefinition\Table;
 use Drupal\Core\DrupalKernel;
 use Drupal\Core\Extension\ExtensionLifecycle;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -1612,75 +1620,92 @@ function system_install() {
 /**
  * Implements hook_schema().
  */
-function system_schema() {
+function system_schema(bool $returnArraySchema = TRUE) {
   // @deprecated The sequences table has been deprecated in drupal:10.2.0 and is
   // removed from drupal:12.0.0. See https://www.drupal.org/node/3220378.
   // @todo: Remove sequences table in Drupal 12. See https://www.drupal.org/i/3335756
-  $schema['sequences'] = [
-    'description' => 'Stores IDs.',
-    'fields' => [
-      'value' => [
-        'description' => 'The value of the sequence.',
-        'type' => 'serial',
-        'unsigned' => TRUE,
-        'not null' => TRUE,
-      ],
-    ],
-    'primary key' => ['value'],
-  ];
-
-  $schema['sessions'] = [
-    'description' => "Drupal's session handlers read and write into the sessions table. Each record represents a user session, either anonymous or authenticated.",
-    'fields' => [
-      'uid' => [
-        'description' => 'The {users}.uid corresponding to a session, or 0 for anonymous user.',
-        'type' => 'int',
-        'unsigned' => TRUE,
-        'not null' => TRUE,
-      ],
-      'sid' => [
-        'description' => "A session ID (hashed). The value is generated by Drupal's session handlers.",
-        'type' => 'varchar_ascii',
-        'length' => 128,
-        'not null' => TRUE,
-      ],
-      'hostname' => [
-        'description' => 'The IP address that last used this session ID (sid).',
-        'type' => 'varchar_ascii',
-        'length' => 128,
-        'not null' => TRUE,
-        'default' => '',
-      ],
-      'timestamp' => [
-        'description' => 'The Unix timestamp when this session last requested a page. Old records are purged by PHP automatically.',
-        'type' => 'int',
-        'not null' => TRUE,
-        'default' => 0,
-        'size' => 'big',
-      ],
-      'session' => [
-        'description' => 'The serialized contents of the user\'s session, an array of name/value pairs that persists across page requests by this session ID. Drupal loads the user\'s session from here at the start of each request and saves it at the end.',
-        'type' => 'blob',
-        'not null' => FALSE,
-        'size' => 'big',
-      ],
+  $schema[] = new Table(
+    name: 'sequences',
+    description: 'Stores IDs.',
+    columns: [
+      new Column(
+        name: 'value',
+        description: 'The value of the sequence.',
+        type: ColumnType::Serial,
+        unsigned: TRUE,
+        notNull: TRUE,
+      ),
     ],
-    'primary key' => [
-      'sid',
+    primaryKey: new PrimaryKey(['value']),
+  );
+
+  $schema[] = new Table(
+    name: 'sessions',
+    description: "Drupal's session handlers read and write into the sessions table. Each record represents a user session, either anonymous or authenticated.",
+    columns: [
+      new Column(
+        name: 'uid',
+        description: 'The {users}.uid corresponding to a session, or 0 for anonymous user.',
+        type: ColumnType::Int,
+        unsigned: TRUE,
+        notNull: TRUE,
+      ),
+      new Column(
+        name: 'sid',
+        description: "A session ID (hashed). The value is generated by Drupal's session handlers.",
+        type: ColumnType::VarcharAscii,
+        length: 128,
+        notNull: TRUE,
+      ),
+      new Column(
+        name: 'hostname',
+        description: 'The IP address that last used this session ID (sid).',
+        type: ColumnType::VarcharAscii,
+        length: 128,
+        notNull: TRUE,
+        default: '',
+      ),
+      new Column(
+        name: 'timestamp',
+        description: 'The Unix timestamp when this session last requested a page. Old records are purged by PHP automatically.',
+        type: ColumnType::Int,
+        size: ColumnSize::Big,
+        notNull: TRUE,
+        default: 0,
+      ),
+      new Column(
+        name: 'session',
+        description: 'The serialized contents of the user\'s session, an array of name/value pairs that persists across page requests by this session ID. Drupal loads the user\'s session from here at the start of each request and saves it at the end.',
+        type: ColumnType::Blob,
+        size: ColumnSize::Big,
+        notNull: FALSE,
+      ),
     ],
-    'indexes' => [
-      'timestamp' => ['timestamp'],
-      'uid' => ['uid'],
+    primaryKey: new PrimaryKey(['sid']),
+    indexes: [
+      new Index(
+        name: 'timestamp',
+        columns: ['timestamp'],
+      ),
+      new Index(
+        name: 'uid',
+        columns: ['uid'],
+      ),
     ],
-    'foreign keys' => [
-      'session_user' => [
-        'table' => 'users',
-        'columns' => ['uid' => 'uid'],
-      ],
+    foreignKeys: [
+      new ForeignKey(
+        name: 'session_user',
+        foreignTable: 'users',
+        columns: ['uid'],
+        foreignColumns: ['uid'],
+      ),
     ],
-  ];
+  );
 
-  return $schema;
+  return match ($returnArraySchema) {
+    TRUE => ConvertDefinition::schemaToArray($schema),
+    FALSE => $schema,
+  };
 }
 
 /**
diff --git a/core/tests/Drupal/TestTools/Extension/SchemaInspector.php b/core/tests/Drupal/TestTools/Extension/SchemaInspector.php
index 134ad27e08..fd41641c07 100644
--- a/core/tests/Drupal/TestTools/Extension/SchemaInspector.php
+++ b/core/tests/Drupal/TestTools/Extension/SchemaInspector.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\TestTools\Extension;
 
+use Drupal\Core\Database\SchemaDefinition\ConvertDefinition;
+use Drupal\Core\Database\SchemaDefinition\Table;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 
 /**
@@ -28,7 +30,18 @@ class SchemaInspector {
    */
   public static function getTablesSpecification(ModuleHandlerInterface $handler, string $module): array {
     if ($handler->loadInclude($module, 'install')) {
-      return $handler->invoke($module, 'schema') ?? [];
+      $tables = $handler->invoke($module, 'schema', [FALSE]) ?? [];
+      $temp = [];
+      foreach ($tables as $name => $table) {
+        if ($table instanceof Table) {
+          $name = $table->name;
+          if (!\Drupal::database()->supportsSchemaDefinition()) {
+            $table = ConvertDefinition::tableToArray($table);
+          }
+        }
+        $temp[$name] = $table;
+      }
+      return $temp;
     }
     return [];
   }
diff --git a/core/tests/Drupal/Tests/Core/Database/ConvertDefinitionTest.php b/core/tests/Drupal/Tests/Core/Database/ConvertDefinitionTest.php
new file mode 100644
index 0000000000..9be238507e
--- /dev/null
+++ b/core/tests/Drupal/Tests/Core/Database/ConvertDefinitionTest.php
@@ -0,0 +1,169 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Tests\Core\Database;
+
+use Drupal\Core\Database\SchemaDefinition\Column;
+use Drupal\Core\Database\SchemaDefinition\ColumnSize;
+use Drupal\Core\Database\SchemaDefinition\ColumnType;
+use Drupal\Core\Database\SchemaDefinition\ConvertDefinition;
+use Drupal\Core\Database\SchemaDefinition\ForeignKey;
+use Drupal\Core\Database\SchemaDefinition\Index;
+use Drupal\Core\Database\SchemaDefinition\KeyColumn;
+use Drupal\Core\Database\SchemaDefinition\PrimaryKey;
+use Drupal\Core\Database\SchemaDefinition\Table;
+use Drupal\Core\Database\SchemaDefinition\UniqueKey;
+use Drupal\Tests\UnitTestCase;
+
+/**
+ * Tests conversion of SchemaDefinition objects to legacy array-based structure.
+ *
+ * @group Database
+ */
+class ConvertDefinitionTest extends UnitTestCase {
+
+  /**
+   * Tests ConvertDefinition::tableToArray.
+   */
+  public function testConvertDefinition(): void {
+    $arraySpecification = [
+      'description' => 'Basic test table for the database unit tests.',
+      'fields' => [
+        'id' => [
+          'type' => 'serial',
+          'unsigned' => TRUE,
+          'not null' => TRUE,
+        ],
+        'name' => [
+          'description' => "A person's name",
+          'type' => 'varchar_ascii',
+          'length' => 255,
+          'not null' => TRUE,
+          'default' => '',
+          'binary' => TRUE,
+        ],
+        'age' => [
+          'description' => "The person's age",
+          'type' => 'int',
+          'size' => 'small',
+          'unsigned' => TRUE,
+          'not null' => TRUE,
+          'default' => 0,
+        ],
+        'job' => [
+          'description' => "The person's job",
+          'type' => 'varchar',
+          'length' => 255,
+          'not null' => TRUE,
+          'default' => 'Undefined',
+        ],
+        'db_timestamp' => [
+          'description' => "The database timestamp",
+          'mysql_type' => 'timestamp',
+          'pgsql_type' => 'timestamp',
+          'sqlite_type' => 'datetime',
+          'not null' => FALSE,
+          'default' => NULL,
+        ],
+      ],
+      'primary key' => ['id'],
+      'unique keys' => [
+        'name' => ['name'],
+      ],
+      'indexes' => [
+        'ages' => ['age'],
+        'age_job_prefix' => ['age', ['job', 50]],
+        'age_name_prefix' => ['age', ['name', 20]],
+      ],
+      'foreign keys' => [
+        'user_id' => [
+          'table' => 'test_users',
+          'columns' => ['id' => 'id'],
+        ],
+      ],
+    ];
+
+    $schemaDefinition = new Table(
+      name: 'test',
+      description: 'Basic test table for the database unit tests.',
+      columns: [
+        new Column(
+          name: 'id',
+          type: ColumnType::Serial,
+          unsigned: TRUE,
+          notNull: TRUE,
+        ),
+        new Column(
+          name: 'name',
+          description: "A person's name",
+          type: ColumnType::VarcharAscii,
+          length: 255,
+          notNull: TRUE,
+          default: '',
+          binary: TRUE,
+        ),
+        new Column(
+          name: 'age',
+          description: "The person's age",
+          type: ColumnType::Int,
+          size: ColumnSize::Small,
+          unsigned: TRUE,
+          notNull: TRUE,
+          default: 0,
+        ),
+        new Column(
+          name: 'job',
+          description: "The person's job",
+          type: ColumnType::Varchar,
+          length: 255,
+          notNull: TRUE,
+          default: 'Undefined',
+        ),
+        new Column(
+          name: 'db_timestamp',
+          description: "The database timestamp",
+          dbSpecificType: [
+            'mysql' => 'timestamp',
+            'pgsql' => 'timestamp',
+            'sqlite' => 'datetime',
+          ],
+          notNull: FALSE,
+          default: NULL,
+        ),
+      ],
+      primaryKey: new PrimaryKey(['id']),
+      uniqueKeys: [
+        new UniqueKey(
+          name: 'name',
+          columns: ['name'],
+        ),
+      ],
+      indexes: [
+        new Index(
+          name: 'ages',
+          columns: ['age'],
+        ),
+        new Index(
+          name: 'age_job_prefix',
+          columns: ['age', ['job', 50]],
+        ),
+        new Index(
+          name: 'age_name_prefix',
+          columns: ['age', new KeyColumn(name: 'name', length: 20)],
+        ),
+      ],
+      foreignKeys: [
+        new ForeignKey(
+          name: 'user_id',
+          foreignTable: 'test_users',
+          columns: ['id'],
+          foreignColumns: ['id'],
+        ),
+      ],
+    );
+
+    $this->assertEquals($arraySpecification, ConvertDefinition::tableToArray($schemaDefinition));
+  }
+
+}
