diff --git a/core/lib/Drupal/Component/Render/FormattableMarkup.php b/core/lib/Drupal/Component/Render/FormattableMarkup.php
index 404cf7e6bd..7bcc75858d 100644
--- a/core/lib/Drupal/Component/Render/FormattableMarkup.php
+++ b/core/lib/Drupal/Component/Render/FormattableMarkup.php
@@ -259,7 +259,7 @@ protected static function placeholderFormat($string, array $args) {
    *   The properly escaped replacement value.
    */
   protected static function placeholderEscape($value) {
-    return $value instanceof MarkupInterface ? (string) $value : Html::escape($value);
+    return $value instanceof MarkupInterface ? (string) $value : Html::escape($value ?? '');
   }
 
 }
diff --git a/core/tests/Drupal/Tests/Component/Render/FormattableMarkupTest.php b/core/tests/Drupal/Tests/Component/Render/FormattableMarkupTest.php
index fc285287e1..59c90bb9d6 100644
--- a/core/tests/Drupal/Tests/Component/Render/FormattableMarkupTest.php
+++ b/core/tests/Drupal/Tests/Component/Render/FormattableMarkupTest.php
@@ -43,6 +43,16 @@ public function testToString() {
     $this->assertEquals('Can I please have a kitten', $text);
   }
 
+  /**
+   * @covers ::__toString
+   */
+  public function testNullReplacementToString() {
+    $string = 'Can I please have a @replacement';
+    $formattable_string = new FormattableMarkup($string, ['@replacement' => null]);
+    $text = (string) $formattable_string;
+    $this->assertEquals('Can I please have a ', $text);
+  }
+
   /**
    * @covers ::count
    */
