diff --git a/core/modules/image/image.module b/core/modules/image/image.module
index 0d8bd4b1f26..f0b29f6e83b 100644
--- a/core/modules/image/image.module
+++ b/core/modules/image/image.module
@@ -15,6 +15,7 @@
 use Drupal\file\FileInterface;
 use Drupal\image\Controller\ImageStyleDownloadController;
 use Drupal\image\Entity\ImageStyle;
+use Drupal\image\ImageProcessor\TransformedDimensions;
 
 /**
  * The name of the query parameter for image derivative tokens.
@@ -280,10 +281,7 @@ function template_preprocess_image_style(&$variables) {
   $style = ImageStyle::load($variables['style_name']);
 
   // Determine the dimensions of the styled image.
-  $dimensions = [
-    'width' => $variables['width'],
-    'height' => $variables['height'],
-  ];
+  $dimensions = new TransformedDimensions($variables['width'], $variables['height'], $variables['uri']);
 
   $style->transformDimensions($dimensions, $variables['uri']);
 
diff --git a/core/modules/image/src/Entity/ImageStyle.php b/core/modules/image/src/Entity/ImageStyle.php
index f975dc10932..fe912433e7b 100644
--- a/core/modules/image/src/Entity/ImageStyle.php
+++ b/core/modules/image/src/Entity/ImageStyle.php
@@ -348,7 +348,7 @@ public function createDerivative($original_uri, $derivative_uri) {
    */
   public function transformDimensions(array &$dimensions, $uri) {
     foreach ($this->getEffects() as $effect) {
-      $effect->transformDimensions($dimensions, $uri);
+      $effect->transformDimensions($dimensions, $dimensions->uri);
     }
   }
 
diff --git a/core/modules/image/src/ImageProcessor/TransformedDimensions.php b/core/modules/image/src/ImageProcessor/TransformedDimensions.php
new file mode 100644
index 00000000000..f5712396172
--- /dev/null
+++ b/core/modules/image/src/ImageProcessor/TransformedDimensions.php
@@ -0,0 +1,69 @@
+<?php
+
+namespace Drupal\image\ImageProcessor;
+
+/**
+ * Keeps track of the image dimensions transformation by a style.
+ */
+class TransformedDimensions {
+
+  /**
+   * The current width.
+   */
+  protected ?int $width;
+
+  /**
+   * The current height.
+   */
+  protected ?int $height;
+
+  /**
+   * Any third party key added to legacy $dimensions array.
+   *
+   * @deprecated
+   */
+  protected array $thirdPartyKey = [];
+
+  public function __construct(
+    public readonly int $originalWidth,
+    public readonly int $originalHeight,
+    public readonly string $uri,
+  ) {
+    $this->width = $this->originalWidth;
+    $this->height = $this->originalHeight;
+  }
+
+  public function offsetExists(int|string $offset): bool {
+    if (in_array($offset, ['width', 'height'])) {
+      return TRUE;
+    }
+    return array_key_exists($offset, $this->thirdPartyKey);
+  }
+
+  public function offsetGet(int|string $offset): mixed {
+    return match ($offset) {
+      'width' => $this->width,
+      'height' => $this->height,
+      default => $this->thirdPartyKey[$offset],
+    };
+  }
+
+  public function offsetSet(int|string $offset, mixed $value): void {
+    if ($offset === 'width') {
+      $this->width = $value;
+    }
+    elseif ($offset === 'height') {
+      $this->height = $value;
+    }
+    else {
+      $this->thirdPartyKey[$offset] = $value;
+    }
+  }
+
+  public function offsetUnset(int|string $offset): void {
+    if (!in_array($offset, ['width', 'height'])) {
+      unset($offset);
+    }
+  }
+
+}
