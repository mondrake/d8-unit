diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index 11fa3a6835..5d7d9cc934 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -1540,6 +1540,7 @@ public function isEventEnabled(string $eventName): bool {
   public function enableEvents(array $eventNames): static {
     foreach ($eventNames as $eventName) {
       assert(class_exists($eventName), "Event class {$eventName} does not exist");
+      assert(is_a($eventName, DatabaseEvent::class, TRUE), "Event class {$eventName} is not a valid database event class");
       $this->enabledEvents[$eventName] = TRUE;
     }
     return $this;
@@ -1556,6 +1557,7 @@ public function enableEvents(array $eventNames): static {
   public function disableEvents(array $eventNames): static {
     foreach ($eventNames as $eventName) {
       assert(class_exists($eventName), "Event class {$eventName} does not exist");
+      assert(is_a($eventName, DatabaseEvent::class, TRUE), "Event class {$eventName} is not a valid database event class");
       $this->enabledEvents[$eventName] = FALSE;
     }
     return $this;
diff --git a/core/lib/Drupal/Core/Database/Event/DatabaseEvent.php b/core/lib/Drupal/Core/Database/Event/DatabaseEvent.php
index 1f75901158..25929deea7 100644
--- a/core/lib/Drupal/Core/Database/Event/DatabaseEvent.php
+++ b/core/lib/Drupal/Core/Database/Event/DatabaseEvent.php
@@ -21,4 +21,17 @@ public function __construct() {
     $this->time = microtime(TRUE);
   }
 
+  /**
+   * Returns an array with all database related events.
+   *
+   * @return list<class-string<\Drupal\Core\Database\Event\DatabaseEvent>>
+   *   An array with all database related events.
+   */
+  public static function all(): array {
+    return array_merge(
+      StatementEvent::all(),
+      TransactionEvent::all(),
+    );
+  }
+
 }
diff --git a/core/lib/Drupal/Core/Database/Event/TransactionBeginEvent.php b/core/lib/Drupal/Core/Database/Event/TransactionBeginEvent.php
new file mode 100644
index 0000000000..1727d42b59
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Event/TransactionBeginEvent.php
@@ -0,0 +1,36 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\Event;
+
+/**
+ * Represents the beginning of a transaction.
+ */
+class TransactionBeginEvent extends DatabaseEvent {
+
+  /**
+   * Constructs a TransactionBeginEvent object.
+   *
+   * See 'Customizing database settings' in settings.php for an explanation of
+   * the $key and $target connection values.
+   *
+   * @param string $key
+   *   The database connection key.
+   * @param string $target
+   *   The database connection target.
+   * @param string $id
+   *   The id of the transaction.
+   * @param string $name
+   *   The name of the transaction.
+   */
+  public function __construct(
+    public readonly string $key,
+    public readonly string $target,
+    public readonly string $id,
+    public readonly string $name,
+  ) {
+    parent::__construct();
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/Event/TransactionEvent.php b/core/lib/Drupal/Core/Database/Event/TransactionEvent.php
new file mode 100644
index 0000000000..0a607dec1f
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Event/TransactionEvent.php
@@ -0,0 +1,25 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\Event;
+
+/**
+ * Enumeration of the transaction related database events.
+ */
+enum TransactionEvent: string {
+
+  case Begin = TransactionBeginEvent::class;
+  case Savepoint = TransactionSavepointEvent::class;
+
+  /**
+   * Returns an array with all transaction related events.
+   *
+   * @return list<class-string<\Drupal\Core\Database\Event\DatabaseEvent>>
+   *   An array with all statement related events.
+   */
+  public static function all(): array {
+    return array_map(fn(self $case) => $case->value, self::cases());
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/Event/TransactionSavepointEvent.php b/core/lib/Drupal/Core/Database/Event/TransactionSavepointEvent.php
new file mode 100644
index 0000000000..c5d4d883ad
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Event/TransactionSavepointEvent.php
@@ -0,0 +1,39 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\Event;
+
+/**
+ * Represents the activation of a transaction savepoint.
+ */
+class TransactionSavepointEvent extends DatabaseEvent {
+
+  /**
+   * Constructs a TransactionSavepointEvent object.
+   *
+   * See 'Customizing database settings' in settings.php for an explanation of
+   * the $key and $target connection values.
+   *
+   * @param string $key
+   *   The database connection key.
+   * @param string $target
+   *   The database connection target.
+   * @param string $id
+   *   The id of the transaction.
+   * @param string $name
+   *   The name of the savepoint.
+   * @param array $stackItems
+   *   The current transaction stack items.
+   */
+  public function __construct(
+    public readonly string $key,
+    public readonly string $target,
+    public readonly string $id,
+    public readonly string $name,
+    public readonly array $stackItems,
+  ) {
+    parent::__construct();
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/Transaction/TransactionManagerBase.php b/core/lib/Drupal/Core/Database/Transaction/TransactionManagerBase.php
index 07e727b6a0..f91b7fad63 100644
--- a/core/lib/Drupal/Core/Database/Transaction/TransactionManagerBase.php
+++ b/core/lib/Drupal/Core/Database/Transaction/TransactionManagerBase.php
@@ -5,6 +5,9 @@
 namespace Drupal\Core\Database\Transaction;
 
 use Drupal\Core\Database\Connection;
+use Drupal\Core\Database\Event\TransactionBeginEvent;
+use Drupal\Core\Database\Event\TransactionEvent;
+use Drupal\Core\Database\Event\TransactionSavepointEvent;
 use Drupal\Core\Database\Transaction;
 use Drupal\Core\Database\TransactionCommitFailedException;
 use Drupal\Core\Database\TransactionNameNonUniqueException;
@@ -200,12 +203,53 @@ protected function dumpStackItemsAsString(): string {
     if ($this->stack() === []) {
       return '*** empty ***';
     }
+    return implode(' > ', $this->stackItemsAsArray());
+  }
+
+  /**
+   * Produces an array representation of the stack items.
+   *
+   * Drivers should not override this method unless they also override the
+   * $stack property.
+   *
+   * @return list<string>
+   *   The array of stack items represented like id\name.
+   */
+  protected function stackItemsAsArray(): array {
+    return array_map(fn(string $id, StackItem $item): string => $id . '\\' . $item->name,
+      array_keys($this->stack()),
+      array_values($this->stack()),
+    );
+  }
+
+  /**
+   * Enables transaction events dispatching.
+   *
+   * @param string[] $eventNames
+   *   (Optional) A list of transaction events to be enabled. If left blank,
+   *   all transaction events will be enabled.
+   */
+  public function enableEvents(array $eventNames = []): void {
+    $events = TransactionEvent::all();
+    if (!empty($eventNames)) {
+      $events = array_intersect($events, $eventNames);
+    }
+    $this->connection->enableEvents($events);
+  }
 
-    $temp = [];
-    foreach ($this->stack() as $id => $item) {
-      $temp[] = $id . '\\' . $item->name;
+  /**
+   * Disables transaction events dispatching.
+   *
+   * @param string[] $eventNames
+   *   (Optional) A list of transaction events to be disabled. If left blank,
+   *   all transaction events will be disabled.
+   */
+  public function disableEvents(array $eventNames = []): void {
+    $events = TransactionEvent::all();
+    if (!empty($eventNames)) {
+      $events = array_intersect($events, $eventNames);
     }
-    return implode(' > ', $temp);
+    $this->connection->disableEvents($events);
   }
 
   /**
@@ -234,8 +278,19 @@ public function push(string $name = ''): Transaction {
       throw new TransactionNameNonUniqueException("A transaction named {$name} is already in use. Active stack: " . $this->dumpStackItemsAsString());
     }
 
+    // Define an unique id for the transaction.
+    $id = uniqid('', TRUE);
+
     // Do the client-level processing.
     if ($this->stackDepth() === 0) {
+      if ($this->connection->isEventEnabled(TransactionBeginEvent::class)) {
+        $this->connection->dispatchEvent(new TransactionBeginEvent(
+          $this->connection->getKey(),
+          $this->connection->getTarget(),
+          $id,
+          $name,
+        ));
+      }
       $this->beginClientTransaction();
       $type = StackItemType::Root;
       $this->setConnectionTransactionState(ClientConnectionTransactionState::Active);
@@ -244,13 +299,19 @@ public function push(string $name = ''): Transaction {
       // If we're already in a Drupal transaction then we want to create a
       // database savepoint, rather than try to begin another database
       // transaction.
+      if ($this->connection->isEventEnabled(TransactionSavepointEvent::class)) {
+        $this->connection->dispatchEvent(new TransactionSavepointEvent(
+          $this->connection->getKey(),
+          $this->connection->getTarget(),
+          $id,
+          $name,
+          $this->stackItemsAsArray(),
+        ));
+      }
       $this->addClientSavepoint($name);
       $type = StackItemType::Savepoint;
     }
 
-    // Define an unique id for the transaction.
-    $id = uniqid('', TRUE);
-
     // Add an item on the stack, increasing its depth.
     $this->addStackItem($id, new StackItem($name, $type));
 
diff --git a/core/modules/system/tests/modules/database_test/src/EventSubscriber/DatabaseEventSubscriber.php b/core/modules/system/tests/modules/database_test/src/EventSubscriber/DatabaseEventSubscriber.php
index 767edc64a9..87be2e5aea 100644
--- a/core/modules/system/tests/modules/database_test/src/EventSubscriber/DatabaseEventSubscriber.php
+++ b/core/modules/system/tests/modules/database_test/src/EventSubscriber/DatabaseEventSubscriber.php
@@ -5,6 +5,8 @@
 use Drupal\Core\Database\Event\StatementExecutionEndEvent;
 use Drupal\Core\Database\Event\StatementExecutionFailureEvent;
 use Drupal\Core\Database\Event\StatementExecutionStartEvent;
+use Drupal\Core\Database\Event\TransactionBeginEvent;
+use Drupal\Core\Database\Event\TransactionSavepointEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
 /**
@@ -40,6 +42,8 @@ public static function getSubscribedEvents(): array {
       StatementExecutionStartEvent::class => 'onStatementExecutionStart',
       StatementExecutionEndEvent::class => 'onStatementExecutionEnd',
       StatementExecutionFailureEvent::class => 'onStatementExecutionFailure',
+      TransactionBeginEvent::class => 'onTransactionBegin',
+      TransactionSavepointEvent::class => 'onTransactionSavepoint',
     ];
   }
 
@@ -76,4 +80,24 @@ public function onStatementExecutionFailure(StatementExecutionFailureEvent $even
     $this->countStatementFailures++;
   }
 
+  /**
+   * Subscribes to a TransactionBeginEvent.
+   *
+   * @param \Drupal\Core\Database\Event\TransactionBeginEvent $event
+   *   The transaction event.
+   */
+  public function onTransactionBegin(TransactionBeginEvent $event): void {
+    throw new \RuntimeException($event->key . ' ' . $event->target . ' ' . $event->id . '\\' . $event->name);
+  }
+
+  /**
+   * Subscribes to a TransactionSavepointEvent.
+   *
+   * @param \Drupal\Core\Database\Event\TransactionSavepointEvent $event
+   *   The transaction event.
+   */
+  public function onTransactionSavepoint(TransactionSavepointEvent $event): void {
+    throw new \RuntimeException($event->key . ' ' . $event->target . ' ' . $event->id . '\\' . $event->name . ' stack: ' . implode(' > ', $event->stackItems));
+  }
+
 }
diff --git a/core/tests/Drupal/KernelTests/Core/Database/TransactionEventTest.php b/core/tests/Drupal/KernelTests/Core/Database/TransactionEventTest.php
new file mode 100644
index 0000000000..bc80ed5c6d
--- /dev/null
+++ b/core/tests/Drupal/KernelTests/Core/Database/TransactionEventTest.php
@@ -0,0 +1,46 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\KernelTests\Core\Database;
+
+use Drupal\Core\Database\Event\TransactionBeginEvent;
+
+/**
+ * Tests the Transaction events.
+ *
+ * @group Database
+ */
+class TransactionEventTest extends DatabaseTestBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp(): void {
+    parent::setUp();
+    $this->connection->transactionManager()->enableEvents();
+  }
+
+  /**
+   * Tests transaction beginning.
+   */
+  public function testTransactionBegin(): void {
+    $this->expectException(\RuntimeException::class);
+    $this->expectExceptionMessageMatches("/^default default .*drupal_transaction/");
+    $tx = $this->connection->startTransaction();
+  }
+
+  /**
+   * Tests adding a savepoint.
+   */
+  public function testTransactionSavepoint(): void {
+    $this->connection->transactionManager()->disableEvents([
+      TransactionBeginEvent::class,
+    ]);
+    $tx = $this->connection->startTransaction();
+    $this->expectException(\RuntimeException::class);
+    $this->expectExceptionMessageMatches("/^default default .*savepoint_1 stack: .*drupal_transaction/");
+    $savepoint = $this->connection->startTransaction();
+  }
+
+}
