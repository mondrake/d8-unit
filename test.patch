diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index b3cd1c5b0d..3850a39100 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -87,9 +87,9 @@
   protected $transactionalDDLSupport = FALSE;
 
   /**
-   * The actual PDO connection.
+   * The actual client connection.
    *
-   * @var \PDO
+   * @var object
    */
   protected $connection;
 
@@ -803,7 +803,7 @@ public function query($query, array $args = [], $options = []) {
 
         case Database::RETURN_INSERT_ID:
           $sequence_name = $options['sequence_name'] ?? NULL;
-          return $this->connection->lastInsertId($sequence_name);
+          return $this->lastInsertId($sequence_name);
 
         case Database::RETURN_NULL:
           return NULL;
diff --git a/core/modules/mysql/src/Driver/Database/mysql/Connection.php b/core/modules/mysql/src/Driver/Database/mysql/Connection.php
index e15575bcb0..49b4075398 100644
--- a/core/modules/mysql/src/Driver/Database/mysql/Connection.php
+++ b/core/modules/mysql/src/Driver/Database/mysql/Connection.php
@@ -271,7 +271,7 @@ protected function getMariaDbVersionMatch(): ?string {
    */
   protected function getServerVersion(): string {
     if (!$this->serverVersion) {
-      $this->serverVersion = $this->connection->query('SELECT VERSION()')->fetchColumn();
+      $this->serverVersion = $this->query('SELECT VERSION()')->fetchField();
     }
     return $this->serverVersion;
   }
diff --git a/core/tests/Drupal/KernelTests/Core/Database/DatabaseExceptionWrapperTest.php b/core/tests/Drupal/KernelTests/Core/Database/DatabaseExceptionWrapperTest.php
index 0fd2770fe5..37047cf662 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/DatabaseExceptionWrapperTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/DatabaseExceptionWrapperTest.php
@@ -20,8 +20,17 @@ class DatabaseExceptionWrapperTest extends KernelTestBase {
    * class, which defer the statement check to the moment of the execution.
    */
   public function testPrepareStatementFailOnExecution() {
+    $connection = Database::getConnection();
+    $connection_reflection_class = new \ReflectionClass($connection);
+    $client_connection_property = $connection_reflection_class->getProperty('connection');
+    $client_connection_property->setAccessible(TRUE);
+    $client_connection = $client_connection_property->getValue();
+dump($client_connection_property, $client_connection);
+    if (!$client_connection instanceof \PDO) {
+      $this->markTestSkipped("This tests can only run for drivers wrapping \\PDO connections.");
+    }
     $this->expectException(\PDOException::class);
-    $stmt = Database::getConnection()->prepareStatement('bananas', []);
+    $stmt = $connection->prepareStatement('bananas', []);
     $stmt->execute();
   }
 
diff --git a/core/tests/Drupal/Tests/Core/Database/Driver/mysql/ConnectionTest.php b/core/tests/Drupal/Tests/Core/Database/Driver/mysql/ConnectionTest.php
index e8d6370225..e6a3ea7cd2 100644
--- a/core/tests/Drupal/Tests/Core/Database/Driver/mysql/ConnectionTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/Driver/mysql/ConnectionTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\Core\Database\Driver\mysql;
 
+use Drupal\Core\Database\StatementWrapper;
 use Drupal\mysql\Driver\Database\mysql\Connection;
 use Drupal\Tests\UnitTestCase;
 
@@ -27,12 +28,20 @@ class ConnectionTest extends UnitTestCase {
    */
   private $pdoConnection;
 
+  /**
+   * A Statement prophecy.
+   *
+   * @var \Drupal\Core\Database\StatementWrapper|\Prophecy\Prophecy\ObjectProphecy
+   */
+  private $statement;
+
   /**
    * {@inheritdoc}
    */
   protected function setUp(): void {
     $this->pdoStatement = $this->prophesize(\PDOStatement::class);
     $this->pdoConnection = $this->prophesize(\PDO::class);
+    $this->statement = $this->prophesize(StatementWrapper::class);
   }
 
   /**
@@ -42,15 +51,12 @@ protected function setUp(): void {
    */
   private function createConnection(): Connection {
     /** @var \PDO $pdo_connection */
-    $pdo_connection = $this->pdoConnection->reveal();
-
-    return new class($pdo_connection) extends Connection {
-
-      public function __construct(\PDO $connection) {
-        $this->connection = $connection;
-      }
+    $pdo_connection = $this->pdoConnection
+      ->prepare('SELECT VERSION()')
+      ->shouldBeCalled()
+      ->willReturn($this->pdoStatement->reveal());
 
-    };
+    return new Connection($pdo_connection->reveal());
   }
 
   /**
@@ -59,16 +65,11 @@ public function __construct(\PDO $connection) {
    * @dataProvider providerVersionAndIsMariaDb
    */
   public function testVersionAndIsMariaDb(bool $expected_is_mariadb, string $server_version, string $expected_version): void {
-    $this->pdoStatement
-      ->fetchColumn()
+    $this->statement
+      ->fetchField()
       ->shouldBeCalled()
       ->willReturn($server_version);
 
-    $this->pdoConnection
-      ->query('SELECT VERSION()')
-      ->shouldBeCalled()
-      ->willReturn($this->pdoStatement->reveal());
-
     $connection = $this->createConnection();
 
     $is_mariadb = $connection->isMariaDb();
