diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index 7e405e1b1b..115561300b 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -13,6 +13,8 @@
 use Drupal\Core\Database\Query\Truncate;
 use Drupal\Core\Database\Query\Update;
 use Drupal\Core\Database\Query\Upsert;
+use Drupal\Core\Database\Transaction\TransactionManager;
+use Drupal\Core\Database\Transaction\TransactionManagerInterface;
 use Drupal\Core\Pager\PagerManagerInterface;
 
 /**
@@ -62,6 +64,11 @@ abstract class Connection {
    * transaction.
    *
    * @var array
+   *
+   * @deprecated in drupal:10.0.2 and is removed from drupal:11.0.0. The
+   *   transaction stack is now managed by TransactionManager.
+   *
+   * @see https://www.drupal.org/node/5555555
    */
   protected $transactionLayers = [];
 
@@ -204,6 +211,11 @@ abstract class Connection {
    * Post-root (non-nested) transaction commit callbacks.
    *
    * @var callable[]
+   *
+   * @deprecated in drupal:10.0.2 and is removed from drupal:11.0.0. The
+   *   transaction end callbacks are now managed by TransactionManager.
+   *
+   * @see https://www.drupal.org/node/5555555
    */
   protected $rootTransactionEndCallbacks = [];
 
@@ -226,6 +238,11 @@ abstract class Connection {
    */
   private array $enabledEvents = [];
 
+  /**
+   * The transaction manager.
+   */
+  protected TransactionManager $transactionManager;
+
   /**
    * Constructs a Connection object.
    *
@@ -276,6 +293,20 @@ public function __destruct() {
     $this->connection = NULL;
   }
 
+  /**
+   * Returns the client-level database connection object.
+   *
+   * This method should normally be used only within database driver code. Not
+   * doing so constitutes a risk of introducing code that is not database
+   * independent.
+   *
+   * @return object
+   *   The client-level database connection, for example \PDO.
+   */
+  public function getClientConnection(): object {
+    return $this->connection;
+  }
+
   /**
    * Returns the default query options for any given query.
    *
@@ -1294,6 +1325,19 @@ public function escapeLike($string) {
     return addcslashes($string, '\%_');
   }
 
+  /**
+   * Returns the transaction manager.
+   *
+   * @return \Drupal\Core\Database\Transaction\TransactionManagerInterface
+   *   The transaction manager.
+   */
+  public function transactionManager(): TransactionManagerInterface {
+    if (!isset($this->transactionManager)) {
+      $this->transactionManager = new TransactionManager($this);
+    }
+    return $this->transactionManager;
+  }
+
   /**
    * Determines if there is an active transaction open.
    *
@@ -1301,6 +1345,9 @@ public function escapeLike($string) {
    *   TRUE if we're currently in a transaction, FALSE otherwise.
    */
   public function inTransaction() {
+    if (method_exists($this, 'transactionManager') && $this->transactionManager()->enabled()) {
+      return $this->transactionManager()->inTransaction();
+    }
     return ($this->transactionDepth() > 0);
   }
 
@@ -1311,6 +1358,9 @@ public function inTransaction() {
    *   The current transaction depth.
    */
   public function transactionDepth() {
+    if (method_exists($this, 'transactionManager') && $this->transactionManager()->enabled()) {
+      return $this->transactionManager()->stackDepth();
+    }
     return count($this->transactionLayers);
   }
 
@@ -1326,6 +1376,9 @@ public function transactionDepth() {
    * @see \Drupal\Core\Database\Transaction
    */
   public function startTransaction($name = '') {
+    if (method_exists($this, 'transactionManager') && $this->transactionManager()->enabled()) {
+      return $this->transactionManager()->push($name);
+    }
     $class = $this->getDriverClass('Transaction');
     return new $class($this, $name);
   }
@@ -1345,6 +1398,9 @@ public function startTransaction($name = '') {
    * @see \Drupal\Core\Database\Transaction::rollBack()
    */
   public function rollBack($savepoint_name = 'drupal_transaction') {
+    if (method_exists($this, 'transactionManager') && $this->transactionManager()->enabled()) {
+      $this->transactionManager()->rollback($savepoint_name);
+    }
     if (!$this->inTransaction()) {
       throw new TransactionNoActiveException();
     }
@@ -1469,6 +1525,9 @@ public function popTransaction($name) {
    * @see \Drupal\Core\Database\Connection::doCommit()
    */
   public function addRootTransactionEndCallback(callable $callback) {
+    if (method_exists($this, 'transactionManager') && $this->transactionManager()->enabled()) {
+      $this->transactionManager()->addPostTransactionCallback($callback);
+    }
     if (!$this->transactionLayers) {
       throw new \LogicException('Root transaction end callbacks can only be added when there is an active transaction.');
     }
@@ -1644,6 +1703,7 @@ abstract public function mapConditionOperator($operator);
    * @see \Drupal\Core\Database\Transaction
    */
   public function commit() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
     throw new TransactionExplicitCommitNotAllowedException();
   }
 
diff --git a/core/lib/Drupal/Core/Database/Transaction.php b/core/lib/Drupal/Core/Database/Transaction.php
index 76d5fc8f5f..9a64e92f08 100644
--- a/core/lib/Drupal/Core/Database/Transaction.php
+++ b/core/lib/Drupal/Core/Database/Transaction.php
@@ -48,6 +48,11 @@ class Transaction {
   protected $name;
 
   public function __construct(Connection $connection, $name = NULL) {
+    if (method_exists($connection, 'transactionManager') && $connection->transactionManager()->enabled()) {
+      $this->connection = $connection;
+      $this->name = $name;
+      return;
+    }
     $this->connection = $connection;
     // If there is no transaction depth, then no transaction has started. Name
     // the transaction 'drupal_transaction'.
@@ -66,6 +71,10 @@ public function __construct(Connection $connection, $name = NULL) {
   }
 
   public function __destruct() {
+    if (method_exists($this->connection, 'transactionManager') && $this->connection->transactionManager()->enabled()) {
+      $this->connection->transactionManager()->unpile($this->name);
+      return;
+    }
     // If we rolled back then the transaction would have already been popped.
     if (!$this->rolledBack) {
       $this->connection->popTransaction($this->name);
@@ -90,6 +99,10 @@ public function name() {
    * @see \Drupal\Core\Database\Connection::rollBack()
    */
   public function rollBack() {
+    if (method_exists($this->connection, 'transactionManager') && $this->connection->transactionManager()->enabled()) {
+      $this->connection->transactionManager()->rollback($this->name);
+      return;
+    }
     $this->rolledBack = TRUE;
     $this->connection->rollBack($this->name);
   }
diff --git a/core/lib/Drupal/Core/Database/Transaction/ClientConnectionTransactionState.php b/core/lib/Drupal/Core/Database/Transaction/ClientConnectionTransactionState.php
new file mode 100644
index 0000000000..100d71b59d
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Transaction/ClientConnectionTransactionState.php
@@ -0,0 +1,16 @@
+<?php
+// phpcs:disable Drupal.Commenting.FileComment.Missing
+namespace Drupal\Core\Database\Transaction;
+
+/**
+ * Enumeration of the possible states of a client connection transaction.
+ */
+enum ClientConnectionTransactionState {
+
+  case Active;
+  case RolledBack;
+  case RollbackFailed;
+  case Committed;
+  case CommitFailed;
+
+}
diff --git a/core/lib/Drupal/Core/Database/Transaction/ManagerStackItem.php b/core/lib/Drupal/Core/Database/Transaction/ManagerStackItem.php
new file mode 100644
index 0000000000..5edca7915d
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Transaction/ManagerStackItem.php
@@ -0,0 +1,24 @@
+<?php
+
+namespace Drupal\Core\Database\Transaction;
+
+/**
+ * A representation of a Drupal transaction on the TransactionManager stack.
+ */
+final class ManagerStackItem {
+
+  /**
+   * Constructor.
+   *
+   * @param string $name
+   *   The name of the Drupal transaction.
+   * @param \Drupal\Core\Database\Transaction\ManagerStackItemType $type
+   *   The type of the Drupal transaction, root or savepoint.
+   */
+  public function __construct(
+    public readonly string $name,
+    public readonly ManagerStackItemType $type,
+  ) {
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/Transaction/ManagerStackItemType.php b/core/lib/Drupal/Core/Database/Transaction/ManagerStackItemType.php
new file mode 100644
index 0000000000..4d2fd5e781
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Transaction/ManagerStackItemType.php
@@ -0,0 +1,13 @@
+<?php
+// phpcs:disable Drupal.Commenting.FileComment.Missing
+namespace Drupal\Core\Database\Transaction;
+
+/**
+ * Enumeration of the types of items in the Drupal transaction stack.
+ */
+enum ManagerStackItemType {
+
+  case Root;
+  case Savepoint;
+
+}
diff --git a/core/lib/Drupal/Core/Database/Transaction/TransactionManager.php b/core/lib/Drupal/Core/Database/Transaction/TransactionManager.php
new file mode 100644
index 0000000000..ecee303bdd
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Transaction/TransactionManager.php
@@ -0,0 +1,344 @@
+<?php
+
+namespace Drupal\Core\Database\Transaction;
+
+use Drupal\Core\Database\Connection;
+use Drupal\Core\Database\Transaction;
+use Drupal\Core\Database\TransactionCommitFailedException;
+use Drupal\Core\Database\TransactionNameNonUniqueException;
+use Drupal\Core\Database\TransactionNoActiveException;
+use Drupal\Core\Database\TransactionOutOfOrderException;
+
+/**
+ * @todo
+ *
+ * On many databases transactions cannot nest. Instead, we track nested calls
+ * to transactions and collapse them into a single client transaction.
+ */
+class TransactionManager implements TransactionManagerInterface {
+
+  /**
+   * The stack of Drupal transactions currently active.
+   *
+   * @var array<string,ManagerStackItem>
+   */
+  private array $stack = [];
+
+  /**
+   * A list of Drupal transactions rolled back but not yet unpiled.
+   *
+   * @var array<string,true>
+   */
+  private array $rollbacks = [];
+
+  /**
+   * A list of post-transaction callbacks.
+   *
+   * @var callable[]
+   */
+  private array $postTransactionCallbacks = [];
+
+  /**
+   * The state of the underlying client connection transaction.
+   */
+  protected ClientConnectionTransactionState $connectionTransactionState;
+
+  /**
+   * Informs the driver's Connection on whether the manager is usable.
+   *
+   * @todo remove this function in Drupal 11.0.0 when all drivers will use
+   *   the TransactionManager.
+   */
+  public function enabled(): bool {
+    return FALSE;
+  }
+
+  /**
+   * Constructor.
+   *
+   * @param \Drupal\Core\Database\Connection $connection
+   *   The database connection.
+   */
+  public function __construct(
+    protected readonly Connection $connection,
+  ) {
+  }
+
+  /**
+   * Checks if a named Drupal transaction is active.
+   *
+   * @param string $name
+   *   The name of the transaction.
+   *
+   * @return bool
+   *   TRUE if the transaction is active, FALSE otherwise.
+   */
+  protected function has(string $name): bool {
+    return isset($this->stack[$name]);
+  }
+
+  /**
+   * Returns the current depth of the transaction stack.
+   *
+   * @return int
+   *   The current depth of the transaction stack.
+   *
+   * @todo consider making this function protected.
+   */
+  public function stackDepth(): int {
+    return count($this->stack);
+  }
+
+  /**
+   * Determines if there is an active transaction open.
+   *
+   * @return bool
+   *   TRUE if we're currently in a transaction, FALSE otherwise.
+   */
+  public function inTransaction(): bool {
+    return (bool) $this->stackDepth() && $this->connectionTransactionState === ClientConnectionTransactionState::Active;
+  }
+
+  /**
+   * Pushes a new Drupal transaction on the stack.
+   *
+   * This begins a client connection transaction if there is not one active,
+   * or adds a savepoint to the active one.
+   *
+   * @param string $name
+   *   (optional) The name of the savepoint.
+   *
+   * @return \Drupal\Core\Database\Transaction
+   *   A Transaction object.
+   *
+   * @throws \Drupal\Core\Database\TransactionNameNonUniqueException
+   */
+  public function push(string $name = ''): Transaction {
+    if (!$this->inTransaction()) {
+      // If there is no transaction active, name the transaction
+      // 'drupal_transaction'.
+      $name = 'drupal_transaction';
+    }
+    elseif (!$name) {
+      // Within transactions, savepoints are used. Each savepoint requires a
+      // name. So if no name is present we need to create one.
+      $name = 'savepoint_' . $this->stackDepth();
+    }
+
+    if ($this->has($name)) {
+      throw new TransactionNameNonUniqueException($name . " is already in use.");
+    }
+
+    // Do the client-level processing.
+    if ($this->stackDepth() === 0) {
+      $this->beginClientTransaction();
+      $type = ManagerStackItemType::Root;
+      $this->connectionTransactionState = ClientConnectionTransactionState::Active;
+    }
+    else {
+      // If we're already in a Drupal transaction then we want to create a
+      // database savepoint, rather than try to begin another database
+      // transaction.
+      $this->addClientSavepoint($name);
+      $type = ManagerStackItemType::Savepoint;
+    }
+
+    // Push the transaction on the stack, increasing its depth.
+    $this->stack[$name] = new ManagerStackItem($name, $type);
+
+    return new Transaction($this->connection, $name);
+  }
+
+  public function unpile(string $name): bool {
+    // If an already rolled back Drupal transaction, do nothing on the client
+    // connection, just cleanup the list of transactions rolled back.
+    if (isset($this->rollbacks[$name])) {
+      unset($this->rollbacks[$name]);
+      return TRUE;
+    }
+
+    if (!$this->has($name)) {
+      throw new TransactionOutOfOrderException();
+    }
+
+    // Release the client transaction savepoint in case the Drupal transaction
+    // is not a root one.
+    if ($this->stack[$name]->type === ManagerStackItemType::Savepoint && $this->connectionTransactionState === ClientConnectionTransactionState::Active) {
+      $this->releaseClientSavepoint($name);
+    }
+
+    // Remove the transaction from the stack.
+    unset($this->stack[$name]);
+
+    // If this was the last Drupal transaction open, we can commit the client
+    // transaction.
+    if ($this->stackDepth() === 0 && $this->connectionTransactionState === ClientConnectionTransactionState::Active) {
+      $this->commitClientTransaction();
+      $this->connectionTransactionState = ClientConnectionTransactionState::Committed;
+    }
+
+    return TRUE;
+  }
+
+  public function rollback(string $name) {
+    if (!$this->inTransaction()) {
+      throw new TransactionNoActiveException();
+    }
+
+    // Do the client-level processing.
+    switch ($this->stack[$name]->type) {
+      case ManagerStackItemType::Root:
+        $this->rollbackClientTransaction();
+        $this->connectionTransactionState = ClientConnectionTransactionState::RolledBack;
+        break;
+
+      case ManagerStackItemType::Savepoint:
+        $this->rollbackClientSavepoint($name);
+        break;
+
+    }
+
+    // Rolled back item should match the last one in stack.
+    if ($name !== array_key_last($this->stack)) {
+      throw new TransactionOutOfOrderException();
+    }
+
+    $this->rollbacks[$name] = TRUE;
+    unset($this->stack[$name]);
+
+    // If this was the last Drupal transaction open, we can commit the client
+    // transaction.
+    if ($this->stackDepth() === 0 && $this->connectionTransactionState === ClientConnectionTransactionState::Active) {
+      $this->commitClientTransaction();
+      $this->connectionTransactionState = ClientConnectionTransactionState::Committed;
+    }
+  }
+
+  /**
+   * Adds a root transaction end callback.
+   *
+   * These callbacks are invoked immediately after the client transaction has
+   * been committed or rolled back.
+   *
+   * It can for example be used to avoid deadlocks on write-heavy tables that
+   * do not need to be part of the transaction, like cache tag invalidations.
+   *
+   * Another use case is that services using alternative backends like Redis and
+   * Memcache cache implementations can replicate the transaction-behavior of
+   * the database cache backend and avoid race conditions.
+   *
+   * An argument is passed to the callbacks that indicates whether the
+   * transaction was successful or not.
+   *
+   * @param callable $callback
+   *   The callback to invoke.
+   *
+   * @throws \LogicException
+   *   When a callback addition is attempted but no transaction is active.
+   */
+  public function addPostTransactionCallback(callable $callback): void {
+    if (!$this->inTransaction()) {
+      throw new \LogicException('Root transaction end callbacks can only be added when there is an active transaction.');
+    }
+    $this->postTransactionCallbacks[] = $callback;
+  }
+
+  /**
+   * Begins a transaction on the client connection.
+   *
+   * @return bool
+   *   Returns TRUE on success or FALSE on failure.
+   */
+  protected function beginClientTransaction(): bool {
+    // dump([__METHOD__]);
+    return $this->connection->getClientConnection()->beginTransaction();
+  }
+
+  /**
+   * Adds a savepoint on the client transaction.
+   *
+   * @param string $name
+   *   The name of the savepoint.
+   *
+   * @return bool
+   *   Returns TRUE on success or FALSE on failure.
+   */
+  protected function addClientSavepoint(string $name): bool {
+    // dump([__METHOD__, $name]);
+    $this->connection->query('SAVEPOINT ' . $name);
+    return TRUE;
+  }
+
+  /**
+   * Rolls back to a savepoint on the client transaction.
+   *
+   * @param string $name
+   *   The name of the savepoint.
+   *
+   * @return bool
+   *   Returns TRUE on success or FALSE on failure.
+   */
+  protected function rollbackClientSavepoint(string $name): bool {
+    // dump([__METHOD__, $name]);
+    $this->connection->query('ROLLBACK TO SAVEPOINT ' . $name);
+    return TRUE;
+  }
+
+  /**
+   * Releases a savepoint on the client transaction.
+   *
+   * @param string $name
+   *   The name of the savepoint.
+   *
+   * @return bool
+   *   Returns TRUE on success or FALSE on failure.
+   */
+  protected function releaseClientSavepoint(string $name): bool {
+    // dump([__METHOD__, $name]);
+    $this->connection->query('RELEASE SAVEPOINT ' . $name);
+    return TRUE;
+  }
+
+  /**
+   * Rolls back a client transaction.
+   *
+   * @return bool
+   *   Returns TRUE on success or FALSE on failure.
+   */
+  protected function rollbackClientTransaction(): bool {
+    // dump([__METHOD__]);
+    $this->connection->getClientConnection()->rollBack();
+    return TRUE;
+  }
+
+  /**
+   * Commits a client transaction.
+   *
+   * @return bool
+   *   Returns TRUE on success or FALSE on failure.
+   */
+  protected function commitClientTransaction(): bool {
+    // dump([__METHOD__]);
+    $this->doCommit();
+    return TRUE;
+  }
+
+  /**
+   * Do the actual commit, invoke post-commit callbacks.
+   */
+  private function doCommit() {
+    $success = $this->connection->getClientConnection()->commit();
+    if (!empty($this->postTransactionCallbacks)) {
+      $callbacks = $this->postTransactionCallbacks;
+      $this->postTransactionCallbacks = [];
+      foreach ($callbacks as $callback) {
+        call_user_func($callback, $success);
+      }
+    }
+
+    if (!$success) {
+      throw new TransactionCommitFailedException();
+    }
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/Transaction/TransactionManagerInterface.php b/core/lib/Drupal/Core/Database/Transaction/TransactionManagerInterface.php
new file mode 100644
index 0000000000..29635fdba0
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Transaction/TransactionManagerInterface.php
@@ -0,0 +1,9 @@
+<?php
+
+namespace Drupal\Core\Database\Transaction;
+
+/**
+ * @todo
+ */
+interface TransactionManagerInterface {
+}
diff --git a/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php b/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php
index 72a0cb5b68..699847ce87 100644
--- a/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php
+++ b/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php
@@ -7,6 +7,7 @@
 use Drupal\Core\Database\Connection as DatabaseConnection;
 use Drupal\Core\Database\StatementInterface;
 use Drupal\Core\Database\SupportsTemporaryTablesInterface;
+use Drupal\Core\Database\Transaction\TransactionManagerInterface;
 
 /**
  * SQLite implementation of \Drupal\Core\Database\Connection.
@@ -27,6 +28,11 @@ class Connection extends DatabaseConnection implements SupportsTemporaryTablesIn
    * Whether or not the active transaction (if any) will be rolled back.
    *
    * @var bool
+   *
+   * @deprecated in drupal:10.0.2 and is removed from drupal:11.0.0. It is
+   *   unused.
+   *
+   * @see https://www.drupal.org/node/5555555
    */
   protected $willRollback;
 
@@ -448,6 +454,16 @@ public function nextId($existing_id = 0) {
     return $this->query('SELECT [value] FROM {sequences}')->fetchField();
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function transactionManager(): TransactionManagerInterface {
+    if (!isset($this->transactionManager)) {
+      $this->transactionManager = new TransactionManager($this);
+    }
+    return $this->transactionManager;
+  }
+
   /**
    * {@inheritdoc}
    */
diff --git a/core/modules/sqlite/src/Driver/Database/sqlite/TransactionManager.php b/core/modules/sqlite/src/Driver/Database/sqlite/TransactionManager.php
new file mode 100644
index 0000000000..f25fa7be74
--- /dev/null
+++ b/core/modules/sqlite/src/Driver/Database/sqlite/TransactionManager.php
@@ -0,0 +1,16 @@
+<?php
+
+namespace Drupal\sqlite\Driver\Database\sqlite;
+
+use Drupal\Core\Database\Transaction\TransactionManager as BaseTransactionManager;
+
+/**
+ * @todo
+ */
+class TransactionManager extends BaseTransactionManager {
+
+  public function enabled(): bool {
+    return TRUE;
+  }
+
+}
