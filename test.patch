diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index 97b528c25b..e37bc95ae5 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -471,6 +471,10 @@ public function quoteIdentifiers($sql) {
     return str_replace(['[', ']'], $this->identifierQuotes, $sql);
   }
 
+  public function placeholderFormat(): PlaceholderType {
+    return PlaceholderType::Named;
+  }
+
   /**
    * Find the prefix for a table.
    *
diff --git a/core/lib/Drupal/Core/Database/PlaceholderType.php b/core/lib/Drupal/Core/Database/PlaceholderType.php
new file mode 100644
index 0000000000..7190103ba9
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/PlaceholderType.php
@@ -0,0 +1,18 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database;
+
+/**
+ * Enumeration of the types of possible placeholders in statements.
+ */
+enum PlaceholderType {
+
+  // Placeholders in the named format ':placeholder'.
+  case Named;
+
+  // Placeholders in the positional format '?'.
+  case Positional;
+
+}
diff --git a/core/lib/Drupal/Core/Database/Query/Insert.php b/core/lib/Drupal/Core/Database/Query/Insert.php
index 58bd8d1811..8ca469660e 100644
--- a/core/lib/Drupal/Core/Database/Query/Insert.php
+++ b/core/lib/Drupal/Core/Database/Query/Insert.php
@@ -132,7 +132,7 @@ public function __toString() {
     $placeholders = [];
     $placeholders = array_pad($placeholders, count($this->defaultFields), 'default');
     $placeholders = array_pad($placeholders, count($this->insertFields), '?');
-
+dump([__METHOD__, $this->queryOptions, $comments . 'INSERT INTO {' . $this->table . '} (' . implode(', ', $insert_fields) . ') VALUES (' . implode(', ', $placeholders) . ')']);
     return $comments . 'INSERT INTO {' . $this->table . '} (' . implode(', ', $insert_fields) . ') VALUES (' . implode(', ', $placeholders) . ')';
   }
 
diff --git a/core/lib/Drupal/Core/Database/Query/InsertTrait.php b/core/lib/Drupal/Core/Database/Query/InsertTrait.php
index a429c88eea..49830dc1e5 100644
--- a/core/lib/Drupal/Core/Database/Query/InsertTrait.php
+++ b/core/lib/Drupal/Core/Database/Query/InsertTrait.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Core\Database\Query;
 
+use Drupal\Core\Database\PlaceholderType;
+
 /**
  * Provides common functionality for INSERT and UPSERT queries.
  *
@@ -161,7 +163,10 @@ protected function getInsertPlaceholderFragment(array $nested_insert_values, arr
 
         $new_placeholder = $max_placeholder + count($insert_values);
         for ($i = $max_placeholder; $i < $new_placeholder; ++$i) {
-          $placeholders[] = ':db_insert_placeholder_' . $i;
+          $placeholders[] = match ($this->queryOptions['placeholder_format']) {
+            PlaceholderType::Named => ':db_insert_placeholder_' . $i,
+            PlaceholderType::Positional => '?',
+          };
         }
         $max_placeholder = $new_placeholder;
         $values[] = '(' . implode(', ', $placeholders) . ')';
diff --git a/core/lib/Drupal/Core/Database/Query/Query.php b/core/lib/Drupal/Core/Database/Query/Query.php
index 37bce1a8f9..334e8a7076 100644
--- a/core/lib/Drupal/Core/Database/Query/Query.php
+++ b/core/lib/Drupal/Core/Database/Query/Query.php
@@ -78,6 +78,7 @@ public function __construct(Connection $connection, $options) {
     $this->connectionTarget = $this->connection->getTarget();
 
     $this->queryOptions = $options;
+    $this->queryOptions['placeholder_format'] ??= $this->connection->placeholderFormat();
   }
 
   /**
diff --git a/core/modules/mysql/src/Driver/Database/mysql/Insert.php b/core/modules/mysql/src/Driver/Database/mysql/Insert.php
index e14e6d0d28..e6f19f4b6d 100644
--- a/core/modules/mysql/src/Driver/Database/mysql/Insert.php
+++ b/core/modules/mysql/src/Driver/Database/mysql/Insert.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\mysql\Driver\Database\mysql;
 
+use Drupal\Core\Database\PlaceholderType;
 use Drupal\Core\Database\Query\Insert as QueryInsert;
 
 /**
@@ -17,6 +18,7 @@ public function __construct(Connection $connection, string $table, array $option
     // @see https://www.drupal.org/project/drupal/issues/3256524
     parent::__construct($connection, $table, $options);
     unset($this->queryOptions['return']);
+    $this->queryOptions['placeholder_format'] = PlaceholderType::Positional;
   }
 
   public function execute() {
@@ -31,7 +33,12 @@ public function execute() {
       $values = [];
       foreach ($this->insertValues as $insert_values) {
         foreach ($insert_values as $value) {
-          $values[':db_insert_placeholder_' . $max_placeholder++] = $value;
+          if ($this->queryOptions['placeholder_format'] === PlaceholderType::Named) {
+            $values[':db_insert_placeholder_' . $max_placeholder++] = $value;
+          }
+          else {
+            $values[$max_placeholder++] = $value;
+          }
         }
       }
     }
@@ -68,12 +75,14 @@ public function __toString() {
     // pass it back, as any remaining options are irrelevant.
     if (!empty($this->fromQuery)) {
       $insert_fields_string = $insert_fields ? ' (' . implode(', ', $insert_fields) . ') ' : ' ';
+dump([__METHOD__, 'a', $comments . 'INSERT INTO {' . $this->table . '}' . $insert_fields_string . $this->fromQuery]);
       return $comments . 'INSERT INTO {' . $this->table . '}' . $insert_fields_string . $this->fromQuery;
     }
 
     $query = $comments . 'INSERT INTO {' . $this->table . '} (' . implode(', ', $insert_fields) . ') VALUES ';
 
     $values = $this->getInsertPlaceholderFragment($this->insertValues, $this->defaultFields);
+dump([__METHOD__, 'b', $query, $values]);
     $query .= implode(', ', $values);
 
     return $query;
