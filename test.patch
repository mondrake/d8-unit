diff --git a/core/lib/Drupal/Core/Test/PhpUnitCompatibility/PhpUnit4/FrameworkAssertionFailedError.php b/core/lib/Drupal/Core/Test/PhpUnitCompatibility/PhpUnit4/FrameworkAssertionFailedError.php
new file mode 100644
index 0000000000..9907e3df67
--- /dev/null
+++ b/core/lib/Drupal/Core/Test/PhpUnitCompatibility/PhpUnit4/FrameworkAssertionFailedError.php
@@ -0,0 +1,13 @@
+<?php
+
+namespace Drupal\Core\Test\PhpUnitCompatibility\PhpUnit4;
+
+use PHPUnit\Framework\AssertionFailedError;
+
+@trigger_error('\PHPUnit_Framework_AssertionFailedError is deprecated in Drupal 8.8.0 and will be removed before Drupal 9.0.0. Use \PHPUnit\Framework\AssertionFailedError instead. See https://www.drupal.org/node/3056869', E_USER_DEPRECATED);
+
+/**
+ * Makes Drupal's test API backward compatible with PHPUnit4 classes.
+ */
+class FrameworkAssertionFailedError extends AssertionFailedError {
+}
diff --git a/core/lib/Drupal/Core/Test/PhpUnitCompatibility/PhpUnit4/FrameworkConstraintCount.php b/core/lib/Drupal/Core/Test/PhpUnitCompatibility/PhpUnit4/FrameworkConstraintCount.php
new file mode 100644
index 0000000000..ef327afe8d
--- /dev/null
+++ b/core/lib/Drupal/Core/Test/PhpUnitCompatibility/PhpUnit4/FrameworkConstraintCount.php
@@ -0,0 +1,13 @@
+<?php
+
+namespace Drupal\Core\Test\PhpUnitCompatibility\PhpUnit4;
+
+use PHPUnit\Framework\Constraint\Count;
+
+@trigger_error('\PHPUnit_Framework_Constraint_Count is deprecated in Drupal 8.8.0 and will be removed before Drupal 9.0.0. Use \PHPUnit\Framework\Constraint\Count instead. See https://www.drupal.org/node/3056869', E_USER_DEPRECATED);
+
+/**
+ * Makes Drupal's test API backward compatible with PHPUnit4 classes.
+ */
+class FrameworkConstraintCount extends Count {
+}
diff --git a/core/lib/Drupal/Core/Test/PhpUnitCompatibility/PhpUnit4/FrameworkError.php b/core/lib/Drupal/Core/Test/PhpUnitCompatibility/PhpUnit4/FrameworkError.php
new file mode 100644
index 0000000000..f2c3a091a5
--- /dev/null
+++ b/core/lib/Drupal/Core/Test/PhpUnitCompatibility/PhpUnit4/FrameworkError.php
@@ -0,0 +1,13 @@
+<?php
+
+namespace Drupal\Core\Test\PhpUnitCompatibility\PhpUnit4;
+
+use PHPUnit\Framework\Error\Error;
+
+@trigger_error('\PHPUnit_Framework_Error is deprecated in Drupal 8.8.0 and will be removed before Drupal 9.0.0. Use \PHPUnit\Framework\Error\Error instead. See https://www.drupal.org/node/3056869', E_USER_DEPRECATED);
+
+/**
+ * Makes Drupal's test API backward compatible with PHPUnit4 classes.
+ */
+class FrameworkError extends Error {
+}
diff --git a/core/modules/aggregator/tests/src/Unit/Plugin/AggregatorPluginSettingsBaseTest.php b/core/modules/aggregator/tests/src/Unit/Plugin/AggregatorPluginSettingsBaseTest.php
index 51525b9814..a6918a2127 100644
--- a/core/modules/aggregator/tests/src/Unit/Plugin/AggregatorPluginSettingsBaseTest.php
+++ b/core/modules/aggregator/tests/src/Unit/Plugin/AggregatorPluginSettingsBaseTest.php
@@ -24,7 +24,7 @@ class AggregatorPluginSettingsBaseTest extends UnitTestCase {
   /**
    * The stubbed config factory object.
    *
-   * @var \PHPUnit_Framework_MockObject_MockBuilder
+   * @var \PHPUnit\Framework\MockObject\MockBuilder
    */
   protected $configFactory;
 
@@ -56,7 +56,7 @@ protected function setUp() {
         ->will($this->returnValue(['aggregator_test' => ['title' => '', 'description' => '']]));
     }
 
-    /** @var \Drupal\Core\Messenger\MessengerInterface|\PHPUnit_Framework_MockObject_MockBuilder $messenger */
+    /** @var \Drupal\Core\Messenger\MessengerInterface|\PHPUnit\Framework\MockObject\MockBuilder $messenger */
     $messenger = $this->createMock(MessengerInterface::class);
     $messenger->expects($this->any())->method('addMessage');
 
diff --git a/core/modules/datetime/tests/src/Kernel/DateTimeItemTest.php b/core/modules/datetime/tests/src/Kernel/DateTimeItemTest.php
index 7c1ca1ef9b..03fc213e9d 100644
--- a/core/modules/datetime/tests/src/Kernel/DateTimeItemTest.php
+++ b/core/modules/datetime/tests/src/Kernel/DateTimeItemTest.php
@@ -10,6 +10,7 @@
 use Drupal\field\Entity\FieldConfig;
 use Drupal\Tests\field\Kernel\FieldKernelTestBase;
 use Drupal\field\Entity\FieldStorageConfig;
+use PHPUnit\Framework\AssertionFailedError;
 
 /**
  * Tests the new entity API for the date field type.
@@ -255,7 +256,7 @@ public function testSetValueProperty() {
    * @dataProvider datetimeValidationProvider
    */
   public function testDatetimeValidation($value) {
-    $this->expectException(\PHPUnit_Framework_AssertionFailedError::class);
+    $this->expectException(AssertionFailedError::class);
 
     $this->fieldStorage->setSetting('datetime_type', DateTimeItem::DATETIME_TYPE_DATETIME);
     $this->fieldStorage->save();
@@ -315,7 +316,7 @@ public function datetimeValidationProvider() {
    * @dataProvider dateonlyValidationProvider
    */
   public function testDateonlyValidation($value) {
-    $this->expectException(\PHPUnit_Framework_AssertionFailedError::class);
+    $this->expectException(AssertionFailedError::class);
 
     $this->fieldStorage->setSetting('datetime_type', DateTimeItem::DATETIME_TYPE_DATE);
     $this->fieldStorage->save();
diff --git a/core/modules/image/tests/src/Kernel/ImageItemTest.php b/core/modules/image/tests/src/Kernel/ImageItemTest.php
index bd2c53460d..5f095bb8a8 100644
--- a/core/modules/image/tests/src/Kernel/ImageItemTest.php
+++ b/core/modules/image/tests/src/Kernel/ImageItemTest.php
@@ -12,6 +12,7 @@
 use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\file\Entity\File;
 use Drupal\user\Entity\Role;
+use PHPUnit\Framework\Error\Warning;
 
 /**
  * Tests using entity fields of the image field type.
@@ -153,7 +154,7 @@ public function testImageItemMalformed() {
       $this->fail('Exception did not fail');
     }
     catch (EntityStorageException $exception) {
-      $this->assertInstanceOf(\PHPUnit_Framework_Error_Warning::class, $exception->getPrevious());
+      $this->assertInstanceOf(Warning::class, $exception->getPrevious());
       $this->assertEquals($exception->getMessage(), 'Missing file with ID 9999.');
       $this->assertEmpty($entity->image_test->width);
       $this->assertEmpty($entity->image_test->height);
diff --git a/core/modules/locale/tests/src/Unit/LocaleLookupTest.php b/core/modules/locale/tests/src/Unit/LocaleLookupTest.php
index e386de3a48..639e812bd3 100644
--- a/core/modules/locale/tests/src/Unit/LocaleLookupTest.php
+++ b/core/modules/locale/tests/src/Unit/LocaleLookupTest.php
@@ -46,7 +46,7 @@ class LocaleLookupTest extends UnitTestCase {
   /**
    * A mocked config factory built with UnitTestCase::getConfigFactoryStub().
    *
-   * @var \Drupal\Core\Config\ConfigFactory|\PHPUnit_Framework_MockObject_MockBuilder
+   * @var \Drupal\Core\Config\ConfigFactory|\PHPUnit\Framework\MockObject\MockBuilder
    */
   protected $configFactory;
 
diff --git a/core/modules/simpletest/src/TestDiscovery.php b/core/modules/simpletest/src/TestDiscovery.php
index a9cbe15db7..df72694cf4 100644
--- a/core/modules/simpletest/src/TestDiscovery.php
+++ b/core/modules/simpletest/src/TestDiscovery.php
@@ -8,7 +8,7 @@
 use Drupal\Core\Extension\ExtensionDiscovery;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\simpletest\Exception\MissingGroupException;
-use PHPUnit_Util_Test;
+use PHPUnit\Util\Test;
 
 /**
  * Discovers available tests.
@@ -432,14 +432,14 @@ public static function parseTestClassSummary($doc_comment) {
    *     - module: A list of Drupal module dependencies that are required to
    *       exist.
    *
-   * @see PHPUnit_Util_Test::parseTestMethodAnnotations()
+   * @see \PHPUnit\Util\Test::parseTestMethodAnnotations()
    * @see http://phpunit.de/manual/current/en/incomplete-and-skipped-tests.html#incomplete-and-skipped-tests.skipping-tests-using-requires
    */
   public static function parseTestClassAnnotations(\ReflectionClass $class) {
-    $annotations = PHPUnit_Util_Test::parseTestMethodAnnotations($class->getName())['class'];
+    $annotations = Test::parseTestMethodAnnotations($class->getName())['class'];
 
     // @todo Enhance PHPUnit upstream to allow for custom @requires identifiers.
-    // @see PHPUnit_Util_Test::getRequirements()
+    // @see \PHPUnit\Util\Test::getRequirements()
     // @todo Add support for 'PHP', 'OS', 'function', 'extension'.
     // @see https://www.drupal.org/node/1273478
     if (isset($annotations['requires'])) {
diff --git a/core/modules/simpletest/tests/fixtures/phpunit_error.xml b/core/modules/simpletest/tests/fixtures/phpunit_error.xml
index 82386aea74..6a6a1cbc20 100644
--- a/core/modules/simpletest/tests/fixtures/phpunit_error.xml
+++ b/core/modules/simpletest/tests/fixtures/phpunit_error.xml
@@ -7,7 +7,7 @@
     <testsuite name="Drupal\Tests\Core\Cache\NullBackendTest" file="/home/chx/www/system/core/tests/Drupal/Tests/Core/Cache/NullBackendTest.php" namespace="Drupal\Tests\Core\Cache" fullPackage="Drupal.Tests.Core.Cache" tests="0" assertions="0" failures="0" errors="0" time="0.000000"/>
     <testsuite name="Drupal\Tests\Core\Extension\ModuleHandlerUnitTest" file="/home/chx/www/system/core/tests/Drupal/Tests/Core/Extension/ModuleHandlerUnitTest.php" namespace="Drupal\Tests\Core\Extension" fullPackage="Drupal.Tests.Core.Extension" tests="1" assertions="0" failures="0" errors="1" time="0.002680">
       <testcase name="testloadInclude" class="Drupal\Tests\Core\Extension\ModuleHandlerUnitTest" file="/home/chx/www/system/core/tests/Drupal/Tests/Core/Extension/ModuleHandlerUnitTest.php" line="37" assertions="0" time="0.002680">
-        <error type="PHPUnit_Framework_Error_Notice">Drupal\Tests\Core\Extension\ModuleHandlerUnitTest::testloadInclude
+        <error type="PHPUnit\Framework\Error\Notice">Drupal\Tests\Core\Extension\ModuleHandlerUnitTest::testloadInclude
 Undefined index: foo
 
 /home/chx/www/system/core/lib/Drupal/Core/Extension/ModuleHandler.php:219
@@ -20,19 +20,19 @@ Undefined index: foo
     <testsuite name="Drupal\Tests\Core\Route\RoleAccessCheckTest" file="/var/www/d8/core/tests/Drupal/Tests/Core/Route/RoleAccessCheckTestkTest.php" namespace="Drupal\Tests\Core\Route" fullPackage="Drupal.Tests.Core.Route" tests="3" assertions="3" failures="3" errors="0" time="0.009176">
       <testsuite name="Drupal\Tests\Core\Route\RoleAccessCheckTest::testRoleAccess" tests="3" assertions="3" failures="3" errors="0" time="0.009176">
         <testcase name="testRoleAccess with data set #0" assertions="1" time="0.004519">
-          <failure type="PHPUnit_Framework_ExpectationFailedException">Drupal\Tests\Core\Route\RoleAccessCheckTest::testRoleAccess with data set #0 ('role_test_1', array(Drupal\user\Entity\User, Drupal\user\Entity\User))
+          <failure type="PHPUnit\Framework\ExpectationFailedException">Drupal\Tests\Core\Route\RoleAccessCheckTest::testRoleAccess with data set #0 ('role_test_1', array(Drupal\user\Entity\User, Drupal\user\Entity\User))
             Access granted for user with the roles role_test_1 on path: role_test_1
             Failed asserting that false is true.
           </failure>
         </testcase>
         <testcase name="testRoleAccess with data set #1" assertions="1" time="0.002354">
-          <failure type="PHPUnit_Framework_ExpectationFailedException">Drupal\Tests\Core\Route\RoleAccessCheckTest::testRoleAccess with data set #1 ('role_test_2', array(Drupal\user\Entity\User, Drupal\user\Entity\User))
+          <failure type="PHPUnit\Framework\ExpectationFailedException">Drupal\Tests\Core\Route\RoleAccessCheckTest::testRoleAccess with data set #1 ('role_test_2', array(Drupal\user\Entity\User, Drupal\user\Entity\User))
             Access granted for user with the roles role_test_2 on path: role_test_2
             Failed asserting that false is true.
           </failure>
         </testcase>
         <testcase name="testRoleAccess with data set #2" assertions="1" time="0.002303">
-          <failure type="PHPUnit_Framework_ExpectationFailedException">Drupal\Tests\Core\Route\RoleAccessCheckTest::testRoleAccess with data set #2 ('role_test_3', array(Drupal\user\Entity\User))
+          <failure type="PHPUnit\Framework\ExpectationFailedException">Drupal\Tests\Core\Route\RoleAccessCheckTest::testRoleAccess with data set #2 ('role_test_3', array(Drupal\user\Entity\User))
             Access granted for user with the roles role_test_1, role_test_2 on path: role_test_3
             Failed asserting that false is true.
           </failure>
diff --git a/core/modules/system/tests/src/Functional/Menu/BreadcrumbTest.php b/core/modules/system/tests/src/Functional/Menu/BreadcrumbTest.php
index 329a5f9c2d..5c87347792 100644
--- a/core/modules/system/tests/src/Functional/Menu/BreadcrumbTest.php
+++ b/core/modules/system/tests/src/Functional/Menu/BreadcrumbTest.php
@@ -7,6 +7,7 @@
 use Drupal\node\Entity\NodeType;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\user\RoleInterface;
+use PHPUnit\Framework\ExpectationFailedException;
 
 /**
  * Tests breadcrumbs functionality.
@@ -399,7 +400,7 @@ public function testAssertBreadcrumbTrait() {
       $this->assertBreadcrumb('menu-test/breadcrumb1', []);
       $this->fail($message);
     }
-    catch (\PHPUnit_Framework_ExpectationFailedException $e) {
+    catch (ExpectationFailedException $e) {
       $this->assertTrue(TRUE, $message);
     }
 
@@ -409,7 +410,7 @@ public function testAssertBreadcrumbTrait() {
       $this->assertBreadcrumb('menu-test/breadcrumb1', $home);
       $this->fail($message);
     }
-    catch (\PHPUnit_Framework_ExpectationFailedException $e) {
+    catch (ExpectationFailedException $e) {
       $this->assertTrue(TRUE, $message);
     }
 
@@ -426,7 +427,7 @@ public function testAssertBreadcrumbTrait() {
       $this->assertBreadcrumb('menu-test/breadcrumb1', $trail);
       $this->fail($message);
     }
-    catch (\PHPUnit_Framework_ExpectationFailedException $e) {
+    catch (ExpectationFailedException $e) {
       $this->assertTrue(TRUE, $message);
     }
   }
diff --git a/core/modules/views/tests/src/Kernel/ViewExecutableTest.php b/core/modules/views/tests/src/Kernel/ViewExecutableTest.php
index 44036c6b0a..3c250e193d 100644
--- a/core/modules/views/tests/src/Kernel/ViewExecutableTest.php
+++ b/core/modules/views/tests/src/Kernel/ViewExecutableTest.php
@@ -19,6 +19,7 @@
 use Drupal\views\Plugin\views\pager\PagerPluginBase;
 use Drupal\views\Plugin\views\query\QueryPluginBase;
 use Drupal\views_test_data\Plugin\views\display\DisplayTest;
+use PHPUnit\Framework\Error\Warning;
 use Symfony\Component\HttpFoundation\Response;
 
 /**
@@ -200,7 +201,7 @@ public function testSetDisplayWithInvalidDisplay() {
       $view->setDisplay('invalid');
       $this->fail('Expected error, when setDisplay() called with invalid display ID');
     }
-    catch (\PHPUnit_Framework_Error_Warning $e) {
+    catch (Warning $e) {
       $this->assertEquals('setDisplay() called with invalid display ID "invalid".', $e->getMessage());
     }
 
diff --git a/core/scripts/run-tests.sh b/core/scripts/run-tests.sh
index f08956e61f..6e483ceeeb 100755
--- a/core/scripts/run-tests.sh
+++ b/core/scripts/run-tests.sh
@@ -20,7 +20,6 @@
 use Drupal\simpletest\TestBase;
 use Drupal\simpletest\TestDiscovery;
 use PHPUnit\Framework\TestCase;
-use PHPUnit\Runner\Version;
 use Symfony\Component\HttpFoundation\Request;
 
 // Define some colors for display.
@@ -140,14 +139,6 @@
   exit(SIMPLETEST_SCRIPT_EXIT_SUCCESS);
 }
 
-// Ensure we have the correct PHPUnit version for the version of PHP.
-if (class_exists('\PHPUnit_Runner_Version')) {
-  $phpunit_version = \PHPUnit_Runner_Version::id();
-}
-else {
-  $phpunit_version = Version::id();
-}
-
 $test_list = simpletest_script_get_test_list();
 
 // Try to allocate unlimited time to run the tests.
diff --git a/core/tests/Drupal/FunctionalJavascriptTests/BrowserWithJavascriptTest.php b/core/tests/Drupal/FunctionalJavascriptTests/BrowserWithJavascriptTest.php
index 8d096c14c0..1e5ca0626c 100644
--- a/core/tests/Drupal/FunctionalJavascriptTests/BrowserWithJavascriptTest.php
+++ b/core/tests/Drupal/FunctionalJavascriptTests/BrowserWithJavascriptTest.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\FunctionalJavascriptTests;
 
+use PHPUnit\Framework\AssertionFailedError;
+
 /**
  * Tests if we can execute JavaScript in the browser.
  *
@@ -47,7 +49,7 @@ public function testAssertJsCondition() {
 
     // We expected the following assertion to fail because the window has been
     // re-sized to have a width of 500 not 400.
-    $this->expectException(\PHPUnit_Framework_AssertionFailedError::class);
+    $this->expectException(AssertionFailedError::class);
     $this->assertJsCondition($javascript, 100);
   }
 
diff --git a/core/tests/Drupal/FunctionalJavascriptTests/WebDriverTestBase.php b/core/tests/Drupal/FunctionalJavascriptTests/WebDriverTestBase.php
index 38167417ae..d677aa8e2d 100644
--- a/core/tests/Drupal/FunctionalJavascriptTests/WebDriverTestBase.php
+++ b/core/tests/Drupal/FunctionalJavascriptTests/WebDriverTestBase.php
@@ -168,7 +168,7 @@ protected function assertElementNotVisible($css_selector, $message = '') {
    *   (optional) A message to display with the assertion. If left blank, a
    *   default message will be displayed.
    *
-   * @throws \PHPUnit_Framework_AssertionFailedError
+   * @throws \PHPUnit\Framework\AssertionFailedError
    *
    * @see \Behat\Mink\Driver\DriverInterface::evaluateScript()
    */
diff --git a/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php b/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php
index 659fb5bd81..58ddbc356b 100644
--- a/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php
+++ b/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php
@@ -8,6 +8,7 @@
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
 use Drupal\Tests\Traits\Core\CronRunTrait;
+use PHPUnit\Framework\ExpectationFailedException;
 
 /**
  * Tests BrowserTestBase functionality.
@@ -263,7 +264,7 @@ public function testXpathAsserts() {
       $this->assertFieldByXPath("//input[@id = 'notexisting']");
       $this->fail('The "notexisting" field was found.');
     }
-    catch (\PHPUnit_Framework_ExpectationFailedException $e) {
+    catch (ExpectationFailedException $e) {
       $this->pass('assertFieldByXPath correctly failed. The "notexisting" field was not found.');
     }
 
@@ -279,7 +280,7 @@ public function testXpathAsserts() {
       $this->assertFieldsByValue($this->xpath("//input[@id = 'edit-name']"), 'not the value');
       $this->fail('The "edit-name" field is found with the value "not the value".');
     }
-    catch (\PHPUnit_Framework_ExpectationFailedException $e) {
+    catch (ExpectationFailedException $e) {
       $this->pass('The "edit-name" field is not found with the value "not the value".');
     }
   }
@@ -320,7 +321,7 @@ public function testFieldAssertsForTextfields() {
       $this->assertField('invalid_name_and_id');
       $this->fail('The "invalid_name_and_id" field was found.');
     }
-    catch (\PHPUnit_Framework_ExpectationFailedException $e) {
+    catch (ExpectationFailedException $e) {
       $this->pass('assertField correctly failed. The "invalid_name_and_id" field was not found.');
     }
 
@@ -359,7 +360,7 @@ public function testFieldAssertsForTextfields() {
       $this->assertFieldById('edit-name');
       $this->fail('The "edit-name" field with no value was found.');
     }
-    catch (\PHPUnit_Framework_ExpectationFailedException $e) {
+    catch (ExpectationFailedException $e) {
       $this->pass('The "edit-name" field with no value was not found.');
     }
 
@@ -368,7 +369,7 @@ public function testFieldAssertsForTextfields() {
       $this->assertFieldById('edit-name', 'not the value');
       $this->fail('The "name" field was found, using the wrong value.');
     }
-    catch (\PHPUnit_Framework_ExpectationFailedException $e) {
+    catch (ExpectationFailedException $e) {
       $this->pass('The "name" field was not found, using the wrong value.');
     }
 
@@ -409,7 +410,7 @@ public function testFieldAssertsForTextfields() {
       $this->assertFieldByName('non-existing-name');
       $this->fail('The "non-existing-name" field was found.');
     }
-    catch (\PHPUnit_Framework_ExpectationFailedException $e) {
+    catch (ExpectationFailedException $e) {
       $this->pass('The "non-existing-name" field was not found');
     }
 
@@ -418,7 +419,7 @@ public function testFieldAssertsForTextfields() {
       $this->assertFieldByName('name', 'not the value');
       $this->fail('The "name" field with incorrect value was found.');
     }
-    catch (\PHPUnit_Framework_ExpectationFailedException $e) {
+    catch (ExpectationFailedException $e) {
       $this->pass('assertFieldByName correctly failed. The "name" field with incorrect value was not found.');
     }
 
@@ -473,7 +474,7 @@ public function testFieldAssertsForOptions() {
       $this->assertOptionSelected('options', 1);
       $this->fail('The select option "1" was selected.');
     }
-    catch (\PHPUnit_Framework_ExpectationFailedException $e) {
+    catch (ExpectationFailedException $e) {
       $this->pass($e->getMessage());
     }
 
@@ -492,7 +493,7 @@ public function testFieldAssertsForButton() {
       $this->assertFieldById('Save', NULL);
       $this->fail('The field with id of "Save" was found.');
     }
-    catch (\PHPUnit_Framework_ExpectationFailedException $e) {
+    catch (ExpectationFailedException $e) {
       $this->pass($e->getMessage());
     }
 
diff --git a/core/tests/Drupal/KernelTests/Core/Config/ConfigInstallTest.php b/core/tests/Drupal/KernelTests/Core/Config/ConfigInstallTest.php
index a8d0f66018..c5cee57203 100644
--- a/core/tests/Drupal/KernelTests/Core/Config/ConfigInstallTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Config/ConfigInstallTest.php
@@ -6,6 +6,7 @@
 use Drupal\Core\Config\PreExistingConfigException;
 use Drupal\Core\Config\UnmetDependenciesException;
 use Drupal\KernelTests\KernelTestBase;
+use PHPUnit\Framework\Error\Warning;
 
 /**
  * Tests installation of configuration objects in installation functionality.
@@ -257,7 +258,7 @@ public function testLanguage() {
    * Tests installing configuration where the filename and ID do not match.
    */
   public function testIdMisMatch() {
-    $this->expectException(\PHPUnit_Framework_Error_Warning::class);
+    $this->expectException(Warning::class);
     $this->expectExceptionMessage('The configuration name "config_test.dynamic.no_id_match" does not match the ID "does_not_match"');
     $this->installModules(['config_test_id_mismatch']);
   }
diff --git a/core/tests/Drupal/KernelTests/Core/Test/BrowserTestBaseTest.php b/core/tests/Drupal/KernelTests/Core/Test/BrowserTestBaseTest.php
index c93069c8e4..83631e5df3 100644
--- a/core/tests/Drupal/KernelTests/Core/Test/BrowserTestBaseTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Test/BrowserTestBaseTest.php
@@ -5,6 +5,7 @@
 use Drupal\FunctionalTests\BrowserMissingDependentModuleMethodTest;
 use Drupal\FunctionalTests\BrowserMissingDependentModuleTest;
 use Drupal\KernelTests\KernelTestBase;
+use PHPUnit\Framework\SkippedTestError;
 
 /**
  * @group Test
@@ -36,7 +37,7 @@ public function testMethodRequiresModule() {
       $stub_test->publicCheckRequirements();
       $this->fail('Missing required module throws skipped test exception.');
     }
-    catch (\PHPUnit_Framework_SkippedTestError $e) {
+    catch (SkippedTestError $e) {
       $this->assertEqual('Required modules: module_does_not_exist', $e->getMessage());
     }
   }
@@ -63,7 +64,7 @@ public function testRequiresModule() {
       $stub_test->publicCheckRequirements();
       $this->fail('Missing required module throws skipped test exception.');
     }
-    catch (\PHPUnit_Framework_SkippedTestError $e) {
+    catch (SkippedTestError $e) {
       $this->assertEqual('Required modules: module_does_not_exist', $e->getMessage());
     }
   }
diff --git a/core/tests/Drupal/KernelTests/KernelTestBase.php b/core/tests/Drupal/KernelTests/KernelTestBase.php
index 6cfbda5ae0..3fee870ea3 100644
--- a/core/tests/Drupal/KernelTests/KernelTestBase.php
+++ b/core/tests/Drupal/KernelTests/KernelTestBase.php
@@ -22,6 +22,7 @@
 use Drupal\Tests\PhpunitCompatibilityTrait;
 use Drupal\Tests\RandomGeneratorTrait;
 use Drupal\Tests\TestRequirementsTrait;
+use PHPUnit\Framework\Exception;
 use PHPUnit\Framework\TestCase;
 use Symfony\Component\DependencyInjection\Reference;
 use Symfony\Component\HttpFoundation\Request;
@@ -478,7 +479,7 @@ protected function initFileCache() {
    * @return \Drupal\Core\Extension\Extension[]
    *   Extension objects for $modules, keyed by module name.
    *
-   * @throws \PHPUnit_Framework_Exception
+   * @throws \PHPUnit\Framework\Exception
    *   If a module is not available.
    *
    * @see \Drupal\Tests\KernelTestBase::enableModules()
@@ -491,7 +492,7 @@ private function getExtensionsForModules(array $modules) {
     $list = $discovery->scan('module');
     foreach ($modules as $name) {
       if (!isset($list[$name])) {
-        throw new \PHPUnit_Framework_Exception("Unavailable module: '$name'. If this module needs to be downloaded separately, annotate the test class with '@requires module $name'.");
+        throw new Exception("Unavailable module: '$name'. If this module needs to be downloaded separately, annotate the test class with '@requires module $name'.");
       }
       $extensions[$name] = $list[$name];
     }
diff --git a/core/tests/Drupal/KernelTests/KernelTestBaseTest.php b/core/tests/Drupal/KernelTests/KernelTestBaseTest.php
index f2b61fa68a..f4967b52bc 100644
--- a/core/tests/Drupal/KernelTests/KernelTestBaseTest.php
+++ b/core/tests/Drupal/KernelTests/KernelTestBaseTest.php
@@ -6,6 +6,7 @@
 use Drupal\Core\Database\Database;
 use org\bovigo\vfs\vfsStream;
 use org\bovigo\vfs\visitor\vfsStreamStructureVisitor;
+use PHPUnit\Framework\SkippedTestError;
 
 /**
  * @coversDefaultClass \Drupal\KernelTests\KernelTestBase
@@ -248,7 +249,7 @@ public function testMethodRequiresModule() {
       $stub_test->publicCheckRequirements();
       $this->fail('Missing required module throws skipped test exception.');
     }
-    catch (\PHPUnit_Framework_SkippedTestError $e) {
+    catch (SkippedTestError $e) {
       $this->assertEqual('Required modules: module_does_not_exist', $e->getMessage());
     }
   }
@@ -275,7 +276,7 @@ public function testRequiresModule() {
       $stub_test->publicCheckRequirements();
       $this->fail('Missing required module throws skipped test exception.');
     }
-    catch (\PHPUnit_Framework_SkippedTestError $e) {
+    catch (SkippedTestError $e) {
       $this->assertEqual('Required modules: module_does_not_exist', $e->getMessage());
     }
   }
diff --git a/core/tests/Drupal/Tests/Component/Diff/Engine/DiffOpTest.php b/core/tests/Drupal/Tests/Component/Diff/Engine/DiffOpTest.php
index f7f17f39c6..be2054811e 100644
--- a/core/tests/Drupal/Tests/Component/Diff/Engine/DiffOpTest.php
+++ b/core/tests/Drupal/Tests/Component/Diff/Engine/DiffOpTest.php
@@ -25,12 +25,7 @@ class DiffOpTest extends TestCase {
    * @covers ::reverse
    */
   public function testReverse() {
-    if (method_exists($this, 'expectException')) {
-      $this->expectException(Error::class);
-    }
-    else {
-      $this->expectException(\PHPUnit_Framework_Error::class);
-    }
+    $this->expectException(Error::class);
     $op = new DiffOp();
     $result = $op->reverse();
   }
diff --git a/core/tests/Drupal/Tests/Component/DrupalComponentTest.php b/core/tests/Drupal/Tests/Component/DrupalComponentTest.php
index 6b08cd94eb..6f9d149a9b 100644
--- a/core/tests/Drupal/Tests/Component/DrupalComponentTest.php
+++ b/core/tests/Drupal/Tests/Component/DrupalComponentTest.php
@@ -3,6 +3,7 @@
 namespace Drupal\Tests\Component;
 
 use org\bovigo\vfs\vfsStream;
+use PHPUnit\Framework\AssertionFailedError;
 use PHPUnit\Framework\TestCase;
 
 /**
@@ -144,7 +145,7 @@ public function testAssertNoCoreUseage($expected_pass, $file_data) {
       $pass = TRUE;
       $this->assertNoCoreUsage($file_uri);
     }
-    catch (\PHPUnit_Framework_AssertionFailedError $e) {
+    catch (AssertionFailedError $e) {
       $pass = FALSE;
     }
     $this->assertEquals($expected_pass, $pass, $expected_pass ?
diff --git a/core/tests/Drupal/Tests/Component/PhpStorage/FileStorageTest.php b/core/tests/Drupal/Tests/Component/PhpStorage/FileStorageTest.php
index 357f4e05f4..891a1dcceb 100644
--- a/core/tests/Drupal/Tests/Component/PhpStorage/FileStorageTest.php
+++ b/core/tests/Drupal/Tests/Component/PhpStorage/FileStorageTest.php
@@ -99,14 +99,8 @@ public function testCreateDirectoryFailWarning() {
       'bin' => 'test',
     ]);
     $code = "<?php\n echo 'here';";
-    if (method_exists($this, 'expectException')) {
-      $this->expectException(Warning::class);
-      $this->expectExceptionMessage('mkdir(): Permission Denied');
-    }
-    else {
-      $this->expectException(\PHPUnit_Framework_Error_Warning::class);
-      $this->expectExceptionMessage('mkdir(): Permission Denied');
-    }
+    $this->expectException(Warning::class);
+    $this->expectExceptionMessage('mkdir(): Permission Denied');
     $storage->save('subdirectory/foo.php', $code);
   }
 
diff --git a/core/tests/Drupal/Tests/Core/Assert/AssertLegacyTraitTest.php b/core/tests/Drupal/Tests/Core/Assert/AssertLegacyTraitTest.php
index ec01d4e26f..b865652809 100644
--- a/core/tests/Drupal/Tests/Core/Assert/AssertLegacyTraitTest.php
+++ b/core/tests/Drupal/Tests/Core/Assert/AssertLegacyTraitTest.php
@@ -9,7 +9,7 @@
 use Drupal\FunctionalTests\AssertLegacyTrait;
 use Drupal\Tests\UnitTestCase;
 use Drupal\Tests\WebAssert;
-use PHPUnit_Framework_ExpectationFailedException;
+use PHPUnit\Framework\ExpectationFailedException;
 
 /**
  * @coversDefaultClass \Drupal\FunctionalTests\AssertLegacyTrait
@@ -66,7 +66,7 @@ public function testAssertUniqueText() {
    */
   public function testAssertUniqueTextFail() {
     $this->page->getText()->willReturn('foo bar bar');
-    $this->expectException(PHPUnit_Framework_ExpectationFailedException::class);
+    $this->expectException(ExpectationFailedException::class);
     $this->assertUniqueText('bar');
   }
 
@@ -75,7 +75,7 @@ public function testAssertUniqueTextFail() {
    */
   public function testAssertUniqueTextUnknown() {
     $this->page->getText()->willReturn('foo bar bar');
-    $this->expectException(PHPUnit_Framework_ExpectationFailedException::class);
+    $this->expectException(ExpectationFailedException::class);
     $this->assertUniqueText('alice');
   }
 
@@ -102,7 +102,7 @@ public function testAssertNoUniqueText() {
    */
   public function testAssertNoUniqueTextFail() {
     $this->page->getText()->willReturn('foo bar bar');
-    $this->expectException(PHPUnit_Framework_ExpectationFailedException::class);
+    $this->expectException(ExpectationFailedException::class);
     $this->assertNoUniqueText('foo');
   }
 
@@ -111,7 +111,7 @@ public function testAssertNoUniqueTextFail() {
    */
   public function testAssertNoUniqueTextUnknown() {
     $this->page->getText()->willReturn('foo bar bar');
-    $this->expectException(PHPUnit_Framework_ExpectationFailedException::class);
+    $this->expectException(ExpectationFailedException::class);
     $this->assertNoUniqueText('alice');
   }
 
@@ -150,7 +150,7 @@ public function testAssertOptionSelectedFail() {
       ->optionExists('myselect', 'two')
       ->willReturn($option_field->reveal());
 
-    $this->expectException(PHPUnit_Framework_ExpectationFailedException::class);
+    $this->expectException(ExpectationFailedException::class);
     $this->assertOptionSelected('myselect', 'two');
   }
 
diff --git a/core/tests/Drupal/Tests/Core/Config/ConfigTest.php b/core/tests/Drupal/Tests/Core/Config/ConfigTest.php
index fb620f4ade..a59ebf5e76 100644
--- a/core/tests/Drupal/Tests/Core/Config/ConfigTest.php
+++ b/core/tests/Drupal/Tests/Core/Config/ConfigTest.php
@@ -7,6 +7,7 @@
 use Drupal\Tests\UnitTestCase;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Config\ConfigValueException;
+use PHPUnit\Framework\Error\Warning;
 
 /**
  * Tests the Config.
@@ -269,7 +270,7 @@ public function testSetIllegalOffsetValue() {
     $this->config->set('testData', 1);
 
     // Attempt to treat the single value as a nested item.
-    $this->expectException(\PHPUnit_Framework_Error_Warning::class);
+    $this->expectException(Warning::class);
     $this->config->set('testData.illegalOffset', 1);
   }
 
diff --git a/core/tests/Drupal/Tests/Core/Database/ConditionTest.php b/core/tests/Drupal/Tests/Core/Database/ConditionTest.php
index 29a5aabfa8..c38261b866 100644
--- a/core/tests/Drupal/Tests/Core/Database/ConditionTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/ConditionTest.php
@@ -7,6 +7,7 @@
 use Drupal\Core\Database\Query\PlaceholderInterface;
 use Drupal\Tests\UnitTestCase;
 use Prophecy\Argument;
+use PHPUnit\Framework\Error\Error;
 
 /**
  * @coversDefaultClass \Drupal\Core\Database\Query\Condition
@@ -161,7 +162,7 @@ public function testCompileWithSqlInjectionForOperator($operator) {
 
     $condition = new Condition('AND');
     $condition->condition('name', 'value', $operator);
-    $this->expectException(\PHPUnit_Framework_Error::class);
+    $this->expectException(Error::class);
     $condition->compile($connection, $query_placeholder);
   }
 
diff --git a/core/tests/Drupal/Tests/Core/EventSubscriber/RedirectResponseSubscriberTest.php b/core/tests/Drupal/Tests/Core/EventSubscriber/RedirectResponseSubscriberTest.php
index 2c582d0c12..ac06bbf266 100644
--- a/core/tests/Drupal/Tests/Core/EventSubscriber/RedirectResponseSubscriberTest.php
+++ b/core/tests/Drupal/Tests/Core/EventSubscriber/RedirectResponseSubscriberTest.php
@@ -6,6 +6,7 @@
 use Drupal\Core\Routing\TrustedRedirectResponse;
 use Drupal\Core\Utility\UnroutedUrlAssemblerInterface;
 use Drupal\Tests\UnitTestCase;
+use PHPUnit\Framework\Error\Error;
 use Symfony\Component\DependencyInjection\Container;
 use Symfony\Component\EventDispatcher\EventDispatcher;
 use Symfony\Component\HttpFoundation\RedirectResponse;
@@ -123,7 +124,7 @@ public function testDestinationRedirectToExternalUrl($request, $expected) {
     $listener = new RedirectResponseSubscriber($this->urlAssembler, $this->requestContext);
     $dispatcher->addListener(KernelEvents::RESPONSE, [$listener, 'checkRedirectUrl']);
     $event = new FilterResponseEvent($kernel, $request, HttpKernelInterface::SUB_REQUEST, $response);
-    $this->expectException(\PHPUnit_Framework_Error::class);
+    $this->expectException(Error::class);
     $dispatcher->dispatch(KernelEvents::RESPONSE, $event);
   }
 
@@ -171,7 +172,7 @@ public function testDestinationRedirectWithInvalidUrl(Request $request) {
     $listener = new RedirectResponseSubscriber($this->urlAssembler, $this->requestContext);
     $dispatcher->addListener(KernelEvents::RESPONSE, [$listener, 'checkRedirectUrl']);
     $event = new FilterResponseEvent($kernel, $request, HttpKernelInterface::SUB_REQUEST, $response);
-    $this->expectException(\PHPUnit_Framework_Error::class);
+    $this->expectException(Error::class);
     $dispatcher->dispatch(KernelEvents::RESPONSE, $event);
   }
 
diff --git a/core/tests/Drupal/Tests/Core/EventSubscriber/SpecialAttributesRouteSubscriberTest.php b/core/tests/Drupal/Tests/Core/EventSubscriber/SpecialAttributesRouteSubscriberTest.php
index aee20d08b3..0aa466bddc 100644
--- a/core/tests/Drupal/Tests/Core/EventSubscriber/SpecialAttributesRouteSubscriberTest.php
+++ b/core/tests/Drupal/Tests/Core/EventSubscriber/SpecialAttributesRouteSubscriberTest.php
@@ -5,6 +5,7 @@
 use Drupal\Core\EventSubscriber\SpecialAttributesRouteSubscriber;
 use Drupal\Core\Routing\RouteBuildEvent;
 use Drupal\Tests\UnitTestCase;
+use PHPUnit\Framework\Error\Warning;
 use Symfony\Cmf\Component\Routing\RouteObjectInterface;
 use Symfony\Component\Routing\Route;
 use Symfony\Component\Routing\RouteCollection;
@@ -98,7 +99,7 @@ public function testOnRouteBuildingInvalidVariables(Route $route) {
 
     $event = new RouteBuildEvent($route_collection, 'test');
     $subscriber = new SpecialAttributesRouteSubscriber();
-    $this->expectException(\PHPUnit_Framework_Error_Warning::class);
+    $this->expectException(Warning::class);
     $this->expectExceptionMessage('uses reserved variable names');
     $subscriber->onAlterRoutes($event);
   }
diff --git a/core/tests/Drupal/Tests/Core/Menu/ContextualLinkManagerTest.php b/core/tests/Drupal/Tests/Core/Menu/ContextualLinkManagerTest.php
index bb5e98ee90..c146c04c4f 100644
--- a/core/tests/Drupal/Tests/Core/Menu/ContextualLinkManagerTest.php
+++ b/core/tests/Drupal/Tests/Core/Menu/ContextualLinkManagerTest.php
@@ -7,6 +7,7 @@
 use Drupal\Core\Language\Language;
 use Drupal\Core\Menu\ContextualLinkDefault;
 use Drupal\Tests\UnitTestCase;
+use PHPUnit\Framework\Constraint\Count;
 use Symfony\Component\HttpFoundation\RequestStack;
 
 /**
@@ -286,7 +287,7 @@ public function testGetContextualLinksArrayByGroup() {
 
     $this->moduleHandler->expects($this->at(1))
       ->method('alter')
-      ->with($this->equalTo('contextual_links'), new \PHPUnit_Framework_Constraint_Count(2), $this->equalTo('group1'), $this->equalTo(['key' => 'value']));
+      ->with($this->equalTo('contextual_links'), new Count(2), $this->equalTo('group1'), $this->equalTo(['key' => 'value']));
 
     $result = $this->contextualLinkManager->getContextualLinksArrayByGroup('group1', ['key' => 'value']);
     $this->assertCount(2, $result);
diff --git a/core/tests/Drupal/Tests/Core/PathProcessor/PathProcessorTest.php b/core/tests/Drupal/Tests/Core/PathProcessor/PathProcessorTest.php
index 0aa2de7b64..ce401b1255 100644
--- a/core/tests/Drupal/Tests/Core/PathProcessor/PathProcessorTest.php
+++ b/core/tests/Drupal/Tests/Core/PathProcessor/PathProcessorTest.php
@@ -31,7 +31,7 @@ class PathProcessorTest extends UnitTestCase {
   /**
    * The language manager stub used to construct a PathProcessorLanguage object.
    *
-   * @var \Drupal\language\ConfigurableLanguageManagerInterface|\PHPUnit_Framework_MockObject_MockBuilder
+   * @var \Drupal\language\ConfigurableLanguageManagerInterface|\PHPUnit\Framework\MockObject\MockBuilder
    */
   protected $languageManager;
 
diff --git a/core/tests/Drupal/Tests/Core/Plugin/DefaultSingleLazyPluginCollectionTest.php b/core/tests/Drupal/Tests/Core/Plugin/DefaultSingleLazyPluginCollectionTest.php
index cd8b384614..807c33ed74 100644
--- a/core/tests/Drupal/Tests/Core/Plugin/DefaultSingleLazyPluginCollectionTest.php
+++ b/core/tests/Drupal/Tests/Core/Plugin/DefaultSingleLazyPluginCollectionTest.php
@@ -5,6 +5,7 @@
 use Drupal\Component\Plugin\ConfigurableInterface;
 use Drupal\Component\Plugin\PluginBase;
 use Drupal\Core\Plugin\DefaultSingleLazyPluginCollection;
+use PHPUnit\Framework\MockObject\Matcher\InvokedRecorder;
 
 /**
  * @coversDefaultClass \Drupal\Core\Plugin\DefaultSingleLazyPluginCollection
@@ -15,7 +16,7 @@ class DefaultSingleLazyPluginCollectionTest extends LazyPluginCollectionTestBase
   /**
    * {@inheritdoc}
    */
-  protected function setupPluginCollection(\PHPUnit_Framework_MockObject_Matcher_InvokedRecorder $create_count = NULL) {
+  protected function setupPluginCollection(InvokedRecorder $create_count = NULL) {
     $definitions = $this->getPluginDefinitions();
     $this->pluginInstances['apple'] = new ConfigurablePlugin(['id' => 'apple', 'key' => 'value'], 'apple', $definitions['apple']);
     $this->pluginInstances['banana'] = new ConfigurablePlugin(['id' => 'banana', 'key' => 'other_value'], 'banana', $definitions['banana']);
diff --git a/core/tests/Drupal/Tests/Core/Plugin/LazyPluginCollectionTestBase.php b/core/tests/Drupal/Tests/Core/Plugin/LazyPluginCollectionTestBase.php
index 0e103688b4..5337468da1 100644
--- a/core/tests/Drupal/Tests/Core/Plugin/LazyPluginCollectionTestBase.php
+++ b/core/tests/Drupal/Tests/Core/Plugin/LazyPluginCollectionTestBase.php
@@ -4,6 +4,7 @@
 
 use Drupal\Core\Plugin\DefaultLazyPluginCollection;
 use Drupal\Tests\UnitTestCase;
+use PHPUnit\Framework\MockObject\Matcher\InvokedRecorder;
 
 /**
  * Provides a base class for plugin collection tests.
@@ -53,12 +54,12 @@ protected function setUp() {
   /**
    * Sets up the default plugin collection.
    *
-   * @param \PHPUnit_Framework_MockObject_Matcher_InvokedRecorder|null $create_count
+   * @param \PHPUnit\Framework\MockObject\Matcher\InvokedRecorder|null $create_count
    *   (optional) The number of times that createInstance() is expected to be
    *   called. For example, $this->any(), $this->once(), $this->exactly(6).
    *   Defaults to $this->never().
    */
-  protected function setupPluginCollection(\PHPUnit_Framework_MockObject_Matcher_InvokedRecorder $create_count = NULL) {
+  protected function setupPluginCollection(InvokedRecorder $create_count = NULL) {
     $this->pluginInstances = [];
     $map = [];
     foreach ($this->getPluginDefinitions() as $plugin_id => $definition) {
diff --git a/core/tests/Drupal/Tests/Core/Render/ElementTest.php b/core/tests/Drupal/Tests/Core/Render/ElementTest.php
index 9d4342d1d7..f12dfcf1dd 100644
--- a/core/tests/Drupal/Tests/Core/Render/ElementTest.php
+++ b/core/tests/Drupal/Tests/Core/Render/ElementTest.php
@@ -5,6 +5,7 @@
 use Drupal\Core\Access\AccessResult;
 use Drupal\Tests\UnitTestCase;
 use Drupal\Core\Render\Element;
+use PHPUnit\Framework\Error\Error;
 
 /**
  * @coversDefaultClass \Drupal\Core\Render\Element
@@ -106,7 +107,7 @@ public function testInvalidChildren() {
     $element = [
       'foo' => 'bar',
     ];
-    $this->expectException(\PHPUnit_Framework_Error::class);
+    $this->expectException(Error::class);
     $this->expectExceptionMessage('"foo" is an invalid render array key');
     Element::children($element);
   }
diff --git a/core/tests/Drupal/Tests/Core/Render/RendererPlaceholdersTest.php b/core/tests/Drupal/Tests/Core/Render/RendererPlaceholdersTest.php
index d53fba0914..d6bb062b3c 100644
--- a/core/tests/Drupal/Tests/Core/Render/RendererPlaceholdersTest.php
+++ b/core/tests/Drupal/Tests/Core/Render/RendererPlaceholdersTest.php
@@ -1117,7 +1117,7 @@ protected function generatePlaceholdersWithChildrenTestElement(array $args_1, ar
   }
 
   /**
-   * @return \Drupal\Core\Theme\ThemeManagerInterface|\PHPUnit_Framework_MockObject_Builder_InvocationMocker
+   * @return \Drupal\Core\Theme\ThemeManagerInterface|\PHPUnit\Framework\MockObject\Builder\InvocationMocker
    */
   protected function setupThemeManagerForDetails() {
     return $this->themeManager->expects($this->any())
diff --git a/core/tests/Drupal/Tests/Core/StringTranslation/StringTranslationTraitTest.php b/core/tests/Drupal/Tests/Core/StringTranslation/StringTranslationTraitTest.php
index 560675eed8..5e16fa88e6 100644
--- a/core/tests/Drupal/Tests/Core/StringTranslation/StringTranslationTraitTest.php
+++ b/core/tests/Drupal/Tests/Core/StringTranslation/StringTranslationTraitTest.php
@@ -25,7 +25,7 @@ class StringTranslationTraitTest extends UnitTestCase {
    * The mock under test that uses StringTranslationTrait.
    *
    * @var object
-   * @see PHPUnit_Framework_MockObject_Generator::getObjectForTrait()
+   * @see \PHPUnit\Framework\MockObject\Generator::getObjectForTrait()
    */
   protected $translation;
 
diff --git a/core/tests/Drupal/Tests/Core/UrlTest.php b/core/tests/Drupal/Tests/Core/UrlTest.php
index dcdee870a1..58dbdbd833 100644
--- a/core/tests/Drupal/Tests/Core/UrlTest.php
+++ b/core/tests/Drupal/Tests/Core/UrlTest.php
@@ -160,7 +160,7 @@ public function testUrlFromRequest() {
    * @param string $path
    *   The path.
    *
-   * @return \PHPUnit_Framework_Constraint_Callback
+   * @return \PHPUnit\Framework\Constraint\Callback
    *   The constraint checks whether a Request object has the right path.
    */
   protected function getRequestConstraint($path) {
diff --git a/core/tests/Drupal/Tests/Listeners/AfterSymfonyListener.php b/core/tests/Drupal/Tests/Listeners/AfterSymfonyListener.php
index 121d0d2db2..8806decd1c 100644
--- a/core/tests/Drupal/Tests/Listeners/AfterSymfonyListener.php
+++ b/core/tests/Drupal/Tests/Listeners/AfterSymfonyListener.php
@@ -6,28 +6,19 @@
 use PHPUnit\Framework\TestListener;
 use PHPUnit\Framework\TestListenerDefaultImplementation;
 
-if (class_exists('PHPUnit_Runner_Version') && version_compare(\PHPUnit_Runner_Version::id(), '6.0.0', '<')) {
-  class_alias('Drupal\Tests\Listeners\Legacy\AfterSymfonyListener', 'Drupal\Tests\Listeners\AfterSymfonyListener');
-  // Using an early return instead of an else does not work when using the
-  // PHPUnit phar due to some weird PHP behavior (the class gets defined without
-  // executing the code before it and so the definition is not properly
-  // conditional).
-}
-else {
+/**
+ * Listens to PHPUnit test runs.
+ *
+ * @internal
+ */
+class AfterSymfonyListener implements TestListener {
+  use TestListenerDefaultImplementation;
+
   /**
-   * Listens to PHPUnit test runs.
-   *
-   * @internal
+   * {@inheritdoc}
    */
-  class AfterSymfonyListener implements TestListener {
-    use TestListenerDefaultImplementation;
-
-    /**
-     * {@inheritdoc}
-     */
-    public function endTest(Test $test, $time) {
-      restore_error_handler();
-    }
-
+  public function endTest(Test $test, $time) {
+    restore_error_handler();
   }
+
 }
diff --git a/core/tests/Drupal/Tests/Listeners/DeprecationListenerTrait.php b/core/tests/Drupal/Tests/Listeners/DeprecationListenerTrait.php
index d66d3cb9ce..5aeceda42c 100644
--- a/core/tests/Drupal/Tests/Listeners/DeprecationListenerTrait.php
+++ b/core/tests/Drupal/Tests/Listeners/DeprecationListenerTrait.php
@@ -4,6 +4,7 @@
 
 use Drupal\Tests\Traits\ExpectDeprecationTrait;
 use PHPUnit\Framework\TestCase;
+use PHPUnit\Util\Test;
 
 /**
  * Removes deprecations that we are yet to fix.
@@ -24,7 +25,7 @@
   private $previousHandler;
 
   protected function deprecationStartTest($test) {
-    if ($test instanceof \PHPUnit_Framework_TestCase || $test instanceof TestCase) {
+    if ($test instanceof TestCase) {
       if ('disabled' !== getenv('SYMFONY_DEPRECATIONS_HELPER')) {
         $this->registerErrorHandler($test);
       }
@@ -37,7 +38,7 @@ protected function deprecationStartTest($test) {
   /**
    * Reacts to the end of a test.
    *
-   * @param \PHPUnit\Framework\Test|\PHPUnit_Framework_Test $test
+   * @param \PHPUnit\Framework\Test $test
    *   The test object that has ended its test run.
    * @param float $time
    *   The time the test took.
@@ -52,13 +53,12 @@ protected function deprecationEndTest($test, $time) {
       }
     }
     if ($file = getenv('SYMFONY_DEPRECATIONS_SERIALIZE')) {
-      $util_test_class = class_exists('PHPUnit_Util_Test') ? 'PHPUnit_Util_Test' : 'PHPUnit\Util\Test';
       $method = $test->getName(FALSE);
       if (strpos($method, 'testLegacy') === 0
         || strpos($method, 'provideLegacy') === 0
         || strpos($method, 'getLegacy') === 0
         || strpos(get_class($test), '\Legacy')
-        || in_array('legacy', $util_test_class::getGroups(get_class($test), $method), TRUE)) {
+        || in_array('legacy', Test::getGroups(get_class($test), $method), TRUE)) {
         // This is a legacy test don't skip deprecations.
         return;
       }
@@ -83,7 +83,7 @@ protected function deprecationEndTest($test, $time) {
   /**
    * Determines if a test is isolated.
    *
-   * @param \PHPUnit_Framework_TestCase|\PHPUnit\Framework\TestCase $test
+   * @param \PHPUnit\Framework\TestCase $test
    *   The test to check.
    *
    * @return bool
diff --git a/core/tests/Drupal/Tests/Listeners/DrupalComponentTestListenerTrait.php b/core/tests/Drupal/Tests/Listeners/DrupalComponentTestListenerTrait.php
index 105d1333c3..6428bae39c 100644
--- a/core/tests/Drupal/Tests/Listeners/DrupalComponentTestListenerTrait.php
+++ b/core/tests/Drupal/Tests/Listeners/DrupalComponentTestListenerTrait.php
@@ -17,7 +17,7 @@
   /**
    * Reacts to the end of a test.
    *
-   * @param \PHPUnit\Framework\Test|\PHPUnit_Framework_Test $test
+   * @param \PHPUnit\Framework\Test $test
    *   The test object that has ended its test run.
    * @param float $time
    *   The time the test took.
diff --git a/core/tests/Drupal/Tests/Listeners/DrupalListener.php b/core/tests/Drupal/Tests/Listeners/DrupalListener.php
index cafaa2292b..0885ef0809 100644
--- a/core/tests/Drupal/Tests/Listeners/DrupalListener.php
+++ b/core/tests/Drupal/Tests/Listeners/DrupalListener.php
@@ -5,39 +5,30 @@
 use PHPUnit\Framework\BaseTestListener;
 use PHPUnit\Framework\Test;
 
-if (class_exists('PHPUnit_Runner_Version') && version_compare(\PHPUnit_Runner_Version::id(), '6.0.0', '<')) {
-  class_alias('Drupal\Tests\Listeners\Legacy\DrupalListener', 'Drupal\Tests\Listeners\DrupalListener');
-  // Using an early return instead of a else does not work when using the
-  // PHPUnit phar due to some weird PHP behavior (the class gets defined without
-  // executing the code before it and so the definition is not properly
-  // conditional).
-}
-else {
+/**
+ * Listens to PHPUnit test runs.
+ *
+ * @internal
+ */
+class DrupalListener extends BaseTestListener {
+  use DeprecationListenerTrait;
+  use DrupalComponentTestListenerTrait;
+  use DrupalStandardsListenerTrait;
+
   /**
-   * Listens to PHPUnit test runs.
-   *
-   * @internal
+   * {@inheritdoc}
    */
-  class DrupalListener extends BaseTestListener {
-    use DeprecationListenerTrait;
-    use DrupalComponentTestListenerTrait;
-    use DrupalStandardsListenerTrait;
-
-    /**
-     * {@inheritdoc}
-     */
-    public function startTest(Test $test) {
-      $this->deprecationStartTest($test);
-    }
-
-    /**
-     * {@inheritdoc}
-     */
-    public function endTest(Test $test, $time) {
-      $this->deprecationEndTest($test, $time);
-      $this->componentEndTest($test, $time);
-      $this->standardsEndTest($test, $time);
-    }
+  public function startTest(Test $test) {
+    $this->deprecationStartTest($test);
+  }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function endTest(Test $test, $time) {
+    $this->deprecationEndTest($test, $time);
+    $this->componentEndTest($test, $time);
+    $this->standardsEndTest($test, $time);
   }
+
 }
diff --git a/core/tests/Drupal/Tests/Listeners/DrupalStandardsListenerTrait.php b/core/tests/Drupal/Tests/Listeners/DrupalStandardsListenerTrait.php
index 84eaaced06..9b633d4833 100644
--- a/core/tests/Drupal/Tests/Listeners/DrupalStandardsListenerTrait.php
+++ b/core/tests/Drupal/Tests/Listeners/DrupalStandardsListenerTrait.php
@@ -5,6 +5,7 @@
 use PHPUnit\Framework\AssertionFailedError;
 use PHPUnit\Framework\TestCase;
 use PHPUnit\Framework\TestSuite;
+use PHPUnit\Util\ErrorHandler;
 
 /**
  * Listens for PHPUnit tests and fails those with invalid coverage annotations.
@@ -167,8 +168,7 @@ public static function errorHandler($type, $msg, $file, $line, $context = []) {
     if ($type === E_USER_DEPRECATED) {
       return;
     }
-    $error_handler = class_exists('PHPUnit_Util_ErrorHandler') ? 'PHPUnit_Util_ErrorHandler' : 'PHPUnit\Util\ErrorHandler';
-    return $error_handler::handleError($type, $msg, $file, $line, $context);
+    return ErrorHandler::handleError($type, $msg, $file, $line, $context);
   }
 
   /**
@@ -182,7 +182,7 @@ public static function errorHandler($type, $msg, $file, $line, $context = []) {
    *
    * @group legacy
    *
-   * @param \PHPUnit\Framework\Test|\PHPUnit_Framework_Test $test
+   * @param \PHPUnit\Framework\Test $test
    *   The test object that has ended its test run.
    * @param float $time
    *   The time the test took.
@@ -190,7 +190,7 @@ public static function errorHandler($type, $msg, $file, $line, $context = []) {
    * @see http://symfony.com/doc/current/components/phpunit_bridge.html#mark-tests-as-legacy
    */
   private function doEndTest($test, $time) {
-    // \PHPUnit_Framework_Test does not have any useful methods of its own for
+    // \PHPUnit\Framework\Test does not have any useful methods of its own for
     // our purpose, so we have to distinguish between the different known
     // subclasses.
     if ($test instanceof TestCase) {
@@ -212,16 +212,13 @@ private function doEndTest($test, $time) {
   /**
    * Determine if a test object is a test suite regardless of PHPUnit version.
    *
-   * @param \PHPUnit\Framework\Test|\PHPUnit_Framework_Test $test
+   * @param \PHPUnit\Framework\Test $test
    *   The test object to test if it is a test suite.
    *
    * @return bool
    *   TRUE if it is a test suite, FALSE if not.
    */
   private function isTestSuite($test) {
-    if (class_exists('\PHPUnit_Framework_TestSuite') && $test instanceof \PHPUnit_Framework_TestSuite) {
-      return TRUE;
-    }
     if (class_exists('PHPUnit\Framework\TestSuite') && $test instanceof TestSuite) {
       return TRUE;
     }
@@ -231,7 +228,7 @@ private function isTestSuite($test) {
   /**
    * Reacts to the end of a test.
    *
-   * @param \PHPUnit\Framework\Test|\PHPUnit_Framework_Test $test
+   * @param \PHPUnit\Framework\Test $test
    *   The test object that has ended its test run.
    * @param float $time
    *   The time the test took.
diff --git a/core/tests/Drupal/Tests/Listeners/HtmlOutputPrinter.php b/core/tests/Drupal/Tests/Listeners/HtmlOutputPrinter.php
index 49618b8172..b29b11d19d 100644
--- a/core/tests/Drupal/Tests/Listeners/HtmlOutputPrinter.php
+++ b/core/tests/Drupal/Tests/Listeners/HtmlOutputPrinter.php
@@ -5,39 +5,30 @@
 use PHPUnit\Framework\TestResult;
 use PHPUnit\TextUI\ResultPrinter;
 
-if (class_exists('PHPUnit_Runner_Version') && version_compare(\PHPUnit_Runner_Version::id(), '6.0.0', '<')) {
-  class_alias('Drupal\Tests\Listeners\Legacy\HtmlOutputPrinter', 'Drupal\Tests\Listeners\HtmlOutputPrinter');
-  // Using an early return instead of a else does not work when using the
-  // PHPUnit phar due to some weird PHP behavior (the class gets defined without
-  // executing the code before it and so the definition is not properly
-  // conditional).
-}
-else {
+/**
+ * Defines a class for providing html output results for functional tests.
+ *
+ * @internal
+ */
+class HtmlOutputPrinter extends ResultPrinter {
+  use HtmlOutputPrinterTrait;
+
   /**
-   * Defines a class for providing html output results for functional tests.
-   *
-   * @internal
+   * {@inheritdoc}
    */
-  class HtmlOutputPrinter extends ResultPrinter {
-    use HtmlOutputPrinterTrait;
-
-    /**
-     * {@inheritdoc}
-     */
-    public function __construct($out = NULL, $verbose = FALSE, $colors = self::COLOR_DEFAULT, $debug = FALSE, $numberOfColumns = 80, $reverse = FALSE) {
-      parent::__construct($out, $verbose, $colors, $debug, $numberOfColumns, $reverse);
-
-      $this->setUpHtmlOutput();
-    }
+  public function __construct($out = NULL, $verbose = FALSE, $colors = self::COLOR_DEFAULT, $debug = FALSE, $numberOfColumns = 80, $reverse = FALSE) {
+    parent::__construct($out, $verbose, $colors, $debug, $numberOfColumns, $reverse);
 
-    /**
-     * {@inheritdoc}
-     */
-    public function printResult(TestResult $result) {
-      parent::printResult($result);
+    $this->setUpHtmlOutput();
+  }
 
-      $this->printHtmlOutput();
-    }
+  /**
+   * {@inheritdoc}
+   */
+  public function printResult(TestResult $result) {
+    parent::printResult($result);
 
+    $this->printHtmlOutput();
   }
+
 }
diff --git a/core/tests/Drupal/Tests/Listeners/Legacy/AfterSymfonyListener.php b/core/tests/Drupal/Tests/Listeners/Legacy/AfterSymfonyListener.php
deleted file mode 100644
index fec2d78264..0000000000
--- a/core/tests/Drupal/Tests/Listeners/Legacy/AfterSymfonyListener.php
+++ /dev/null
@@ -1,19 +0,0 @@
-<?php
-
-namespace Drupal\Tests\Listeners\Legacy;
-
-/**
- * Listens to PHPUnit test runs.
- *
- * @internal
- */
-class AfterSymfonyListener extends \PHPUnit_Framework_BaseTestListener {
-
-  /**
-   * {@inheritdoc}
-   */
-  public function endTest(\PHPUnit_Framework_Test $test, $time) {
-    restore_error_handler();
-  }
-
-}
diff --git a/core/tests/Drupal/Tests/Listeners/Legacy/DrupalListener.php b/core/tests/Drupal/Tests/Listeners/Legacy/DrupalListener.php
deleted file mode 100644
index 1fc603a6f4..0000000000
--- a/core/tests/Drupal/Tests/Listeners/Legacy/DrupalListener.php
+++ /dev/null
@@ -1,36 +0,0 @@
-<?php
-
-namespace Drupal\Tests\Listeners\Legacy;
-
-use Drupal\Tests\Listeners\DeprecationListenerTrait;
-use Drupal\Tests\Listeners\DrupalComponentTestListenerTrait;
-use Drupal\Tests\Listeners\DrupalStandardsListenerTrait;
-
-/**
- * Listens to PHPUnit test runs.
- *
- * @internal
- *   This class is not public Drupal API.
- */
-class DrupalListener extends \PHPUnit_Framework_BaseTestListener {
-  use DeprecationListenerTrait;
-  use DrupalComponentTestListenerTrait;
-  use DrupalStandardsListenerTrait;
-
-  /**
-   * {@inheritdoc}
-   */
-  public function startTest(\PHPUnit_Framework_Test $test) {
-    $this->deprecationStartTest($test);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function endTest(\PHPUnit_Framework_Test $test, $time) {
-    $this->deprecationEndTest($test, $time);
-    $this->componentEndTest($test, $time);
-    $this->standardsEndTest($test, $time);
-  }
-
-}
diff --git a/core/tests/Drupal/Tests/Listeners/Legacy/HtmlOutputPrinter.php b/core/tests/Drupal/Tests/Listeners/Legacy/HtmlOutputPrinter.php
deleted file mode 100644
index 7a332bc2de..0000000000
--- a/core/tests/Drupal/Tests/Listeners/Legacy/HtmlOutputPrinter.php
+++ /dev/null
@@ -1,33 +0,0 @@
-<?php
-
-namespace Drupal\Tests\Listeners\Legacy;
-
-use Drupal\Tests\Listeners\HtmlOutputPrinterTrait;
-
-/**
- * Defines a class for providing html output results for functional tests.
- *
- * @internal
- */
-class HtmlOutputPrinter extends \PHPUnit_TextUI_ResultPrinter {
-  use HtmlOutputPrinterTrait;
-
-  /**
-   * {@inheritdoc}
-   */
-  public function __construct($out = NULL, $verbose = FALSE, $colors = self::COLOR_DEFAULT, $debug = FALSE, $numberOfColumns = 80) {
-    parent::__construct($out, $verbose, $colors, $debug, $numberOfColumns);
-
-    $this->setUpHtmlOutput();
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function printResult(\PHPUnit_Framework_TestResult $result) {
-    parent::printResult($result);
-
-    $this->printHtmlOutput();
-  }
-
-}
diff --git a/core/tests/Drupal/Tests/Phpunit4CompatibilityTest.php b/core/tests/Drupal/Tests/Phpunit4CompatibilityTest.php
new file mode 100644
index 0000000000..b7ad65d9cb
--- /dev/null
+++ b/core/tests/Drupal/Tests/Phpunit4CompatibilityTest.php
@@ -0,0 +1,43 @@
+<?php
+
+namespace Drupal\Tests;
+
+/**
+ * Tests deprecations of the PHPUnit4 backward compatibility classes.
+ *
+ * @group Tests
+ * @group legacy
+ */
+class Phpunit4CompatibilityTest extends UnitTestCase {
+
+  /**
+   * Tests deprecation of \PHPUnit_Framework_AssertionFailedError.
+   *
+   * @group legacy
+   * @expectedDeprecation \Drupal\Tests\PhpunitCompatibilityTrait::getMock() is deprecated in drupal:8.5.0 and is removed from drupal:9.0.0. Use \Drupal\Tests\PhpunitCompatibilityTrait::createMock() instead. See https://www.drupal.org/node/2907725
+   */
+  public function testFrameworkAssertionFailedError() {
+    $this->assertTrue(class_exists('\PHPUnit_Framework_AssertionFailedError'));
+  }
+
+  /**
+   * Tests deprecation of \PHPUnit_Framework_Constraint_Count.
+   *
+   * @group legacy
+   * @expectedDeprecation \Drupal\Tests\PhpunitCompatibilityTrait::getMock() is deprecated in drupal:8.5.0 and is removed from drupal:9.0.0. Use \Drupal\Tests\PhpunitCompatibilityTrait::createMock() instead. See https://www.drupal.org/node/2907725
+   */
+  public function testFrameworkConstraintCount() {
+    $this->assertTrue(class_exists('\PHPUnit_Framework_Constraint_Count'));
+  }
+
+  /**
+   * Tests deprecation of \PHPUnit_Framework_Constraint_Count.
+   *
+   * @group legacy
+   * @expectedDeprecation \Drupal\Tests\PhpunitCompatibilityTrait::getMock() is deprecated in drupal:8.5.0 and is removed from drupal:9.0.0. Use \Drupal\Tests\PhpunitCompatibilityTrait::createMock() instead. See https://www.drupal.org/node/2907725
+   */
+  public function testFrameworkError() {
+    $this->assertTrue(class_exists('\PHPUnit_Framework_Error'));
+  }
+
+}
diff --git a/core/tests/Drupal/Tests/PhpunitCompatibilityTrait.php b/core/tests/Drupal/Tests/PhpunitCompatibilityTrait.php
index f7972e1d39..4ff7ef0084 100644
--- a/core/tests/Drupal/Tests/PhpunitCompatibilityTrait.php
+++ b/core/tests/Drupal/Tests/PhpunitCompatibilityTrait.php
@@ -38,7 +38,6 @@
    * @param object $proxyTarget
    *   Sets the proxy target.
    *
-   * @see \PHPUnit_Framework_TestCase::getMock
    * @see https://github.com/sebastianbergmann/phpunit/wiki/Release-Announcement-for-PHPUnit-5.4.0
    *
    * @return \PHPUnit_Framework_MockObject_MockObject
diff --git a/core/tests/Drupal/Tests/TestRequirementsTrait.php b/core/tests/Drupal/Tests/TestRequirementsTrait.php
index 84937ad69c..2c320dfaaf 100644
--- a/core/tests/Drupal/Tests/TestRequirementsTrait.php
+++ b/core/tests/Drupal/Tests/TestRequirementsTrait.php
@@ -3,12 +3,13 @@
 namespace Drupal\Tests;
 
 use Drupal\Core\Extension\ExtensionDiscovery;
+use PHPUnit\Framework\SkippedTestError;
 
 /**
  * Allows test classes to require Drupal modules as dependencies.
  *
- * This trait is assumed to be on a subclass of \PHPUnit_Framework_TestCase, and
- * overrides \PHPUnit_Framework_TestCase::checkRequirements(). This allows the
+ * This trait is assumed to be on a subclass of \PHPUnit\Framework\TestCase, and
+ * overrides \PHPUnit\Framework\TestCase::checkRequirements(). This allows the
  * test to be marked as skipped before any kernel boot processes have happened.
  */
 trait TestRequirementsTrait {
@@ -26,9 +27,9 @@ protected static function getDrupalRoot() {
    * Check module requirements for the Drupal use case.
    *
    * This method is assumed to override
-   * \PHPUnit_Framework_TestCase::checkRequirements().
+   * \PHPUnit\Framework\TestCase::checkRequirements().
    *
-   * @throws \PHPUnit_Framework_SkippedTestError
+   * @throws \PHPUnit\Framework\SkippedTestError
    *   Thrown when the requirements are not met, and this test should be
    *   skipped. Callers should not catch this exception.
    */
@@ -59,7 +60,7 @@ protected function checkRequirements() {
    * @param string[] $annotations
    *   A list of requires annotations from either a method or class annotation.
    *
-   * @throws \PHPUnit_Framework_SkippedTestError
+   * @throws \PHPUnit\Framework\SkippedTestError
    *   Thrown when the requirements are not met, and this test should be
    *   skipped. Callers should not catch this exception.
    */
@@ -83,7 +84,7 @@ private function checkModuleRequirements($root, array $annotations) {
       $list = array_keys($discovery->scan('module'));
       $not_available = array_diff($required_modules, $list);
       if (!empty($not_available)) {
-        throw new \PHPUnit_Framework_SkippedTestError('Required modules: ' . implode(', ', $not_available));
+        throw new SkippedTestError('Required modules: ' . implode(', ', $not_available));
       }
     }
   }
diff --git a/core/tests/Drupal/Tests/Traits/ExpectDeprecationTrait.php b/core/tests/Drupal/Tests/Traits/ExpectDeprecationTrait.php
index 4e47f77fe5..9145252209 100644
--- a/core/tests/Drupal/Tests/Traits/ExpectDeprecationTrait.php
+++ b/core/tests/Drupal/Tests/Traits/ExpectDeprecationTrait.php
@@ -4,7 +4,9 @@
 
 use Symfony\Bridge\PhpUnit\Legacy\SymfonyTestsListener as LegacySymfonyTestsListener;
 use Symfony\Bridge\PhpUnit\SymfonyTestsListener;
+use PHPUnit\Framework\AssertionFailedError;
 use PHPUnit\Framework\TestCase;
+use PHPUnit\Util\Test;
 
 /**
  * Adds the ability to dynamically set expected deprecation messages in tests.
@@ -34,19 +36,11 @@ protected function expectDeprecation($message) {
    *   The expected deprecation messages.
    */
   public function expectedDeprecations(array $messages) {
-    if (class_exists('PHPUnit_Util_Test', FALSE)) {
-      $test_util = 'PHPUnit_Util_Test';
-      $assertion_failed_error = 'PHPUnit_Framework_AssertionFailedError';
-    }
-    else {
-      $test_util = 'PHPUnit\Util\Test';
-      $assertion_failed_error = 'PHPUnit\Framework\AssertionFailedError';
-    }
-    if ($this instanceof \PHPUnit_Framework_TestCase || $this instanceof TestCase) {
+    if ($this instanceof TestCase) {
       // Ensure the class or method is in the legacy group.
-      $groups = $test_util::getGroups(get_class($this), $this->getName(FALSE));
+      $groups = Test::getGroups(get_class($this), $this->getName(FALSE));
       if (!in_array('legacy', $groups, TRUE)) {
-        throw new $assertion_failed_error('Only tests with the `@group legacy` annotation can call `setExpectedDeprecation()`.');
+        throw new AssertionFailedError('Only tests with the `@group legacy` annotation can call `setExpectedDeprecation()`.');
       }
 
       // If setting an expected deprecation there is no need to be strict about
@@ -89,7 +83,7 @@ public function expectedDeprecations(array $messages) {
       return;
     }
 
-    throw new $assertion_failed_error('Can not set an expected deprecation message because the Symfony\Bridge\PhpUnit\SymfonyTestsListener is not registered as a PHPUnit test listener.');
+    throw new AssertionFailedError('Can not set an expected deprecation message because the Symfony\Bridge\PhpUnit\SymfonyTestsListener is not registered as a PHPUnit test listener.');
   }
 
   /**
diff --git a/core/tests/Drupal/Tests/UnitTestCase.php b/core/tests/Drupal/Tests/UnitTestCase.php
index bd183c7961..b8e7579989 100644
--- a/core/tests/Drupal/Tests/UnitTestCase.php
+++ b/core/tests/Drupal/Tests/UnitTestCase.php
@@ -104,7 +104,7 @@ protected function assertArrayEquals(array $expected, array $actual, $message =
    *   configuration object names and whose values are key => value arrays for
    *   the configuration object in question. Defaults to an empty array.
    *
-   * @return \PHPUnit_Framework_MockObject_MockBuilder
+   * @return \PHPUnit\Framework\MockObject\MockBuilder
    *   A MockBuilder object for the ConfigFactory with the desired return
    *   values.
    */
diff --git a/core/tests/bootstrap.php b/core/tests/bootstrap.php
index 7a70747273..0b54f04a60 100644
--- a/core/tests/bootstrap.php
+++ b/core/tests/bootstrap.php
@@ -8,7 +8,6 @@
  */
 
 use Drupal\Component\Assertion\Handle;
-use PHPUnit\Runner\Version;
 
 /**
  * Finds all valid extension directories recursively within a given directory.
@@ -151,14 +150,6 @@ function drupal_phpunit_populate_class_loader() {
 // Do class loader population.
 drupal_phpunit_populate_class_loader();
 
-// Ensure we have the correct PHPUnit version for the version of PHP.
-if (class_exists('\PHPUnit_Runner_Version')) {
-  $phpunit_version = \PHPUnit_Runner_Version::id();
-}
-else {
-  $phpunit_version = Version::id();
-}
-
 // Set sane locale settings, to ensure consistent string, dates, times and
 // numbers handling.
 // @see \Drupal\Core\DrupalKernel::bootEnvironment()
@@ -183,16 +174,16 @@ function drupal_phpunit_populate_class_loader() {
 
 // PHPUnit 4 to PHPUnit 6 bridge. Tests written for PHPUnit 4 need to work on
 // PHPUnit 6 with a minimum of fuss.
-if (version_compare($phpunit_version, '6.1', '>=')) {
-  class_alias('\PHPUnit\Framework\AssertionFailedError', '\PHPUnit_Framework_AssertionFailedError');
-  class_alias('\PHPUnit\Framework\Constraint\Count', '\PHPUnit_Framework_Constraint_Count');
-  class_alias('\PHPUnit\Framework\Error\Error', '\PHPUnit_Framework_Error');
-  class_alias('\PHPUnit\Framework\Error\Warning', '\PHPUnit_Framework_Error_Warning');
-  class_alias('\PHPUnit\Framework\ExpectationFailedException', '\PHPUnit_Framework_ExpectationFailedException');
-  class_alias('\PHPUnit\Framework\Exception', '\PHPUnit_Framework_Exception');
-  class_alias('\PHPUnit\Framework\MockObject\Matcher\InvokedRecorder', '\PHPUnit_Framework_MockObject_Matcher_InvokedRecorder');
-  class_alias('\PHPUnit\Framework\SkippedTestError', '\PHPUnit_Framework_SkippedTestError');
-  class_alias('\PHPUnit\Framework\TestCase', '\PHPUnit_Framework_TestCase');
-  class_alias('\PHPUnit\Util\Test', '\PHPUnit_Util_Test');
-  class_alias('\PHPUnit\Util\Xml', '\PHPUnit_Util_XML');
-}
+// @todo provided for BC; remove in Drupal 9.
+class_exists('\Drupal\Core\Test\PhpUnitCompatibility\PhpUnit4\FrameworkAssertionFailedError');
+class_alias('\Drupal\Core\Test\PhpUnitCompatibility\PhpUnit4\FrameworkAssertionFailedError', '\PHPUnit_Framework_AssertionFailedError', FALSE);
+class_alias('\Drupal\Core\Test\PhpUnitCompatibility\PhpUnit4\FrameworkConstraintCount', '\PHPUnit_Framework_Constraint_Count', FALSE);
+class_alias('\Drupal\Core\Test\PhpUnitCompatibility\PhpUnit4\FrameworkError', '\PHPUnit_Framework_Error', FALSE);
+class_alias('\PHPUnit\Framework\Error\Warning', '\PHPUnit_Framework_Error_Warning');
+class_alias('\PHPUnit\Framework\ExpectationFailedException', '\PHPUnit_Framework_ExpectationFailedException');
+class_alias('\PHPUnit\Framework\Exception', '\PHPUnit_Framework_Exception');
+class_alias('\PHPUnit\Framework\MockObject\Matcher\InvokedRecorder', '\PHPUnit_Framework_MockObject_Matcher_InvokedRecorder');
+class_alias('\PHPUnit\Framework\SkippedTestError', '\PHPUnit_Framework_SkippedTestError');
+class_alias('\PHPUnit\Framework\TestCase', '\PHPUnit_Framework_TestCase');
+class_alias('\PHPUnit\Util\Test', '\PHPUnit_Util_Test');
+class_alias('\PHPUnit\Util\Xml', '\PHPUnit_Util_XML');
