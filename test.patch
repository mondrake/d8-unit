diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index 04ef0c3170dc26defcf56b7bfbd47a5497d330db..4c45ab4107e96ab0224cb0214b2ad8ff6c9f54a6 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -67,6 +67,11 @@ abstract class Connection {
    * Index of what driver-specific class to use for various operations.
    *
    * @var array
+   *
+   * @deprecated in drupal:9.4.0 and is removed from drupal:10.0.0. Use
+   *   standard autoloading in the methods that return database operations.
+   *
+   * @see https://www.drupal.org/node/3217534
    */
   protected $driverClasses = [];
 
@@ -1122,8 +1127,14 @@ protected function expandArguments(&$query, &$args) {
    *
    * @return string
    *   The name of the class that should be used for this driver.
+   *
+   * @deprecated in drupal:9.4.0 and is removed from drupal:10.0.0. Use
+   *   standard autoloading in the methods that return database operations.
+   *
+   * @see https://www.drupal.org/node/3217534
    */
   public function getDriverClass($class) {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:9.4.0 and is removed from drupal:10.0.0. Use standard autoloading in the methods that return database operations. See https://www.drupal.org/node/3217534', E_USER_DEPRECATED);
     if (empty($this->driverClasses[$class])) {
       $driver_class = $this->connectionOptions['namespace'] . '\\' . $class;
       if (class_exists($driver_class)) {
@@ -1190,6 +1201,7 @@ public function getDriverClass($class) {
    *   The database exceptions handler.
    */
   public function exceptionHandler() {
+    @trigger_error('Using ' . __METHOD__ . '() is deprecated in drupal:9.4.0 and the method will be abstract from drupal:10.0.0. Database drivers must implement it explicitly. See https://www.drupal.org/node/3217534', E_USER_DEPRECATED);
     $class = $this->getDriverClass('ExceptionHandler');
     return new $class();
   }
@@ -1214,6 +1226,7 @@ public function exceptionHandler() {
    * @see \Drupal\Core\Database\Query\Select
    */
   public function select($table, $alias = NULL, array $options = []) {
+    @trigger_error('Using ' . __METHOD__ . '() is deprecated in drupal:9.4.0 and the method will be abstract from drupal:10.0.0. Database drivers must implement it explicitly. See https://www.drupal.org/node/3217534', E_USER_DEPRECATED);
     if (!is_null($alias) && !is_string($alias)) {
       @trigger_error('Passing a non-string \'alias\' argument to ' . __METHOD__ . '() is deprecated in drupal:9.3.0 and will be required in drupal:10.0.0. Refactor your calling code. See https://www.drupal.org/project/drupal/issues/3216552', E_USER_DEPRECATED);
     }
@@ -1238,6 +1251,7 @@ public function select($table, $alias = NULL, array $options = []) {
    * @see \Drupal\Core\Database\Connection::defaultOptions()
    */
   public function insert($table, array $options = []) {
+    @trigger_error('Using ' . __METHOD__ . '() is deprecated in drupal:9.4.0 and the method will be abstract from drupal:10.0.0. Database drivers must implement it explicitly. See https://www.drupal.org/node/3217534', E_USER_DEPRECATED);
     $class = $this->getDriverClass('Insert');
     return new $class($this, $table, $options);
   }
@@ -1290,6 +1304,7 @@ public function lastInsertId(?string $name = NULL): string {
    * @see \Drupal\Core\Database\Query\Merge
    */
   public function merge($table, array $options = []) {
+    @trigger_error('Using ' . __METHOD__ . '() is deprecated in drupal:9.4.0 and the method will be abstract from drupal:10.0.0. Database drivers must implement it explicitly. See https://www.drupal.org/node/3217534', E_USER_DEPRECATED);
     $class = $this->getDriverClass('Merge');
     return new $class($this, $table, $options);
   }
@@ -1308,6 +1323,7 @@ public function merge($table, array $options = []) {
    * @see \Drupal\Core\Database\Query\Upsert
    */
   public function upsert($table, array $options = []) {
+    @trigger_error('Using ' . __METHOD__ . '() is deprecated in drupal:9.4.0 and the method will be abstract from drupal:10.0.0. Database drivers must implement it explicitly. See https://www.drupal.org/node/3217534', E_USER_DEPRECATED);
     $class = $this->getDriverClass('Upsert');
     return new $class($this, $table, $options);
   }
@@ -1329,6 +1345,7 @@ public function upsert($table, array $options = []) {
    * @see \Drupal\Core\Database\Connection::defaultOptions()
    */
   public function update($table, array $options = []) {
+    @trigger_error('Using ' . __METHOD__ . '() is deprecated in drupal:9.4.0 and the method will be abstract from drupal:10.0.0. Database drivers must implement it explicitly. See https://www.drupal.org/node/3217534', E_USER_DEPRECATED);
     $class = $this->getDriverClass('Update');
     return new $class($this, $table, $options);
   }
@@ -1350,6 +1367,7 @@ public function update($table, array $options = []) {
    * @see \Drupal\Core\Database\Connection::defaultOptions()
    */
   public function delete($table, array $options = []) {
+    @trigger_error('Using ' . __METHOD__ . '() is deprecated in drupal:9.4.0 and the method will be abstract from drupal:10.0.0. Database drivers must implement it explicitly. See https://www.drupal.org/node/3217534', E_USER_DEPRECATED);
     $class = $this->getDriverClass('Delete');
     return new $class($this, $table, $options);
   }
@@ -1368,6 +1386,7 @@ public function delete($table, array $options = []) {
    * @see \Drupal\Core\Database\Query\Truncate
    */
   public function truncate($table, array $options = []) {
+    @trigger_error('Using ' . __METHOD__ . '() is deprecated in drupal:9.4.0 and the method will be abstract from drupal:10.0.0. Database drivers must implement it explicitly. See https://www.drupal.org/node/3217534', E_USER_DEPRECATED);
     $class = $this->getDriverClass('Truncate');
     return new $class($this, $table, $options);
   }
@@ -1381,6 +1400,7 @@ public function truncate($table, array $options = []) {
    *   The database Schema object for this connection.
    */
   public function schema() {
+    @trigger_error('Using ' . __METHOD__ . '() is deprecated in drupal:9.4.0 and the method will be abstract from drupal:10.0.0. Database drivers must implement it explicitly. See https://www.drupal.org/node/3217534', E_USER_DEPRECATED);
     if (empty($this->schema)) {
       $class = $this->getDriverClass('Schema');
       $this->schema = new $class($this);
@@ -1400,6 +1420,7 @@ public function schema() {
    * @see \Drupal\Core\Database\Query\Condition
    */
   public function condition($conjunction) {
+    @trigger_error('Using ' . __METHOD__ . '() is deprecated in drupal:9.4.0 and the method will be abstract from drupal:10.0.0. Database drivers must implement it explicitly. See https://www.drupal.org/node/3217534', E_USER_DEPRECATED);
     $class = $this->getDriverClass('Condition');
     // Creating an instance of the class Drupal\Core\Database\Query\Condition
     // should only be created from the database layer. This will allow database
@@ -1557,6 +1578,7 @@ public function transactionDepth() {
    * @see \Drupal\Core\Database\Transaction
    */
   public function startTransaction($name = '') {
+    @trigger_error('Using ' . __METHOD__ . '() is deprecated in drupal:9.4.0 and the method will be abstract from drupal:10.0.0. Database drivers must implement it explicitly. See https://www.drupal.org/node/3217534', E_USER_DEPRECATED);
     $class = $this->getDriverClass('Transaction');
     return new $class($this, $name);
   }
diff --git a/core/modules/mysql/src/Driver/Database/mysql/Connection.php b/core/modules/mysql/src/Driver/Database/mysql/Connection.php
index b2de80be4f4a18d44c6d49b1bbf80d0074e07a84..61ece197b8e9deef9a75ff32aefef6df6ae3670b 100644
--- a/core/modules/mysql/src/Driver/Database/mysql/Connection.php
+++ b/core/modules/mysql/src/Driver/Database/mysql/Connection.php
@@ -2,14 +2,17 @@
 
 namespace Drupal\mysql\Driver\Database\mysql;
 
+use Drupal\Core\Database\Connection as DatabaseConnection;
+use Drupal\Core\Database\Database;
 use Drupal\Core\Database\DatabaseAccessDeniedException;
-use Drupal\Core\Database\IntegrityConstraintViolationException;
+use Drupal\Core\Database\DatabaseException;
 use Drupal\Core\Database\DatabaseExceptionWrapper;
-use Drupal\Core\Database\StatementWrapper;
-use Drupal\Core\Database\Database;
 use Drupal\Core\Database\DatabaseNotFoundException;
-use Drupal\Core\Database\DatabaseException;
-use Drupal\Core\Database\Connection as DatabaseConnection;
+use Drupal\Core\Database\IntegrityConstraintViolationException;
+use Drupal\Core\Database\Query\Condition;
+use Drupal\Core\Database\StatementInterface;
+use Drupal\Core\Database\StatementWrapper;
+use Drupal\Core\Database\Transaction;
 use Drupal\Core\Database\TransactionNoActiveException;
 
 /**
@@ -489,6 +492,86 @@ protected function doCommit() {
     return $success;
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function exceptionHandler() {
+    return new ExceptionHandler();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function select($table, $alias = NULL, array $options = []) {
+    return new Select($this, $table, $alias, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function insert($table, array $options = []) {
+    return new Insert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function merge($table, array $options = []) {
+    return new Merge($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function upsert($table, array $options = []) {
+    return new Upsert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function update($table, array $options = []) {
+    return new Update($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function delete($table, array $options = []) {
+    return new Delete($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function truncate($table, array $options = []) {
+    return new Truncate($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function schema() {
+    if (empty($this->schema)) {
+      $this->schema = new Schema($this);
+    }
+    return $this->schema;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function condition($conjunction) {
+    return new Condition($conjunction, FALSE);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function startTransaction($name = '') {
+    return new Transaction($this, $name);
+  }
+
 }
 
 
diff --git a/core/modules/pgsql/src/Driver/Database/pgsql/Connection.php b/core/modules/pgsql/src/Driver/Database/pgsql/Connection.php
index b36525b337e72a1a852cf1c2a2101ac64f1ad10a..4e21c1dc231b1caf8d495c545199462ebca5c7f4 100644
--- a/core/modules/pgsql/src/Driver/Database/pgsql/Connection.php
+++ b/core/modules/pgsql/src/Driver/Database/pgsql/Connection.php
@@ -2,12 +2,15 @@
 
 namespace Drupal\pgsql\Driver\Database\pgsql;
 
-use Drupal\Core\Database\Database;
 use Drupal\Core\Database\Connection as DatabaseConnection;
+use Drupal\Core\Database\Database;
 use Drupal\Core\Database\DatabaseAccessDeniedException;
 use Drupal\Core\Database\DatabaseNotFoundException;
+use Drupal\Core\Database\ExceptionHandler;
+use Drupal\Core\Database\Query\Condition;
 use Drupal\Core\Database\StatementInterface;
 use Drupal\Core\Database\StatementWrapper;
+use Drupal\Core\Database\Transaction;
 
 // cSpell:ignore ilike nextval
 
@@ -380,6 +383,86 @@ public function hasJson(): bool {
     }
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function exceptionHandler() {
+    return new ExceptionHandler();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function select($table, $alias = NULL, array $options = []) {
+    return new Select($this, $table, $alias, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function insert($table, array $options = []) {
+    return new Insert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function merge($table, array $options = []) {
+    return new Merge($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function upsert($table, array $options = []) {
+    return new Upsert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function update($table, array $options = []) {
+    return new Update($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function delete($table, array $options = []) {
+    return new Delete($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function truncate($table, array $options = []) {
+    return new Truncate($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function schema() {
+    if (empty($this->schema)) {
+      $this->schema = new Schema($this);
+    }
+    return $this->schema;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function condition($conjunction) {
+    return new Condition($conjunction, FALSE);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function startTransaction($name = '') {
+    return new Transaction($this, $name);
+  }
+
 }
 
 /**
diff --git a/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php b/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php
index 17fd2567d574f641076897ff8ce87f8ac31027a5..6a122e3de903a7960faa9c68a5aa0b6e560ec83a 100644
--- a/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php
+++ b/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php
@@ -2,9 +2,12 @@
 
 namespace Drupal\sqlite\Driver\Database\sqlite;
 
-use Drupal\Core\Database\DatabaseNotFoundException;
 use Drupal\Core\Database\Connection as DatabaseConnection;
+use Drupal\Core\Database\DatabaseNotFoundException;
+use Drupal\Core\Database\ExceptionHandler;
+use Drupal\Core\Database\Query\Condition;
 use Drupal\Core\Database\StatementInterface;
+use Drupal\Core\Database\Transaction;
 
 /**
  * SQLite implementation of \Drupal\Core\Database\Connection.
@@ -529,4 +532,84 @@ public static function createUrlFromConnectionOptions(array $connection_options)
     return $db_url;
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function exceptionHandler() {
+    return new ExceptionHandler();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function select($table, $alias = NULL, array $options = []) {
+    return new Select($this, $table, $alias, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function insert($table, array $options = []) {
+    return new Insert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function merge($table, array $options = []) {
+    return new Merge($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function upsert($table, array $options = []) {
+    return new Upsert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function update($table, array $options = []) {
+    return new Update($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function delete($table, array $options = []) {
+    return new Delete($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function truncate($table, array $options = []) {
+    return new Truncate($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function schema() {
+    if (empty($this->schema)) {
+      $this->schema = new Schema($this);
+    }
+    return $this->schema;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function condition($conjunction) {
+    return new Condition($conjunction, FALSE);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function startTransaction($name = '') {
+    return new Transaction($this, $name);
+  }
+
 }
diff --git a/core/modules/system/system.install b/core/modules/system/system.install
index 2e1bab4caaa6f15b7bda40053b5014d5e29e8ec0..ab64dcdf59a0b26964150296669da800064f542c 100644
--- a/core/modules/system/system.install
+++ b/core/modules/system/system.install
@@ -526,7 +526,8 @@ function system_requirements($phase) {
 
   if ($phase === 'runtime' || $phase === 'update') {
     // Database information.
-    $class = Database::getConnection()->getDriverClass('Install\\Tasks');
+    $connection = Database::getConnection();
+    $class = $connection->getConnectionOptions()['namespace'] . '\\Install\\Tasks';
     /** @var \Drupal\Core\Database\Install\Tasks $tasks */
     $tasks = new $class();
     $requirements['database_system'] = [
@@ -535,7 +536,7 @@ function system_requirements($phase) {
     ];
     $requirements['database_system_version'] = [
       'title' => t('Database system version'),
-      'value' => Database::getConnection()->version(),
+      'value' => $connection->version(),
     ];
 
     $errors = $tasks->engineVersionRequirementsCheck();
diff --git a/core/modules/system/tests/modules/database_statement_monitoring_test/src/LoggedStatementsTrait.php b/core/modules/system/tests/modules/database_statement_monitoring_test/src/LoggedStatementsTrait.php
index 677f4fd891825e3282071e9f00ee101573de325c..1f23fcb77dc360e710a85af9147ab725afb82240 100644
--- a/core/modules/system/tests/modules/database_statement_monitoring_test/src/LoggedStatementsTrait.php
+++ b/core/modules/system/tests/modules/database_statement_monitoring_test/src/LoggedStatementsTrait.php
@@ -45,6 +45,7 @@ public function resetLoggedStatements() {
    */
   public function getDriverClass($class) {
     static $fixed_namespace;
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:9.4.0 and is removed from drupal:10.0.0. Use standard autoloading in the methods that return database operations. See https://www.drupal.org/node/3217534', E_USER_DEPRECATED);
     if (!$fixed_namespace) {
       // Override because we've altered the namespace in
       // \Drupal\KernelTests\Core\Cache\EndOfTransactionQueriesTest::getDatabaseConnectionInfo()
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Connection.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Connection.php
index a87a0d386951d2a3d7f3fa209cd10ddc1897421b..7804b59545e3eb2dde988a8060883c64c8067658 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Connection.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Connection.php
@@ -4,6 +4,7 @@
 
 include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Connection.php';
 
+use Drupal\Core\Database\Query\Condition;
 use Drupal\mysql\Driver\Database\mysql\Connection as CoreConnection;
 
 /**
@@ -18,4 +19,84 @@ public function driver() {
     return 'DrivertestMysql';
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function exceptionHandler() {
+    return new ExceptionHandler();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function select($table, $alias = NULL, array $options = []) {
+    return new Select($this, $table, $alias, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function insert($table, array $options = []) {
+    return new Insert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function merge($table, array $options = []) {
+    return new Merge($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function upsert($table, array $options = []) {
+    return new Upsert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function update($table, array $options = []) {
+    return new Update($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function delete($table, array $options = []) {
+    return new Delete($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function truncate($table, array $options = []) {
+    return new Truncate($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function schema() {
+    if (empty($this->schema)) {
+      $this->schema = new Schema($this);
+    }
+    return $this->schema;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function condition($conjunction) {
+    return new Condition($conjunction, FALSE);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function startTransaction($name = '') {
+    return new Transaction($this, $name);
+  }
+
 }
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/ExceptionHandler.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/ExceptionHandler.php
new file mode 100644
index 0000000000000000000000000000000000000000..45943adbb0edba972a9fd66f60eff22297ad4a37
--- /dev/null
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/ExceptionHandler.php
@@ -0,0 +1,12 @@
+<?php
+
+namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
+
+include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/ExceptionHandler.php';
+
+use Drupal\mysql\Driver\Database\mysql\ExceptionHandler as BaseExceptionHandler;
+
+/**
+ * MySQL test implementation of \Drupal\Core\Database\Query\ExceptionHandler.
+ */
+class ExceptionHandler extends BaseExceptionHandler {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Connection.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Connection.php
index 6ef463cb157784a41724f5c9df7ede946a8e9f05..c37e43a504fd0d178ad1c52591fc292785574cb9 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Connection.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Connection.php
@@ -4,6 +4,7 @@
 
 include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Connection.php';
 
+use Drupal\Core\Database\Query\Condition;
 use Drupal\mysql\Driver\Database\mysql\Connection as CoreConnection;
 
 /**
@@ -48,4 +49,84 @@ protected function getServerVersion(): string {
     return $this->databaseVersion;
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function exceptionHandler() {
+    return new ExceptionHandler();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function select($table, $alias = NULL, array $options = []) {
+    return new Select($this, $table, $alias, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function insert($table, array $options = []) {
+    return new Insert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function merge($table, array $options = []) {
+    return new Merge($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function upsert($table, array $options = []) {
+    return new Upsert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function update($table, array $options = []) {
+    return new Update($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function delete($table, array $options = []) {
+    return new Delete($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function truncate($table, array $options = []) {
+    return new Truncate($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function schema() {
+    if (empty($this->schema)) {
+      $this->schema = new Schema($this);
+    }
+    return $this->schema;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function condition($conjunction) {
+    return new Condition($conjunction, FALSE);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function startTransaction($name = '') {
+    return new Transaction($this, $name);
+  }
+
 }
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/ExceptionHandler.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/ExceptionHandler.php
new file mode 100644
index 0000000000000000000000000000000000000000..e411878dff5a18b9e4009dd7d9cf0dc27f0ba7ca
--- /dev/null
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/ExceptionHandler.php
@@ -0,0 +1,12 @@
+<?php
+
+namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
+
+include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/ExceptionHandler.php';
+
+use Drupal\mysql\Driver\Database\mysql\ExceptionHandler as BaseExceptionHandler;
+
+/**
+ * MySQL test implementation of \Drupal\Core\Database\Query\ExceptionHandler.
+ */
+class ExceptionHandler extends BaseExceptionHandler {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Connection.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Connection.php
index e45d48ade944ee3d65c9d3567c024cc77dba820a..9956848373a51e39737a028f42268ab0301dcbd8 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Connection.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Connection.php
@@ -4,6 +4,7 @@
 
 include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Connection.php';
 
+use Drupal\Core\Database\Query\Condition;
 use Drupal\pgsql\Driver\Database\pgsql\Connection as CoreConnection;
 
 /**
@@ -18,4 +19,84 @@ public function driver() {
     return 'DrivertestPgsql';
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function exceptionHandler() {
+    return new ExceptionHandler();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function select($table, $alias = NULL, array $options = []) {
+    return new Select($this, $table, $alias, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function insert($table, array $options = []) {
+    return new Insert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function merge($table, array $options = []) {
+    return new Merge($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function upsert($table, array $options = []) {
+    return new Upsert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function update($table, array $options = []) {
+    return new Update($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function delete($table, array $options = []) {
+    return new Delete($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function truncate($table, array $options = []) {
+    return new Truncate($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function schema() {
+    if (empty($this->schema)) {
+      $this->schema = new Schema($this);
+    }
+    return $this->schema;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function condition($conjunction) {
+    return new Condition($conjunction, FALSE);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function startTransaction($name = '') {
+    return new Transaction($this, $name);
+  }
+
 }
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/ExceptionHandler.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/ExceptionHandler.php
new file mode 100644
index 0000000000000000000000000000000000000000..b5e998a566b3d2b13d7c4e5e3ee1c0d28553ec88
--- /dev/null
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/ExceptionHandler.php
@@ -0,0 +1,12 @@
+<?php
+
+namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
+
+include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/ExceptionHandler.php';
+
+use Drupal\pgsql\Driver\Database\pgsql\ExceptionHandler as BaseExceptionHandler;
+
+/**
+ * MySQL test implementation of \Drupal\Core\Database\Query\ExceptionHandler.
+ */
+class ExceptionHandler extends BaseExceptionHandler {}
diff --git a/core/tests/Drupal/KernelTests/Core/Database/ConnectionTest.php b/core/tests/Drupal/KernelTests/Core/Database/ConnectionTest.php
index 570146fc10da67be1efeb025711b504c83de093b..8ff3d93e143e33b548a0c013853782ecdf21b395 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/ConnectionTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/ConnectionTest.php
@@ -100,8 +100,6 @@ public function testConnectionOptions() {
     // Set up identical replica and confirm connection options are identical.
     Database::addConnectionInfo('default', 'replica', $connection_info['default']);
     $db2 = Database::getConnection('replica', 'default');
-    // Getting a driver class ensures the namespace option is set.
-    $this->assertEquals($db->getDriverClass('Select'), $db2->getDriverClass('Select'));
     $connectionOptions2 = $db2->getConnectionOptions();
 
     // Get a fresh copy of the default connection options.
diff --git a/core/tests/Drupal/KernelTests/Core/Database/SelectExtenderTest.php b/core/tests/Drupal/KernelTests/Core/Database/SelectExtenderTest.php
index 914231805a205f090173e1886c9e4d045f3542bc..7c1d4b4bc0fd0b707594a11ec12c2b95269fc30b 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/SelectExtenderTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/SelectExtenderTest.php
@@ -127,12 +127,14 @@ public function testExtendLegacy(string $expected, string $namespace, string $ex
     $this->expectDeprecation("Passing '%A' as a fully qualified class name to %A is deprecated in drupal:9.4.0 and is removed from drupal:10.0.0. Pass the appropriate suffix for a 'select_extender_factory' service instead. See https://www.drupal.org/node/3218001", E_USER_DEPRECATED);
 
     $additional_class_loader = new ClassLoader();
+    $additional_class_loader->addPsr4("Drupal\\Driver\\Database\\fake\\", __DIR__ . "/../../../../../tests/fixtures/database_drivers/custom/fake");
     $additional_class_loader->addPsr4("Drupal\\corefake\\Driver\\Database\\corefake\\", __DIR__ . "/../../../../../tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefake");
     $additional_class_loader->addPsr4("Drupal\\corefake\\Driver\\Database\\corefakeWithAllCustomClasses\\", __DIR__ . "/../../../../../tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefakeWithAllCustomClasses");
     $additional_class_loader->register(TRUE);
 
     $mock_pdo = $this->createMock(StubPDO::class);
-    $connection = new StubConnection($mock_pdo, ['namespace' => $namespace]);
+    $connection_class = "$namespace\\Connection";
+    $connection = new $connection_class($mock_pdo, ['namespace' => $namespace]);
 
     // Tests the method \Drupal\Core\Database\Query\Select::extend().
     $select = $connection->select('test')->extend($extend);
diff --git a/core/tests/Drupal/Tests/Core/Database/ConditionTest.php b/core/tests/Drupal/Tests/Core/Database/ConditionTest.php
index 05b65b5f7d67961a857d28a32c1c78f12dd1752a..921db314b8e24a9cfb675ad91c54697c7e1c9757 100644
--- a/core/tests/Drupal/Tests/Core/Database/ConditionTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/ConditionTest.php
@@ -5,6 +5,7 @@
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Query\Condition;
 use Drupal\Core\Database\Query\PlaceholderInterface;
+use Drupal\Tests\Core\Database\Stub\StubCondition;
 use Drupal\Tests\Core\Database\Stub\StubConnection;
 use Drupal\Tests\Core\Database\Stub\StubPDO;
 use Drupal\Tests\UnitTestCase;
@@ -184,14 +185,7 @@ public function providerTestCompileWithSqlInjectionForOperator() {
    * Tests that the core Condition can be overridden.
    */
   public function testContribCondition() {
-    $mockCondition = $this->getMockBuilder(Condition::class)
-      ->setMockClassName('MockCondition')
-      ->setConstructorArgs([NULL])
-      ->disableOriginalConstructor()
-      ->getMock();
     $contrib_namespace = 'Drupal\mock\Driver\Database\mock';
-    $mocked_namespace = $contrib_namespace . '\\Condition';
-    class_alias('MockCondition', $mocked_namespace);
 
     $options['namespace'] = $contrib_namespace;
     $options['prefix'] = '';
@@ -200,7 +194,7 @@ class_alias('MockCondition', $mocked_namespace);
 
     $connection = new StubConnection($mockPdo, $options);
     $condition = $connection->condition('AND');
-    $this->assertSame('MockCondition', get_class($condition));
+    $this->assertSame(StubCondition::class, get_class($condition));
   }
 
   /**
diff --git a/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php b/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php
index 09b2f1a9ab08008406372f57c4e0b0e05603c45d..86de17a513f0dd24510220172d8287fd04173aef 100644
--- a/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php
@@ -316,8 +316,10 @@ public function providerGetDriverClass() {
   /**
    * @covers ::getDriverClass
    * @dataProvider providerGetDriverClass
+   * @group legacy
    */
   public function testGetDriverClass($expected, $namespace, $class) {
+    $this->expectDeprecation('Drupal\Core\Database\Connection::getDriverClass() is deprecated in drupal:9.4.0 and is removed from drupal:10.0.0. Use standard autoloading in the methods that return database operations. See https://www.drupal.org/node/3217534');
     $additional_class_loader = new ClassLoader();
     $additional_class_loader->addPsr4("Drupal\\corefake\\Driver\\Database\\corefake\\", __DIR__ . "/../../../../../tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefake");
     $additional_class_loader->addPsr4("Drupal\\corefake\\Driver\\Database\\corefakeWithAllCustomClasses\\", __DIR__ . "/../../../../../tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefakeWithAllCustomClasses");
diff --git a/core/tests/Drupal/Tests/Core/Database/Stub/StubCondition.php b/core/tests/Drupal/Tests/Core/Database/Stub/StubCondition.php
new file mode 100644
index 0000000000000000000000000000000000000000..3b7b79a69973aa9dfc61a380334de1756e780595
--- /dev/null
+++ b/core/tests/Drupal/Tests/Core/Database/Stub/StubCondition.php
@@ -0,0 +1,11 @@
+<?php
+
+namespace Drupal\Tests\Core\Database\Stub;
+
+use Drupal\Core\Database\Query\Condition;
+
+/**
+ * A stub of core Condition class for testing purposes.
+ */
+class StubCondition extends Condition {
+}
diff --git a/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php b/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php
index b553dcce0dc54868b4ac27b067d817360186d2c4..a12cf67123976623d63e60332423c445d196f506 100644
--- a/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php
+++ b/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php
@@ -3,8 +3,18 @@
 namespace Drupal\Tests\Core\Database\Stub;
 
 use Drupal\Core\Database\Connection;
+use Drupal\Core\Database\ExceptionHandler;
 use Drupal\Core\Database\Log;
+use Drupal\Core\Database\Query\Delete;
+use Drupal\Core\Database\Query\Insert;
+use Drupal\Core\Database\Query\Merge;
+use Drupal\Core\Database\Query\Select;
+use Drupal\Core\Database\Query\Truncate;
+use Drupal\Core\Database\Query\Update;
+use Drupal\Core\Database\Query\Upsert;
 use Drupal\Core\Database\StatementWrapper;
+use Drupal\Core\Database\Transaction;
+use Drupal\Tests\Core\Database\Stub\Driver\Schema;
 
 /**
  * A stub of the abstract Connection class for testing purposes.
@@ -110,4 +120,84 @@ public function testLogCaller() {
     return (new Log())->findCaller();
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function exceptionHandler() {
+    return new ExceptionHandler();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function select($table, $alias = NULL, array $options = []) {
+    return new Select($this, $table, $alias, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function insert($table, array $options = []) {
+    return new Insert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function merge($table, array $options = []) {
+    return new Merge($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function upsert($table, array $options = []) {
+    return new Upsert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function update($table, array $options = []) {
+    return new Update($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function delete($table, array $options = []) {
+    return new Delete($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function truncate($table, array $options = []) {
+    return new Truncate($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function schema() {
+    if (empty($this->schema)) {
+      $this->schema = new Schema($this);
+    }
+    return $this->schema;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function condition($conjunction) {
+    return new StubCondition($conjunction, FALSE);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function startTransaction($name = '') {
+    return new Transaction($this, $name);
+  }
+
 }
diff --git a/core/tests/fixtures/database_drivers/custom/fake/Connection.php b/core/tests/fixtures/database_drivers/custom/fake/Connection.php
index ec0c9cf2dc90728badbd9bfa19bedac89994a1d3..1af84f85269c61971e5755db43a50115b86fd5e9 100644
--- a/core/tests/fixtures/database_drivers/custom/fake/Connection.php
+++ b/core/tests/fixtures/database_drivers/custom/fake/Connection.php
@@ -3,12 +3,38 @@
 namespace Drupal\Driver\Database\fake;
 
 use Drupal\Core\Database\Connection as CoreConnection;
+use Drupal\Core\Database\ExceptionHandler;
+use Drupal\Core\Database\Query\Condition;
+use Drupal\Core\Database\Query\Delete;
+use Drupal\Core\Database\Query\Insert;
+use Drupal\Core\Database\Query\Merge;
+use Drupal\Core\Database\Query\Select;
+use Drupal\Core\Database\Query\Truncate;
+use Drupal\Core\Database\Query\Update;
+use Drupal\Core\Database\Query\Upsert;
+use Drupal\Core\Database\StatementWrapper;
+use Drupal\Core\Database\Transaction;
 
 /**
  * A fake Connection class for testing purposes.
  */
 class Connection extends CoreConnection {
 
+  /**
+   * {@inheritdoc}
+   */
+  protected $statementClass = NULL;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $statementWrapperClass = StatementWrapper::class;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $identifierQuotes = ['"', '"'];
+
   /**
    * Public property so we can test driver loading mechanism.
    *
@@ -65,4 +91,84 @@ public function nextId($existing_id = 0) {
     return 0;
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function exceptionHandler() {
+    return new ExceptionHandler();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function select($table, $alias = NULL, array $options = []) {
+    return new Select($this, $table, $alias, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function insert($table, array $options = []) {
+    return new Insert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function merge($table, array $options = []) {
+    return new Merge($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function upsert($table, array $options = []) {
+    return new Upsert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function update($table, array $options = []) {
+    return new Update($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function delete($table, array $options = []) {
+    return new Delete($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function truncate($table, array $options = []) {
+    return new Truncate($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function schema() {
+    if (empty($this->schema)) {
+      $this->schema = new Schema($this);
+    }
+    return $this->schema;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function condition($conjunction) {
+    return new Condition($conjunction, FALSE);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function startTransaction($name = '') {
+    return new Transaction($this, $name);
+  }
+
 }
diff --git a/core/tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefakeWithAllCustomClasses/Connection.php b/core/tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefakeWithAllCustomClasses/Connection.php
index ecf7e5cccc4a66cc3fc74324e0eb119b124e2489..5f44ffa533c57696100d9a884fa6d88b447ee19f 100644
--- a/core/tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefakeWithAllCustomClasses/Connection.php
+++ b/core/tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefakeWithAllCustomClasses/Connection.php
@@ -14,4 +14,84 @@ class Connection extends BaseConnection {
    */
   public $driver = 'corefakeWithAllCustomClasses';
 
+  /**
+   * {@inheritdoc}
+   */
+  public function exceptionHandler() {
+    return new ExceptionHandler();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function select($table, $alias = NULL, array $options = []) {
+    return new Select($this, $table, $alias, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function insert($table, array $options = []) {
+    return new Insert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function merge($table, array $options = []) {
+    return new Merge($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function upsert($table, array $options = []) {
+    return new Upsert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function update($table, array $options = []) {
+    return new Update($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function delete($table, array $options = []) {
+    return new Delete($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function truncate($table, array $options = []) {
+    return new Truncate($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function schema() {
+    if (empty($this->schema)) {
+      $this->schema = new Schema($this);
+    }
+    return $this->schema;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function condition($conjunction) {
+    return new Condition($conjunction, FALSE);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function startTransaction($name = '') {
+    return new Transaction($this, $name);
+  }
+
 }
