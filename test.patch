diff --git a/core/core.services.yml b/core/core.services.yml
index 5d01d87667..8c938dfefb 100644
--- a/core/core.services.yml
+++ b/core/core.services.yml
@@ -1733,3 +1733,5 @@ services:
   pager.parameters:
     class: Drupal\Core\Pager\PagerParameters
     arguments: ['@request_stack']
+  php.environment.memory:
+    class: Drupal\Component\Utility\EnvironmentMemory
diff --git a/core/lib/Drupal/Component/Utility/Environment.php b/core/lib/Drupal/Component/Utility/Environment.php
index 6028183c6f..29287f238a 100644
--- a/core/lib/Drupal/Component/Utility/Environment.php
+++ b/core/lib/Drupal/Component/Utility/Environment.php
@@ -23,18 +23,21 @@ class Environment {
    * @return bool
    *   TRUE if there is sufficient memory to allow the operation, or FALSE
    *   otherwise.
+   *
+   * @deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Use
+   *   \Drupal\Component\Utility\EnvironmentMemory or the
+   *   'php.environment.memory' service instead, and its methods.
+   *
+   * @see https://www.drupal.org/node/3166797
    */
   public static function checkMemoryLimit($required, $memory_limit = NULL) {
-    if (!isset($memory_limit)) {
-      $memory_limit = ini_get('memory_limit');
+    @trigger_error(__METHOD__ . ' is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Use \Drupal\Component\Utility\EnvironmentMemory or the \'php.environment.memory\' service instead, and its methods. See https://www.drupal.org/node/3166797', E_USER_DEPRECATED);
+    $environment_library = new EnvironmentMemory();
+    if ($memory_limit !== NULL) {
+      @trigger_error('Passing a $memory_limit to ' . __METHOD__ . ' is deprecated in drupal:9.1.0 and the method is removed from drupal:10.0.0. Use \Drupal\Component\Utility\EnvironmentMemory or the \'php.environment.memory\' service instead, and its methods. See https://www.drupal.org/node/3166797', E_USER_DEPRECATED);
+      $environment_library->setLimit($memory_limit);
     }
-
-    // There is sufficient memory if:
-    // - No memory limit is set.
-    // - The memory limit is set to unlimited (-1).
-    // - The memory limit is greater than or equal to the memory required for
-    //   the operation.
-    return ((!$memory_limit) || ($memory_limit == -1) || (Bytes::toNumber($memory_limit) >= Bytes::toNumber($required)));
+    return $environment_library->checkTotal($required);
   }
 
   /**
diff --git a/core/lib/Drupal/Component/Utility/EnvironmentMemory.php b/core/lib/Drupal/Component/Utility/EnvironmentMemory.php
new file mode 100644
index 0000000000..1296727fea
--- /dev/null
+++ b/core/lib/Drupal/Component/Utility/EnvironmentMemory.php
@@ -0,0 +1,135 @@
+<?php
+
+namespace Drupal\Component\Utility;
+
+/**
+ * A PHP memory checking helper class.
+ */
+class EnvironmentMemory {
+
+  /**
+   * Constant representing unlimited memory.
+   */
+  const UNLIMITED = -1;
+
+  /**
+   * Total memory, in bytes, available to PHP.
+   *
+   * Will be set to static::UNLIMITED when no memory limit is set or it is set
+   * to unlimited.
+   *
+   * @var int
+   */
+  protected $total;
+
+  /**
+   * Constructs a new EnvironmentMemory object.
+   */
+  public function __construct() {
+    // ini_get() may return -1 or null for memory_limit to indicate there is no
+    // limit set. We check that explicitly, and in that case map the result to
+    // the internal constant static::UNLIMITED.
+    $memory_limit = ini_get('memory_limit');
+    $this->total = (!$memory_limit || (int) $memory_limit === -1) ? static::UNLIMITED : (int) Bytes::toNumber($memory_limit);
+  }
+
+  /**
+   * Sets the total memory, in bytes, available to PHP.
+   *
+   * This method is provided to ensure BC for the deprecated
+   * Drupal\Tests\Component\Utility\Environment::checkMemoryLimit() method, and
+   * should not be used.
+   *
+   * @param int|string|null $size
+   *   (optional) The total memory available to PHP, expressed as a number of
+   *   bytes with optional SI or IEC binary unit prefix (e.g. 2, 3K, 5MB, 10G,
+   *   6GiB, 8bytes, 9mbytes). If no value is passed, the current PHP
+   *   memory_limit will be used. Defaults to NULL.
+   *
+   * @see https://en.wikipedia.org/wiki/Binary_prefix
+   *
+   * @deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. There is no
+   *   replacement.
+   *
+   * @see https://www.drupal.org/node/3166797
+   */
+  public function setLimit($memory_limit = NULL): void {
+    @trigger_error(__METHOD__ . ' is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. There is no replacement. See https://www.drupal.org/node/3166797', E_USER_DEPRECATED);
+    if ($memory_limit === NULL) {
+      $memory_limit = ini_get('memory_limit');
+    }
+    $this->total = ($memory_limit === NULL || (int) $memory_limit === -1) ? static::UNLIMITED : (int) Bytes::toNumber($memory_limit);
+  }
+
+  /**
+   * Gets the total memory, in bytes, available to PHP.
+   *
+   * @return int
+   *   The total memory, in bytes, available to PHP. Returns static::UNLIMITED
+   *   when no memory limit is set or it is set to unlimited.
+   */
+  public function getTotal(): int {
+    return $this->total;
+  }
+
+  /**
+   * Gets the amount of memory, in bytes, currently used by PHP.
+   *
+   * @return int
+   *   The memory, in bytes, currently used by PHP.
+   */
+  public function getUsed(): int {
+    return memory_get_usage(TRUE);
+  }
+
+  /**
+   * Gets the amount of memory, in bytes, currently free to be used by PHP.
+   *
+   * @return int
+   *   The amount of memory, in bytes, free for use by PHP. Returns
+   *   static::UNLIMITED when no memory limit is set or it is set to unlimited.
+   */
+  public function getFree(): int {
+    return $this->getTotal() === static::UNLIMITED ? static::UNLIMITED : $this->getTotal() - $this->getUsed();
+  }
+
+  /**
+   * Compares a memory requirement against the total PHP memory.
+   *
+   * There is sufficient memory if:
+   * - No memory limit is set, or set to unlimited (static::UNLIMITED).
+   * - The memory limit is greater than or equal to the memory required for
+   *   the operation.
+   *
+   * @param int|float|string $required
+   *   The memory requirement, expressed as a number of bytes with optional SI
+   *   or IEC binary unit prefix (e.g. 2, 3K, 5MB, 10G, 6GiB, 8bytes, 9mbytes).
+   *
+   * @return bool
+   *   TRUE if there is sufficient memory to allow the requirements, or FALSE
+   *   otherwise.
+   *
+   * @see https://en.wikipedia.org/wiki/Binary_prefix
+   */
+  public function checkTotal($required): bool {
+    return $this->getTotal() === static::UNLIMITED || $this->getTotal() >= Bytes::toNumber($required);
+  }
+
+  /**
+   * Compares a memory requirement against the currently available PHP memory.
+   *
+   * @param int|float|string $required
+   *   The memory requirement, expressed as a number of bytes with optional SI
+   *   or IEC binary unit prefix (e.g. 2, 3K, 5MB, 10G, 6GiB, 8bytes, 9mbytes).
+   *
+   * @return bool
+   *   TRUE if there is sufficient remaining memory to allow the requirements,
+   *   or FALSE otherwise.
+   *
+   * @see https://en.wikipedia.org/wiki/Binary_prefix
+   */
+  public function checkAvailable($required): bool {
+    return $this->getTotal() === static::UNLIMITED || $this->getFree() >= Bytes::toNumber($required);
+  }
+
+}
diff --git a/core/modules/color/color.module b/core/modules/color/color.module
index 712d65e784..cc5ae56174 100644
--- a/core/modules/color/color.module
+++ b/core/modules/color/color.module
@@ -6,9 +6,7 @@
  */
 
 use Drupal\Core\Url;
-use Drupal\Component\Utility\Bytes;
 use Drupal\Component\Utility\Color;
-use Drupal\Component\Utility\Environment;
 use Drupal\Core\Asset\CssOptimizer;
 use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\File\Exception\FileException;
@@ -393,14 +391,13 @@ function color_scheme_form_submit($form, FormStateInterface $form_state) {
     // size (both at 32bpp).
     $required = $width * $height * 8;
     // We intend to prevent color scheme changes if there isn't enough memory
-    // available.  memory_get_usage(TRUE) returns a more accurate number than
-    // memory_get_usage(), therefore we won't inadvertently reject a color
-    // scheme change based on a faulty memory calculation.
-    $usage = memory_get_usage(TRUE);
-    $memory_limit = ini_get('memory_limit');
-    $size = Bytes::toNumber($memory_limit);
-    if (!Environment::checkMemoryLimit($usage + $required, $memory_limit)) {
-      \Drupal::messenger()->addError(t('There is not enough memory available to PHP to change this theme\'s color scheme. You need at least %size more. Check the <a href="http://php.net/manual/ini.core.php#ini.sect.resource-limits">PHP documentation</a> for more information.', ['%size' => format_size($usage + $required - $size)]));
+    // available.  EnvironmentMemory::getUsed() uses memory_get_usage(TRUE)
+    // to return a more accurate number than memory_get_usage(), therefore we
+    // won't inadvertently reject a color scheme change based on a faulty
+    // memory calculation.
+    $environment_memory = \Drupal::service('php.environment.memory');
+    if (!$environment_memory->checkAvailable($required)) {
+      \Drupal::messenger()->addError(t('There is not enough memory available to PHP to change this theme\'s color scheme. You need at least %size more. Check the <a href="http://php.net/manual/ini.core.php#ini.sect.resource-limits">PHP documentation</a> for more information.', ['%size' => format_size($environment_memory->getUsed() + $required - $environment_memory->getTotal())]));
       return;
     }
   }
diff --git a/core/modules/system/system.install b/core/modules/system/system.install
index 57ac719d13..f7174f27a4 100644
--- a/core/modules/system/system.install
+++ b/core/modules/system/system.install
@@ -8,7 +8,7 @@
 use Drupal\Component\FileSystem\FileSystem as FileSystemComponent;
 use Drupal\Component\Utility\Bytes;
 use Drupal\Component\Utility\Crypt;
-use Drupal\Component\Utility\Environment;
+use Drupal\Component\Utility\EnvironmentMemory;
 use Drupal\Component\Utility\OpCodeCache;
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Database\Database;
@@ -457,13 +457,13 @@ function system_requirements($phase) {
   }
 
   // Test PHP memory_limit
-  $memory_limit = ini_get('memory_limit');
+  $environment_memory = \Drupal::service('php.environment.memory');
   $requirements['php_memory_limit'] = [
     'title' => t('PHP memory limit'),
-    'value' => $memory_limit == -1 ? t('-1 (Unlimited)') : $memory_limit,
+    'value' => $environment_memory->getTotal() === EnvironmentMemory::UNLIMITED ? t('-1 (Unlimited)') : format_size($environment_memory->getTotal()),
   ];
 
-  if (!Environment::checkMemoryLimit(\Drupal::MINIMUM_PHP_MEMORY_LIMIT, $memory_limit)) {
+  if (!$environment_memory->checkTotal(\Drupal::MINIMUM_PHP_MEMORY_LIMIT)) {
     $description = [];
     if ($phase == 'install') {
       $description['phase'] = t('Consider increasing your PHP memory limit to %memory_minimum_limit to help prevent errors in the installation process.', ['%memory_minimum_limit' => \Drupal::MINIMUM_PHP_MEMORY_LIMIT]);
@@ -472,7 +472,7 @@ function system_requirements($phase) {
       $description['phase'] = t('Consider increasing your PHP memory limit to %memory_minimum_limit to help prevent errors in the update process.', ['%memory_minimum_limit' => \Drupal::MINIMUM_PHP_MEMORY_LIMIT]);
     }
     elseif ($phase == 'runtime') {
-      $description['phase'] = t('Depending on your configuration, Drupal can run with a %memory_limit PHP memory limit. However, a %memory_minimum_limit PHP memory limit or above is recommended, especially if your site uses additional custom or contributed modules.', ['%memory_limit' => $memory_limit, '%memory_minimum_limit' => \Drupal::MINIMUM_PHP_MEMORY_LIMIT]);
+      $description['phase'] = t('Depending on your configuration, Drupal can run with a %memory_limit PHP memory limit. However, a %memory_minimum_limit PHP memory limit or above is recommended, especially if your site uses additional custom or contributed modules.', ['%memory_limit' => format_size($environment_memory->getTotal()), '%memory_minimum_limit' => \Drupal::MINIMUM_PHP_MEMORY_LIMIT]);
     }
 
     if (!empty($description['phase'])) {
diff --git a/core/tests/Drupal/KernelTests/Core/Database/LargeQueryTest.php b/core/tests/Drupal/KernelTests/Core/Database/LargeQueryTest.php
index 869f85ebc7..db3ad48901 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/LargeQueryTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/LargeQueryTest.php
@@ -2,7 +2,6 @@
 
 namespace Drupal\KernelTests\Core\Database;
 
-use Drupal\Component\Utility\Environment;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Database\DatabaseException;
 
@@ -27,7 +26,7 @@ public function testMaxAllowedPacketQueryTruncating() {
     // check if PHP is configured with sufficient allowed memory to be able
     // to generate a query larger than max_allowed_packet.
     $max_allowed_packet = $this->connection->query('SELECT @@global.max_allowed_packet')->fetchField();
-    if (!Environment::checkMemoryLimit($max_allowed_packet + (16 * 1024 * 1024))) {
+    if (\Drupal::service('php.environment.memory')->checkTotal($max_allowed_packet + (16 * 1024 * 1024))) {
       $this->markTestSkipped('The configured max_allowed_packet exceeds the php memory limit. Therefore the test is skipped.');
     }
 
diff --git a/core/tests/Drupal/Tests/Component/Utility/EnvironmentMemoryTest.php b/core/tests/Drupal/Tests/Component/Utility/EnvironmentMemoryTest.php
new file mode 100644
index 0000000000..3c2ec2b8b6
--- /dev/null
+++ b/core/tests/Drupal/Tests/Component/Utility/EnvironmentMemoryTest.php
@@ -0,0 +1,179 @@
+<?php
+
+namespace Drupal\Tests\Component\Utility;
+
+use Drupal\Component\Utility\Bytes;
+use Drupal\Component\Utility\EnvironmentMemory;
+use PHPUnit\Framework\TestCase;
+
+/**
+ * Test PHP memory helper class.
+ *
+ * @group Utility
+ *
+ * @coversDefaultClass \Drupal\Component\Utility\EnvironmentMemory
+ */
+class EnvironmentMemoryTest extends TestCase {
+
+  /**
+   * Test getting total memory via ini_get().
+   *
+   * @covers ::getTotal
+   */
+  public function testGetTotalFromIni(): void {
+    $memory_limit = ini_get('memory_limit');
+    $memory_limit = (!$memory_limit || $memory_limit == -1) ? EnvironmentMemory::UNLIMITED : (int) Bytes::toNumber($memory_limit);
+    $this->assertSame($memory_limit, (new EnvironmentMemory())->getTotal());
+  }
+
+  /**
+   * Test getting total limit.
+   *
+   * @covers ::getTotal
+   */
+  public function testGetTotal(): void {
+    $memory = $this->getMockBuilder(EnvironmentMemory::class)
+      ->disableOriginalConstructor()
+      ->setMethods(['getTotal'])
+      ->getMock();
+    $memory->expects($this->any())
+      ->method('getTotal')
+      ->will($this->returnValue((int) Bytes::toNumber('100MB')));
+    $this->assertSame(104857600, $memory->getTotal());
+  }
+
+  /**
+   * Test available total memory based on simulated total memory.
+   *
+   * @covers ::checkTotal
+   *
+   * @dataProvider providerTestCheckTotal
+   *
+   * @param int|float|string $required
+   *   The required memory argument for
+   *   \Drupal\Component\Utility\EnvironmentMemory::checkTotal().
+   * @param int|float|string $custom_memory_limit
+   *   The custom memory limit.
+   * @param bool $expected
+   *   The expected return value from
+   *   \Drupal\Component\Utility\EnvironmentMemory::checkTotal().
+   */
+  public function testCheckTotal($required, $custom_memory_limit, bool $expected): void {
+    $memory = $this->getMockBuilder(EnvironmentMemory::class)
+      ->disableOriginalConstructor()
+      ->setMethods(['getTotal'])
+      ->getMock();
+    $memory->expects($this->any())
+      ->method('getTotal')
+      ->will($this->returnValue((int) Bytes::toNumber($custom_memory_limit)));
+    $this->assertSame($expected, $memory->checkTotal($required));
+  }
+
+  /**
+   * Provides data for ::testCheckTotal().
+   *
+   * @return array
+   *   An array of arrays, each containing the arguments for
+   *   required and memory_limit, and the expected return value.
+   */
+  public function providerTestCheckTotal(): array {
+    return [
+      'Unspecified memory limit' => [
+        '30MB', NULL, TRUE,
+      ],
+      'Unlimited memory' => [
+        '80TB', EnvironmentMemory::UNLIMITED, TRUE,
+      ],
+      'Exceed a memory limit' => [
+        '30MB', '16MB', FALSE,
+      ],
+      'Available = required' => [
+        '30MB', '30MB', TRUE,
+      ],
+    ];
+  }
+
+  /**
+   * Test available memory based on current process memory usage.
+   *
+   * @covers ::checkAvailable
+   * @covers ::getUsed
+   */
+  public function testCheckAvailableCurrent(): void {
+    $memory_limit = ini_get('memory_limit');
+    $memory_limit = (!$memory_limit || $memory_limit == -1) ? EnvironmentMemory::UNLIMITED : (int) Bytes::toNumber($memory_limit);
+    if ($memory_limit === EnvironmentMemory::UNLIMITED) {
+      $this->markTestSkipped('No limit set for PHP memory, skipping.');
+    }
+    $memory = new EnvironmentMemory();
+    $free_memory = $memory_limit - memory_get_usage(TRUE);
+    $this->assertTrue($memory->checkAvailable($free_memory - Bytes::toNumber('4k')));
+    $this->assertFalse($memory->checkAvailable($free_memory + Bytes::toNumber('4k')));
+  }
+
+  /**
+   * Test available memory based on simulated memory usage.
+   *
+   * @covers ::checkAvailable
+   *
+   * @dataProvider providerTestCheckAvailable
+   *
+   * @param int|float|string $custom_memory_limit
+   *   A custom memory limit.
+   * @param int|float|string $used_memory
+   *   A mocked value for used memory.
+   * @param int|float|string $required
+   *   The required memory argument for
+   *   \Drupal\Component\Utility\EnvironmentMemory::checkAvailable().
+   * @param bool $expected
+   *   The expected return value from
+   *   \Drupal\Component\Utility\EnvironmentMemory::checkAvailable().
+   */
+  public function testCheckAvailable($custom_memory_limit, $used_memory, $required, bool $expected) {
+    $memory = $this->getMockBuilder(EnvironmentMemory::class)
+      ->disableOriginalConstructor()
+      ->setMethods(['getTotal', 'getUsed'])
+      ->getMock();
+    $memory->expects($this->any())
+      ->method('getTotal')
+      ->will($this->returnValue((int) Bytes::toNumber($custom_memory_limit)));
+    $memory->expects($this->any())
+      ->method('getUsed')
+      ->will($this->returnValue((int) Bytes::toNumber($used_memory)));
+
+    $this->assertSame($memory->getTotal() - $memory->getUsed(), $memory->getFree());
+    if ($expected) {
+      $this->assertLessThanOrEqual($memory->getFree(), (int) Bytes::toNumber($required));
+    }
+    else {
+      $this->assertGreaterThan($memory->getFree(), (int) Bytes::toNumber($required));
+    }
+    $this->assertSame($expected, $memory->checkAvailable($required));
+  }
+
+  /**
+   * Provides data for ::testCheckAvailable().
+   *
+   * @return array[]
+   *   An array of arrays, each containing the arguments for
+   *   memory_limit, used_memory, required memory and the expected
+   *   return value.
+   */
+  public function providerTestCheckAvailable(): array {
+    return [
+      '30MB should be available with limit of 60MB and usage of 10MB' => [
+        '60MB', '10MB', '30MB', TRUE,
+      ],
+      'Limit = required + used' => [
+        '40MB', '30MB', '10MB', TRUE,
+      ],
+      'Exceed memory limit' => [
+        '20MB', '10MB', '30MB', FALSE,
+      ],
+      'Exceed memory limit by 1 byte' => [
+        '20MB', '20MB', '1', FALSE,
+      ],
+    ];
+  }
+
+}
diff --git a/core/tests/Drupal/Tests/Component/Utility/EnvironmentTest.php b/core/tests/Drupal/Tests/Component/Utility/EnvironmentTest.php
index 5d484b2903..59d60c6b74 100644
--- a/core/tests/Drupal/Tests/Component/Utility/EnvironmentTest.php
+++ b/core/tests/Drupal/Tests/Component/Utility/EnvironmentTest.php
@@ -4,6 +4,7 @@
 
 use Drupal\Component\Utility\Environment;
 use PHPUnit\Framework\TestCase;
+use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;
 
 /**
  * Test PHP Environment helper methods.
@@ -14,9 +15,12 @@
  */
 class EnvironmentTest extends TestCase {
 
+  use ExpectDeprecationTrait;
+
   /**
    * Tests \Drupal\Component\Utility\Environment::checkMemoryLimit().
    *
+   * @group legacy
    * @dataProvider providerTestCheckMemoryLimit
    * @covers ::checkMemoryLimit
    *
@@ -31,6 +35,11 @@ class EnvironmentTest extends TestCase {
    *   \Drupal\Component\Utility\Environment::checkMemoryLimit().
    */
   public function testCheckMemoryLimit($required, $custom_memory_limit, $expected) {
+    $this->expectDeprecation('Drupal\Component\Utility\Environment::checkMemoryLimit is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Use \Drupal\Component\Utility\EnvironmentMemory or the \'php.environment.memory\' service instead, and its methods. See https://www.drupal.org/node/3166797');
+    if ($custom_memory_limit !== NULL) {
+      $this->expectDeprecation('Passing a $memory_limit to Drupal\Component\Utility\Environment::checkMemoryLimit is deprecated in drupal:9.1.0 and the method is removed from drupal:10.0.0. Use \Drupal\Component\Utility\EnvironmentMemory or the \'php.environment.memory\' service instead, and its methods. See https://www.drupal.org/node/3166797');
+      $this->expectDeprecation('Drupal\Component\Utility\EnvironmentMemory::setLimit is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. There is no replacement. See https://www.drupal.org/node/3166797');
+    }
     $actual = Environment::checkMemoryLimit($required, $custom_memory_limit);
     $this->assertEquals($expected, $actual);
   }
