diff --git a/core/modules/aggregator/tests/src/Functional/AggregatorAdminTest.php b/core/modules/aggregator/tests/src/Functional/AggregatorAdminTest.php
index aa9b2973..74d2654a 100644
--- a/core/modules/aggregator/tests/src/Functional/AggregatorAdminTest.php
+++ b/core/modules/aggregator/tests/src/Functional/AggregatorAdminTest.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\Tests\aggregator\Functional;
 
-use Drupal\Component\Render\FormattableMarkup;
-
 /**
  * Tests aggregator admin pages.
  *
@@ -41,8 +39,9 @@ public function testSettingsPage() {
     $this->drupalPostForm('admin/config/services/aggregator/settings', $edit, t('Save configuration'));
     $this->assertText(t('The configuration options have been saved.'));
 
+    // Check that settings have the correct default value.
     foreach ($edit as $name => $value) {
-      $this->assertFieldByName($name, $value, new FormattableMarkup('"@name" has correct default value.', ['@name' => $name]));
+      $this->assertSession()->fieldValueEquals($name, $value);
     }
 
     // Check for our test processor settings form.
@@ -53,7 +52,7 @@ public function testSettingsPage() {
     ];
     $this->drupalPostForm('admin/config/services/aggregator/settings', $edit, t('Save configuration'));
     $this->assertText(t('The configuration options have been saved.'));
-    $this->assertFieldByName('dummy_length', 100, '"dummy_length" has correct default value.');
+    $this->assertSession()->fieldValueEquals('dummy_length', 100);
 
     // Make sure settings form is still accessible even after uninstalling a module
     // that provides the selected plugins.
diff --git a/core/modules/block/tests/src/Functional/BlockUiTest.php b/core/modules/block/tests/src/Functional/BlockUiTest.php
index f9915c64..f396a306 100644
--- a/core/modules/block/tests/src/Functional/BlockUiTest.php
+++ b/core/modules/block/tests/src/Functional/BlockUiTest.php
@@ -277,22 +277,24 @@ public function testContextAwareBlocks() {
    * Tests that the BlockForm populates machine name correctly.
    */
   public function testMachineNameSuggestion() {
+    // Check the form uses the raw machine name suggestion when no instance
+    // already exists.
     $url = 'admin/structure/block/add/test_block_instantiation/classy';
     $this->drupalGet($url);
-    $this->assertFieldByName('id', 'displaymessage', 'Block form uses raw machine name suggestion when no instance already exists.');
+    $this->assertSession()->fieldValueEquals('id', 'displaymessage');
     $edit = ['region' => 'content'];
     $this->drupalPostForm($url, $edit, 'Save block');
     $this->assertText('The block configuration has been saved.');
 
     // Now, check to make sure the form starts by autoincrementing correctly.
     $this->drupalGet($url);
-    $this->assertFieldByName('id', 'displaymessage_2', 'Block form appends _2 to plugin-suggested machine name when an instance already exists.');
+    $this->assertSession()->fieldValueEquals('id', 'displaymessage_2');
     $this->drupalPostForm($url, $edit, 'Save block');
     $this->assertText('The block configuration has been saved.');
 
     // And verify that it continues working beyond just the first two.
     $this->drupalGet($url);
-    $this->assertFieldByName('id', 'displaymessage_3', 'Block form appends _3 to plugin-suggested machine name when two instances already exist.');
+    $this->assertSession()->fieldValueEquals('id', 'displaymessage_3');
   }
 
   /**
diff --git a/core/modules/block_content/tests/src/Functional/BlockContentListViewsTest.php b/core/modules/block_content/tests/src/Functional/BlockContentListViewsTest.php
index af00942a..49fbaf4a 100644
--- a/core/modules/block_content/tests/src/Functional/BlockContentListViewsTest.php
+++ b/core/modules/block_content/tests/src/Functional/BlockContentListViewsTest.php
@@ -44,8 +44,8 @@ public function testListing() {
     $this->assertSession()->titleEquals('Custom block library | Drupal');
 
     // Test for the exposed filters.
-    $this->assertFieldByName('info');
-    $this->assertFieldByName('type');
+    $this->assertSession()->fieldExists('info');
+    $this->assertSession()->fieldExists('type');
 
     // Test for the table.
     $element = $this->xpath('//div[@class="layout-content"]//table');
diff --git a/core/modules/block_content/tests/src/Functional/PageEditTest.php b/core/modules/block_content/tests/src/Functional/PageEditTest.php
index e911e42e..9ef21f95 100644
--- a/core/modules/block_content/tests/src/Functional/PageEditTest.php
+++ b/core/modules/block_content/tests/src/Functional/PageEditTest.php
@@ -44,8 +44,8 @@ public function testPageEdit() {
 
     // Load the edit page.
     $this->drupalGet('block/' . $block->id());
-    $this->assertFieldByName($title_key, $edit[$title_key], 'Title field displayed.');
-    $this->assertFieldByName($body_key, $edit[$body_key], 'Body field displayed.');
+    $this->assertSession()->fieldValueEquals($title_key, $edit[$title_key]);
+    $this->assertSession()->fieldValueEquals($body_key, $edit[$body_key]);
 
     // Edit the content of the block.
     $edit = [];
diff --git a/core/modules/ckeditor/tests/src/Functional/CKEditorAdminTest.php b/core/modules/ckeditor/tests/src/Functional/CKEditorAdminTest.php
index 9344ab97..4f357180 100644
--- a/core/modules/ckeditor/tests/src/Functional/CKEditorAdminTest.php
+++ b/core/modules/ckeditor/tests/src/Functional/CKEditorAdminTest.php
@@ -136,7 +136,7 @@ public function testExistingFormat() {
     // Ensure the toolbar buttons configuration value is initialized to the
     // expected default value.
     $expected_buttons_value = json_encode($expected_default_settings['toolbar']['rows']);
-    $this->assertFieldByName('editor[settings][toolbar][button_groups]', $expected_buttons_value);
+    $this->assertSession()->fieldValueEquals('editor[settings][toolbar][button_groups]', $expected_buttons_value);
 
     // Ensure the styles textarea exists and is initialized empty.
     $styles_textarea = $this->xpath('//textarea[@name="editor[settings][plugins][stylescombo][styles]"]');
@@ -275,7 +275,7 @@ public function testNewFormat() {
     $ckeditor = $this->container->get('plugin.manager.editor')->createInstance('ckeditor');
     $default_settings = $ckeditor->getDefaultSettings();
     $expected_buttons_value = json_encode($default_settings['toolbar']['rows']);
-    $this->assertFieldByName('editor[settings][toolbar][button_groups]', $expected_buttons_value);
+    $this->assertSession()->fieldValueEquals('editor[settings][toolbar][button_groups]', $expected_buttons_value);
 
     // Regression test for https://www.drupal.org/node/2606460.
     $settings = $this->getDrupalSettings();
diff --git a/core/modules/comment/tests/src/Functional/CommentAnonymousTest.php b/core/modules/comment/tests/src/Functional/CommentAnonymousTest.php
index 8b1a7e46..b0168e28 100644
--- a/core/modules/comment/tests/src/Functional/CommentAnonymousTest.php
+++ b/core/modules/comment/tests/src/Functional/CommentAnonymousTest.php
@@ -138,7 +138,8 @@ public function testAnonymous() {
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('comment/' . $anonymous_comment3->id() . '/edit');
     $this->assertRaw($author_name, "The anonymous user's name is correct when editing the comment.");
-    $this->assertFieldByName('uid', '', 'The author field is empty (i.e. anonymous) when editing the comment.');
+    // Check the author field is empty (i.e. anonymous) when editing the comment.
+    $this->assertSession()->fieldValueEquals('uid', '');
     $this->assertRaw($author_mail, "The anonymous user's email address is correct when editing the comment.");
 
     // Unpublish comment.
@@ -202,8 +203,8 @@ public function testAnonymous() {
     $this->drupalGet('node/' . $this->node->id());
     // Verify that comments were not displayed.
     $this->assertSession()->responseNotMatches('@<h2[^>]*>Comments</h2>@');
-    $this->assertFieldByName('subject[0][value]', '', 'Subject field found.');
-    $this->assertFieldByName('comment_body[0][value]', '', 'Comment field found.');
+    $this->assertSession()->fieldValueEquals('subject[0][value]', '');
+    $this->assertSession()->fieldValueEquals('comment_body[0][value]', '');
 
     $this->drupalGet('comment/reply/node/' . $this->node->id() . '/comment/' . $anonymous_comment2->id());
     $this->assertSession()->statusCodeEquals(403);
diff --git a/core/modules/comment/tests/src/Functional/CommentNonNodeTest.php b/core/modules/comment/tests/src/Functional/CommentNonNodeTest.php
index f0fbe3bd..6a931652 100644
--- a/core/modules/comment/tests/src/Functional/CommentNonNodeTest.php
+++ b/core/modules/comment/tests/src/Functional/CommentNonNodeTest.php
@@ -140,7 +140,7 @@ public function postComment(EntityInterface $entity, $comment, $subject = '', $c
       $edit['subject[0][value]'] = $subject;
     }
     else {
-      $this->assertNoFieldByName('subject[0][value]', '', 'Subject field not found.');
+      $this->assertSession()->fieldValueNotEquals('subject[0][value]', '');
     }
 
     if ($contact !== NULL && is_array($contact)) {
@@ -149,19 +149,19 @@ public function postComment(EntityInterface $entity, $comment, $subject = '', $c
     switch ($preview_mode) {
       case DRUPAL_REQUIRED:
         // Preview required so no save button should be found.
-        $this->assertNoFieldByName('op', t('Save'), 'Save button not found.');
+        $this->assertSession()->buttonNotExists(t('Save'));
         $this->drupalPostForm(NULL, $edit, t('Preview'));
         // Don't break here so that we can test post-preview field presence and
         // function below.
       case DRUPAL_OPTIONAL:
-        $this->assertFieldByName('op', t('Preview'), 'Preview button found.');
-        $this->assertFieldByName('op', t('Save'), 'Save button found.');
+        $this->assertSession()->buttonExists(t('Preview'));
+        $this->assertSession()->buttonExists(t('Save'));
         $this->drupalPostForm(NULL, $edit, t('Save'));
         break;
 
       case DRUPAL_DISABLED:
-        $this->assertNoFieldByName('op', t('Preview'), 'Preview button not found.');
-        $this->assertFieldByName('op', t('Save'), 'Save button found.');
+        $this->assertSession()->buttonNotExists(t('Preview'));
+        $this->assertSession()->buttonExists(t('Save'));
         $this->drupalPostForm(NULL, $edit, t('Save'));
         break;
     }
@@ -361,8 +361,8 @@ public function testCommentFunctionality() {
     // Attempt to view test entity comment form while disallowed.
     $this->drupalGet('comment/reply/entity_test/' . $this->entity->id() . '/comment');
     $this->assertSession()->statusCodeEquals(403);
-    $this->assertNoFieldByName('subject[0][value]', '', 'Subject field not found.');
-    $this->assertNoFieldByName('comment_body[0][value]', '', 'Comment field not found.');
+    $this->assertSession()->fieldNotExists('subject[0][value]');
+    $this->assertSession()->fieldNotExists('comment_body[0][value]');
 
     user_role_change_permissions(RoleInterface::ANONYMOUS_ID, [
       'access comments' => TRUE,
@@ -375,8 +375,8 @@ public function testCommentFunctionality() {
     $this->assertSession()->responseMatches('@<h2[^>]*>Comments</h2>@');
     $this->assertSession()->linkExists('Log in', 0, 'Link to login was found.');
     $this->assertSession()->linkExists('register', 0, 'Link to register was found.');
-    $this->assertNoFieldByName('subject[0][value]', '', 'Subject field not found.');
-    $this->assertNoFieldByName('comment_body[0][value]', '', 'Comment field not found.');
+    $this->assertSession()->fieldNotExists('subject[0][value]');
+    $this->assertSession()->fieldNotExists('comment_body[0][value]');
 
     // Test the combination of anonymous users being able to post, but not view
     // comments, to ensure that access to post comments doesn't grant access to
@@ -390,8 +390,8 @@ public function testCommentFunctionality() {
     $this->drupalGet('entity_test/' . $this->entity->id());
     // Verify that comments were not displayed.
     $this->assertSession()->responseNotMatches('@<h2[^>]*>Comments</h2>@');
-    $this->assertFieldByName('subject[0][value]', '', 'Subject field found.');
-    $this->assertFieldByName('comment_body[0][value]', '', 'Comment field found.');
+    $this->assertSession()->fieldValueEquals('subject[0][value]', '');
+    $this->assertSession()->fieldValueEquals('comment_body[0][value]', '');
 
     $this->drupalGet('comment/reply/entity_test/' . $this->entity->id() . '/comment/' . $comment1->id());
     $this->assertSession()->statusCodeEquals(403);
@@ -419,7 +419,7 @@ public function testCommentFunctionality() {
     $this->assertSession()->checkboxNotChecked('edit-default-value-input-comment-0-status-0');
     $this->assertSession()->checkboxChecked('edit-default-value-input-comment-0-status-1');
     $this->assertSession()->checkboxNotChecked('edit-default-value-input-comment-0-status-2');
-    $this->assertFieldByName('settings[anonymous]', CommentInterface::ANONYMOUS_MAY_CONTACT);
+    $this->assertSession()->fieldValueEquals('settings[anonymous]', CommentInterface::ANONYMOUS_MAY_CONTACT);
 
     // Add a new comment-type.
     $bundle = CommentType::create([
@@ -457,8 +457,8 @@ public function testCommentFunctionality() {
 
     // @todo Check proper url and form https://www.drupal.org/node/2458323
     $this->drupalGet('comment/reply/entity_test/comment/' . $new_entity->id());
-    $this->assertNoFieldByName('subject[0][value]', '', 'Subject field found.');
-    $this->assertNoFieldByName('comment_body[0][value]', '', 'Comment field found.');
+    $this->assertSession()->fieldNotExists('subject[0][value]');
+    $this->assertSession()->fieldNotExists('comment_body[0][value]');
 
     // Test removal of comment_body field.
     $limited_user = $this->drupalCreateUser([
@@ -471,10 +471,10 @@ public function testCommentFunctionality() {
     $this->drupalLogin($limited_user);
 
     $this->drupalGet('comment/reply/entity_test/' . $this->entity->id() . '/comment');
-    $this->assertFieldByName('comment_body[0][value]', '', 'Comment body field found.');
+    $this->assertSession()->fieldValueEquals('comment_body[0][value]', '');
     $this->fieldUIDeleteField('admin/structure/comment/manage/comment', 'comment.comment.comment_body', 'Comment', 'Comment settings');
     $this->drupalGet('comment/reply/entity_test/' . $this->entity->id() . '/comment');
-    $this->assertNoFieldByName('comment_body[0][value]', '', 'Comment body field not found.');
+    $this->assertSession()->fieldNotExists('comment_body[0][value]');
     // Set subject field to autogenerate it.
     $edit = ['subject[0][value]' => ''];
     $this->drupalPostForm(NULL, $edit, t('Save'));
diff --git a/core/modules/comment/tests/src/Functional/CommentPreviewTest.php b/core/modules/comment/tests/src/Functional/CommentPreviewTest.php
index 5201e2df..ffdcd3d5 100644
--- a/core/modules/comment/tests/src/Functional/CommentPreviewTest.php
+++ b/core/modules/comment/tests/src/Functional/CommentPreviewTest.php
@@ -72,8 +72,8 @@ public function testCommentPreview() {
     $this->assertText($edit['comment_body[0][value]'], 'Comment displayed.');
 
     // Check that the title and body fields are displayed with the correct values.
-    $this->assertFieldByName('subject[0][value]', $edit['subject[0][value]'], 'Subject field displayed.');
-    $this->assertFieldByName('comment_body[0][value]', $edit['comment_body[0][value]'], 'Comment field displayed.');
+    $this->assertSession()->fieldValueEquals('subject[0][value]', $edit['subject[0][value]']);
+    $this->assertSession()->fieldValueEquals('comment_body[0][value]', $edit['comment_body[0][value]']);
 
     // Check that the user picture is displayed.
     $this->assertFieldByXPath("//article[contains(@class, 'preview')]//div[contains(@class, 'user-picture')]//img", NULL, 'User picture displayed.');
@@ -106,8 +106,8 @@ public function testCommentPreviewDuplicateSubmission() {
     $this->assertText($edit['comment_body[0][value]'], 'Comment displayed.');
 
     // Check that the title and body fields are displayed with the correct values.
-    $this->assertFieldByName('subject[0][value]', $edit['subject[0][value]'], 'Subject field displayed.');
-    $this->assertFieldByName('comment_body[0][value]', $edit['comment_body[0][value]'], 'Comment field displayed.');
+    $this->assertSession()->fieldValueEquals('subject[0][value]', $edit['subject[0][value]']);
+    $this->assertSession()->fieldValueEquals('comment_body[0][value]', $edit['comment_body[0][value]']);
 
     // Store the content of this page.
     $this->drupalPostForm(NULL, [], 'Save');
@@ -162,11 +162,11 @@ public function testCommentEditPreviewSave() {
     $this->assertText($expected_text_date, 'Date displayed.');
 
     // Check that the subject, comment, author and date fields are displayed with the correct values.
-    $this->assertFieldByName('subject[0][value]', $edit['subject[0][value]'], 'Subject field displayed.');
-    $this->assertFieldByName('comment_body[0][value]', $edit['comment_body[0][value]'], 'Comment field displayed.');
-    $this->assertFieldByName('uid', $edit['uid'], 'Author field displayed.');
-    $this->assertFieldByName('date[date]', $edit['date[date]'], 'Date field displayed.');
-    $this->assertFieldByName('date[time]', $edit['date[time]'], 'Time field displayed.');
+    $this->assertSession()->fieldValueEquals('subject[0][value]', $edit['subject[0][value]']);
+    $this->assertSession()->fieldValueEquals('comment_body[0][value]', $edit['comment_body[0][value]']);
+    $this->assertSession()->fieldValueEquals('uid', $edit['uid']);
+    $this->assertSession()->fieldValueEquals('date[date]', $edit['date[date]']);
+    $this->assertSession()->fieldValueEquals('date[time]', $edit['date[time]']);
 
     // Check that saving a comment produces a success message.
     $this->drupalPostForm('comment/' . $comment->id() . '/edit', $edit, t('Save'));
@@ -174,11 +174,11 @@ public function testCommentEditPreviewSave() {
 
     // Check that the comment fields are correct after loading the saved comment.
     $this->drupalGet('comment/' . $comment->id() . '/edit');
-    $this->assertFieldByName('subject[0][value]', $edit['subject[0][value]'], 'Subject field displayed.');
-    $this->assertFieldByName('comment_body[0][value]', $edit['comment_body[0][value]'], 'Comment field displayed.');
-    $this->assertFieldByName('uid', $edit['uid'], 'Author field displayed.');
-    $this->assertFieldByName('date[date]', $expected_form_date, 'Date field displayed.');
-    $this->assertFieldByName('date[time]', $expected_form_time, 'Time field displayed.');
+    $this->assertSession()->fieldValueEquals('subject[0][value]', $edit['subject[0][value]']);
+    $this->assertSession()->fieldValueEquals('comment_body[0][value]', $edit['comment_body[0][value]']);
+    $this->assertSession()->fieldValueEquals('uid', $edit['uid']);
+    $this->assertSession()->fieldValueEquals('date[date]', $expected_form_date);
+    $this->assertSession()->fieldValueEquals('date[time]', $expected_form_time);
 
     // Submit the form using the displayed values.
     $displayed = [];
diff --git a/core/modules/comment/tests/src/Functional/CommentTestBase.php b/core/modules/comment/tests/src/Functional/CommentTestBase.php
index abdae813..33b43718 100644
--- a/core/modules/comment/tests/src/Functional/CommentTestBase.php
+++ b/core/modules/comment/tests/src/Functional/CommentTestBase.php
@@ -139,7 +139,7 @@ public function postComment($entity, $comment, $subject = '', $contact = NULL, $
       $edit['subject[0][value]'] = $subject;
     }
     else {
-      $this->assertNoFieldByName('subject[0][value]', '', 'Subject field not found.');
+      $this->assertSession()->fieldNotExists('subject[0][value]');
     }
 
     if ($contact !== NULL && is_array($contact)) {
@@ -148,19 +148,19 @@ public function postComment($entity, $comment, $subject = '', $contact = NULL, $
     switch ($preview_mode) {
       case DRUPAL_REQUIRED:
         // Preview required so no save button should be found.
-        $this->assertNoFieldByName('op', t('Save'), 'Save button not found.');
+        $this->assertSession()->buttonNotExists(t('Save'));
         $this->drupalPostForm(NULL, $edit, t('Preview'));
         // Don't break here so that we can test post-preview field presence and
         // function below.
       case DRUPAL_OPTIONAL:
-        $this->assertFieldByName('op', t('Preview'), 'Preview button found.');
-        $this->assertFieldByName('op', t('Save'), 'Save button found.');
+        $this->assertSession()->buttonExists(t('Preview'));
+        $this->assertSession()->buttonExists(t('Save'));
         $this->drupalPostForm(NULL, $edit, t('Save'));
         break;
 
       case DRUPAL_DISABLED:
-        $this->assertNoFieldByName('op', t('Preview'), 'Preview button not found.');
-        $this->assertFieldByName('op', t('Save'), 'Save button found.');
+        $this->assertSession()->buttonNotExists(t('Preview'));
+        $this->assertSession()->buttonExists(t('Save'));
         $this->drupalPostForm(NULL, $edit, t('Save'));
         break;
     }
diff --git a/core/modules/config/tests/src/Functional/ConfigEntityTest.php b/core/modules/config/tests/src/Functional/ConfigEntityTest.php
index d36fdeb2..520f0617 100644
--- a/core/modules/config/tests/src/Functional/ConfigEntityTest.php
+++ b/core/modules/config/tests/src/Functional/ConfigEntityTest.php
@@ -328,12 +328,12 @@ public function testCRUDUI() {
       'size' => 'custom',
     ];
 
-    $this->assertFieldByName('size');
-    $this->assertNoFieldByName('size_value');
+    $this->assertSession()->fieldExists('size');
+    $this->assertSession()->fieldNotExists('size_value');
 
     $this->drupalPostForm(NULL, $edit, 'Change size');
-    $this->assertFieldByName('size');
-    $this->assertFieldByName('size_value');
+    $this->assertSession()->fieldExists('size');
+    $this->assertSession()->fieldExists('size_value');
 
     // Submit the form with the regular 'Save' button and check that the entity
     // values are correct.
diff --git a/core/modules/config/tests/src/Functional/ConfigExportImportUITest.php b/core/modules/config/tests/src/Functional/ConfigExportImportUITest.php
index b2f19e57..d6b40e51 100644
--- a/core/modules/config/tests/src/Functional/ConfigExportImportUITest.php
+++ b/core/modules/config/tests/src/Functional/ConfigExportImportUITest.php
@@ -136,7 +136,7 @@ public function testExportImport() {
       ->save();
 
     $this->drupalGet('node/add/' . $this->contentType->id());
-    $this->assertFieldByName("{$this->fieldName}[0][value]", '', 'Widget is displayed');
+    $this->assertSession()->fieldValueEquals("{$this->fieldName}[0][value]", '');
 
     // Export the configuration.
     $this->drupalPostForm('admin/config/development/configuration/full/export', [], 'Export');
@@ -161,7 +161,7 @@ public function testExportImport() {
       }
     }
     $this->drupalGet('node/add/' . $this->contentType->id());
-    $this->assertNoFieldByName("{$this->fieldName}[0][value]", '', 'Widget is not displayed');
+    $this->assertSession()->fieldNotExists("{$this->fieldName}[0][value]");
 
     // Import the configuration.
     $filename = 'temporary://' . $this->randomMachineName();
@@ -180,7 +180,7 @@ public function testExportImport() {
     $this->assertEquals($this->newSlogan, $this->config('system.site')->get('slogan'));
 
     $this->drupalGet('node/add');
-    $this->assertFieldByName("{$this->fieldName}[0][value]", '', 'Widget is displayed');
+    $this->assertSession()->fieldValueEquals("{$this->fieldName}[0][value]", '');
 
     $this->config('system.site')
       ->set('slogan', $this->originalSlogan)
diff --git a/core/modules/config/tests/src/Functional/LanguageNegotiationFormOverrideTest.php b/core/modules/config/tests/src/Functional/LanguageNegotiationFormOverrideTest.php
index f47510fe..c1d98ae7 100644
--- a/core/modules/config/tests/src/Functional/LanguageNegotiationFormOverrideTest.php
+++ b/core/modules/config/tests/src/Functional/LanguageNegotiationFormOverrideTest.php
@@ -47,7 +47,7 @@ public function testFormWithOverride() {
     $this->assertText('Path prefix configuration', 'Language-negotiation form found for English.');
 
     // The English override should not be found.
-    $this->assertNoFieldByName('prefix[en]', $overridden_value_en, 'Language-negotiation config override not found in English.');
+    $this->assertSession()->fieldValueNotEquals('prefix[en]', $overridden_value_en);
 
     // Now check the Spanish version of the page for the same thing.
     $this->drupalGet($overridden_value_es . '/admin/config/regional/language/detection/url');
@@ -56,7 +56,7 @@ public function testFormWithOverride() {
     $this->assertText('Path prefix configuration', 'Language-negotiation form found for Spanish using the overridden prefix.');
 
     // The Spanish override should not be found.
-    $this->assertNoFieldByName('prefix[es]', $overridden_value_es, 'Language-negotiation config override not found in Spanish.');
+    $this->assertSession()->fieldValueNotEquals('prefix[es]', $overridden_value_es);
 
   }
 
diff --git a/core/modules/config_translation/tests/src/Functional/ConfigTranslationUiTest.php b/core/modules/config_translation/tests/src/Functional/ConfigTranslationUiTest.php
index 26511c5e..11bffece 100644
--- a/core/modules/config_translation/tests/src/Functional/ConfigTranslationUiTest.php
+++ b/core/modules/config_translation/tests/src/Functional/ConfigTranslationUiTest.php
@@ -180,8 +180,8 @@ public function testSiteInformationTranslationUi() {
 
     // Check translation saved proper.
     $this->drupalGet("$translation_base_url/fr/edit");
-    $this->assertFieldByName('translation[config_names][system.site][name]', $fr_site_name);
-    $this->assertFieldByName('translation[config_names][system.site][slogan]', $fr_site_slogan);
+    $this->assertSession()->fieldValueEquals('translation[config_names][system.site][name]', $fr_site_name);
+    $this->assertSession()->fieldValueEquals('translation[config_names][system.site][slogan]', $fr_site_slogan);
 
     // Place branding block with site name and slogan into header region.
     $this->drupalPlaceBlock('system_branding_block', ['region' => 'header']);
@@ -390,7 +390,7 @@ public function testContactConfigEntityTranslation() {
       $langcode_prefixes = array_merge([''], $this->langcodes);
       foreach ($langcode_prefixes as $langcode_prefix) {
         $this->drupalGet(ltrim("$langcode_prefix/$translation_base_url/$langcode/edit", '/'));
-        $this->assertFieldByName('translation[config_names][contact.form.feedback][label]', 'Website feedback - ' . $langcode);
+        $this->assertSession()->fieldValueEquals('translation[config_names][contact.form.feedback][label]', 'Website feedback - ' . $langcode);
         $this->assertText($label);
       }
     }
@@ -628,10 +628,10 @@ public function testViewsTranslationUI() {
 
     // Check translation saved proper.
     $this->drupalGet("$translation_base_url/fr/edit");
-    $this->assertFieldByName('translation[config_names][views.view.frontpage][description]', $description . " FR");
-    $this->assertFieldByName('translation[config_names][views.view.frontpage][label]', $human_readable_name . " FR");
-    $this->assertFieldByName('translation[config_names][views.view.frontpage][display][default][display_title]', $display_settings_master . " FR");
-    $this->assertFieldByName('translation[config_names][views.view.frontpage][display][default][display_options][title]', $display_options_master . " FR");
+    $this->assertSession()->fieldValueEquals('translation[config_names][views.view.frontpage][description]', $description . " FR");
+    $this->assertSession()->fieldValueEquals('translation[config_names][views.view.frontpage][label]', $human_readable_name . " FR");
+    $this->assertSession()->fieldValueEquals('translation[config_names][views.view.frontpage][display][default][display_title]', $display_settings_master . " FR");
+    $this->assertSession()->fieldValueEquals('translation[config_names][views.view.frontpage][display][default][display_options][title]', $display_options_master . " FR");
   }
 
   /**
@@ -702,10 +702,10 @@ public function testPluralConfigStrings() {
     // Make sure original text is present on this page, in addition to 2 new
     // empty fields.
     $this->assertRaw($description);
-    $this->assertFieldByName('translation[config_names][views.view.files][display][default][display_options][fields][count][format_plural_string][0]', $field_value);
-    $this->assertFieldByName('translation[config_names][views.view.files][display][default][display_options][fields][count][format_plural_string][1]', $field_value_plural);
-    $this->assertFieldByName('translation[config_names][views.view.files][display][default][display_options][fields][count][format_plural_string][2]', '');
-    $this->assertFieldByName('translation[config_names][views.view.files][display][default][display_options][fields][count][format_plural_string][3]', '');
+    $this->assertSession()->fieldValueEquals('translation[config_names][views.view.files][display][default][display_options][fields][count][format_plural_string][0]', $field_value);
+    $this->assertSession()->fieldValueEquals('translation[config_names][views.view.files][display][default][display_options][fields][count][format_plural_string][1]', $field_value_plural);
+    $this->assertSession()->fieldValueEquals('translation[config_names][views.view.files][display][default][display_options][fields][count][format_plural_string][2]', '');
+    $this->assertSession()->fieldValueEquals('translation[config_names][views.view.files][display][default][display_options][fields][count][format_plural_string][3]', '');
 
     // Then make sure it also works.
     $edit = [
@@ -718,10 +718,10 @@ public function testPluralConfigStrings() {
 
     // Make sure the values have changed.
     $this->drupalGet($translation_url);
-    $this->assertFieldByName('translation[config_names][views.view.files][display][default][display_options][fields][count][format_plural_string][0]', "$field_value SL");
-    $this->assertFieldByName('translation[config_names][views.view.files][display][default][display_options][fields][count][format_plural_string][1]', "$field_value_plural 1 SL");
-    $this->assertFieldByName('translation[config_names][views.view.files][display][default][display_options][fields][count][format_plural_string][2]', "$field_value_plural 2 SL");
-    $this->assertFieldByName('translation[config_names][views.view.files][display][default][display_options][fields][count][format_plural_string][3]', "$field_value_plural 3 SL");
+    $this->assertSession()->fieldValueEquals('translation[config_names][views.view.files][display][default][display_options][fields][count][format_plural_string][0]', "$field_value SL");
+    $this->assertSession()->fieldValueEquals('translation[config_names][views.view.files][display][default][display_options][fields][count][format_plural_string][1]', "$field_value_plural 1 SL");
+    $this->assertSession()->fieldValueEquals('translation[config_names][views.view.files][display][default][display_options][fields][count][format_plural_string][2]', "$field_value_plural 2 SL");
+    $this->assertSession()->fieldValueEquals('translation[config_names][views.view.files][display][default][display_options][fields][count][format_plural_string][3]', "$field_value_plural 3 SL");
   }
 
   /**
@@ -969,7 +969,7 @@ public function testTextFormatTranslation() {
 
     // Assert that changing the text format is not possible, even for an
     // administrator.
-    $this->assertNoFieldByName('translation[config_names][config_translation_test.content][content][format]');
+    $this->assertSession()->fieldNotExists('translation[config_names][config_translation_test.content][content][format]');
 
     // Update translatable fields.
     $edit = [
diff --git a/core/modules/contact/tests/src/Functional/ContactSitewideTest.php b/core/modules/contact/tests/src/Functional/ContactSitewideTest.php
index a64ddc4c..6a025da8 100644
--- a/core/modules/contact/tests/src/Functional/ContactSitewideTest.php
+++ b/core/modules/contact/tests/src/Functional/ContactSitewideTest.php
@@ -289,7 +289,7 @@ public function testSiteWideContact() {
     $this->drupalGet('admin/structure/contact');
     $this->clickLink(t('Edit'));
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertFieldByName('label', $label);
+    $this->assertSession()->fieldValueEquals('label', $label);
 
     // Test field UI and field integration.
     $this->drupalGet('admin/structure/contact');
diff --git a/core/modules/content_moderation/tests/src/Functional/ModerationFormTest.php b/core/modules/content_moderation/tests/src/Functional/ModerationFormTest.php
index c6c17580..4e57a166 100644
--- a/core/modules/content_moderation/tests/src/Functional/ModerationFormTest.php
+++ b/core/modules/content_moderation/tests/src/Functional/ModerationFormTest.php
@@ -126,7 +126,7 @@ public function testModerationForm() {
 
     // Check widget default value.
     $this->drupalGet($edit_path);
-    $this->assertFieldByName('moderation_state[0][state]', 'published', 'The moderation default value is set correctly.');
+    $this->assertSession()->fieldValueEquals('moderation_state[0][state]', 'published');
 
     // Preview the content while selecting the "draft" state and when the user
     // returns to the edit form, ensure all of the available transitions are
diff --git a/core/modules/content_translation/tests/src/Functional/ContentTranslationSettingsTest.php b/core/modules/content_translation/tests/src/Functional/ContentTranslationSettingsTest.php
index 27e9cdf1..3ee7c289 100644
--- a/core/modules/content_translation/tests/src/Functional/ContentTranslationSettingsTest.php
+++ b/core/modules/content_translation/tests/src/Functional/ContentTranslationSettingsTest.php
@@ -239,7 +239,7 @@ public function testAccountLanguageSettingsUI() {
 
     // Make sure account settings can be saved.
     $this->drupalPostForm('admin/config/people/accounts', ['anonymous' => 'Save me please!'], 'Save configuration');
-    $this->assertFieldByName('anonymous', 'Save me please!', 'Anonymous name has been changed.');
+    $this->assertSession()->fieldValueEquals('anonymous', 'Save me please!');
     $this->assertText('The configuration options have been saved.');
   }
 
diff --git a/core/modules/datetime/tests/src/Functional/DateTimeFieldTest.php b/core/modules/datetime/tests/src/Functional/DateTimeFieldTest.php
index b145fc59..4ca06b54 100644
--- a/core/modules/datetime/tests/src/Functional/DateTimeFieldTest.php
+++ b/core/modules/datetime/tests/src/Functional/DateTimeFieldTest.php
@@ -54,9 +54,9 @@ public function testDateField() {
 
       // Display creation form.
       $this->drupalGet('entity_test/add');
-      $this->assertFieldByName("{$field_name}[0][value][date]", '', 'Date element found.');
+      $this->assertSession()->fieldValueEquals("{$field_name}[0][value][date]", '');
       $this->assertFieldByXPath('//*[@id="edit-' . $field_name . '-wrapper"]//label[contains(@class,"js-form-required")]', TRUE, 'Required markup found');
-      $this->assertNoFieldByName("{$field_name}[0][value][time]", '', 'Time element not found.');
+      $this->assertSession()->fieldNotExists("{$field_name}[0][value][time]");
       $this->assertFieldByXPath('//input[@aria-describedby="edit-' . $field_name . '-0-value--description"]', NULL, 'ARIA described-by found');
       $this->assertFieldByXPath('//div[@id="edit-' . $field_name . '-0-value--description"]', NULL, 'ARIA description found');
 
@@ -247,8 +247,8 @@ public function testDatetimeField() {
 
     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[0][value][date]", '', 'Date element found.');
-    $this->assertFieldByName("{$field_name}[0][value][time]", '', 'Time element found.');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value][date]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value][time]", '');
     $this->assertFieldByXPath('//fieldset[@id="edit-' . $field_name . '-0"]/legend', $field_label, 'Fieldset and label found');
     $this->assertFieldByXPath('//fieldset[@aria-describedby="edit-' . $field_name . '-0--description"]', NULL, 'ARIA described-by found');
     $this->assertFieldByXPath('//div[@id="edit-' . $field_name . '-0--description"]', NULL, 'ARIA description found');
@@ -697,7 +697,8 @@ public function testDefaultValue() {
       // Check that default value is selected in default value form.
       $this->drupalGet('admin/structure/types/manage/date_content/fields/node.date_content.' . $field_name);
       $this->assertTrue($this->assertSession()->optionExists('edit-default-value-input-default-date-type', 'now')->isSelected());
-      $this->assertFieldByName('default_value_input[default_date]', '', 'The relative default value is empty in instance settings page');
+      // Check that the relative default value is empty.
+      $this->assertSession()->fieldValueEquals('default_value_input[default_date]', '');
 
       // Check if default_date has been stored successfully.
       $config_entity = $this->config('field.field.node.date_content.' . $field_name)
@@ -735,7 +736,8 @@ public function testDefaultValue() {
       // Check that default value is selected in default value form.
       $this->drupalGet('admin/structure/types/manage/date_content/fields/node.date_content.' . $field_name);
       $this->assertTrue($this->assertSession()->optionExists('edit-default-value-input-default-date-type', 'relative')->isSelected());
-      $this->assertFieldByName('default_value_input[default_date]', '+90 days', 'The relative default value is displayed in instance settings page');
+      // Check that the relative default value is displayed.
+      $this->assertSession()->fieldValueEquals('default_value_input[default_date]', '+90 days');
 
       // Check if default_date has been stored successfully.
       $config_entity = $this->config('field.field.node.date_content.' . $field_name)
@@ -764,7 +766,8 @@ public function testDefaultValue() {
       // Check that default value is selected in default value form.
       $this->drupalGet('admin/structure/types/manage/date_content/fields/node.date_content.' . $field_name);
       $this->assertTrue($this->assertSession()->optionExists('edit-default-value-input-default-date-type', '')->isSelected());
-      $this->assertFieldByName('default_value_input[default_date]', '', 'The relative default value is empty in instance settings page');
+      // Check that the relative default value is empty.
+      $this->assertSession()->fieldValueEquals('default_value_input[default_date]', '');
 
       // Check if default_date has been stored successfully.
       $config_entity = $this->config('field.field.node.date_content.' . $field_name)
@@ -792,8 +795,8 @@ public function testInvalidField() {
 
     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[0][value][date]", '', 'Date element found.');
-    $this->assertFieldByName("{$field_name}[0][value][time]", '', 'Time element found.');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value][date]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value][time]", '');
 
     // Submit invalid dates and ensure they is not accepted.
     $date_value = '';
diff --git a/core/modules/datetime_range/tests/src/Functional/DateRangeFieldTest.php b/core/modules/datetime_range/tests/src/Functional/DateRangeFieldTest.php
index 1a6b474f..c4fc4af1 100644
--- a/core/modules/datetime_range/tests/src/Functional/DateRangeFieldTest.php
+++ b/core/modules/datetime_range/tests/src/Functional/DateRangeFieldTest.php
@@ -66,11 +66,11 @@ public function testDateRangeField() {
 
       // Display creation form.
       $this->drupalGet('entity_test/add');
-      $this->assertFieldByName("{$field_name}[0][value][date]", '', 'Start date element found.');
-      $this->assertFieldByName("{$field_name}[0][end_value][date]", '', 'End date element found.');
+      $this->assertSession()->fieldValueEquals("{$field_name}[0][value][date]", '');
+      $this->assertSession()->fieldValueEquals("{$field_name}[0][end_value][date]", '');
       $this->assertFieldByXPath('//*[@id="edit-' . $field_name . '-wrapper"]//label[contains(@class, "js-form-required")]', TRUE, 'Required markup found');
-      $this->assertNoFieldByName("{$field_name}[0][value][time]", '', 'Start time element not found.');
-      $this->assertNoFieldByName("{$field_name}[0][end_value][time]", '', 'End time element not found.');
+      $this->assertSession()->fieldNotExists("{$field_name}[0][value][time]");
+      $this->assertSession()->fieldNotExists("{$field_name}[0][end_value][time]");
       $this->assertFieldByXPath('//fieldset[@id="edit-' . $field_name . '-0"]/legend', $field_label, 'Fieldset and label found');
       $this->assertFieldByXPath('//fieldset[@aria-describedby="edit-' . $field_name . '-0--description"]', NULL, 'ARIA described-by found');
       $this->assertFieldByXPath('//div[@id="edit-' . $field_name . '-0--description"]', NULL, 'ARIA description found');
@@ -294,10 +294,10 @@ public function testDatetimeRangeField() {
 
     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[0][value][date]", '', 'Start date element found.');
-    $this->assertFieldByName("{$field_name}[0][value][time]", '', 'Start time element found.');
-    $this->assertFieldByName("{$field_name}[0][end_value][date]", '', 'End date element found.');
-    $this->assertFieldByName("{$field_name}[0][end_value][time]", '', 'End time element found.');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value][date]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value][time]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][end_value][date]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][end_value][time]", '');
     $this->assertFieldByXPath('//fieldset[@id="edit-' . $field_name . '-0"]/legend', $field_label, 'Fieldset and label found');
     $this->assertFieldByXPath('//fieldset[@aria-describedby="edit-' . $field_name . '-0--description"]', NULL, 'ARIA described-by found');
     $this->assertFieldByXPath('//div[@id="edit-' . $field_name . '-0--description"]', NULL, 'ARIA description found');
@@ -472,11 +472,11 @@ public function testAlldayRangeField() {
 
     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[0][value][date]", '', 'Start date element found.');
-    $this->assertFieldByName("{$field_name}[0][end_value][date]", '', 'End date element found.');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value][date]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][end_value][date]", '');
     $this->assertFieldByXPath('//*[@id="edit-' . $field_name . '-wrapper"]//label[contains(@class, "js-form-required")]', TRUE, 'Required markup found');
-    $this->assertNoFieldByName("{$field_name}[0][value][time]", '', 'Start time element not found.');
-    $this->assertNoFieldByName("{$field_name}[0][end_value][time]", '', 'End time element not found.');
+    $this->assertSession()->fieldNotExists("{$field_name}[0][value][time]");
+    $this->assertSession()->fieldNotExists("{$field_name}[0][end_value][time]");
     $this->assertFieldByXPath('//fieldset[@id="edit-' . $field_name . '-0"]/legend', $field_label, 'Fieldset and label found');
     $this->assertFieldByXPath('//fieldset[@aria-describedby="edit-' . $field_name . '-0--description"]', NULL, 'ARIA described-by found');
     $this->assertFieldByXPath('//div[@id="edit-' . $field_name . '-0--description"]', NULL, 'ARIA description found');
@@ -1025,9 +1025,11 @@ public function testDefaultValue() {
     // Check that default value is selected in default value form.
     $this->drupalGet('admin/structure/types/manage/date_content/fields/node.date_content.' . $field_name);
     $this->assertTrue($this->assertSession()->optionExists('edit-default-value-input-default-date-type', 'now')->isSelected());
-    $this->assertFieldByName('default_value_input[default_date]', '', 'The relative start default value is empty in instance settings page');
+    // Check that the relative start default value is empty.
+    $this->assertSession()->fieldValueEquals('default_value_input[default_date]', '');
     $this->assertTrue($this->assertSession()->optionExists('edit-default-value-input-default-end-date-type', 'now')->isSelected());
-    $this->assertFieldByName('default_value_input[default_end_date]', '', 'The relative end default value is empty in instance settings page');
+    // Check that the relative end default value is empty.
+    $this->assertSession()->fieldValueEquals('default_value_input[default_end_date]', '');
 
     // Check if default_date has been stored successfully.
     $config_entity = $this->config('field.field.node.date_content.' . $field_name)->get();
@@ -1078,9 +1080,11 @@ public function testDefaultValue() {
     // Check that default value is selected in default value form.
     $this->drupalGet('admin/structure/types/manage/date_content/fields/node.date_content.' . $field_name);
     $this->assertTrue($this->assertSession()->optionExists('edit-default-value-input-default-date-type', 'relative')->isSelected());
-    $this->assertFieldByName('default_value_input[default_date]', '+45 days', 'The relative default start value is displayed in instance settings page');
+    // Check that the relative start default value is displayed.
+    $this->assertSession()->fieldValueEquals('default_value_input[default_date]', '+45 days');
     $this->assertTrue($this->assertSession()->optionExists('edit-default-value-input-default-end-date-type', 'relative')->isSelected());
-    $this->assertFieldByName('default_value_input[default_end_date]', '+90 days', 'The relative default end value is displayed in instance settings page');
+    // Check that the relative end default value is displayed.
+    $this->assertSession()->fieldValueEquals('default_value_input[default_end_date]', '+90 days');
 
     // Check if default_date has been stored successfully.
     $config_entity = $this->config('field.field.node.date_content.' . $field_name)->get();
@@ -1111,9 +1115,11 @@ public function testDefaultValue() {
     // Check that default value is selected in default value form.
     $this->drupalGet('admin/structure/types/manage/date_content/fields/node.date_content.' . $field_name);
     $this->assertTrue($this->assertSession()->optionExists('edit-default-value-input-default-date-type', '')->isSelected());
-    $this->assertFieldByName('default_value_input[default_date]', '', 'The relative default start value is empty in instance settings page');
+    // Check that the relative start default value is empty.
+    $this->assertSession()->fieldValueEquals('default_value_input[default_date]', '');
     $this->assertTrue($this->assertSession()->optionExists('edit-default-value-input-default-end-date-type', '')->isSelected());
-    $this->assertFieldByName('default_value_input[default_end_date]', '', 'The relative default end value is empty in instance settings page');
+    // Check that the relative end default value is empty.
+    $this->assertSession()->fieldValueEquals('default_value_input[default_end_date]', '');
 
     // Check if default_date has been stored successfully.
     $config_entity = $this->config('field.field.node.date_content.' . $field_name)->get();
@@ -1144,8 +1150,8 @@ public function testDefaultValue() {
 
     // Make sure only the start value is populated on node add page.
     $this->drupalGet('node/add/date_content');
-    $this->assertFieldByName("{$field_name}[0][value][date]", $expected_date->format(DateTimeItemInterface::DATE_STORAGE_FORMAT), 'Start date element populated.');
-    $this->assertFieldByName("{$field_name}[0][end_value][date]", '', 'End date element empty.');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value][date]", $expected_date->format(DateTimeItemInterface::DATE_STORAGE_FORMAT));
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][end_value][date]", '');
 
     // Set now as default_value for end date only.
     $field_edit = [
@@ -1156,8 +1162,8 @@ public function testDefaultValue() {
 
     // Make sure only the start value is populated on node add page.
     $this->drupalGet('node/add/date_content');
-    $this->assertFieldByName("{$field_name}[0][value][date]", '', 'Start date element empty.');
-    $this->assertFieldByName("{$field_name}[0][end_value][date]", $expected_date->format(DateTimeItemInterface::DATE_STORAGE_FORMAT), 'End date element populated.');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value][date]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][end_value][date]", $expected_date->format(DateTimeItemInterface::DATE_STORAGE_FORMAT));
   }
 
   /**
@@ -1171,10 +1177,10 @@ public function testInvalidField() {
     $field_label = $this->field->label();
 
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[0][value][date]", '', 'Start date element found.');
-    $this->assertFieldByName("{$field_name}[0][value][time]", '', 'Start time element found.');
-    $this->assertFieldByName("{$field_name}[0][end_value][date]", '', 'End date element found.');
-    $this->assertFieldByName("{$field_name}[0][end_value][time]", '', 'End time element found.');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value][date]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value][time]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][end_value][date]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][end_value][time]", '');
 
     // Submit invalid start dates and ensure they is not accepted.
     $date_value = '';
diff --git a/core/modules/field/tests/src/Functional/Boolean/BooleanFieldTest.php b/core/modules/field/tests/src/Functional/Boolean/BooleanFieldTest.php
index b34504e9..06674820 100644
--- a/core/modules/field/tests/src/Functional/Boolean/BooleanFieldTest.php
+++ b/core/modules/field/tests/src/Functional/Boolean/BooleanFieldTest.php
@@ -106,7 +106,7 @@ public function testBooleanField() {
 
     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[value]", '', 'Widget found.');
+    $this->assertSession()->fieldValueEquals("{$field_name}[value]", '');
     $this->assertText($this->field->label(), 'Uses field label by default.');
     $this->assertNoRaw($on, 'Does not use the "On" label.');
 
@@ -135,7 +135,7 @@ public function testBooleanField() {
       ->save();
 
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[value]", '', 'Widget found.');
+    $this->assertSession()->fieldValueEquals("{$field_name}[value]", '');
     $this->assertRaw($on);
     $this->assertNoText($this->field->label());
 
@@ -230,7 +230,7 @@ public function testFormAccess() {
 
     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[value]");
+    $this->assertSession()->fieldExists("{$field_name}[value]");
 
     // Should be posted OK.
     $this->drupalPostForm(NULL, [], t('Save'));
@@ -242,7 +242,7 @@ public function testFormAccess() {
     \Drupal::state()->set('field.test_boolean_field_access_field', $field_name);
     $this->drupalGet('entity_test/add');
     // Field should not be there anymore.
-    $this->assertNoFieldByName("{$field_name}[value]");
+    $this->assertSession()->fieldNotExists("{$field_name}[value]");
     // Should still be able to post the form.
     $this->drupalPostForm(NULL, [], t('Save'));
     preg_match('|entity_test/manage/(\d+)|', $this->getUrl(), $match);
diff --git a/core/modules/field/tests/src/Functional/Email/EmailFieldTest.php b/core/modules/field/tests/src/Functional/Email/EmailFieldTest.php
index 11b63426..bf915a91 100644
--- a/core/modules/field/tests/src/Functional/Email/EmailFieldTest.php
+++ b/core/modules/field/tests/src/Functional/Email/EmailFieldTest.php
@@ -89,7 +89,7 @@ public function testEmailField() {
 
     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[0][value]", '', 'Widget found.');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value]", '');
     $this->assertRaw('placeholder="example@example.com"');
 
     // Submit a valid email address and ensure it is accepted.
diff --git a/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceAdminTest.php b/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceAdminTest.php
index 520c67b8..dfcce698 100644
--- a/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceAdminTest.php
+++ b/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceAdminTest.php
@@ -314,7 +314,7 @@ public function testMultipleTargetBundles() {
     $this->drupalGet($path);
 
     // Expect that there's no 'auto_create_bundle' selected.
-    $this->assertNoFieldByName('settings[handler_settings][auto_create_bundle]');
+    $this->assertSession()->fieldNotExists('settings[handler_settings][auto_create_bundle]');
 
     $edit = [
       'settings[handler_settings][target_bundles][' . $vocabularies[1]->id() . ']' => TRUE,
diff --git a/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceIntegrationTest.php b/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceIntegrationTest.php
index 4d9f55a3..910bd4e0 100644
--- a/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceIntegrationTest.php
+++ b/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceIntegrationTest.php
@@ -101,8 +101,8 @@ public function testSupportedEntityTypesAndWidgets() {
       $storage = $this->container->get('entity_type.manager')->getStorage($this->entityType);
       $entity = current($storage->loadByProperties(['name' => $entity_name]));
       $this->drupalGet($this->entityType . '/manage/' . $entity->id() . '/edit');
-      $this->assertFieldByName($this->fieldName . '[0][target_id]', $referenced_entities[0]->label() . ' (' . $referenced_entities[0]->id() . ')');
-      $this->assertFieldByName($this->fieldName . '[1][target_id]', $referenced_entities[1]->label() . ' (' . $referenced_entities[1]->id() . ')');
+      $this->assertSession()->fieldValueEquals($this->fieldName . '[0][target_id]', $referenced_entities[0]->label() . ' (' . $referenced_entities[0]->id() . ')');
+      $this->assertSession()->fieldValueEquals($this->fieldName . '[1][target_id]', $referenced_entities[1]->label() . ' (' . $referenced_entities[1]->id() . ')');
 
       $this->drupalPostForm(NULL, [], t('Save'));
       $this->assertFieldValues($entity_name, $referenced_entities);
@@ -128,7 +128,7 @@ public function testSupportedEntityTypesAndWidgets() {
       // values remain the same.
       $entity = current($storage->loadByProperties(['name' => $entity_name]));
       $this->drupalGet($this->entityType . '/manage/' . $entity->id() . '/edit');
-      $this->assertFieldByName($this->fieldName . '[target_id]', $target_id . ' (' . $referenced_entities[1]->id() . ')');
+      $this->assertSession()->fieldValueEquals($this->fieldName . '[target_id]', $target_id . ' (' . $referenced_entities[1]->id() . ')');
 
       $this->drupalPostForm(NULL, [], t('Save'));
       $this->assertFieldValues($entity_name, $referenced_entities);
diff --git a/core/modules/field/tests/src/Functional/FieldDefaultValueCallbackTest.php b/core/modules/field/tests/src/Functional/FieldDefaultValueCallbackTest.php
index b5cc9141..b99e224e 100644
--- a/core/modules/field/tests/src/Functional/FieldDefaultValueCallbackTest.php
+++ b/core/modules/field/tests/src/Functional/FieldDefaultValueCallbackTest.php
@@ -70,25 +70,25 @@ public function testDefaultValueCallbackForm() {
 
     // Check that the default field form is visible when no callback is set.
     $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.field_test');
-    $this->assertFieldByName('default_value_input[field_test][0][value]', NULL, 'The default field form is visible.');
+    $this->assertSession()->fieldValueEquals('default_value_input[field_test][0][value]', NULL);
 
     // Set a different field value, it should be on the field.
     $default_value = $this->randomString();
     $field_config->setDefaultValue([['value' => $default_value]])->save();
     $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.field_test');
-    $this->assertFieldByName('default_value_input[field_test][0][value]', $default_value, 'The default field form is visible.');
+    $this->assertSession()->fieldValueEquals('default_value_input[field_test][0][value]', $default_value);
 
     // Set a different field value to the field directly, instead of an array.
     $default_value = $this->randomString();
     $field_config->setDefaultValue($default_value)->save();
     $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.field_test');
-    $this->assertFieldByName('default_value_input[field_test][0][value]', $default_value, 'The default field form is visible.');
+    $this->assertSession()->fieldValueEquals('default_value_input[field_test][0][value]', $default_value);
 
     // Set a default value callback instead, and the default field form should
     // not be visible.
     $field_config->setDefaultValueCallback('\Drupal\field_test\FieldDefaultValueCallbackProvider::calculateDefaultValue')->save();
     $this->drupalGet('/admin/structure/types/manage/article/fields/node.article.field_test');
-    $this->assertNoFieldByName('default_value_input[field_test][0][value]', 'Calculated default value', 'The default field form is not visible when a callback is defined.');
+    $this->assertSession()->fieldNotExists('default_value_input[field_test][0][value]');
   }
 
 }
diff --git a/core/modules/field/tests/src/Functional/FormTest.php b/core/modules/field/tests/src/Functional/FormTest.php
index e0cbc002..dded7f02 100644
--- a/core/modules/field/tests/src/Functional/FormTest.php
+++ b/core/modules/field/tests/src/Functional/FormTest.php
@@ -122,7 +122,7 @@ public function testFieldFormSingle() {
     // Create token value expected for description.
     $token_description = Html::escape($this->config('system.site')->get('name')) . '_description';
     $this->assertText($token_description, 'Token replacement for description is displayed');
-    $this->assertFieldByName("{$field_name}[0][value]", '', 'Widget is displayed');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value]", '');
     // Verify that no extraneous widget is displayed.
     $this->assertSession()->fieldNotExists("{$field_name}[1][value]");
 
@@ -155,7 +155,8 @@ public function testFieldFormSingle() {
 
     // Display edit form.
     $this->drupalGet('entity_test/manage/' . $id . '/edit');
-    $this->assertFieldByName("{$field_name}[0][value]", $value, 'Widget is displayed with the correct default value');
+    // Check that the widget is displayed with the correct default value.
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value]", $value);
     // Verify that no extraneous widget is displayed.
     $this->assertSession()->fieldNotExists("{$field_name}[1][value]");
 
@@ -266,7 +267,7 @@ public function testFieldFormUnlimited() {
 
     // Display creation form -> 1 widget.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[0][value]", '', 'Widget 1 is displayed');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value]", '');
     // Verify that no extraneous widget is displayed.
     $this->assertSession()->fieldNotExists("{$field_name}[1][value]");
 
@@ -276,8 +277,8 @@ public function testFieldFormUnlimited() {
 
     // Press 'add more' button -> 2 widgets.
     $this->drupalPostForm(NULL, [], t('Add another item'));
-    $this->assertFieldByName("{$field_name}[0][value]", '', 'Widget 1 is displayed');
-    $this->assertFieldByName("{$field_name}[1][value]", '', 'New widget is displayed');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[1][value]", '');
     // Verify that no extraneous widget is displayed.
     $this->assertSession()->fieldNotExists("{$field_name}[2][value]");
     // TODO : check that non-field inputs are preserved ('title'), etc.
@@ -310,15 +311,15 @@ public function testFieldFormUnlimited() {
     // Press 'add more' button -> 4 widgets
     $this->drupalPostForm(NULL, $edit, t('Add another item'));
     for ($delta = 0; $delta <= $delta_range; $delta++) {
-      $this->assertFieldByName("{$field_name}[$delta][value]", $values[$delta], "Widget $delta is displayed and has the right value");
-      $this->assertFieldByName("{$field_name}[$delta][_weight]", $weights[$delta], "Widget $delta has the right weight");
+      $this->assertSession()->fieldValueEquals("{$field_name}[$delta][value]", $values[$delta]);
+      $this->assertSession()->fieldValueEquals("{$field_name}[$delta][_weight]", $weights[$delta]);
     }
     ksort($pattern);
     $pattern = implode('.*', array_values($pattern));
     // Verify that the widgets are displayed in the correct order.
     $this->assertSession()->responseMatches("|$pattern|s");
-    $this->assertFieldByName("{$field_name}[$delta][value]", '', "New widget is displayed");
-    $this->assertFieldByName("{$field_name}[$delta][_weight]", $delta, "New widget has the right weight");
+    $this->assertSession()->fieldValueEquals("{$field_name}[$delta][value]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[$delta][_weight]", $delta);
     // Verify that no extraneous widget is displayed.
     $this->assertSession()->fieldNotExists("{$field_name}[" . ($delta + 1) . '][value]');
 
@@ -415,8 +416,8 @@ public function testFieldFormMultivalueWithRequiredRadio() {
     $this->assertNoFieldByXpath('//div[contains(@class, "error")]', FALSE, 'No error message is displayed.');
 
     // Verify that the widget is added.
-    $this->assertFieldByName("{$field_name}[0][value]", '', 'Widget 1 is displayed');
-    $this->assertFieldByName("{$field_name}[1][value]", '', 'New widget is displayed');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value]", '');
+    $this->assertSession()->fieldValueEquals("{$field_name}[1][value]", '');
     // Verify that no extraneous widget is displayed.
     $this->assertSession()->fieldNotExists("{$field_name}[2][value]");
   }
@@ -441,7 +442,7 @@ public function testFieldFormMultipleWidget() {
 
     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName($field_name, '', 'Widget is displayed.');
+    $this->assertSession()->fieldValueEquals($field_name, '');
 
     // Create entity with three values.
     $edit = [
@@ -457,7 +458,7 @@ public function testFieldFormMultipleWidget() {
 
     // Display the form, check that the values are correctly filled in.
     $this->drupalGet('entity_test/manage/' . $id . '/edit');
-    $this->assertFieldByName($field_name, '1, 2, 3', 'Widget is displayed.');
+    $this->assertSession()->fieldValueEquals($field_name, '1, 2, 3');
 
     // Submit the form with more values than the field accepts.
     $edit = [$field_name => '1, 2, 3, 4, 5'];
@@ -534,7 +535,8 @@ public function testFieldFormAccess() {
 
     // Display creation form.
     $this->drupalGet($entity_type . '/add');
-    $this->assertNoFieldByName("{$field_name_no_access}[0][value]", '', 'Widget is not displayed if field access is denied.');
+    // Check that the widget is not displayed if field access is denied.
+    $this->assertSession()->fieldNotExists("{$field_name_no_access}[0][value]");
 
     // Create entity.
     $edit = [
@@ -619,7 +621,7 @@ public function testHiddenField() {
 
     // Display edit form.
     $this->drupalGet($entity_type . '/manage/' . $id . '/edit');
-    $this->assertFieldByName("{$field_name}[0][value]", 99, 'Widget is displayed with the correct default value');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value]", 99);
 
     // Update the entity.
     $value = mt_rand(1, 127);
diff --git a/core/modules/field/tests/src/Functional/NestedFormTest.php b/core/modules/field/tests/src/Functional/NestedFormTest.php
index cbf3e284..a7cc7522 100644
--- a/core/modules/field/tests/src/Functional/NestedFormTest.php
+++ b/core/modules/field/tests/src/Functional/NestedFormTest.php
@@ -88,8 +88,8 @@ public function testNestedFieldForm() {
 
     $entity_1 = $storage->create(['id' => 1]);
     $entity_1->enforceIsNew();
-    $entity_1->field_single->value = 0;
-    $entity_1->field_unlimited->value = 1;
+    $entity_1->field_single->value = 1;
+    $entity_1->field_unlimited->value = 2;
     $entity_1->save();
 
     $entity_2 = $storage->create(['id' => 2]);
@@ -100,10 +100,10 @@ public function testNestedFieldForm() {
 
     // Display the 'combined form'.
     $this->drupalGet('test-entity/nested/1/2');
-    $this->assertFieldByName('field_single[0][value]', 0, 'Entity 1: field_single value appears correctly is the form.');
-    $this->assertFieldByName('field_unlimited[0][value]', 1, 'Entity 1: field_unlimited value 0 appears correctly is the form.');
-    $this->assertFieldByName('entity_2[field_single][0][value]', 10, 'Entity 2: field_single value appears correctly is the form.');
-    $this->assertFieldByName('entity_2[field_unlimited][0][value]', 11, 'Entity 2: field_unlimited value 0 appears correctly is the form.');
+    $this->assertSession()->fieldValueEquals('field_single[0][value]', 1);
+    $this->assertSession()->fieldValueEquals('field_unlimited[0][value]', 2);
+    $this->assertSession()->fieldValueEquals('entity_2[field_single][0][value]', 10);
+    $this->assertSession()->fieldValueEquals('entity_2[field_unlimited][0][value]', 11);
 
     // Submit the form and check that the entities are updated accordingly.
     $edit = [
@@ -154,10 +154,10 @@ public function testNestedFieldForm() {
     // 'Add more' button in the first entity:
     $this->drupalGet('test-entity/nested/1/2');
     $this->drupalPostForm(NULL, [], 'field_unlimited_add_more');
-    $this->assertFieldByName('field_unlimited[0][value]', 3, 'Entity 1: field_unlimited value 0 appears correctly is the form.');
-    $this->assertFieldByName('field_unlimited[1][value]', 2, 'Entity 1: field_unlimited value 1 appears correctly is the form.');
-    $this->assertFieldByName('field_unlimited[2][value]', '', 'Entity 1: field_unlimited value 2 appears correctly is the form.');
-    $this->assertFieldByName('field_unlimited[3][value]', '', 'Entity 1: an empty widget was added for field_unlimited value 3.');
+    $this->assertSession()->fieldValueEquals('field_unlimited[0][value]', 3);
+    $this->assertSession()->fieldValueEquals('field_unlimited[1][value]', 2);
+    $this->assertSession()->fieldValueEquals('field_unlimited[2][value]', '');
+    $this->assertSession()->fieldValueEquals('field_unlimited[3][value]', '');
     // 'Add more' button in the first entity (changing field values):
     $edit = [
       'entity_2[field_unlimited][0][value]' => 13,
@@ -165,10 +165,10 @@ public function testNestedFieldForm() {
       'entity_2[field_unlimited][2][value]' => 15,
     ];
     $this->drupalPostForm(NULL, $edit, 'entity_2_field_unlimited_add_more');
-    $this->assertFieldByName('entity_2[field_unlimited][0][value]', 13, 'Entity 2: field_unlimited value 0 appears correctly is the form.');
-    $this->assertFieldByName('entity_2[field_unlimited][1][value]', 14, 'Entity 2: field_unlimited value 1 appears correctly is the form.');
-    $this->assertFieldByName('entity_2[field_unlimited][2][value]', 15, 'Entity 2: field_unlimited value 2 appears correctly is the form.');
-    $this->assertFieldByName('entity_2[field_unlimited][3][value]', '', 'Entity 2: an empty widget was added for field_unlimited value 3.');
+    $this->assertSession()->fieldValueEquals('entity_2[field_unlimited][0][value]', 13);
+    $this->assertSession()->fieldValueEquals('entity_2[field_unlimited][1][value]', 14);
+    $this->assertSession()->fieldValueEquals('entity_2[field_unlimited][2][value]', 15);
+    $this->assertSession()->fieldValueEquals('entity_2[field_unlimited][3][value]', '');
     // Save the form and check values are saved correctly.
     $this->drupalPostForm(NULL, [], t('Save'));
     $this->assertFieldValues($entity_1, 'field_unlimited', [3, 2]);
diff --git a/core/modules/field/tests/src/Functional/Number/NumberFieldTest.php b/core/modules/field/tests/src/Functional/Number/NumberFieldTest.php
index e4e9358c..66e82e8f 100644
--- a/core/modules/field/tests/src/Functional/Number/NumberFieldTest.php
+++ b/core/modules/field/tests/src/Functional/Number/NumberFieldTest.php
@@ -75,7 +75,7 @@ public function testNumberDecimalField() {
 
     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[0][value]", '', 'Widget is displayed');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value]", '');
     $this->assertRaw('placeholder="0.00"');
 
     // Submit a signed decimal value within the allowed precision and scale.
@@ -190,7 +190,7 @@ public function testNumberIntegerField() {
 
     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[0][value]", '', 'Widget is displayed');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value]", '');
     $this->assertRaw('placeholder="4"');
 
     // Submit a valid integer
@@ -315,7 +315,7 @@ public function testNumberFloatField() {
 
     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[0][value]", '', 'Widget is displayed');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value]", '');
     $this->assertRaw('placeholder="0.00"');
 
     // Submit a signed decimal value within the allowed precision and scale.
diff --git a/core/modules/field/tests/src/Functional/ReEnableModuleFieldTest.php b/core/modules/field/tests/src/Functional/ReEnableModuleFieldTest.php
index 4a290b6a..cf2fb1dc 100644
--- a/core/modules/field/tests/src/Functional/ReEnableModuleFieldTest.php
+++ b/core/modules/field/tests/src/Functional/ReEnableModuleFieldTest.php
@@ -83,7 +83,7 @@ public function testReEnabledField() {
 
     // Display the article node form and verify the telephone widget is present.
     $this->drupalGet('node/add/article');
-    $this->assertFieldByName("field_telephone[0][value]", '', 'Widget found.');
+    $this->assertSession()->fieldValueEquals("field_telephone[0][value]", '');
 
     // Submit an article node with a telephone field so data exist for the
     // field.
diff --git a/core/modules/field/tests/src/Functional/String/StringFieldTest.php b/core/modules/field/tests/src/Functional/String/StringFieldTest.php
index a10acd3f..8bc4a972 100644
--- a/core/modules/field/tests/src/Functional/String/StringFieldTest.php
+++ b/core/modules/field/tests/src/Functional/String/StringFieldTest.php
@@ -90,8 +90,8 @@ public function _testTextfieldWidgets($field_type, $widget_type) {
 
     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[0][value]", '', 'Widget is displayed');
-    $this->assertNoFieldByName("{$field_name}[0][format]", '1', 'Format selector is not displayed');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value]", '');
+    $this->assertSession()->fieldNotExists("{$field_name}[0][format]");
     $this->assertRaw(new FormattableMarkup('placeholder="A placeholder on @widget_type"', ['@widget_type' => $widget_type]));
 
     // Submit with some value.
diff --git a/core/modules/field/tests/src/Functional/Views/FieldUITest.php b/core/modules/field/tests/src/Functional/Views/FieldUITest.php
index 4ed44e31..28b33677 100644
--- a/core/modules/field/tests/src/Functional/Views/FieldUITest.php
+++ b/core/modules/field/tests/src/Functional/Views/FieldUITest.php
@@ -77,7 +77,7 @@ public function testHandlerUI() {
     $random_number = rand(100, 400);
     $this->drupalPostForm(NULL, ['options[settings][trim_length]' => $random_number], t('Apply'));
     $this->drupalGet($url);
-    $this->assertFieldByName('options[settings][trim_length]', $random_number, 'The formatter setting got saved.');
+    $this->assertSession()->fieldValueEquals('options[settings][trim_length]', $random_number);
 
     // Save the view and test whether the settings are saved.
     $this->drupalPostForm('admin/structure/views/view/test_view_fieldapi', [], t('Save'));
diff --git a/core/modules/field/tests/src/FunctionalJavascript/EntityReference/EntityReferenceAdminTest.php b/core/modules/field/tests/src/FunctionalJavascript/EntityReference/EntityReferenceAdminTest.php
index e9f8a552..6efc3232 100644
--- a/core/modules/field/tests/src/FunctionalJavascript/EntityReference/EntityReferenceAdminTest.php
+++ b/core/modules/field/tests/src/FunctionalJavascript/EntityReference/EntityReferenceAdminTest.php
@@ -93,7 +93,7 @@ public function testFieldAdminHandler() {
     $page->pressButton('Save and continue');
 
     // Node should be selected by default.
-    $this->assertFieldByName('settings[target_type]', 'node');
+    $this->assertSession()->fieldValueEquals('settings[target_type]', 'node');
 
     // Check that all entity types can be referenced.
     $this->assertFieldSelectOptions('settings[target_type]', array_keys(\Drupal::entityTypeManager()->getDefinitions()));
@@ -102,7 +102,7 @@ public function testFieldAdminHandler() {
     $this->drupalPostForm(NULL, [], t('Save field settings'));
 
     // The base handler should be selected by default.
-    $this->assertFieldByName('settings[handler]', 'default:node');
+    $this->assertSession()->fieldValueEquals('settings[handler]', 'default:node');
 
     // The base handler settings should be displayed.
     $entity_type_id = 'node';
@@ -115,7 +115,7 @@ public function testFieldAdminHandler() {
     // Select all bundles so that sort options are available.
     $bundles = $this->container->get('entity_type.bundle.info')->getBundleInfo($entity_type_id);
     foreach ($bundles as $bundle_name => $bundle_info) {
-      $this->assertFieldByName('settings[handler_settings][target_bundles][' . $bundle_name . ']');
+      $this->assertSession()->fieldExists('settings[handler_settings][target_bundles][' . $bundle_name . ']');
       $page->findField('settings[handler_settings][target_bundles][' . $bundle_name . ']')->setValue($bundle_name);
       $assert_session->assertWaitOnAjaxRequest();
     }
@@ -124,13 +124,13 @@ public function testFieldAdminHandler() {
 
     // Test the sort settings.
     // Option 0: no sort.
-    $this->assertFieldByName('settings[handler_settings][sort][field]', '_none');
+    $this->assertSession()->fieldValueEquals('settings[handler_settings][sort][field]', '_none');
     $sort_by = $page->findField('settings[handler_settings][sort][field]');
-    $this->assertNoFieldByName('settings[handler_settings][sort][direction]');
+    $this->assertSession()->fieldNotExists('settings[handler_settings][sort][direction]');
     // Option 1: sort by field.
     $sort_by->setValue('nid');
     $assert_session->waitForField('settings[handler_settings][sort][direction]');
-    $this->assertFieldByName('settings[handler_settings][sort][direction]', 'ASC');
+    $this->assertSession()->fieldValueEquals('settings[handler_settings][sort][direction]', 'ASC');
 
     // Test that the sort-by options are sorted.
     $labels = array_map(function (NodeElement $element) {
@@ -154,7 +154,7 @@ public function testFieldAdminHandler() {
     // Set back to no sort.
     $sort_by->setValue('_none');
     $assert_session->assertWaitOnAjaxRequest();
-    $this->assertNoFieldByName('settings[handler_settings][sort][direction]');
+    $this->assertSession()->fieldNotExists('settings[handler_settings][sort][direction]');
 
     // Third step: confirm.
     $this->drupalPostForm(NULL, [
@@ -178,7 +178,7 @@ public function testFieldAdminHandler() {
     ];
     $this->drupalPostForm($bundle_path . '/fields/' . $field_name . '/storage', $edit, t('Save field settings'));
     $this->drupalGet($bundle_path . '/fields/' . $field_name);
-    $this->assertFieldByName('settings[handler_settings][auto_create]');
+    $this->assertSession()->fieldExists('settings[handler_settings][auto_create]');
 
     // Switch the target type to 'user' and check that the settings specific to
     // its selection handler are displayed.
@@ -188,8 +188,8 @@ public function testFieldAdminHandler() {
     ];
     $this->drupalPostForm($bundle_path . '/fields/' . $field_name . '/storage', $edit, t('Save field settings'));
     $this->drupalGet($bundle_path . '/fields/' . $field_name);
-    $this->assertFieldByName('settings[handler_settings][filter][type]', '_none');
-    $this->assertFieldByName('settings[handler_settings][sort][field]', '_none');
+    $this->assertSession()->fieldValueEquals('settings[handler_settings][filter][type]', '_none');
+    $this->assertSession()->fieldValueEquals('settings[handler_settings][sort][field]', '_none');
 
     // Switch the target type to 'node'.
     $field_name = 'node.' . $this->type . '.field_test';
diff --git a/core/modules/field_ui/tests/src/Functional/ManageDisplayTest.php b/core/modules/field_ui/tests/src/Functional/ManageDisplayTest.php
index 71fdb980..444c4a91 100644
--- a/core/modules/field_ui/tests/src/Functional/ManageDisplayTest.php
+++ b/core/modules/field_ui/tests/src/Functional/ManageDisplayTest.php
@@ -180,7 +180,7 @@ public function testNonInitializedFields() {
     // Check that the field appears as 'hidden' on the 'Manage display' page
     // for the 'teaser' mode.
     $this->drupalGet('admin/structure/types/manage/' . $this->type . '/display/teaser');
-    $this->assertFieldByName('fields[field_test][region]', 'hidden', 'The field is displayed as \'hidden \'.');
+    $this->assertSession()->fieldValueEquals('fields[field_test][region]', 'hidden');
   }
 
   /**
diff --git a/core/modules/filter/tests/src/Functional/FilterAdminTest.php b/core/modules/filter/tests/src/Functional/FilterAdminTest.php
index 3b607de3..072a0597 100644
--- a/core/modules/filter/tests/src/Functional/FilterAdminTest.php
+++ b/core/modules/filter/tests/src/Functional/FilterAdminTest.php
@@ -138,14 +138,14 @@ public function testFormatAdmin() {
 
     // Verify default weight of the text format.
     $this->drupalGet('admin/config/content/formats');
-    $this->assertFieldByName("formats[$format_id][weight]", 0, 'Text format weight was saved.');
+    $this->assertSession()->fieldValueEquals("formats[$format_id][weight]", 0);
 
     // Change the weight of the text format.
     $edit = [
       "formats[$format_id][weight]" => 5,
     ];
     $this->drupalPostForm('admin/config/content/formats', $edit, t('Save'));
-    $this->assertFieldByName("formats[$format_id][weight]", 5, 'Text format weight was saved.');
+    $this->assertSession()->fieldValueEquals("formats[$format_id][weight]", 5);
 
     // Edit text format.
     $this->drupalGet('admin/config/content/formats');
@@ -157,7 +157,7 @@ public function testFormatAdmin() {
 
     // Verify that the custom weight of the text format has been retained.
     $this->drupalGet('admin/config/content/formats');
-    $this->assertFieldByName("formats[$format_id][weight]", 5, 'Text format weight was retained.');
+    $this->assertSession()->fieldValueEquals("formats[$format_id][weight]", 5);
 
     // Disable text format.
     $this->assertLinkByHref('admin/config/content/formats/manage/' . $format_id . '/disable');
@@ -219,7 +219,8 @@ public function testFilterAdmin() {
     $this->drupalPostForm('admin/config/content/formats/manage/' . $restricted, $edit, t('Save configuration'));
     $this->assertSession()->addressEquals('admin/config/content/formats/manage/' . $restricted);
     $this->drupalGet('admin/config/content/formats/manage/' . $restricted);
-    $this->assertFieldByName('filters[filter_html][settings][allowed_html]', "<a> <em> <strong> <cite> <code> <ul> <ol> <li> <dl> <dt> <dd> <quote>", 'Allowed HTML tag added.');
+    // Check that the allowed HTML tag was added and the string reformatted.
+    $this->assertSession()->fieldValueEquals('filters[filter_html][settings][allowed_html]', "<a> <em> <strong> <cite> <code> <ul> <ol> <li> <dl> <dt> <dd> <quote>");
 
     $elements = $this->xpath('//select[@name=:first]/following::select[@name=:second]', [
       ':first' => 'filters[' . $first_filter . '][weight]',
@@ -234,8 +235,8 @@ public function testFilterAdmin() {
     $this->drupalPostForm(NULL, $edit, t('Save configuration'));
     $this->assertSession()->addressEquals('admin/config/content/formats/manage/' . $restricted);
     $this->drupalGet('admin/config/content/formats/manage/' . $restricted);
-    $this->assertFieldByName('filters[' . $second_filter . '][weight]', 1, 'Order saved successfully.');
-    $this->assertFieldByName('filters[' . $first_filter . '][weight]', 2, 'Order saved successfully.');
+    $this->assertSession()->fieldValueEquals('filters[' . $second_filter . '][weight]', 1);
+    $this->assertSession()->fieldValueEquals('filters[' . $first_filter . '][weight]', 2);
 
     $elements = $this->xpath('//select[@name=:first]/following::select[@name=:second]', [
       ':first' => 'filters[' . $second_filter . '][weight]',
@@ -338,7 +339,7 @@ public function testFilterAdmin() {
     $this->drupalPostForm('admin/config/content/formats/manage/' . $basic, $edit, t('Save configuration'));
     $this->assertSession()->addressEquals('admin/config/content/formats/manage/' . $basic);
     $this->drupalGet('admin/config/content/formats/manage/' . $basic);
-    $this->assertFieldByName('filters[filter_html][settings][allowed_html]', $edit['filters[filter_html][settings][allowed_html]'], 'Changes reverted.');
+    $this->assertSession()->fieldValueEquals('filters[filter_html][settings][allowed_html]', $edit['filters[filter_html][settings][allowed_html]']);
 
     // Full HTML.
     $edit = [];
@@ -347,7 +348,7 @@ public function testFilterAdmin() {
     $this->assertSession()->addressEquals('admin/config/content/formats/manage/' . $full);
     $this->assertRaw(t('The text format %format has been updated.', ['%format' => $format->label()]), 'Full HTML format successfully reverted.');
     $this->drupalGet('admin/config/content/formats/manage/' . $full);
-    $this->assertFieldByName('roles[' . RoleInterface::AUTHENTICATED_ID . ']', $edit['roles[' . RoleInterface::AUTHENTICATED_ID . ']'], 'Changes reverted.');
+    $this->assertSession()->fieldValueEquals('roles[' . RoleInterface::AUTHENTICATED_ID . ']', $edit['roles[' . RoleInterface::AUTHENTICATED_ID . ']']);
 
     // Filter order.
     $edit = [];
@@ -356,8 +357,8 @@ public function testFilterAdmin() {
     $this->drupalPostForm('admin/config/content/formats/manage/' . $basic, $edit, t('Save configuration'));
     $this->assertSession()->addressEquals('admin/config/content/formats/manage/' . $basic);
     $this->drupalGet('admin/config/content/formats/manage/' . $basic);
-    $this->assertFieldByName('filters[' . $second_filter . '][weight]', $edit['filters[' . $second_filter . '][weight]'], 'Changes reverted.');
-    $this->assertFieldByName('filters[' . $first_filter . '][weight]', $edit['filters[' . $first_filter . '][weight]'], 'Changes reverted.');
+    $this->assertSession()->fieldValueEquals('filters[' . $second_filter . '][weight]', $edit['filters[' . $second_filter . '][weight]']);
+    $this->assertSession()->fieldValueEquals('filters[' . $first_filter . '][weight]', $edit['filters[' . $first_filter . '][weight]']);
   }
 
   /**
diff --git a/core/modules/forum/tests/src/Functional/ForumTest.php b/core/modules/forum/tests/src/Functional/ForumTest.php
index 28ceb971..7bda27af 100644
--- a/core/modules/forum/tests/src/Functional/ForumTest.php
+++ b/core/modules/forum/tests/src/Functional/ForumTest.php
@@ -541,7 +541,7 @@ public function testForumWithNewPost() {
     // Test replying to a comment.
     $this->clickLink('Reply');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertFieldByName('comment_body[0][value]');
+    $this->assertSession()->fieldExists('comment_body[0][value]');
 
     // Log in as the first user.
     $this->drupalLogin($this->adminUser);
diff --git a/core/modules/forum/tests/src/Functional/ForumUninstallTest.php b/core/modules/forum/tests/src/Functional/ForumUninstallTest.php
index ec8682bc..e0ec9706 100644
--- a/core/modules/forum/tests/src/Functional/ForumUninstallTest.php
+++ b/core/modules/forum/tests/src/Functional/ForumUninstallTest.php
@@ -102,7 +102,7 @@ public function testForumUninstallWithField() {
     // Now attempt to uninstall forum.
     $this->drupalGet('admin/modules/uninstall');
     // Assert forum is no longer required.
-    $this->assertFieldByName('uninstall[forum]');
+    $this->assertSession()->fieldExists('uninstall[forum]');
     $this->drupalPostForm('admin/modules/uninstall', [
       'uninstall[forum]' => 1,
     ], t('Uninstall'));
diff --git a/core/modules/image/tests/src/Functional/ImageFieldDisplayTest.php b/core/modules/image/tests/src/Functional/ImageFieldDisplayTest.php
index 4a3bc8e2..69eeaab5 100644
--- a/core/modules/image/tests/src/Functional/ImageFieldDisplayTest.php
+++ b/core/modules/image/tests/src/Functional/ImageFieldDisplayTest.php
@@ -257,10 +257,10 @@ public function testImageFieldSettings() {
     // Verify that the min/max resolution set on the field are properly
     // extracted, and displayed, on the image field's configuration form.
     $this->drupalGet('admin/structure/types/manage/article/fields/' . $field->id());
-    $this->assertFieldByName('settings[max_resolution][x]', '100', 'Expected max resolution X value of 100.');
-    $this->assertFieldByName('settings[max_resolution][y]', '100', 'Expected max resolution Y value of 100.');
-    $this->assertFieldByName('settings[min_resolution][x]', '10', 'Expected min resolution X value of 10.');
-    $this->assertFieldByName('settings[min_resolution][y]', '10', 'Expected min resolution Y value of 10.');
+    $this->assertSession()->fieldValueEquals('settings[max_resolution][x]', '100');
+    $this->assertSession()->fieldValueEquals('settings[max_resolution][y]', '100');
+    $this->assertSession()->fieldValueEquals('settings[min_resolution][x]', '10');
+    $this->assertSession()->fieldValueEquals('settings[min_resolution][y]', '10');
 
     $this->drupalGet('node/add/article');
     $this->assertText(t('50 KB limit.'), 'Image widget max file size is displayed on article form.');
@@ -277,8 +277,8 @@ public function testImageFieldSettings() {
     $this->drupalGet('node/' . $nid . '/edit');
 
     // Verify that the optional fields alt & title are saved & filled.
-    $this->assertFieldByName($field_name . '[0][alt]', $alt, 'Alt field displayed on article form.');
-    $this->assertFieldByName($field_name . '[0][title]', '', 'Title field displayed on article form.');
+    $this->assertSession()->fieldValueEquals($field_name . '[0][alt]', $alt);
+    $this->assertSession()->fieldValueEquals($field_name . '[0][title]', '');
 
     // Verify that the attached image is being previewed using the 'medium'
     // style.
diff --git a/core/modules/image/tests/src/Functional/ImageStyleDeleteTest.php b/core/modules/image/tests/src/Functional/ImageStyleDeleteTest.php
index b95cbf8c..f3f00d12 100644
--- a/core/modules/image/tests/src/Functional/ImageStyleDeleteTest.php
+++ b/core/modules/image/tests/src/Functional/ImageStyleDeleteTest.php
@@ -33,7 +33,7 @@ protected function setUp(): void {
   public function testDelete() {
     $this->drupalGet('admin/config/media/image-styles/manage/medium/delete');
     // Checks that the 'replacement' select element is displayed.
-    $this->assertFieldByName('replacement');
+    $this->assertSession()->fieldExists('replacement');
     // Checks that UI messages are correct.
     $this->assertRaw(t('If this style is in use on the site, you may select another style to replace it. All images that have been generated for this style will be permanently deleted. If no replacement style is selected, the dependent configurations might need manual reconfiguration.'));
     $this->assertNoRaw(t('All images that have been generated for this style will be permanently deleted. The dependent configurations might need manual reconfiguration.'));
@@ -56,7 +56,7 @@ public function testDelete() {
 
     $this->drupalGet('admin/config/media/image-styles/manage/thumbnail/delete');
     // Checks that the 'replacement' select element is displayed.
-    $this->assertFieldByName('replacement');
+    $this->assertSession()->fieldExists('replacement');
     // Checks that UI messages are correct.
     $this->assertRaw(t('If this style is in use on the site, you may select another style to replace it. All images that have been generated for this style will be permanently deleted. If no replacement style is selected, the dependent configurations might need manual reconfiguration.'));
     $this->assertNoRaw(t('All images that have been generated for this style will be permanently deleted. The dependent configurations might need manual reconfiguration.'));
@@ -75,7 +75,7 @@ public function testDelete() {
 
     $this->drupalGet('admin/config/media/image-styles/manage/wide/delete');
     // Checks that the 'replacement' select element is displayed.
-    $this->assertFieldByName('replacement');
+    $this->assertSession()->fieldExists('replacement');
     // Checks that UI messages are correct.
     $this->assertRaw(t('If this style is in use on the site, you may select another style to replace it. All images that have been generated for this style will be permanently deleted. If no replacement style is selected, the dependent configurations might need manual reconfiguration.'));
     $this->assertNoRaw(t('All images that have been generated for this style will be permanently deleted. The dependent configurations might need manual reconfiguration.'));
@@ -85,7 +85,7 @@ public function testDelete() {
     // Now, there's only one image style configured on the system: 'large'.
     $this->drupalGet('admin/config/media/image-styles/manage/large/delete');
     // Checks that the 'replacement' select element is not displayed.
-    $this->assertNoFieldByName('replacement');
+    $this->assertSession()->fieldNotExists('replacement');
     // Checks that UI messages are correct.
     $this->assertNoRaw(t('If this style is in use on the site, you may select another style to replace it. All images that have been generated for this style will be permanently deleted. If no replacement style is selected, the dependent configurations might need manual reconfiguration.'));
     $this->assertRaw(t('All images that have been generated for this style will be permanently deleted. The dependent configurations might need manual reconfiguration.'));
diff --git a/core/modules/language/tests/src/Functional/LanguageNegotiationInfoTest.php b/core/modules/language/tests/src/Functional/LanguageNegotiationInfoTest.php
index 2a3c5d9c..25b67fe2 100644
--- a/core/modules/language/tests/src/Functional/LanguageNegotiationInfoTest.php
+++ b/core/modules/language/tests/src/Functional/LanguageNegotiationInfoTest.php
@@ -115,18 +115,19 @@ public function testInfoAlterations() {
     $negotiation = $this->config('language.types')->get('negotiation.' . $type . '.enabled');
     $this->assertFalse(isset($negotiation[$interface_method_id]), 'Interface language negotiation method removed from the stored settings.');
 
+    // Check that the interface language negotiation method is unavailable.
     $this->drupalGet('admin/config/regional/language/detection');
-    $this->assertNoFieldByName($form_field, NULL, 'Interface language negotiation method unavailable.');
+    $this->assertSession()->fieldNotExists($form_field);
 
     // Check that type-specific language negotiation methods can be assigned
     // only to the corresponding language types.
     foreach ($this->languageManager()->getLanguageTypes() as $type) {
       $form_field = $type . '[enabled][test_language_negotiation_method_ts]';
       if ($type == $test_type) {
-        $this->assertFieldByName($form_field, NULL, new FormattableMarkup('Type-specific test language negotiation method available for %type.', ['%type' => $type]));
+        $this->assertSession()->fieldExists($form_field);
       }
       else {
-        $this->assertNoFieldByName($form_field, NULL, new FormattableMarkup('Type-specific test language negotiation method unavailable for %type.', ['%type' => $type]));
+        $this->assertSession()->fieldNotExists($form_field);
       }
     }
 
diff --git a/core/modules/link/tests/src/Functional/LinkFieldTest.php b/core/modules/link/tests/src/Functional/LinkFieldTest.php
index 4f75f41d..07a5acbe 100644
--- a/core/modules/link/tests/src/Functional/LinkFieldTest.php
+++ b/core/modules/link/tests/src/Functional/LinkFieldTest.php
@@ -104,7 +104,7 @@ public function testURLValidation() {
 
     // Display creation form.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[0][uri]", '', 'Link URL field is displayed');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][uri]", '');
     $this->assertRaw('placeholder="http://example.com"');
 
     // Create a path alias.
@@ -293,17 +293,17 @@ public function testLinkTitle() {
       $this->drupalGet('entity_test/add');
       // Assert label is shown.
       $this->assertText('Read more about this entity');
-      $this->assertFieldByName("{$field_name}[0][uri]", '', 'URL field found.');
+      $this->assertSession()->fieldValueEquals("{$field_name}[0][uri]", '');
       $this->assertRaw('placeholder="http://example.com"');
 
       if ($title_setting === DRUPAL_DISABLED) {
-        $this->assertNoFieldByName("{$field_name}[0][title]", '', 'Link text field not found.');
+        $this->assertSession()->fieldNotExists("{$field_name}[0][title]");
         $this->assertNoRaw('placeholder="Enter the text for this link"');
       }
       else {
         $this->assertRaw('placeholder="Enter the text for this link"');
 
-        $this->assertFieldByName("{$field_name}[0][title]", '', 'Link text field found.');
+        $this->assertSession()->fieldValueEquals("{$field_name}[0][title]", '');
         if ($title_setting === DRUPAL_OPTIONAL) {
           // Verify that the URL is required, if the link text is non-empty.
           $edit = [
diff --git a/core/modules/locale/tests/src/Functional/LocaleContentTest.php b/core/modules/locale/tests/src/Functional/LocaleContentTest.php
index 9f93136c..3ae9000c 100644
--- a/core/modules/locale/tests/src/Functional/LocaleContentTest.php
+++ b/core/modules/locale/tests/src/Functional/LocaleContentTest.php
@@ -109,12 +109,12 @@ public function testContentTypeLanguageConfiguration() {
     $this->drupalLogin($web_user);
     $this->drupalGet("node/add/{$type1->id()}");
     // Verify language select list is not present.
-    $this->assertNoFieldByName('langcode[0][value]', NULL, 'Language select not present on the node add form.');
+    $this->assertSession()->fieldNotExists('langcode[0][value]');
 
     // Verify language selection appears on the node add form.
     $this->drupalGet("node/add/{$type2->id()}");
     // Verify language select list is present.
-    $this->assertFieldByName('langcode[0][value]', NULL, 'Language select present on the node add form.');
+    $this->assertSession()->fieldExists('langcode[0][value]');
     // Ensure language appears.
     $this->assertText($name, 'Language present.');
 
diff --git a/core/modules/locale/tests/src/Functional/LocaleFileSystemFormTest.php b/core/modules/locale/tests/src/Functional/LocaleFileSystemFormTest.php
index 4b6daa67..0298cd63 100644
--- a/core/modules/locale/tests/src/Functional/LocaleFileSystemFormTest.php
+++ b/core/modules/locale/tests/src/Functional/LocaleFileSystemFormTest.php
@@ -38,14 +38,14 @@ protected function setUp(): void {
   public function testFileConfigurationPage() {
     // By default there should be no setting for the translation directory.
     $this->drupalGet('admin/config/media/file-system');
-    $this->assertNoFieldByName('translation_path');
+    $this->assertSession()->fieldNotExists('translation_path');
 
     // With locale module installed, the setting should appear.
     $module_installer = $this->container->get('module_installer');
     $module_installer->install(['locale']);
     $this->rebuildContainer();
     $this->drupalGet('admin/config/media/file-system');
-    $this->assertFieldByName('translation_path');
+    $this->assertSession()->fieldExists('translation_path');
 
     // The setting should persist.
     $translation_path = $this->publicFilesDirectory . '/translations_changed';
@@ -54,7 +54,7 @@ public function testFileConfigurationPage() {
     ];
     $this->drupalPostForm(NULL, $fields, t('Save configuration'));
     $this->drupalGet('admin/config/media/file-system');
-    $this->assertFieldByName('translation_path', $translation_path);
+    $this->assertSession()->fieldValueEquals('translation_path', $translation_path);
     $this->assertEqual($translation_path, $this->config('locale.settings')->get('translation.path'));
   }
 
diff --git a/core/modules/menu_ui/tests/src/Functional/MenuUiTest.php b/core/modules/menu_ui/tests/src/Functional/MenuUiTest.php
index 996c9e0a..6f1048e7 100644
--- a/core/modules/menu_ui/tests/src/Functional/MenuUiTest.php
+++ b/core/modules/menu_ui/tests/src/Functional/MenuUiTest.php
@@ -292,7 +292,7 @@ public function doMenuTests() {
     $this->assertSession()->addressEquals(Url::fromRoute('entity.menu.edit_form', ['menu' => $menu_name]));
     // Test the 'Edit' operation.
     $this->clickLink(t('Edit'));
-    $this->assertFieldByName('title[0][value]', $link_title);
+    $this->assertSession()->fieldValueEquals('title[0][value]', $link_title);
     $link_title = $this->randomString();
     $this->drupalPostForm(NULL, ['title[0][value]' => $link_title], t('Save'));
     $this->assertSession()->addressEquals(Url::fromRoute('entity.menu.edit_form', ['menu' => $menu_name]));
@@ -499,14 +499,14 @@ protected function doMenuLinkFormDefaultsTest() {
     $this->drupalGet("admin/structure/menu/manage/tools/add");
     $this->assertSession()->statusCodeEquals(200);
 
-    $this->assertFieldByName('title[0][value]', '');
-    $this->assertFieldByName('link[0][uri]', '');
+    $this->assertSession()->fieldValueEquals('title[0][value]', '');
+    $this->assertSession()->fieldValueEquals('link[0][uri]', '');
 
     $this->assertSession()->checkboxNotChecked('edit-expanded-value');
     $this->assertSession()->checkboxChecked('edit-enabled-value');
 
-    $this->assertFieldByName('description[0][value]', '');
-    $this->assertFieldByName('weight[0][value]', 0);
+    $this->assertSession()->fieldValueEquals('description[0][value]', '');
+    $this->assertSession()->fieldValueEquals('weight[0][value]', 0);
   }
 
   /**
@@ -519,26 +519,27 @@ public function testMenuQueryAndFragment() {
     $path = '/test-page?arg1=value1&arg2=value2';
     $item = $this->addMenuLink('', $path);
 
+    // Check that the path has both the query and fragment.
     $this->drupalGet('admin/structure/menu/item/' . $item->id() . '/edit');
-    $this->assertFieldByName('link[0][uri]', $path, 'Path is found with both query and fragment.');
+    $this->assertSession()->fieldValueEquals('link[0][uri]', $path);
 
     // Now change the path to something without query and fragment.
     $path = '/test-page';
     $this->drupalPostForm('admin/structure/menu/item/' . $item->id() . '/edit', ['link[0][uri]' => $path], t('Save'));
     $this->drupalGet('admin/structure/menu/item/' . $item->id() . '/edit');
-    $this->assertFieldByName('link[0][uri]', $path, 'Path no longer has query or fragment.');
+    $this->assertSession()->fieldValueEquals('link[0][uri]', $path);
 
     // Use <front>#fragment and ensure that saving it does not lose its content.
     $path = '<front>?arg1=value#fragment';
     $item = $this->addMenuLink('', $path);
 
     $this->drupalGet('admin/structure/menu/item/' . $item->id() . '/edit');
-    $this->assertFieldByName('link[0][uri]', $path, 'Path is found with both query and fragment.');
+    $this->assertSession()->fieldValueEquals('link[0][uri]', $path);
 
     $this->drupalPostForm('admin/structure/menu/item/' . $item->id() . '/edit', [], t('Save'));
 
     $this->drupalGet('admin/structure/menu/item/' . $item->id() . '/edit');
-    $this->assertFieldByName('link[0][uri]', $path, 'Path is found with both query and fragment.');
+    $this->assertSession()->fieldValueEquals('link[0][uri]', $path);
   }
 
   /**
diff --git a/core/modules/node/tests/src/Functional/NodeAdminTest.php b/core/modules/node/tests/src/Functional/NodeAdminTest.php
index a4055a33..0879c278 100644
--- a/core/modules/node/tests/src/Functional/NodeAdminTest.php
+++ b/core/modules/node/tests/src/Functional/NodeAdminTest.php
@@ -188,7 +188,7 @@ public function testContentAdminPages() {
     $this->assertNoLinkByHref('node/' . $nodes['unpublished_page_1']->id() . '/delete');
 
     // Verify no tableselect.
-    $this->assertNoFieldByName('nodes[' . $nodes['published_page']->id() . ']', '', 'No tableselect found.');
+    $this->assertSession()->fieldNotExists('nodes[' . $nodes['published_page']->id() . ']');
 
     // Verify unpublished content is displayed with permission.
     $this->drupalLogout();
@@ -206,7 +206,7 @@ public function testContentAdminPages() {
     $this->assertNoLinkByHref('node/' . $nodes['unpublished_page_1']->id() . '/delete');
 
     // Verify no tableselect.
-    $this->assertNoFieldByName('nodes[' . $nodes['unpublished_page_2']->id() . ']', '', 'No tableselect found.');
+    $this->assertSession()->fieldNotExists('nodes[' . $nodes['unpublished_page_2']->id() . ']');
 
     // Verify node access can be bypassed.
     $this->drupalLogout();
diff --git a/core/modules/node/tests/src/Functional/NodeEditFormTest.php b/core/modules/node/tests/src/Functional/NodeEditFormTest.php
index 29d0f72c..7aa2cd34 100644
--- a/core/modules/node/tests/src/Functional/NodeEditFormTest.php
+++ b/core/modules/node/tests/src/Functional/NodeEditFormTest.php
@@ -86,8 +86,8 @@ public function testNodeEdit() {
     // Check that the title and body fields are displayed with the correct values.
     // @todo Ideally assertLink would support HTML, but it doesn't.
     $this->assertRaw('Edit<span class="visually-hidden">(active tab)</span>', 'Edit tab found and marked active.');
-    $this->assertFieldByName($title_key, $edit[$title_key], 'Title field displayed.');
-    $this->assertFieldByName($body_key, $edit[$body_key], 'Body field displayed.');
+    $this->assertSession()->fieldValueEquals($title_key, $edit[$title_key]);
+    $this->assertSession()->fieldValueEquals($body_key, $edit[$body_key]);
 
     // Edit the content of the node.
     $edit = [];
@@ -177,7 +177,7 @@ public function testNodeEditAuthoredBy() {
     // Check that normal users cannot change the authored by information.
     $this->drupalLogin($this->webUser);
     $this->drupalGet('node/' . $node->id() . '/edit');
-    $this->assertNoFieldByName('uid[0][target_id]');
+    $this->assertSession()->fieldNotExists('uid[0][target_id]');
 
     // Now test with the Autocomplete (Tags) field widget.
     /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
@@ -283,7 +283,7 @@ protected function checkVariousAuthoredByValues(NodeInterface $node, $form_eleme
     $this->drupalGet('node/' . $node->id() . '/edit');
     $anonymous_user = User::getAnonymousUser();
     $expected = $anonymous_user->label() . ' (' . $anonymous_user->id() . ')';
-    $this->assertFieldByName($form_element_name, $expected, 'Authored by field displays the correct value for the anonymous user.');
+    $this->assertSession()->fieldValueEquals($form_element_name, $expected);
 
     // Change the authored by field to another user's name (that is not
     // logged in).
diff --git a/core/modules/node/tests/src/Functional/PagePreviewTest.php b/core/modules/node/tests/src/Functional/PagePreviewTest.php
index 525134d6..6f0569d3 100644
--- a/core/modules/node/tests/src/Functional/PagePreviewTest.php
+++ b/core/modules/node/tests/src/Functional/PagePreviewTest.php
@@ -233,13 +233,13 @@ public function testPagePreview() {
     // Check that the title, body and term fields are displayed with the
     // values after going back to the content edit page.
     $this->clickLink(t('Back to content editing'));
-    $this->assertFieldByName($title_key, $edit[$title_key], 'Title field displayed.');
-    $this->assertFieldByName($body_key, $edit[$body_key], 'Body field displayed.');
-    $this->assertFieldByName($term_key, $edit[$term_key], 'Term field displayed.');
-    $this->assertFieldByName('field_image[0][alt]', 'Picture of llamas');
+    $this->assertSession()->fieldValueEquals($title_key, $edit[$title_key]);
+    $this->assertSession()->fieldValueEquals($body_key, $edit[$body_key]);
+    $this->assertSession()->fieldValueEquals($term_key, $edit[$term_key]);
+    $this->assertSession()->fieldValueEquals('field_image[0][alt]', 'Picture of llamas');
     $this->getSession()->getPage()->pressButton('Add another item');
-    $this->assertFieldByName('field_test_multi[0][value]');
-    $this->assertFieldByName('field_test_multi[1][value]');
+    $this->assertSession()->fieldExists('field_test_multi[0][value]');
+    $this->assertSession()->fieldExists('field_test_multi[1][value]');
 
     // Return to page preview to check everything is as expected.
     $this->drupalPostForm(NULL, [], t('Preview'));
@@ -251,9 +251,9 @@ public function testPagePreview() {
 
     // Assert the content is kept when reloading the page.
     $this->drupalGet('node/add/page', ['query' => ['uuid' => $uuid]]);
-    $this->assertFieldByName($title_key, $edit[$title_key], 'Title field displayed.');
-    $this->assertFieldByName($body_key, $edit[$body_key], 'Body field displayed.');
-    $this->assertFieldByName($term_key, $edit[$term_key], 'Term field displayed.');
+    $this->assertSession()->fieldValueEquals($title_key, $edit[$title_key]);
+    $this->assertSession()->fieldValueEquals($body_key, $edit[$body_key]);
+    $this->assertSession()->fieldValueEquals($term_key, $edit[$term_key]);
 
     // Save the node - this is a new POST, so we need to upload the image.
     $this->drupalPostForm('node/add/page', $edit, t('Upload'));
@@ -266,7 +266,7 @@ public function testPagePreview() {
 
     // Check the term appears again on the edit form.
     $this->drupalGet('node/' . $node->id() . '/edit');
-    $this->assertFieldByName($term_key, $edit[$term_key] . ' (' . $this->term->id() . ')', 'Term field displayed.');
+    $this->assertSession()->fieldValueEquals($term_key, $edit[$term_key] . ' (' . $this->term->id() . ')');
 
     // Check with two new terms on the edit form, additionally to the existing
     // one.
@@ -306,12 +306,12 @@ public function testPagePreview() {
     $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, t('Preview'));
     $this->assertText($edit[$title_key], 'New title displayed.');
     $this->clickLink(t('Back to content editing'));
-    $this->assertFieldByName($title_key, $edit[$title_key], 'New title value displayed.');
+    $this->assertSession()->fieldValueEquals($title_key, $edit[$title_key]);
     // Navigate away from the node without saving.
     $this->drupalGet('<front>');
     // Go back to the edit form, the title should have its initial value.
     $this->drupalGet('node/' . $node->id() . '/edit');
-    $this->assertFieldByName($title_key, $node->label(), 'Correct title value displayed.');
+    $this->assertSession()->fieldValueEquals($title_key, $node->label());
 
     // Check with required preview.
     $node_type = NodeType::load('page');
@@ -358,9 +358,9 @@ public function testPagePreview() {
     $this->drupalPostForm('node/add/page', $edit_image_1, t('Upload'));
     $this->drupalPostForm(NULL, $edit, t('Preview'));
     $this->clickLink(t('Back to content editing'));
-    $this->assertFieldByName('files[field_image_1][]');
+    $this->assertSession()->fieldExists('files[field_image_1][]');
     $this->drupalPostForm(NULL, $edit_image_2, t('Upload'));
-    $this->assertNoFieldByName('files[field_image_1][]');
+    $this->assertSession()->fieldNotExists('files[field_image_1][]');
 
     $title = 'node_test_title';
     $example_text_1 = 'example_text_preview_1';
@@ -375,7 +375,7 @@ public function testPagePreview() {
     $this->drupalPostForm(NULL, $edit, t('Preview'));
     $this->clickLink(t('Back to content editing'));
     $this->assertRaw('Storage is set');
-    $this->assertFieldByName('field_test_multi[0][value]');
+    $this->assertSession()->fieldExists('field_test_multi[0][value]');
     $this->drupalPostForm(NULL, [], t('Save'));
     $this->assertText('Basic page ' . $title . ' has been created.');
     $node = $this->drupalGetNodeByTitle($title);
@@ -390,9 +390,9 @@ public function testPagePreview() {
     $this->clickLink(t('Back to content editing'));
     $this->drupalPostForm(NULL, $edit, t('Preview'));
     $this->clickLink(t('Back to content editing'));
-    $this->assertFieldByName('field_test_multi[0][value]', $example_text_1);
-    $this->assertFieldByName('field_test_multi[1][value]', $example_text_2);
-    $this->assertFieldByName('field_test_multi[2][value]', $example_text_3);
+    $this->assertSession()->fieldValueEquals('field_test_multi[0][value]', $example_text_1);
+    $this->assertSession()->fieldValueEquals('field_test_multi[1][value]', $example_text_2);
+    $this->assertSession()->fieldValueEquals('field_test_multi[2][value]', $example_text_3);
 
     // Now save the node and make sure all values got saved.
     $this->drupalPostForm(NULL, [], t('Save'));
@@ -409,7 +409,7 @@ public function testPagePreview() {
     $this->drupalPostForm(NULL, $edit, t('Preview'));
     $this->clickLink(t('Back to content editing'));
     $this->assertSession()->checkboxChecked('edit-menu-enabled');
-    $this->assertFieldByName('menu[title]', 'Changed title', 'Menu link title is correct after preview');
+    $this->assertSession()->fieldValueEquals('menu[title]', 'Changed title');
 
     // Save, change the title while saving and make sure that it is correctly
     // saved.
@@ -419,7 +419,7 @@ public function testPagePreview() {
     ];
     $this->drupalPostForm(NULL, $edit, t('Save'));
     $this->drupalGet('node/' . $node->id() . '/edit');
-    $this->assertFieldByName('menu[title]', 'Second title change', 'Menu link title is correct after saving');
+    $this->assertSession()->fieldValueEquals('menu[title]', 'Second title change');
 
   }
 
@@ -451,12 +451,13 @@ public function testPagePreviewWithRevisions() {
 
     // Check that the title and body fields are displayed with the correct
     // values after going back to the content edit page.
-    $this->clickLink(t('Back to content editing'));    $this->assertFieldByName($title_key, $edit[$title_key], 'Title field displayed.');
-    $this->assertFieldByName($body_key, $edit[$body_key], 'Body field displayed.');
-    $this->assertFieldByName($term_key, $edit[$term_key], 'Term field displayed.');
+    $this->clickLink(t('Back to content editing'));
+    $this->assertSession()->fieldValueEquals($title_key, $edit[$title_key]);
+    $this->assertSession()->fieldValueEquals($body_key, $edit[$body_key]);
+    $this->assertSession()->fieldValueEquals($term_key, $edit[$term_key]);
 
     // Check that the revision log field has the correct value.
-    $this->assertFieldByName('revision_log[0][value]', $edit['revision_log[0][value]'], 'Revision log field displayed.');
+    $this->assertSession()->fieldValueEquals('revision_log[0][value]', $edit['revision_log[0][value]']);
 
     // Save the node after coming back from the preview page so we can create a
     // pending revision for it.
@@ -491,7 +492,7 @@ public function testSimultaneousPreview() {
     $user2 = $this->drupalCreateUser(['edit any page content']);
     $this->drupalLogin($user2);
     $this->drupalGet('node/' . $node->id() . '/edit');
-    $this->assertFieldByName($title_key, $node->label(), 'No title leaked from previous user.');
+    $this->assertSession()->fieldValueEquals($title_key, $node->label());
 
     $edit2 = [$title_key => 'Another page title'];
     $this->drupalPostForm('node/' . $node->id() . '/edit', $edit2, t('Preview'));
diff --git a/core/modules/responsive_image/tests/src/Functional/ResponsiveImageAdminUITest.php b/core/modules/responsive_image/tests/src/Functional/ResponsiveImageAdminUITest.php
index a85f0e40..dfdfc205 100644
--- a/core/modules/responsive_image/tests/src/Functional/ResponsiveImageAdminUITest.php
+++ b/core/modules/responsive_image/tests/src/Functional/ResponsiveImageAdminUITest.php
@@ -49,7 +49,7 @@ public function testResponsiveImageAdmin() {
     // Add a responsive image style.
     $this->drupalGet('admin/config/media/responsive-image-style/add');
     // The 'Responsive Image' breakpoint group should be selected by default.
-    $this->assertFieldByName('breakpoint_group', 'responsive_image');
+    $this->assertSession()->fieldValueEquals('breakpoint_group', 'responsive_image');
 
     // Create a new group.
     $edit = [
@@ -68,9 +68,9 @@ public function testResponsiveImageAdmin() {
 
     // Edit the group.
     $this->drupalGet('admin/config/media/responsive-image-style/style_one');
-    $this->assertFieldByName('label', 'Style One');
-    $this->assertFieldByName('breakpoint_group', 'responsive_image_test_module');
-    $this->assertFieldByName('fallback_image_style', 'thumbnail');
+    $this->assertSession()->fieldValueEquals('label', 'Style One');
+    $this->assertSession()->fieldValueEquals('breakpoint_group', 'responsive_image_test_module');
+    $this->assertSession()->fieldValueEquals('fallback_image_style', 'thumbnail');
 
     $cases = [
       ['mobile', '1x'],
@@ -86,11 +86,11 @@ public function testResponsiveImageAdmin() {
     );
     foreach ($cases as $case) {
       // Check if the radio buttons are present.
-      $this->assertFieldByName('keyed_styles[responsive_image_test_module.' . $case[0] . '][' . $case[1] . '][image_mapping_type]', NULL);
+      $this->assertSession()->fieldExists('keyed_styles[responsive_image_test_module.' . $case[0] . '][' . $case[1] . '][image_mapping_type]');
       // Check if the image style dropdowns are present.
-      $this->assertFieldByName('keyed_styles[responsive_image_test_module.' . $case[0] . '][' . $case[1] . '][image_style]', NULL);
+      $this->assertSession()->fieldExists('keyed_styles[responsive_image_test_module.' . $case[0] . '][' . $case[1] . '][image_style]');
       // Check if the sizes textfields are present.
-      $this->assertFieldByName('keyed_styles[responsive_image_test_module.' . $case[0] . '][' . $case[1] . '][sizes]', NULL);
+      $this->assertSession()->fieldExists('keyed_styles[responsive_image_test_module.' . $case[0] . '][' . $case[1] . '][sizes]');
 
       foreach ($image_styles as $image_style_name) {
         // Check if the image styles are available in the dropdowns.
@@ -102,7 +102,7 @@ public function testResponsiveImageAdmin() {
           ]
         ));
         // Check if the image styles checkboxes are present.
-        $this->assertFieldByName('keyed_styles[responsive_image_test_module.' . $case[0] . '][' . $case[1] . '][sizes_image_styles][' . $image_style_name . ']');
+        $this->assertSession()->fieldExists('keyed_styles[responsive_image_test_module.' . $case[0] . '][' . $case[1] . '][sizes_image_styles][' . $image_style_name . ']');
       }
     }
 
@@ -125,22 +125,22 @@ public function testResponsiveImageAdmin() {
     $this->drupalGet('admin/config/media/responsive-image-style/style_one');
 
     // Check the mapping for multipliers 1x and 2x for the mobile breakpoint.
-    $this->assertFieldByName('keyed_styles[responsive_image_test_module.mobile][1x][image_style]', 'thumbnail');
-    $this->assertFieldByName('keyed_styles[responsive_image_test_module.mobile][1x][image_mapping_type]', 'image_style');
-    $this->assertFieldByName('keyed_styles[responsive_image_test_module.mobile][2x][image_mapping_type]', '_none');
+    $this->assertSession()->fieldValueEquals('keyed_styles[responsive_image_test_module.mobile][1x][image_style]', 'thumbnail');
+    $this->assertSession()->fieldValueEquals('keyed_styles[responsive_image_test_module.mobile][1x][image_mapping_type]', 'image_style');
+    $this->assertSession()->fieldValueEquals('keyed_styles[responsive_image_test_module.mobile][2x][image_mapping_type]', '_none');
 
     // Check the mapping for multipliers 1x and 2x for the narrow breakpoint.
-    $this->assertFieldByName('keyed_styles[responsive_image_test_module.narrow][1x][image_mapping_type]', 'sizes');
-    $this->assertFieldByName('keyed_styles[responsive_image_test_module.narrow][1x][sizes]', '(min-resolution: 192dpi) and (min-width: 170px) 386px, (min-width: 170px) 193px, (min-width: 768px) 18vw, (min-width: 480px) 30vw, 48vw');
+    $this->assertSession()->fieldValueEquals('keyed_styles[responsive_image_test_module.narrow][1x][image_mapping_type]', 'sizes');
+    $this->assertSession()->fieldValueEquals('keyed_styles[responsive_image_test_module.narrow][1x][sizes]', '(min-resolution: 192dpi) and (min-width: 170px) 386px, (min-width: 170px) 193px, (min-width: 768px) 18vw, (min-width: 480px) 30vw, 48vw');
     $this->assertSession()->checkboxChecked('edit-keyed-styles-responsive-image-test-modulenarrow-1x-sizes-image-styles-large');
     $this->assertSession()->checkboxChecked('edit-keyed-styles-responsive-image-test-modulenarrow-1x-sizes-image-styles-medium');
     $this->assertSession()->checkboxNotChecked('edit-keyed-styles-responsive-image-test-modulenarrow-1x-sizes-image-styles-thumbnail');
-    $this->assertFieldByName('keyed_styles[responsive_image_test_module.narrow][2x][image_mapping_type]', '_none');
+    $this->assertSession()->fieldValueEquals('keyed_styles[responsive_image_test_module.narrow][2x][image_mapping_type]', '_none');
 
     // Check the mapping for multipliers 1x and 2x for the wide breakpoint.
-    $this->assertFieldByName('keyed_styles[responsive_image_test_module.wide][1x][image_style]', 'large');
-    $this->assertFieldByName('keyed_styles[responsive_image_test_module.wide][1x][image_mapping_type]', 'image_style');
-    $this->assertFieldByName('keyed_styles[responsive_image_test_module.wide][2x][image_mapping_type]', '_none');
+    $this->assertSession()->fieldValueEquals('keyed_styles[responsive_image_test_module.wide][1x][image_style]', 'large');
+    $this->assertSession()->fieldValueEquals('keyed_styles[responsive_image_test_module.wide][1x][image_mapping_type]', 'image_style');
+    $this->assertSession()->fieldValueEquals('keyed_styles[responsive_image_test_module.wide][2x][image_mapping_type]', '_none');
 
     // Delete the style.
     $this->drupalGet('admin/config/media/responsive-image-style/style_one/delete');
diff --git a/core/modules/shortcut/tests/src/Functional/ShortcutSetsTest.php b/core/modules/shortcut/tests/src/Functional/ShortcutSetsTest.php
index da460695..d493413d 100644
--- a/core/modules/shortcut/tests/src/Functional/ShortcutSetsTest.php
+++ b/core/modules/shortcut/tests/src/Functional/ShortcutSetsTest.php
@@ -86,7 +86,7 @@ public function testShortcutSetEdit() {
       $this->assertSession()->linkExists($title);
 
       // Look for a test shortcut weight select form element.
-      $this->assertFieldByName('shortcuts[links][' . $shortcut->id() . '][weight]');
+      $this->assertSession()->fieldExists('shortcuts[links][' . $shortcut->id() . '][weight]');
 
       // Change the weight of the shortcut.
       $edit['shortcuts[links][' . $shortcut->id() . '][weight]'] = $weight;
diff --git a/core/modules/system/tests/src/Functional/File/ConfigTest.php b/core/modules/system/tests/src/Functional/File/ConfigTest.php
index 67935b77..56115dc4 100644
--- a/core/modules/system/tests/src/Functional/File/ConfigTest.php
+++ b/core/modules/system/tests/src/Functional/File/ConfigTest.php
@@ -44,7 +44,7 @@ public function testFileConfigurationPage() {
     $this->drupalPostForm(NULL, $fields, t('Save configuration'));
     $this->assertText(t('The configuration options have been saved.'));
     foreach ($fields as $field => $value) {
-      $this->assertFieldByName($field, $value);
+      $this->assertSession()->fieldValueEquals($field, $value);
     }
 
     // Remove the private path, rebuild the container and verify that private
diff --git a/core/modules/system/tests/src/Functional/Form/ArbitraryRebuildTest.php b/core/modules/system/tests/src/Functional/Form/ArbitraryRebuildTest.php
index 6d277d18..71d88939 100644
--- a/core/modules/system/tests/src/Functional/Form/ArbitraryRebuildTest.php
+++ b/core/modules/system/tests/src/Functional/Form/ArbitraryRebuildTest.php
@@ -61,8 +61,8 @@ public function testUserRegistrationRebuild() {
     ];
     $this->drupalPostForm('user/register', $edit, 'Rebuild');
     $this->assertText('Form rebuilt.');
-    $this->assertFieldByName('name', 'foo', 'Entered username has been kept.');
-    $this->assertFieldByName('mail', 'bar@example.com', 'Entered mail address has been kept.');
+    $this->assertSession()->fieldValueEquals('name', 'foo');
+    $this->assertSession()->fieldValueEquals('mail', 'bar@example.com');
   }
 
   /**
@@ -75,8 +75,8 @@ public function testUserRegistrationMultipleField() {
     ];
     $this->drupalPostForm('user/register', $edit, t('Add another item'));
     $this->assertText('Test a multiple valued field', 'Form has been rebuilt.');
-    $this->assertFieldByName('name', 'foo', 'Entered username has been kept.');
-    $this->assertFieldByName('mail', 'bar@example.com', 'Entered mail address has been kept.');
+    $this->assertSession()->fieldValueEquals('name', 'foo');
+    $this->assertSession()->fieldValueEquals('mail', 'bar@example.com');
   }
 
 }
diff --git a/core/modules/system/tests/src/Functional/Form/FormTest.php b/core/modules/system/tests/src/Functional/Form/FormTest.php
index c0881551..030b8b99 100644
--- a/core/modules/system/tests/src/Functional/Form/FormTest.php
+++ b/core/modules/system/tests/src/Functional/Form/FormTest.php
@@ -212,7 +212,7 @@ public function testRequiredCheckboxesRadio() {
     }
 
     // Verify that input elements are still empty.
-    $this->assertFieldByName('textfield', '');
+    $this->assertSession()->fieldValueEquals('textfield', '');
     $this->assertSession()->checkboxNotChecked('edit-checkboxes-foo');
     $this->assertSession()->checkboxNotChecked('edit-checkboxes-bar');
     $this->assertTrue($this->assertSession()->optionExists('edit-select', '')->isSelected());
@@ -267,7 +267,7 @@ public function testInputWithInvalidToken() {
     $assert->responseNotContains($random_string);
     $this->assertText('The form has become outdated.');
     // Ensure that we don't use the posted values.
-    $this->assertFieldByName('textfield', '');
+    $this->assertSession()->fieldValueEquals('textfield', '');
     $this->assertSession()->checkboxNotChecked('edit-checkboxes-foo');
     $this->assertSession()->checkboxNotChecked('edit-checkboxes-bar');
     $this->assertTrue($this->assertSession()->optionExists('edit-select', '')->isSelected());
@@ -285,8 +285,8 @@ public function testInputWithInvalidToken() {
     $this->drupalPostForm(NULL, $edit, 'Submit');
     $this->assertFieldByXpath('//div[contains(@class, "error")]', NULL, 'Error message is displayed with invalid token even when required fields are filled.');
     $this->assertText('The form has become outdated.');
-    $this->assertFieldByName('textfield', '');
-    $this->assertFieldByName('textarea', '');
+    $this->assertSession()->fieldValueEquals('textfield', '');
+    $this->assertSession()->fieldValueEquals('textarea', '');
 
     // Check another form that has a number input.
     $this->drupalGet(Url::fromRoute('form_test.number'));
@@ -301,7 +301,7 @@ public function testInputWithInvalidToken() {
     $this->drupalPostForm(NULL, $edit, 'Submit');
     $this->assertFieldByXpath('//div[contains(@class, "error")]', NULL, 'Error message is displayed with invalid token even when required fields are filled.');
     $this->assertText('The form has become outdated.');
-    $this->assertFieldByName('integer_step', 5);
+    $this->assertSession()->fieldValueEquals('integer_step', 5);
 
     // Check a form with a Url field
     $this->drupalGet(Url::fromRoute('form_test.url'));
@@ -314,7 +314,7 @@ public function testInputWithInvalidToken() {
     $this->drupalPostForm(NULL, $edit, 'Submit');
     $this->assertFieldByXpath('//div[contains(@class, "error")]', NULL, 'Error message is displayed with invalid token even when required fields are filled.');
     $this->assertText('The form has become outdated.');
-    $this->assertFieldByName('url', '');
+    $this->assertSession()->fieldValueEquals('url', '');
   }
 
   /**
diff --git a/core/modules/system/tests/src/Functional/Form/ValidationTest.php b/core/modules/system/tests/src/Functional/Form/ValidationTest.php
index 18a9210e..de9e4825 100644
--- a/core/modules/system/tests/src/Functional/Form/ValidationTest.php
+++ b/core/modules/system/tests/src/Functional/Form/ValidationTest.php
@@ -36,7 +36,7 @@ public function testValidate() {
       'name' => 'element_validate',
     ];
     $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertFieldByName('name', '#value changed by #element_validate', 'Form element #value was altered.');
+    $this->assertSession()->fieldValueEquals('name', '#value changed by #element_validate');
     $this->assertText('Name value: value changed by setValueForElement() in #element_validate', 'Form element value in $form_state was altered.');
 
     // Verify that #validate handlers can alter the form and submitted
@@ -45,7 +45,7 @@ public function testValidate() {
       'name' => 'validate',
     ];
     $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertFieldByName('name', '#value changed by #validate', 'Form element #value was altered.');
+    $this->assertSession()->fieldValueEquals('name', '#value changed by #validate');
     $this->assertText('Name value: value changed by setValueForElement() in #validate', 'Form element value in $form_state was altered.');
 
     // Verify that #element_validate handlers can make form elements
@@ -54,12 +54,12 @@ public function testValidate() {
       'name' => 'element_validate_access',
     ];
     $this->drupalPostForm(NULL, $edit, 'Save');
-    $this->assertNoFieldByName('name', 'Form element was hidden.');
+    $this->assertSession()->fieldNotExists('name');
     $this->assertText('Name value: element_validate_access', 'Value for inaccessible form element exists.');
 
     // Verify that value for inaccessible form element persists.
     $this->drupalPostForm(NULL, [], 'Save');
-    $this->assertNoFieldByName('name', 'Form element was hidden.');
+    $this->assertSession()->fieldValueNotEquals('name', 'Form element was hidden.');
     $this->assertText('Name value: element_validate_access', 'Value for inaccessible form element exists.');
 
     // Verify that #validate handlers don't run if the CSRF token is invalid.
@@ -72,7 +72,7 @@ public function testValidate() {
       ->elementExists('css', 'input[name="form_token"]')
       ->setValue('invalid_token');
     $this->drupalPostForm(NULL, ['name' => 'validate'], 'Save');
-    $this->assertNoFieldByName('name', '#value changed by #validate', 'Form element #value was not altered.');
+    $this->assertSession()->fieldValueNotEquals('name', '#value changed by #validate');
     $this->assertNoText('Name value: value changed by setValueForElement() in #validate', 'Form element value in $form_state was not altered.');
     $this->assertText('The form has become outdated.');
   }
diff --git a/core/modules/system/tests/src/Functional/System/ThemeTest.php b/core/modules/system/tests/src/Functional/System/ThemeTest.php
index 2f1aaf7b..a61c2bc1 100644
--- a/core/modules/system/tests/src/Functional/System/ThemeTest.php
+++ b/core/modules/system/tests/src/Functional/System/ThemeTest.php
@@ -109,7 +109,7 @@ public function testThemeSettings() {
       ];
       $this->drupalPostForm('admin/appearance/settings', $edit, t('Save configuration'));
       $this->assertNoText('The custom logo path is invalid.');
-      $this->assertFieldByName('logo_path', $expected['form']);
+      $this->assertSession()->fieldValueEquals('logo_path', $expected['form']);
 
       // Verify logo path examples.
       $elements = $this->xpath('//div[contains(@class, :item)]/div[@class=:description]/code', [
@@ -245,8 +245,8 @@ public function testThemeSettingsLogo() {
       'logo_path' => 'core/misc/druplicon.png',
     ];
     $this->drupalPostForm('admin/appearance/settings/bartik', $edit, t('Save configuration'));
-    $this->assertFieldByName('default_logo', FALSE);
-    $this->assertFieldByName('logo_path', 'core/misc/druplicon.png');
+    $this->assertSession()->fieldValueEquals('default_logo', FALSE);
+    $this->assertSession()->fieldValueEquals('logo_path', 'core/misc/druplicon.png');
 
     // Make sure the logo and favicon settings are not available when the file
     // module is not enabled.
diff --git a/core/modules/telephone/tests/src/Functional/TelephoneFieldTest.php b/core/modules/telephone/tests/src/Functional/TelephoneFieldTest.php
index 54f8e9cc..2d8d7a33 100644
--- a/core/modules/telephone/tests/src/Functional/TelephoneFieldTest.php
+++ b/core/modules/telephone/tests/src/Functional/TelephoneFieldTest.php
@@ -88,7 +88,7 @@ protected function setUp(): void {
    */
   public function testTelephoneWidget() {
     $this->drupalGet('node/add/article');
-    $this->assertFieldByName("field_telephone[0][value]", '', 'Widget found.');
+    $this->assertSession()->fieldValueEquals("field_telephone[0][value]", '');
     $this->assertRaw('placeholder="123-456-7890"');
   }
 
diff --git a/core/modules/text/tests/src/Functional/TextFieldTest.php b/core/modules/text/tests/src/Functional/TextFieldTest.php
index 7d2ba628..1dbd9d82 100644
--- a/core/modules/text/tests/src/Functional/TextFieldTest.php
+++ b/core/modules/text/tests/src/Functional/TextFieldTest.php
@@ -196,8 +196,8 @@ public function _testTextfieldWidgetsFormatted($field_type, $widget_type) {
     // Display the creation form. Since the user only has access to one format,
     // no format selector will be displayed.
     $this->drupalGet('entity_test/add');
-    $this->assertFieldByName("{$field_name}[0][value]", '', 'Widget is displayed');
-    $this->assertNoFieldByName("{$field_name}[0][format]", '', 'Format selector is not displayed');
+    $this->assertSession()->fieldValueEquals("{$field_name}[0][value]", '');
+    $this->assertSession()->fieldNotExists("{$field_name}[0][format]");
 
     // Submit with data that should be filtered.
     $value = '<em>' . $this->randomMachineName() . '</em>';
@@ -237,8 +237,8 @@ public function _testTextfieldWidgetsFormatted($field_type, $widget_type) {
     // Display edition form.
     // We should now have a 'text format' selector.
     $this->drupalGet('entity_test/manage/' . $id . '/edit');
-    $this->assertFieldByName("{$field_name}[0][value]", NULL, 'Widget is displayed');
-    $this->assertFieldByName("{$field_name}[0][format]", NULL, 'Format selector is displayed');
+    $this->assertSession()->fieldExists("{$field_name}[0][value]");
+    $this->assertSession()->fieldExists("{$field_name}[0][format]");
 
     // Edit and change the text format to the new one that was created.
     $edit = [
diff --git a/core/modules/user/tests/src/Functional/UserEditTest.php b/core/modules/user/tests/src/Functional/UserEditTest.php
index f15597c4..26e29140 100644
--- a/core/modules/user/tests/src/Functional/UserEditTest.php
+++ b/core/modules/user/tests/src/Functional/UserEditTest.php
@@ -37,7 +37,7 @@ public function testUserEdit() {
     \Drupal::service('module_installer')->install(['user_hooks_test']);
     Cache::invalidateTags(['rendered']);
     $this->drupalGet('user/' . $user1->id() . '/edit');
-    $this->assertFieldByName('name', $user1->getAccountName());
+    $this->assertSession()->fieldValueEquals('name', $user1->getAccountName());
 
     // Ensure the formatted name is displayed when expected.
     $this->drupalGet('user/' . $user1->id());
diff --git a/core/modules/user/tests/src/Functional/UserLanguageCreationTest.php b/core/modules/user/tests/src/Functional/UserLanguageCreationTest.php
index bc402432..5f3d065d 100644
--- a/core/modules/user/tests/src/Functional/UserLanguageCreationTest.php
+++ b/core/modules/user/tests/src/Functional/UserLanguageCreationTest.php
@@ -73,7 +73,7 @@ public function testLocalUserCreation() {
     $this->drupalLogout();
 
     $this->drupalGet($langcode . '/user/register');
-    $this->assertNoFieldByName('language[fr]', 'Language selector is not accessible.');
+    $this->assertSession()->fieldNotExists('language[fr]');
 
     $username = $this->randomMachineName(10);
     $edit = [
diff --git a/core/modules/user/tests/src/Functional/UserPasswordResetTest.php b/core/modules/user/tests/src/Functional/UserPasswordResetTest.php
index 25d4c8ad..8428f18c 100644
--- a/core/modules/user/tests/src/Functional/UserPasswordResetTest.php
+++ b/core/modules/user/tests/src/Functional/UserPasswordResetTest.php
@@ -282,10 +282,10 @@ public function testUserResetPasswordTextboxFilled() {
       [':password' => Url::fromRoute('user.pass', [], ['query' => ['name' => $edit['name']]])->toString()]));
     unset($edit['pass']);
     $this->drupalGet('user/password', ['query' => ['name' => $edit['name']]]);
-    $this->assertFieldByName('name', $edit['name'], 'User name found.');
+    $this->assertSession()->fieldValueEquals('name', $edit['name']);
     // Ensure the name field value is not cached.
     $this->drupalGet('user/password');
-    $this->assertNoFieldByName('name', $edit['name'], 'User name not found.');
+    $this->assertSession()->fieldValueNotEquals('name', $edit['name']);
   }
 
   /**
diff --git a/core/modules/user/tests/src/Functional/UserPermissionsTest.php b/core/modules/user/tests/src/Functional/UserPermissionsTest.php
index bbf8c442..d755c39e 100644
--- a/core/modules/user/tests/src/Functional/UserPermissionsTest.php
+++ b/core/modules/user/tests/src/Functional/UserPermissionsTest.php
@@ -141,7 +141,7 @@ public function testAdministratorRole() {
     Role::create(['id' => 'admin_role_0', 'is_admin' => TRUE, 'label' => 'Admin role 0'])->save();
     Role::create(['id' => 'admin_role_1', 'is_admin' => TRUE, 'label' => 'Admin role 1'])->save();
     $this->drupalGet('admin/config/people/accounts');
-    $this->assertNoFieldByName('user_admin_role');
+    $this->assertSession()->fieldNotExists('user_admin_role');
   }
 
   /**
diff --git a/core/modules/views/tests/src/Functional/Handler/FilterDateTest.php b/core/modules/views/tests/src/Functional/Handler/FilterDateTest.php
index 06fe2b35..44020ba5 100644
--- a/core/modules/views/tests/src/Functional/Handler/FilterDateTest.php
+++ b/core/modules/views/tests/src/Functional/Handler/FilterDateTest.php
@@ -227,7 +227,7 @@ protected function _testFilterDateUI() {
 
     $this->drupalGet('admin/structure/views/nojs/handler/test_filter_date_between/default/filter/created');
     foreach ($edit as $name => $value) {
-      $this->assertFieldByName($name, $value);
+      $this->assertSession()->fieldValueEquals($name, $value);
       if (strpos($name, '[value][type]')) {
         $radio = $this->cssSelect('input[name="' . $name . '"][checked="checked"][type="radio"]');
         $this->assertEqual($radio[0]->getAttribute('value'), $value);
diff --git a/core/modules/views/tests/src/Functional/Handler/HandlerTest.php b/core/modules/views/tests/src/Functional/Handler/HandlerTest.php
index 79b6ed8c..c010394c 100644
--- a/core/modules/views/tests/src/Functional/Handler/HandlerTest.php
+++ b/core/modules/views/tests/src/Functional/Handler/HandlerTest.php
@@ -263,7 +263,7 @@ public function testRelationshipUI() {
 
     $this->drupalGet($handler_options_path);
     $relationship_name = 'options[relationship]';
-    $this->assertFieldByName($relationship_name);
+    $this->assertSession()->fieldExists($relationship_name);
 
     // Check for available options.
     $fields = $this->getSession()->getPage()->findAll('named_exact', ['field', $relationship_name]);
@@ -280,7 +280,7 @@ public function testRelationshipUI() {
     // Remove the relationship and make sure no relationship option appears.
     $this->drupalPostForm('admin/structure/views/nojs/handler/test_handler_relationships/default/relationship/nid', [], t('Remove'));
     $this->drupalGet($handler_options_path);
-    $this->assertNoFieldByName($relationship_name, NULL, 'Make sure that no relationship option is available');
+    $this->assertSession()->fieldNotExists($relationship_name);
 
     // Create a view of comments with node relationship.
     View::create(['base_table' => 'comment_field_data', 'id' => 'test_get_entity_type'])->save();
diff --git a/core/modules/views/tests/src/Functional/Plugin/ExposedFormTest.php b/core/modules/views/tests/src/Functional/Plugin/ExposedFormTest.php
index 81ec1bf0..c890526b 100644
--- a/core/modules/views/tests/src/Functional/Plugin/ExposedFormTest.php
+++ b/core/modules/views/tests/src/Functional/Plugin/ExposedFormTest.php
@@ -426,15 +426,15 @@ public function testExposedFilterPagination() {
 
     // Ensure the filters can be applied.
     $this->getSession()->getPage()->pressButton('Apply');
-    $this->assertFieldByName('type[]', 'post');
-    $this->assertFieldByName('created[min]', '-1 month');
-    $this->assertFieldByName('created[max]', '+1 month');
+    $this->assertTrue($this->assertSession()->optionExists('type[]', 'post')->isSelected());
+    $this->assertSession()->fieldValueEquals('created[min]', '-1 month');
+    $this->assertSession()->fieldValueEquals('created[max]', '+1 month');
 
     // Ensure the filters are still applied after pressing next.
     $this->clickLink('Next ›');
-    $this->assertFieldByName('type[]', 'post');
-    $this->assertFieldByName('created[min]', '-1 month');
-    $this->assertFieldByName('created[max]', '+1 month');
+    $this->assertTrue($this->assertSession()->optionExists('type[]', 'post')->isSelected());
+    $this->assertSession()->fieldValueEquals('created[min]', '-1 month');
+    $this->assertSession()->fieldValueEquals('created[max]', '+1 month');
   }
 
 }
diff --git a/core/modules/views/tests/src/Functional/Plugin/NumericFormatPluralTest.php b/core/modules/views/tests/src/Functional/Plugin/NumericFormatPluralTest.php
index a1370e1d..deacd5f9 100644
--- a/core/modules/views/tests/src/Functional/Plugin/NumericFormatPluralTest.php
+++ b/core/modules/views/tests/src/Functional/Plugin/NumericFormatPluralTest.php
@@ -62,8 +62,8 @@ public function testNumericFormatPlural() {
 
     // Assert that the user interface has controls to change it.
     $this->drupalGet('admin/structure/views/nojs/handler/numeric_test/page_1/field/count');
-    $this->assertFieldByName('options[format_plural_values][0]', '1');
-    $this->assertFieldByName('options[format_plural_values][1]', '@count');
+    $this->assertSession()->fieldValueEquals('options[format_plural_values][0]', '1');
+    $this->assertSession()->fieldValueEquals('options[format_plural_values][1]', '@count');
 
     // Assert that changing the settings will change configuration properly.
     $edit = ['options[format_plural_values][0]' => '1 time', 'options[format_plural_values][1]' => '@count times'];
@@ -99,10 +99,10 @@ public function testNumericFormatPlural() {
 
     // Assert that the user interface has controls with more inputs now.
     $this->drupalGet('admin/structure/views/nojs/handler/numeric_test/page_1/field/count');
-    $this->assertFieldByName('options[format_plural_values][0]', '1 time');
-    $this->assertFieldByName('options[format_plural_values][1]', '@count times');
-    $this->assertFieldByName('options[format_plural_values][2]', '');
-    $this->assertFieldByName('options[format_plural_values][3]', '');
+    $this->assertSession()->fieldValueEquals('options[format_plural_values][0]', '1 time');
+    $this->assertSession()->fieldValueEquals('options[format_plural_values][1]', '@count times');
+    $this->assertSession()->fieldValueEquals('options[format_plural_values][2]', '');
+    $this->assertSession()->fieldValueEquals('options[format_plural_values][3]', '');
 
     // Assert that changing the settings will change configuration properly.
     $edit = [
diff --git a/core/modules/views/tests/src/Functional/Plugin/PagerTest.php b/core/modules/views/tests/src/Functional/Plugin/PagerTest.php
index c9c0a36c..1c834957 100644
--- a/core/modules/views/tests/src/Functional/Plugin/PagerTest.php
+++ b/core/modules/views/tests/src/Functional/Plugin/PagerTest.php
@@ -148,9 +148,9 @@ public function testStorePagerSettings() {
 
     // Test that the override element is only displayed on pager plugin selection form.
     $this->drupalGet('admin/structure/views/nojs/display/test_store_pager_settings/page_1/pager');
-    $this->assertFieldByName('override[dropdown]', 'page_1', 'The override element is displayed on plugin selection form.');
+    $this->assertSession()->fieldValueEquals('override[dropdown]', 'page_1');
     $this->drupalGet('admin/structure/views/nojs/display/test_store_pager_settings/page_1/pager_options');
-    $this->assertNoFieldByName('override[dropdown]', NULL, 'The override element is not displayed on plugin settings form.');
+    $this->assertSession()->fieldNotExists('override[dropdown]');
 
     $this->assertFieldByXPath('//input[@name="pager_options[items_per_page]" and @type="number" and @min="0"]', 20, '"Items per page" field was found.');
     $this->assertFieldByXPath('//input[@name="pager_options[offset]" and @type="number" and @min="0"]', 0, '"Offset" field was found.');
diff --git a/core/modules/views_ui/tests/src/Functional/AreaEntityUITest.php b/core/modules/views_ui/tests/src/Functional/AreaEntityUITest.php
index 2d7b966a..7810aec5 100644
--- a/core/modules/views_ui/tests/src/Functional/AreaEntityUITest.php
+++ b/core/modules/views_ui/tests/src/Functional/AreaEntityUITest.php
@@ -63,10 +63,10 @@ public function testUI() {
     // Confirm that the correct serial ID (for the entity_test) and config ID
     // (for the block) are displayed in the form.
     $this->drupalGet("admin/structure/views/nojs/handler/$id/page_1/header/entity_block");
-    $this->assertFieldByName('options[target]', $block->id());
+    $this->assertSession()->fieldValueEquals('options[target]', $block->id());
 
     $this->drupalGet("admin/structure/views/nojs/handler/$id/page_1/header/entity_entity_test");
-    $this->assertFieldByName('options[target]', $entity_test->id());
+    $this->assertSession()->fieldValueEquals('options[target]', $entity_test->id());
 
     // Replace the header target entities with argument placeholders.
     $this->drupalPostForm("admin/structure/views/nojs/handler/$id/page_1/header/entity_block", ['options[target]' => '{{ raw_arguments.null }}'], 'Apply');
@@ -83,10 +83,10 @@ public function testUI() {
 
     // Confirm that the argument placeholders are still displayed in the form.
     $this->drupalGet("admin/structure/views/nojs/handler/$id/page_1/header/entity_block");
-    $this->assertFieldByName('options[target]', '{{ raw_arguments.null }}');
+    $this->assertSession()->fieldValueEquals('options[target]', '{{ raw_arguments.null }}');
 
     $this->drupalGet("admin/structure/views/nojs/handler/$id/page_1/header/entity_entity_test");
-    $this->assertFieldByName('options[target]', '{{ raw_arguments.null }}');
+    $this->assertSession()->fieldValueEquals('options[target]', '{{ raw_arguments.null }}');
 
     // Change the targets for both headers back to the entities.
     $this->drupalPostForm("admin/structure/views/nojs/handler/$id/page_1/header/entity_block", ['options[target]' => $block->id()], 'Apply');
diff --git a/core/modules/views_ui/tests/src/Functional/DisplayTest.php b/core/modules/views_ui/tests/src/Functional/DisplayTest.php
index 9d61929e..ae89dfa7 100644
--- a/core/modules/views_ui/tests/src/Functional/DisplayTest.php
+++ b/core/modules/views_ui/tests/src/Functional/DisplayTest.php
@@ -179,7 +179,7 @@ public function testLinkDisplay() {
     $this->drupalPostForm(NULL, [], t('Add Block'));
     $this->assertSession()->addressEquals('admin/structure/views/view/test_display/edit/block_2');
     $this->clickLink(t('Custom URL'));
-    $this->assertFieldByName('link_url', 'a-custom-url');
+    $this->assertSession()->fieldValueEquals('link_url', 'a-custom-url');
   }
 
   /**
diff --git a/core/modules/views_ui/tests/src/Functional/ExposedFormUITest.php b/core/modules/views_ui/tests/src/Functional/ExposedFormUITest.php
index ac5bc976..5b765457 100644
--- a/core/modules/views_ui/tests/src/Functional/ExposedFormUITest.php
+++ b/core/modules/views_ui/tests/src/Functional/ExposedFormUITest.php
@@ -131,7 +131,7 @@ public function testExposedAdminUi() {
     $this->drupalPostForm(NULL, ['options[order]' => 'DESC'], t('Apply'));
     $this->drupalPostForm("admin/structure/views/nojs/handler/$view_id/default/sort/created", [], t('Expose sort'));
     $this->assertFieldByXPath('//input[@name="options[order]" and @checked="checked"]', 'DESC');
-    $this->assertFieldByName('options[expose][label]', 'Authored on', 'The default label is set.');
+    $this->assertSession()->fieldValueEquals('options[expose][label]', 'Authored on');
     // Change the label and save the view.
     $edit = ['options[expose][label]' => $this->randomString()];
     $this->drupalPostForm(NULL, $edit, t('Apply'));
diff --git a/core/modules/views_ui/tests/src/Functional/FilterBooleanWebTest.php b/core/modules/views_ui/tests/src/Functional/FilterBooleanWebTest.php
index ea3efb5c..712c40e2 100644
--- a/core/modules/views_ui/tests/src/Functional/FilterBooleanWebTest.php
+++ b/core/modules/views_ui/tests/src/Functional/FilterBooleanWebTest.php
@@ -71,7 +71,7 @@ public function testFilterBooleanUI() {
     $edit['options[group_info][group_items][3][remove]'] = 1;
     $this->drupalPostForm(NULL, $edit, t('Apply'));
     $this->drupalGet('admin/structure/views/nojs/handler/test_view/default/filter/status');
-    $this->assertFieldByName('options[group_info][default_group]', 2, 'Second item was set as the default.');
+    $this->assertSession()->fieldValueEquals('options[group_info][default_group]', 2);
     $this->assertSession()->fieldNotExists('options[group_info][group_items][3][remove]');
   }
 
diff --git a/core/modules/views_ui/tests/src/Functional/FilterNumericWebTest.php b/core/modules/views_ui/tests/src/Functional/FilterNumericWebTest.php
index 736b5287..44e3d404 100644
--- a/core/modules/views_ui/tests/src/Functional/FilterNumericWebTest.php
+++ b/core/modules/views_ui/tests/src/Functional/FilterNumericWebTest.php
@@ -56,7 +56,7 @@ public function testFilterNumericUI() {
 
     $this->drupalGet('admin/structure/views/nojs/handler/test_view/default/filter/age');
     foreach ($edit as $name => $value) {
-      $this->assertFieldByName($name, $value);
+      $this->assertSession()->fieldValueEquals($name, $value);
     }
 
     $this->drupalPostForm('admin/structure/views/view/test_view', [], t('Save'));
diff --git a/core/modules/views_ui/tests/src/Functional/FilterUITest.php b/core/modules/views_ui/tests/src/Functional/FilterUITest.php
index f6fb198f..b61a6b92 100644
--- a/core/modules/views_ui/tests/src/Functional/FilterUITest.php
+++ b/core/modules/views_ui/tests/src/Functional/FilterUITest.php
@@ -50,7 +50,7 @@ public function testFilterInOperatorUi() {
     $path = 'admin/structure/views/nojs/handler/test_filter_in_operator_ui/default/filter/type';
     $this->drupalGet($path);
     // Verifies that "Limit list to selected items" option is not selected.
-    $this->assertFieldByName('options[expose][reduce]', FALSE);
+    $this->assertSession()->fieldValueEquals('options[expose][reduce]', FALSE);
 
     // Select "Limit list to selected items" option and apply.
     $edit = [
@@ -60,7 +60,7 @@ public function testFilterInOperatorUi() {
 
     // Verifies that the option was saved as expected.
     $this->drupalGet($path);
-    $this->assertFieldByName('options[expose][reduce]', TRUE);
+    $this->assertSession()->fieldValueEquals('options[expose][reduce]', TRUE);
   }
 
   /**
diff --git a/core/modules/views_ui/tests/src/Functional/HandlerTest.php b/core/modules/views_ui/tests/src/Functional/HandlerTest.php
index 6c27e0b4..44e730d3 100644
--- a/core/modules/views_ui/tests/src/Functional/HandlerTest.php
+++ b/core/modules/views_ui/tests/src/Functional/HandlerTest.php
@@ -159,7 +159,7 @@ public function testUICRUD() {
 
     // Verify that the user got redirected to the handler edit form.
     $this->assertSession()->addressEquals($edit_handler_url);
-    $this->assertFieldByName('options[relationship]', 'uid', 'Ensure the relationship select is filled with the UID relationship.');
+    $this->assertSession()->fieldValueEquals('options[relationship]', 'uid');
     $this->drupalPostForm(NULL, [], t('Apply'));
 
     $this->drupalPostForm(NULL, [], t('Save'));
diff --git a/core/modules/views_ui/tests/src/Functional/PreviewTest.php b/core/modules/views_ui/tests/src/Functional/PreviewTest.php
index 618aafe5..0125942c 100644
--- a/core/modules/views_ui/tests/src/Functional/PreviewTest.php
+++ b/core/modules/views_ui/tests/src/Functional/PreviewTest.php
@@ -38,7 +38,7 @@ public function testPreviewContextual() {
     $this->drupalPostForm(NULL, $edit = ['view_args' => '100'], t('Update preview'));
 
     // Test that area text and exposed filters are present and rendered.
-    $this->assertFieldByName('id', NULL, 'ID exposed filter field found.');
+    $this->assertSession()->fieldExists('id');
     $this->assertText('Test header text', 'Rendered header text found');
     $this->assertText('Test footer text', 'Rendered footer text found.');
     $this->assertText('Test empty text', 'Rendered empty text found.');
@@ -69,7 +69,7 @@ public function testPreviewUI() {
     $this->assertCount(0, $elements);
 
     // Test that area text and exposed filters are present and rendered.
-    $this->assertFieldByName('id', NULL, 'ID exposed filter field found.');
+    $this->assertSession()->fieldExists('id');
     $this->assertText('Test header text', 'Rendered header text found');
     $this->assertText('Test footer text', 'Rendered footer text found.');
     $this->assertText('Test empty text', 'Rendered empty text found.');
diff --git a/core/modules/views_ui/tests/src/Functional/RowUITest.php b/core/modules/views_ui/tests/src/Functional/RowUITest.php
index afbdb443..7e5336ea 100644
--- a/core/modules/views_ui/tests/src/Functional/RowUITest.php
+++ b/core/modules/views_ui/tests/src/Functional/RowUITest.php
@@ -36,20 +36,22 @@ public function testRowUI() {
     $row_options_url = "admin/structure/views/nojs/display/$view_name/default/row_options";
 
     $this->drupalGet($row_plugin_url);
-    $this->assertFieldByName('row[type]', 'fields', 'The default row plugin selected in the UI should be fields.');
+    $this->assertSession()->fieldValueEquals('row[type]', 'fields');
 
     $edit = [
       'row[type]' => 'test_row',
     ];
     $this->drupalPostForm(NULL, $edit, t('Apply'));
-    $this->assertFieldByName('row_options[test_option]', NULL, 'Make sure the custom settings form from the test plugin appears.');
+    // Make sure the custom settings form from the test plugin appears.
+    $this->assertSession()->fieldExists('row_options[test_option]');
     $random_name = $this->randomMachineName();
     $edit = [
       'row_options[test_option]' => $random_name,
     ];
     $this->drupalPostForm(NULL, $edit, t('Apply'));
     $this->drupalGet($row_options_url);
-    $this->assertFieldByName('row_options[test_option]', $random_name, 'Make sure the custom settings form field has the expected value stored.');
+    // Make sure the custom settings form field has the expected value stored.
+    $this->assertSession()->fieldValueEquals('row_options[test_option]', $random_name);
 
     $this->drupalPostForm($view_edit_url, [], t('Save'));
     $this->assertSession()->linkExists('Test row plugin', 0, 'Make sure the test row plugin is shown in the UI');
@@ -63,7 +65,8 @@ public function testRowUI() {
     $this->drupalPostForm($row_plugin_url, ['row[type]' => 'fields'], 'Apply');
     $this->drupalGet($row_plugin_url);
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertFieldByName('row[type]', 'fields', 'Make sure that the fields got saved as used row plugin.');
+    // Make sure that 'fields' was saved as the row plugin.
+    $this->assertSession()->fieldValueEquals('row[type]', 'fields');
 
     // Ensure that entity row plugins appear.
     $view_name = 'content';
@@ -71,10 +74,10 @@ public function testRowUI() {
     $row_options_url = "admin/structure/views/nojs/display/$view_name/default/row_options";
 
     $this->drupalGet($row_plugin_url);
-    $this->assertFieldByName('row[type]', 'entity:node');
     $this->drupalPostForm(NULL, ['row[type]' => 'entity:node'], t('Apply'));
     $this->assertSession()->addressEquals($row_options_url);
-    $this->assertFieldByName('row_options[view_mode]', 'teaser');
+    // Make sure the custom settings form from the entity row plugin appears.
+    $this->assertSession()->fieldValueEquals('row_options[view_mode]', 'teaser');
 
     // Change the teaser label to have markup so we can test escaping.
     $teaser = EntityViewMode::load('node.teaser');
diff --git a/core/modules/views_ui/tests/src/Functional/StyleUITest.php b/core/modules/views_ui/tests/src/Functional/StyleUITest.php
index a6f0f744..7fa30191 100644
--- a/core/modules/views_ui/tests/src/Functional/StyleUITest.php
+++ b/core/modules/views_ui/tests/src/Functional/StyleUITest.php
@@ -35,20 +35,20 @@ public function testStyleUI() {
     $style_options_url = "admin/structure/views/nojs/display/$view_name/default/style_options";
 
     $this->drupalGet($style_plugin_url);
-    $this->assertFieldByName('style[type]', 'default', 'The default style plugin selected in the UI should be unformatted list.');
+    $this->assertSession()->fieldValueEquals('style[type]', 'default');
 
     $edit = [
       'style[type]' => 'test_style',
     ];
     $this->drupalPostForm(NULL, $edit, t('Apply'));
-    $this->assertFieldByName('style_options[test_option]', NULL, 'Make sure the custom settings form from the test plugin appears.');
+    $this->assertSession()->fieldExists('style_options[test_option]');
     $random_name = $this->randomMachineName();
     $edit = [
       'style_options[test_option]' => $random_name,
     ];
     $this->drupalPostForm(NULL, $edit, t('Apply'));
     $this->drupalGet($style_options_url);
-    $this->assertFieldByName('style_options[test_option]', $random_name, 'Make sure the custom settings form field has the expected value stored.');
+    $this->assertSession()->fieldValueEquals('style_options[test_option]', $random_name);
 
     $this->drupalPostForm($view_edit_url, [], t('Save'));
     $this->assertSession()->linkExists('Test style plugin', 0, 'Make sure the test style plugin is shown in the UI');
diff --git a/core/modules/views_ui/tests/src/Functional/ViewEditTest.php b/core/modules/views_ui/tests/src/Functional/ViewEditTest.php
index f39de448..fc6fc90a 100644
--- a/core/modules/views_ui/tests/src/Functional/ViewEditTest.php
+++ b/core/modules/views_ui/tests/src/Functional/ViewEditTest.php
@@ -168,7 +168,7 @@ public function testEditFormLanguageOptions() {
         $this->assertText(t('The view is not based on a translatable entity type or the site is not multilingual.'));
       }
       else {
-        $this->assertFieldByName('rendering_language', '***LANGUAGE_entity_translation***');
+        $this->assertSession()->fieldValueEquals('rendering_language', '***LANGUAGE_entity_translation***');
         // Test that the order of the language list is similar to other language
         // lists, such as in the content translation settings.
         $expected_elements = [
diff --git a/core/profiles/standard/tests/src/Functional/StandardTest.php b/core/profiles/standard/tests/src/Functional/StandardTest.php
index 54b3861e..ee92f497 100644
--- a/core/profiles/standard/tests/src/Functional/StandardTest.php
+++ b/core/profiles/standard/tests/src/Functional/StandardTest.php
@@ -99,7 +99,7 @@ public function testStandard() {
 
     // Ensure block body exists.
     $this->drupalGet('block/add');
-    $this->assertFieldByName('body[0][value]');
+    $this->assertSession()->fieldExists('body[0][value]');
 
     // Now we have all configuration imported, test all of them for schema
     // conformance. Ensures all imported default configuration is valid when
diff --git a/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php b/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php
index 4be2efc6..0e73371e 100644
--- a/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php
+++ b/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php
@@ -472,53 +472,29 @@ public function testFieldAssertsForTextfields() {
       // Expected exception; just continue testing.
     }
 
-    // *** 5. assertNoFieldByName().
-    $this->assertNoFieldByName('name');
-    $this->assertNoFieldByName('name', 'not the value');
-    $this->assertNoFieldByName('notexisting');
-    $this->assertNoFieldByName('notexisting', NULL);
+    // *** 5. fieldValueNotEquals().
+    $this->assertSession()->fieldValueNotEquals('name', 'not the value');
 
-    // Test that the assertion fails correctly if no value is passed in.
+    // Test that the assertion fails correctly if given the right value.
     try {
-      $this->assertNoFieldByName('description');
-      $this->fail('The "description" field, with no value was not found.');
+      $this->assertSession()->fieldValueNotEquals('name', 'Test name');
+      $this->fail('fieldValueNotEquals failed to throw an exception.');
     }
     catch (ExpectationException $e) {
       // Expected exception; just continue testing.
     }
 
-    // Test that the assertion fails correctly if a NULL value is passed in.
-    try {
-      $this->assertNoFieldByName('name', NULL);
-      $this->fail('The "name" field was not found.');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
-
-    // *** 6. assertFieldByName().
-    $this->assertFieldByName('name');
-    $this->assertFieldByName('name', NULL);
-    $this->assertFieldByName('name', 'Test name');
-    $this->assertFieldByName('description');
-    $this->assertFieldByName('description', '');
-    $this->assertFieldByName('description', NULL);
-
-    // Test that the assertion fails correctly if given the wrong name.
-    try {
-      $this->assertFieldByName('non-existing-name');
-      $this->fail('The "non-existing-name" field was found.');
-    }
-    catch (ExpectationFailedException $e) {
-      // Expected exception; just continue testing.
-    }
+    // *** 6. fieldValueEquals().
+    $this->assertSession()->fieldValueEquals('name', 'Test name');
+    $this->assertSession()->fieldValueEquals('description', '');
+    $this->assertSession()->fieldValueEquals('description', NULL);
 
     // Test that the assertion fails correctly if given the wrong value.
     try {
-      $this->assertFieldByName('name', 'not the value');
-      $this->fail('The "name" field with incorrect value was found.');
+      $this->assertSession()->fieldValueEquals('name', 'not the value');
+      $this->fail('fieldValueEquals failed to throw an exception.');
     }
-    catch (ExpectationFailedException $e) {
+    catch (ExpectationException $e) {
       // Expected exception; just continue testing.
     }
 
@@ -613,12 +589,13 @@ public function testFieldAssertsForButton() {
     }
 
     // Test that multiple fields with the same name are validated correctly.
-    $this->assertFieldByName('duplicate_button', 'Duplicate button 1');
-    $this->assertFieldByName('duplicate_button', 'Duplicate button 2');
-    $this->assertNoFieldByName('duplicate_button', 'Rabbit');
+    $this->assertSession()->buttonExists('duplicate_button');
+    $this->assertSession()->buttonExists('Duplicate button 1');
+    $this->assertSession()->buttonExists('Duplicate button 2');
+    $this->assertSession()->buttonNotExists('Rabbit');
 
     try {
-      $this->assertNoFieldByName('duplicate_button', 'Duplicate button 2');
+      $this->assertSession()->buttonNotExists('Duplicate button 2');
       $this->fail('The "duplicate_button" field with the value Duplicate button 2 was not found.');
     }
     catch (ExpectationException $e) {
@@ -648,28 +625,21 @@ public function testFieldAssertsForCheckbox() {
     // Part 1 - Test by name.
     // Test that checkboxes are found/not found correctly by name, when using
     // TRUE or FALSE to match their 'checked' state.
-    $this->assertFieldByName('checkbox_enabled', TRUE);
-    $this->assertFieldByName('checkbox_disabled', FALSE);
-    $this->assertNoFieldByName('checkbox_enabled', FALSE);
-    $this->assertNoFieldByName('checkbox_disabled', TRUE);
-
-    // Test that checkboxes are found by name when using NULL to ignore the
-    // 'checked' state.
-    $this->assertFieldByName('checkbox_enabled', NULL);
-    $this->assertFieldByName('checkbox_disabled', NULL);
-
-    // Test that checkboxes are found by name when passing no second parameter.
-    $this->assertFieldByName('checkbox_enabled');
-    $this->assertFieldByName('checkbox_disabled');
+    $this->assertSession()->fieldExists('checkbox_enabled');
+    $this->assertSession()->fieldExists('checkbox_disabled');
+    $this->assertSession()->fieldValueEquals('checkbox_enabled', TRUE);
+    $this->assertSession()->fieldValueEquals('checkbox_disabled', FALSE);
+    $this->assertSession()->fieldValueNotEquals('checkbox_enabled', FALSE);
+    $this->assertSession()->fieldValueNotEquals('checkbox_disabled', TRUE);
 
     // Test that we have legacy support.
-    $this->assertFieldByName('checkbox_enabled', '1');
-    $this->assertFieldByName('checkbox_disabled', '');
+    $this->assertSession()->fieldValueEquals('checkbox_enabled', '1');
+    $this->assertSession()->fieldValueEquals('checkbox_disabled', '');
 
-    // Test that the assertion fails correctly when using NULL to ignore state.
+    // Test that the assertion fails correctly if given the right value.
     try {
-      $this->assertNoFieldByName('checkbox_enabled', NULL);
-      $this->fail('The "checkbox_enabled" field was not found by name, using NULL value.');
+      $this->assertSession()->fieldValueNotEquals('checkbox_enabled', TRUE);
+      $this->fail('fieldValueNotEquals failed to throw an exception.');
     }
     catch (ExpectationException $e) {
       // Expected exception; just continue testing.
@@ -917,4 +887,17 @@ public function testDeprecationHeaders() {
     $this->assertCount(1, $test_deprecation_messages);
   }
 
+  /**
+   * Tests legacy assertFieldByName() and assertNoFieldByName().
+   *
+   * @group legacy
+   * @expectedDeprecation AssertLegacyTrait::assertFieldByName() is deprecated in drupal:8.2.0 and is removed from drupal:10.0.0. Use $this->assertSession()->fieldExists() or $this->assertSession()->buttonExists() or $this->assertSession()->fieldValueEquals() instead. See https://www.drupal.org/node/3129738
+   * @expectedDeprecation AssertLegacyTrait::assertNoFieldByName() is deprecated in drupal:8.2.0 and is removed from drupal:10.0.0. Use $this->assertSession()->fieldNotExists() or $this->assertSession()->buttonNotExists() or $this->assertSession()->fieldValueNotEquals() instead. See https://www.drupal.org/node/3129738
+   */
+  public function testLegacyFieldAssertsByName() {
+    $this->drupalGet('test-field-xpath');
+    $this->assertFieldByName('checkbox_enabled', TRUE);
+    $this->assertNoFieldByName('checkbox_enabled', FALSE);
+  }
+
 }
diff --git a/core/tests/Drupal/FunctionalTests/Image/ToolkitSetupFormTest.php b/core/tests/Drupal/FunctionalTests/Image/ToolkitSetupFormTest.php
index 896675d5..eb35f135 100644
--- a/core/tests/Drupal/FunctionalTests/Image/ToolkitSetupFormTest.php
+++ b/core/tests/Drupal/FunctionalTests/Image/ToolkitSetupFormTest.php
@@ -49,7 +49,7 @@ public function testToolkitSetupForm() {
     $this->drupalGet('admin/config/media/image-toolkit');
 
     // Test that default toolkit is GD.
-    $this->assertFieldByName('image_toolkit', 'gd', 'The default image toolkit is GD.');
+    $this->assertSession()->fieldValueEquals('image_toolkit', 'gd');
 
     // Test changing the jpeg image quality.
     $edit = ['gd[image_jpeg_quality]' => '70'];
@@ -60,7 +60,7 @@ public function testToolkitSetupForm() {
     $edit = ['image_toolkit' => 'test'];
     $this->drupalPostForm(NULL, $edit, 'Save configuration');
     $this->assertEqual($this->config('system.image')->get('toolkit'), 'test');
-    $this->assertFieldByName('test[test_parameter]', '10');
+    $this->assertSession()->fieldValueEquals('test[test_parameter]', '10');
 
     // Test changing the test toolkit parameter.
     $edit = ['test[test_parameter]' => '0'];
diff --git a/core/tests/Drupal/FunctionalTests/Installer/InstallerSiteConfigProfileTest.php b/core/tests/Drupal/FunctionalTests/Installer/InstallerSiteConfigProfileTest.php
index a0483aba..a1552e9a 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/InstallerSiteConfigProfileTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/InstallerSiteConfigProfileTest.php
@@ -51,8 +51,8 @@ protected function installParameters() {
    * {@inheritdoc}
    */
   protected function setUpSite() {
-    $this->assertFieldByName('site_mail', self::EXPECTED_SITE_MAIL);
-    $this->assertFieldByName('date_default_timezone', self::EXPECTED_TIMEZONE);
+    $this->assertSession()->fieldValueEquals('site_mail', self::EXPECTED_SITE_MAIL);
+    $this->assertSession()->fieldValueEquals('date_default_timezone', self::EXPECTED_TIMEZONE);
 
     return parent::setUpSite();
   }
diff --git a/core/tests/Drupal/Tests/Listeners/DeprecationListenerTrait.php b/core/tests/Drupal/Tests/Listeners/DeprecationListenerTrait.php
index 5f76329b..42a5fa3a 100644
--- a/core/tests/Drupal/Tests/Listeners/DeprecationListenerTrait.php
+++ b/core/tests/Drupal/Tests/Listeners/DeprecationListenerTrait.php
@@ -127,8 +127,6 @@ public static function getSkippedDeprecations() {
       'AssertLegacyTrait::assertText() is deprecated in drupal:8.2.0 and is removed from drupal:10.0.0. Use $this->assertSession()->responseContains() or $this->assertSession()->pageTextContains() instead. See https://www.drupal.org/node/3129738',
       'AssertLegacyTrait::assertNoText() is deprecated in drupal:8.2.0 and is removed from drupal:10.0.0. Use $this->assertSession()->responseNotContains() or $this->assertSession()->pageTextNotContains() instead. See https://www.drupal.org/node/3129738',
       'AssertLegacyTrait::assertText() is deprecated in drupal:8.2.0 and is removed from drupal:10.0.0. Use $this->assertSession()->pageTextContains() or $this->assertSession()->pageTextNotContains() instead. See https://www.drupal.org/node/3129738',
-      'AssertLegacyTrait::assertFieldByName() is deprecated in drupal:8.2.0 and is removed from drupal:10.0.0. Use $this->assertSession()->fieldExists() or $this->assertSession()->buttonExists() or $this->assertSession()->fieldValueEquals() instead. See https://www.drupal.org/node/3129738',
-      'AssertLegacyTrait::assertNoFieldByName() is deprecated in drupal:8.2.0 and is removed from drupal:10.0.0. Use $this->assertSession()->fieldNotExists() or $this->assertSession()->buttonNotExists() or $this->assertSession()->fieldValueNotEquals() instead. See https://www.drupal.org/node/3129738',
       'AssertLegacyTrait::assertFieldById() is deprecated in drupal:8.2.0 and is removed from drupal:10.0.0. Use $this->assertSession()->fieldExists() or $this->assertSession()->buttonExists() or $this->assertSession()->fieldValueEquals() instead. See https://www.drupal.org/node/3129738',
       'AssertLegacyTrait::assertRaw() is deprecated in drupal:8.2.0 and is removed from drupal:10.0.0. Use $this->assertSession()->responseContains() instead. See https://www.drupal.org/node/3129738',
       'AssertLegacyTrait::assertNoRaw() is deprecated in drupal:8.2.0 and is removed from drupal:10.0.0. Use $this->assertSession()->responseNotContains() instead. See https://www.drupal.org/node/3129738',
