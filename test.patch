diff --git a/core/drupalci.yml b/core/drupalci.yml
index 82edd46046..c0d6553d91 100644
--- a/core/drupalci.yml
+++ b/core/drupalci.yml
@@ -25,24 +25,24 @@ build:
         testgroups: '--all'
         suppress-deprecations: false
         halt-on-fail: false
-      run_tests.build:
-        # Limit concurrency due to disk space concerns.
-        concurrency: 15
-        types: 'PHPUnit-Build'
-        testgroups: '--all'
-        suppress-deprecations: false
-        halt-on-fail: false
-      run_tests.functional:
-        types: 'PHPUnit-Functional'
-        testgroups: '--all'
-        suppress-deprecations: false
-        halt-on-fail: false
-      run_tests.javascript:
-        concurrency: 15
-        types: 'PHPUnit-FunctionalJavascript'
-        testgroups: '--all'
-        suppress-deprecations: false
-        halt-on-fail: false
-      # Run nightwatch testing.
-      # @see https://www.drupal.org/project/drupal/issues/2869825
-      nightwatchjs:
+#      run_tests.build:
+#        # Limit concurrency due to disk space concerns.
+#        concurrency: 15
+#        types: 'PHPUnit-Build'
+#        testgroups: '--all'
+#        suppress-deprecations: false
+#        halt-on-fail: false
+#      run_tests.functional:
+#        types: 'PHPUnit-Functional'
+#        testgroups: '--all'
+#        suppress-deprecations: false
+#        halt-on-fail: false
+#      run_tests.javascript:
+#        concurrency: 15
+#        types: 'PHPUnit-FunctionalJavascript'
+#        testgroups: '--all'
+#        suppress-deprecations: false
+#        halt-on-fail: false
+#      # Run nightwatch testing.
+#      # @see https://www.drupal.org/project/drupal/issues/2869825
+#      nightwatchjs:
diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index 3f194e1aa0..d2a59b9408 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -157,41 +157,9 @@
   protected $unprefixedTablesMap = [];
 
   /**
-   * List of escaped database, table, and field names, keyed by unescaped names.
-   *
-   * @var array
-   *
-   * @deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. This is no
-   *   longer used. Use \Drupal\Core\Database\Connection::$escapedTables or
-   *   \Drupal\Core\Database\Connection::$escapedFields instead.
-   *
-   * @see https://www.drupal.org/node/2986894
-   */
-  protected $escapedNames = [];
-
-  /**
-   * List of escaped table names, keyed by unescaped names.
-   *
-   * @var array
-   */
-  protected $escapedTables = [];
-
-  /**
-   * List of escaped field names, keyed by unescaped names.
-   *
-   * There are cases in which escapeField() is called on an empty string. In
-   * this case it should always return an empty string.
-   *
-   * @var array
+   * @todo
    */
-  protected $escapedFields = ["" => ""];
-
-  /**
-   * List of escaped aliases names, keyed by unescaped aliases.
-   *
-   * @var array
-   */
-  protected $escapedAliases = [];
+  protected $identifierHandler;
 
   /**
    * Post-root (non-nested) transaction commit callbacks.
@@ -208,9 +176,23 @@
    * quotation mark.
    *
    * @var string[]
+   *
+   * @todo deprecate
    */
   protected $identifierQuotes;
 
+  /**
+   * Implements the magic __get() method.
+   *
+   * @todo Remove the method in Drupal 10.
+   */
+  public function __get($name) {
+    if (in_array($name, ['escapedNames', 'escapedTables', 'escapedFields', 'escapedAliases'])) {
+      @trigger_error("Connection::\${$name} should not be accessed in drupal:9.x.0 and is removed from drupal:10.0.0. This is no longer used. See https://www.drupal.org/node/1234567", E_USER_DEPRECATED);
+      return [];
+    }
+  }
+
   /**
    * Constructs a Connection object.
    *
@@ -260,6 +242,10 @@ public function __construct(\PDO $connection, array $connection_options) {
 
     $this->connection = $connection;
     $this->connectionOptions = $connection_options;
+
+    // Initialize the identifier handler.
+    $identifier_handler_class = $this->getDriverClass('IdentifierHandler');
+    $this->identifierHandler = new $identifier_handler_class($this->identifierQuotes, $this->prefixes);
   }
 
   /**
@@ -459,7 +445,12 @@ protected function setPrefix($prefix) {
    *   The properly-prefixed string.
    */
   public function prefixTables($sql) {
-    return str_replace($this->prefixSearch, $this->prefixReplace, $sql);
+    $replacements = $tables = [];
+    preg_match_all('/(\{(\S*)\})/', $sql, $tables, PREG_SET_ORDER, 0);
+    foreach ($tables as $table) {
+      $replacements[$table[1]] = $this->identifierHandler->getPlatformTableName($table[2], TRUE, TRUE);
+    }
+    return str_replace(array_keys($replacements), array_values($replacements), $sql);
   }
 
   /**
@@ -524,9 +515,7 @@ public function getUnprefixedTablesMap() {
    * @return string
    */
   public function getFullQualifiedTableName($table) {
-    $options = $this->getConnectionOptions();
-    $prefix = $this->tablePrefix($table);
-    return $options['database'] . '.' . $prefix . $table;
+    return $this->identifierHandler->getPlatformDatabaseName($this->getConnectionOptions()['database']) . '.' . $this->identifierHandler->getPlatformTableName($table, TRUE, TRUE);
   }
 
   /**
@@ -990,6 +979,10 @@ public function getDriverClass($class) {
       }
       else {
         switch ($class) {
+          case 'IdentifierHandler':
+            $this->driverClasses[$class] = IdentifierHandler::class;
+            break;
+
           case 'Condition':
             $this->driverClasses[$class] = Condition::class;
             break;
@@ -1228,9 +1221,7 @@ public function condition($conjunction) {
    *   The sanitized database name.
    */
   public function escapeDatabase($database) {
-    $database = preg_replace('/[^A-Za-z0-9_]+/', '', $database);
-    [$start_quote, $end_quote] = $this->identifierQuotes;
-    return $start_quote . $database . $end_quote;
+    return $this->identifierHandler->getPlatformDatabaseName($database);
   }
 
   /**
@@ -1251,10 +1242,7 @@ public function escapeDatabase($database) {
    * @see \Drupal\Core\Database\Connection::setPrefix()
    */
   public function escapeTable($table) {
-    if (!isset($this->escapedTables[$table])) {
-      $this->escapedTables[$table] = preg_replace('/[^A-Za-z0-9_.]+/', '', $table);
-    }
-    return $this->escapedTables[$table];
+    return $this->identifierHandler->getPlatformTableName($table);
   }
 
   /**
@@ -1271,14 +1259,7 @@ public function escapeTable($table) {
    *   The sanitized field name.
    */
   public function escapeField($field) {
-    if (!isset($this->escapedFields[$field])) {
-      $escaped = preg_replace('/[^A-Za-z0-9_.]+/', '', $field);
-      [$start_quote, $end_quote] = $this->identifierQuotes;
-      // Sometimes fields have the format table_alias.field. In such cases
-      // both identifiers should be quoted, for example, "table_alias"."field".
-      $this->escapedFields[$field] = $start_quote . str_replace('.', $end_quote . '.' . $start_quote, $escaped) . $end_quote;
-    }
-    return $this->escapedFields[$field];
+    return $this->identifierHandler->getPlatformColumnName($field);
   }
 
   /**
@@ -1296,11 +1277,7 @@ public function escapeField($field) {
    *   The sanitized alias name.
    */
   public function escapeAlias($field) {
-    if (!isset($this->escapedAliases[$field])) {
-      [$start_quote, $end_quote] = $this->identifierQuotes;
-      $this->escapedAliases[$field] = $start_quote . preg_replace('/[^A-Za-z0-9_]+/', '', $field) . $end_quote;
-    }
-    return $this->escapedAliases[$field];
+    return $this->identifierHandler->getPlatformAliasName($field);
   }
 
   /**
@@ -1968,4 +1945,18 @@ public function getProvider(): string {
     return ($first === 'Drupal' && strtolower($second) === $second) ? $second : 'core';
   }
 
+  /**
+   * @todo
+   */
+  public function getIdentifierHandler(): IdentifierHandler {
+    return $this->identifierHandler;
+  }
+
+  /**
+   * @todo remove, debug only
+   */
+  public function dumpIdentifiers(): void {
+    $this->identifierHandler->doDump();
+  }
+
 }
