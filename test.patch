diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index 7e405e1b1b..d53f012152 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -13,6 +13,8 @@
 use Drupal\Core\Database\Query\Truncate;
 use Drupal\Core\Database\Query\Update;
 use Drupal\Core\Database\Query\Upsert;
+use Drupal\Core\Database\Transaction\TransactionManager;
+use Drupal\Core\Database\Transaction\TransactionManagerInterface;
 use Drupal\Core\Pager\PagerManagerInterface;
 
 /**
@@ -62,6 +64,11 @@ abstract class Connection {
    * transaction.
    *
    * @var array
+   *
+   * @deprecated in drupal:10.0.2 and is removed from drupal:11.0.0. The
+   *   transaction stack is now managed by TransactionManager.
+   *
+   * @see https://www.drupal.org/node/5555555
    */
   protected $transactionLayers = [];
 
@@ -204,8 +211,13 @@ abstract class Connection {
    * Post-root (non-nested) transaction commit callbacks.
    *
    * @var callable[]
+   *
+   * @deprecated in drupal:10.0.2 and is removed from drupal:11.0.0. The
+   *   transaction end callbacks are now managed by TransactionManager.
+   *
+   * @see https://www.drupal.org/node/5555555
    */
-  protected $rootTransactionEndCallbacks = [];
+  public $rootTransactionEndCallbacks = [];
 
   /**
    * The identifier quote characters for the database type.
@@ -226,6 +238,11 @@ abstract class Connection {
    */
   private array $enabledEvents = [];
 
+  /**
+   * The transaction manager.
+   */
+  protected TransactionManager $transactionManager;
+
   /**
    * Constructs a Connection object.
    *
@@ -276,6 +293,21 @@ public function __destruct() {
     $this->connection = NULL;
   }
 
+  /**
+   * Returns the client-level database connection object.
+   *
+   * This method should normally be used only within database driver code. Not
+   * doing so is a risk of introducing code that is not database independent.
+   *
+   * @return object
+   *   The client-level database connection, for example \PDO.
+   *
+   * @internal
+   */
+  public function getClientConnection(): object {
+    return $this->connection;
+  }
+
   /**
    * Returns the default query options for any given query.
    *
@@ -1294,6 +1326,19 @@ public function escapeLike($string) {
     return addcslashes($string, '\%_');
   }
 
+  /**
+   * Returns the transaction manager.
+   *
+   * @return \Drupal\Core\Database\Transaction\TransactionManagerInterface
+   *   The transaction manager.
+   */
+  public function transactionManager(): TransactionManagerInterface {
+    if (!isset($this->transactionManager)) {
+      $this->transactionManager = new TransactionManager($this);
+    }
+    return $this->transactionManager;
+  }
+
   /**
    * Determines if there is an active transaction open.
    *
@@ -1301,7 +1346,7 @@ public function escapeLike($string) {
    *   TRUE if we're currently in a transaction, FALSE otherwise.
    */
   public function inTransaction() {
-    return ($this->transactionDepth() > 0);
+    return $this->transactionManager()->inTransaction();
   }
 
   /**
@@ -1311,7 +1356,7 @@ public function inTransaction() {
    *   The current transaction depth.
    */
   public function transactionDepth() {
-    return count($this->transactionLayers);
+    return $this->transactionManager()->stackDepth();
   }
 
   /**
@@ -1326,8 +1371,7 @@ public function transactionDepth() {
    * @see \Drupal\Core\Database\Transaction
    */
   public function startTransaction($name = '') {
-    $class = $this->getDriverClass('Transaction');
-    return new $class($this, $name);
+    return $this->transactionManager()->start($name);
   }
 
   /**
@@ -1345,50 +1389,8 @@ public function startTransaction($name = '') {
    * @see \Drupal\Core\Database\Transaction::rollBack()
    */
   public function rollBack($savepoint_name = 'drupal_transaction') {
-    if (!$this->inTransaction()) {
-      throw new TransactionNoActiveException();
-    }
-    // A previous rollback to an earlier savepoint may mean that the savepoint
-    // in question has already been accidentally committed.
-    if (!isset($this->transactionLayers[$savepoint_name])) {
-      throw new TransactionNoActiveException();
-    }
-
-    // We need to find the point we're rolling back to, all other savepoints
-    // before are no longer needed. If we rolled back other active savepoints,
-    // we need to throw an exception.
-    $rolled_back_other_active_savepoints = FALSE;
-    while ($savepoint = array_pop($this->transactionLayers)) {
-      if ($savepoint == $savepoint_name) {
-        // If it is the last the transaction in the stack, then it is not a
-        // savepoint, it is the transaction itself so we will need to roll back
-        // the transaction rather than a savepoint.
-        if (empty($this->transactionLayers)) {
-          break;
-        }
-        $this->query('ROLLBACK TO SAVEPOINT ' . $savepoint);
-        $this->popCommittableTransactions();
-        if ($rolled_back_other_active_savepoints) {
-          throw new TransactionOutOfOrderException();
-        }
-        return;
-      }
-      else {
-        $rolled_back_other_active_savepoints = TRUE;
-      }
-    }
-
-    // Notify the callbacks about the rollback.
-    $callbacks = $this->rootTransactionEndCallbacks;
-    $this->rootTransactionEndCallbacks = [];
-    foreach ($callbacks as $callback) {
-      call_user_func($callback, FALSE);
-    }
-
-    $this->connection->rollBack();
-    if ($rolled_back_other_active_savepoints) {
-      throw new TransactionOutOfOrderException();
-    }
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
+    $this->transactionManager()->root()->rollBack();
   }
 
   /**
@@ -1404,18 +1406,7 @@ public function rollBack($savepoint_name = 'drupal_transaction') {
    * @see \Drupal\Core\Database\Transaction
    */
   public function pushTransaction($name) {
-    if (isset($this->transactionLayers[$name])) {
-      throw new TransactionNameNonUniqueException($name . " is already in use.");
-    }
-    // If we're already in a transaction then we want to create a savepoint
-    // rather than try to create another transaction.
-    if ($this->inTransaction()) {
-      $this->query('SAVEPOINT ' . $name);
-    }
-    else {
-      $this->connection->beginTransaction();
-    }
-    $this->transactionLayers[$name] = $name;
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
   }
 
   /**
@@ -1434,17 +1425,8 @@ public function pushTransaction($name) {
    * @see \Drupal\Core\Database\Transaction
    */
   public function popTransaction($name) {
-    // The transaction has already been committed earlier. There is nothing we
-    // need to do. If this transaction was part of an earlier out-of-order
-    // rollback, an exception would already have been thrown by
-    // Database::rollBack().
-    if (!isset($this->transactionLayers[$name])) {
-      return;
-    }
-
-    // Mark this layer as committable.
-    $this->transactionLayers[$name] = FALSE;
-    $this->popCommittableTransactions();
+    throw new \RuntimeException('blaaa');
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
   }
 
   /**
@@ -1469,7 +1451,7 @@ public function popTransaction($name) {
    * @see \Drupal\Core\Database\Connection::doCommit()
    */
   public function addRootTransactionEndCallback(callable $callback) {
-    if (!$this->transactionLayers) {
+    if ($this->transactionManager()->stackDepth() === 0) {
       throw new \LogicException('Root transaction end callbacks can only be added when there is an active transaction.');
     }
     $this->rootTransactionEndCallbacks[] = $callback;
@@ -1481,22 +1463,7 @@ public function addRootTransactionEndCallback(callable $callback) {
    * @internal
    */
   protected function popCommittableTransactions() {
-    // Commit all the committable layers.
-    foreach (array_reverse($this->transactionLayers) as $name => $active) {
-      // Stop once we found an active transaction.
-      if ($active) {
-        break;
-      }
-
-      // If there are no more layers left then we should commit.
-      unset($this->transactionLayers[$name]);
-      if (empty($this->transactionLayers)) {
-        $this->doCommit();
-      }
-      else {
-        $this->query('RELEASE SAVEPOINT ' . $name);
-      }
-    }
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
   }
 
   /**
@@ -1505,18 +1472,7 @@ protected function popCommittableTransactions() {
    * @internal
    */
   protected function doCommit() {
-    $success = $this->connection->commit();
-    if (!empty($this->rootTransactionEndCallbacks)) {
-      $callbacks = $this->rootTransactionEndCallbacks;
-      $this->rootTransactionEndCallbacks = [];
-      foreach ($callbacks as $callback) {
-        call_user_func($callback, $success);
-      }
-    }
-
-    if (!$success) {
-      throw new TransactionCommitFailedException();
-    }
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
   }
 
   /**
@@ -1644,6 +1600,7 @@ abstract public function mapConditionOperator($operator);
    * @see \Drupal\Core\Database\Transaction
    */
   public function commit() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
     throw new TransactionExplicitCommitNotAllowedException();
   }
 
diff --git a/core/lib/Drupal/Core/Database/Transaction.php b/core/lib/Drupal/Core/Database/Transaction.php
index 76d5fc8f5f..799dcfabf5 100644
--- a/core/lib/Drupal/Core/Database/Transaction.php
+++ b/core/lib/Drupal/Core/Database/Transaction.php
@@ -48,6 +48,12 @@ class Transaction {
   protected $name;
 
   public function __construct(Connection $connection, $name = NULL) {
+    if ($connection->transactionManager()->enabled) {
+      $this->connection = $connection;
+      $this->name = $name;
+      return;
+    }
+    @trigger_error(__CLASS__ . ' is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
     $this->connection = $connection;
     // If there is no transaction depth, then no transaction has started. Name
     // the transaction 'drupal_transaction'.
@@ -66,6 +72,10 @@ public function __construct(Connection $connection, $name = NULL) {
   }
 
   public function __destruct() {
+    if ($this->connection->transactionManager()->enabled) {
+      $this->connection->transactionManager()->pop($this->name);
+      return;
+    }
     // If we rolled back then the transaction would have already been popped.
     if (!$this->rolledBack) {
       $this->connection->popTransaction($this->name);
@@ -90,6 +100,10 @@ public function name() {
    * @see \Drupal\Core\Database\Connection::rollBack()
    */
   public function rollBack() {
+    if ($this->connection->transactionManager()->enabled) {
+      $this->connection->transactionManager()->rollback($this->name);
+      return;
+    }
     $this->rolledBack = TRUE;
     $this->connection->rollBack($this->name);
   }
diff --git a/core/lib/Drupal/Core/Database/Transaction/ManagerStackItem.php b/core/lib/Drupal/Core/Database/Transaction/ManagerStackItem.php
new file mode 100644
index 0000000000..f5a359fb84
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Transaction/ManagerStackItem.php
@@ -0,0 +1,29 @@
+<?php
+
+namespace Drupal\Core\Database\Transaction;
+
+/**
+ * @todo
+ */
+final class ManagerStackItem {
+
+  /**
+   * A boolean value to indicate whether this transaction has been rolled back.
+   */
+  private bool $rolledBack = FALSE;
+
+  public function __construct(
+    public readonly string $name,
+    public readonly ManagerStackItemType $type,
+  ) {
+  }
+
+  public function markRolledback(): void {
+    $this->rolledBack = TRUE;
+  }
+
+  public function isRolledback(): bool {
+    return $this->rolledBack;
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/Transaction/ManagerStackItemType.php b/core/lib/Drupal/Core/Database/Transaction/ManagerStackItemType.php
new file mode 100644
index 0000000000..df8ed754e0
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Transaction/ManagerStackItemType.php
@@ -0,0 +1,13 @@
+<?php
+
+namespace Drupal\Core\Database\Transaction;
+
+/**
+ * @todo
+ */
+enum ManagerStackItemType {
+
+  case Root;
+  case Savepoint;
+
+}
diff --git a/core/lib/Drupal/Core/Database/Transaction/TransactionManager.php b/core/lib/Drupal/Core/Database/Transaction/TransactionManager.php
new file mode 100644
index 0000000000..0af29e177e
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Transaction/TransactionManager.php
@@ -0,0 +1,295 @@
+<?php
+
+namespace Drupal\Core\Database\Transaction;
+
+use Drupal\Core\Database\Connection;
+use Drupal\Core\Database\Transaction;
+use Drupal\Core\Database\TransactionCommitFailedException;
+use Drupal\Core\Database\TransactionExplicitCommitNotAllowedException;
+use Drupal\Core\Database\TransactionNameNonUniqueException;
+use Drupal\Core\Database\TransactionNoActiveException;
+use Drupal\Core\Database\TransactionOutOfOrderException;
+
+/**
+ * @todo
+ */
+class TransactionManager implements TransactionManagerInterface {
+
+  const CONNECTION_ACTIVE = 0;
+  const CONNECTION_COMMITTED = 1;
+  const CONNECTION_ROLLED_BACK = 2;
+
+  public readonly bool $enabled;
+  protected int $connectionTransactionState;
+
+  /**
+   * Tracks the number of "layers" of transactions currently active.
+   *
+   * On many databases transactions cannot nest.  Instead, we track
+   * nested calls to transactions and collapse them into a single
+   * transaction.
+   *
+   * @var array
+   */
+  private array $stack = [];
+
+  /**
+   * @param \Drupal\Core\Database\Connection $connection
+   *   The database connection.
+   */
+  public function __construct(
+    protected readonly Connection $connection,
+  ) {
+    $this->enabled = TRUE;
+  }
+
+  /**
+   * Checks if a named transaction is active.
+   *
+   * @param string $name
+   *   The name of the transaction.
+   *
+   * @return bool
+   *   TRUE if the named transaction is active, FALSE otherwise.
+   */
+  public function has(string $name): bool {
+    return isset($this->stack[$name]);
+  }
+
+  /**
+   * Returns the current depth of the transaction stack.
+   *
+   * @return int
+   *   The current depth of the transaction stack.
+   */
+  public function stackDepth(): int {
+    return count($this->stack);
+  }
+
+  /**
+   * Determines if there is an active transaction open.
+   *
+   * @return bool
+   *   TRUE if we're currently in a transaction, FALSE otherwise.
+   */
+  public function inTransaction(): bool {
+    return (bool) $this->stackDepth();
+  }
+
+  public function root() {
+    if (!$this->inTransaction()) {
+      throw new TransactionNoActiveException();
+    }
+    return $this->stack[array_key_first($this->stack)];
+  }
+
+  public function current() {
+    if (!$this->inTransaction()) {
+      throw new TransactionNoActiveException();
+    }
+    return $this->stack[array_key_last($this->stack)];
+  }
+
+  /**
+   * Returns a new Transaction object on the database connection.
+   *
+   * @param string $name
+   *   (optional) The name of the savepoint.
+   *
+   * @return \Drupal\Core\Database\Transaction
+   *   A Transaction object.
+   *
+   * @throws \Drupal\Core\Database\TransactionNameNonUniqueException
+   */
+  public function start(string $name = '') {
+    if (!$this->inTransaction()) {
+      // If there is no transaction active, name the transaction
+      // 'drupal_transaction'.
+      $name = 'drupal_transaction';
+    }
+    elseif (!$name) {
+      // Within transactions, savepoints are used. Each savepoint requires a
+      // name. So if no name is present we need to create one.
+      $name = 'savepoint_' . $this->stackDepth();
+    }
+
+    if ($this->has($name)) {
+      throw new TransactionNameNonUniqueException($name . " is already in use.");
+    }
+
+    // Do the client-level processing.
+    if ($this->stackDepth() === 0) {
+      $this->beginClientTransaction();
+      $type = ManagerStackItemType::Root;
+      $this->connectionTransactionState = static::CONNECTION_ACTIVE;
+    }
+    else {
+      // If we're already in a Drupal transaction then we want to create a
+      // database savepoint, rather than try to begin another database
+      // transaction.
+      $this->addClientSavepoint($name);
+      $type = ManagerStackItemType::Savepoint;
+    }
+
+    // Push the transaction on the stack, increasing its depth.
+    $this->stack[$name] = new ManagerStackItem($name, $type);
+
+    return new Transaction($this->connection, $name);
+  }
+
+  public function pop(string $name): bool {
+    if (!$this->has($name)) {
+      throw new TransactionOutOfOrderException();
+    }
+
+    // Already rolled back Drupal transaction, do nothing.
+    if ($this->stack[$name]->isRolledback() && $this->stackDepth() > 1) {
+      unset($this->stack[$name]);
+      return TRUE;
+    }
+
+    // Do the client-level processing.
+    if ($this->stackDepth() === 1) {
+      // If it is the last Drupal transaction open, we can commit the client
+      // transaction.
+      $this->commitClientTransaction();
+      $this->connectionTransactionState = static::CONNECTION_COMMITTED;
+    }
+    else {
+      if ($this->stack[$name]->type === ManagerStackItemType::Savepoint) {
+        $this->releaseClientSavepoint($name);
+      }
+    }
+
+    // Release the savepoint or commit the item, then remove it from the stack.
+    unset($this->stack[$name]);
+    return TRUE;
+  }
+
+  public function rollback(string $name) {
+    if (!$this->inTransaction()) {
+      throw new TransactionNoActiveException();
+    }
+
+    // Rolled back item should match the last one in stack.
+    if ($name !== array_key_last($this->stack)) {
+      throw new TransactionOutOfOrderException();
+    }
+
+dump([__METHOD__, $this->stack[$name]]);
+
+    // Do the client-level processing.
+    switch ($this->stack[$name]->type) {
+      case ManagerStackItemType::Root:
+        $this->rollbackClientTransaction();
+        $this->connectionTransactionState = static::CONNECTION_ROLLED_BACK;
+        break;
+
+      case ManagerStackItemType::Savepoint:
+        $this->rollbackClientSavepoint($name);
+        break;
+
+    }
+
+    $this->stack[$name]->markRolledback();
+  }
+
+  /**
+   * Begins a transaction on the client connection.
+   *
+   * @return bool
+   *   Returns TRUE on success or FALSE on failure.
+   */
+  protected function beginClientTransaction(): bool {
+dump([__METHOD__]);
+    return $this->connection->getClientConnection()->beginTransaction();
+  }
+
+  /**
+   * Adds a savepoint on the client transaction.
+   *
+   * @param string $name
+   *   The name of the savepoint.
+   *
+   * @return bool
+   *   Returns TRUE on success or FALSE on failure.
+   */
+  protected function addClientSavepoint(string $name): bool {
+dump([__METHOD__, $name]);
+    $this->connection->query('SAVEPOINT ' . $name);
+    return TRUE;
+  }
+
+  /**
+   * Rolls back to a savepoint on the client transaction.
+   *
+   * @param string $name
+   *   The name of the savepoint.
+   *
+   * @return bool
+   *   Returns TRUE on success or FALSE on failure.
+   */
+  protected function rollbackClientSavepoint(string $name): bool {
+dump([__METHOD__, $name]);
+    $this->connection->query('ROLLBACK TO SAVEPOINT ' . $name);
+    return TRUE;
+  }
+
+  /**
+   * Releases a savepoint on the client transaction.
+   *
+   * @param string $name
+   *   The name of the savepoint.
+   *
+   * @return bool
+   *   Returns TRUE on success or FALSE on failure.
+   */
+  protected function releaseClientSavepoint(string $name): bool {
+dump([__METHOD__, $name]);
+    $this->connection->query('RELEASE SAVEPOINT ' . $name);
+    return TRUE;
+  }
+
+  /**
+   * Rolls back a client transaction.
+   *
+   * @return bool
+   *   Returns TRUE on success or FALSE on failure.
+   */
+  protected function rollbackClientTransaction(): bool {
+dump([__METHOD__]);
+    $this->connection->getClientConnection()->rollBack();
+    return TRUE;
+  }
+
+  /**
+   * Commits a client transaction.
+   *
+   * @return bool
+   *   Returns TRUE on success or FALSE on failure.
+   */
+  protected function commitClientTransaction(): bool {
+dump([__METHOD__]);
+    $this->doCommit();
+    return TRUE;
+  }
+
+  /**
+   * Do the actual commit, invoke post-commit callbacks.
+   */
+  private function doCommit() {
+    $success = $this->connection->getClientConnection()->commit();
+    if (!empty($this->connection->rootTransactionEndCallbacks)) {
+      $callbacks = $this->connection->rootTransactionEndCallbacks;
+      $this->connection->rootTransactionEndCallbacks = [];
+      foreach ($callbacks as $callback) {
+        call_user_func($callback, $success);
+      }
+    }
+
+    if (!$success) {
+      throw new TransactionCommitFailedException();
+    }
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/Transaction/TransactionManagerInterface.php b/core/lib/Drupal/Core/Database/Transaction/TransactionManagerInterface.php
new file mode 100644
index 0000000000..29635fdba0
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Transaction/TransactionManagerInterface.php
@@ -0,0 +1,9 @@
+<?php
+
+namespace Drupal\Core\Database\Transaction;
+
+/**
+ * @todo
+ */
+interface TransactionManagerInterface {
+}
diff --git a/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificTransactionTestBase.php b/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificTransactionTestBase.php
index ebbf60826a..7a618a241f 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificTransactionTestBase.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificTransactionTestBase.php
@@ -57,6 +57,7 @@ class DriverSpecificTransactionTestBase extends DriverSpecificDatabaseTestBase {
    *   Whether to execute a DDL statement during the inner transaction.
    */
   protected function transactionOuterLayer($suffix, $rollback = FALSE, $ddl_statement = FALSE) {
+dump([__METHOD__, $suffix, $rollback, $ddl_statement]);
     $depth = $this->connection->transactionDepth();
     $txn = $this->connection->startTransaction();
 
@@ -99,6 +100,7 @@ protected function transactionOuterLayer($suffix, $rollback = FALSE, $ddl_statem
    */
   protected function transactionInnerLayer($suffix, $rollback = FALSE, $ddl_statement = FALSE) {
     $depth = $this->connection->transactionDepth();
+dump([__METHOD__, $suffix, $rollback, $depth]);
     // Start a transaction. If we're being called from ->transactionOuterLayer,
     // then we're already in a transaction. Normally, that would make starting
     // a transaction here dangerous, but the database API handles this problem
@@ -106,6 +108,7 @@ protected function transactionInnerLayer($suffix, $rollback = FALSE, $ddl_statem
     $txn = $this->connection->startTransaction();
 
     $depth2 = $this->connection->transactionDepth();
+dump([__METHOD__, $suffix, $rollback, $depth2]);
     $this->assertGreaterThan($depth, $depth2, 'Transaction depth has increased with new transaction.');
 
     // Insert a single row into the testing table.
@@ -355,6 +358,7 @@ public function assertRowAbsent(string $name, string $message = NULL): void {
    * Tests transaction stacking, commit, and rollback.
    */
   public function testTransactionStacking() {
+dump('****************** Standard');
     // Standard case: pop the inner transaction before the outer transaction.
     $transaction = $this->connection->startTransaction();
     $this->insertRow('outer');
@@ -370,6 +374,7 @@ public function testTransactionStacking() {
     $this->assertRowPresent('inner');
 
     // Pop the transaction in a different order they have been pushed.
+dump('****************** Pop the transaction in a different order they have been pushed');
     $this->cleanUp();
     $transaction = $this->connection->startTransaction();
     $this->insertRow('outer');
@@ -387,6 +392,7 @@ public function testTransactionStacking() {
     $this->assertRowPresent('inner-after-outer-commit');
 
     // Rollback the inner transaction.
+dump('****************** Rollback the inner transaction');
     $this->cleanUp();
     $transaction = $this->connection->startTransaction();
     $this->insertRow('outer');
@@ -405,6 +411,7 @@ public function testTransactionStacking() {
     $this->assertRowPresent('outer-after-inner-rollback');
 
     // Rollback the inner transaction after committing the outer one.
+dump('****************** Rollback the inner transaction after committing the outer one');
     $this->cleanUp();
     $transaction = $this->connection->startTransaction();
     $this->insertRow('outer');
@@ -423,6 +430,7 @@ public function testTransactionStacking() {
     // Rollback the outer transaction while the inner transaction is active.
     // In that case, an exception will be triggered because we cannot
     // ensure that the final result will have any meaning.
+dump('****************** Rollback the outer transaction while the inner transaction is active');
     $this->cleanUp();
     $transaction = $this->connection->startTransaction();
     $this->insertRow('outer');
