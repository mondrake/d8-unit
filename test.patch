diff --git a/core/modules/big_pipe/tests/src/Unit/Render/BigPipeResponseAttachmentsProcessorTest.php b/core/modules/big_pipe/tests/src/Unit/Render/BigPipeResponseAttachmentsProcessorTest.php
index f91a8bbeb2..e23ff8d06c 100644
--- a/core/modules/big_pipe/tests/src/Unit/Render/BigPipeResponseAttachmentsProcessorTest.php
+++ b/core/modules/big_pipe/tests/src/Unit/Render/BigPipeResponseAttachmentsProcessorTest.php
@@ -15,6 +15,7 @@
 use Drupal\Core\Render\HtmlResponse;
 use Drupal\Core\Render\RendererInterface;
 use Drupal\Tests\UnitTestCase;
+use Drupal\TestTools\Random;
 use Prophecy\Argument;
 use Prophecy\Prophecy\ObjectProphecy;
 use Symfony\Component\HttpFoundation\RequestStack;
@@ -84,7 +85,7 @@ public function testHtmlResponse(array $attachments) {
     $this->assertEquals('processed', $processed_big_pipe_response->getContent(), 'Content of returned (processed) response object MUST be changed.');
   }
 
-  public function attachmentsProvider() {
+  public static function attachmentsProvider() {
     $typical_cases = [
       'no attachments' => [[]],
       'libraries' => [['library' => ['core/drupal']]],
@@ -94,16 +95,16 @@ public function attachmentsProvider() {
     $official_attachment_types = ['html_head', 'feed', 'html_head_link', 'http_header', 'library', 'placeholders', 'drupalSettings', 'html_response_attachment_placeholders'];
     $official_attachments_with_random_values = [];
     foreach ($official_attachment_types as $type) {
-      $official_attachments_with_random_values[$type] = $this->randomMachineName();
+      $official_attachments_with_random_values[$type] = Random::machineName();
     }
-    $random_attachments = ['random' . $this->randomMachineName() => $this->randomMachineName()];
+    $random_attachments = ['random' . Random::machineName() => Random::machineName()];
     $edge_cases = [
       'all official attachment types, with random assigned values, even if technically not valid, to prove BigPipeResponseAttachmentsProcessor is a perfect decorator' => [$official_attachments_with_random_values],
       'random attachment type (unofficial), with random assigned value, to prove BigPipeResponseAttachmentsProcessor is a perfect decorator' => [$random_attachments],
     ];
 
-    $big_pipe_placeholder_attachments = ['big_pipe_placeholders' => [$this->randomMachineName()]];
-    $big_pipe_nojs_placeholder_attachments = ['big_pipe_nojs_placeholders' => [$this->randomMachineName()]];
+    $big_pipe_placeholder_attachments = ['big_pipe_placeholders' => [Random::machineName()]];
+    $big_pipe_nojs_placeholder_attachments = ['big_pipe_nojs_placeholders' => [Random::machineName()]];
     $big_pipe_cases = [
       'only big_pipe_placeholders' => [$big_pipe_placeholder_attachments],
       'only big_pipe_nojs_placeholders' => [$big_pipe_nojs_placeholder_attachments],
diff --git a/core/modules/ckeditor5/tests/src/Kernel/CKEditor5PluginManagerTest.php b/core/modules/ckeditor5/tests/src/Kernel/CKEditor5PluginManagerTest.php
index bb036260b0..b7314b76d1 100644
--- a/core/modules/ckeditor5/tests/src/Kernel/CKEditor5PluginManagerTest.php
+++ b/core/modules/ckeditor5/tests/src/Kernel/CKEditor5PluginManagerTest.php
@@ -14,6 +14,7 @@
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\Tests\SchemaCheckTestTrait;
+use Drupal\TestTools\Random;
 use org\bovigo\vfs\vfsStream;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
@@ -1046,8 +1047,8 @@ public function testProvidedElementsInvalidElementSubset(array $configured_subse
    * @return array
    *   Test scenarios.
    */
-  public function providerProvidedElementsInvalidElementSubset(): array {
-    $random_tag_name = strtolower($this->randomMachineName());
+  public static function providerProvidedElementsInvalidElementSubset(): array {
+    $random_tag_name = strtolower(Random::machineName());
     $random_tag = "<$random_tag_name>";
     return [
       'superset: random tag not listed in the plugin definition' => [
diff --git a/core/modules/ckeditor5/tests/src/Kernel/LanguageTest.php b/core/modules/ckeditor5/tests/src/Kernel/LanguageTest.php
index 0b3ddc59ff..4d5d43b98f 100644
--- a/core/modules/ckeditor5/tests/src/Kernel/LanguageTest.php
+++ b/core/modules/ckeditor5/tests/src/Kernel/LanguageTest.php
@@ -8,6 +8,7 @@
 use Drupal\filter\Entity\FilterFormat;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\language\Entity\ConfigurableLanguage;
+use Drupal\TestTools\Random;
 use Symfony\Component\Yaml\Yaml;
 
 /**
@@ -96,8 +97,8 @@ public function test(string $drupal_langcode, string $cke5_langcode, bool $is_mi
    *
    * @return string[][]
    */
-  public function provider(): array {
-    $random_langcode = $this->randomMachineName();
+  public static function provider(): array {
+    $random_langcode = Random::machineName();
     return [
       'Language code transformed from browser mappings' => [
         'drupal_langcode' => 'pt-pt',
diff --git a/core/modules/language/tests/src/Unit/ContentLanguageSettingsUnitTest.php b/core/modules/language/tests/src/Unit/ContentLanguageSettingsUnitTest.php
index 636265bcf6..de26db5b08 100644
--- a/core/modules/language/tests/src/Unit/ContentLanguageSettingsUnitTest.php
+++ b/core/modules/language/tests/src/Unit/ContentLanguageSettingsUnitTest.php
@@ -8,6 +8,7 @@
 use Drupal\Core\Entity\EntityTypeRepositoryInterface;
 use Drupal\language\Entity\ContentLanguageSettings;
 use Drupal\Tests\UnitTestCase;
+use Drupal\TestTools\Random;
 
 /**
  * @coversDefaultClass \Drupal\language\Entity\ContentLanguageSettings
@@ -146,8 +147,8 @@ public function testDefaultLangcode(ContentLanguageSettings $config, $expected)
     $this->assertSame($expected, $config->getDefaultLangcode());
   }
 
-  public function providerDefaultLangcode() {
-    $langcode = $this->randomMachineName();
+  public static function providerDefaultLangcode() {
+    $langcode = Random::machineName();
     $config = new ContentLanguageSettings([
       'target_entity_type_id' => 'test_entity_type',
       'target_bundle' => 'test_bundle',
@@ -276,14 +277,14 @@ public function testLoadByEntityTypeBundle($config_id, ContentLanguageSettings $
     $this->assertSame($expected_language_alterable, $config->isLanguageAlterable());
   }
 
-  public function providerLoadByEntityTypeBundle() {
+  public static function providerLoadByEntityTypeBundle() {
     $alteredLanguage = new ContentLanguageSettings([
       'target_entity_type_id' => 'test_entity_type',
       'target_bundle' => 'test_bundle',
     ], 'language_content_settings');
     $alteredLanguage->setLanguageAlterable(TRUE);
 
-    $langcode = $this->randomMachineName();
+    $langcode = Random::machineName();
     $alteredDefaultLangcode = new ContentLanguageSettings([
       'target_entity_type_id' => 'test_entity_type',
       'target_bundle' => 'test_fixed_language_bundle',
diff --git a/core/tests/Drupal/TestTools/Random.php b/core/tests/Drupal/TestTools/Random.php
new file mode 100644
index 0000000000..ac1fbc31bf
--- /dev/null
+++ b/core/tests/Drupal/TestTools/Random.php
@@ -0,0 +1,123 @@
+<?php
+
+namespace Drupal\TestTools;
+
+use Drupal\Component\Utility\Random as RandomUtility;
+
+/**
+ * Provides random generator utility static methods.
+ */
+abstract class Random {
+
+  /**
+   * The random generator.
+   */
+  protected static RandomUtility $randomGenerator;
+
+  /**
+   * Gets the random generator for the utility methods.
+   *
+   * @return \Drupal\Component\Utility\Random
+   *   The random generator.
+   */
+  protected static function getRandomGenerator(): RandomUtility {
+    if (!isset(static::$randomGenerator)) {
+      static::$randomGenerator = new RandomUtility();
+    }
+    return static::$randomGenerator;
+  }
+
+  /**
+   * Generates a pseudo-random string of ASCII characters of codes 32 to 126.
+   *
+   * Do not use this method when special characters are not possible (e.g., in
+   * machine or file names that have already been validated); instead, use
+   * \Drupal\Tests\RandomGeneratorTrait::randomMachineName(). If $length is
+   * greater than 3 the random string will include at least one ampersand ('&')
+   * and at least one greater than ('>') character to ensure coverage for
+   * special characters and avoid the introduction of random test failures.
+   *
+   * @param int $length
+   *   Length of random string to generate.
+   *
+   * @return string
+   *   Pseudo-randomly generated unique string including special characters.
+   *
+   * @see \Drupal\Component\Utility\Random::string()
+   */
+  public static function string(int $length = 8): string {
+    if ($length < 4) {
+      return static::getRandomGenerator()->string($length, TRUE, [static::class, 'stringValidate']);
+    }
+
+    // To prevent the introduction of random test failures, ensure that the
+    // returned string contains a character that needs to be escaped in HTML by
+    // injecting an ampersand into it.
+    $replacement_pos = floor($length / 2);
+    // Remove 2 from the length to account for the ampersand and greater than
+    // characters.
+    $string = static::getRandomGenerator()->string($length - 2, TRUE, [static::class, 'stringValidate']);
+    return substr_replace($string, '>&', $replacement_pos, 0);
+  }
+
+  /**
+   * Callback for random string validation.
+   *
+   * @see \Drupal\Component\Utility\Random::string()
+   *
+   * @param string $string
+   *   The random string to validate.
+   *
+   * @return bool
+   *   TRUE if the random string is valid, FALSE if not.
+   */
+  public static function stringValidate(string $string): bool {
+    // Consecutive spaces causes issues for link validation.
+    if (preg_match('/\s{2,}/', $string)) {
+      return FALSE;
+    }
+
+    // Starting or ending with a space means that length might not be what is
+    // expected.
+    if (preg_match('/^\s|\s$/', $string)) {
+      return FALSE;
+    }
+
+    return TRUE;
+  }
+
+  /**
+   * Generates a unique random string containing letters and numbers.
+   *
+   * Do not use this method when testing unvalidated user input. Instead, use
+   * \Drupal\Tests\RandomGeneratorTrait::randomString().
+   *
+   * @param int $length
+   *   Length of random string to generate.
+   *
+   * @return string
+   *   Randomly generated unique string.
+   *
+   * @see \Drupal\Component\Utility\Random::name()
+   */
+  public static function machineName(int $length = 8): string {
+    return static::getRandomGenerator()->name($length, TRUE);
+  }
+
+  /**
+   * Generates a random PHP object.
+   *
+   * @param int $size
+   *   The number of random keys to add to the object.
+   *
+   * @return object
+   *   The generated object, with the specified number of random keys. Each key
+   *   has a random string value.
+   *
+   * @see \Drupal\Component\Utility\Random::object()
+   */
+  public static function object(int $size = 4): \stdClass {
+    return static::getRandomGenerator()->object($size);
+  }
+
+}
diff --git a/core/tests/Drupal/Tests/RandomGeneratorTrait.php b/core/tests/Drupal/Tests/RandomGeneratorTrait.php
index ff0d97845b..e8aafbecf3 100644
--- a/core/tests/Drupal/Tests/RandomGeneratorTrait.php
+++ b/core/tests/Drupal/Tests/RandomGeneratorTrait.php
@@ -3,6 +3,7 @@
 namespace Drupal\Tests;
 
 use Drupal\Component\Utility\Random;
+use Drupal\TestTools\Random as RandomTools;
 
 /**
  * Provides random generator utility methods.
@@ -35,18 +36,7 @@ trait RandomGeneratorTrait {
    * @see \Drupal\Component\Utility\Random::string()
    */
   public function randomString($length = 8) {
-    if ($length < 4) {
-      return $this->getRandomGenerator()->string($length, TRUE, [$this, 'randomStringValidate']);
-    }
-
-    // To prevent the introduction of random test failures, ensure that the
-    // returned string contains a character that needs to be escaped in HTML by
-    // injecting an ampersand into it.
-    $replacement_pos = floor($length / 2);
-    // Remove 2 from the length to account for the ampersand and greater than
-    // characters.
-    $string = $this->getRandomGenerator()->string($length - 2, TRUE, [$this, 'randomStringValidate']);
-    return substr_replace($string, '>&', $replacement_pos, 0);
+    return RandomTools::string($length);
   }
 
   /**
@@ -90,7 +80,7 @@ public function randomStringValidate($string) {
    * @see \Drupal\Component\Utility\Random::name()
    */
   protected function randomMachineName($length = 8) {
-    return $this->getRandomGenerator()->name($length, TRUE);
+    return RandomTools::machineName($length);
   }
 
   /**
@@ -106,7 +96,7 @@ protected function randomMachineName($length = 8) {
    * @see \Drupal\Component\Utility\Random::object()
    */
   public function randomObject($size = 4) {
-    return $this->getRandomGenerator()->object($size);
+    return RandomTools::objetc($size);
   }
 
   /**
diff --git a/core/tests/Drupal/Tests/UnitTestCase.php b/core/tests/Drupal/Tests/UnitTestCase.php
index 44f46e6bb8..02dc1c5488 100644
--- a/core/tests/Drupal/Tests/UnitTestCase.php
+++ b/core/tests/Drupal/Tests/UnitTestCase.php
@@ -10,6 +10,7 @@
 use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\StringTranslation\PluralTranslatableMarkup;
 use Drupal\Tests\Traits\PhpUnitWarnings;
+use Drupal\TestTools\Random as RandomTools;
 use Drupal\TestTools\TestVarDumper;
 use PHPUnit\Framework\TestCase;
 use Prophecy\PhpUnit\ProphecyTrait;
@@ -83,7 +84,7 @@ protected function setUp(): void {
    * @see \Drupal\Component\Utility\Random::name()
    */
   public function randomMachineName($length = 8) {
-    return $this->getRandomGenerator()->name($length, TRUE);
+    return RandomTools::machineName($length, TRUE);
   }
 
   /**
