diff --git a/core/lib/Drupal/Core/Database/Schema.php b/core/lib/Drupal/Core/Database/Schema.php
index 9530c8fbf8..94ead3f762 100644
--- a/core/lib/Drupal/Core/Database/Schema.php
+++ b/core/lib/Drupal/Core/Database/Schema.php
@@ -3,12 +3,16 @@
 namespace Drupal\Core\Database;
 
 use Drupal\Core\Database\Query\PlaceholderInterface;
+use Drupal\Core\Database\SchemaDefinition\ConvertDefinitionTrait;
+use Drupal\Core\Database\SchemaDefinition\Table as TableDefinition;
 
 /**
  * Provides a base implementation for Database Schema.
  */
 abstract class Schema implements PlaceholderInterface {
 
+  use ConvertDefinitionTrait;
+
   /**
    * The database connection.
    *
@@ -602,8 +606,8 @@ abstract public function changeField($table, $field, $field_new, $spec, $keys_ne
    *
    * @param $name
    *   The name of the table to create.
-   * @param $table
-   *   A Schema API table definition array.
+   * @param array|\Drupal\Core\Database\SchemaDefinition\Table $table
+   *   A Schema API table definition.
    *
    * @throws \Drupal\Core\Database\SchemaObjectExistsException
    *   If the specified table already exists.
@@ -614,7 +618,12 @@ public function createTable($name, $table) {
     if ($this->tableExists($name)) {
       throw new SchemaObjectExistsException("Table '$name' already exists.");
     }
+    if ($table instanceof TableDefinition) {
+      $name = $table->name;
+      $table = $this->convertTableToArrayDefinition($table);
+    }
     $statements = $this->createTableSql($name, $table);
+dump([__METHOD__, $table, $statements]);
     foreach ($statements as $statement) {
       $this->connection->query($statement);
     }
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/Column.php b/core/lib/Drupal/Core/Database/SchemaDefinition/Column.php
new file mode 100644
index 0000000000..3dac9ea47b
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/Column.php
@@ -0,0 +1,32 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a database table's column.
+ */
+final class Column implements SchemaDefinitionInterface {
+
+  /**
+   * Constructor.
+   */
+  public function __construct(
+    public readonly string $name,
+    public readonly string $type,
+    public readonly Property|string $description = Property::Undefined,
+    public readonly Property|bool $serialize = Property::Undefined,
+    public readonly Property|string $size = Property::Undefined,
+    public readonly Property|bool $notNull = Property::Undefined,
+    public readonly Property|string|int $default = Property::Undefined,
+    public readonly Property|int $length = Property::Undefined,
+    public readonly Property|bool $unsigned = Property::Undefined,
+    public readonly Property|int $precision = Property::Undefined,
+    public readonly Property|int $scale = Property::Undefined,
+    public readonly Property|bool $binary = Property::Undefined,
+    public readonly Property|array $dbSpecificType = Property::Undefined,
+  ) {
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/ConvertDefinitionTrait.php b/core/lib/Drupal/Core/Database/SchemaDefinition/ConvertDefinitionTrait.php
new file mode 100644
index 0000000000..cfe762631f
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/ConvertDefinitionTrait.php
@@ -0,0 +1,114 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * A helper trait to convert SchemaDefinition objects to legacy array.
+ */
+trait ConvertDefinitionTrait {
+
+  final protected function convertTableToArrayDefinition(Table $table): array {
+    $spec = [];
+    if ($table->description !== Property::Undefined) {
+      $spec['description'] = $table->description;
+    }
+    $spec['fields'] = $this->convertColumnsToArrayDefinition($table->columns);
+    if ($table->primaryKey !== Property::Undefined) {
+      $spec['primary key'] = $this->convertPrimaryKeyToArrayDefinition($table->primaryKey);
+    }
+    if ($table->uniqueKeys !== Property::Undefined) {
+      $spec['unique keys'] = $this->convertUniqueKeysToArrayDefinition($table->uniqueKeys);
+    }
+    if ($table->indexes !== Property::Undefined) {
+      $spec['indexes'] = $this->convertIndexesToArrayDefinition($table->indexes);
+    }
+    if ($table->foreignKeys !== Property::Undefined) {
+      $spec['foreign keys'] = $this->convertForeignKeysToArrayDefinition($table->foreignKeys);
+    }
+    return $spec;
+  }
+
+  final protected function convertColumnsToArrayDefinition(array $columns): array {
+    $spec = [];
+    foreach ($columns as $column) {
+      $spec[$column->name] = $this->convertColumnToArrayDefinition($column);
+    }
+    return $spec;
+  }
+
+  final protected function convertColumnToArrayDefinition(Column $column): array {
+    $spec = [];
+    $spec['type'] = $column->type;
+    if ($column->description !== Property::Undefined) {
+      $spec['description'] = $column->description;
+    }
+    if ($column->serialize !== Property::Undefined) {
+      $spec['serialize'] = $column->serialize;
+    }
+    if ($column->size !== Property::Undefined) {
+      $spec['size'] = $column->size;
+    }
+    if ($column->notNull !== Property::Undefined) {
+      $spec['not null'] = $column->notNull;
+    }
+    if ($column->default !== Property::Undefined) {
+      $spec['default'] = $column->default;
+    }
+    if ($column->length !== Property::Undefined) {
+      $spec['length'] = $column->length;
+    }
+    if ($column->unsigned !== Property::Undefined) {
+      $spec['unsigned'] = $column->unsigned;
+    }
+    if ($column->precision !== Property::Undefined) {
+      $spec['precision'] = $column->precision;
+    }
+    if ($column->scale !== Property::Undefined) {
+      $spec['scale'] = $column->scale;
+    }
+    if ($column->binary !== Property::Undefined) {
+      $spec['binary'] = $column->binary;
+    }
+    if ($column->dbSpecificType !== Property::Undefined) {
+      $spec[dbSpecificType[0] . '_type'] = $column->dbSpecificType[1];
+    }
+    return $spec;
+  }
+
+  final protected function convertKeyColumnsToArrayDefinition(array $columns): array {
+    $spec = [];
+    foreach ($columns as $column) {
+      $spec[] = $this->convertKeyColumnToArrayDefinition($column);
+    }
+    return $spec;
+  }
+
+  final protected function convertKeyColumnToArrayDefinition(KeyColumn $column): string|array {
+    if ($column->length !== NULL) {
+      return [$column->name, $column->length];
+    }
+    return $column->name;
+  }
+
+  final protected function convertPrimaryKeyToArrayDefinition(PrimaryKey $primaryKey): array {
+    return $this->convertKeyColumnsToArrayDefinition($primaryKey->columns);
+  }
+
+  final protected function convertUniqueKeysToArrayDefinition(array $uniqueKeys): array {
+    $spec = [];
+    return $spec;
+  }
+
+  final protected function convertIndexesToArrayDefinition(array $indexes): array {
+    $spec = [];
+    return $spec;
+  }
+
+  final protected function convertForeignKeysToArrayDefinition(array $foreignKeys): array {
+    $spec = [];
+    return $spec;
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/ForeignKey.php b/core/lib/Drupal/Core/Database/SchemaDefinition/ForeignKey.php
new file mode 100644
index 0000000000..10cfc0b060
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/ForeignKey.php
@@ -0,0 +1,27 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a database foreign key.
+ */
+final class ForeignKey extends KeyBase {
+
+  public readonly array $foreignColumns;
+
+  /**
+   * Constructor.
+   */
+  public function __construct(
+    public readonly string $name,
+    public readonly string $foreignTable,
+    array $columns,
+    array $foreignColumns,
+  ) {
+    parent::__construct($columns);
+    $this->foreignColumns = $this->buildColumns($foreignColumns);
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/Index.php b/core/lib/Drupal/Core/Database/SchemaDefinition/Index.php
new file mode 100644
index 0000000000..0a9e72dff1
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/Index.php
@@ -0,0 +1,22 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a database index.
+ */
+final class Index extends KeyBase {
+
+  /**
+   * Constructor.
+   */
+  public function __construct(
+    public readonly string $name,
+    array $columns,
+  ) {
+    parent::__construct($columns);
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/KeyBase.php b/core/lib/Drupal/Core/Database/SchemaDefinition/KeyBase.php
new file mode 100644
index 0000000000..f50cf59e36
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/KeyBase.php
@@ -0,0 +1,37 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Base class for table keys (primary, unique, index).
+ */
+abstract class KeyBase implements SchemaDefinitionInterface {
+
+  public readonly array $columns;
+
+  /**
+   * Constructor.
+   */
+  public function __construct(array $columns) {
+    $this->columns = $this->buildColumns($columns);
+  }
+
+  protected function buildColumns(array $rawColumns): array {
+    $columns = [];
+    foreach ($rawColumns as $rawColumn) {
+      if ($rawColumn instanceof KeyColumn) {
+        $columns[] = $rawColumn;
+      }
+      elseif (is_array($rawColumn)) {
+        $columns[] = new KeyColumn($rawColumn[0], $rawColumn[1]);
+      }
+      else {
+        $columns[] = new KeyColumn($rawColumn);
+      }
+    }
+    return $columns;
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/KeyColumn.php b/core/lib/Drupal/Core/Database/SchemaDefinition/KeyColumn.php
new file mode 100644
index 0000000000..314a7c7e05
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/KeyColumn.php
@@ -0,0 +1,21 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a column of a database index or key.
+ */
+final class KeyColumn implements SchemaDefinitionInterface {
+
+  /**
+   * Constructor.
+   */
+  public function __construct(
+    public readonly string $name,
+    public readonly ?int $length = NULL,
+  ) {
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/PrimaryKey.php b/core/lib/Drupal/Core/Database/SchemaDefinition/PrimaryKey.php
new file mode 100644
index 0000000000..b0c78786e5
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/PrimaryKey.php
@@ -0,0 +1,19 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a table's primary key.
+ */
+final class PrimaryKey extends KeyBase {
+
+  /**
+   * Constructor.
+   */
+  public function __construct(array $columns) {
+    parent::__construct($columns);
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/Property.php b/core/lib/Drupal/Core/Database/SchemaDefinition/Property.php
new file mode 100644
index 0000000000..6bee3da7d9
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/Property.php
@@ -0,0 +1,14 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Enumeration of property special cases for SchemaDefinition.
+ */
+enum Property {
+
+  case Undefined;
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/SchemaDefinitionInterface.php b/core/lib/Drupal/Core/Database/SchemaDefinition/SchemaDefinitionInterface.php
new file mode 100644
index 0000000000..2d3489f872
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/SchemaDefinitionInterface.php
@@ -0,0 +1,11 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Interface for objects describing database elements.
+ */
+interface SchemaDefinitionInterface {
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/Table.php b/core/lib/Drupal/Core/Database/SchemaDefinition/Table.php
new file mode 100644
index 0000000000..ac68d80dce
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/Table.php
@@ -0,0 +1,26 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a database table.
+ */
+final class Table implements SchemaDefinitionInterface {
+
+  /**
+   * Constructor.
+   */
+  public function __construct(
+    public readonly string $name,
+    public readonly array $columns,
+    public readonly Property|string $description = Property::Undefined,
+    public readonly Property|PrimaryKey $primaryKey = Property::Undefined,
+    public readonly Property|array $uniqueKeys = Property::Undefined,
+    public readonly Property|array $indexes = Property::Undefined,
+    public readonly Property|array $foreignKeys = Property::Undefined,
+  ) {
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/UniqueKey.php b/core/lib/Drupal/Core/Database/SchemaDefinition/UniqueKey.php
new file mode 100644
index 0000000000..68a3b7e052
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/UniqueKey.php
@@ -0,0 +1,22 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a database unique key.
+ */
+final class UniqueKey extends KeyBase {
+
+  /**
+   * Constructor.
+   */
+  public function __construct(
+    public readonly string $name,
+    array $columns,
+  ) {
+    parent::__construct($columns);
+  }
+
+}
diff --git a/core/modules/system/system.install b/core/modules/system/system.install
index 079fa6cbf7..4002134e4c 100644
--- a/core/modules/system/system.install
+++ b/core/modules/system/system.install
@@ -13,6 +13,12 @@
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Database\Database;
+use Drupal\Core\Database\SchemaDefinition\Column;
+use Drupal\Core\Database\SchemaDefinition\ForeignKey;
+use Drupal\Core\Database\SchemaDefinition\Index;
+use Drupal\Core\Database\SchemaDefinition\KeyColumn;
+use Drupal\Core\Database\SchemaDefinition\PrimaryKey;
+use Drupal\Core\Database\SchemaDefinition\Table;
 use Drupal\Core\DrupalKernel;
 use Drupal\Core\Extension\ExtensionLifecycle;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -1616,69 +1622,83 @@ function system_schema() {
   // @deprecated The sequences table has been deprecated in drupal:10.2.0 and is
   // removed from drupal:12.0.0. See https://www.drupal.org/node/3220378.
   // @todo: Remove sequences table in Drupal 12. See https://www.drupal.org/i/3335756
-  $schema['sequences'] = [
-    'description' => 'Stores IDs.',
-    'fields' => [
-      'value' => [
-        'description' => 'The value of the sequence.',
-        'type' => 'serial',
-        'unsigned' => TRUE,
-        'not null' => TRUE,
-      ],
-    ],
-    'primary key' => ['value'],
-  ];
-
-  $schema['sessions'] = [
-    'description' => "Drupal's session handlers read and write into the sessions table. Each record represents a user session, either anonymous or authenticated.",
-    'fields' => [
-      'uid' => [
-        'description' => 'The {users}.uid corresponding to a session, or 0 for anonymous user.',
-        'type' => 'int',
-        'unsigned' => TRUE,
-        'not null' => TRUE,
-      ],
-      'sid' => [
-        'description' => "A session ID (hashed). The value is generated by Drupal's session handlers.",
-        'type' => 'varchar_ascii',
-        'length' => 128,
-        'not null' => TRUE,
-      ],
-      'hostname' => [
-        'description' => 'The IP address that last used this session ID (sid).',
-        'type' => 'varchar_ascii',
-        'length' => 128,
-        'not null' => TRUE,
-        'default' => '',
-      ],
-      'timestamp' => [
-        'description' => 'The Unix timestamp when this session last requested a page. Old records are purged by PHP automatically.',
-        'type' => 'int',
-        'not null' => TRUE,
-        'default' => 0,
-        'size' => 'big',
-      ],
-      'session' => [
-        'description' => 'The serialized contents of the user\'s session, an array of name/value pairs that persists across page requests by this session ID. Drupal loads the user\'s session from here at the start of each request and saves it at the end.',
-        'type' => 'blob',
-        'not null' => FALSE,
-        'size' => 'big',
-      ],
+  $schema[] = new Table(
+    name: 'sequences',
+    description: 'Stores IDs.',
+    columns: [
+      new Column(
+        name: 'value',
+        description: 'The value of the sequence.',
+        type: 'serial',
+        unsigned: TRUE,
+        notNull: TRUE,
+      ),
     ],
-    'primary key' => [
-      'sid',
+    primaryKey: new PrimaryKey(['value']),
+  );
+
+  $schema[] = new Table(
+    name: 'sessions',
+    description: "Drupal's session handlers read and write into the sessions table. Each record represents a user session, either anonymous or authenticated.",
+    columns: [
+      new Column(
+        name: 'uid',
+        description: 'The {users}.uid corresponding to a session, or 0 for anonymous user.',
+        type: 'int',
+        unsigned: TRUE,
+        notNull: TRUE,
+      ),
+      new Column(
+        name: 'sid',
+        description: "A session ID (hashed). The value is generated by Drupal's session handlers.",
+        type: 'varchar_ascii',
+        length: 128,
+        notNull: TRUE,
+      ),
+      new Column(
+        name: 'hostname',
+        description: 'The IP address that last used this session ID (sid).',
+        type: 'varchar_ascii',
+        length: 128,
+        notNull: TRUE,
+        default: '',
+      ),
+      new Column(
+        name: 'timestamp',
+        description: 'The Unix timestamp when this session last requested a page. Old records are purged by PHP automatically.',
+        type: 'int',
+        notNull: TRUE,
+        default: 0,
+        size: 'big',
+      ),
+      new Column(
+        name: 'session',
+        description: 'The serialized contents of the user\'s session, an array of name/value pairs that persists across page requests by this session ID. Drupal loads the user\'s session from here at the start of each request and saves it at the end.',
+        type: 'blob',
+        notNull: FALSE,
+        size: 'big',
+      ),
     ],
-    'indexes' => [
-      'timestamp' => ['timestamp'],
-      'uid' => ['uid'],
+    primaryKey: new PrimaryKey(['sid']),
+    indexes: [
+      new Index(
+        name: 'timestamp',
+        columns: ['timestamp'],
+      ),
+      new Index(
+        name: 'uid',
+        columns: ['uid'],
+      ),
     ],
-    'foreign keys' => [
-      'session_user' => [
-        'table' => 'users',
-        'columns' => ['uid' => 'uid'],
-      ],
+    foreignKeys: [
+      new ForeignKey(
+        name: 'session_user',
+        foreignTable: 'users',
+        columns: ['uid'],
+        foreignColumns: ['uid'],
+      ),
     ],
-  ];
+  );
 
   return $schema;
 }
