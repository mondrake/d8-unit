diff --git a/core/lib/Drupal/Component/Plugin/Discovery/AttributeClassDiscovery.php b/core/lib/Drupal/Component/Plugin/Discovery/AttributeClassDiscovery.php
index 3477b746cc8..fa0cc074414 100644
--- a/core/lib/Drupal/Component/Plugin/Discovery/AttributeClassDiscovery.php
+++ b/core/lib/Drupal/Component/Plugin/Discovery/AttributeClassDiscovery.php
@@ -80,17 +80,37 @@ public function getDefinitions() {
               $sub_path = $iterator->getSubIterator()->getSubPath();
               $sub_path = $sub_path ? str_replace(DIRECTORY_SEPARATOR, '\\', $sub_path) . '\\' : '';
               $class = $namespace . '\\' . $sub_path . $fileinfo->getBasename('.php');
-
-              ['id' => $id, 'content' => $content] = $this->parseClass($class, $fileinfo);
-
+              try {
+                $writeToCache = TRUE;
+                ['id' => $id, 'content' => $content] = $this->parseClass($class, $fileinfo);
+              }
+              catch (\Throwable $t) {
+                // Plugins may rely on Attribute classes defined by modules that
+                // are not installed. In this case a class not found error may
+                // be thrown from reflection, however this is an unavoidable
+                // situation with optional dependencies and plugins. Just
+                // silently skip over this class and avoid writing to the cache,
+                // so that it is scanned each time. This ensures that the plugin
+                // definition will be found if the module it requires is
+                // enabled.
+dump($t->getMessage());
+                if (preg_match('/(Class|Interface) .* (not found|does not exist)$/', $t->getMessage())) {
+dump('MATCH');
+                  $writeToCache = FALSE;
+                  continue;
+                }
+                throw $t;
+              }
               if ($id) {
                 $definitions[$id] = $content;
                 // Explicitly serialize this to create a new object instance.
                 $this->fileCache->set($fileinfo->getPathName(), ['id' => $id, 'content' => serialize($content)]);
               }
               else {
-                // Store a NULL object, so the file is not parsed again.
-                $this->fileCache->set($fileinfo->getPathName(), [NULL]);
+                if ($writeToCache) {
+                  // Store a NULL object, so the file is not parsed again.
+                  $this->fileCache->set($fileinfo->getPathName(), [NULL]);
+                }
               }
             }
           }
diff --git a/core/phpstan.neon.dist b/core/phpstan.neon.dist
index 35bcfd1e64b..b261a1b12a1 100644
--- a/core/phpstan.neon.dist
+++ b/core/phpstan.neon.dist
@@ -33,10 +33,11 @@ parameters:
     - scripts/generate-d?-content.sh
     # Skip data files.
     - lib/Drupal/Component/Transliteration/data/*.php
-    # Below extends on purpose a non existing class for testing.
+    # Below extend on purpose non existing classes for testing.
     - modules/system/tests/modules/plugin_test/src/Plugin/plugin_test/fruit/ExtendingNonInstalledClass.php
     - modules/system/tests/modules/plugin_test/src/Plugin/plugin_test/custom_annotation/UsingNonInstalledTraitClass.php
     - modules/system/tests/modules/plugin_test/src/Plugin/plugin_test/custom_annotation/ExtendingNonInstalledClass.php
+    - tests/Drupal/Tests/Component/Plugin/Attribute/Fixtures/Plugins/PluginNamespace/AttributeDiscoveryTest2.php
 
   ignoreErrors:
     # new static() is a best practice in Drupal, so we cannot fix that.
diff --git a/core/tests/Drupal/Tests/Component/Plugin/Attribute/AttributeClassDiscoveryTest.php b/core/tests/Drupal/Tests/Component/Plugin/Attribute/AttributeClassDiscoveryTest.php
index f6c6370e7e1..28c22904df3 100644
--- a/core/tests/Drupal/Tests/Component/Plugin/Attribute/AttributeClassDiscoveryTest.php
+++ b/core/tests/Drupal/Tests/Component/Plugin/Attribute/AttributeClassDiscoveryTest.php
@@ -4,6 +4,7 @@
 
 namespace Drupal\Tests\Component\Plugin\Attribute;
 
+use Composer\Autoload\ClassLoader;
 use Drupal\Component\Plugin\Discovery\AttributeClassDiscovery;
 use Drupal\Component\FileCache\FileCacheFactory;
 use PHPUnit\Framework\TestCase;
@@ -22,6 +23,7 @@ class AttributeClassDiscoveryTest extends TestCase {
    */
   protected function setUp(): void {
     parent::setUp();
+
     // Ensure the file cache is disabled.
     FileCacheFactory::setConfiguration([FileCacheFactory::DISABLE_CACHE => TRUE]);
     // Ensure that FileCacheFactory has a prefix.
@@ -29,7 +31,11 @@ protected function setUp(): void {
 
     // Normally the attribute classes would be autoloaded.
     include_once __DIR__ . '/Fixtures/CustomPlugin.php';
-    include_once __DIR__ . '/Fixtures/Plugins/PluginNamespace/AttributeDiscoveryTest1.php';
+
+    // Register classloader for the fixture plugins.
+    $additionalClassLoader = new ClassLoader();
+    $additionalClassLoader->addPsr4("com\\example\\PluginNamespace\\", __DIR__ . "/Fixtures/Plugins/PluginNamespace");
+    $additionalClassLoader->register(TRUE);
   }
 
   /**
diff --git a/core/tests/Drupal/Tests/Component/Plugin/Attribute/Fixtures/Plugins/PluginNamespace/AttributeDiscoveryTest2.php b/core/tests/Drupal/Tests/Component/Plugin/Attribute/Fixtures/Plugins/PluginNamespace/AttributeDiscoveryTest2.php
new file mode 100644
index 00000000000..d094b3b9793
--- /dev/null
+++ b/core/tests/Drupal/Tests/Component/Plugin/Attribute/Fixtures/Plugins/PluginNamespace/AttributeDiscoveryTest2.php
@@ -0,0 +1,16 @@
+<?php
+
+declare(strict_types=1);
+
+namespace com\example\PluginNamespace;
+
+use Drupal\a_module_that_does_not_exist\Plugin\Custom;
+
+/**
+ * Provides a custom test plugin that extends from a missing dependency.
+ */
+#[CustomPlugin(
+  id: "discovery_test_2",
+  title: "Discovery test plugin 2"
+)]
+class AttributeDiscoveryTest2 extends Custom {}
