diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index 7e405e1b1b..4024c576bd 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -63,7 +63,7 @@ abstract class Connection {
    *
    * @var array
    */
-  protected $transactionLayers = [];
+  public $transactionLayers = [];
 
   /**
    * Index of what driver-specific class to use for various operations.
@@ -226,6 +226,11 @@ abstract class Connection {
    */
   private array $enabledEvents = [];
 
+  /**
+   * The transaction manager.
+   */
+  private TransactionManager $transactionManager;
+
   /**
    * Constructs a Connection object.
    *
@@ -273,6 +278,7 @@ public function __destruct() {
     // Ensure that the circular reference caused by Connection::__construct()
     // using $this in the call to set the statement class can be garbage
     // collected.
+    $this->transactionManager = NULL;
     $this->connection = NULL;
   }
 
@@ -1301,7 +1307,7 @@ public function escapeLike($string) {
    *   TRUE if we're currently in a transaction, FALSE otherwise.
    */
   public function inTransaction() {
-    return ($this->transactionDepth() > 0);
+    return $this->transactionManager()->inTransaction();
   }
 
   /**
@@ -1311,9 +1317,23 @@ public function inTransaction() {
    *   The current transaction depth.
    */
   public function transactionDepth() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
     return count($this->transactionLayers);
   }
 
+  /**
+   * Returns the transaction manager.
+   *
+   * @return \Drupal\Core\Database\TransactionManager
+   *   The transaction manager.
+   */
+  public function transactionManager(): TransactionManager {
+    if (!isset($this->transactionManager)) {
+      $this->transactionManager = new TransactionManager($this);
+    }
+    return $this->transactionManager;
+  }
+
   /**
    * Returns a new DatabaseTransaction object on this connection.
    *
@@ -1326,8 +1346,7 @@ public function transactionDepth() {
    * @see \Drupal\Core\Database\Transaction
    */
   public function startTransaction($name = '') {
-    $class = $this->getDriverClass('Transaction');
-    return new $class($this, $name);
+    return $this->transactionManager()->startTransaction($name);
   }
 
   /**
diff --git a/core/lib/Drupal/Core/Database/Transaction.php b/core/lib/Drupal/Core/Database/Transaction.php
index 76d5fc8f5f..1b68a79c6c 100644
--- a/core/lib/Drupal/Core/Database/Transaction.php
+++ b/core/lib/Drupal/Core/Database/Transaction.php
@@ -51,7 +51,7 @@ public function __construct(Connection $connection, $name = NULL) {
     $this->connection = $connection;
     // If there is no transaction depth, then no transaction has started. Name
     // the transaction 'drupal_transaction'.
-    if (!$depth = $connection->transactionDepth()) {
+    if (!$depth = $connection->transactionManager()->currentNestingDepth()) {
       $this->name = 'drupal_transaction';
     }
     // Within transactions, savepoints are used. Each savepoint requires a
diff --git a/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificTransactionTestBase.php b/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificTransactionTestBase.php
index ebbf60826a..47e718c3df 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificTransactionTestBase.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificTransactionTestBase.php
@@ -57,7 +57,7 @@ class DriverSpecificTransactionTestBase extends DriverSpecificDatabaseTestBase {
    *   Whether to execute a DDL statement during the inner transaction.
    */
   protected function transactionOuterLayer($suffix, $rollback = FALSE, $ddl_statement = FALSE) {
-    $depth = $this->connection->transactionDepth();
+    $depth = $this->connection->transactionManager()->currentNestingDepth();
     $txn = $this->connection->startTransaction();
 
     // Insert a single row into the testing table.
@@ -80,7 +80,7 @@ protected function transactionOuterLayer($suffix, $rollback = FALSE, $ddl_statem
       // Roll back the transaction, if requested.
       // This rollback should propagate to the last savepoint.
       $txn->rollBack();
-      $this->assertSame($depth, $this->connection->transactionDepth(), 'Transaction has rolled back to the last savepoint after calling rollBack().');
+      $this->assertSame($depth, $this->connection->transactionManager()->currentNestingDepth(), 'Transaction has rolled back to the last savepoint after calling rollBack().');
     }
   }
 
@@ -98,14 +98,14 @@ protected function transactionOuterLayer($suffix, $rollback = FALSE, $ddl_statem
    *   Whether to execute a DDL statement during the transaction.
    */
   protected function transactionInnerLayer($suffix, $rollback = FALSE, $ddl_statement = FALSE) {
-    $depth = $this->connection->transactionDepth();
+    $depth = $this->connection->transactionManager()->currentNestingDepth();
     // Start a transaction. If we're being called from ->transactionOuterLayer,
     // then we're already in a transaction. Normally, that would make starting
     // a transaction here dangerous, but the database API handles this problem
     // for us by tracking the nesting and avoiding the danger.
     $txn = $this->connection->startTransaction();
 
-    $depth2 = $this->connection->transactionDepth();
+    $depth2 = $this->connection->transactionManager()->currentNestingDepth();
     $this->assertGreaterThan($depth, $depth2, 'Transaction depth has increased with new transaction.');
 
     // Insert a single row into the testing table.
@@ -138,7 +138,7 @@ protected function transactionInnerLayer($suffix, $rollback = FALSE, $ddl_statem
       // Roll back the transaction, if requested.
       // This rollback should propagate to the last savepoint.
       $txn->rollBack();
-      $this->assertSame($depth, $this->connection->transactionDepth(), 'Transaction has rolled back to the last savepoint after calling rollBack().');
+      $this->assertSame($depth, $this->connection->transactionManager()->currentNestingDepth(), 'Transaction has rolled back to the last savepoint after calling rollBack().');
     }
   }
 
