diff --git a/composer.lock b/composer.lock
index f8481108ac..01fe510362 100644
--- a/composer.lock
+++ b/composer.lock
@@ -446,7 +446,7 @@
             "dist": {
                 "type": "path",
                 "url": "core",
-                "reference": "9e2d1532ca02ec3d0fb258d23a5c404533bcac43"
+                "reference": "8446b158ab9347c56971f885165356738ccdeebb"
             },
             "require": {
                 "asm89/stack-cors": "^2.1",
@@ -507,6 +507,7 @@
                 "drupal/core-front-matter": "self.version",
                 "drupal/core-gettext": "self.version",
                 "drupal/core-graph": "self.version",
+                "drupal/core-html-attribute": "self.version",
                 "drupal/core-http-foundation": "self.version",
                 "drupal/core-php-storage": "self.version",
                 "drupal/core-plugin": "self.version",
diff --git a/core/.deprecation-ignore.txt b/core/.deprecation-ignore.txt
index a293efe4d0..fa1ec48cf1 100644
--- a/core/.deprecation-ignore.txt
+++ b/core/.deprecation-ignore.txt
@@ -16,6 +16,9 @@
 # testing using \Symfony\Component\ErrorHandler\DebugClassLoader.
 %The "Twig\\Environment::getTemplateClass\(\)" method is considered internal\. It may change without further notice\. You should not extend it from "Drupal\\Core\\Template\\TwigEnvironment"\.%
 
+# Skip Drupal\Core\Template\Attribute deprecation while fixing up.
+%\\Drupal\\Core\\Template\\Attribute.* is deprecated in drupal:10\.1\.0 and is removed from drupal:11\.0\.0\. Use \\Drupal\\Component\\HtmlAttribute\\HtmlAttributeCollection instead\. See https:\/\/www\.drupal\.org\/node\/3070485%
+
 # PHPUnit 9.
 %"PHPUnit\\Framework\\TestListener".*is deprecated%
 %"PHPUnit\\Framework\\TestListenerDefaultImplementation".*is deprecated%
diff --git a/core/composer.json b/core/composer.json
index 3716721036..279fcd6a24 100644
--- a/core/composer.json
+++ b/core/composer.json
@@ -62,6 +62,7 @@
         "drupal/core-front-matter": "self.version",
         "drupal/core-gettext": "self.version",
         "drupal/core-graph": "self.version",
+        "drupal/core-html-attribute": "self.version",
         "drupal/core-http-foundation": "self.version",
         "drupal/core-php-storage": "self.version",
         "drupal/core-plugin": "self.version",
diff --git a/core/lib/Drupal/Component/HtmlAttribute/HtmlAttributeArray.php b/core/lib/Drupal/Component/HtmlAttribute/HtmlAttributeArray.php
new file mode 100644
index 0000000000..c80c7f77c6
--- /dev/null
+++ b/core/lib/Drupal/Component/HtmlAttribute/HtmlAttributeArray.php
@@ -0,0 +1,103 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Component\HtmlAttribute;
+
+use Drupal\Component\Utility\Html;
+
+/**
+ * A class defining a type of HtmlAttribute that can be added to as an array.
+ *
+ * To use with HtmlAttributeCollection, the array must be specified.
+ * Correct:
+ * @code
+ *  $attributes = new HtmlAttributeCollection();
+ *  $attributes['class'] = [];
+ *  $attributes['class'][] = 'cat';
+ * @endcode
+ * Incorrect:
+ * @code
+ *  $attributes = new HtmlAttributeCollection();
+ *  $attributes['class'][] = 'cat';
+ * @endcode
+ *
+ * @see \Drupal\Component\HtmlAttribute\HtmlAttributeCollection
+ */
+class HtmlAttributeArray extends HtmlAttributeValueBase implements \ArrayAccess, \IteratorAggregate {
+
+  /**
+   * Ensures empty array as a result of array_filter will not print '$name=""'.
+   *
+   * @see \Drupal\Component\HtmlAttribute\HtmlAttributeArray::__toString()
+   * @see \Drupal\Component\HtmlAttribute\HtmlAttributeValueBase::render()
+   */
+  const RENDER_EMPTY_ATTRIBUTE = FALSE;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function offsetGet(mixed $offset): mixed {
+    return $this->value[$offset];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function offsetSet(mixed $offset, mixed $value): void {
+    if (isset($offset)) {
+      $this->value[$offset] = $value;
+    }
+    else {
+      $this->value[] = $value;
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function offsetUnset(mixed $offset): void {
+    unset($this->value[$offset]);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function offsetExists(mixed $offset): bool {
+    return isset($this->value[$offset]);
+  }
+
+  /**
+   * Implements the magic __toString() method.
+   */
+  public function __toString(): string {
+    // Filter out any empty values before printing.
+    $this->value = array_unique(array_filter($this->value));
+    return Html::escape(implode(' ', $this->value));
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getIterator(): \Traversable {
+    return new \ArrayIterator($this->value);
+  }
+
+  /**
+   * Exchange the array for another one.
+   *
+   * @see ArrayObject::exchangeArray
+   *
+   * @param array $input
+   *   The array input to replace the internal value.
+   *
+   * @return array
+   *   The old array value.
+   */
+  public function exchangeArray(array $input): array {
+    $old = $this->value;
+    $this->value = $input;
+    return $old;
+  }
+
+}
diff --git a/core/lib/Drupal/Component/HtmlAttribute/HtmlAttributeBoolean.php b/core/lib/Drupal/Component/HtmlAttribute/HtmlAttributeBoolean.php
new file mode 100644
index 0000000000..8e9c48f2b9
--- /dev/null
+++ b/core/lib/Drupal/Component/HtmlAttribute/HtmlAttributeBoolean.php
@@ -0,0 +1,46 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Component\HtmlAttribute;
+
+use Drupal\Component\Utility\Html;
+
+/**
+ * A class that defines a type of boolean HTML attribute.
+ *
+ * Boolean HTML attributes are not attributes with values of TRUE/FALSE.
+ * They are attributes that if they exist in the tag, they are TRUE.
+ * Examples include selected, disabled, checked, readonly.
+ *
+ * To set a boolean attribute on the HtmlAttributeCollection class, set it to
+ * TRUE.
+ * @code
+ *  $attributes = new HtmlAttributeCollection();
+ *  $attributes['disabled'] = TRUE;
+ *  echo '<select' . $attributes . '/>';
+ *  // produces <select disabled>;
+ *  $attributes['disabled'] = FALSE;
+ *  echo '<select' . $attributes . '/>';
+ *  // produces <select>;
+ * @endcode
+ *
+ * @see \Drupal\Component\HtmlAttribute\HtmlAttributeCollection
+ */
+class HtmlAttributeBoolean extends HtmlAttributeValueBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function render(): string {
+    return $this->__toString();
+  }
+
+  /**
+   * Implements the magic __toString() method.
+   */
+  public function __toString(): string {
+    return $this->value === FALSE ? '' : Html::escape($this->name);
+  }
+
+}
diff --git a/core/lib/Drupal/Component/HtmlAttribute/HtmlAttributeCollection.php b/core/lib/Drupal/Component/HtmlAttribute/HtmlAttributeCollection.php
new file mode 100644
index 0000000000..4933109230
--- /dev/null
+++ b/core/lib/Drupal/Component/HtmlAttribute/HtmlAttributeCollection.php
@@ -0,0 +1,391 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Component\HtmlAttribute;
+
+use Drupal\Component\Render\PlainTextOutput;
+use Drupal\Component\Render\MarkupInterface;
+use Drupal\Component\Utility\NestedArray;
+
+/**
+ * Collects, sanitizes, and renders HTML attributes.
+ *
+ * To use, optionally pass in an associative array of defined attributes, or
+ * add attributes using array syntax. For example:
+ * @code
+ *  $attributes = new HtmlAttributeCollection(['id' => 'socks']);
+ *  $attributes['class'] = ['black-cat', 'white-cat'];
+ *  $attributes['class'][] = 'black-white-cat';
+ *  echo '<cat' . $attributes . '>';
+ *  // Produces <cat id="socks" class="black-cat white-cat black-white-cat">
+ * @endcode
+ *
+ * $attributes always prints out all the attributes. For example:
+ * @code
+ *  $attributes = new HtmlAttributeCollection(['id' => 'socks']);
+ *  $attributes['class'] = ['black-cat', 'white-cat'];
+ *  $attributes['class'][] = 'black-white-cat';
+ *  echo '<cat class="cat ' . $attributes['class'] . '"' . $attributes . '>';
+ *  // Produces <cat class="cat black-cat white-cat black-white-cat" id="socks" class="cat black-cat white-cat black-white-cat">
+ * @endcode
+ *
+ * When printing out individual attributes to customize them within a Twig
+ * template, use the "without" filter to prevent attributes that have already
+ * been printed from being printed again. For example:
+ * @code
+ * <cat class="{{ attributes.class }} my-custom-class"{{ attributes|without('class') }}>
+ * @endcode
+ * Produces:
+ * @code
+ * <cat class="cat black-cat white-cat black-white-cat my-custom-class" id="socks">
+ * @endcode
+ *
+ * The attribute keys and values are automatically escaped for output with
+ * Html::escape(). No protocol filtering is applied, so when using user-entered
+ * input as a value for an attribute that expects a URI (href, src, ...),
+ * UrlHelper::stripDangerousProtocols() should be used to ensure dangerous
+ * protocols (such as 'javascript:') are removed. For example:
+ * @code
+ *  $path = 'javascript:alert("xss");';
+ *  $path = UrlHelper::stripDangerousProtocols($path);
+ *  $attributes = new HtmlAttributeCollection(['href' => $path]);
+ *  echo '<a' . $attributes . '>';
+ *  // Produces <a href="alert(&quot;xss&quot;);">
+ * @endcode
+ *
+ * The attribute values are considered plain text and are treated as such. If a
+ * safe HTML string is detected, it is converted to plain text with
+ * PlainTextOutput::renderFromHtml() before being escaped. For example:
+ * @code
+ *   $value = t('Highlight the @tag tag', ['@tag' => '<em>']);
+ *   $attributes = new HtmlAttributeCollection(['value' => $value]);
+ *   echo '<input' . $attributes . '>';
+ *   // Produces <input value="Highlight the &lt;em&gt; tag">
+ * @endcode
+ *
+ * @see \Drupal\Component\Utility\Html::escape()
+ * @see \Drupal\Component\Render\PlainTextOutput::renderFromHtml()
+ * @see \Drupal\Component\Utility\UrlHelper::stripDangerousProtocols()
+ */
+class HtmlAttributeCollection implements \ArrayAccess, \IteratorAggregate, MarkupInterface {
+
+  /**
+   * Stores the attribute data.
+   *
+   * @var \Drupal\Component\HtmlAttribute\HtmlAttributeValueBase[]
+   */
+  protected array $storage = [];
+
+  /**
+   * Constructs a \Drupal\Component\HtmlAttribute\HtmlAttributeCollection object.
+   *
+   * @param \Drupal\Component\HtmlAttribute\HtmlAttributeCollection|array $attributes
+   *   An associative array of key-value pairs to be converted to attributes.
+   */
+  public function __construct(HtmlAttributeCollection|array $attributes = []) {
+    foreach ($attributes as $name => $value) {
+      $this->offsetSet($name, $value);
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function offsetGet(mixed $name): mixed {
+    return $this->storage[$name] ?? NULL;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function offsetSet(mixed $name, mixed $value): void {
+    $this->storage[$name] = $this->createAttributeValue($name, $value);
+  }
+
+  /**
+   * Creates the different types of attribute values.
+   *
+   * @param string $name
+   *   The attribute name.
+   * @param Drupal\Component\Render\MarkupInterface|string|int|bool|float|array|null $value
+   *   The attribute value.
+   *
+   * @return \Drupal\Component\HtmlAttribute\HtmlAttributeValueBase
+   *   An HtmlAttributeValueBase representation of the attribute's value.
+   */
+  protected function createAttributeValue(string $name, MarkupInterface|string|int|bool|float|array|NULL $value): HtmlAttributeValueBase {
+    // If the value is already an HtmlAttributeValueBase object,
+    // return a new instance of the same class, but with the new name.
+    if ($value instanceof HtmlAttributeValueBase) {
+      $class = get_class($value);
+      return new $class($name, $value->value());
+    }
+    // An array value or 'class' attribute name are forced to always be an
+    // AttributeArray value for consistency.
+    if ($name == 'class' && !is_array($value)) {
+      // Cast the value to string in case it implements MarkupInterface.
+      $value = [(string) $value];
+    }
+    if (is_array($value)) {
+      // Cast the value to an array if the value was passed in as a string.
+      // @todo Decide to fix all the broken instances of class as a string
+      // in core or cast them.
+      $value = new HtmlAttributeArray($name, $value);
+    }
+    elseif (is_bool($value)) {
+      $value = new HtmlAttributeBoolean($name, $value);
+    }
+    // As a development aid, we allow the value to be a safe string object.
+    elseif ($value instanceof MarkupInterface) {
+      // Attributes are not supposed to display HTML markup, so we just convert
+      // the value to plain text.
+      $value = PlainTextOutput::renderFromHtml($value);
+      $value = new HtmlAttributeString($name, $value);
+    }
+    elseif (!is_object($value)) {
+      $value = new HtmlAttributeString($name, $value);
+    }
+    return $value;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function offsetUnset(mixed $name): void {
+    unset($this->storage[$name]);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function offsetExists(mixed $name): bool {
+    return isset($this->storage[$name]);
+  }
+
+  /**
+   * Adds classes or merges them on to array of existing CSS classes.
+   *
+   * @param string|array ...
+   *   CSS classes to add to the class attribute array.
+   *
+   * @return $this
+   */
+  public function addClass(): HtmlAttributeCollection {
+    $args = func_get_args();
+    if ($args) {
+      $classes = [];
+      foreach ($args as $arg) {
+        // Merge the values passed in from the classes array.
+        // The argument is cast to an array to support comma separated single
+        // values or one or more array arguments.
+        $classes = array_merge($classes, (array) $arg);
+      }
+
+      // Merge if there are values, just add them otherwise.
+      if (isset($this->storage['class']) && $this->storage['class'] instanceof HtmlAttributeArray) {
+        // Merge the values passed in from the class value array.
+        $classes = array_merge($this->storage['class']->value(), $classes);
+        $this->storage['class']->exchangeArray($classes);
+      }
+      else {
+        $this->offsetSet('class', $classes);
+      }
+    }
+
+    return $this;
+  }
+
+  /**
+   * Sets values for an attribute key.
+   *
+   * @param string $attribute
+   *   Name of the attribute.
+   * @param mixed $value
+   *   Value(s) to set for the given attribute key.
+   *
+   * @return $this
+   */
+  public function setAttribute(string $attribute, $value): HtmlAttributeCollection {
+    $this->offsetSet($attribute, $value);
+
+    return $this;
+  }
+
+  /**
+   * Checks if the storage has an attribute with the given name.
+   *
+   * @param string $name
+   *   The name of the attribute to check for.
+   *
+   * @return bool
+   *   Returns TRUE if the attribute exists, or FALSE otherwise.
+   */
+  public function hasAttribute(string $name): bool {
+    return array_key_exists($name, $this->storage);
+  }
+
+  /**
+   * Removes an attribute from an Attribute object.
+   *
+   * @param string|array ...
+   *   Attributes to remove from the attribute array.
+   *
+   * @return $this
+   */
+  public function removeAttribute(): HtmlAttributeCollection {
+    $args = func_get_args();
+    foreach ($args as $arg) {
+      // Support arrays or multiple arguments.
+      if (is_array($arg)) {
+        foreach ($arg as $value) {
+          unset($this->storage[$value]);
+        }
+      }
+      else {
+        unset($this->storage[$arg]);
+      }
+    }
+
+    return $this;
+  }
+
+  /**
+   * Removes argument values from array of existing CSS classes.
+   *
+   * @param string|array ...
+   *   CSS classes to remove from the class attribute array.
+   *
+   * @return $this
+   */
+  public function removeClass(): HtmlAttributeCollection {
+    // With no class attribute, there is no need to remove.
+    if (isset($this->storage['class']) && $this->storage['class'] instanceof HtmlAttributeArray) {
+      $args = func_get_args();
+      $classes = [];
+      foreach ($args as $arg) {
+        // Merge the values passed in from the classes array.
+        // The argument is cast to an array to support comma separated single
+        // values or one or more array arguments.
+        $classes = array_merge($classes, (array) $arg);
+      }
+
+      // Remove the values passed in from the value array. Use array_values() to
+      // ensure that the array index remains sequential.
+      $classes = array_values(array_diff($this->storage['class']->value(), $classes));
+      $this->storage['class']->exchangeArray($classes);
+    }
+    return $this;
+  }
+
+  /**
+   * Gets the class attribute value if set.
+   *
+   * This method is implemented to take precedence over hasClass() for Twig 2.0.
+   *
+   * @return \Drupal\Component\HtmlAttribute\HtmlAttributeValueBase|null
+   *   The class attribute value if set, NULL otherwise.
+   *
+   * @see twig_get_attribute()
+   */
+  public function getClass(): ?HtmlAttributeValueBase {
+    return $this->offsetGet('class');
+  }
+
+  /**
+   * Checks if the class array has the given CSS class.
+   *
+   * @param string $class
+   *   The CSS class to check for.
+   *
+   * @return bool
+   *   Returns TRUE if the class exists, or FALSE otherwise.
+   */
+  public function hasClass(string $class): bool {
+    if (isset($this->storage['class']) && $this->storage['class'] instanceof HtmlAttributeArray) {
+      return in_array($class, $this->storage['class']->value());
+    }
+    else {
+      return FALSE;
+    }
+  }
+
+  /**
+   * Implements the magic __toString() method.
+   */
+  public function __toString(): string {
+    $return = '';
+    foreach ($this->storage as $value) {
+      $rendered = $value->render();
+      if ($rendered) {
+        $return .= ' ' . $rendered;
+      }
+    }
+    return $return;
+  }
+
+  /**
+   * Returns all storage elements as an array.
+   *
+   * @return array
+   *   An associative array of attributes.
+   */
+  public function toArray(): array {
+    $return = [];
+    foreach ($this->storage as $name => $value) {
+      $return[$name] = $value->value();
+    }
+
+    return $return;
+  }
+
+  /**
+   * Implements the magic __clone() method.
+   */
+  public function __clone() {
+    foreach ($this->storage as $name => $value) {
+      $this->storage[$name] = clone $value;
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getIterator(): \Traversable {
+    return new \ArrayIterator($this->storage);
+  }
+
+  /**
+   * Returns the whole array.
+   */
+  public function storage(): array {
+    return $this->storage;
+  }
+
+  /**
+   * Returns a representation of the object for use in JSON serialization.
+   *
+   * @return string
+   *   The safe string content.
+   */
+  public function jsonSerialize(): string {
+    return (string) $this;
+  }
+
+  /**
+   * Merges an Attribute object into the current storage.
+   *
+   * @param \Drupal\Component\HtmlAttribute\HtmlAttributeCollection $collection
+   *   The Attribute object to merge.
+   *
+   * @return $this
+   */
+  public function merge(HtmlAttributeCollection $collection): HtmlAttributeCollection {
+    $merged_attributes = NestedArray::mergeDeep($this->toArray(), $collection->toArray());
+    foreach ($merged_attributes as $name => $value) {
+      $this->storage[$name] = $this->createAttributeValue($name, $value);
+    }
+    return $this;
+  }
+
+}
diff --git a/core/lib/Drupal/Component/HtmlAttribute/HtmlAttributeString.php b/core/lib/Drupal/Component/HtmlAttribute/HtmlAttributeString.php
new file mode 100644
index 0000000000..7b40ba34e7
--- /dev/null
+++ b/core/lib/Drupal/Component/HtmlAttribute/HtmlAttributeString.php
@@ -0,0 +1,33 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Component\HtmlAttribute;
+
+use Drupal\Component\Utility\Html;
+
+/**
+ * A class that represents most standard HTML attributes.
+ *
+ * To use with the HtmlAttributeCollection class, set the key to be the
+ * attribute name and the value the attribute value.
+ * @code
+ *  $attributes = new HtmlAttributeCollection([]);
+ *  $attributes['id'] = 'socks';
+ *  $attributes['style'] = 'background-color:white';
+ *  echo '<cat ' . $attributes . '>';
+ *  // Produces: <cat id="socks" style="background-color:white">.
+ * @endcode
+ *
+ * @see \Drupal\Component\HtmlAttribute\HtmlAttributeCollection
+ */
+class HtmlAttributeString extends HtmlAttributeValueBase {
+
+  /**
+   * Implements the magic __toString() method.
+   */
+  public function __toString(): string {
+    return Html::escape((string) $this->value);
+  }
+
+}
diff --git a/core/lib/Drupal/Component/HtmlAttribute/HtmlAttributeValueBase.php b/core/lib/Drupal/Component/HtmlAttribute/HtmlAttributeValueBase.php
new file mode 100644
index 0000000000..689ef68e4f
--- /dev/null
+++ b/core/lib/Drupal/Component/HtmlAttribute/HtmlAttributeValueBase.php
@@ -0,0 +1,69 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Component\HtmlAttribute;
+
+use Drupal\Component\Utility\Html;
+
+/**
+ * Defines the base class for an attribute type.
+ *
+ * @see \Drupal\Component\HtmlAttribute\HtmlAttributeCollection
+ */
+abstract class HtmlAttributeValueBase {
+
+  /**
+   * Renders '$name=""' if $value is an empty string.
+   *
+   * @see \Drupal\Component\HtmlAttribute\HtmlAttributeValueBase::render()
+   */
+  const RENDER_EMPTY_ATTRIBUTE = TRUE;
+
+  /**
+   * Constructs a \Drupal\Component\HtmlAttribute\HtmlAttributeValueBase object.
+   *
+   * @param string $name
+   *   The name of the value.
+   * @param string|int|bool|float|array|null $value
+   *   The value itself.
+   */
+  public function __construct(
+    protected string $name,
+    protected string|int|bool|float|array|NULL $value,
+  ) {
+  }
+
+  /**
+   * Returns a string representation of the attribute.
+   *
+   * While __toString only returns the value in a string form, render()
+   * contains the name of the attribute as well.
+   *
+   * @return string
+   *   The string representation of the attribute.
+   */
+  public function render(): string {
+    $value = (string) $this;
+    if (isset($this->value) && static::RENDER_EMPTY_ATTRIBUTE || !empty($value)) {
+      return Html::escape($this->name) . '="' . $value . '"';
+    }
+    return '';
+  }
+
+  /**
+   * Returns the raw value.
+   *
+   * @return string|int|bool|float|array|null
+   *   The raw value.
+   */
+  public function value(): string|int|bool|float|array|NULL {
+    return $this->value;
+  }
+
+  /**
+   * Implements the magic __toString() method.
+   */
+  abstract public function __toString(): string;
+
+}
diff --git a/core/lib/Drupal/Component/HtmlAttribute/LICENSE.txt b/core/lib/Drupal/Component/HtmlAttribute/LICENSE.txt
new file mode 100644
index 0000000000..94fb84639c
--- /dev/null
+++ b/core/lib/Drupal/Component/HtmlAttribute/LICENSE.txt
@@ -0,0 +1,339 @@
+        GNU GENERAL PUBLIC LICENSE
+           Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+          Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+        GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+          NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+         END OF TERMS AND CONDITIONS
+
+      How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff --git a/core/lib/Drupal/Component/HtmlAttribute/README.txt b/core/lib/Drupal/Component/HtmlAttribute/README.txt
new file mode 100644
index 0000000000..70ad015367
--- /dev/null
+++ b/core/lib/Drupal/Component/HtmlAttribute/README.txt
@@ -0,0 +1,12 @@
+The Drupal HTML Attribute Component
+
+Thanks for using this Drupal component.
+
+You can participate in its development on Drupal.org, through our issue system:
+https://www.drupal.org/project/issues/drupal
+
+You can get the full Drupal repo here:
+https://www.drupal.org/project/drupal/git-instructions
+
+You can browse the full Drupal repo here:
+http://cgit.drupalcode.org/drupal
diff --git a/core/lib/Drupal/Component/HtmlAttribute/TESTING.txt b/core/lib/Drupal/Component/HtmlAttribute/TESTING.txt
new file mode 100644
index 0000000000..6fc82d0986
--- /dev/null
+++ b/core/lib/Drupal/Component/HtmlAttribute/TESTING.txt
@@ -0,0 +1,18 @@
+HOW-TO: Test this Drupal component
+
+In order to test this component, you'll need to get the entire Drupal repo and
+run the tests there.
+
+You'll find the tests under core/tests/Drupal/Tests/Component.
+
+You can get the full Drupal repo here:
+https://www.drupal.org/project/drupal/git-instructions
+
+You can find more information about running PHPUnit tests with Drupal here:
+https://www.drupal.org/node/2116263
+
+Each component in the Drupal\Component namespace has its own annotated test
+group. You can use this group to run only the tests for this component. Like
+this:
+
+$ ./vendor/bin/phpunit -c core --group HtmlAttribute
diff --git a/core/lib/Drupal/Component/HtmlAttribute/composer.json b/core/lib/Drupal/Component/HtmlAttribute/composer.json
new file mode 100644
index 0000000000..91e78dc5bd
--- /dev/null
+++ b/core/lib/Drupal/Component/HtmlAttribute/composer.json
@@ -0,0 +1,17 @@
+{
+    "name": "drupal/core-html-attribute",
+    "description": "Collects, sanitizes, and renders HTML attributes.",
+    "keywords": ["drupal"],
+    "homepage": "https://www.drupal.org/project/drupal",
+    "license": "GPL-2.0-or-later",
+    "require": {
+        "php": ">=8.1.0",
+        "drupal/core-render": "10.1.x-dev",
+        "drupal/core-utility": "10.1.x-dev"
+    },
+    "autoload": {
+        "psr-4": {
+            "Drupal\\Component\\HtmlAttribute\\": ""
+        }
+    }
+}
diff --git a/core/lib/Drupal/Core/Menu/MenuLinkTree.php b/core/lib/Drupal/Core/Menu/MenuLinkTree.php
index 52991cefa6..05776e9295 100644
--- a/core/lib/Drupal/Core/Menu/MenuLinkTree.php
+++ b/core/lib/Drupal/Core/Menu/MenuLinkTree.php
@@ -2,13 +2,13 @@
 
 namespace Drupal\Core\Menu;
 
+use Drupal\Component\HtmlAttribute\HtmlAttributeCollection;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Access\AccessResultInterface;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Controller\ControllerResolverInterface;
 use Drupal\Core\Routing\PreloadableRouteProviderInterface;
 use Drupal\Core\Routing\RouteProviderInterface;
-use Drupal\Core\Template\Attribute;
 
 /**
  * Implements the loading, transforming and rendering of menu link trees.
@@ -267,7 +267,7 @@ protected function buildItems(array $tree, CacheableMetadata &$tree_access_cache
 
       // Note: links are rendered in the menu.html.twig template; and they
       // automatically bubble their associated cacheability metadata.
-      $element['attributes'] = new Attribute();
+      $element['attributes'] = new HtmlAttributeCollection();
       $element['title'] = $link->getTitle();
       $element['url'] = $link->getUrlObject();
       $element['url']->setOption('set_active_class', TRUE);
diff --git a/core/lib/Drupal/Core/Template/Attribute.php b/core/lib/Drupal/Core/Template/Attribute.php
index aeb044a3b4..05627e39ff 100644
--- a/core/lib/Drupal/Core/Template/Attribute.php
+++ b/core/lib/Drupal/Core/Template/Attribute.php
@@ -2,9 +2,9 @@
 
 namespace Drupal\Core\Template;
 
-use Drupal\Component\Render\PlainTextOutput;
-use Drupal\Component\Render\MarkupInterface;
-use Drupal\Component\Utility\NestedArray;
+use Drupal\Component\HtmlAttribute\HtmlAttributeCollection;
+
+@trigger_error('\Drupal\Core\Template\Attribute is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use \Drupal\Component\HtmlAttribute\HtmlAttributeCollection instead. See https://www.drupal.org/node/3070485', E_USER_DEPRECATED);
 
 /**
  * Collects, sanitizes, and renders HTML attributes.
@@ -65,334 +65,11 @@
  * @see \Drupal\Component\Utility\Html::escape()
  * @see \Drupal\Component\Render\PlainTextOutput::renderFromHtml()
  * @see \Drupal\Component\Utility\UrlHelper::stripDangerousProtocols()
+ *
+ * @deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use
+ *   \Drupal\Component\HtmlAttribute\HtmlAttributeCollection instead.
+ *
+ * @see https://www.drupal.org/node/3070485
  */
-class Attribute implements \ArrayAccess, \IteratorAggregate, MarkupInterface {
-
-  /**
-   * Stores the attribute data.
-   *
-   * @var \Drupal\Core\Template\AttributeValueBase[]
-   */
-  protected $storage = [];
-
-  /**
-   * Constructs a \Drupal\Core\Template\Attribute object.
-   *
-   * @param array $attributes
-   *   An associative array of key-value pairs to be converted to attributes.
-   */
-  public function __construct($attributes = []) {
-    foreach ($attributes as $name => $value) {
-      $this->offsetSet($name, $value);
-    }
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  #[\ReturnTypeWillChange]
-  public function offsetGet($name) {
-    if (isset($this->storage[$name])) {
-      return $this->storage[$name];
-    }
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  #[\ReturnTypeWillChange]
-  public function offsetSet($name, $value) {
-    $this->storage[$name] = $this->createAttributeValue($name, $value);
-  }
-
-  /**
-   * Creates the different types of attribute values.
-   *
-   * @param string $name
-   *   The attribute name.
-   * @param mixed $value
-   *   The attribute value.
-   *
-   * @return \Drupal\Core\Template\AttributeValueBase
-   *   An AttributeValueBase representation of the attribute's value.
-   */
-  protected function createAttributeValue($name, $value) {
-    // If the value is already an AttributeValueBase object,
-    // return a new instance of the same class, but with the new name.
-    if ($value instanceof AttributeValueBase) {
-      $class = get_class($value);
-      return new $class($name, $value->value());
-    }
-    // An array value or 'class' attribute name are forced to always be an
-    // AttributeArray value for consistency.
-    if ($name == 'class' && !is_array($value)) {
-      // Cast the value to string in case it implements MarkupInterface.
-      $value = [(string) $value];
-    }
-    if (is_array($value)) {
-      // Cast the value to an array if the value was passed in as a string.
-      // @todo Decide to fix all the broken instances of class as a string
-      // in core or cast them.
-      $value = new AttributeArray($name, $value);
-    }
-    elseif (is_bool($value)) {
-      $value = new AttributeBoolean($name, $value);
-    }
-    // As a development aid, we allow the value to be a safe string object.
-    elseif ($value instanceof MarkupInterface) {
-      // Attributes are not supposed to display HTML markup, so we just convert
-      // the value to plain text.
-      $value = PlainTextOutput::renderFromHtml($value);
-      $value = new AttributeString($name, $value);
-    }
-    elseif (!is_object($value)) {
-      $value = new AttributeString($name, $value);
-    }
-    return $value;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  #[\ReturnTypeWillChange]
-  public function offsetUnset($name) {
-    unset($this->storage[$name]);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  #[\ReturnTypeWillChange]
-  public function offsetExists($name) {
-    return isset($this->storage[$name]);
-  }
-
-  /**
-   * Adds classes or merges them on to array of existing CSS classes.
-   *
-   * @param string|array ...
-   *   CSS classes to add to the class attribute array.
-   *
-   * @return $this
-   */
-  public function addClass() {
-    $args = func_get_args();
-    if ($args) {
-      $classes = [];
-      foreach ($args as $arg) {
-        // Merge the values passed in from the classes array.
-        // The argument is cast to an array to support comma separated single
-        // values or one or more array arguments.
-        $classes = array_merge($classes, (array) $arg);
-      }
-
-      // Merge if there are values, just add them otherwise.
-      if (isset($this->storage['class']) && $this->storage['class'] instanceof AttributeArray) {
-        // Merge the values passed in from the class value array.
-        $classes = array_merge($this->storage['class']->value(), $classes);
-        $this->storage['class']->exchangeArray($classes);
-      }
-      else {
-        $this->offsetSet('class', $classes);
-      }
-    }
-
-    return $this;
-  }
-
-  /**
-   * Sets values for an attribute key.
-   *
-   * @param string $attribute
-   *   Name of the attribute.
-   * @param string|array $value
-   *   Value(s) to set for the given attribute key.
-   *
-   * @return $this
-   */
-  public function setAttribute($attribute, $value) {
-    $this->offsetSet($attribute, $value);
-
-    return $this;
-  }
-
-  /**
-   * Checks if the storage has an attribute with the given name.
-   *
-   * @param string $name
-   *   The name of the attribute to check for.
-   *
-   * @return bool
-   *   Returns TRUE if the attribute exists, or FALSE otherwise.
-   */
-  public function hasAttribute($name) {
-    return array_key_exists($name, $this->storage);
-  }
-
-  /**
-   * Removes an attribute from an Attribute object.
-   *
-   * @param string|array ...
-   *   Attributes to remove from the attribute array.
-   *
-   * @return $this
-   */
-  public function removeAttribute() {
-    $args = func_get_args();
-    foreach ($args as $arg) {
-      // Support arrays or multiple arguments.
-      if (is_array($arg)) {
-        foreach ($arg as $value) {
-          unset($this->storage[$value]);
-        }
-      }
-      else {
-        unset($this->storage[$arg]);
-      }
-    }
-
-    return $this;
-  }
-
-  /**
-   * Removes argument values from array of existing CSS classes.
-   *
-   * @param string|array ...
-   *   CSS classes to remove from the class attribute array.
-   *
-   * @return $this
-   */
-  public function removeClass() {
-    // With no class attribute, there is no need to remove.
-    if (isset($this->storage['class']) && $this->storage['class'] instanceof AttributeArray) {
-      $args = func_get_args();
-      $classes = [];
-      foreach ($args as $arg) {
-        // Merge the values passed in from the classes array.
-        // The argument is cast to an array to support comma separated single
-        // values or one or more array arguments.
-        $classes = array_merge($classes, (array) $arg);
-      }
-
-      // Remove the values passed in from the value array. Use array_values() to
-      // ensure that the array index remains sequential.
-      $classes = array_values(array_diff($this->storage['class']->value(), $classes));
-      $this->storage['class']->exchangeArray($classes);
-    }
-    return $this;
-  }
-
-  /**
-   * Gets the class attribute value if set.
-   *
-   * This method is implemented to take precedence over hasClass() for Twig 2.0.
-   *
-   * @return \Drupal\Core\Template\AttributeValueBase
-   *   The class attribute value if set.
-   *
-   * @see twig_get_attribute()
-   */
-  public function getClass() {
-    return $this->offsetGet('class');
-  }
-
-  /**
-   * Checks if the class array has the given CSS class.
-   *
-   * @param string $class
-   *   The CSS class to check for.
-   *
-   * @return bool
-   *   Returns TRUE if the class exists, or FALSE otherwise.
-   */
-  public function hasClass($class) {
-    if (isset($this->storage['class']) && $this->storage['class'] instanceof AttributeArray) {
-      return in_array($class, $this->storage['class']->value());
-    }
-    else {
-      return FALSE;
-    }
-  }
-
-  /**
-   * Implements the magic __toString() method.
-   */
-  public function __toString() {
-    $return = '';
-    /** @var \Drupal\Core\Template\AttributeValueBase $value */
-    foreach ($this->storage as $value) {
-      $rendered = $value->render();
-      if ($rendered) {
-        $return .= ' ' . $rendered;
-      }
-    }
-    return $return;
-  }
-
-  /**
-   * Returns all storage elements as an array.
-   *
-   * @return array
-   *   An associative array of attributes.
-   */
-  public function toArray() {
-    $return = [];
-    foreach ($this->storage as $name => $value) {
-      $return[$name] = $value->value();
-    }
-
-    return $return;
-  }
-
-  /**
-   * Implements the magic __clone() method.
-   */
-  public function __clone() {
-    foreach ($this->storage as $name => $value) {
-      $this->storage[$name] = clone $value;
-    }
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  #[\ReturnTypeWillChange]
-  public function getIterator() {
-    return new \ArrayIterator($this->storage);
-  }
-
-  /**
-   * Returns the whole array.
-   */
-  public function storage() {
-    return $this->storage;
-  }
-
-  /**
-   * Returns a representation of the object for use in JSON serialization.
-   *
-   * @return string
-   *   The safe string content.
-   */
-  #[\ReturnTypeWillChange]
-  public function jsonSerialize() {
-    return (string) $this;
-  }
-
-  /**
-   * Merges an Attribute object into the current storage.
-   *
-   * @param \Drupal\Core\Template\Attribute $collection
-   *   The Attribute object to merge.
-   *
-   * @return $this
-   */
-  public function merge(Attribute $collection) {
-    $merged_attributes = NestedArray::mergeDeep($this->toArray(), $collection->toArray());
-    foreach ($merged_attributes as $name => $value) {
-      $this->storage[$name] = $this->createAttributeValue($name, $value);
-    }
-    return $this;
-  }
-
+class Attribute extends HtmlAttributeCollection {
 }
diff --git a/core/lib/Drupal/Core/Template/AttributeArray.php b/core/lib/Drupal/Core/Template/AttributeArray.php
index 71127f0047..bc8aba334e 100644
--- a/core/lib/Drupal/Core/Template/AttributeArray.php
+++ b/core/lib/Drupal/Core/Template/AttributeArray.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\Core\Template;
 
-use Drupal\Component\Utility\Html;
+use Drupal\Component\HtmlAttribute\HtmlAttributeArray as ComponentAttributeArray;
+
+@trigger_error('\Drupal\Core\Template\AttributeArray is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use \Drupal\Component\HtmlAttribute\HtmlAttributeArray instead. See https://www.drupal.org/node/3070485', E_USER_DEPRECATED);
 
 /**
  * A class that defines a type of Attribute that can be added to as an array.
@@ -21,86 +23,11 @@
  * @endcode
  *
  * @see \Drupal\Core\Template\Attribute
+ *
+ * @deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use
+ *   \Drupal\Component\HtmlAttribute\HtmlAttributeArray instead.
+ *
+ * @see https://www.drupal.org/node/3070485
  */
-class AttributeArray extends AttributeValueBase implements \ArrayAccess, \IteratorAggregate {
-
-  /**
-   * Ensures empty array as a result of array_filter will not print '$name=""'.
-   *
-   * @see \Drupal\Core\Template\AttributeArray::__toString()
-   * @see \Drupal\Core\Template\AttributeValueBase::render()
-   */
-  const RENDER_EMPTY_ATTRIBUTE = FALSE;
-
-  /**
-   * {@inheritdoc}
-   */
-  #[\ReturnTypeWillChange]
-  public function offsetGet($offset) {
-    return $this->value[$offset];
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  #[\ReturnTypeWillChange]
-  public function offsetSet($offset, $value) {
-    if (isset($offset)) {
-      $this->value[$offset] = $value;
-    }
-    else {
-      $this->value[] = $value;
-    }
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  #[\ReturnTypeWillChange]
-  public function offsetUnset($offset) {
-    unset($this->value[$offset]);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  #[\ReturnTypeWillChange]
-  public function offsetExists($offset) {
-    return isset($this->value[$offset]);
-  }
-
-  /**
-   * Implements the magic __toString() method.
-   */
-  public function __toString() {
-    // Filter out any empty values before printing.
-    $this->value = array_unique(array_filter($this->value));
-    return Html::escape(implode(' ', $this->value));
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  #[\ReturnTypeWillChange]
-  public function getIterator() {
-    return new \ArrayIterator($this->value);
-  }
-
-  /**
-   * Exchange the array for another one.
-   *
-   * @see ArrayObject::exchangeArray
-   *
-   * @param array $input
-   *   The array input to replace the internal value.
-   *
-   * @return array
-   *   The old array value.
-   */
-  public function exchangeArray($input) {
-    $old = $this->value;
-    $this->value = $input;
-    return $old;
-  }
-
+class AttributeArray extends ComponentAttributeArray {
 }
diff --git a/core/lib/Drupal/Core/Template/AttributeBoolean.php b/core/lib/Drupal/Core/Template/AttributeBoolean.php
index cc948202da..d41b20c7d7 100644
--- a/core/lib/Drupal/Core/Template/AttributeBoolean.php
+++ b/core/lib/Drupal/Core/Template/AttributeBoolean.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\Core\Template;
 
-use Drupal\Component\Utility\Html;
+use Drupal\Component\HtmlAttribute\HtmlAttributeBoolean as ComponentAttributeBoolean;
+
+@trigger_error('\Drupal\Core\Template\AttributeBoolean is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use \Drupal\Component\HtmlAttribute\HtmlAttributeBoolean instead. See https://www.drupal.org/node/3070485', E_USER_DEPRECATED);
 
 /**
  * A class that defines a type of boolean HTML attribute.
@@ -23,21 +25,11 @@
  * @endcode
  *
  * @see \Drupal\Core\Template\Attribute
+ *
+ * @deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use
+ *   \Drupal\Component\Attribute\AttributeBoolean instead.
+ *
+ * @see https://www.drupal.org/node/3070485
  */
-class AttributeBoolean extends AttributeValueBase {
-
-  /**
-   * {@inheritdoc}
-   */
-  public function render() {
-    return $this->__toString();
-  }
-
-  /**
-   * Implements the magic __toString() method.
-   */
-  public function __toString() {
-    return $this->value === FALSE ? '' : Html::escape($this->name);
-  }
-
+class AttributeBoolean extends ComponentAttributeBoolean {
 }
diff --git a/core/lib/Drupal/Core/Template/AttributeHelper.php b/core/lib/Drupal/Core/Template/AttributeHelper.php
index c4b0fbfa1e..4ef3f5a220 100644
--- a/core/lib/Drupal/Core/Template/AttributeHelper.php
+++ b/core/lib/Drupal/Core/Template/AttributeHelper.php
@@ -2,10 +2,11 @@
 
 namespace Drupal\Core\Template;
 
+use Drupal\Component\HtmlAttribute\HtmlAttributeCollection;
 use Drupal\Component\Utility\NestedArray;
 
 /**
- * Helper class to deal with mixed array and Attribute operations.
+ * Helper class for mixed array and HtmlAttributeCollection operations.
  *
  * This class contains static methods only and is not meant to be instantiated.
  */
@@ -22,17 +23,18 @@ private function __construct() {
    *
    * @param string $name
    *   The name of the attribute to check for.
-   * @param \Drupal\Core\Template\Attribute|array $collection
-   *   An Attribute object or an array of attributes.
+   * @param \Drupal\Component\HtmlAttribute\HtmlAttributeCollection|array $collection
+   *   An HtmlAttributeCollection object or an array of attributes.
    *
    * @return bool
    *   TRUE if the attribute exists, FALSE otherwise.
    *
    * @throws \InvalidArgumentException
-   *   When the input $collection is neither an Attribute object nor an array.
+   *   When the input $collection is neither an HtmlAttributeCollection object
+   *   nor an array.
    */
   public static function attributeExists($name, $collection) {
-    if ($collection instanceof Attribute) {
+    if ($collection instanceof HtmlAttributeCollection) {
       return $collection->hasAttribute($name);
     }
     elseif (is_array($collection)) {
@@ -44,33 +46,33 @@ public static function attributeExists($name, $collection) {
   /**
    * Merges two attribute collections.
    *
-   * @param \Drupal\Core\Template\Attribute|array $a
+   * @param \Drupal\Component\HtmlAttribute\HtmlAttributeCollection|array $a
    *   First Attribute object or array to merge. The returned value type will
    *   be the same as the type of this argument.
-   * @param \Drupal\Core\Template\Attribute|array $b
+   * @param \Drupal\Component\HtmlAttribute\HtmlAttributeCollection|array $b
    *   Second Attribute object or array to merge.
    *
-   * @return \Drupal\Core\Template\Attribute|array
+   * @return \Drupal\Component\HtmlAttribute\HtmlAttributeCollection|array
    *   The merged attributes, as an Attribute object or an array.
    *
    * @throws \InvalidArgumentException
-   *   If at least one collection argument is neither an Attribute object nor an
-   *   array.
+   *   If at least one collection argument is neither an
+   *   HtmlAttributeCollection object nor an array.
    */
   public static function mergeCollections($a, $b) {
-    if (!($a instanceof Attribute || is_array($a)) || !($b instanceof Attribute || is_array($b))) {
+    if (!($a instanceof HtmlAttributeCollection || is_array($a)) || !($b instanceof HtmlAttributeCollection || is_array($b))) {
       throw new \InvalidArgumentException('Invalid collection argument');
     }
     // If both collections are arrays, just merge them.
     if (is_array($a) && is_array($b)) {
       return NestedArray::mergeDeep($a, $b);
     }
-    // If at least one collections is an Attribute object, merge through
-    // Attribute::merge.
-    $merge_a = $a instanceof Attribute ? $a : new Attribute($a);
-    $merge_b = $b instanceof Attribute ? $b : new Attribute($b);
+    // If at least one collections is an HtmlAttributeCollection object, merge
+    // through HtmlAttributeCollection::merge.
+    $merge_a = $a instanceof HtmlAttributeCollection ? $a : new HtmlAttributeCollection($a);
+    $merge_b = $b instanceof HtmlAttributeCollection ? $b : new HtmlAttributeCollection($b);
     $merge_a->merge($merge_b);
-    return $a instanceof Attribute ? $merge_a : $merge_a->toArray();
+    return $a instanceof HtmlAttributeCollection ? $merge_a : $merge_a->toArray();
   }
 
 }
diff --git a/core/lib/Drupal/Core/Template/AttributeString.php b/core/lib/Drupal/Core/Template/AttributeString.php
index 4cf705bea8..bcb5b9f5d8 100644
--- a/core/lib/Drupal/Core/Template/AttributeString.php
+++ b/core/lib/Drupal/Core/Template/AttributeString.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\Core\Template;
 
-use Drupal\Component\Utility\Html;
+use Drupal\Component\HtmlAttribute\HtmlAttributeString as ComponentAttributeString;
+
+@trigger_error('\Drupal\Core\Template\AttributeString is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use \Drupal\Component\HtmlAttribute\HtmlAttributeString instead. See https://www.drupal.org/node/3070485', E_USER_DEPRECATED);
 
 /**
  * A class that represents most standard HTML attributes.
@@ -18,14 +20,11 @@
  * @endcode
  *
  * @see \Drupal\Core\Template\Attribute
+ *
+ * @deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use
+ *   \Drupal\Component\HtmlAttribute\HtmlAttributeString instead.
+ *
+ * @see https://www.drupal.org/node/3070485
  */
-class AttributeString extends AttributeValueBase {
-
-  /**
-   * Implements the magic __toString() method.
-   */
-  public function __toString() {
-    return Html::escape((string) $this->value);
-  }
-
+class AttributeString extends ComponentAttributeString {
 }
diff --git a/core/lib/Drupal/Core/Template/AttributeValueBase.php b/core/lib/Drupal/Core/Template/AttributeValueBase.php
index 3dfdf4cf4d..cd32689a99 100644
--- a/core/lib/Drupal/Core/Template/AttributeValueBase.php
+++ b/core/lib/Drupal/Core/Template/AttributeValueBase.php
@@ -2,70 +2,19 @@
 
 namespace Drupal\Core\Template;
 
-use Drupal\Component\Utility\Html;
+use Drupal\Component\HtmlAttribute\HtmlAttributeValueBase as ComponentAttributeValueBase;
+
+@trigger_error('\Drupal\Core\Template\AttributeValueBase is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use \Drupal\Component\HtmlAttribute\HtmlAttributeValueBase instead. See https://www.drupal.org/node/3070485', E_USER_DEPRECATED);
 
 /**
  * Defines the base class for an attribute type.
  *
  * @see \Drupal\Core\Template\Attribute
+ *
+ * @deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use
+ *   \Drupal\Component\HtmlAttribute\HtmlAttributeString instead.
+ *
+ * @see https://www.drupal.org/node/3070485
  */
-abstract class AttributeValueBase {
-
-  /**
-   * Renders '$name=""' if $value is an empty string.
-   *
-   * @see \Drupal\Core\Template\AttributeValueBase::render()
-   */
-  const RENDER_EMPTY_ATTRIBUTE = TRUE;
-
-  /**
-   * The value itself.
-   *
-   * @var mixed
-   */
-  protected $value;
-
-  /**
-   * The name of the value.
-   *
-   * @var mixed
-   */
-  protected $name;
-
-  /**
-   * Constructs a \Drupal\Core\Template\AttributeValueBase object.
-   */
-  public function __construct($name, $value) {
-    $this->name = $name;
-    $this->value = $value;
-  }
-
-  /**
-   * Returns a string representation of the attribute.
-   *
-   * While __toString only returns the value in a string form, render()
-   * contains the name of the attribute as well.
-   *
-   * @return string
-   *   The string representation of the attribute.
-   */
-  public function render() {
-    $value = (string) $this;
-    if (isset($this->value) && static::RENDER_EMPTY_ATTRIBUTE || !empty($value)) {
-      return Html::escape($this->name) . '="' . $value . '"';
-    }
-  }
-
-  /**
-   * Returns the raw value.
-   */
-  public function value() {
-    return $this->value;
-  }
-
-  /**
-   * Implements the magic __toString() method.
-   */
-  abstract public function __toString();
-
+abstract class AttributeValueBase extends ComponentAttributeValueBase {
 }
diff --git a/core/lib/Drupal/Core/Template/TwigEnvironment.php b/core/lib/Drupal/Core/Template/TwigEnvironment.php
index 258d9c0222..d1cfa88e07 100644
--- a/core/lib/Drupal/Core/Template/TwigEnvironment.php
+++ b/core/lib/Drupal/Core/Template/TwigEnvironment.php
@@ -66,7 +66,7 @@ class TwigEnvironment extends Environment {
    * @param array $options
    *   The options for the Twig environment.
    */
-  public function __construct($root, CacheBackendInterface $cache, $twig_extension_hash, StateInterface $state, LoaderInterface $loader, array $options = []) {
+  public function __construct(protected readonly string $root, CacheBackendInterface $cache, $twig_extension_hash, StateInterface $state, LoaderInterface $loader, array $options = []) {
     $this->state = $state;
 
     $this->templateClasses = [];
diff --git a/core/lib/Drupal/Core/Template/TwigExtension.php b/core/lib/Drupal/Core/Template/TwigExtension.php
index e38c0a0fcb..59aee3bfe0 100644
--- a/core/lib/Drupal/Core/Template/TwigExtension.php
+++ b/core/lib/Drupal/Core/Template/TwigExtension.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Core\Template;
 
+use Drupal\Component\HtmlAttribute\HtmlAttributeCollection;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Render\MarkupInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
@@ -234,15 +235,15 @@ public function getUrl($name, $parameters = [], $options = []) {
    *   The link text for the anchor tag as a translated string.
    * @param \Drupal\Core\Url|string $url
    *   The URL object or string used for the link.
-   * @param array|\Drupal\Core\Template\Attribute $attributes
-   *   An optional array or Attribute object of link attributes.
+   * @param array|\Drupal\Component\HtmlAttribute\HtmlAttributeCollection $attributes
+   *   An optional array or HtmlAttributeCollection object of link attributes.
    *
    * @return array
    *   A render array representing a link to the given URL.
    */
   public function getLink($text, $url, $attributes = []) {
     assert(is_string($url) || $url instanceof Url, '$url must be a string or object of type \Drupal\Core\Url');
-    assert(is_array($attributes) || $attributes instanceof Attribute, '$attributes, if set, must be an array or object of type \Drupal\Core\Template\Attribute');
+    assert(is_array($attributes) || $attributes instanceof HtmlAttributeCollection, '$attributes, if set, must be an array or object of type \Drupal\Component\HtmlAttribute\HtmlAttributeCollection');
 
     if (!$url instanceof Url) {
       $url = Url::fromUri($url);
@@ -252,7 +253,7 @@ public function getLink($text, $url, $attributes = []) {
     // @see https://www.drupal.org/node/2842399
     $url = clone $url;
     if ($attributes) {
-      if ($attributes instanceof Attribute) {
+      if ($attributes instanceof HtmlAttributeCollection) {
         $attributes = $attributes->toArray();
       }
       $url->mergeOptions(['attributes' => $attributes]);
@@ -606,17 +607,17 @@ public function safeJoin(Environment $env, $value, $glue = '') {
   }
 
   /**
-   * Creates an Attribute object.
+   * Creates an HtmlAttributeCollection object.
    *
    * @param array $attributes
    *   (optional) An associative array of key-value pairs to be converted to
    *   HTML attributes.
    *
-   * @return \Drupal\Core\Template\Attribute
+   * @return \Drupal\Component\HtmlAttribute\HtmlAttributeCollection
    *   An attributes object that has the given attributes.
    */
   public function createAttribute(array $attributes = []) {
-    return new Attribute($attributes);
+    return new HtmlAttributeCollection($attributes);
   }
 
   /**
diff --git a/core/lib/Drupal/Core/Template/TwigSandboxPolicy.php b/core/lib/Drupal/Core/Template/TwigSandboxPolicy.php
index 42d1811877..fe28f08354 100644
--- a/core/lib/Drupal/Core/Template/TwigSandboxPolicy.php
+++ b/core/lib/Drupal/Core/Template/TwigSandboxPolicy.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Core\Template;
 
+use Drupal\Component\HtmlAttribute\HtmlAttributeCollection;
 use Drupal\Core\Site\Settings;
 use Twig\Sandbox\SecurityError;
 use Twig\Sandbox\SecurityPolicyInterface;
@@ -44,33 +45,91 @@ class TwigSandboxPolicy implements SecurityPolicyInterface {
    * Constructs a new TwigSandboxPolicy object.
    */
   public function __construct() {
-    // Allow settings.php to override our default allowed classes, methods, and
-    // prefixes.
-    $allowed_classes = Settings::get('twig_sandbox_allowed_classes', [
-      // Allow any operations on the Attribute object as it is intended to be
-      // changed from a Twig template, for example calling addClass().
-      'Drupal\Core\Template\Attribute',
-    ]);
-    // Flip the array so we can check using isset().
-    $this->allowed_classes = array_flip($allowed_classes);
-
-    $allowed_methods = Settings::get('twig_sandbox_allowed_methods', [
-      // Only allow idempotent methods.
-      'id',
-      'label',
-      'bundle',
-      'get',
-      '__toString',
-      'toString',
-    ]);
-    // Flip the array so we can check using isset().
-    $this->allowed_methods = array_flip($allowed_methods);
-
-    $this->allowed_prefixes = Settings::get('twig_sandbox_allowed_prefixes', [
-      'get',
-      'has',
-      'is',
-    ]);
+    $this->allowed_classes = $this->getAllowedClasses();
+    $this->allowed_methods = $this->getAllowedMethods();
+    $this->allowed_prefixes = $this->getAllowedPrefixes();
+  }
+
+  /**
+   * Returns the list of allowed classes from the settings.
+   *
+   * @return string[]
+   *   The list of allowed classes from the settings.
+   */
+  protected function getAllowedClasses(): array {
+    if ($this->allowed_classes === NULL) {
+      // Allow settings.php to override our default allowed classes, methods,
+      // and prefixes.
+      $allowed_classes = $this->getSettings('twig_sandbox_allowed_classes', [
+        // Allow any operations on the HtmlAttributeCollection object as it is
+        // intended to be changed from a Twig template, for example calling
+        // addClass().
+        HtmlAttributeCollection::class,
+      ]);
+      // BC layer to support earlier Attribute class.
+      if (in_array('Drupal\Core\Template\Attribute', $allowed_classes) && !in_array(HtmlAttributeCollection::class, $allowed_classes)) {
+        @trigger_error('\Drupal\Core\Template\Attribute as an allowed class in $settings[\'twig_sandbox_allowed_classes\'] is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use \Drupal\Component\HtmlAttribute\HtmlAttributeCollection instead. See https://www.drupal.org/node/3070485', E_USER_DEPRECATED);
+        $allowed_classes[] = HtmlAttributeCollection::class;
+      }
+      // Flip the array so we can check using isset().
+      $this->allowed_classes = array_flip($allowed_classes);
+    }
+    return $this->allowed_classes;
+  }
+
+  /**
+   * Returns the list of allowed methods from the settings.
+   *
+   * @return string[]
+   *   The list of allowed methods from the settings.
+   */
+  protected function getAllowedMethods(): array {
+    if ($this->allowed_methods === NULL) {
+      $allowed_methods = $this->getSettings('twig_sandbox_allowed_methods', [
+        // Only allow idempotent methods.
+        'id',
+        'label',
+        'bundle',
+        'get',
+        '__toString',
+        'toString',
+      ]);
+      // Flip the array so we can check using isset().
+      $this->allowed_methods = array_flip($allowed_methods);
+    }
+    return $this->allowed_methods;
+  }
+
+  /**
+   * Returns the list of allowed prefixes from the settings.
+   *
+   * @return string[]
+   *   The list of allowed prefixes from the settings.
+   */
+  protected function getAllowedPrefixes(): array {
+    if ($this->allowed_prefixes === NULL) {
+      $this->allowed_prefixes = $this->getSettings('twig_sandbox_allowed_prefixes', [
+        'get',
+        'has',
+        'is',
+      ]);
+    }
+    return $this->allowed_prefixes;
+  }
+
+  /**
+   * Returns a setting via Settings::get.
+   *
+   * @param string $name
+   *   The name of the setting to return.
+   * @param mixed $default
+   *   (optional) The default value to use if this setting is not set.
+   *
+   * @return mixed
+   *   The value of the setting, the provided default if not set.
+   */
+  protected function getSettings(string $name, $default = NULL) {
+    return Settings::get($name, $default);
   }
 
   /**
@@ -87,20 +146,20 @@ public function checkPropertyAllowed($obj, $property): void {}
    * {@inheritdoc}
    */
   public function checkMethodAllowed($obj, $method): void {
-    foreach ($this->allowed_classes as $class => $key) {
+    foreach ($this->getAllowedClasses() as $class => $key) {
       if ($obj instanceof $class) {
         return;
       }
     }
 
     // Return quickly for an exact match of the method name.
-    if (isset($this->allowed_methods[$method])) {
+    if (isset($this->getAllowedMethods()[$method])) {
       return;
     }
 
     // If the method name starts with an allowed prefix, allow it. Note:
     // strpos() is between 3x and 7x faster than preg_match() in this case.
-    foreach ($this->allowed_prefixes as $prefix) {
+    foreach ($this->getAllowedPrefixes() as $prefix) {
       if (str_starts_with($method, $prefix)) {
         return;
       }
diff --git a/core/modules/mysql/src/Driver/Database/mysql/Connection.php b/core/modules/mysql/src/Driver/Database/mysql/Connection.php
index 5062d5ebab..3e8437e8f9 100644
--- a/core/modules/mysql/src/Driver/Database/mysql/Connection.php
+++ b/core/modules/mysql/src/Driver/Database/mysql/Connection.php
@@ -97,18 +97,15 @@ public function __construct(\PDO $connection, array $connection_options) {
     // @see https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_ansi_quotes
     $ansi_quotes_modes = ['ANSI_QUOTES', 'ANSI', 'DB2', 'MAXDB', 'MSSQL', 'ORACLE', 'POSTGRESQL'];
     $is_ansi_quotes_mode = FALSE;
-    if (isset($connection_options['init_commands']['sql_mode'])) {
-      foreach ($ansi_quotes_modes as $mode) {
-        // None of the modes in $ansi_quotes_modes are substrings of other modes
-        // that are not in $ansi_quotes_modes, so a simple stripos() does not
-        // return false positives.
-        if (stripos($connection_options['init_commands']['sql_mode'], $mode) !== FALSE) {
-          $is_ansi_quotes_mode = TRUE;
-          break;
-        }
+    foreach ($ansi_quotes_modes as $mode) {
+      // None of the modes in $ansi_quotes_modes are substrings of other modes
+      // that are not in $ansi_quotes_modes, so a simple stripos() does not
+      // return false positives.
+      if (stripos($connection_options['init_commands']['sql_mode'], $mode) !== FALSE) {
+        $is_ansi_quotes_mode = TRUE;
+        break;
       }
     }
-
     if ($this->identifierQuotes === ['"', '"'] && !$is_ansi_quotes_mode) {
       $this->identifierQuotes = ['`', '`'];
     }
diff --git a/core/modules/mysql/tests/src/Kernel/mysql/MysqlDriverTest.php b/core/modules/mysql/tests/src/Kernel/mysql/MysqlDriverTest.php
deleted file mode 100644
index 00cfefa1f9..0000000000
--- a/core/modules/mysql/tests/src/Kernel/mysql/MysqlDriverTest.php
+++ /dev/null
@@ -1,24 +0,0 @@
-<?php
-
-namespace Drupal\Tests\mysql\Kernel\mysql;
-
-use Drupal\mysql\Driver\Database\mysql\Connection;
-use Drupal\KernelTests\Core\Database\DriverSpecificKernelTestBase;
-use Drupal\Tests\Core\Database\Stub\StubPDO;
-
-/**
- * Tests the deprecations of the MySQL database driver classes in Core.
- *
- * @group Database
- */
-class MysqlDriverTest extends DriverSpecificKernelTestBase {
-
-  /**
-   * @covers \Drupal\mysql\Driver\Database\mysql\Connection
-   */
-  public function testConnection() {
-    $connection = new Connection($this->createMock(StubPDO::class), []);
-    $this->assertInstanceOf(Connection::class, $connection);
-  }
-
-}
diff --git a/core/modules/system/tests/src/Unit/Menu/MenuLinkTreeTest.php b/core/modules/system/tests/src/Unit/Menu/MenuLinkTreeTest.php
index fce63ffde2..b3cf217ded 100644
--- a/core/modules/system/tests/src/Unit/Menu/MenuLinkTreeTest.php
+++ b/core/modules/system/tests/src/Unit/Menu/MenuLinkTreeTest.php
@@ -2,12 +2,12 @@
 
 namespace Drupal\Tests\system\Unit\Menu;
 
+use Drupal\Component\HtmlAttribute\HtmlAttributeCollection;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Menu\MenuLinkTree;
 use Drupal\Core\Menu\MenuLinkTreeElement;
-use Drupal\Core\Template\Attribute;
 use Drupal\Core\Url;
 use Drupal\Tests\Core\Menu\MenuLinkMock;
 use Drupal\Tests\UnitTestCase;
@@ -138,7 +138,7 @@ public function providerTestBuildCacheability() {
 
     $get_built_element = function (MenuLinkTreeElement $element) {
       $return = [
-        'attributes' => new Attribute(),
+        'attributes' => new HtmlAttributeCollection(),
         'title' => $element->link->getTitle(),
         'url' => new Url($element->link->getRouteName(), $element->link->getRouteParameters(), ['set_active_class' => TRUE]),
         'below' => [],
diff --git a/core/modules/text/tests/src/Unit/Migrate/d6/TextFieldTest.php b/core/modules/text/tests/src/Unit/Migrate/d6/TextFieldTest.php
new file mode 100644
index 0000000000..b3d0afb15b
--- /dev/null
+++ b/core/modules/text/tests/src/Unit/Migrate/d6/TextFieldTest.php
@@ -0,0 +1,169 @@
+<?php
+
+namespace Drupal\Tests\text\Unit\Migrate\d6;
+
+use Drupal\migrate\Plugin\MigrationInterface;
+use Drupal\migrate\Row;
+use Drupal\Tests\UnitTestCase;
+use Drupal\text\Plugin\migrate\field\d6\TextField;
+use Prophecy\Argument;
+
+// cspell:ignore optionwidgets
+
+/**
+ * @coversDefaultClass \Drupal\text\Plugin\migrate\field\d6\TextField
+ * @group text
+ */
+class TextFieldTest extends UnitTestCase {
+
+  /**
+   * @var \Drupal\migrate_drupal\Plugin\MigrateFieldInterface
+   */
+  protected $plugin;
+
+  /**
+   * @var \Drupal\migrate\Plugin\MigrationInterface
+   */
+  protected $migration;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp(): void {
+    $this->plugin = new TextField([], 'text', []);
+
+    $migration = $this->prophesize(MigrationInterface::class);
+
+    // The plugin's defineValueProcessPipeline() method will call
+    // setProcessOfProperty() and return nothing. So, in order to examine the
+    // process pipeline created by the plugin, we need to ensure that
+    // getProcess() always returns the last input to setProcessOfProperty().
+    $migration->setProcessOfProperty(Argument::type('string'), Argument::type('array'))
+      ->will(function ($arguments) use ($migration) {
+        $migration->getProcess()->willReturn($arguments[1]);
+      });
+
+    $this->migration = $migration->reveal();
+  }
+
+  /**
+   * @covers ::defineValueProcessPipeline
+   */
+  public function testFilteredTextValueProcessPipeline() {
+    $field_info = [
+      'widget_type' => 'text_textfield',
+    ];
+    $this->plugin->defineValueProcessPipeline($this->migration, 'body', $field_info);
+
+    $process = $this->migration->getProcess();
+    $this->assertSame('sub_process', $process['plugin']);
+    $this->assertSame('body', $process['source']);
+    $this->assertSame('value', $process['process']['value']);
+
+    // Ensure that filter format IDs will be looked up in the filter format
+    // migrations.
+    $lookup = $process['process']['format'][2];
+    $this->assertSame('migration_lookup', $lookup['plugin']);
+    $this->assertContains('d6_filter_format', $lookup['migration']);
+    $this->assertContains('d7_filter_format', $lookup['migration']);
+    $this->assertSame('format', $lookup['source']);
+  }
+
+  /**
+   * @covers ::defineValueProcessPipeline
+   */
+  public function testBooleanTextImplicitValueProcessPipeline() {
+    $info = [
+      'widget_type' => 'optionwidgets_onoff',
+      'global_settings' => [
+        'allowed_values' => "foo\nbar",
+      ],
+    ];
+    $this->plugin->defineValueProcessPipeline($this->migration, 'field', $info);
+
+    $expected = [
+      'value' => [
+        'plugin' => 'static_map',
+        'source' => 'value',
+        'default_value' => 0,
+        'map' => [
+          'bar' => 1,
+        ],
+      ],
+    ];
+    $this->assertSame($expected, $this->migration->getProcess()['process']);
+  }
+
+  /**
+   * @covers ::defineValueProcessPipeline
+   */
+  public function testBooleanTextExplicitValueProcessPipeline() {
+    $info = [
+      'widget_type' => 'optionwidgets_onoff',
+      'global_settings' => [
+        'allowed_values' => "foo|Foo\nbaz|Baz",
+      ],
+    ];
+    $this->plugin->defineValueProcessPipeline($this->migration, 'field', $info);
+
+    $expected = [
+      'value' => [
+        'plugin' => 'static_map',
+        'source' => 'value',
+        'default_value' => 0,
+        'map' => [
+          'baz' => 1,
+        ],
+      ],
+    ];
+    $this->assertSame($expected, $this->migration->getProcess()['process']);
+  }
+
+  /**
+   * Data provider for testGetFieldType().
+   */
+  public function getFieldTypeProvider() {
+    return [
+      ['string_long', 'text_textfield', ['text_processing' => FALSE]],
+      ['string', 'text_textfield', [
+        'text_processing' => FALSE,
+        'max_length' => 128,
+      ],
+      ],
+      ['string_long', 'text_textfield', [
+        'text_processing' => FALSE,
+        'max_length' => 4096,
+      ],
+      ],
+      ['text_long', 'text_textfield', ['text_processing' => TRUE]],
+      ['text', 'text_textfield', [
+        'text_processing' => TRUE,
+        'max_length' => 128,
+      ],
+      ],
+      ['text_long', 'text_textfield', [
+        'text_processing' => TRUE,
+        'max_length' => 4096,
+      ],
+      ],
+      ['list_string', 'optionwidgets_buttons'],
+      ['list_string', 'optionwidgets_select'],
+      ['boolean', 'optionwidgets_onoff'],
+      ['text_long', 'text_textarea', ['text_processing' => TRUE]],
+      ['string_long', 'text_textarea', ['text_processing' => FALSE]],
+      [NULL, 'undefined'],
+    ];
+  }
+
+  /**
+   * @covers ::getFieldType
+   * @dataProvider getFieldTypeProvider
+   */
+  public function testGetFieldType($expected_type, $widget_type, array $settings = []) {
+    $row = new Row();
+    $row->setSourceProperty('widget_type', $widget_type);
+    $row->setSourceProperty('global_settings', $settings);
+    $this->assertSame($expected_type, $this->plugin->getFieldType($row));
+  }
+
+}
diff --git a/core/modules/text/tests/src/Unit/Migrate/d7/TextFieldTest.php b/core/modules/text/tests/src/Unit/Migrate/d7/TextFieldTest.php
new file mode 100644
index 0000000000..eda93c49a5
--- /dev/null
+++ b/core/modules/text/tests/src/Unit/Migrate/d7/TextFieldTest.php
@@ -0,0 +1,11 @@
+<?php
+
+namespace Drupal\Tests\text\Unit\Migrate\d7;
+
+use Drupal\Tests\text\Unit\Migrate\d6\TextFieldTest as D6TextFieldTest;
+
+/**
+ * @coversDefaultClass \Drupal\text\Plugin\migrate\field\d7\TextField
+ * @group text
+ */
+class TextFieldTest extends D6TextFieldTest {}
diff --git a/core/modules/text/tests/src/Unit/Plugin/migrate/field/d6/TextFieldTest.php b/core/modules/text/tests/src/Unit/Plugin/migrate/field/d6/TextFieldTest.php
index aef1fd0477..616a16e078 100644
--- a/core/modules/text/tests/src/Unit/Plugin/migrate/field/d6/TextFieldTest.php
+++ b/core/modules/text/tests/src/Unit/Plugin/migrate/field/d6/TextFieldTest.php
@@ -49,11 +49,11 @@ protected function setUp(): void {
   /**
    * @covers ::defineValueProcessPipeline
    */
-  public function testFilteredTextValueProcessPipeline() {
+  public function testProcessFilteredTextFieldValues($method = 'defineValueProcessPipeline') {
     $field_info = [
       'widget_type' => 'text_textfield',
     ];
-    $this->plugin->defineValueProcessPipeline($this->migration, 'body', $field_info);
+    $this->plugin->$method($this->migration, 'body', $field_info);
 
     $process = $this->migration->getProcess();
     $this->assertSame('sub_process', $process['plugin']);
@@ -72,14 +72,14 @@ public function testFilteredTextValueProcessPipeline() {
   /**
    * @covers ::defineValueProcessPipeline
    */
-  public function testBooleanTextImplicitValueProcessPipeline() {
+  public function testProcessBooleanTextImplicitValues($method = 'defineValueProcessPipeline') {
     $info = [
       'widget_type' => 'optionwidgets_onoff',
       'global_settings' => [
         'allowed_values' => "foo\nbar",
       ],
     ];
-    $this->plugin->defineValueProcessPipeline($this->migration, 'field', $info);
+    $this->plugin->$method($this->migration, 'field', $info);
 
     $expected = [
       'value' => [
@@ -97,14 +97,14 @@ public function testBooleanTextImplicitValueProcessPipeline() {
   /**
    * @covers ::defineValueProcessPipeline
    */
-  public function testBooleanTextExplicitValueProcessPipeline() {
+  public function testProcessBooleanTextExplicitValues($method = 'defineValueProcessPipeline') {
     $info = [
       'widget_type' => 'optionwidgets_onoff',
       'global_settings' => [
         'allowed_values' => "foo|Foo\nbaz|Baz",
       ],
     ];
-    $this->plugin->defineValueProcessPipeline($this->migration, 'field', $info);
+    $this->plugin->$method($this->migration, 'field', $info);
 
     $expected = [
       'value' => [
diff --git a/core/phpstan-baseline.neon b/core/phpstan-baseline.neon
index 1e5797ced0..37a4ddc4ae 100644
--- a/core/phpstan-baseline.neon
+++ b/core/phpstan-baseline.neon
@@ -720,16 +720,6 @@ parameters:
 			count: 3
 			path: lib/Drupal/Core/Site/SettingsEditor.php
 
-		-
-			message: "#^Method Drupal\\\\Core\\\\Template\\\\AttributeValueBase\\:\\:render\\(\\) should return string but return statement is missing\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Template/AttributeValueBase.php
-
-		-
-			message: "#^Constructor of class Drupal\\\\Core\\\\Template\\\\TwigEnvironment has an unused parameter \\$root\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Template/TwigEnvironment.php
-
 		-
 			message: "#^Call to deprecated constant REQUEST_TIME\\: Deprecated in drupal\\:8\\.3\\.0 and is removed from drupal\\:11\\.0\\.0\\. Use \\\\Drupal\\:\\:time\\(\\)\\-\\>getRequestTime\\(\\); $#"
 			count: 1
diff --git a/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php b/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php
index cae88dfca4..5ef97c1e08 100644
--- a/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php
+++ b/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php
@@ -37,7 +37,7 @@ class BrowserTestBaseTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected $defaultTheme = 'stark';
+  protected $defaultTheme = 'starterkit_theme';
 
   /**
    * Tests basic page test.
diff --git a/core/tests/Drupal/FunctionalTests/Entity/ContentEntityFormFieldValidationFilteringTest.php b/core/tests/Drupal/FunctionalTests/Entity/ContentEntityFormFieldValidationFilteringTest.php
index 1cb3b7808e..edaf6d3bb5 100644
--- a/core/tests/Drupal/FunctionalTests/Entity/ContentEntityFormFieldValidationFilteringTest.php
+++ b/core/tests/Drupal/FunctionalTests/Entity/ContentEntityFormFieldValidationFilteringTest.php
@@ -53,7 +53,7 @@ class ContentEntityFormFieldValidationFilteringTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected $defaultTheme = 'stark';
+  protected $defaultTheme = 'starterkit_theme';
 
   /**
    * {@inheritdoc}
@@ -135,9 +135,9 @@ public function testFieldWidgetsWithLimitedValidationErrors() {
     // The 'Test multiple' field is the only multi-valued field in the form, so
     // try to add a new item for it. This tests the '#limit_validation_errors'
     // property set by \Drupal\Core\Field\WidgetBase::formMultipleElements().
-    $assert_session->elementsCount('css', 'div#edit-test-multiple-wrapper div.js-form-type-textfield input', 1);
+    $assert_session->elementsCount('css', 'div#edit-test-multiple-wrapper div.form-type-textfield input', 1);
     $this->submitForm([], 'Add another item');
-    $assert_session->elementsCount('css', 'div#edit-test-multiple-wrapper div.js-form-type-textfield input', 2);
+    $assert_session->elementsCount('css', 'div#edit-test-multiple-wrapper div.form-type-textfield input', 2);
 
     // Now try to upload a file. This tests the '#limit_validation_errors'
     // property set by
diff --git a/core/tests/Drupal/FunctionalTests/Entity/DeleteMultipleFormTest.php b/core/tests/Drupal/FunctionalTests/Entity/DeleteMultipleFormTest.php
index 4fe70d99bb..fe09c9406f 100644
--- a/core/tests/Drupal/FunctionalTests/Entity/DeleteMultipleFormTest.php
+++ b/core/tests/Drupal/FunctionalTests/Entity/DeleteMultipleFormTest.php
@@ -34,7 +34,7 @@ class DeleteMultipleFormTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected $defaultTheme = 'stark';
+  protected $defaultTheme = 'starterkit_theme';
 
   /**
    * {@inheritdoc}
@@ -93,8 +93,8 @@ public function testTranslatableEntities() {
     $this->drupalGet('/entity_test/delete');
     $assert = $this->assertSession();
     $assert->statusCodeEquals(200);
-    $assert->elementTextContains('css', 'h1', 'Are you sure you want to delete these test entity - revisions, data table, and published interface entities?');
-    $list_selector = '#entity-test-mulrevpub-delete-multiple-confirm-form > ul[data-drupal-selector="edit-entities"]';
+    $assert->elementTextContains('css', '.page-title', 'Are you sure you want to delete these test entity - revisions, data table, and published interface entities?');
+    $list_selector = '#entity-test-mulrevpub-delete-multiple-confirm-form > div.item-list > ul';
     $assert->elementTextContains('css', $list_selector, 'entity1 (Original translation) - The following test entity - revisions, data table, and published interface translations will be deleted:');
     $assert->elementTextContains('css', $list_selector, 'entity2 spanish');
     $assert->elementTextContains('css', $list_selector, 'entity2 french');
@@ -145,8 +145,8 @@ public function testUntranslatableEntities() {
     $this->drupalGet('/entity_test_rev/delete_multiple');
     $assert = $this->assertSession();
     $assert->statusCodeEquals(200);
-    $assert->elementTextContains('css', 'h1', 'Are you sure you want to delete these test entity - revisions entities?');
-    $list_selector = '#entity-test-rev-delete-multiple-confirm-form > ul[data-drupal-selector="edit-entities"]';
+    $assert->elementTextContains('css', '.page-title', 'Are you sure you want to delete these test entity - revisions entities?');
+    $list_selector = '#entity-test-rev-delete-multiple-confirm-form > div.item-list > ul';
     $assert->elementTextContains('css', $list_selector, 'entity1');
     $assert->elementTextContains('css', $list_selector, 'entity2');
     $delete_button = $this->getSession()->getPage()->findButton('Delete');
diff --git a/core/tests/Drupal/FunctionalTests/Entity/EntityBundleListCacheTest.php b/core/tests/Drupal/FunctionalTests/Entity/EntityBundleListCacheTest.php
index 6cc9c3d0b9..91ad6e08d0 100644
--- a/core/tests/Drupal/FunctionalTests/Entity/EntityBundleListCacheTest.php
+++ b/core/tests/Drupal/FunctionalTests/Entity/EntityBundleListCacheTest.php
@@ -27,7 +27,7 @@ class EntityBundleListCacheTest extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  protected $defaultTheme = 'stark';
+  protected $defaultTheme = 'starterkit_theme';
 
   /**
    * {@inheritdoc}
diff --git a/core/tests/Drupal/FunctionalTests/Installer/InstallerTranslationTest.php b/core/tests/Drupal/FunctionalTests/Installer/InstallerTranslationTest.php
index cab4ce5530..c48d53ad04 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/InstallerTranslationTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/InstallerTranslationTest.php
@@ -15,7 +15,7 @@ class InstallerTranslationTest extends InstallerTestBase {
   /**
    * {@inheritdoc}
    */
-  protected $defaultTheme = 'test_theme';
+  protected $defaultTheme = 'starterkit_theme';
 
   /**
    * Overrides the language code in which to install Drupal.
@@ -107,7 +107,7 @@ public function testInstaller() {
     $this->drupalGet('admin/config/development/performance');
     $this->submitForm($edit, 'Save configuration');
     $this->drupalGet('<front>');
-    $this->assertSession()->responseContains('my_theme/css/my-container-inline.css');
+    $this->assertSession()->responseContains('starterkit_theme/css/components/action-links.css');
 
     // Verify the strings from the translation files were imported.
     $test_samples = ['Save and continue', 'Anonymous'];
diff --git a/core/tests/Drupal/Tests/Component/HtmlAttribute/HtmlAttributeTest.php b/core/tests/Drupal/Tests/Component/HtmlAttribute/HtmlAttributeTest.php
new file mode 100644
index 0000000000..43ccea74ca
--- /dev/null
+++ b/core/tests/Drupal/Tests/Component/HtmlAttribute/HtmlAttributeTest.php
@@ -0,0 +1,490 @@
+<?php
+
+namespace Drupal\Tests\Component\HtmlAttribute;
+
+use Drupal\Component\HtmlAttribute\HtmlAttributeCollection;
+use Drupal\Component\HtmlAttribute\HtmlAttributeArray;
+use Drupal\Component\HtmlAttribute\HtmlAttributeString;
+use Drupal\Component\Render\MarkupInterface;
+use Drupal\Component\Render\MarkupTrait;
+use Drupal\Component\Utility\Html;
+use Drupal\Tests\PhpUnitCompatibilityTrait;
+use PHPUnit\Framework\TestCase;
+use Prophecy\PhpUnit\ProphecyTrait;
+
+/**
+ * @coversDefaultClass \Drupal\Component\HtmlAttribute\HtmlAttributeCollection
+ * @group HtmlAttribute
+ */
+class HtmlAttributeTest extends TestCase {
+
+  use PhpUnitCompatibilityTrait;
+  use ProphecyTrait;
+
+  /**
+   * Tests the constructor of the attribute class.
+   */
+  public function testConstructor() {
+    $attributes = new HtmlAttributeCollection(['class' => ['example-class']]);
+    $this->assertTrue(isset($attributes['class']));
+    $this->assertEquals(new HtmlAttributeArray('class', ['example-class']), $attributes['class']);
+
+    // Test adding boolean attributes through the constructor.
+    $attributes = new HtmlAttributeCollection(['selected' => TRUE, 'checked' => FALSE]);
+    $this->assertTrue($attributes['selected']->value());
+    $this->assertFalse($attributes['checked']->value());
+
+    // Test that non-array values with name "class" are cast to array.
+    $attributes = new HtmlAttributeCollection(['class' => 'example-class']);
+    $this->assertTrue(isset($attributes['class']));
+    $this->assertEquals(new HtmlAttributeArray('class', ['example-class']), $attributes['class']);
+
+    // Test that safe string objects work correctly.
+    $safe_string = $this->prophesize(MarkupInterface::class);
+    $safe_string->__toString()->willReturn('example-class');
+    $attributes = new HtmlAttributeCollection(['class' => $safe_string->reveal()]);
+    $this->assertTrue(isset($attributes['class']));
+    $this->assertEquals(new HtmlAttributeArray('class', ['example-class']), $attributes['class']);
+  }
+
+  /**
+   * Tests set of values.
+   */
+  public function testSet() {
+    $attributes = new HtmlAttributeCollection();
+    $attributes['class'] = ['example-class'];
+
+    $this->assertTrue(isset($attributes['class']));
+    $this->assertEquals(new HtmlAttributeArray('class', ['example-class']), $attributes['class']);
+  }
+
+  /**
+   * Tests adding new values to an existing part of the attribute.
+   */
+  public function testAdd() {
+    $attributes = new HtmlAttributeCollection(['class' => ['example-class']]);
+
+    $attributes['class'][] = 'other-class';
+    $this->assertEquals(new HtmlAttributeArray('class', ['example-class', 'other-class']), $attributes['class']);
+  }
+
+  /**
+   * Tests removing of values.
+   */
+  public function testRemove() {
+    $attributes = new HtmlAttributeCollection(['class' => ['example-class']]);
+    unset($attributes['class']);
+    $this->assertFalse(isset($attributes['class']));
+  }
+
+  /**
+   * Tests setting attributes.
+   *
+   * @covers ::setAttribute
+   */
+  public function testSetAttribute() {
+    $attributes = new HtmlAttributeCollection();
+
+    // Test adding various attributes.
+    $values = ['alt', 'id', 'src', 'title', 'value'];
+    foreach ($values as $key) {
+      foreach (['kitten', ''] as $value) {
+        $attributes = new HtmlAttributeCollection();
+        $attributes->setAttribute($key, $value);
+        $this->assertEquals($value, $attributes[$key]);
+      }
+    }
+
+    // Test adding array to class.
+    $attributes = new HtmlAttributeCollection();
+    $attributes->setAttribute('class', ['kitten', 'cat']);
+    $this->assertEquals(['kitten', 'cat'], $attributes['class']->value());
+
+    // Test adding boolean attributes.
+    $attributes = new HtmlAttributeCollection();
+    $attributes['checked'] = TRUE;
+    $this->assertTrue($attributes['checked']->value());
+  }
+
+  /**
+   * Tests removing attributes.
+   *
+   * @covers ::removeAttribute
+   */
+  public function testRemoveAttribute() {
+    $values = [
+      'alt' => 'Alternative text',
+      'id' => 'bunny',
+      'src' => 'zebra',
+      'style' => 'color: pink;',
+      'title' => 'kitten',
+      'value' => 'ostrich',
+      'checked' => TRUE,
+    ];
+    $attributes = new HtmlAttributeCollection($values);
+
+    // Single value.
+    $attributes->removeAttribute('alt');
+    $this->assertEmpty($attributes['alt']);
+
+    // Multiple values.
+    $attributes->removeAttribute('id', 'src');
+    $this->assertEmpty($attributes['id']);
+    $this->assertEmpty($attributes['src']);
+
+    // Single value in array.
+    $attributes->removeAttribute(['style']);
+    $this->assertEmpty($attributes['style']);
+
+    // Boolean value.
+    $attributes->removeAttribute('checked');
+    $this->assertEmpty($attributes['checked']);
+
+    // Multiple values in array.
+    $attributes->removeAttribute(['title', 'value']);
+    $this->assertEmpty((string) $attributes);
+
+  }
+
+  /**
+   * Tests adding class attributes with the AttributeArray helper method.
+   *
+   * @covers ::addClass
+   */
+  public function testAddClasses() {
+    // Add empty Attribute object with no classes.
+    $attributes = new HtmlAttributeCollection();
+
+    // Add no class on empty attribute.
+    $attributes->addClass();
+    $this->assertEmpty($attributes['class']);
+
+    // Test various permutations of adding values to empty Attribute objects.
+    foreach ([NULL, FALSE, '', []] as $value) {
+      // Single value.
+      $attributes->addClass($value);
+      $this->assertEmpty((string) $attributes);
+
+      // Multiple values.
+      $attributes->addClass($value, $value);
+      $this->assertEmpty((string) $attributes);
+
+      // Single value in array.
+      $attributes->addClass([$value]);
+      $this->assertEmpty((string) $attributes);
+
+      // Single value in arrays.
+      $attributes->addClass([$value], [$value]);
+      $this->assertEmpty((string) $attributes);
+    }
+
+    // Add one class on empty attribute.
+    $attributes->addClass('banana');
+    $this->assertEquals(['banana'], $attributes['class']->value());
+
+    // Add one class.
+    $attributes->addClass('aa');
+    $this->assertEquals(['banana', 'aa'], $attributes['class']->value());
+
+    // Add multiple classes.
+    $attributes->addClass('xx', 'yy');
+    $this->assertEquals(['banana', 'aa', 'xx', 'yy'], $attributes['class']->value());
+
+    // Add an array of classes.
+    $attributes->addClass(['red', 'green', 'blue']);
+    $this->assertEquals(['banana', 'aa', 'xx', 'yy', 'red', 'green', 'blue'], $attributes['class']->value());
+
+    // Add an array of duplicate classes.
+    $attributes->addClass(['red', 'green', 'blue'], ['aa', 'aa', 'banana'], 'yy');
+    $this->assertEquals('banana aa xx yy red green blue', (string) $attributes['class']);
+  }
+
+  /**
+   * Tests removing class attributes with the AttributeArray helper method.
+   *
+   * @covers ::removeClass
+   */
+  public function testRemoveClasses() {
+    // Add duplicate class to ensure that both duplicates are removed.
+    $classes = ['example-class', 'aa', 'xx', 'yy', 'red', 'green', 'blue', 'red'];
+    $attributes = new HtmlAttributeCollection(['class' => $classes]);
+
+    // Remove one class.
+    $attributes->removeClass('example-class');
+    $this->assertNotContains('example-class', $attributes['class']->value());
+
+    // Remove multiple classes.
+    $attributes->removeClass('xx', 'yy');
+    $this->assertNotContains(['xx', 'yy'], $attributes['class']->value());
+
+    // Remove an array of classes.
+    $attributes->removeClass(['red', 'green', 'blue']);
+    $this->assertNotContains(['red', 'green', 'blue'], $attributes['class']->value());
+
+    // Remove a class that does not exist.
+    $attributes->removeClass('gg');
+    $this->assertNotContains(['gg'], $attributes['class']->value());
+    // Test that the array index remains sequential.
+    $this->assertEquals(['aa'], $attributes['class']->value());
+
+    $attributes->removeClass('aa');
+    $this->assertEmpty((string) $attributes);
+  }
+
+  /**
+   * Tests checking for class names with the Attribute method.
+   *
+   * @covers ::hasClass
+   */
+  public function testHasClass() {
+    // Test an attribute without any classes.
+    $attributes = new HtmlAttributeCollection();
+    $this->assertFalse($attributes->hasClass('a-class-nowhere-to-be-found'));
+
+    // Add a class to check for.
+    $attributes->addClass('we-totally-have-this-class');
+    // Check that this class exists.
+    $this->assertTrue($attributes->hasClass('we-totally-have-this-class'));
+  }
+
+  /**
+   * Tests removing class attributes with the Attribute helper methods.
+   *
+   * @covers ::removeClass
+   * @covers ::addClass
+   */
+  public function testChainAddRemoveClasses() {
+    $attributes = new HtmlAttributeCollection(
+      ['class' => ['example-class', 'red', 'green', 'blue']]
+    );
+
+    $attributes
+      ->removeClass(['red', 'green', 'pink'])
+      ->addClass(['apple', 'lime', 'grapefruit'])
+      ->addClass(['banana']);
+    $expected = ['example-class', 'blue', 'apple', 'lime', 'grapefruit', 'banana'];
+    $this->assertEquals($expected, $attributes['class']->value(), 'Attributes chained');
+  }
+
+  /**
+   * Tests iterating on the values of the attribute.
+   */
+  public function testIterate() {
+    $attributes = new HtmlAttributeCollection(['class' => ['example-class'], 'id' => 'example-id']);
+
+    $counter = 0;
+    foreach ($attributes as $key => $value) {
+      if ($counter == 0) {
+        $this->assertEquals('class', $key);
+        $this->assertEquals(new HtmlAttributeArray('class', ['example-class']), $value);
+      }
+      if ($counter == 1) {
+        $this->assertEquals('id', $key);
+        $this->assertEquals(new HtmlAttributeString('id', 'example-id'), $value);
+      }
+      $counter++;
+    }
+  }
+
+  /**
+   * Tests printing of an attribute.
+   */
+  public function testPrint() {
+    $attributes = new HtmlAttributeCollection(['class' => ['example-class'], 'id' => 'example-id', 'enabled' => TRUE]);
+
+    $html = '<div' . (string) $attributes . '>test content</div>';
+    $this->assertClass('example-class', $html);
+    $this->assertNoClass('example-class2', $html);
+
+    $this->assertId('example-id', $html);
+    $this->assertNoId('example-id2', $html);
+
+    $this->assertStringContainsString('enabled', $html);
+  }
+
+  /**
+   * Tests attribute values.
+   *
+   * @covers ::createAttributeValue
+   *
+   * @dataProvider providerTestAttributeValues
+   */
+  public function testAttributeValues(array $attributes, $expected) {
+    $this->assertEquals($expected, (new HtmlAttributeCollection($attributes))->__toString());
+  }
+
+  /**
+   * Provides test data for testAttributeValues.
+   *
+   * @return array
+   *   An array of test data.
+   */
+  public function providerTestAttributeValues() {
+    $data = [];
+
+    $string = '"> <script>alert(123)</script>"';
+    $data['safe-object-xss1'] = [['title' => TestMarkup::create($string)], ' title="&quot;&gt; alert(123)&quot;"'];
+    $data['non-safe-object-xss1'] = [['title' => $string], ' title="' . Html::escape($string) . '"'];
+    $string = '&quot;><script>alert(123)</script>';
+    $data['safe-object-xss2'] = [['title' => TestMarkup::create($string)], ' title="&quot;&gt;alert(123)"'];
+    $data['non-safe-object-xss2'] = [['title' => $string], ' title="' . Html::escape($string) . '"'];
+
+    return $data;
+  }
+
+  /**
+   * Checks that the given CSS class is present in the given HTML snippet.
+   *
+   * @param string $class
+   *   The CSS class to check.
+   * @param string $html
+   *   The HTML snippet to check.
+   *
+   * @internal
+   */
+  protected function assertClass(string $class, string $html): void {
+    $xpath = "//*[@class='$class']";
+    self::assertTrue((bool) $this->getXpathResultCount($xpath, $html));
+  }
+
+  /**
+   * Checks that the given CSS class is not present in the given HTML snippet.
+   *
+   * @param string $class
+   *   The CSS class to check.
+   * @param string $html
+   *   The HTML snippet to check.
+   *
+   * @internal
+   */
+  protected function assertNoClass(string $class, string $html): void {
+    $xpath = "//*[@class='$class']";
+    self::assertFalse((bool) $this->getXpathResultCount($xpath, $html));
+  }
+
+  /**
+   * Checks that the given CSS ID is present in the given HTML snippet.
+   *
+   * @param string $id
+   *   The CSS ID to check.
+   * @param string $html
+   *   The HTML snippet to check.
+   *
+   * @internal
+   */
+  protected function assertID(string $id, string $html): void {
+    $xpath = "//*[@id='$id']";
+    self::assertTrue((bool) $this->getXpathResultCount($xpath, $html));
+  }
+
+  /**
+   * Checks that the given CSS ID is not present in the given HTML snippet.
+   *
+   * @param string $id
+   *   The CSS ID to check.
+   * @param string $html
+   *   The HTML snippet to check.
+   *
+   * @internal
+   */
+  protected function assertNoID(string $id, string $html): void {
+    $xpath = "//*[@id='$id']";
+    self::assertFalse((bool) $this->getXpathResultCount($xpath, $html));
+  }
+
+  /**
+   * Counts the occurrences of the given XPath query in a given HTML snippet.
+   *
+   * @param string $query
+   *   The XPath query to execute.
+   * @param string $html
+   *   The HTML snippet to check.
+   *
+   * @return int
+   *   The number of results that are found.
+   */
+  protected function getXpathResultCount($query, $html) {
+    $document = new \DOMDocument();
+    $document->loadHTML($html);
+    $xpath = new \DOMXPath($document);
+
+    return $xpath->query($query)->length;
+  }
+
+  /**
+   * Tests the storage method.
+   */
+  public function testStorage() {
+    $attributes = new HtmlAttributeCollection(['class' => ['example-class']]);
+
+    $this->assertEquals(['class' => new HtmlAttributeArray('class', ['example-class'])], $attributes->storage());
+  }
+
+  /**
+   * Provides tests data for testHasAttribute.
+   *
+   * @return array
+   *   An array of test data each containing an array of attributes, the name
+   *   of the attribute to check existence of, and the expected result.
+   */
+  public function providerTestHasAttribute() {
+    return [
+      [['class' => ['example-class']], 'class', TRUE],
+      [[], 'class', FALSE],
+      [['class' => ['example-class']], 'id', FALSE],
+      [['class' => ['example-class'], 'id' => 'foo'], 'id', TRUE],
+      [['id' => 'foo'], 'class', FALSE],
+    ];
+  }
+
+  /**
+   * @covers ::hasAttribute
+   * @dataProvider providerTestHasAttribute
+   */
+  public function testHasAttribute(array $test_data, $test_attribute, $expected) {
+    $attributes = new HtmlAttributeCollection($test_data);
+    $this->assertSame($expected, $attributes->hasAttribute($test_attribute));
+  }
+
+  /**
+   * Provides tests data for testMerge.
+   *
+   * @return array
+   *   An array of test data each containing an initial Attribute object, an
+   *   Attribute object or array to be merged, and the expected result.
+   */
+  public function providerTestMerge() {
+    return [
+      [new HtmlAttributeCollection([]), new HtmlAttributeCollection(['class' => ['class1']]), new HtmlAttributeCollection(['class' => ['class1']])],
+      [new HtmlAttributeCollection(['class' => ['example-class']]), new HtmlAttributeCollection(['class' => ['class1']]), new HtmlAttributeCollection(['class' => ['example-class', 'class1']])],
+      [new HtmlAttributeCollection(['class' => ['example-class']]), new HtmlAttributeCollection(['id' => 'foo', 'href' => 'bar']), new HtmlAttributeCollection(['class' => ['example-class'], 'id' => 'foo', 'href' => 'bar'])],
+    ];
+  }
+
+  /**
+   * @covers ::merge
+   * @dataProvider providerTestMerge
+   */
+  public function testMerge($original, $merge, $expected) {
+    $this->assertEquals($expected, $original->merge($merge));
+  }
+
+  /**
+   * @covers ::merge
+   */
+  public function testMergeArgumentException() {
+    $attributes = new HtmlAttributeCollection(['class' => ['example-class']]);
+    $this->expectException(\TypeError::class);
+    $attributes->merge('not an array');
+  }
+
+}
+
+/**
+ * Implementation of MarkupInterface to use in tests.
+ */
+class TestMarkup implements MarkupInterface, \Countable {
+
+  use MarkupTrait;
+
+}
diff --git a/core/tests/Drupal/Tests/Core/EventSubscriber/ActiveLinkResponseFilterTest.php b/core/tests/Drupal/Tests/Core/EventSubscriber/ActiveLinkResponseFilterTest.php
index e639d8c346..55e7caf541 100644
--- a/core/tests/Drupal/Tests/Core/EventSubscriber/ActiveLinkResponseFilterTest.php
+++ b/core/tests/Drupal/Tests/Core/EventSubscriber/ActiveLinkResponseFilterTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\Core\EventSubscriber;
 
+use Drupal\Component\HtmlAttribute\HtmlAttributeCollection;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\EventSubscriber\ActiveLinkResponseFilter;
 use Drupal\Core\Language\LanguageDefault;
@@ -9,7 +10,6 @@
 use Drupal\Core\Path\CurrentPathStack;
 use Drupal\Core\Path\PathMatcherInterface;
 use Drupal\Core\Session\AnonymousUserSession;
-use Drupal\Core\Template\Attribute;
 use Drupal\Tests\UnitTestCase;
 use Symfony\Component\HttpFoundation\BinaryFileResponse;
 use Symfony\Component\HttpFoundation\Request;
@@ -267,7 +267,7 @@ public function providerTestSetLinkActiveClass() {
         for ($c = 0; $c < count($contents); $c++) {
           $tag_content = $contents[$c];
 
-          $create_markup = function (Attribute $attributes) use ($html_prefix, $html_suffix, $tag, $tag_content) {
+          $create_markup = function (HtmlAttributeCollection $attributes) use ($html_prefix, $html_suffix, $tag, $tag_content) {
             return $html_prefix . '<' . $tag . $attributes . '>' . $tag_content . '</' . $tag . '>' . $html_suffix;
           };
 
@@ -276,7 +276,7 @@ public function providerTestSetLinkActiveClass() {
             $situation = $situations[$s];
 
             // Build the source markup.
-            $source_markup = $create_markup(new Attribute($situation['attributes']));
+            $source_markup = $create_markup(new HtmlAttributeCollection($situation['attributes']));
 
             // Build the target markup. If no "is-active" class should be set,
             // the resulting HTML should be identical. Otherwise, it should get
@@ -292,7 +292,7 @@ public function providerTestSetLinkActiveClass() {
                 $active_attributes['class'] = [];
               }
               $active_attributes['class'][] = 'is-active';
-              $target_markup = $create_markup(new Attribute($active_attributes));
+              $target_markup = $create_markup(new HtmlAttributeCollection($active_attributes));
             }
 
             $data[] = [$source_markup, $situation['context']['path'], $situation['context']['front'], $situation['context']['language'], $situation['context']['query'], $target_markup];
diff --git a/core/tests/Drupal/Tests/Core/Template/AttributeHelperTest.php b/core/tests/Drupal/Tests/Core/Template/AttributeHelperTest.php
index 7f564331b6..f483736aa3 100644
--- a/core/tests/Drupal/Tests/Core/Template/AttributeHelperTest.php
+++ b/core/tests/Drupal/Tests/Core/Template/AttributeHelperTest.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\Tests\Core\Template;
 
-use Drupal\Core\Template\Attribute;
+use Drupal\Component\HtmlAttribute\HtmlAttributeCollection;
 use Drupal\Core\Template\AttributeHelper;
 use Drupal\Tests\UnitTestCase;
 
@@ -35,7 +35,7 @@ public function providerTestAttributeExists() {
    */
   public function testAttributeExists(array $test_data, $test_attribute, $expected) {
     $this->assertSame($expected, AttributeHelper::attributeExists($test_attribute, $test_data));
-    $attributes = new Attribute($test_data);
+    $attributes = new HtmlAttributeCollection($test_data);
     $this->assertSame($expected, AttributeHelper::attributeExists($test_attribute, $attributes));
   }
 
@@ -49,11 +49,11 @@ public function testAttributeExists(array $test_data, $test_attribute, $expected
   public function providerTestMergeCollections() {
     return [
       [[], ['class' => ['class1']], ['class' => ['class1']]],
-      [[], new Attribute(['class' => ['class1']]), ['class' => ['class1']]],
+      [[], new HtmlAttributeCollection(['class' => ['class1']]), ['class' => ['class1']]],
       [['class' => ['example-class']], ['class' => ['class1']], ['class' => ['example-class', 'class1']]],
-      [['class' => ['example-class']], new Attribute(['class' => ['class1']]), ['class' => ['example-class', 'class1']]],
+      [['class' => ['example-class']], new HtmlAttributeCollection(['class' => ['class1']]), ['class' => ['example-class', 'class1']]],
       [['class' => ['example-class']], ['id' => 'foo', 'href' => 'bar'], ['class' => ['example-class'], 'id' => 'foo', 'href' => 'bar']],
-      [['class' => ['example-class']], new Attribute(['id' => 'foo', 'href' => 'bar']), ['class' => ['example-class'], 'id' => 'foo', 'href' => 'bar']],
+      [['class' => ['example-class']], new HtmlAttributeCollection(['id' => 'foo', 'href' => 'bar']), ['class' => ['example-class'], 'id' => 'foo', 'href' => 'bar']],
     ];
   }
 
@@ -63,14 +63,14 @@ public function providerTestMergeCollections() {
    */
   public function testMergeCollections($original, $merge, $expected) {
     $this->assertEquals($expected, AttributeHelper::mergeCollections($original, $merge));
-    $this->assertEquals(new Attribute($expected), AttributeHelper::mergeCollections(new Attribute($original), $merge));
+    $this->assertEquals(new HtmlAttributeCollection($expected), AttributeHelper::mergeCollections(new HtmlAttributeCollection($original), $merge));
   }
 
   /**
    * @covers ::mergeCollections
    */
   public function testMergeCollectionsArgumentException() {
-    $attributes = new Attribute(['class' => ['example-class']]);
+    $attributes = new HtmlAttributeCollection(['class' => ['example-class']]);
     $this->expectException(\InvalidArgumentException::class);
     $this->expectExceptionMessage('Invalid collection argument');
     AttributeHelper::mergeCollections($attributes, 'not an array');
diff --git a/core/tests/Drupal/Tests/Core/Template/AttributeLegacyTest.php b/core/tests/Drupal/Tests/Core/Template/AttributeLegacyTest.php
new file mode 100644
index 0000000000..f26e305d70
--- /dev/null
+++ b/core/tests/Drupal/Tests/Core/Template/AttributeLegacyTest.php
@@ -0,0 +1,53 @@
+<?php
+
+namespace Drupal\Tests\Core\Template;
+
+use Drupal\Component\HtmlAttribute\HtmlAttributeArray;
+use Drupal\Component\HtmlAttribute\HtmlAttributeBoolean;
+use Drupal\Component\HtmlAttribute\HtmlAttributeString;
+use Drupal\Component\HtmlAttribute\HtmlAttributeValueBase;
+use Drupal\Core\Template\AttributeArray as CoreAttributeArray;
+use Drupal\Core\Template\AttributeBoolean as CoreAttributeBoolean;
+use Drupal\Core\Template\AttributeString as CoreAttributeString;
+use Drupal\Core\Template\AttributeValueBase as CoreAttributeValueBase;
+use Drupal\Tests\UnitTestCase;
+
+/**
+ * Deprecation tests for the core Attribute* classes.
+ *
+ * @group Template
+ * @group legacy
+ */
+class AttributeLegacyTest extends UnitTestCase {
+
+  /**
+   * Tests deprecation of Attribute* classes.
+   */
+  public function testCoreAttributeDeprecations(): void {
+    $this->expectDeprecation('\Drupal\Core\Template\AttributeArray is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use \Drupal\Component\HtmlAttribute\HtmlAttributeArray instead. See https://www.drupal.org/node/3070485');
+    $this->expectDeprecation('\Drupal\Core\Template\AttributeBoolean is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use \Drupal\Component\HtmlAttribute\HtmlAttributeBoolean instead. See https://www.drupal.org/node/3070485');
+    $this->expectDeprecation('\Drupal\Core\Template\AttributeString is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use \Drupal\Component\HtmlAttribute\HtmlAttributeString instead. See https://www.drupal.org/node/3070485');
+    $this->assertInstanceOf(HtmlAttributeArray::class, new CoreAttributeArray('a', ['test']));
+    $this->assertInstanceOf(HtmlAttributeBoolean::class, new CoreAttributeBoolean('b', FALSE));
+    $this->assertInstanceOf(HtmlAttributeString::class, new CoreAttributeString('c', 'test'));
+
+  }
+
+  /**
+   * Tests deprecation of AttributeValueBase.
+   */
+  public function testCoreAttributeValueBaseDeprecation(): void {
+    $this->expectDeprecation('\Drupal\Core\Template\AttributeValueBase is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use \Drupal\Component\HtmlAttribute\HtmlAttributeValueBase instead. See https://www.drupal.org/node/3070485');
+    $this->assertInstanceOf(HtmlAttributeValueBase::class, new class('a', ['test']) extends CoreAttributeValueBase {
+
+      /**
+       * Implements the magic __toString() method.
+       */
+      public function __toString(): string {
+        return '';
+      }
+
+    });
+  }
+
+}
diff --git a/core/tests/Drupal/Tests/Core/Template/AttributeTest.php b/core/tests/Drupal/Tests/Core/Template/AttributeTest.php
deleted file mode 100644
index c05a4bfbe3..0000000000
--- a/core/tests/Drupal/Tests/Core/Template/AttributeTest.php
+++ /dev/null
@@ -1,524 +0,0 @@
-<?php
-
-namespace Drupal\Tests\Core\Template;
-
-use Drupal\Component\Utility\Html;
-use Drupal\Core\Render\Markup;
-use Drupal\Core\Template\Attribute;
-use Drupal\Core\Template\AttributeArray;
-use Drupal\Core\Template\AttributeString;
-use Drupal\Core\Template\Loader\StringLoader;
-use Drupal\Tests\UnitTestCase;
-use Drupal\Component\Render\MarkupInterface;
-use Twig\Environment;
-
-/**
- * @coversDefaultClass \Drupal\Core\Template\Attribute
- * @group Template
- */
-class AttributeTest extends UnitTestCase {
-
-  /**
-   * Tests the constructor of the attribute class.
-   */
-  public function testConstructor() {
-    $attribute = new Attribute(['class' => ['example-class']]);
-    $this->assertTrue(isset($attribute['class']));
-    $this->assertEquals(new AttributeArray('class', ['example-class']), $attribute['class']);
-
-    // Test adding boolean attributes through the constructor.
-    $attribute = new Attribute(['selected' => TRUE, 'checked' => FALSE]);
-    $this->assertTrue($attribute['selected']->value());
-    $this->assertFalse($attribute['checked']->value());
-
-    // Test that non-array values with name "class" are cast to array.
-    $attribute = new Attribute(['class' => 'example-class']);
-    $this->assertTrue(isset($attribute['class']));
-    $this->assertEquals(new AttributeArray('class', ['example-class']), $attribute['class']);
-
-    // Test that safe string objects work correctly.
-    $safe_string = $this->prophesize(MarkupInterface::class);
-    $safe_string->__toString()->willReturn('example-class');
-    $attribute = new Attribute(['class' => $safe_string->reveal()]);
-    $this->assertTrue(isset($attribute['class']));
-    $this->assertEquals(new AttributeArray('class', ['example-class']), $attribute['class']);
-  }
-
-  /**
-   * Tests set of values.
-   */
-  public function testSet() {
-    $attribute = new Attribute();
-    $attribute['class'] = ['example-class'];
-
-    $this->assertTrue(isset($attribute['class']));
-    $this->assertEquals(new AttributeArray('class', ['example-class']), $attribute['class']);
-  }
-
-  /**
-   * Tests adding new values to an existing part of the attribute.
-   */
-  public function testAdd() {
-    $attribute = new Attribute(['class' => ['example-class']]);
-
-    $attribute['class'][] = 'other-class';
-    $this->assertEquals(new AttributeArray('class', ['example-class', 'other-class']), $attribute['class']);
-  }
-
-  /**
-   * Tests removing of values.
-   */
-  public function testRemove() {
-    $attribute = new Attribute(['class' => ['example-class']]);
-    unset($attribute['class']);
-    $this->assertFalse(isset($attribute['class']));
-  }
-
-  /**
-   * Tests setting attributes.
-   * @covers ::setAttribute
-   */
-  public function testSetAttribute() {
-    $attribute = new Attribute();
-
-    // Test adding various attributes.
-    $attributes = ['alt', 'id', 'src', 'title', 'value'];
-    foreach ($attributes as $key) {
-      foreach (['kitten', ''] as $value) {
-        $attribute = new Attribute();
-        $attribute->setAttribute($key, $value);
-        $this->assertEquals($value, $attribute[$key]);
-      }
-    }
-
-    // Test adding array to class.
-    $attribute = new Attribute();
-    $attribute->setAttribute('class', ['kitten', 'cat']);
-    $this->assertEquals(['kitten', 'cat'], $attribute['class']->value());
-
-    // Test adding boolean attributes.
-    $attribute = new Attribute();
-    $attribute['checked'] = TRUE;
-    $this->assertTrue($attribute['checked']->value());
-  }
-
-  /**
-   * Tests removing attributes.
-   * @covers ::removeAttribute
-   */
-  public function testRemoveAttribute() {
-    $attributes = [
-      'alt' => 'Alternative text',
-      'id' => 'bunny',
-      'src' => 'zebra',
-      'style' => 'color: pink;',
-      'title' => 'kitten',
-      'value' => 'ostrich',
-      'checked' => TRUE,
-    ];
-    $attribute = new Attribute($attributes);
-
-    // Single value.
-    $attribute->removeAttribute('alt');
-    $this->assertEmpty($attribute['alt']);
-
-    // Multiple values.
-    $attribute->removeAttribute('id', 'src');
-    $this->assertEmpty($attribute['id']);
-    $this->assertEmpty($attribute['src']);
-
-    // Single value in array.
-    $attribute->removeAttribute(['style']);
-    $this->assertEmpty($attribute['style']);
-
-    // Boolean value.
-    $attribute->removeAttribute('checked');
-    $this->assertEmpty($attribute['checked']);
-
-    // Multiple values in array.
-    $attribute->removeAttribute(['title', 'value']);
-    $this->assertEmpty((string) $attribute);
-
-  }
-
-  /**
-   * Tests adding class attributes with the AttributeArray helper method.
-   * @covers ::addClass
-   */
-  public function testAddClasses() {
-    // Add empty Attribute object with no classes.
-    $attribute = new Attribute();
-
-    // Add no class on empty attribute.
-    $attribute->addClass();
-    $this->assertEmpty($attribute['class']);
-
-    // Test various permutations of adding values to empty Attribute objects.
-    foreach ([NULL, FALSE, '', []] as $value) {
-      // Single value.
-      $attribute->addClass($value);
-      $this->assertEmpty((string) $attribute);
-
-      // Multiple values.
-      $attribute->addClass($value, $value);
-      $this->assertEmpty((string) $attribute);
-
-      // Single value in array.
-      $attribute->addClass([$value]);
-      $this->assertEmpty((string) $attribute);
-
-      // Single value in arrays.
-      $attribute->addClass([$value], [$value]);
-      $this->assertEmpty((string) $attribute);
-    }
-
-    // Add one class on empty attribute.
-    $attribute->addClass('banana');
-    $this->assertEquals(['banana'], $attribute['class']->value());
-
-    // Add one class.
-    $attribute->addClass('aa');
-    $this->assertEquals(['banana', 'aa'], $attribute['class']->value());
-
-    // Add multiple classes.
-    $attribute->addClass('xx', 'yy');
-    $this->assertEquals(['banana', 'aa', 'xx', 'yy'], $attribute['class']->value());
-
-    // Add an array of classes.
-    $attribute->addClass(['red', 'green', 'blue']);
-    $this->assertEquals(['banana', 'aa', 'xx', 'yy', 'red', 'green', 'blue'], $attribute['class']->value());
-
-    // Add an array of duplicate classes.
-    $attribute->addClass(['red', 'green', 'blue'], ['aa', 'aa', 'banana'], 'yy');
-    $this->assertEquals('banana aa xx yy red green blue', (string) $attribute['class']);
-  }
-
-  /**
-   * Tests removing class attributes with the AttributeArray helper method.
-   * @covers ::removeClass
-   */
-  public function testRemoveClasses() {
-    // Add duplicate class to ensure that both duplicates are removed.
-    $classes = ['example-class', 'aa', 'xx', 'yy', 'red', 'green', 'blue', 'red'];
-    $attribute = new Attribute(['class' => $classes]);
-
-    // Remove one class.
-    $attribute->removeClass('example-class');
-    $this->assertNotContains('example-class', $attribute['class']->value());
-
-    // Remove multiple classes.
-    $attribute->removeClass('xx', 'yy');
-    $this->assertNotContains(['xx', 'yy'], $attribute['class']->value());
-
-    // Remove an array of classes.
-    $attribute->removeClass(['red', 'green', 'blue']);
-    $this->assertNotContains(['red', 'green', 'blue'], $attribute['class']->value());
-
-    // Remove a class that does not exist.
-    $attribute->removeClass('gg');
-    $this->assertNotContains(['gg'], $attribute['class']->value());
-    // Test that the array index remains sequential.
-    $this->assertEquals(['aa'], $attribute['class']->value());
-
-    $attribute->removeClass('aa');
-    $this->assertEmpty((string) $attribute);
-  }
-
-  /**
-   * Tests checking for class names with the Attribute method.
-   * @covers ::hasClass
-   */
-  public function testHasClass() {
-    // Test an attribute without any classes.
-    $attribute = new Attribute();
-    $this->assertFalse($attribute->hasClass('a-class-nowhere-to-be-found'));
-
-    // Add a class to check for.
-    $attribute->addClass('we-totally-have-this-class');
-    // Check that this class exists.
-    $this->assertTrue($attribute->hasClass('we-totally-have-this-class'));
-  }
-
-  /**
-   * Tests removing class attributes with the Attribute helper methods.
-   * @covers ::removeClass
-   * @covers ::addClass
-   */
-  public function testChainAddRemoveClasses() {
-    $attribute = new Attribute(
-      ['class' => ['example-class', 'red', 'green', 'blue']]
-    );
-
-    $attribute
-      ->removeClass(['red', 'green', 'pink'])
-      ->addClass(['apple', 'lime', 'grapefruit'])
-      ->addClass(['banana']);
-    $expected = ['example-class', 'blue', 'apple', 'lime', 'grapefruit', 'banana'];
-    $this->assertEquals($expected, $attribute['class']->value(), 'Attributes chained');
-  }
-
-  /**
-   * Tests the twig calls to the Attribute.
-   * @dataProvider providerTestAttributeClassHelpers
-   *
-   * @covers ::removeClass
-   * @covers ::addClass
-   */
-  public function testTwigAddRemoveClasses($template, $expected, $seed_attributes = []) {
-    $loader = new StringLoader();
-    $twig = new Environment($loader);
-    $data = ['attributes' => new Attribute($seed_attributes)];
-    $result = $twig->createTemplate($template)->render($data);
-    $this->assertEquals($expected, $result);
-  }
-
-  /**
-   * Provides tests data for testEscaping.
-   *
-   * @return array
-   *   An array of test data each containing of a twig template string,
-   *   a resulting string of classes and an optional array of attributes.
-   */
-  public function providerTestAttributeClassHelpers() {
-    // cSpell:disable
-    return [
-      ["{{ attributes.class }}", ''],
-      ["{{ attributes.addClass('everest').class }}", 'everest'],
-      ["{{ attributes.addClass(['k2', 'kangchenjunga']).class }}", 'k2 kangchenjunga'],
-      ["{{ attributes.addClass('lhotse', 'makalu', 'cho-oyu').class }}", 'lhotse makalu cho-oyu'],
-      [
-        "{{ attributes.addClass('nanga-parbat').class }}",
-        'dhaulagiri manaslu nanga-parbat',
-        ['class' => ['dhaulagiri', 'manaslu']],
-      ],
-      [
-        "{{ attributes.removeClass('annapurna').class }}",
-        'gasherbrum-i',
-        ['class' => ['annapurna', 'gasherbrum-i']],
-      ],
-      [
-        "{{ attributes.removeClass(['broad peak']).class }}",
-        'gasherbrum-ii',
-        ['class' => ['broad peak', 'gasherbrum-ii']],
-      ],
-      [
-        "{{ attributes.removeClass('gyachung-kang', 'shishapangma').class }}",
-        '',
-        ['class' => ['shishapangma', 'gyachung-kang']],
-      ],
-      [
-        "{{ attributes.removeClass('nuptse').addClass('annapurna-ii').class }}",
-        'himalchuli annapurna-ii',
-        ['class' => ['himalchuli', 'nuptse']],
-      ],
-      // Test for the removal of an empty class name.
-      ["{{ attributes.addClass('rakaposhi', '').class }}", 'rakaposhi'],
-    ];
-    // cSpell:enable
-  }
-
-  /**
-   * Tests iterating on the values of the attribute.
-   */
-  public function testIterate() {
-    $attribute = new Attribute(['class' => ['example-class'], 'id' => 'example-id']);
-
-    $counter = 0;
-    foreach ($attribute as $key => $value) {
-      if ($counter == 0) {
-        $this->assertEquals('class', $key);
-        $this->assertEquals(new AttributeArray('class', ['example-class']), $value);
-      }
-      if ($counter == 1) {
-        $this->assertEquals('id', $key);
-        $this->assertEquals(new AttributeString('id', 'example-id'), $value);
-      }
-      $counter++;
-    }
-  }
-
-  /**
-   * Tests printing of an attribute.
-   */
-  public function testPrint() {
-    $attribute = new Attribute(['class' => ['example-class'], 'id' => 'example-id', 'enabled' => TRUE]);
-
-    $content = $this->randomMachineName();
-    $html = '<div' . (string) $attribute . '>' . $content . '</div>';
-    $this->assertClass('example-class', $html);
-    $this->assertNoClass('example-class2', $html);
-
-    $this->assertID('example-id', $html);
-    $this->assertNoID('example-id2', $html);
-
-    $this->assertStringContainsString('enabled', $html);
-  }
-
-  /**
-   * @covers ::createAttributeValue
-   * @dataProvider providerTestAttributeValues
-   */
-  public function testAttributeValues(array $attributes, $expected) {
-    $this->assertEquals($expected, (new Attribute($attributes))->__toString());
-  }
-
-  public function providerTestAttributeValues() {
-    $data = [];
-
-    $string = '"> <script>alert(123)</script>"';
-    $data['safe-object-xss1'] = [['title' => Markup::create($string)], ' title="&quot;&gt; alert(123)&quot;"'];
-    $data['non-safe-object-xss1'] = [['title' => $string], ' title="' . Html::escape($string) . '"'];
-    $string = '&quot;><script>alert(123)</script>';
-    $data['safe-object-xss2'] = [['title' => Markup::create($string)], ' title="&quot;&gt;alert(123)"'];
-    $data['non-safe-object-xss2'] = [['title' => $string], ' title="' . Html::escape($string) . '"'];
-
-    return $data;
-  }
-
-  /**
-   * Checks that the given CSS class is present in the given HTML snippet.
-   *
-   * @param string $class
-   *   The CSS class to check.
-   * @param string $html
-   *   The HTML snippet to check.
-   *
-   * @internal
-   */
-  protected function assertClass(string $class, string $html): void {
-    $xpath = "//*[@class='$class']";
-    self::assertTrue((bool) $this->getXPathResultCount($xpath, $html));
-  }
-
-  /**
-   * Checks that the given CSS class is not present in the given HTML snippet.
-   *
-   * @param string $class
-   *   The CSS class to check.
-   * @param string $html
-   *   The HTML snippet to check.
-   *
-   * @internal
-   */
-  protected function assertNoClass(string $class, string $html): void {
-    $xpath = "//*[@class='$class']";
-    self::assertFalse((bool) $this->getXPathResultCount($xpath, $html));
-  }
-
-  /**
-   * Checks that the given CSS ID is present in the given HTML snippet.
-   *
-   * @param string $id
-   *   The CSS ID to check.
-   * @param string $html
-   *   The HTML snippet to check.
-   *
-   * @internal
-   */
-  protected function assertID(string $id, string $html): void {
-    $xpath = "//*[@id='$id']";
-    self::assertTrue((bool) $this->getXPathResultCount($xpath, $html));
-  }
-
-  /**
-   * Checks that the given CSS ID is not present in the given HTML snippet.
-   *
-   * @param string $id
-   *   The CSS ID to check.
-   * @param string $html
-   *   The HTML snippet to check.
-   *
-   * @internal
-   */
-  protected function assertNoID(string $id, string $html): void {
-    $xpath = "//*[@id='$id']";
-    self::assertFalse((bool) $this->getXPathResultCount($xpath, $html));
-  }
-
-  /**
-   * Counts the occurrences of the given XPath query in a given HTML snippet.
-   *
-   * @param string $query
-   *   The XPath query to execute.
-   * @param string $html
-   *   The HTML snippet to check.
-   *
-   * @return int
-   *   The number of results that are found.
-   */
-  protected function getXPathResultCount($query, $html) {
-    $document = new \DOMDocument();
-    $document->loadHTML($html);
-    $xpath = new \DOMXPath($document);
-
-    return $xpath->query($query)->length;
-  }
-
-  /**
-   * Tests the storage method.
-   */
-  public function testStorage() {
-    $attribute = new Attribute(['class' => ['example-class']]);
-
-    $this->assertEquals(['class' => new AttributeArray('class', ['example-class'])], $attribute->storage());
-  }
-
-  /**
-   * Provides tests data for testHasAttribute.
-   *
-   * @return array
-   *   An array of test data each containing an array of attributes, the name
-   *   of the attribute to check existence of, and the expected result.
-   */
-  public function providerTestHasAttribute() {
-    return [
-      [['class' => ['example-class']], 'class', TRUE],
-      [[], 'class', FALSE],
-      [['class' => ['example-class']], 'id', FALSE],
-      [['class' => ['example-class'], 'id' => 'foo'], 'id', TRUE],
-      [['id' => 'foo'], 'class', FALSE],
-    ];
-  }
-
-  /**
-   * @covers ::hasAttribute
-   * @dataProvider providerTestHasAttribute
-   */
-  public function testHasAttribute(array $test_data, $test_attribute, $expected) {
-    $attributes = new Attribute($test_data);
-    $this->assertSame($expected, $attributes->hasAttribute($test_attribute));
-  }
-
-  /**
-   * Provides tests data for testMerge.
-   *
-   * @return array
-   *   An array of test data each containing an initial Attribute object, an
-   *   Attribute object or array to be merged, and the expected result.
-   */
-  public function providerTestMerge() {
-    return [
-      [new Attribute([]), new Attribute(['class' => ['class1']]), new Attribute(['class' => ['class1']])],
-      [new Attribute(['class' => ['example-class']]), new Attribute(['class' => ['class1']]), new Attribute(['class' => ['example-class', 'class1']])],
-      [new Attribute(['class' => ['example-class']]), new Attribute(['id' => 'foo', 'href' => 'bar']), new Attribute(['class' => ['example-class'], 'id' => 'foo', 'href' => 'bar'])],
-    ];
-  }
-
-  /**
-   * @covers ::merge
-   * @dataProvider providerTestMerge
-   */
-  public function testMerge($original, $merge, $expected) {
-    $this->assertEquals($expected, $original->merge($merge));
-  }
-
-  /**
-   * @covers ::merge
-   */
-  public function testMergeArgumentException() {
-    $attributes = new Attribute(['class' => ['example-class']]);
-    $this->expectException(\TypeError::class);
-    $attributes->merge('not an array');
-  }
-
-}
diff --git a/core/tests/Drupal/Tests/Core/Template/TwigExtensionTest.php b/core/tests/Drupal/Tests/Core/Template/TwigExtensionTest.php
index 880b938820..71406d71e1 100644
--- a/core/tests/Drupal/Tests/Core/Template/TwigExtensionTest.php
+++ b/core/tests/Drupal/Tests/Core/Template/TwigExtensionTest.php
@@ -4,6 +4,7 @@
 
 // cspell:ignore mila
 
+use Drupal\Component\HtmlAttribute\HtmlAttributeCollection;
 use Drupal\Core\File\FileUrlGeneratorInterface;
 use Drupal\Core\GeneratedLink;
 use Drupal\Core\Render\RenderableInterface;
@@ -19,6 +20,9 @@
 use Twig\Node\Expression\FilterExpression;
 use Twig\Source;
 
+// cspell:ignore kangchenjunga nanga parbat manaslu gasherbrum gyachung kang
+// cspell:ignore shishapangma gyachung nuptse himalchuli rakaposhi
+
 /**
  * Tests the twig extension.
  *
@@ -542,6 +546,62 @@ public function providerTestTwigAddSuggestionFilter(): \Iterator {
     ];
   }
 
+  /**
+   * Tests Twig calls to Attribute objects.
+   *
+   * @dataProvider providerTestAttributeClassHelpers
+   */
+  public function testTwigAddRemoveClasses($template, $expected, $seed_attributes = []) {
+    $loader = new StringLoader();
+    $twig = new Environment($loader);
+    $data = ['attributes' => new HtmlAttributeCollection($seed_attributes)];
+    $result = $twig->createTemplate($template)->render($data);
+    $this->assertEquals($expected, $result);
+  }
+
+  /**
+   * Provides tests data for testEscaping.
+   *
+   * @return array
+   *   An array of test data each containing of a twig template string,
+   *   a resulting string of classes and an optional array of attributes.
+   */
+  public function providerTestAttributeClassHelpers() {
+    return [
+      ["{{ attributes.class }}", ''],
+      ["{{ attributes.addClass('everest').class }}", 'everest'],
+      ["{{ attributes.addClass(['k2', 'kangchenjunga']).class }}", 'k2 kangchenjunga'],
+      ["{{ attributes.addClass('lhotse', 'makalu', 'cho-oyu').class }}", 'lhotse makalu cho-oyu'],
+      [
+        "{{ attributes.addClass('nanga-parbat').class }}",
+        'dhaulagiri manaslu nanga-parbat',
+        ['class' => ['dhaulagiri', 'manaslu']],
+      ],
+      [
+        "{{ attributes.removeClass('annapurna').class }}",
+        'gasherbrum-i',
+        ['class' => ['annapurna', 'gasherbrum-i']],
+      ],
+      [
+        "{{ attributes.removeClass(['broad peak']).class }}",
+        'gasherbrum-ii',
+        ['class' => ['broad peak', 'gasherbrum-ii']],
+      ],
+      [
+        "{{ attributes.removeClass('gyachung-kang', 'shishapangma').class }}",
+        '',
+        ['class' => ['shishapangma', 'gyachung-kang']],
+      ],
+      [
+        "{{ attributes.removeClass('nuptse').addClass('annapurna-ii').class }}",
+        'himalchuli annapurna-ii',
+        ['class' => ['himalchuli', 'nuptse']],
+      ],
+      // Test for the removal of an empty class name.
+      ["{{ attributes.addClass('rakaposhi', '').class }}", 'rakaposhi'],
+    ];
+  }
+
 }
 
 class TwigExtensionTestString {
diff --git a/core/tests/Drupal/Tests/Core/Template/TwigSandboxTest.php b/core/tests/Drupal/Tests/Core/Template/TwigSandboxTest.php
index c7507dc0f7..f451b47627 100644
--- a/core/tests/Drupal/Tests/Core/Template/TwigSandboxTest.php
+++ b/core/tests/Drupal/Tests/Core/Template/TwigSandboxTest.php
@@ -7,7 +7,8 @@
 
 namespace Drupal\Tests\Core\Template;
 
-use Drupal\Core\Template\Attribute;
+use Drupal\Component\HtmlAttribute\HtmlAttributeCollection;
+use Drupal\Core\Template\Attribute as CoreAttribute;
 use Drupal\Core\Template\TwigSandboxPolicy;
 use Drupal\Core\Template\Loader\StringLoader;
 use Drupal\Tests\UnitTestCase;
@@ -72,7 +73,7 @@ public function getTwigEntityDangerousMethods() {
    * Tests that white listed classes can be extended.
    */
   public function testExtendedClass() {
-    $this->assertEquals(' class=&quot;kitten&quot;', $this->twig->render('{{ attribute.addClass("kitten") }}', ['attribute' => new TestAttribute()]));
+    $this->assertEquals(' class=&quot;kitten&quot;', $this->twig->render('{{ attribute.addClass("kitten") }}', ['attribute' => new TestAttributeCollection()]));
   }
 
   /**
@@ -157,6 +158,24 @@ public function testUrlSafeMethods() {
     $this->assertEquals('http://kittens.cat/are/cute', $result, 'Sandbox policy allows toString() to be called.');
   }
 
+  /**
+   * Tests deprecation of Drupal\Core\Template\Attribute as an allowed class.
+   *
+   * @group legacy
+   */
+  public function testDeprecatedAllowedClass() {
+    $this->expectDeprecation('\Drupal\Core\Template\Attribute as an allowed class in $settings[\'twig_sandbox_allowed_classes\'] is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use \Drupal\Component\HtmlAttribute\HtmlAttributeCollection instead. See https://www.drupal.org/node/3070485');
+    $policy = $this->getMockBuilder(TwigSandboxPolicy::class)
+      ->onlyMethods(['getSettings'])
+      ->disableOriginalConstructor()
+      ->getMock();
+    $policy->expects($this->any())
+      ->method('getSettings')
+      ->willReturnOnConsecutiveCalls([CoreAttribute::class], [], []);
+    $this->expectException(SecurityError::class);
+    $policy->checkMethodAllowed($this, 'add');
+  }
+
 }
 
-class TestAttribute extends Attribute {}
+class TestAttributeCollection extends HtmlAttributeCollection {}
