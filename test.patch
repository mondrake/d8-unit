diff --git a/core/modules/comment/tests/src/Unit/CommentLinkBuilderTest.php b/core/modules/comment/tests/src/Unit/CommentLinkBuilderTest.php
index 1b00a4ff02..c83c1b26ea 100644
--- a/core/modules/comment/tests/src/Unit/CommentLinkBuilderTest.php
+++ b/core/modules/comment/tests/src/Unit/CommentLinkBuilderTest.php
@@ -5,10 +5,12 @@
 use Drupal\comment\CommentLinkBuilder;
 use Drupal\comment\Plugin\Field\FieldType\CommentItemInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Url;
 use Drupal\node\NodeInterface;
 use Drupal\Tests\Traits\Core\GeneratePermutationsTrait;
 use Drupal\Tests\UnitTestCase;
+use Prophecy\Prophet;
 
 /**
  * @coversDefaultClass \Drupal\comment\CommentLinkBuilder
@@ -55,10 +57,8 @@ class CommentLinkBuilderTest extends UnitTestCase {
 
   /**
    * Timestamp used in test.
-   *
-   * @var int
    */
-  protected $timestamp;
+  protected static int $timestamp;
 
   /**
    * @var \Drupal\comment\CommentLinkBuilderInterface
@@ -131,6 +131,7 @@ public function testCommentLinkBuilder(NodeInterface $node, $context, $has_acces
     $this->currentUser->expects($this->any())
       ->method('isAnonymous')
       ->willReturn($is_anonymous);
+
     $links = $this->commentLinkBuilder->buildCommentedEntityLinks($node, $context);
     if (!empty($expected)) {
       if (!empty($links)) {
@@ -159,11 +160,11 @@ public function testCommentLinkBuilder(NodeInterface $node, $context, $has_acces
   /**
    * Data provider for ::testCommentLinkBuilder.
    */
-  public function getLinkCombinations() {
+  public static function getLinkCombinations() {
     $cases = [];
     // No links should be created if the entity doesn't have the field.
     $cases[] = [
-      $this->getMockNode(FALSE, CommentItemInterface::OPEN, CommentItemInterface::FORM_BELOW, 1),
+      static::getMockNode(FALSE, CommentItemInterface::OPEN, CommentItemInterface::FORM_BELOW, 1),
       ['view_mode' => 'teaser'],
       TRUE,
       TRUE,
@@ -174,7 +175,7 @@ public function getLinkCombinations() {
     foreach (['search_result', 'search_index', 'print'] as $view_mode) {
       // Nothing should be output in these view modes.
       $cases[] = [
-        $this->getMockNode(TRUE, CommentItemInterface::OPEN, CommentItemInterface::FORM_BELOW, 1),
+        static::getMockNode(TRUE, CommentItemInterface::OPEN, CommentItemInterface::FORM_BELOW, 1),
         ['view_mode' => $view_mode],
         TRUE,
         TRUE,
@@ -200,10 +201,10 @@ public function getLinkCombinations() {
         'teaser', 'rss', 'full',
       ],
     ];
-    $permutations = $this->generatePermutations($combinations);
+    $permutations = static::generatePermutations($combinations);
     foreach ($permutations as $combination) {
       $case = [
-        $this->getMockNode(TRUE, $combination['comments'], $combination['form_location'], $combination['comment_count']),
+        static::getMockNode(TRUE, $combination['comments'], $combination['form_location'], $combination['comment_count']),
         ['view_mode' => $combination['view_mode']],
         $combination['has_access_comments'],
         $combination['history_exists'],
@@ -267,11 +268,40 @@ public function getLinkCombinations() {
    * @param int $comment_count
    *   Number of comments against the field.
    *
-   * @return \Drupal\node\NodeInterface|\PHPUnit\Framework\MockObject\MockObject
+   * @return \Drupal\node\NodeInterface
    *   Mock node for testing.
    */
-  protected function getMockNode($has_field, $comment_status, $form_location, $comment_count) {
-    $node = $this->createMock('\Drupal\node\NodeInterface');
+  protected static function getMockNode($has_field, $comment_status, $form_location, $comment_count) {
+    $prophet = new Prophet();
+
+    $node = $prophet->prophesize(NodeInterface::class);
+    $node->hasField()->willReturn($has_field);
+
+    if (!isset(static::$timestamp)) {
+      static::$timestamp = time();
+    }
+    $field_item = (object) [
+      'status' => $comment_status,
+      'comment_count' => $comment_count,
+      'last_comment_timestamp' => static::$timestamp,
+    ];
+    $node->get('comment')->willReturn($field_item);
+
+    $field_definition = $prophet->prophesize(FieldDefinitionInterface::class);
+    $field_definition->getSetting('form_location')->willReturn($form_location);
+    $field_definition->reveal();
+
+    $node->getFieldDefinition('comment')->willReturn($field_definition);
+    $node->language()->willReturn('und');
+    $node->getEntityTypeId()->willReturn('node');
+    $node->id()->willReturn(1);
+
+    $url = Url::fromRoute('node.view');
+    $node->toUrl()->willReturn($url);
+
+    return $node->reveal();
+
+/*    $node = $this->createMock('\Drupal\node\NodeInterface');
     $node->expects($this->any())
       ->method('hasField')
       ->willReturn($has_field);
@@ -314,9 +344,8 @@ protected function getMockNode($has_field, $comment_status, $form_location, $com
     $url = Url::fromRoute('node.view');
     $node->expects($this->any())
       ->method('toUrl')
-      ->willReturn($url);
 
-    return $node;
+      ->willReturn($url);*/
   }
 
 }
