diff --git a/core/lib/Drupal/Core/TypedData/Validation/RecursiveContextualValidator.php b/core/lib/Drupal/Core/TypedData/Validation/RecursiveContextualValidator.php
index f0b885a10c..835ab372ad 100644
--- a/core/lib/Drupal/Core/TypedData/Validation/RecursiveContextualValidator.php
+++ b/core/lib/Drupal/Core/TypedData/Validation/RecursiveContextualValidator.php
@@ -138,6 +138,7 @@ protected function validateNode(TypedDataInterface $data, $constraints = NULL, $
     // constraint validators, such that they do not have to care about Typed
     // Data.
     $value = $typed_data_manager->getCanonicalRepresentation($data);
+dump([__METHOD__, $data, $metadata, $value]);
     $constraints_given = isset($constraints);
     $this->context->setNode($value, $data, $metadata, $property_path);
 
diff --git a/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/RangeConstraint.php b/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/RangeConstraint.php
index 161aa10db2..a6cc645ca3 100644
--- a/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/RangeConstraint.php
+++ b/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/RangeConstraint.php
@@ -19,7 +19,16 @@
  */
 class RangeConstraint extends Range {
 
-  public $minMessage = 'This value should be %limit or more.';
-  public $maxMessage = 'This value should be %limit or less.';
+  /**
+   * {@inheritdoc}
+   */
+  public function __construct(array $options = NULL) {
+dump($options);
+    if (!isset($options['min']) || !isset($options['max'])) {
+      $options['minMessage'] = $options['minMessage'] ?? 'This value should be %limit or more.';
+      $options['maxMessage'] = $options['maxMessage'] ?? 'This value should be %limit or less.';
+    }
+    parent::__construct($options);
+  }
 
 }
