diff --git a/core/lib/Drupal/Core/Database/Query/Upsert.php b/core/lib/Drupal/Core/Database/Query/Upsert.php
index a406d7ab97..d391d45d67 100644
--- a/core/lib/Drupal/Core/Database/Query/Upsert.php
+++ b/core/lib/Drupal/Core/Database/Query/Upsert.php
@@ -84,6 +84,7 @@ protected function preExecute() {
     // If no values have been added, silently ignore this query. This can happen
     // if values are added conditionally, so we don't want to throw an
     // exception.
+//dump(['insert' => $this->insertFields, 'default' => $this->defaultFields, 'values' => $this->insertValues]);
     return isset($this->insertValues[0]) || $this->insertFields;
   }
 
diff --git a/core/tests/Drupal/KernelTests/Core/Database/UpsertTest.php b/core/tests/Drupal/KernelTests/Core/Database/UpsertTest.php
index 461117797f..ed5655a6d4 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/UpsertTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/UpsertTest.php
@@ -89,4 +89,69 @@ public function testSpecialColumnUpsert() {
     $this->assertEquals($record->function, 'Function 2');
   }
 
+  /**
+   * Tests that we can not run an upsert that uses only default values.
+   */
+  public function testUpsertOnlyDefaults() {
+    $upsert = $this->connection->upsert('test')
+      ->key('id')
+      ->useDefaults(['name', 'age', 'job']);
+    $this->assertEmpty($upsert->execute());
+  }
+
+  /**
+   * Tests that we can run an upsert that uses some default values.
+   */
+  public function testUpsertDefaults() {
+    $upsert = $this->connection->upsert('test')
+      ->key('id')
+      ->fields(['name'])
+      ->useDefaults(['age', 'job']);
+    $upsert->values([
+      'name' => 'Potsie',
+    ]);
+$this->assertEquals('xx', (string) $upsert);
+    $id = $upsert->execute();
+
+    $query = $this->connection->select('test')->fields('test');
+    $query->condition('id', $id);
+    $row = $query->execute()->fetchAssoc();
+
+    $this->assertEquals([], $row);
+  }
+
+  /**
+   * Tests that no action will be preformed if no fields are specified.
+   */
+/*  public function testDefaultEmptyInsert() {
+    $num_records_before = (int) $this->connection->query('SELECT COUNT(*) FROM {test}')->fetchField();
+
+    try {
+      $this->connection->insert('test')->execute();
+      // This is only executed if no exception has been thrown.
+      $this->fail('Expected exception NoFieldsException has not been thrown.');
+    }
+    catch (NoFieldsException $e) {
+      $this->pass('Expected exception NoFieldsException has been thrown.');
+    }
+
+    $num_records_after = (int) $this->connection->query('SELECT COUNT(*) FROM {test}')->fetchField();
+    $this->assertSame($num_records_before, $num_records_after, 'Do nothing as no fields are specified.');
+  }
+
+  /**
+   * Tests that we can insert fields with values and defaults in the same query.
+   */
+/*  public function testDefaultInsertWithFields() {
+    $query = $this->connection->insert('test')
+      ->fields(['name' => 'Bob'])
+      ->useDefaults(['job']);
+    $id = $query->execute();
+
+    $schema = drupal_get_module_schema('database_test', 'test');
+
+    $job = $this->connection->query('SELECT job FROM {test} WHERE id = :id', [':id' => $id])->fetchField();
+    $this->assertEqual($job, $schema['fields']['job']['default'], 'Default field value is set.');
+  }*/
+
 }
