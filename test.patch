diff --git a/core/modules/inline_form_errors/tests/src/Unit/FormErrorHandlerTest.php b/core/modules/inline_form_errors/tests/src/Unit/FormErrorHandlerTest.php
index 962f107955..fd3880a7ce 100644
--- a/core/modules/inline_form_errors/tests/src/Unit/FormErrorHandlerTest.php
+++ b/core/modules/inline_form_errors/tests/src/Unit/FormErrorHandlerTest.php
@@ -120,12 +120,19 @@ protected function setUp(): void {
   public function testErrorMessagesInline() {
     $this->messenger->expects($this->exactly(4))
       ->method('addError')
-      ->withConsecutive(
-        ['no title given', FALSE],
-        ['element is invisible', FALSE],
-        ['this missing element is invalid', FALSE],
-        ['3 errors have been found: <ul-comma-list-mock><li-mock>Test 1</li-mock><li-mock>Test 2 &amp; a half</li-mock><li-mock>Test 3</li-mock></ul-comma-list-mock>', FALSE],
-      );
+      ->willReturnCallback(function (...$args) {
+        static $callSequence = [
+          ['no title given', FALSE],
+          ['element is invisible', FALSE],
+          ['this missing element is invalid', FALSE],
+          [
+            '3 errors have been found: <ul-comma-list-mock><li-mock>Test 1</li-mock><li-mock>Test 2 &amp; a half</li-mock><li-mock>Test 3</li-mock></ul-comma-list-mock>',
+            FALSE,
+          ],
+        ];
+        $expectedArgs = array_shift($callSequence);
+        $this->assertSame($expectedArgs, $args);
+      });
 
     $this->renderer->expects($this->once())
       ->method('renderPlain')
@@ -164,15 +171,19 @@ public function testErrorMessagesNotInline() {
     // Asserts all messages are summarized.
     $this->messenger->expects($this->exactly(7))
       ->method('addMessage')
-      ->withConsecutive(
-        ['invalid', 'error', FALSE],
-        ['invalid', 'error', FALSE],
-        ['invalid', 'error', FALSE],
-        ['no error message', 'error', FALSE],
-        ['no title given', 'error', FALSE],
-        ['element is invisible', 'error', FALSE],
-        ['this missing element is invalid', 'error', FALSE],
-      );
+      ->willReturnCallback(function (...$args) {
+        static $callSequence = [
+          ['invalid', 'error', FALSE],
+          ['invalid', 'error', FALSE],
+          ['invalid', 'error', FALSE],
+          ['no error message', 'error', FALSE],
+          ['no title given', 'error', FALSE],
+          ['element is invisible', 'error', FALSE],
+          ['this missing element is invalid', 'error', FALSE],
+        ];
+        $expectedArgs = array_shift($callSequence);
+        $this->assertSame($expectedArgs, $args);
+      });
 
     $this->renderer->expects($this->never())
       ->method('renderPlain');
diff --git a/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapEnsureTablesTest.php b/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapEnsureTablesTest.php
index f4a4dc2596..259814090d 100644
--- a/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapEnsureTablesTest.php
+++ b/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapEnsureTablesTest.php
@@ -124,12 +124,17 @@ public function testEnsureTablesNotExist() {
         ['migrate_map_sql_idmap_test', FALSE],
         ['migrate_message_sql_idmap_test', FALSE],
       ]);
+
+    $callSequence = [
+      ['migrate_map_sql_idmap_test', $map_table_schema],
+      ['migrate_message_sql_idmap_test', $table_schema],
+    ];
     $schema->expects($this->exactly(2))
       ->method('createTable')
-      ->withConsecutive(
-        ['migrate_map_sql_idmap_test', $map_table_schema],
-        ['migrate_message_sql_idmap_test', $table_schema],
-      );
+      ->willReturnCallback(function (...$args) use (&$callSequence) {
+        $expectedArgs = array_shift($callSequence);
+        $this->assertEquals($expectedArgs, $args);
+      });
 
     $this->runEnsureTablesTest($schema);
   }
@@ -154,34 +159,38 @@ public function testEnsureTablesExist() {
       ]);
     $schema->expects($this->exactly(3))
       ->method('addField')
-      ->withConsecutive(
-        [
-          'migrate_map_sql_idmap_test', 'rollback_action', [
-            'type' => 'int',
-            'size' => 'tiny',
-            'unsigned' => TRUE,
-            'not null' => TRUE,
-            'default' => 0,
-            'description' => 'Flag indicating what to do for this item on rollback',
+      ->willReturnCallback(function (...$args) {
+        static $callSequence = [
+          [
+            'migrate_map_sql_idmap_test', 'rollback_action', [
+              'type' => 'int',
+              'size' => 'tiny',
+              'unsigned' => TRUE,
+              'not null' => TRUE,
+              'default' => 0,
+              'description' => 'Flag indicating what to do for this item on rollback',
+            ],
           ],
-        ],
-        [
-          'migrate_map_sql_idmap_test', 'hash', [
-            'type' => 'varchar',
-            'length' => '64',
-            'not null' => FALSE,
-            'description' => 'Hash of source row data, for detecting changes',
+          [
+            'migrate_map_sql_idmap_test', 'hash', [
+              'type' => 'varchar',
+              'length' => '64',
+              'not null' => FALSE,
+              'description' => 'Hash of source row data, for detecting changes',
+            ],
           ],
-        ],
-        [
-          'migrate_map_sql_idmap_test', 'source_ids_hash', [
-            'type' => 'varchar',
-            'length' => '64',
-            'not null' => TRUE,
-            'description' => 'Hash of source ids. Used as primary key',
+          [
+            'migrate_map_sql_idmap_test', 'source_ids_hash', [
+              'type' => 'varchar',
+              'length' => '64',
+              'not null' => TRUE,
+              'description' => 'Hash of source ids. Used as primary key',
+            ],
           ],
-        ],
-      );
+        ];
+        $expectedArgs = array_shift($callSequence);
+        $this->assertSame($expectedArgs, $args);
+      });
 
     $this->runEnsureTablesTest($schema);
   }
diff --git a/core/modules/pgsql/tests/src/Unit/SchemaTest.php b/core/modules/pgsql/tests/src/Unit/SchemaTest.php
index 3b9192fdea..30d347738e 100644
--- a/core/modules/pgsql/tests/src/Unit/SchemaTest.php
+++ b/core/modules/pgsql/tests/src/Unit/SchemaTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\pgsql\Unit;
 
+use Drupal\Core\Database\StatementInterface;
 use Drupal\pgsql\Driver\Database\pgsql\Schema;
 use Drupal\Tests\UnitTestCase;
 
@@ -48,21 +49,22 @@ public function testComputedConstraintName($table_name, $name, $expected) {
     $max_identifier_length = 63;
     $schema = new Schema($this->connection);
 
-    $statement = $this->createMock('\Drupal\Core\Database\StatementInterface');
+    $statement = $this->createMock(StatementInterface::class);
     $statement->expects($this->any())
       ->method('fetchField')
       ->willReturn($max_identifier_length);
 
+    $callSequence = [
+      [[$this->anything(), $this->anything(), $this->anything()], $statement],
+      [["SELECT 1 FROM pg_constraint WHERE conname = '{$expected}'", $this->anything(), $this->anything()], $this->createMock(StatementInterface::class)],
+    ];
     $this->connection->expects($this->exactly(2))
       ->method('query')
-      ->withConsecutive(
-        [$this->anything()],
-        ["SELECT 1 FROM pg_constraint WHERE conname = '$expected'"],
-      )
-      ->willReturnOnConsecutiveCalls(
-        $statement,
-        $this->createMock('\Drupal\Core\Database\StatementInterface'),
-      );
+      ->willReturnCallback(function (...$args) use (&$callSequence) {
+        [$expectedArgs, $return] = array_shift($callSequence);
+        $this->assertEquals($expectedArgs, $args);
+        return $return;
+      });
 
     $schema->constraintExists($table_name, $name);
   }
