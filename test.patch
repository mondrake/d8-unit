diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index 691a6ae84c..6469bcaabd 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -1362,6 +1362,19 @@ protected function generateTemporaryTableName() {
    */
   abstract public function driver();
 
+  /**
+   * Returns the value of a connection attribute.
+   *
+   * @param mixed $attribute
+   *   The attribute.
+   *
+   * @return mixed
+   *   The value of the attribute.
+   */
+  public function getAttribute($attribute) {
+    return $this->connection->getAttribute($attribute);
+  }
+
   /**
    * Returns the version of the database server.
    */
diff --git a/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php b/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php
index 42b5feb033..511859c668 100644
--- a/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php
+++ b/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php
@@ -46,6 +46,16 @@ class Connection extends DatabaseConnection {
    */
   const SQLSTATE_SYNTAX_ERROR = 42000;
 
+  /**
+   * A regex to detect if the current db is MariaDB.
+   *
+   * MariaDB may prefix its version string with '5.5.5-', which should be
+   * ignored.
+   *
+   * @see https://github.com/MariaDB/server/blob/f6633bf058802ad7da8196d01fd19d75c53f7274/include/mysql_com.h#L42.
+   */
+  const MARIADB_DETECTION_REGEX = '/^(?:(?:5\.5\.5-)|)(\d+\.\d+\.\d+.*)-mariadb/i';
+
   /**
    * Flag to indicate if the cleanup function in __destruct() should run.
    *
@@ -546,6 +556,15 @@ public function driver() {
     return 'mysql';
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function version() {
+    $server_version = $this->getAttribute(\PDO::ATTR_SERVER_VERSION);
+    preg_match(static::MARIADB_DETECTION_REGEX, $server_version, $matches);
+    return $matches[1] ?? $server_version;
+  }
+
   public function databaseType() {
     return 'mysql';
   }
diff --git a/core/lib/Drupal/Core/Database/Driver/mysql/Install/Tasks.php b/core/lib/Drupal/Core/Database/Driver/mysql/Install/Tasks.php
index ff441d3cae..3e07bf7816 100644
--- a/core/lib/Drupal/Core/Database/Driver/mysql/Install/Tasks.php
+++ b/core/lib/Drupal/Core/Database/Driver/mysql/Install/Tasks.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Core\Database\Driver\mysql\Install;
 
+use Drupal\Core\Database\ConnectionNotDefinedException;
 use Drupal\Core\Database\Install\Tasks as InstallTasks;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Database\Driver\mysql\Connection;
@@ -12,6 +13,16 @@
  */
 class Tasks extends InstallTasks {
 
+  /**
+   * Minimum required MySQL version.
+   */
+  const MYSQL_MINIMUM_VERSION = '5.7.0';
+
+  /**
+   * Minimum required MariaDB version.
+   */
+  const MARIADB_MINIMUM_VERSION = '10.2.0';
+
   /**
    * Minimum required MySQLnd version.
    */
@@ -39,22 +50,42 @@ public function __construct() {
     ];
   }
 
+  /**
+   * Returns the database connection.
+   *
+   * @return \Drupal\Core\Database\Driver\mysql\Connection
+   *   The database connection.
+   */
+  protected function getConnection() {
+    return Database::getConnection();
+  }
+
   /**
    * {@inheritdoc}
    */
   public function name() {
-    return t('MySQL, MariaDB, Percona Server, or equivalent');
+    try {
+      $server_version = $this->getConnection()->getAttribute(\PDO::ATTR_SERVER_VERSION);
+      preg_match(Connection::MARIADB_DETECTION_REGEX, $server_version, $matches);
+      if ($matches) {
+        return t('MariaDB');
+      }
+      else {
+        return t('MySQL, Percona Server, or equivalent');
+      }
+    }
+    catch (ConnectionNotDefinedException $e) {
+      return t('MySQL, MariaDB, Percona Server, or equivalent');
+    }
   }
 
   /**
    * {@inheritdoc}
    */
   public function minimumVersion() {
-    // This can not be increased above '5.5.5' without dropping support for all
-    // MariaDB versions. MariaDB prefixes its version string with '5.5.5-'. For
-    // more information, see
-    // https://github.com/MariaDB/server/blob/f6633bf058802ad7da8196d01fd19d75c53f7274/include/mysql_com.h#L42.
-    return '5.5.3';
+    $server_version = $this->getConnection()->getAttribute(\PDO::ATTR_SERVER_VERSION);
+    preg_match(Connection::MARIADB_DETECTION_REGEX, $server_version, $matches);
+    return $matches ? static::MARIADB_MINIMUM_VERSION : static::MYSQL_MINIMUM_VERSION;
   }
 
   /**
diff --git a/core/tests/Drupal/Tests/Core/Database/Driver/mysql/ConnectionTest.php b/core/tests/Drupal/Tests/Core/Database/Driver/mysql/ConnectionTest.php
new file mode 100644
index 0000000000..fe3e40b748
--- /dev/null
+++ b/core/tests/Drupal/Tests/Core/Database/Driver/mysql/ConnectionTest.php
@@ -0,0 +1,136 @@
+<?php
+
+namespace Drupal\Tests\Core\Database\Driver\mysql;
+
+use Drupal\Core\Database\ConnectionNotDefinedException;
+use Drupal\Core\Database\Driver\mysql\Connection;
+use Drupal\Core\Database\Driver\mysql\Install\Tasks;
+use Drupal\Tests\UnitTestCase;
+
+/**
+ * Tests MySql database connections.
+ *
+ * @coversDefaultClass \Drupal\Core\Database\Driver\mysql\Connection
+ * @group Database
+ */
+class ConnectionTest extends UnitTestCase {
+
+  /**
+   * @covers ::version
+   * @covers \Drupal\Core\Database\Driver\mysql\Install\Tasks::minimumVersion
+   * @covers \Drupal\Core\Database\Driver\mysql\Install\Tasks::name
+   * @dataProvider providerTestVersion
+   */
+  public function testVersion(string $version_string, string $expected_version, string $expected_name, string $expected_minimum_version) {
+    $connection = $this->getMockBuilder(Connection::class)
+      ->disableOriginalConstructor()
+      ->setMethods(['getAttribute'])
+      ->getMock();
+    $connection->expects($this->exactly(3))
+      ->method('getAttribute')
+      ->will($this->returnValue($version_string));
+
+    $this->assertSame($expected_version, $connection->version());
+
+    $tasks = $this->getMockBuilder(Tasks::class)
+      ->setMethods(['getConnection'])
+      ->getMock();
+    $tasks->expects($this->exactly(2))
+      ->method('getConnection')
+      ->will($this->returnValue($connection));
+
+    $this->assertEquals($expected_name, $tasks->name());
+    $this->assertEquals($expected_minimum_version, $tasks->minimumVersion());
+  }
+
+  /**
+   * Provides test data for testVersion.
+   *
+   * @return array
+   */
+  public function providerTestVersion() {
+    return [
+      [
+        '10.2.0-MariaDB',
+        '10.2.0-MariaDB',
+        'MariaDB',
+        Tasks::MARIADB_MINIMUM_VERSION,
+      ],
+      [
+        '10.2.1-MARIADB',
+        '10.2.1-MARIADB',
+        'MariaDB',
+        Tasks::MARIADB_MINIMUM_VERSION,
+      ],
+      [
+        '10.2.2-alphaX-MARIADB',
+        '10.2.2-alphaX-MARIADB',
+        'MariaDB',
+        Tasks::MARIADB_MINIMUM_VERSION,
+      ],
+      [
+        '5.5.5-10.2.20-MariaDB-1:10.2.20+maria~bionic',
+        '10.2.20-MariaDB-1:10.2.20+maria~bionic',
+        'MariaDB',
+        Tasks::MARIADB_MINIMUM_VERSION,
+      ],
+      [
+        '5.5.5-10.2.20-notMariaDB',
+        '5.5.5-10.2.20-notMariaDB',
+        'MySQL, Percona Server, or equivalent',
+        Tasks::MYSQL_MINIMUM_VERSION,
+      ],
+      [
+        '5.5.5',
+        '5.5.5',
+        'MySQL, Percona Server, or equivalent',
+        Tasks::MYSQL_MINIMUM_VERSION,
+      ],
+      [
+        '5.5.5-',
+        '5.5.5-',
+        'MySQL, Percona Server, or equivalent',
+        Tasks::MYSQL_MINIMUM_VERSION,
+      ],
+      [
+        '5.7.28',
+        '5.7.28',
+        'MySQL, Percona Server, or equivalent',
+        Tasks::MYSQL_MINIMUM_VERSION,
+      ],
+      [
+        '5.7.28-31',
+        '5.7.28-31',
+        'MySQL, Percona Server, or equivalent',
+        Tasks::MYSQL_MINIMUM_VERSION,
+      ],
+      [
+        '5.5.5-10.3.22-MariaDB-0+deb10u1',
+        '10.3.22-MariaDB-0+deb10u1',
+        'MariaDB',
+        Tasks::MARIADB_MINIMUM_VERSION,
+      ],
+      [
+        '5.5.5-10.3.22-buzz+-MariaDB-0+deb10u1',
+        '10.3.22-buzz+-MariaDB-0+deb10u1',
+        'MariaDB',
+        Tasks::MARIADB_MINIMUM_VERSION,
+      ],
+    ];
+  }
+
+  /**
+   * @covers \Drupal\Core\Database\Driver\mysql\Install\Tasks::name
+   */
+  public function testTasksNameWithNoConnection() {
+    $tasks = $this->getMockBuilder(Tasks::class)
+      ->setMethods(['getConnection'])
+      ->getMock();
+    $tasks->expects($this->once())
+      ->method('getConnection')
+      ->willThrowException(new ConnectionNotDefinedException());
+
+    $this->assertEquals('MySQL, MariaDB, Percona Server, or equivalent', $tasks->name());
+  }
+
+}
