diff --git a/core/modules/inline_form_errors/tests/src/Unit/FormErrorHandlerTest.php b/core/modules/inline_form_errors/tests/src/Unit/FormErrorHandlerTest.php
index 962f107955..7e3acc4180 100644
--- a/core/modules/inline_form_errors/tests/src/Unit/FormErrorHandlerTest.php
+++ b/core/modules/inline_form_errors/tests/src/Unit/FormErrorHandlerTest.php
@@ -118,14 +118,17 @@ protected function setUp(): void {
    * @covers ::setElementErrorsFromFormState
    */
   public function testErrorMessagesInline() {
+    $addErrorCallSequence = [
+      [['no title given', FALSE]],
+      [['element is invisible', FALSE]],
+      [['this missing element is invalid', FALSE]],
+      [['3 errors have been found: <ul-comma-list-mock><li-mock>Test 1</li-mock><li-mock>Test 2 &amp; a half</li-mock><li-mock>Test 3</li-mock></ul-comma-list-mock>', FALSE]],
+    ];
     $this->messenger->expects($this->exactly(4))
       ->method('addError')
-      ->withConsecutive(
-        ['no title given', FALSE],
-        ['element is invisible', FALSE],
-        ['this missing element is invalid', FALSE],
-        ['3 errors have been found: <ul-comma-list-mock><li-mock>Test 1</li-mock><li-mock>Test 2 &amp; a half</li-mock><li-mock>Test 3</li-mock></ul-comma-list-mock>', FALSE],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$addErrorCallSequence): void {
+        $this->consecutiveCallsCallback($addErrorCallSequence, $args);
+      });
 
     $this->renderer->expects($this->once())
       ->method('renderPlain')
@@ -162,17 +165,20 @@ public function testErrorMessagesInline() {
    */
   public function testErrorMessagesNotInline() {
     // Asserts all messages are summarized.
+    $addMessageCallSequence = [
+      [['invalid', 'error', FALSE]],
+      [['invalid', 'error', FALSE]],
+      [['invalid', 'error', FALSE]],
+      [['no error message', 'error', FALSE]],
+      [['no title given', 'error', FALSE]],
+      [['element is invisible', 'error', FALSE]],
+      [['this missing element is invalid', 'error', FALSE]],
+    ];
     $this->messenger->expects($this->exactly(7))
       ->method('addMessage')
-      ->withConsecutive(
-        ['invalid', 'error', FALSE],
-        ['invalid', 'error', FALSE],
-        ['invalid', 'error', FALSE],
-        ['no error message', 'error', FALSE],
-        ['no title given', 'error', FALSE],
-        ['element is invisible', 'error', FALSE],
-        ['this missing element is invalid', 'error', FALSE],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$addMessageCallSequence): void {
+        $this->consecutiveCallsCallback($addMessageCallSequence, $args);
+      });
 
     $this->renderer->expects($this->never())
       ->method('renderPlain');
diff --git a/core/modules/migrate/tests/src/Unit/MigrateExecutableMemoryExceededTest.php b/core/modules/migrate/tests/src/Unit/MigrateExecutableMemoryExceededTest.php
index acf3e64c09..1c1bd3c0c9 100644
--- a/core/modules/migrate/tests/src/Unit/MigrateExecutableMemoryExceededTest.php
+++ b/core/modules/migrate/tests/src/Unit/MigrateExecutableMemoryExceededTest.php
@@ -78,20 +78,27 @@ protected function runMemoryExceededTest($message, $memory_exceeded, $memory_usa
     $this->executable->setMemoryUsage($memory_usage_first ?: $this->memoryLimit, $memory_usage_second ?: $this->memoryLimit);
     $this->executable->setMemoryThreshold(0.85);
     if ($message) {
-      $this->executable->message->expects($this->exactly(2))
-        ->method('display')
-        ->withConsecutive(
+      $callSequence = [
+        [
           [
             $this->callback(function ($subject) {
               return mb_stripos((string) $subject, 'reclaiming memory') !== FALSE;
             }),
           ],
+        ],
+        [
           [
             $this->callback(function ($subject) use ($message) {
               return mb_stripos((string) $subject, $message) !== FALSE;
             }),
           ],
-        );
+        ],
+      ];
+      $this->executable->message->expects($this->exactly(2))
+        ->method('display')
+        ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+          $this->consecutiveCallsCallback($callSequence, $args);
+        });
     }
     else {
       $this->executable->message->expects($this->never())
diff --git a/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapEnsureTablesTest.php b/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapEnsureTablesTest.php
index f4a4dc2596..3fd2545f8a 100644
--- a/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapEnsureTablesTest.php
+++ b/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapEnsureTablesTest.php
@@ -26,8 +26,8 @@ class MigrateSqlIdMapEnsureTablesTest extends MigrateTestCase {
   public function testEnsureTablesNotExist() {
     $fields['source_ids_hash'] = [
       'type' => 'varchar',
-      'length' => 64,
-      'not null' => 1,
+      'length' => '64',
+      'not null' => TRUE,
       'description' => 'Hash of source ids. Used as primary key',
     ];
     $fields['sourceid1'] = [
@@ -91,8 +91,8 @@ public function testEnsureTablesNotExist() {
     ];
     $fields['source_ids_hash'] = [
       'type' => 'varchar',
-      'length' => 64,
-      'not null' => 1,
+      'length' => '64',
+      'not null' => TRUE,
       'description' => 'Hash of source ids. Used as primary key',
     ];
     $fields['level'] = [
@@ -124,12 +124,16 @@ public function testEnsureTablesNotExist() {
         ['migrate_map_sql_idmap_test', FALSE],
         ['migrate_message_sql_idmap_test', FALSE],
       ]);
+
+    $callSequence = [
+      [['migrate_map_sql_idmap_test', $map_table_schema]],
+      [['migrate_message_sql_idmap_test', $table_schema]],
+    ];
     $schema->expects($this->exactly(2))
       ->method('createTable')
-      ->withConsecutive(
-        ['migrate_map_sql_idmap_test', $map_table_schema],
-        ['migrate_message_sql_idmap_test', $table_schema],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $this->runEnsureTablesTest($schema);
   }
@@ -152,36 +156,36 @@ public function testEnsureTablesExist() {
         ['migrate_map_sql_idmap_test', 'hash', FALSE],
         ['migrate_map_sql_idmap_test', 'source_ids_hash', FALSE],
       ]);
+    $rollbackFieldSpec = [
+      'type' => 'int',
+      'size' => 'tiny',
+      'unsigned' => TRUE,
+      'not null' => TRUE,
+      'default' => 0,
+      'description' => 'Flag indicating what to do for this item on rollback',
+    ];
+    $hashFieldSpec = [
+      'type' => 'varchar',
+      'length' => '64',
+      'not null' => FALSE,
+      'description' => 'Hash of source row data, for detecting changes',
+    ];
+    $sourceIdsHashFieldSpec = [
+      'type' => 'varchar',
+      'length' => '64',
+      'not null' => TRUE,
+      'description' => 'Hash of source ids. Used as primary key',
+    ];
+    $callSequence = [
+      [['migrate_map_sql_idmap_test', 'rollback_action', $rollbackFieldSpec]],
+      [['migrate_map_sql_idmap_test', 'hash', $hashFieldSpec]],
+      [['migrate_map_sql_idmap_test', 'source_ids_hash', $sourceIdsHashFieldSpec]],
+    ];
     $schema->expects($this->exactly(3))
       ->method('addField')
-      ->withConsecutive(
-        [
-          'migrate_map_sql_idmap_test', 'rollback_action', [
-            'type' => 'int',
-            'size' => 'tiny',
-            'unsigned' => TRUE,
-            'not null' => TRUE,
-            'default' => 0,
-            'description' => 'Flag indicating what to do for this item on rollback',
-          ],
-        ],
-        [
-          'migrate_map_sql_idmap_test', 'hash', [
-            'type' => 'varchar',
-            'length' => '64',
-            'not null' => FALSE,
-            'description' => 'Hash of source row data, for detecting changes',
-          ],
-        ],
-        [
-          'migrate_map_sql_idmap_test', 'source_ids_hash', [
-            'type' => 'varchar',
-            'length' => '64',
-            'not null' => TRUE,
-            'description' => 'Hash of source ids. Used as primary key',
-          ],
-        ],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $this->runEnsureTablesTest($schema);
   }
diff --git a/core/modules/pgsql/tests/src/Unit/SchemaTest.php b/core/modules/pgsql/tests/src/Unit/SchemaTest.php
index 3b9192fdea..1cac9516d9 100644
--- a/core/modules/pgsql/tests/src/Unit/SchemaTest.php
+++ b/core/modules/pgsql/tests/src/Unit/SchemaTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\pgsql\Unit;
 
+use Drupal\Core\Database\StatementInterface;
 use Drupal\pgsql\Driver\Database\pgsql\Schema;
 use Drupal\Tests\UnitTestCase;
 
@@ -48,21 +49,20 @@ public function testComputedConstraintName($table_name, $name, $expected) {
     $max_identifier_length = 63;
     $schema = new Schema($this->connection);
 
-    $statement = $this->createMock('\Drupal\Core\Database\StatementInterface');
+    $statement = $this->createMock(StatementInterface::class);
     $statement->expects($this->any())
       ->method('fetchField')
       ->willReturn($max_identifier_length);
 
+    $callSequence = [
+      [[$this->anything()], $statement],
+      [["SELECT 1 FROM pg_constraint WHERE conname = '{$expected}'"], $this->createMock(StatementInterface::class)],
+    ];
     $this->connection->expects($this->exactly(2))
       ->method('query')
-      ->withConsecutive(
-        [$this->anything()],
-        ["SELECT 1 FROM pg_constraint WHERE conname = '$expected'"],
-      )
-      ->willReturnOnConsecutiveCalls(
-        $statement,
-        $this->createMock('\Drupal\Core\Database\StatementInterface'),
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): StatementInterface {
+        return $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $schema->constraintExists($table_name, $name);
   }
diff --git a/core/modules/serialization/tests/src/Unit/Normalizer/EntityNormalizerTest.php b/core/modules/serialization/tests/src/Unit/Normalizer/EntityNormalizerTest.php
index 28403d6b05..2f3ea3b481 100644
--- a/core/modules/serialization/tests/src/Unit/Normalizer/EntityNormalizerTest.php
+++ b/core/modules/serialization/tests/src/Unit/Normalizer/EntityNormalizerTest.php
@@ -96,12 +96,15 @@ public function testNormalize() {
       ->disableOriginalConstructor()
       ->onlyMethods(['normalize'])
       ->getMock();
+    $callSequence = [
+      [[$list_item_1, 'test_format']],
+      [[$list_item_2, 'test_format']],
+    ];
     $serializer->expects($this->exactly(2))
       ->method('normalize')
-      ->withConsecutive(
-        [$list_item_1, 'test_format'],
-        [$list_item_2, 'test_format'],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $this->entityNormalizer->setSerializer($serializer);
 
@@ -226,12 +229,15 @@ public function testDenormalizeWithValidBundle() {
       ->disableOriginalConstructor()
       ->onlyMethods(['denormalize'])
       ->getMock();
+    $callSequence = [
+      [['value_1', get_class($key_1), NULL, ['entity_type' => 'test', 'target_instance' => $key_1]]],
+      [['value_2', get_class($key_2), NULL, ['entity_type' => 'test', 'target_instance' => $key_2]]],
+    ];
     $serializer->expects($this->exactly(2))
       ->method('denormalize')
-      ->withConsecutive(
-        ['value_1', get_class($key_1), NULL, ['target_instance' => $key_1, 'entity_type' => 'test']],
-        ['value_2', get_class($key_2), NULL, ['target_instance' => $key_2, 'entity_type' => 'test']],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $this->entityNormalizer->setSerializer($serializer);
 
@@ -379,12 +385,15 @@ public function testDenormalizeWithNoBundle() {
       ->disableOriginalConstructor()
       ->onlyMethods(['denormalize'])
       ->getMock();
+    $callSequence = [
+      [['value_1', get_class($key_1), NULL, ['entity_type' => 'test', 'target_instance' => $key_1]]],
+      [['value_2', get_class($key_2), NULL, ['entity_type' => 'test', 'target_instance' => $key_2]]],
+    ];
     $serializer->expects($this->exactly(2))
       ->method('denormalize')
-      ->withConsecutive(
-        ['value_1', get_class($key_1), NULL, ['target_instance' => $key_1, 'entity_type' => 'test']],
-        ['value_2', get_class($key_2), NULL, ['target_instance' => $key_2, 'entity_type' => 'test']],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $this->entityNormalizer->setSerializer($serializer);
 
diff --git a/core/modules/system/tests/src/Kernel/System/CronQueueTest.php b/core/modules/system/tests/src/Kernel/System/CronQueueTest.php
index abedf8b4b5..a403c43b7b 100644
--- a/core/modules/system/tests/src/Kernel/System/CronQueueTest.php
+++ b/core/modules/system/tests/src/Kernel/System/CronQueueTest.php
@@ -173,23 +173,29 @@ public function testLeaseTime() {
    * @see \Drupal\cron_queue_test\Plugin\QueueWorker\CronQueueTestException
    */
   public function testUncaughtExceptions() {
-    $this->logger->expects($this->atLeast(2))
-      ->method('log')
-      ->withConsecutive(
+    $callSequence = [
+      [
         [
-          $this->equalTo(RfcLogLevel::ERROR),
-          $this->equalTo('%type: @message in %function (line %line of %file).'),
+          RfcLogLevel::ERROR,
+          '%type: @message in %function (line %line of %file).',
           $this->callback(function ($args) {
             return $args['@message'] === 'That is not supposed to happen.' &&
               $args['exception'] instanceof \Exception;
           }),
         ],
+      ],
+      [
         [
-          $this->equalTo(RfcLogLevel::INFO),
-          $this->equalTo('Cron run completed.'),
-          $this->anything(),
+          RfcLogLevel::INFO,
+          'Cron run completed.',
         ],
-      );
+      ],
+    ];
+    $this->logger->expects($this->atLeast(2))
+      ->method('log')
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     // Get the queue to test the normal Exception.
     $queue = $this->container->get('queue')->get(CronQueueTestException::PLUGIN_ID);
@@ -226,22 +232,28 @@ public function testUncaughtExceptions() {
    * @covers \Drupal\Core\Queue\SuspendQueueException
    */
   public function testSuspendQueueException(): void {
-    $this->logger->expects($this->atLeast(2))
-      ->method('log')
-      ->withConsecutive(
+    $callSequence = [
+      [
         [
-          $this->equalTo(RfcLogLevel::DEBUG),
-          $this->equalTo('A worker for @queue queue suspended further processing of the queue.'),
+          RfcLogLevel::DEBUG,
+          'A worker for @queue queue suspended further processing of the queue.',
           $this->callback(function ($args) {
             return $args['@queue'] === CronQueueTestSuspendQueue::PLUGIN_ID;
           }),
         ],
+      ],
+      [
         [
-          $this->equalTo(RfcLogLevel::INFO),
-          $this->equalTo('Cron run completed.'),
-          $this->anything(),
+          RfcLogLevel::INFO,
+          'Cron run completed.',
         ],
-      );
+      ],
+    ];
+    $this->logger->expects($this->atLeast(2))
+      ->method('log')
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     // Get the queue to test the specific SuspendQueueException.
     $queue = \Drupal::queue(CronQueueTestSuspendQueue::PLUGIN_ID);
diff --git a/core/modules/views/tests/src/Unit/ViewsDataTest.php b/core/modules/views/tests/src/Unit/ViewsDataTest.php
index b382c427cd..4504de9c8c 100644
--- a/core/modules/views/tests/src/Unit/ViewsDataTest.php
+++ b/core/modules/views/tests/src/Unit/ViewsDataTest.php
@@ -216,25 +216,31 @@ public function testFullAndTableGetCache() {
       ->method('alter')
       ->with('views_data', $expected_views_data);
 
+    $callSequence = [
+      [['views_data:en']],
+      [["views_data:$random_table_name:en"]],
+      [['views_data:en']],
+      [["views_data:$random_table_name:en"]],
+    ];
     // The cache should only be called once (before the clear() call) as get
     // will get all table data in the first get().
     $this->cacheBackend->expects($this->exactly(4))
       ->method('get')
-      ->withConsecutive(
-        ['views_data:en'],
-        ["views_data:$random_table_name:en"],
-        ['views_data:en'],
-        ["views_data:$random_table_name:en"],
-      )
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      })
       ->willReturn(FALSE);
+    $callSequence = [
+      [['views_data:en', $expected_views_data]],
+      [["views_data:$random_table_name:en", []]],
+      [['views_data:en', $expected_views_data]],
+      [["views_data:$random_table_name:en", []]],
+    ];
     $this->cacheBackend->expects($this->exactly(4))
       ->method('set')
-      ->withConsecutive(
-        ['views_data:en', $expected_views_data],
-        ["views_data:$random_table_name:en", []],
-        ['views_data:en', $expected_views_data],
-        ["views_data:$random_table_name:en", []],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
     $this->cacheTagsInvalidator->expects($this->once())
       ->method('invalidateTags')
       ->with(['views_data']);
@@ -301,12 +307,15 @@ public function testSingleTableGetCache() {
       ->method('alter')
       ->with('views_data', $this->viewsDataWithProvider());
 
+    $callSequence = [
+      [["views_data:$table_name:en"]],
+      [['views_data:en']],
+    ];
     $this->cacheBackend->expects($this->exactly(2))
       ->method('get')
-      ->withConsecutive(
-        ["views_data:$table_name:en"],
-        ['views_data:en'],
-      )
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      })
       ->willReturn(FALSE);
 
     $views_data = $this->viewsData->get($table_name);
@@ -335,12 +344,15 @@ public function testNonExistingTableGetCache() {
       ->method('alter')
       ->with('views_data', $this->viewsDataWithProvider());
 
+    $callSequence = [
+      [["views_data:$random_table_name:en"]],
+      [['views_data:en']],
+    ];
     $this->cacheBackend->expects($this->exactly(2))
       ->method('get')
-      ->withConsecutive(
-        ["views_data:$random_table_name:en"],
-        ['views_data:en'],
-      )
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      })
       ->willReturn(FALSE);
 
     // All views data should be requested on the first try.
@@ -360,18 +372,24 @@ public function testCacheCallsWithSameTableMultipleTimes() {
 
     $this->setupMockedModuleHandler();
 
+    $callSequenceGet = [
+      [['views_data:views_test_data:en']],
+      [['views_data:en']],
+    ];
     $this->cacheBackend->expects($this->exactly(2))
       ->method('get')
-      ->withConsecutive(
-        ['views_data:views_test_data:en'],
-        ['views_data:en'],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequenceGet): void {
+        $this->consecutiveCallsCallback($callSequenceGet, $args);
+      });
+    $callSequenceSet = [
+      [['views_data:en', $expected_views_data]],
+      [['views_data:views_test_data:en', $expected_views_data['views_test_data']]],
+    ];
     $this->cacheBackend->expects($this->exactly(2))
       ->method('set')
-      ->withConsecutive(
-        ['views_data:en', $expected_views_data],
-        ['views_data:views_test_data:en', $expected_views_data['views_test_data']],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequenceSet): void {
+        $this->consecutiveCallsCallback($callSequenceSet, $args);
+      });
 
     // Request the same table 5 times. The caches are empty at this point, so
     // what will happen is that it will first check for a cache entry for the
@@ -428,12 +446,15 @@ public function testCacheCallsWithWarmCacheAndDifferentTable() {
       ->method('invokeAllWith');
 
     // Setup a warm cache backend for a single table.
+    $callSequence = [
+      [['views_data:views_test_data_2:en']],
+      [['views_data:en']],
+    ];
     $this->cacheBackend->expects($this->exactly(2))
       ->method('get')
-      ->withConsecutive(
-        ['views_data:views_test_data_2:en'],
-        ['views_data:en'],
-      )
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      })
       ->willReturnOnConsecutiveCalls(
         FALSE,
         (object) ['data' => $expected_views_data],
@@ -466,13 +487,16 @@ public function testCacheCallsWithWarmCacheAndInvalidTable() {
     $this->moduleHandler->expects($this->never())
       ->method('invokeAllWith');
 
-    // Setup a warm cache backend for a single table.
+    // Set up a warm cache backend for a single table.
+    $callSequence = [
+      [["views_data:$non_existing_table:en"]],
+      [['views_data:en']],
+    ];
     $this->cacheBackend->expects($this->exactly(2))
       ->method('get')
-      ->withConsecutive(
-        ["views_data:$non_existing_table:en"],
-        ['views_data:en'],
-      )
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      })
       ->willReturnOnConsecutiveCalls(
         FALSE,
         (object) ['data' => $expected_views_data],
@@ -585,24 +609,30 @@ public function testCacheCallsWithoutWarmCacheAndGetMultipleTables() {
     $table_name_2 = 'views_test_data_2';
 
     // Setup a warm cache backend for all table data, but not single tables.
+    $callSequence = [
+      [["views_data:$table_name:en"]],
+      [['views_data:en']],
+      [["views_data:$table_name_2:en"]],
+    ];
     $this->cacheBackend->expects($this->exactly(3))
       ->method('get')
-      ->withConsecutive(
-        ["views_data:$table_name:en"],
-        ['views_data:en'],
-        ["views_data:$table_name_2:en"],
-      )
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      })
       ->willReturnOnConsecutiveCalls(
         FALSE,
         (object) ['data' => $expected_views_data],
         FALSE,
       );
+    $callSequence = [
+      [["views_data:$table_name:en", $expected_views_data[$table_name]]],
+      [["views_data:$table_name_2:en", $expected_views_data[$table_name_2]]],
+    ];
     $this->cacheBackend->expects($this->exactly(2))
       ->method('set')
-      ->withConsecutive(
-        ["views_data:$table_name:en", $expected_views_data[$table_name]],
-        ["views_data:$table_name_2:en", $expected_views_data[$table_name_2]],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $this->assertSame($expected_views_data[$table_name], $this->viewsData->get($table_name));
     $this->assertSame($expected_views_data[$table_name_2], $this->viewsData->get($table_name_2));
diff --git a/core/phpstan-baseline.neon b/core/phpstan-baseline.neon
index 79b7404a57..3cb056ccbc 100644
--- a/core/phpstan-baseline.neon
+++ b/core/phpstan-baseline.neon
@@ -1605,11 +1605,6 @@ parameters:
 			count: 1
 			path: modules/image/tests/src/Functional/ImageStyleFlushTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 2
-			path: modules/inline_form_errors/tests/src/Unit/FormErrorHandlerTest.php
-
 		-
 			message: "#^Variable \\$reason in empty\\(\\) always exists and is not falsy\\.$#"
 			count: 1
@@ -1909,11 +1904,6 @@ parameters:
 			count: 1
 			path: modules/migrate/tests/src/Kernel/MigrateTestBase.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 2
-			path: modules/migrate/tests/src/Unit/MigrateSqlIdMapEnsureTablesTest.php
-
 		-
 			message: """
 				#^Call to deprecated method loadRevision\\(\\) of class Drupal\\\\Core\\\\Entity\\\\EntityStorageInterface\\:
@@ -2260,11 +2250,6 @@ parameters:
 			count: 1
 			path: modules/pgsql/src/Update10101.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: modules/pgsql/tests/src/Unit/SchemaTest.php
-
 		-
 			message: "#^Variable \\$responsive_image_styles in empty\\(\\) always exists and is not falsy\\.$#"
 			count: 1
@@ -2330,11 +2315,6 @@ parameters:
 			count: 1
 			path: modules/serialization/src/Normalizer/EntityNormalizer.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 3
-			path: modules/serialization/tests/src/Unit/Normalizer/EntityNormalizerTest.php
-
 		-
 			message: "#^Method Drupal\\\\shortcut\\\\Form\\\\SetCustomize\\:\\:save\\(\\) should return int but return statement is missing\\.$#"
 			count: 1
@@ -2474,11 +2454,6 @@ parameters:
 			count: 2
 			path: modules/system/tests/src/Functional/Theme/ThemeUiTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 2
-			path: modules/system/tests/src/Kernel/System/CronQueueTest.php
-
 		-
 			message: "#^Call to deprecated constant REQUEST_TIME\\: Deprecated in drupal\\:8\\.3\\.0 and is removed from drupal\\:11\\.0\\.0\\. Use \\\\Drupal\\:\\:time\\(\\)\\-\\>getRequestTime\\(\\); $#"
 			count: 1
@@ -3038,11 +3013,6 @@ parameters:
 			count: 2
 			path: modules/views/tests/src/Kernel/RenderCacheIntegrationTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 10
-			path: modules/views/tests/src/Unit/ViewsDataTest.php
-
 		-
 			message: "#^Variable \\$relationship_handler in empty\\(\\) always exists and is not falsy\\.$#"
 			count: 1
@@ -3596,11 +3566,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Composer/ComposerTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Cache/CacheCollectorTest.php
-
 		-
 			message: """
 				#^Call to deprecated method expectError\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
@@ -3609,11 +3574,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Core/Config/ConfigTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 3
-			path: tests/Drupal/Tests/Core/Cron/CronSuspendQueueDelayTest.php
-
 		-
 			message: """
 				#^Call to deprecated method expectError\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
@@ -3640,11 +3600,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Core/Database/Stub/StubConnection.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 2
-			path: tests/Drupal/Tests/Core/Entity/EntityUnitTest.php
-
 		-
 			message: "#^Trying to mock an undefined method getRevisionId\\(\\) on class Drupal\\\\Tests\\\\Core\\\\Entity\\\\UrlTestEntity\\.$#"
 			count: 1
@@ -3655,16 +3610,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Core/Entity/EntityUrlTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 6
-			path: tests/Drupal/Tests/Core/Entity/KeyValueStore/KeyValueEntityStorageTest.php
-
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Entity/Sql/SqlContentEntityStorageSchemaTest.php
-
 		-
 			message: """
 				#^Call to deprecated method expectError\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
@@ -3689,21 +3634,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Core/EventSubscriber/SpecialAttributesRouteSubscriberTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Extension/ModuleHandlerTest.php
-
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Form/FormCacheTest.php
-
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Form/FormErrorHandlerTest.php
-
 		-
 			message: """
 				#^Call to deprecated method getConfig\\(\\) of class GuzzleHttp\\\\Client\\:
@@ -3712,26 +3642,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Core/Http/ClientFactoryTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Menu/ContextualLinkManagerTest.php
-
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Menu/DefaultMenuLinkTreeManipulatorsTest.php
-
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 2
-			path: tests/Drupal/Tests/Core/Menu/LocalTaskManagerTest.php
-
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Menu/StaticMenuLinkOverridesTest.php
-
 		-
 			message: "#^Call to method getDefinitions\\(\\) on an unknown class Drupal\\\\Core\\\\Plugin\\\\CategorizingPluginManagerTrait\\.$#"
 			count: 1
@@ -3742,11 +3652,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Core/Plugin/CategorizingPluginManagerTraitTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Plugin/Discovery/DerivativeDiscoveryDecoratorTest.php
-
 		-
 			message: "#^Constructor of class Drupal\\\\Tests\\\\Core\\\\Plugin\\\\Discovery\\\\TestContainerDerivativeDiscovery has an unused parameter \\$example_service\\.$#"
 			count: 1
@@ -3773,11 +3678,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Core/Render/ElementTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 3
-			path: tests/Drupal/Tests/Core/Routing/RouteBuilderTest.php
-
 		-
 			message: """
 				#^Call to deprecated method expectWarning\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
@@ -3810,11 +3710,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Core/TempStore/PrivateTempStoreTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 2
-			path: tests/Drupal/Tests/Core/TempStore/PrivateTempStoreTest.php
-
 		-
 			message: """
 				#^Call to deprecated method assertObjectHasAttribute\\(\\) of class PHPUnit\\\\Framework\\\\Assert\\:
@@ -3831,11 +3726,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Core/TempStore/SharedTempStoreTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 3
-			path: tests/Drupal/Tests/Core/TempStore/SharedTempStoreTest.php
-
 		-
 			message: "#^Variable \\$value in isset\\(\\) always exists and is not nullable\\.$#"
 			count: 1
@@ -3849,11 +3739,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Core/Test/PhpUnitTestRunnerTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/UrlTest.php
-
 		-
 			message: """
 				#^Call to deprecated method getConfig\\(\\) of class GuzzleHttp\\\\ClientInterface\\:
diff --git a/core/tests/Drupal/KernelTests/KernelTestBase.php b/core/tests/Drupal/KernelTests/KernelTestBase.php
index 5544dc3247..1e4e924e65 100644
--- a/core/tests/Drupal/KernelTests/KernelTestBase.php
+++ b/core/tests/Drupal/KernelTests/KernelTestBase.php
@@ -25,6 +25,7 @@
 use Drupal\TestTools\Comparator\MarkupInterfaceComparator;
 use Drupal\TestTools\Extension\SchemaInspector;
 use Drupal\TestTools\TestVarDumper;
+use Drupal\TestTools\Trait\MockTrait;
 use PHPUnit\Framework\Exception;
 use PHPUnit\Framework\TestCase;
 use Prophecy\PhpUnit\ProphecyTrait;
@@ -88,6 +89,7 @@ abstract class KernelTestBase extends TestCase implements ServiceProviderInterfa
   use RandomGeneratorTrait;
   use ConfigTestTrait;
   use ExtensionListTestTrait;
+  use MockTrait;
   use TestRequirementsTrait;
   use PhpUnitWarnings;
   use PhpUnitCompatibilityTrait;
diff --git a/core/tests/Drupal/TestTools/Trait/MockTrait.php b/core/tests/Drupal/TestTools/Trait/MockTrait.php
new file mode 100644
index 0000000000..abc04edcf6
--- /dev/null
+++ b/core/tests/Drupal/TestTools/Trait/MockTrait.php
@@ -0,0 +1,73 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\TestTools\Trait;
+
+use PHPUnit\Framework\AssertionFailedError;
+use PHPUnit\Framework\Constraint\Constraint;
+
+/**
+ * A trait providing helper methods for mocking.
+ */
+trait MockTrait {
+
+  /**
+   * Callback for consecutive calls to mocked objects.
+   *
+   * Since the removal of InvocationMocker::withConsecutive() from PHPUnit, we
+   * can use InvocationMocker::willReturnCallback() instead, passing a stack of
+   * expected calls to mocked methods. This method provides a generic callback
+   * for the purpose, checking actual arguments against expected ones and
+   * returning a value if needed.
+   *
+   * @param array $expectedConsecutiveCalls
+   *   An array of expected arguments and return values for a stack of calls to
+   *   the method. The first element of the array contains the expected call
+   *   arguments, either concrete values or Constraint objects (could be a
+   *   partial list, in which case the actual arguments in excess of the
+   *   expected ones are ignored). The second element, if specified, is
+   *   returned by the callback when the arguments match.
+   * @param array $actualArgs
+   *   The array of arguments actually passed to the mocked object.
+   *
+   * @return mixed
+   *   The value specified by the second array item of
+   *   $expectedConsecutiveCalls. NULL if not specified.
+   */
+  protected function consecutiveCallsCallback(array &$expectedConsecutiveCalls, array $actualArgs): mixed {
+    // Return early if there are no expected calls.
+    if ($expectedConsecutiveCalls === []) {
+      return NULL;
+    }
+
+    // Get the next expected call from the stack.
+    $key = key($expectedConsecutiveCalls);
+    $call = reset($expectedConsecutiveCalls);
+    unset($expectedConsecutiveCalls[$key]);
+    $expectedArgs = $call[0];
+
+    // Check the arguments.
+    for ($i = 0; $i < count($expectedArgs); $i++) {
+      if ($expectedArgs[$i] instanceof Constraint) {
+        try {
+          $expectedArgs[$i]->evaluate($actualArgs[$i]);
+        }
+        catch (AssertionFailedError $e) {
+          throw new AssertionFailedError(sprintf('Failed argument match in consecutive call #%d, argument #%d.', $key + 1, $i + 1), $e->getCode(), $e);
+        }
+      }
+      else {
+        $this->assertEquals($expectedArgs[$i], $actualArgs[$i], sprintf('Failed argument match in consecutive call #%d, argument #%d.', $key + 1, $i + 1));
+      }
+    }
+
+    // Returns with the specified value, if defined.
+    if (array_key_exists(1, $call)) {
+      return $call[1];
+    }
+
+    return NULL;
+  }
+
+}
diff --git a/core/tests/Drupal/Tests/Core/Cache/CacheCollectorTest.php b/core/tests/Drupal/Tests/Core/Cache/CacheCollectorTest.php
index d345763c6e..738d7c2082 100644
--- a/core/tests/Drupal/Tests/Core/Cache/CacheCollectorTest.php
+++ b/core/tests/Drupal/Tests/Core/Cache/CacheCollectorTest.php
@@ -307,13 +307,15 @@ public function testUpdateCacheDelete() {
     ];
     // Set up mock expectation, on the second call the with the second argument
     // set to TRUE because we triggered a cache invalidation.
+    $callSequence = [
+      [[$this->cid], $cache],
+      [[$this->cid, TRUE], $cache],
+    ];
     $this->cacheBackend->expects($this->exactly(2))
       ->method('get')
-      ->withConsecutive(
-        [$this->cid],
-        [$this->cid, TRUE],
-      )
-      ->willReturn($cache);
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): object {
+        return $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $this->collector->delete($key);
 
diff --git a/core/tests/Drupal/Tests/Core/Cron/CronSuspendQueueDelayTest.php b/core/tests/Drupal/Tests/Core/Cron/CronSuspendQueueDelayTest.php
index 6ac8367a99..a548b76238 100644
--- a/core/tests/Drupal/Tests/Core/Cron/CronSuspendQueueDelayTest.php
+++ b/core/tests/Drupal/Tests/Core/Cron/CronSuspendQueueDelayTest.php
@@ -133,13 +133,20 @@ public function testSuspendQueue(): void {
       ->setConstructorArgs($this->cronConstructorArguments)
       ->getMock();
 
+    $callSequence = [
+      [[$this->equalTo(2000000)]],
+      [[$this->equalTo(3000000)]],
+    ];
     $cron->expects($this->exactly(2))
       ->method('usleep')
-      ->withConsecutive(
-        [$this->equalTo(2000000)],
-        [$this->equalTo(3000000)],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
+    $callSequence = [
+      [[$this->equalTo(2000000)]],
+      [[$this->equalTo(3000000)]],
+    ];
     $queueManager->expects($this->once())
       ->method('getDefinitions')
       ->willReturn([
@@ -389,19 +396,21 @@ public function testSuspendQueueOrder(): void {
         ['test_worker_d', [], $this->workerA],
       ]);
 
+    $callSequence = [
+      [[$this->equalTo('test_data_from_queue_a')]],
+      [[$this->equalTo('test_data_from_queue_b')]],
+      [[$this->equalTo('test_data_from_queue_c')]],
+      [[$this->equalTo('test_data_from_queue_d')]],
+      // Queue C is executed again, and before queue B.
+      [[$this->equalTo('test_data_from_queue_c')]],
+      // Queue B is executed again, after queue C since its delay was longer.
+      [[$this->equalTo('test_data_from_queue_b')]],
+    ];
     $this->workerA->expects($this->exactly(6))
       ->method('processItem')
-      ->withConsecutive(
-        // All queues are executed in sequence of definition:
-        [$this->equalTo('test_data_from_queue_a')],
-        [$this->equalTo('test_data_from_queue_b')],
-        [$this->equalTo('test_data_from_queue_c')],
-        [$this->equalTo('test_data_from_queue_d')],
-        // Queue C is executed again, and before queue B.
-        [$this->equalTo('test_data_from_queue_c')],
-        // Queue B is executed again, after queue C since its delay was longer.
-        [$this->equalTo('test_data_from_queue_b')],
-      )
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      })
       ->willReturnOnConsecutiveCalls(
         NULL,
         $this->throwException(new SuspendQueueException('', 0, NULL, 16.0)),
@@ -423,10 +432,9 @@ public function testSuspendQueueOrder(): void {
         return (float) $currentTime;
       });
 
-    $cron->expects($this->exactly(2))
-      ->method('usleep')
-      ->withConsecutive(
-        // Expect to wait for 8 seconds.
+    $callSequence = [
+      // Expect to wait for 8 seconds.
+      [
         [
           $this->callback(function (int $microseconds) use (&$currentTime) {
             // Accelerate time by 4 seconds.
@@ -434,10 +442,16 @@ public function testSuspendQueueOrder(): void {
             return $microseconds === 8000000;
           }),
         ],
-        // SuspendQueueException requests to delay by 16 seconds, but 4 seconds
-        // have passed above, so there are just 12 seconds remaining:
-        [$this->equalTo(12000000)],
-      );
+      ],
+      // SuspendQueueException requests to delay by 16 seconds, but 4 seconds
+      // have passed above, so there are just 12 seconds remaining:
+      [[$this->equalTo(12000000)]],
+    ];
+    $cron->expects($this->exactly(2))
+      ->method('usleep')
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $cron->run();
   }
diff --git a/core/tests/Drupal/Tests/Core/Entity/EntityUnitTest.php b/core/tests/Drupal/Tests/Core/Entity/EntityUnitTest.php
index e23eabea6c..f5d58bef28 100644
--- a/core/tests/Drupal/Tests/Core/Entity/EntityUnitTest.php
+++ b/core/tests/Drupal/Tests/Core/Entity/EntityUnitTest.php
@@ -399,22 +399,31 @@ public function testPreSave() {
    * @covers ::postSave
    */
   public function testPostSave() {
-    $this->cacheTagsInvalidator->expects($this->exactly(2))
-      ->method('invalidateTags')
-      ->withConsecutive([
+    $callSequence = [
+      [
         [
-          // List cache tag.
-          $this->entityTypeId . '_list',
+          [
+            // List cache tag.
+            $this->entityTypeId . '_list',
+          ],
         ],
       ],
       [
         [
-          // List cache tag.
-          $this->entityTypeId . '_list',
-          // Own cache tag.
-          $this->entityTypeId . ':' . $this->values['id'],
+          [
+            // List cache tag.
+            $this->entityTypeId . '_list',
+            // Own cache tag.
+            $this->entityTypeId . ':' . $this->values['id'],
+          ],
         ],
-      ]);
+      ],
+    ];
+    $this->cacheTagsInvalidator->expects($this->exactly(2))
+      ->method('invalidateTags')
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     // This method is internal, so check for errors on calling it only.
     $storage = $this->createMock('\Drupal\Core\Entity\EntityStorageInterface');
@@ -430,24 +439,33 @@ public function testPostSave() {
    * @covers ::postSave
    */
   public function testPostSaveBundle() {
-    $this->cacheTagsInvalidator->expects($this->exactly(2))
-      ->method('invalidateTags')
-      ->withConsecutive([
+    $callSequence = [
+      [
         [
-          // List cache tag.
-          $this->entityTypeId . '_list',
-          $this->entityTypeId . '_list:' . $this->entity->bundle(),
+          [
+            // List cache tag.
+            $this->entityTypeId . '_list',
+            $this->entityTypeId . '_list:' . $this->entity->bundle(),
+          ],
         ],
       ],
       [
         [
-          // List cache tag.
-          $this->entityTypeId . '_list',
-          $this->entityTypeId . '_list:' . $this->entity->bundle(),
-          // Own cache tag.
-          $this->entityTypeId . ':' . $this->values['id'],
+          [
+            // List cache tag.
+            $this->entityTypeId . '_list',
+            $this->entityTypeId . '_list:' . $this->entity->bundle(),
+            // Own cache tag.
+            $this->entityTypeId . ':' . $this->values['id'],
+          ],
         ],
-      ]);
+      ],
+    ];
+    $this->cacheTagsInvalidator->expects($this->exactly(2))
+      ->method('invalidateTags')
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $this->entityType->expects($this->atLeastOnce())
       ->method('hasKey')
diff --git a/core/tests/Drupal/Tests/Core/Entity/KeyValueStore/KeyValueEntityStorageTest.php b/core/tests/Drupal/Tests/Core/Entity/KeyValueStore/KeyValueEntityStorageTest.php
index ea94a0c07c..5d5892e573 100644
--- a/core/tests/Drupal/Tests/Core/Entity/KeyValueStore/KeyValueEntityStorageTest.php
+++ b/core/tests/Drupal/Tests/Core/Entity/KeyValueStore/KeyValueEntityStorageTest.php
@@ -156,9 +156,15 @@ public function testCreateWithPredefinedUuid() {
       ->willReturn(get_class($this->getMockEntity()));
     $this->setUpKeyValueEntityStorage();
 
+    $callSequence = [
+      [['test_entity_type_create']],
+      [['entity_create']],
+    ];
     $this->moduleHandler->expects($this->exactly(2))
       ->method('invokeAll')
-      ->withConsecutive(['test_entity_type_create'], ['entity_create']);
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
     $this->uuidService->expects($this->never())
       ->method('generate');
 
@@ -179,9 +185,15 @@ public function testCreateWithoutUuidKey() {
       ->willReturn(get_class($this->getMockEntity()));
     $this->setUpKeyValueEntityStorage(NULL);
 
+    $callSequence = [
+      [['test_entity_type_create']],
+      [['entity_create']],
+    ];
     $this->moduleHandler->expects($this->exactly(2))
       ->method('invokeAll')
-      ->withConsecutive(['test_entity_type_create'], ['entity_create']);
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
     $this->uuidService->expects($this->never())
       ->method('generate');
 
@@ -204,9 +216,15 @@ public function testCreate() {
       ->willReturn(get_class($entity));
     $this->setUpKeyValueEntityStorage();
 
+    $callSequence = [
+      [['test_entity_type_create']],
+      [['entity_create']],
+    ];
     $this->moduleHandler->expects($this->exactly(2))
       ->method('invokeAll')
-      ->withConsecutive(['test_entity_type_create'], ['entity_create']);
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
     $this->uuidService->expects($this->once())
       ->method('generate')
       ->willReturn('bar');
@@ -246,14 +264,17 @@ public function testSaveInsert(EntityInterface $entity) {
       ->method('toArray')
       ->willReturn($expected);
 
+    $callSequence = [
+      [['test_entity_type_presave']],
+      [['entity_presave']],
+      [['test_entity_type_insert']],
+      [['entity_insert']],
+    ];
     $this->moduleHandler->expects($this->exactly(4))
       ->method('invokeAll')
-      ->withConsecutive(
-        ['test_entity_type_presave'],
-        ['entity_presave'],
-        ['test_entity_type_insert'],
-        ['entity_insert'],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
     $this->keyValueStore->expects($this->once())
       ->method('set')
       ->with('foo', $expected);
@@ -290,14 +311,17 @@ public function testSaveUpdate(EntityInterface $entity) {
       ->willReturn([['id' => 'foo']]);
     $this->keyValueStore->expects($this->never())
       ->method('delete');
+    $callSequence = [
+      [['test_entity_type_presave']],
+      [['entity_presave']],
+      [['test_entity_type_update']],
+      [['entity_update']],
+    ];
     $this->moduleHandler->expects($this->exactly(4))
       ->method('invokeAll')
-      ->withConsecutive(
-        ['test_entity_type_presave'],
-        ['entity_presave'],
-        ['test_entity_type_update'],
-        ['entity_update'],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
     $this->keyValueStore->expects($this->once())
       ->method('set')
       ->with('foo', $expected);
@@ -572,12 +596,15 @@ public function testDelete() {
     $entities['bar'] = $this->getMockEntity(EntityBaseTest::class, [['id' => 'bar']]);
     $this->setUpKeyValueEntityStorage();
 
+    $callSequence = [
+      [['test_entity_type_predelete']],
+      [['entity_predelete']],
+    ];
     $this->moduleHandler->expects($this->exactly(8))
       ->method('invokeAll')
-      ->withConsecutive(
-        ['test_entity_type_predelete'],
-        ['entity_predelete'],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $this->keyValueStore->expects($this->once())
       ->method('deleteMultiple')
diff --git a/core/tests/Drupal/Tests/Core/Entity/Sql/SqlContentEntityStorageSchemaTest.php b/core/tests/Drupal/Tests/Core/Entity/Sql/SqlContentEntityStorageSchemaTest.php
index ac6941caa3..3f9e205db9 100644
--- a/core/tests/Drupal/Tests/Core/Entity/Sql/SqlContentEntityStorageSchemaTest.php
+++ b/core/tests/Drupal/Tests/Core/Entity/Sql/SqlContentEntityStorageSchemaTest.php
@@ -1534,12 +1534,15 @@ public function testonEntityTypeUpdateWithNewIndex() {
       ]);
 
     // The original indexes should be dropped before the new one is added.
+    $callSequence = [
+      [['entity_test', 'entity_test__b588603cb9']],
+      [['entity_test', 'entity_test__removed_field']],
+    ];
     $this->dbSchemaHandler->expects($this->exactly(3))
       ->method('dropIndex')
-      ->withConsecutive(
-        ['entity_test', 'entity_test__b588603cb9'],
-        ['entity_test', 'entity_test__removed_field'],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $this->dbSchemaHandler->expects($this->atLeastOnce())
       ->method('fieldExists')
diff --git a/core/tests/Drupal/Tests/Core/Extension/ModuleHandlerTest.php b/core/tests/Drupal/Tests/Core/Extension/ModuleHandlerTest.php
index c989ea870d..1292f929da 100644
--- a/core/tests/Drupal/Tests/Core/Extension/ModuleHandlerTest.php
+++ b/core/tests/Drupal/Tests/Core/Extension/ModuleHandlerTest.php
@@ -113,15 +113,18 @@ public function testModuleReloading() {
       ])
       ->onlyMethods(['load'])
       ->getMock();
+    $callSequence = [
+      // First reload.
+      [['module_handler_test']],
+      // Second reload.
+      [['module_handler_test']],
+      [['module_handler_test_added']],
+    ];
     $module_handler->expects($this->exactly(3))
       ->method('load')
-      ->withConsecutive(
-        // First reload.
-        ['module_handler_test'],
-        // Second reload.
-        ['module_handler_test'],
-        ['module_handler_test_added'],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
     $module_handler->reload();
     $module_handler->addModule('module_handler_test_added', 'core/tests/Drupal/Tests/Core/Extension/modules/module_handler_test_added');
     $module_handler->reload();
diff --git a/core/tests/Drupal/Tests/Core/Form/FormCacheTest.php b/core/tests/Drupal/Tests/Core/Form/FormCacheTest.php
index 765fcfe281..a758dc8b2e 100644
--- a/core/tests/Drupal/Tests/Core/Form/FormCacheTest.php
+++ b/core/tests/Drupal/Tests/Core/Form/FormCacheTest.php
@@ -311,12 +311,15 @@ public function testLoadCachedFormStateWithFiles() {
         ],
       ],
     ];
+    $callSequence = [
+      [['a_module', 'the_type', 'some_name']],
+      [['another_module', 'inc', 'another_module']],
+    ];
     $this->moduleHandler->expects($this->exactly(2))
       ->method('loadInclude')
-      ->withConsecutive(
-        ['a_module', 'the_type', 'some_name'],
-        ['another_module', 'inc', 'another_module'],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
     $this->formStateCacheStore->expects($this->once())
       ->method('get')
       ->with($form_build_id)
diff --git a/core/tests/Drupal/Tests/Core/Form/FormErrorHandlerTest.php b/core/tests/Drupal/Tests/Core/Form/FormErrorHandlerTest.php
index 237050d1b7..9bd995cc4d 100644
--- a/core/tests/Drupal/Tests/Core/Form/FormErrorHandlerTest.php
+++ b/core/tests/Drupal/Tests/Core/Form/FormErrorHandlerTest.php
@@ -48,16 +48,19 @@ protected function setUp(): void {
    * @covers ::displayErrorMessages
    */
   public function testDisplayErrorMessages() {
+    $callSequence = [
+      [['invalid', 'error']],
+      [['invalid', 'error']],
+      [['invalid', 'error']],
+      [['no title given', 'error']],
+      [['element is invisible', 'error']],
+      [['this missing element is invalid', 'error']],
+    ];
     $this->messenger->expects($this->exactly(6))
       ->method('addMessage')
-      ->withConsecutive(
-        ['invalid', 'error'],
-        ['invalid', 'error'],
-        ['invalid', 'error'],
-        ['no title given', 'error'],
-        ['element is invisible', 'error'],
-        ['this missing element is invalid', 'error'],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $form = [
       '#parents' => [],
diff --git a/core/tests/Drupal/Tests/Core/Menu/ContextualLinkManagerTest.php b/core/tests/Drupal/Tests/Core/Menu/ContextualLinkManagerTest.php
index 55087bb87b..e2ee2cb1d9 100644
--- a/core/tests/Drupal/Tests/Core/Menu/ContextualLinkManagerTest.php
+++ b/core/tests/Drupal/Tests/Core/Menu/ContextualLinkManagerTest.php
@@ -245,12 +245,15 @@ public function testGetContextualLinksArrayByGroup() {
       ->method('checkNamedRoute')
       ->willReturn(AccessResult::allowed());
 
+    $callSequence = [
+      [['contextual_links_plugins']],
+      [['contextual_links', new Count(2), 'group1', ['key' => 'value']]],
+    ];
     $this->moduleHandler->expects($this->exactly(2))
       ->method('alter')
-      ->withConsecutive(
-        ['contextual_links_plugins'],
-        ['contextual_links', new Count(2), 'group1', ['key' => 'value']],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $result = $this->contextualLinkManager->getContextualLinksArrayByGroup('group1', ['key' => 'value']);
     $this->assertCount(2, $result);
diff --git a/core/tests/Drupal/Tests/Core/Menu/DefaultMenuLinkTreeManipulatorsTest.php b/core/tests/Drupal/Tests/Core/Menu/DefaultMenuLinkTreeManipulatorsTest.php
index 05bf621082..91bb8a16d8 100644
--- a/core/tests/Drupal/Tests/Core/Menu/DefaultMenuLinkTreeManipulatorsTest.php
+++ b/core/tests/Drupal/Tests/Core/Menu/DefaultMenuLinkTreeManipulatorsTest.php
@@ -323,12 +323,15 @@ public function testCheckNodeAccess() {
     $query->expects($this->once())
       ->method('accessCheck')
       ->with(TRUE);
+    $callSequence = [
+      [['nid', [1, 2, 3, 4]]],
+      [['status', NodeInterface::PUBLISHED]],
+    ];
     $query->expects($this->exactly(2))
       ->method('condition')
-      ->withConsecutive(
-        ['nid', [1, 2, 3, 4]],
-        ['status', NodeInterface::PUBLISHED],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
     $query->expects($this->once())
       ->method('execute')
       ->willReturn([1, 2, 4]);
diff --git a/core/tests/Drupal/Tests/Core/Menu/LocalTaskManagerTest.php b/core/tests/Drupal/Tests/Core/Menu/LocalTaskManagerTest.php
index dfb55098a3..1a33b70360 100644
--- a/core/tests/Drupal/Tests/Core/Menu/LocalTaskManagerTest.php
+++ b/core/tests/Drupal/Tests/Core/Menu/LocalTaskManagerTest.php
@@ -178,18 +178,24 @@ public function testGetLocalTaskForRouteWithEmptyCache() {
 
     $result = $this->getLocalTasksForRouteResult($mock_plugin);
 
+    $callSequenceGet = [
+      [['local_task_plugins:en:menu_local_task_test_tasks_view']],
+      [['local_task_plugins:en']],
+    ];
     $this->cacheBackend->expects($this->exactly(2))
       ->method('get')
-      ->withConsecutive(
-        ['local_task_plugins:en:menu_local_task_test_tasks_view'],
-        ['local_task_plugins:en'],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequenceGet): void {
+        $this->consecutiveCallsCallback($callSequenceGet, $args);
+      });
+    $callSequenceSet = [
+      [['local_task_plugins:en', $definitions, Cache::PERMANENT]],
+      [['local_task_plugins:en:menu_local_task_test_tasks_view', $this->getLocalTasksCache(), Cache::PERMANENT, ['local_task']]],
+    ];
     $this->cacheBackend->expects($this->exactly(2))
       ->method('set')
-      ->withConsecutive(
-        ['local_task_plugins:en', $definitions, Cache::PERMANENT],
-        ['local_task_plugins:en:menu_local_task_test_tasks_view', $this->getLocalTasksCache(), Cache::PERMANENT, ['local_task']],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequenceSet): void {
+        $this->consecutiveCallsCallback($callSequenceSet, $args);
+      });
 
     $local_tasks = $this->manager->getLocalTasksForRoute('menu_local_task_test_tasks_view');
     $this->assertEquals($result, $local_tasks);
diff --git a/core/tests/Drupal/Tests/Core/Menu/StaticMenuLinkOverridesTest.php b/core/tests/Drupal/Tests/Core/Menu/StaticMenuLinkOverridesTest.php
index a440d539d3..b3f0983bea 100644
--- a/core/tests/Drupal/Tests/Core/Menu/StaticMenuLinkOverridesTest.php
+++ b/core/tests/Drupal/Tests/Core/Menu/StaticMenuLinkOverridesTest.php
@@ -108,12 +108,15 @@ public function testSaveOverride() {
         $definition_save_1['definitions'],
         $definition_save_1['definitions'],
       );
+    $callSequence = [
+      [['definitions', $definition_save_1['definitions']]],
+      [['definitions', $definitions_save_2['definitions']]],
+    ];
     $config->expects($this->exactly(2))
       ->method('set')
-      ->withConsecutive(
-        ['definitions', $definition_save_1['definitions']],
-        ['definitions', $definitions_save_2['definitions']],
-      )
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequenceGet): void {
+        $this->consecutiveCallsCallback($callSequenceGet, $args);
+      })
       ->will($this->returnSelf());
     $config->expects($this->exactly(2))
       ->method('save');
diff --git a/core/tests/Drupal/Tests/Core/Plugin/Discovery/DerivativeDiscoveryDecoratorTest.php b/core/tests/Drupal/Tests/Core/Plugin/Discovery/DerivativeDiscoveryDecoratorTest.php
index e3b45e77d0..c7832a097b 100644
--- a/core/tests/Drupal/Tests/Core/Plugin/Discovery/DerivativeDiscoveryDecoratorTest.php
+++ b/core/tests/Drupal/Tests/Core/Plugin/Discovery/DerivativeDiscoveryDecoratorTest.php
@@ -241,12 +241,15 @@ public function testSingleExistingDerivative() {
       'null_value' => NULL,
     ];
 
+    $callSequence = [
+      [['non_container_aware_discovery:test_discovery_1']],
+      [['non_container_aware_discovery']],
+    ];
     $this->discoveryMain->expects($this->exactly(2))
       ->method('getDefinition')
-      ->withConsecutive(
-        ['non_container_aware_discovery:test_discovery_1'],
-        ['non_container_aware_discovery'],
-      )
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      })
       ->willReturnOnConsecutiveCalls(
         $derivative_definition,
         $base_definition,
diff --git a/core/tests/Drupal/Tests/Core/Routing/RouteBuilderTest.php b/core/tests/Drupal/Tests/Core/Routing/RouteBuilderTest.php
index a9986d5506..e650e9acbf 100644
--- a/core/tests/Drupal/Tests/Core/Routing/RouteBuilderTest.php
+++ b/core/tests/Drupal/Tests/Core/Routing/RouteBuilderTest.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\Tests\Core\Routing;
 
+use Drupal\Component\EventDispatcher\Event;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\Discovery\YamlDiscovery;
 use Drupal\Core\Routing\RouteBuilder;
@@ -164,12 +165,15 @@ public function testRebuildWithStaticModuleRoutes() {
     $route_build_event = new RouteBuildEvent($route_collection);
 
     // Ensure that the alter routes events are fired.
+    $callSequence = [
+      [[$route_build_event, RoutingEvents::DYNAMIC], $this->createMock(Event::class)],
+      [[$route_build_event, RoutingEvents::ALTER], $this->createMock(Event::class)],
+    ];
     $this->dispatcher->expects($this->atLeast(2))
       ->method('dispatch')
-      ->withConsecutive(
-        [$route_build_event, RoutingEvents::DYNAMIC],
-        [$route_build_event, RoutingEvents::ALTER],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     // Ensure that access checks are set.
     $this->checkProvider->expects($this->once())
@@ -234,12 +238,15 @@ public function testRebuildWithProviderBasedRoutes() {
     $route_build_event = new RouteBuildEvent($route_collection_filled);
 
     // Ensure that the alter routes events are fired.
+    $callSequence = [
+      [[$route_build_event, RoutingEvents::DYNAMIC], $this->createMock(Event::class)],
+      [[$route_build_event, RoutingEvents::ALTER], $this->createMock(Event::class)],
+    ];
     $this->dispatcher->expects($this->atLeast(2))
       ->method('dispatch')
-      ->withConsecutive(
-        [$route_build_event, RoutingEvents::DYNAMIC],
-        [$route_build_event, RoutingEvents::ALTER],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     // Ensure that access checks are set.
     $this->checkProvider->expects($this->once())
@@ -316,12 +323,15 @@ public function testRebuildWithOverriddenRouteClass() {
     $route_collection_filled->add('test_route.override', new Route('/test_route_override', [], [], ['compiler_class' => 'Class\Does\Not\Exist']));
     $route_collection_filled->add('test_route', new Route('/test_route', [], [], ['compiler_class' => RouteCompiler::class]));
     $route_build_event = new RouteBuildEvent($route_collection_filled);
+    $callSequence = [
+      [[$route_build_event, RoutingEvents::DYNAMIC], $this->createMock(Event::class)],
+      [[$route_build_event, RoutingEvents::ALTER], $this->createMock(Event::class)],
+    ];
     $this->dispatcher->expects($this->atLeast(2))
       ->method('dispatch')
-      ->withConsecutive(
-        [$route_build_event, RoutingEvents::DYNAMIC],
-        [$route_build_event, RoutingEvents::ALTER],
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): void {
+        $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $this->assertTrue($this->routeBuilder->rebuild());
   }
diff --git a/core/tests/Drupal/Tests/Core/TempStore/PrivateTempStoreTest.php b/core/tests/Drupal/Tests/Core/TempStore/PrivateTempStoreTest.php
index efc048cf36..3454ecbb36 100644
--- a/core/tests/Drupal/Tests/Core/TempStore/PrivateTempStoreTest.php
+++ b/core/tests/Drupal/Tests/Core/TempStore/PrivateTempStoreTest.php
@@ -100,18 +100,16 @@ protected function setUp(): void {
    * @covers ::get
    */
   public function testGet() {
+    $callSequence = [
+      [['1:test_2'], FALSE],
+      [['1:test'], $this->ownObject],
+      [['1:test'], $this->otherObject],
+    ];
     $this->keyValue->expects($this->exactly(3))
       ->method('get')
-      ->withConsecutive(
-        ['1:test_2'],
-        ['1:test'],
-        ['1:test'],
-      )
-      ->willReturnOnConsecutiveCalls(
-        FALSE,
-        $this->ownObject,
-        $this->otherObject,
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): object|FALSE {
+        return $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $this->assertNull($this->tempStore->get('test_2'));
     $this->assertSame($this->ownObject->data, $this->tempStore->get('test'));
@@ -246,18 +244,16 @@ public function testDelete() {
       ->with('1:test_2')
       ->willReturn(TRUE);
 
+    $callSequence = [
+      [['1:test_1'], FALSE],
+      [['1:test_2'], $this->ownObject],
+      [['1:test_3'], $this->otherObject],
+    ];
     $this->keyValue->expects($this->exactly(3))
       ->method('get')
-      ->withConsecutive(
-        ['1:test_1'],
-        ['1:test_2'],
-        ['1:test_3'],
-      )
-      ->willReturnOnConsecutiveCalls(
-        FALSE,
-        $this->ownObject,
-        $this->otherObject,
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): object|FALSE {
+        return $this->consecutiveCallsCallback($callSequence, $args);
+      });
     $this->keyValue->expects($this->once())
       ->method('delete')
       ->with('1:test_2');
diff --git a/core/tests/Drupal/Tests/Core/TempStore/SharedTempStoreTest.php b/core/tests/Drupal/Tests/Core/TempStore/SharedTempStoreTest.php
index bffe8fa0a6..6474c4c8ac 100644
--- a/core/tests/Drupal/Tests/Core/TempStore/SharedTempStoreTest.php
+++ b/core/tests/Drupal/Tests/Core/TempStore/SharedTempStoreTest.php
@@ -99,16 +99,15 @@ protected function setUp(): void {
    * @covers ::get
    */
   public function testGet() {
+    $callSequence = [
+      [['test_2'], FALSE],
+      [['test'], $this->ownObject],
+    ];
     $this->keyValue->expects($this->exactly(2))
       ->method('get')
-      ->withConsecutive(
-        ['test_2'],
-        ['test'],
-      )
-      ->willReturnOnConsecutiveCalls(
-        FALSE,
-        $this->ownObject,
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): object|FALSE {
+        return $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $this->assertNull($this->tempStore->get('test_2'));
     $this->assertSame($this->ownObject->data, $this->tempStore->get('test'));
@@ -120,18 +119,16 @@ public function testGet() {
    * @covers ::getIfOwner
    */
   public function testGetIfOwner() {
+    $callSequence = [
+      [['test_2'], FALSE],
+      [['test'], $this->ownObject],
+      [['test'], $this->otherObject],
+    ];
     $this->keyValue->expects($this->exactly(3))
       ->method('get')
-      ->withConsecutive(
-        ['test_2'],
-        ['test'],
-        ['test'],
-      )
-      ->willReturnOnConsecutiveCalls(
-        FALSE,
-        $this->ownObject,
-        $this->otherObject,
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): object|FALSE {
+        return $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $this->assertNull($this->tempStore->getIfOwner('test_2'));
     $this->assertSame($this->ownObject->data, $this->tempStore->getIfOwner('test'));
@@ -326,18 +323,16 @@ public function testDeleteIfOwner() {
       ->with('test_2')
       ->willReturn(TRUE);
 
+    $callSequence = [
+      [['test_1'], FALSE],
+      [['test_2'], $this->ownObject],
+      [['test_3'], $this->otherObject],
+    ];
     $this->keyValue->expects($this->exactly(3))
       ->method('get')
-      ->withConsecutive(
-        ['test_1'],
-        ['test_2'],
-        ['test_3'],
-      )
-      ->willReturnOnConsecutiveCalls(
-        FALSE,
-        $this->ownObject,
-        $this->otherObject,
-      );
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): object|FALSE {
+        return $this->consecutiveCallsCallback($callSequence, $args);
+      });
     $this->keyValue->expects($this->once())
       ->method('delete')
       ->with('test_2');
diff --git a/core/tests/Drupal/Tests/Core/UrlTest.php b/core/tests/Drupal/Tests/Core/UrlTest.php
index aa0c0cf74e..962dd5d626 100644
--- a/core/tests/Drupal/Tests/Core/UrlTest.php
+++ b/core/tests/Drupal/Tests/Core/UrlTest.php
@@ -121,23 +121,25 @@ protected function setUp(): void {
    * Tests creating a URL from a request.
    */
   public function testUrlFromRequest() {
-    $this->router->expects($this->exactly(3))
-      ->method('matchRequest')
-      ->withConsecutive(
+    $callSequence = [
+      [
         [$this->getRequestConstraint('/node')],
+        [RouteObjectInterface::ROUTE_NAME => 'view.frontpage.page_1', '_raw_variables' => new InputBag()],
+      ],
+      [
         [$this->getRequestConstraint('/node/1')],
+        [RouteObjectInterface::ROUTE_NAME => 'node_view', '_raw_variables' => new InputBag(['node' => '1'])],
+      ],
+      [
         [$this->getRequestConstraint('/node/2/edit')],
-      )
-      ->willReturnOnConsecutiveCalls([
-        RouteObjectInterface::ROUTE_NAME => 'view.frontpage.page_1',
-        '_raw_variables' => new InputBag(),
-      ], [
-        RouteObjectInterface::ROUTE_NAME => 'node_view',
-        '_raw_variables' => new InputBag(['node' => '1']),
-      ], [
-        RouteObjectInterface::ROUTE_NAME => 'node_edit',
-        '_raw_variables' => new InputBag(['node' => '2']),
-      ]);
+        [RouteObjectInterface::ROUTE_NAME => 'node_edit', '_raw_variables' => new InputBag(['node' => '2'])],
+      ],
+    ];
+    $this->router->expects($this->exactly(3))
+      ->method('matchRequest')
+      ->willReturnCallback(function (mixed ...$args) use (&$callSequence): array {
+        return $this->consecutiveCallsCallback($callSequence, $args);
+      });
 
     $urls = [];
     foreach ($this->map as $index => $values) {
diff --git a/core/tests/Drupal/Tests/MockTraitTest.php b/core/tests/Drupal/Tests/MockTraitTest.php
new file mode 100644
index 0000000000..8e07215f20
--- /dev/null
+++ b/core/tests/Drupal/Tests/MockTraitTest.php
@@ -0,0 +1,91 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Tests;
+
+use PHPUnit\Framework\AssertionFailedError;
+
+/**
+ * Tests for the MockTrait trait.
+ *
+ * @group Tests
+ */
+class MockTraitTest extends UnitTestCase {
+
+  /**
+   * Tests a successful ::consecutiveCallsCallback loop.
+   */
+  public function testConsecutiveCallsCallback(): void {
+    $callSequence = [
+      [['1:test_1'], FALSE],
+      [['1:test_2'], new \stdClass()],
+      [['1:test_3'], ['foo']],
+    ];
+    $this->assertFalse($this->consecutiveCallsCallback($callSequence, ['1:test_1']));
+    $this->assertEquals(new \stdClass(), $this->consecutiveCallsCallback($callSequence, ['1:test_2']));
+    $this->assertSame(['foo'], $this->consecutiveCallsCallback($callSequence, ['1:test_3']));
+    $this->assertEmpty($callSequence);
+  }
+
+  /**
+   * Tests a failing ::consecutiveCallsCallback loop.
+   */
+  public function testConsecutiveCallsCallbackFail(): void {
+    $callSequence = [
+      [['1:test_1'], FALSE],
+      [['1:test_2'], new \stdClass()],
+      [['1:test_3'], ['foo']],
+    ];
+    $this->assertFalse($this->consecutiveCallsCallback($callSequence, ['1:test_1']));
+    $this->assertEquals(new \stdClass(), $this->consecutiveCallsCallback($callSequence, ['1:test_2']));
+
+    $this->expectException(AssertionFailedError::class);
+    $this->expectExceptionMessage('Failed argument match in consecutive call #3, argument #1.');
+    $this->assertSame(['foo'], $this->consecutiveCallsCallback($callSequence, ['bar']));
+  }
+
+  /**
+   * Tests a successful ::consecutiveCallsCallback loop, with constraint args.
+   */
+  public function testConsecutiveCallsCallbackWithConstraintArguments(): void {
+    $callSequence = [
+      [['1:test_1'], FALSE],
+      [[$this->isType('object')], new \stdClass()],
+      [[$this->isType('string')], ['foo']],
+    ];
+    $this->assertFalse($this->consecutiveCallsCallback($callSequence, ['1:test_1']));
+    $this->assertEquals(new \stdClass(), $this->consecutiveCallsCallback($callSequence, [$this]));
+    $this->assertSame(['foo'], $this->consecutiveCallsCallback($callSequence, ['bar']));
+    $this->assertEmpty($callSequence);
+  }
+
+  /**
+   * Tests a failing ::consecutiveCallsCallback loop, with constraint args.
+   */
+  public function testConsecutiveCallsCallbackWithConstraintArgumentsFail(): void {
+    $callSequence = [
+      [['1:test_1'], FALSE],
+      [[$this->isType('object')], new \stdClass()],
+      [[$this->isType('string')], ['foo']],
+    ];
+    $this->assertFalse($this->consecutiveCallsCallback($callSequence, ['1:test_1']));
+    $this->assertEquals(new \stdClass(), $this->consecutiveCallsCallback($callSequence, [$this]));
+
+    $this->expectException(AssertionFailedError::class);
+    $this->expectExceptionMessage('Failed argument match in consecutive call #3, argument #1.');
+    $this->assertSame(['foo'], $this->consecutiveCallsCallback($callSequence, [$this]));
+  }
+
+  /**
+   * Tests a ::consecutiveCallsCallback loop with more calls than defined.
+   */
+  public function testConsecutiveCallsCallbackExhaustedExpectations(): void {
+    $callSequence = [
+      [['1:test_1'], FALSE],
+    ];
+    $this->assertFalse($this->consecutiveCallsCallback($callSequence, ['1:test_1']));
+    $this->assertNull($this->consecutiveCallsCallback($callSequence, ['1:test_2']));
+  }
+
+}
diff --git a/core/tests/Drupal/Tests/UnitTestCase.php b/core/tests/Drupal/Tests/UnitTestCase.php
index 0e1773deac..02949fcc31 100644
--- a/core/tests/Drupal/Tests/UnitTestCase.php
+++ b/core/tests/Drupal/Tests/UnitTestCase.php
@@ -10,6 +10,7 @@
 use Drupal\Core\StringTranslation\PluralTranslatableMarkup;
 use Drupal\Tests\Traits\PhpUnitWarnings;
 use Drupal\TestTools\TestVarDumper;
+use Drupal\TestTools\Trait\MockTrait;
 use PHPUnit\Framework\TestCase;
 use Prophecy\PhpUnit\ProphecyTrait;
 use Symfony\Component\VarDumper\VarDumper;
@@ -25,6 +26,7 @@
  */
 abstract class UnitTestCase extends TestCase {
 
+  use MockTrait;
   use PhpUnitWarnings;
   use PhpUnitCompatibilityTrait;
   use ProphecyTrait;
