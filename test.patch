diff --git a/core/tests/Drupal/FunctionalTests/WebAssertTest.php b/core/tests/Drupal/FunctionalTests/WebAssertTest.php
index b829eee898..7cc284b53f 100644
--- a/core/tests/Drupal/FunctionalTests/WebAssertTest.php
+++ b/core/tests/Drupal/FunctionalTests/WebAssertTest.php
@@ -3,6 +3,7 @@
 namespace Drupal\FunctionalTests;
 
 use Drupal\Tests\BrowserTestBase;
+use Behat\Mink\Exception\ExpectationException;
 use PHPUnit\Framework\AssertionFailedError;
 
 /**
@@ -18,6 +19,7 @@ class WebAssertTest extends BrowserTestBase {
    */
   protected static $modules = [
     'test_page_test',
+    'dblog',
   ];
 
   /**
@@ -53,4 +55,31 @@ public function testResponseHeaderDoesNotExist() {
     $this->assertSession()->responseHeaderDoesNotExist('Null-Header');
   }
 
+  /**
+   * Tests that addressEquals distinguishes querystrings.
+   *
+   * @covers ::addressEquals
+   */
+  public function testAddressEqualsDistinguishesQuerystrings() {
+    // Insert 300 log messages.
+    $logger = $this->container->get('logger.factory')->get('pager_test');
+    for ($i = 0; $i < 300; $i++) {
+      $logger->debug($this->randomString());
+    }
+
+    // Get to the db log report.
+    $this->drupalLogin($this->drupalCreateUser([
+      'access site reports',
+    ]));
+    $this->drupalGet('admin/reports/dblog');
+    $this->assertSession()->addressEquals('admin/reports/dblog');
+
+    // Go to the second page, we expect the querystring to change to '?page=1'.
+    $this->drupalGet('admin/reports/dblog', ['query' => ['page' => 1]]);
+    $this->assertSession()->addressEquals('admin/reports/dblog?page=1');
+    $this->expectException(ExpectationException::class);
+    $this->expectExceptionMessage('xx');
+    $this->assertSession()->addressEquals('admin/reports/dblog');
+  }
+
 }
diff --git a/core/tests/Drupal/Tests/WebAssert.php b/core/tests/Drupal/Tests/WebAssert.php
index 16324fa121..5b809a61ae 100644
--- a/core/tests/Drupal/Tests/WebAssert.php
+++ b/core/tests/Drupal/Tests/WebAssert.php
@@ -55,7 +55,13 @@ protected function cleanUrl($url) {
     if (parse_url($url, PHP_URL_HOST) === NULL && strpos($url, '/') !== 0) {
       $url = "/$url";
     }
-    return parent::cleanUrl($url);
+
+    $parts = parse_url($url);
+    $fragment = empty($parts['fragment']) ? '' : '#' . $parts['fragment'];
+    $query = empty($parts['query']) ? '' : '?' . $parts['query'];
+    $path = empty($parts['path']) ? '/' : $parts['path'];
+
+    return preg_replace('/^\/[^\.\/]+\.php\//', '/', $path) . $query . $fragment;
   }
 
   /**
