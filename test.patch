diff --git a/core/modules/system/src/Plugin/ImageToolkit/Operation/gd/Rotate.php b/core/modules/system/src/Plugin/ImageToolkit/Operation/gd/Rotate.php
index e567ea43f2..978e3bc07b 100644
--- a/core/modules/system/src/Plugin/ImageToolkit/Operation/gd/Rotate.php
+++ b/core/modules/system/src/Plugin/ImageToolkit/Operation/gd/Rotate.php
@@ -37,12 +37,37 @@ protected function arguments() {
    * {@inheritdoc}
    */
   protected function validateArguments(array $arguments) {
+    // Fail when degrees are not numeric.
+    if (!is_numeric($arguments['degrees'])) {
+      throw new \InvalidArgumentException('Invalid degrees (' . $arguments['degrees'] . ') specified for the image \'rotate\' operation. It should be numeric.');
+    }
+
+    // Assure background color is a valid hex string.
+    if ($arguments['background'] && !Color::validateHex($arguments['background'])) {
+      throw new \InvalidArgumentException('Invalid background color (' . $arguments['background'] . ') specified for the image \'rotate\' operation. It should be a hex string.');
+    }
+
+    return $arguments;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function execute(array $arguments) {
+    // PHP installations using non-bundled GD do not have imagerotate.
+    if (!function_exists('imagerotate')) {
+      $this->logger->notice('The image %file could not be rotated because the imagerotate() function is not available in this PHP installation.', [
+        '%file' => $this->getToolkit()->getSource(),
+      ]);
+      return FALSE;
+    }
+
     // PHP 5.5 GD bug: https://bugs.php.net/bug.php?id=65148: To prevent buggy
     // behavior on negative multiples of 90 degrees we convert any negative
     // angle to a positive one between 0 and 360 degrees.
     $arguments['degrees'] -= floor($arguments['degrees'] / 360) * 360;
 
-    // Validate or set background color argument.
+    // Set background color argument.
     if (!empty($arguments['background'])) {
       // Validate the background color: Color::hexToRgb does so for us.
       $background = Color::hexToRgb($arguments['background']) + ['alpha' => 0];
@@ -80,19 +105,6 @@ protected function validateArguments(array $arguments) {
       }
     }
 
-    return $arguments;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  protected function execute(array $arguments) {
-    // PHP installations using non-bundled GD do not have imagerotate.
-    if (!function_exists('imagerotate')) {
-      $this->logger->notice('The image %file could not be rotated because the imagerotate() function is not available in this PHP installation.', ['%file' => $this->getToolkit()->getSource()]);
-      return FALSE;
-    }
-
     // Stores the original GD resource.
     $original_res = $this->getToolkit()->getResource();
 
diff --git a/core/tests/Drupal/Tests/Core/Image/ImageTest.php b/core/tests/Drupal/Tests/Core/Image/ImageTest.php
index ece030d519..85c705d10c 100644
--- a/core/tests/Drupal/Tests/Core/Image/ImageTest.php
+++ b/core/tests/Drupal/Tests/Core/Image/ImageTest.php
@@ -2,14 +2,20 @@
 
 namespace Drupal\Tests\Core\Image;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Image\Image;
 use Drupal\Core\ImageToolkit\ImageToolkitInterface;
+use Drupal\Core\ImageToolkit\ImageToolkitOperationManagerInterface;
+use Drupal\Core\StreamWrapper\StreamWrapperManagerInterface;
+use Drupal\system\Plugin\ImageToolkit\GDToolkit;
 use Drupal\Tests\UnitTestCase;
+use Psr\Log\LoggerInterface;
 
 /**
  * Tests the image class.
  *
+ * @coversDefaultClass \Drupal\Core\Image\Image
  * @requires extension gd
  * @group Image
  */
@@ -60,11 +66,19 @@ protected function setUp(): void {
    * @return \PHPUnit\Framework\MockObject\MockObject
    */
   protected function getToolkitMock(array $stubs = []) {
-    $mock_builder = $this->getMockBuilder('Drupal\system\Plugin\ImageToolkit\GDToolkit');
+    $mock_builder = $this->getMockBuilder(GDToolkit::class);
     $stubs = array_merge(['getPluginId', 'save'], $stubs);
     return $mock_builder
-      ->disableOriginalConstructor()
-      ->onlyMethods($stubs)
+      ->setConstructorArgs([
+        [],
+        '',
+        [],
+        $this->createMock(ImageToolkitOperationManagerInterface::class),
+        $this->createMock(LoggerInterface::class),
+        $this->createMock(ConfigFactoryInterface::class),
+        $this->createMock(StreamWrapperManagerInterface::class),
+      ])
+      ->setMethods($stubs)
       ->getMock();
   }
 
@@ -473,8 +487,48 @@ public function testRotate() {
       ->method('execute')
       ->will($this->returnArgument(0));
 
-    $ret = $this->image->rotate(90);
+    $ret = $this->image->rotate(90, '#00FF00');
     $this->assertEquals(90, $ret['degrees']);
+    $this->assertEquals('#00FF00', $ret['background']);
+  }
+
+  /**
+   * @covers ::rotate
+   */
+  public function testRotateNoRounding() {
+    $this->getTestImageForOperation('Rotate');
+    $this->toolkitOperation->expects($this->once())
+      ->method('execute')
+      ->will($this->returnArgument(0));
+
+    $ret = $this->image->rotate(14.7);
+    $this->assertEquals(14.7, $ret['degrees']);
+  }
+
+  /**
+   * @covers ::rotate
+   */
+  public function testRotateWrongDegreesParameter() {
+    $this->getTestImageForOperation('Rotate');
+    $this->toolkitOperation->expects($this->never())
+      ->method('execute');
+
+    $ret = $this->image->rotate('foo');
+    // The rotate should fail.
+    $this->assertFalse($ret);
+  }
+
+  /**
+   * @covers ::rotate
+   */
+  public function testRotateWrongBackgroundColorParameter() {
+    $this->getTestImageForOperation('Rotate');
+    $this->toolkitOperation->expects($this->never())
+      ->method('execute');
+
+    $ret = $this->image->rotate(46, '#foo');
+    // The rotate should fail.
+    $this->assertFalse($ret);
   }
 
 }
