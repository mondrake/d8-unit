diff --git a/core/lib/Drupal/Core/Entity/EntityViewBuilder.php b/core/lib/Drupal/Core/Entity/EntityViewBuilder.php
index 8233d69c6d..5a855ff365 100644
--- a/core/lib/Drupal/Core/Entity/EntityViewBuilder.php
+++ b/core/lib/Drupal/Core/Entity/EntityViewBuilder.php
@@ -446,18 +446,23 @@ protected function isViewModeCacheable($view_mode) {
   public function viewField(FieldItemListInterface $items, $display_options = []) {
     /** @var \Drupal\Core\Entity\FieldableEntityInterface $entity */
     $entity = $items->getEntity();
+dump([__METHOD__, 'a', $display_options, get_class($entity)]);
     // If the field is not translatable and the entity is, then the field item
     // list always points to the default translation of the entity. Attempt to
     // fetch it in the current content language.
     if (!$items->getFieldDefinition()->isTranslatable() && $entity->isTranslatable()) {
       $entity = $this->entityRepository->getTranslationFromContext($entity);
+dump([__METHOD__, 'b', $display_options, get_class($entity)]);
     }
 
     $field_name = $items->getFieldDefinition()->getName();
+dump([__METHOD__, 'c', $field_name]);
     $display = $this->getSingleFieldDisplay($entity, $field_name, $display_options);
+dump([__METHOD__, 'd', get_class($display)]);
 
     $output = [];
     $build = $display->build($entity);
+dump([__METHOD__, 'e', $build[$field_name]]);
     if (isset($build[$field_name])) {
       $output = $build[$field_name];
     }
diff --git a/core/lib/Drupal/Core/Field/FieldItemList.php b/core/lib/Drupal/Core/Field/FieldItemList.php
index f73872baa3..0782262fbd 100644
--- a/core/lib/Drupal/Core/Field/FieldItemList.php
+++ b/core/lib/Drupal/Core/Field/FieldItemList.php
@@ -240,6 +240,7 @@ protected function delegateMethod($method) {
    */
   public function view($display_options = []) {
     $view_builder = \Drupal::entityTypeManager()->getViewBuilder($this->getEntity()->getEntityTypeId());
+dump([__METHOD__, get_class($view_builder)]);
     return $view_builder->viewField($this, $display_options);
   }
 
diff --git a/core/modules/views/src/Plugin/views/field/EntityField.php b/core/modules/views/src/Plugin/views/field/EntityField.php
index 2c1d76ce44..9e7a2fff4a 100644
--- a/core/modules/views/src/Plugin/views/field/EntityField.php
+++ b/core/modules/views/src/Plugin/views/field/EntityField.php
@@ -850,9 +850,11 @@ public function getItems(ResultRow $values) {
       // Optional relationships may not provide an entity at all. So we can't
       // use createEntityForGroupBy() for those rows.
       if ($entity = $this->getEntity($values)) {
+dump([__METHOD__, 'a - entity', $this->definition['field_name'], isset($entity->{$this->definition['field_name']}) ? get_class($entity->{$this->definition['field_name']}) : 'error!!']);
         $entity = $this->createEntityForGroupBy($entity, $values);
         // Some bundles might not have a specific field, in which case the faked
         // entity doesn't have it either.
+dump([__METHOD__, 'b - forgroupby', $this->definition['field_name'], isset($entity->{$this->definition['field_name']}) ? get_class($entity->{$this->definition['field_name']}) : 'error!!']);
         $build_list = isset($entity->{$this->definition['field_name']}) ? $entity->{$this->definition['field_name']}->view($display) : NULL;
       }
       else {
@@ -860,6 +862,8 @@ public function getItems(ResultRow $values) {
       }
     }
 
+dump([__METHOD__, 'd', $build_list]);
+
     if (!$build_list) {
       return [];
     }
diff --git a/core/modules/views/src/Plugin/views/field/FieldPluginBase.php b/core/modules/views/src/Plugin/views/field/FieldPluginBase.php
index e49be3139d..60edc7fb6c 100644
--- a/core/modules/views/src/Plugin/views/field/FieldPluginBase.php
+++ b/core/modules/views/src/Plugin/views/field/FieldPluginBase.php
@@ -1165,6 +1165,7 @@ public function advancedRender(ResultRow $values) {
     }
     if ($this->allowAdvancedRender() && $this instanceof MultiItemsFieldHandlerInterface) {
       $raw_items = $this->getItems($values);
+dump([__METHOD__, 'b - raw',  $raw_items]);
       // If there are no items, set the original value to NULL.
       if (empty($raw_items)) {
         $this->original_value = NULL;
@@ -1172,6 +1173,7 @@ public function advancedRender(ResultRow $values) {
     }
     else {
       $value = $this->render($values);
+dump([__METHOD__, 'c - render', $value]);
       if (is_array($value)) {
         $value = $this->getRenderer()->render($value);
       }
@@ -1210,6 +1212,7 @@ public function advancedRender(ResultRow $values) {
       $this->last_render = $value;
     }
 
+dump([__METHOD__, 'e ** value', $this->last_render]);
     // String cast is necessary to test emptiness of MarkupInterface
     // objects.
     if (empty((string) $this->last_render)) {
diff --git a/core/modules/views/src/Plugin/views/style/StylePluginBase.php b/core/modules/views/src/Plugin/views/style/StylePluginBase.php
index f9f77169af..79b732563d 100644
--- a/core/modules/views/src/Plugin/views/style/StylePluginBase.php
+++ b/core/modules/views/src/Plugin/views/style/StylePluginBase.php
@@ -759,6 +759,7 @@ public static function trustedCallbacks() {
   public function elementPreRenderRow(array $data) {
     // Render row fields.
     foreach ($this->view->field as $id => $field) {
+dump([__METHOD__, $id, get_class($field)]);
       $data[$id] = ['#markup' => $field->theme($data['#row'])];
     }
     return $data;
diff --git a/core/modules/views/views.theme.inc b/core/modules/views/views.theme.inc
index 948f459065..8f26fff776 100644
--- a/core/modules/views/views.theme.inc
+++ b/core/modules/views/views.theme.inc
@@ -236,6 +236,7 @@ function template_preprocess_views_view_grouping(&$variables) {
  */
 function template_preprocess_views_view_field(&$variables) {
   $variables['output'] = $variables['field']->advancedRender($variables['row']);
+dump([__FUNCTION__, get_class($variables['field']), $variables['output']]);
 }
 
 /**
