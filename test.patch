diff --git a/core/modules/aggregator/aggregator.module b/core/modules/aggregator/aggregator.module
index 9e544073b01775d83722da87f109172eaae09297..04829eb0294ea6939f09c5027f4b16562ca6ac5e 100644
--- a/core/modules/aggregator/aggregator.module
+++ b/core/modules/aggregator/aggregator.module
@@ -165,7 +165,7 @@ function aggregator_cron() {
   foreach (Feed::loadMultiple($ids) as $feed) {
     if ($queue->createItem($feed)) {
       // Add timestamp to avoid queueing item more than once.
-      $feed->setQueuedTime(REQUEST_TIME);
+      $feed->setQueuedTime(\Drupal::time()->getRequestTime());
       $feed->save();
     }
   }
@@ -173,7 +173,7 @@ function aggregator_cron() {
   // Delete queued timestamp after 6 hours assuming the update has failed.
   $ids = \Drupal::entityQuery('aggregator_feed')
     ->accessCheck(FALSE)
-    ->condition('queued', REQUEST_TIME - (3600 * 6), '<')
+    ->condition('queued', \Drupal::time()->getRequestTime() - (3600 * 6), '<')
     ->execute();
 
   if ($ids) {
diff --git a/core/modules/file/file.module b/core/modules/file/file.module
index 59c5acbcc54e717e395fe3d9355c983ef0ba24e7..06549ab7daa08842db58748da5ef058e8fd5ea6c 100644
--- a/core/modules/file/file.module
+++ b/core/modules/file/file.module
@@ -648,7 +648,7 @@ function file_cron() {
     $fids = Drupal::entityQuery('file')
       ->accessCheck(FALSE)
       ->condition('status', FileInterface::STATUS_PERMANENT, '<>')
-      ->condition('changed', REQUEST_TIME - $age, '<')
+      ->condition('changed', \Drupal::time()->getRequestTime() - $age, '<')
       ->range(0, 100)
       ->execute();
     $files = $file_storage->loadMultiple($fids);
diff --git a/core/modules/history/history.module b/core/modules/history/history.module
index 02dd964fd7cd4c3904b0a248f6885626cdf1f5d2..6d7a94689b8330d7f74ce9ef4207e71add627c69 100644
--- a/core/modules/history/history.module
+++ b/core/modules/history/history.module
@@ -114,11 +114,11 @@ function history_write($nid, $account = NULL) {
         'uid' => $account->id(),
         'nid' => $nid,
       ])
-      ->fields(['timestamp' => REQUEST_TIME])
+      ->fields(['timestamp' => \Drupal::time()->getRequestTime()])
       ->execute();
     // Update static cache.
     $history = &drupal_static('history_read_multiple', []);
-    $history[$nid] = REQUEST_TIME;
+    $history[$nid] = \Drupal::time()->getRequestTime();
   }
 }
 
diff --git a/core/modules/image/image.admin.inc b/core/modules/image/image.admin.inc
index 178e5464b17dfdc83522aad15e51eab892c841be..9921e7b94b30e4c8f47a534e46f52e4cbff9b94e 100644
--- a/core/modules/image/image.admin.inc
+++ b/core/modules/image/image.admin.inc
@@ -27,7 +27,7 @@ function template_preprocess_image_style_preview(&$variables) {
   $variables['style_name'] = $style->label();
 
   // Cache bypass token.
-  $variables['cache_bypass'] = REQUEST_TIME;
+  $variables['cache_bypass'] = \Drupal::time()->getRequestTime();
 
   // Sample image info.
   $sample_width = 160;
diff --git a/core/modules/locale/locale.batch.inc b/core/modules/locale/locale.batch.inc
index 106bc62b7ae1387126213604ad4f04b77adec99d..2b956e87353f7bad8c3bef44a18e6ac730a9c539 100644
--- a/core/modules/locale/locale.batch.inc
+++ b/core/modules/locale/locale.batch.inc
@@ -119,7 +119,7 @@ function locale_translation_batch_status_finished($success, $results) {
     if (!isset($results['failed_files']) && !isset($results['files'])) {
       \Drupal::messenger()->addStatus(t('Nothing to check.'));
     }
-    \Drupal::state()->set('locale.translation_last_checked', REQUEST_TIME);
+    \Drupal::state()->set('locale.translation_last_checked', \Drupal::time()->getRequestTime());
   }
   else {
     \Drupal::messenger()->addError(t('An error occurred trying to check available interface translation updates.'));
@@ -219,7 +219,7 @@ function locale_translation_batch_fetch_import($project, $langcode, $options, &$
 function locale_translation_batch_fetch_finished($success, $results) {
   \Drupal::moduleHandler()->loadInclude('locale', 'inc', 'locale.bulk');
   if ($success) {
-    \Drupal::state()->set('locale.translation_last_checked', REQUEST_TIME);
+    \Drupal::state()->set('locale.translation_last_checked', \Drupal::time()->getRequestTime());
   }
   return locale_translate_batch_finished($success, $results);
 }
diff --git a/core/modules/locale/locale.bulk.inc b/core/modules/locale/locale.bulk.inc
index d4a68e0bf00eecf4faa621a00f43a2331e6dd37f..7c59c5fba46eda629863ad6a0a43db7bf42d9df0 100644
--- a/core/modules/locale/locale.bulk.inc
+++ b/core/modules/locale/locale.bulk.inc
@@ -282,7 +282,7 @@ function locale_translate_batch_import_save($context) {
       // translation files are not tracked and are therefore not stored in this
       // table.
       if ($file->project && $file->version) {
-        $file->last_checked = REQUEST_TIME;
+        $file->last_checked = \Drupal::time()->getRequestTime();
         locale_translation_update_file_history($file);
       }
     }
diff --git a/core/modules/locale/locale.compare.inc b/core/modules/locale/locale.compare.inc
index 9b0209fd57ac98d311bf03bd0991cb61af5e1090..a4dcf3a575ada79048968e96d66b2ba569b19761 100644
--- a/core/modules/locale/locale.compare.inc
+++ b/core/modules/locale/locale.compare.inc
@@ -191,7 +191,7 @@ function locale_translation_check_projects($projects = [], $langcodes = []) {
   else {
     // Retrieve and save the status of local translations only.
     locale_translation_check_projects_local($projects, $langcodes);
-    \Drupal::state()->set('locale.translation_last_checked', REQUEST_TIME);
+    \Drupal::state()->set('locale.translation_last_checked', \Drupal::time()->getRequestTime());
   }
 }
 
diff --git a/core/modules/locale/locale.module b/core/modules/locale/locale.module
index 1fffee3bcface91e265d0927ce67c15a96043180..267c164dc25dd43f3b79fab5e3b8070ad015de97 100644
--- a/core/modules/locale/locale.module
+++ b/core/modules/locale/locale.module
@@ -923,14 +923,14 @@ function locale_translation_status_save($project, $langcode, $type, $data) {
         if (isset($data->timestamp) && $data->timestamp) {
           if ($data->timestamp > $status[$project][$langcode]->timestamp) {
             $status[$project][$langcode]->timestamp = $data->timestamp;
-            $status[$project][$langcode]->last_checked = REQUEST_TIME;
+            $status[$project][$langcode]->last_checked = \Drupal::time()->getRequestTime();
             $status[$project][$langcode]->type = $type;
           }
         }
         break;
 
       case LOCALE_TRANSLATION_CURRENT:
-        $data->last_checked = REQUEST_TIME;
+        $data->last_checked = \Drupal::time()->getRequestTime();
         $status[$project][$langcode]->timestamp = $data->timestamp;
         $status[$project][$langcode]->last_checked = $data->last_checked;
         $status[$project][$langcode]->type = $type;
@@ -939,7 +939,7 @@ function locale_translation_status_save($project, $langcode, $type, $data) {
     }
 
     \Drupal::keyValue('locale.translation_status')->set($project, $status[$project]);
-    \Drupal::state()->set('locale.translation_last_checked', REQUEST_TIME);
+    \Drupal::state()->set('locale.translation_last_checked', \Drupal::time()->getRequestTime());
   }
 }
 
diff --git a/core/modules/locale/locale.translation.inc b/core/modules/locale/locale.translation.inc
index efd1aad13be4963b55ac02e8dab07b9789e0a2e6..b021980ed5791c364944c3f1685adc2ef5bef47a 100644
--- a/core/modules/locale/locale.translation.inc
+++ b/core/modules/locale/locale.translation.inc
@@ -331,7 +331,7 @@ function locale_cron_fill_queue() {
   $config = \Drupal::config('locale.settings');
 
   // Determine which project+language should be updated.
-  $last = REQUEST_TIME - $config->get('translation.update_interval_days') * 3600 * 24;
+  $last = \Drupal::time()->getRequestTime() - $config->get('translation.update_interval_days') * 3600 * 24;
   $projects = \Drupal::service('locale.project')->getAll();
   $projects = array_filter($projects, function ($project) {
     return $project['status'] == 1;
@@ -348,7 +348,7 @@ function locale_cron_fill_queue() {
     // Update the last_checked timestamp of the project+language that will
     // be checked for updates.
     $connection->update('locale_file')
-      ->fields(['last_checked' => REQUEST_TIME])
+      ->fields(['last_checked' => \Drupal::time()->getRequestTime()])
       ->condition('project', $file->project)
       ->condition('langcode', $file->langcode)
       ->execute();
diff --git a/core/modules/system/system.install b/core/modules/system/system.install
index b24d7d1651aefff286c7a4860ae684dd7d80e2da..acbb1a48de1e215f2b2107b9ec0fb9b0d51a5f62 100644
--- a/core/modules/system/system.install
+++ b/core/modules/system/system.install
@@ -651,10 +651,10 @@ function system_requirements($phase) {
 
     // Determine severity based on time since cron last ran.
     $severity = REQUIREMENT_INFO;
-    if (REQUEST_TIME - $cron_last > $threshold_error) {
+    if (\Drupal::time()->getRequestTime() - $cron_last > $threshold_error) {
       $severity = REQUIREMENT_ERROR;
     }
-    elseif (REQUEST_TIME - $cron_last > $threshold_warning) {
+    elseif (\Drupal::time()->getRequestTime() - $cron_last > $threshold_warning) {
       $severity = REQUIREMENT_WARNING;
     }
 
diff --git a/core/modules/system/system.tokens.inc b/core/modules/system/system.tokens.inc
index 4c0a83e43bb7228b4a89b8f09e5cb35fde18ec38..2945ac7563875bc485410ee8885edd9eae58573f 100644
--- a/core/modules/system/system.tokens.inc
+++ b/core/modules/system/system.tokens.inc
@@ -56,15 +56,15 @@ function system_token_info() {
   // Date related tokens.
   $date['short'] = [
     'name' => t("Short format"),
-    'description' => t("A date in 'short' format. (%date)", ['%date' => $date_formatter->format(REQUEST_TIME, 'short')]),
+    'description' => t("A date in 'short' format. (%date)", ['%date' => $date_formatter->format(\Drupal::time()->getRequestTime(), 'short')]),
   ];
   $date['medium'] = [
     'name' => t("Medium format"),
-    'description' => t("A date in 'medium' format. (%date)", ['%date' => $date_formatter->format(REQUEST_TIME, 'medium')]),
+    'description' => t("A date in 'medium' format. (%date)", ['%date' => $date_formatter->format(\Drupal::time()->getRequestTime(), 'medium')]),
   ];
   $date['long'] = [
     'name' => t("Long format"),
-    'description' => t("A date in 'long' format. (%date)", ['%date' => $date_formatter->format(REQUEST_TIME, 'long')]),
+    'description' => t("A date in 'long' format. (%date)", ['%date' => $date_formatter->format(\Drupal::time()->getRequestTime(), 'long')]),
   ];
   $date['custom'] = [
     'name' => t("Custom format"),
@@ -72,11 +72,11 @@ function system_token_info() {
   ];
   $date['since'] = [
     'name' => t("Time-since"),
-    'description' => t("A date in 'time-since' format. (%date)", ['%date' => $date_formatter->formatTimeDiffSince(REQUEST_TIME - 360)]),
+    'description' => t("A date in 'time-since' format. (%date)", ['%date' => $date_formatter->formatTimeDiffSince(\Drupal::time()->getRequestTime() - 360)]),
   ];
   $date['raw'] = [
     'name' => t("Raw timestamp"),
-    'description' => t("A date in UNIX timestamp format (%date)", ['%date' => REQUEST_TIME]),
+    'description' => t("A date in UNIX timestamp format (%date)", ['%date' => \Drupal::time()->getRequestTime()]),
   ];
 
   return [
@@ -157,7 +157,7 @@ function system_tokens($type, $tokens, array $data, array $options, BubbleableMe
 
   elseif ($type == 'date') {
     if (empty($data['date'])) {
-      $date = REQUEST_TIME;
+      $date = \Drupal::time()->getRequestTime();
       // We depend on the current request time, so the tokens are not cacheable
       // at all.
       $bubbleable_metadata->setCacheMaxAge(0);
diff --git a/core/modules/update/update.fetch.inc b/core/modules/update/update.fetch.inc
index b1ab4196689a8947430474edeb1be4faf6cff1cb..f9b38bb112ce0127844f54e37d4e58aaff9a234e 100644
--- a/core/modules/update/update.fetch.inc
+++ b/core/modules/update/update.fetch.inc
@@ -44,7 +44,7 @@ function _update_cron_notify() {
         // Track when the last mail was successfully sent to avoid sending
         // too many emails.
         if ($message['result']) {
-          \Drupal::state()->set('update.last_email_notification', REQUEST_TIME);
+          \Drupal::state()->set('update.last_email_notification', \Drupal::time()->getRequestTime());
         }
       }
     }
diff --git a/core/modules/update/update.module b/core/modules/update/update.module
index 4eb82ebb672d0a78cd06f37b9cbbba07113d0cc9..6a05897947cc100b4f76bb0c58c99031edd5eb67 100644
--- a/core/modules/update/update.module
+++ b/core/modules/update/update.module
@@ -177,7 +177,7 @@ function update_cron() {
   $frequency = $update_config->get('check.interval_days');
   $interval = 60 * 60 * 24 * $frequency;
   $last_check = \Drupal::state()->get('update.last_check', 0);
-  if ((REQUEST_TIME - $last_check) > $interval) {
+  if ((\Drupal::time()->getRequestTime() - $last_check) > $interval) {
     // If the configured update interval has elapsed, we want to invalidate
     // the data for all projects, attempt to re-fetch, and trigger any
     // configured notifications about the new status.
@@ -190,7 +190,7 @@ function update_cron() {
     update_get_available(TRUE);
   }
   $last_email_notice = \Drupal::state()->get('update.last_email_notification', 0);
-  if ((REQUEST_TIME - $last_email_notice) > $interval) {
+  if ((\Drupal::time()->getRequestTime() - $last_email_notice) > $interval) {
     // If configured time between notifications elapsed, send email about
     // updates possibly available.
     \Drupal::moduleHandler()->loadInclude('update', 'inc', 'update.fetch');
@@ -705,7 +705,7 @@ function update_delete_file_if_stale($path) {
     $filectime = filectime($path);
     $max_age = \Drupal::config('system.file')->get('temporary_maximum_age');
 
-    if (REQUEST_TIME - $filectime > $max_age || (preg_match('/.*-dev\.(tar\.gz|zip)/i', $path) && REQUEST_TIME - $filectime > 300)) {
+    if (\Drupal::time()->getRequestTime() - $filectime > $max_age || (preg_match('/.*-dev\.(tar\.gz|zip)/i', $path) && \Drupal::time()->getRequestTime() - $filectime > 300)) {
       try {
         \Drupal::service('file_system')->deleteRecursive($path);
         return TRUE;
diff --git a/core/modules/user/user.module b/core/modules/user/user.module
index 833cdc5be64ad9eb4435231bbe49531d5ca91c67..163b062f8015d44552bba7439fa6b480335603cd 100644
--- a/core/modules/user/user.module
+++ b/core/modules/user/user.module
@@ -459,7 +459,7 @@ function user_login_finalize(UserInterface $account) {
   \Drupal::logger('user')->notice('Session opened for %name.', ['%name' => $account->getAccountName()]);
   // Update the user table timestamp noting user has logged in.
   // This is also used to invalidate one-time login links.
-  $account->setLastLoginTime(REQUEST_TIME);
+  $account->setLastLoginTime(\Drupal::time()->getRequestTime());
   \Drupal::entityTypeManager()
     ->getStorage('user')
     ->updateLastLoginTimestamp($account);
@@ -521,7 +521,7 @@ function user_user_logout(AccountInterface $account) {
  *   they can change their password.
  */
 function user_pass_reset_url($account, $options = []) {
-  $timestamp = REQUEST_TIME;
+  $timestamp = \Drupal::time()->getRequestTime();
   $langcode = $options['langcode'] ?? $account->getPreferredLangcode();
   return Url::fromRoute('user.reset',
     [
@@ -554,7 +554,7 @@ function user_pass_reset_url($account, $options = []) {
  * @see \Drupal\user\Controller\UserController::confirmCancel()
  */
 function user_cancel_url(UserInterface $account, $options = []) {
-  $timestamp = REQUEST_TIME;
+  $timestamp = \Drupal::time()->getRequestTime();
   $langcode = $options['langcode'] ?? $account->getPreferredLangcode();
   $url_options = ['absolute' => TRUE, 'language' => \Drupal::languageManager()->getLanguage($langcode)];
   return Url::fromRoute('user.cancel_confirm', [
@@ -579,7 +579,7 @@ function user_cancel_url(UserInterface $account, $options = []) {
  * @param \Drupal\user\UserInterface $account
  *   An object containing the user account.
  * @param int $timestamp
- *   A UNIX timestamp, typically REQUEST_TIME.
+ *   A UNIX timestamp, typically \Drupal::time()->getRequestTime().
  *
  * @return string
  *   A string that is safe for use in URLs and SQL statements.
@@ -1143,7 +1143,7 @@ function user_modules_uninstalled($modules) {
 function user_cookie_save(array $values) {
   foreach ($values as $field => $value) {
     // Set cookie for 365 days.
-    setrawcookie('Drupal.visitor.' . $field, rawurlencode($value), REQUEST_TIME + 31536000, '/');
+    setrawcookie('Drupal.visitor.' . $field, rawurlencode($value), \Drupal::time()->getRequestTime() + 31536000, '/');
   }
 }
 
@@ -1154,7 +1154,7 @@ function user_cookie_save(array $values) {
  *   A cookie name such as 'homepage'.
  */
 function user_cookie_delete($cookie_name) {
-  setrawcookie('Drupal.visitor.' . $cookie_name, '', REQUEST_TIME - 3600, '/');
+  setrawcookie('Drupal.visitor.' . $cookie_name, '', \Drupal::time()->getRequestTime() - 3600, '/');
 }
 
 /**
diff --git a/core/modules/views/views.api.php b/core/modules/views/views.api.php
index 50dd4946a6f8b41a609740311aa83e867e632148..f1800386c223f34ef845b73c06cd501f74127027 100644
--- a/core/modules/views/views.api.php
+++ b/core/modules/views/views.api.php
@@ -659,7 +659,7 @@ function hook_views_query_substitutions(ViewExecutable $view) {
   // Example from views_views_query_substitutions().
   return [
     '***CURRENT_VERSION***' => \Drupal::VERSION,
-    '***CURRENT_TIME***' => REQUEST_TIME,
+    '***CURRENT_TIME***' => \Drupal::time()->getRequestTime(),
     '***LANGUAGE_language_content***' => \Drupal::languageManager()->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId(),
     PluginBase::VIEWS_QUERY_LANGUAGE_SITE_DEFAULT => \Drupal::languageManager()->getDefaultLanguage()->getId(),
   ];
diff --git a/core/modules/views/views.theme.inc b/core/modules/views/views.theme.inc
index 499d860ef651508b1d437ea82a6b3bb4db791e71..d2cb65e402e4d031410fd1bb0aed12754ee048fd 100644
--- a/core/modules/views/views.theme.inc
+++ b/core/modules/views/views.theme.inc
@@ -956,7 +956,7 @@ function template_preprocess_views_view_opml(&$variables) {
   }
   $variables['title'] = $title;
   $variables['items'] = $items;
-  $variables['updated'] = gmdate(DATE_RFC2822, REQUEST_TIME);
+  $variables['updated'] = gmdate(DATE_RFC2822, \Drupal::time()->getRequestTime());
 
   // During live preview we don't want to output the header since the contents
   // of the feed are being displayed inside a normal HTML page.
diff --git a/core/modules/views/views.views_execution.inc b/core/modules/views/views.views_execution.inc
index 60b1adc04c65cde693327889e9707a0272ee277d..3647f52abccc5dcb3f262edd497fead992f51526 100644
--- a/core/modules/views/views.views_execution.inc
+++ b/core/modules/views/views.views_execution.inc
@@ -20,7 +20,7 @@
 function views_views_query_substitutions(ViewExecutable $view) {
   $substitutions = [
     '***CURRENT_VERSION***' => \Drupal::VERSION,
-    '***CURRENT_TIME***' => REQUEST_TIME,
+    '***CURRENT_TIME***' => \Drupal::time()->getRequestTime(),
   ] + PluginBase::queryLanguageSubstitutions();
 
   return $substitutions;
diff --git a/core/phpstan-partial.neon b/core/phpstan-partial.neon
index 8d78ca825f7d8aed4fc20feb1802e9323f3477b5..b1ae55c55aa625e4f5f07f52096268a589bdc105 100644
--- a/core/phpstan-partial.neon
+++ b/core/phpstan-partial.neon
@@ -6,5 +6,5 @@ includes:
 # Do not add additional configuration to this file. This configuration exists
 # only to allow core/scripts/dev/commit-code-check.sh to run against a subset of
 # the codebase.
-parameters:
-  reportUnmatchedIgnoredErrors: false
+#parameters:
+#  reportUnmatchedIgnoredErrors: false
