diff --git a/core/modules/migrate/tests/src/Unit/MigrateExecutableMemoryExceededTest.php b/core/modules/migrate/tests/src/Unit/MigrateExecutableMemoryExceededTest.php
index acf3e64c09..5d43ce1952 100644
--- a/core/modules/migrate/tests/src/Unit/MigrateExecutableMemoryExceededTest.php
+++ b/core/modules/migrate/tests/src/Unit/MigrateExecutableMemoryExceededTest.php
@@ -80,7 +80,7 @@ protected function runMemoryExceededTest($message, $memory_exceeded, $memory_usa
     if ($message) {
       $this->executable->message->expects($this->exactly(2))
         ->method('display')
-        ->withConsecutive(
+        ->willReturnOnConsecutiveCalls(
           [
             $this->callback(function ($subject) {
               return mb_stripos((string) $subject, 'reclaiming memory') !== FALSE;
diff --git a/core/modules/system/tests/src/Kernel/System/CronQueueTest.php b/core/modules/system/tests/src/Kernel/System/CronQueueTest.php
index 3935454fec..1c7be09b25 100644
--- a/core/modules/system/tests/src/Kernel/System/CronQueueTest.php
+++ b/core/modules/system/tests/src/Kernel/System/CronQueueTest.php
@@ -175,7 +175,7 @@ public function testLeaseTime() {
   public function testUncaughtExceptions() {
     $this->logger->expects($this->atLeast(2))
       ->method('log')
-      ->withConsecutive(
+      ->willReturnOnConsecutiveCalls(
         [
           $this->equalTo(RfcLogLevel::ERROR),
           $this->equalTo('%type: @message in %function (line %line of %file).'),
@@ -228,7 +228,7 @@ public function testUncaughtExceptions() {
   public function testSuspendQueueException(): void {
     $this->logger->expects($this->atLeast(2))
       ->method('log')
-      ->withConsecutive(
+      ->willReturnOnConsecutiveCalls(
         [
           $this->equalTo(RfcLogLevel::DEBUG),
           $this->equalTo('A worker for @queue queue suspended further processing of the queue.'),
diff --git a/core/modules/views/tests/src/Unit/ViewsDataTest.php b/core/modules/views/tests/src/Unit/ViewsDataTest.php
index cd9b88108b..5cb7f1ca3b 100644
--- a/core/modules/views/tests/src/Unit/ViewsDataTest.php
+++ b/core/modules/views/tests/src/Unit/ViewsDataTest.php
@@ -230,7 +230,7 @@ public function testFullAndTableGetCache() {
       ->willReturn(FALSE);
     $this->cacheBackend->expects($this->exactly(4))
       ->method('set')
-      ->withConsecutive(
+      ->willReturnOnConsecutiveCalls(
         ['views_data:en', $expected_views_data],
         ["views_data:$random_table_name:en", []],
         ['views_data:en', $expected_views_data],
@@ -431,7 +431,7 @@ public function testCacheCallsWithWarmCacheAndDifferentTable() {
     // Setup a warm cache backend for a single table.
     $this->cacheBackend->expects($this->exactly(2))
       ->method('get')
-      ->withConsecutive(
+      ->willReturnOnConsecutiveCalls(
         ['views_data:views_test_data_2:en'],
         ['views_data:en'],
       )
diff --git a/core/tests/Drupal/Tests/Core/Cron/CronSuspendQueueDelayTest.php b/core/tests/Drupal/Tests/Core/Cron/CronSuspendQueueDelayTest.php
index f74ef7676e..5a5542deef 100644
--- a/core/tests/Drupal/Tests/Core/Cron/CronSuspendQueueDelayTest.php
+++ b/core/tests/Drupal/Tests/Core/Cron/CronSuspendQueueDelayTest.php
@@ -135,7 +135,7 @@ public function testSuspendQueue(): void {
 
     $cron->expects($this->exactly(2))
       ->method('usleep')
-      ->withConsecutive(
+      ->willReturnOnConsecutiveCalls(
         [$this->equalTo(2000000)],
         [$this->equalTo(3000000)],
       );
@@ -425,7 +425,7 @@ public function testSuspendQueueOrder(): void {
 
     $cron->expects($this->exactly(2))
       ->method('usleep')
-      ->withConsecutive(
+      ->willReturnOnConsecutiveCalls(
         // Expect to wait for 8 seconds.
         [
           $this->callback(function (int $microseconds) use (&$currentTime) {
diff --git a/core/tests/Drupal/Tests/Core/Menu/DefaultMenuLinkTreeManipulatorsTest.php b/core/tests/Drupal/Tests/Core/Menu/DefaultMenuLinkTreeManipulatorsTest.php
index 05bf621082..14d4910720 100644
--- a/core/tests/Drupal/Tests/Core/Menu/DefaultMenuLinkTreeManipulatorsTest.php
+++ b/core/tests/Drupal/Tests/Core/Menu/DefaultMenuLinkTreeManipulatorsTest.php
@@ -325,7 +325,7 @@ public function testCheckNodeAccess() {
       ->with(TRUE);
     $query->expects($this->exactly(2))
       ->method('condition')
-      ->withConsecutive(
+      ->willReturnOnConsecutiveCalls(
         ['nid', [1, 2, 3, 4]],
         ['status', NodeInterface::PUBLISHED],
       );
diff --git a/core/tests/Drupal/Tests/Core/Menu/LocalTaskManagerTest.php b/core/tests/Drupal/Tests/Core/Menu/LocalTaskManagerTest.php
index 88b3b9fe35..18ef010713 100644
--- a/core/tests/Drupal/Tests/Core/Menu/LocalTaskManagerTest.php
+++ b/core/tests/Drupal/Tests/Core/Menu/LocalTaskManagerTest.php
@@ -180,7 +180,7 @@ public function testGetLocalTaskForRouteWithEmptyCache() {
 
     $this->cacheBackend->expects($this->exactly(2))
       ->method('get')
-      ->withConsecutive(
+      ->willReturnOnConsecutiveCalls(
         ['local_task_plugins:en:menu_local_task_test_tasks_view'],
         ['local_task_plugins:en'],
       );
diff --git a/core/tests/Drupal/Tests/Core/Plugin/Discovery/DerivativeDiscoveryDecoratorTest.php b/core/tests/Drupal/Tests/Core/Plugin/Discovery/DerivativeDiscoveryDecoratorTest.php
index 8027421bce..34b4010ad5 100644
--- a/core/tests/Drupal/Tests/Core/Plugin/Discovery/DerivativeDiscoveryDecoratorTest.php
+++ b/core/tests/Drupal/Tests/Core/Plugin/Discovery/DerivativeDiscoveryDecoratorTest.php
@@ -241,14 +241,10 @@ public function testSingleExistingDerivative() {
 
     $this->discoveryMain->expects($this->exactly(2))
       ->method('getDefinition')
-      ->withConsecutive(
-        ['non_container_aware_discovery:test_discovery_1'],
-        ['non_container_aware_discovery'],
-      )
-      ->willReturnOnConsecutiveCalls(
-        $derivative_definition,
-        $base_definition,
-      );
+      ->willReturnCallback(fn(string $input): array => match($input) {
+        'non_container_aware_discovery:test_discovery_1' => $derivative_definition,
+        'non_container_aware_discovery' => $base_definition,
+      });
 
     $discovery = new DerivativeDiscoveryDecorator($this->discoveryMain);
 
diff --git a/core/tests/Drupal/Tests/Core/Routing/RouteBuilderTest.php b/core/tests/Drupal/Tests/Core/Routing/RouteBuilderTest.php
index a767a0eb4d..996be8a742 100644
--- a/core/tests/Drupal/Tests/Core/Routing/RouteBuilderTest.php
+++ b/core/tests/Drupal/Tests/Core/Routing/RouteBuilderTest.php
@@ -164,7 +164,7 @@ public function testRebuildWithStaticModuleRoutes() {
     // Ensure that the alter routes events are fired.
     $this->dispatcher->expects($this->atLeast(2))
       ->method('dispatch')
-      ->withConsecutive(
+      ->willReturnOnConsecutiveCalls(
         [$route_build_event, RoutingEvents::DYNAMIC],
         [$route_build_event, RoutingEvents::ALTER],
       );
@@ -234,7 +234,7 @@ public function testRebuildWithProviderBasedRoutes() {
     // Ensure that the alter routes events are fired.
     $this->dispatcher->expects($this->atLeast(2))
       ->method('dispatch')
-      ->withConsecutive(
+      ->willReturnOnConsecutiveCalls(
         [$route_build_event, RoutingEvents::DYNAMIC],
         [$route_build_event, RoutingEvents::ALTER],
       );
@@ -316,7 +316,7 @@ public function testRebuildWithOverriddenRouteClass() {
     $route_build_event = new RouteBuildEvent($route_collection_filled);
     $this->dispatcher->expects($this->atLeast(2))
       ->method('dispatch')
-      ->withConsecutive(
+      ->willReturnOnConsecutiveCalls(
         [$route_build_event, RoutingEvents::DYNAMIC],
         [$route_build_event, RoutingEvents::ALTER],
       );
