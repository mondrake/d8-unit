diff --git a/core/lib/Drupal/Core/Database/Query/Upsert.php b/core/lib/Drupal/Core/Database/Query/Upsert.php
index a406d7ab97..8d4746ad7c 100644
--- a/core/lib/Drupal/Core/Database/Query/Upsert.php
+++ b/core/lib/Drupal/Core/Database/Query/Upsert.php
@@ -102,8 +102,9 @@ public function execute() {
         $values[':db_insert_placeholder_' . $max_placeholder++] = $value;
       }
     }
-
+dump([(string) $this, $values]);
     $last_insert_id = $this->connection->query((string) $this, $values, $this->queryOptions);
+dump(['xxx', $last_insert_id]);
 
     // Re-initialize the values array so that we can re-use this query.
     $this->insertValues = [];
diff --git a/core/tests/Drupal/KernelTests/Core/Database/UpsertTest.php b/core/tests/Drupal/KernelTests/Core/Database/UpsertTest.php
index 461117797f..7403bd8ecd 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/UpsertTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/UpsertTest.php
@@ -89,4 +89,55 @@ public function testSpecialColumnUpsert() {
     $this->assertEquals($record->function, 'Function 2');
   }
 
+  /**
+   * Tests that we can run an upsert that uses default values.
+   */
+  public function testUpsertDefaults() {
+    $query = $this->connection->upsert('test')
+      ->key('id')
+      ->useDefaults(['name', 'age', 'job']);
+    $id = $query->execute();
+
+    $query = $this->connection->select('test')->fields('test');
+    $query->condition('id', $id);
+    $row = $query->execute()->fetchAssoc();
+
+    $this->assertEquals([], $row);
+  }
+
+
+  /**
+   * Tests that no action will be preformed if no fields are specified.
+   */
+/*  public function testDefaultEmptyInsert() {
+    $num_records_before = (int) $this->connection->query('SELECT COUNT(*) FROM {test}')->fetchField();
+
+    try {
+      $this->connection->insert('test')->execute();
+      // This is only executed if no exception has been thrown.
+      $this->fail('Expected exception NoFieldsException has not been thrown.');
+    }
+    catch (NoFieldsException $e) {
+      $this->pass('Expected exception NoFieldsException has been thrown.');
+    }
+
+    $num_records_after = (int) $this->connection->query('SELECT COUNT(*) FROM {test}')->fetchField();
+    $this->assertSame($num_records_before, $num_records_after, 'Do nothing as no fields are specified.');
+  }
+
+  /**
+   * Tests that we can insert fields with values and defaults in the same query.
+   */
+/*  public function testDefaultInsertWithFields() {
+    $query = $this->connection->insert('test')
+      ->fields(['name' => 'Bob'])
+      ->useDefaults(['job']);
+    $id = $query->execute();
+
+    $schema = drupal_get_module_schema('database_test', 'test');
+
+    $job = $this->connection->query('SELECT job FROM {test} WHERE id = :id', [':id' => $id])->fetchField();
+    $this->assertEqual($job, $schema['fields']['job']['default'], 'Default field value is set.');
+  }*/
+
 }
