diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index 39a03b98ed..e92bfc6a05 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -551,10 +551,14 @@ public function prepareStatement(string $query, array $options): StatementInterf
     if (!($options['allow_square_brackets'] ?? FALSE)) {
       $query = $this->quoteIdentifiers($query);
     }
+    // @todo in Drupal 10, this should be always set, remove this check.
+    if (!isset($options['return'])) {
+      $options['return'] = Database::RETURN_STATEMENT;
+    }
     // @todo in Drupal 10, only return the StatementWrapper.
     // @see https://www.drupal.org/node/3177490
     return $this->statementWrapperClass ?
-      new $this->statementWrapperClass($this, $this->connection, $query, $options['pdo'] ?? []) :
+      new $this->statementWrapperClass($this, $this->connection, $query, $options['pdo'] ?? [], $options['return']) :
       $this->connection->prepare($query, $options['pdo'] ?? []);
   }
 
@@ -831,7 +835,6 @@ public function query($query, array $args = [], $options = []) {
           return $stmt;
 
         case Database::RETURN_AFFECTED:
-          $stmt->allowRowCount = TRUE;
           return $stmt->rowCount();
 
         case Database::RETURN_INSERT_ID:
diff --git a/core/lib/Drupal/Core/Database/Log.php b/core/lib/Drupal/Core/Database/Log.php
index 08a0506e24..3d50320838 100644
--- a/core/lib/Drupal/Core/Database/Log.php
+++ b/core/lib/Drupal/Core/Database/Log.php
@@ -115,7 +115,7 @@ public function log(StatementInterface $statement, $args, $time) {
       $this->queryLog[$key][] = [
         'query' => $statement->getQueryString(),
         'args' => $args,
-        'target' => $statement->dbh->getTarget(),
+        'target' => $statement->getConnectionTarget(),
         'caller' => $this->findCaller(),
         'time' => $time,
       ];
diff --git a/core/lib/Drupal/Core/Database/StatementEmpty.php b/core/lib/Drupal/Core/Database/StatementEmpty.php
index a87bca920a..6fd1d425a0 100644
--- a/core/lib/Drupal/Core/Database/StatementEmpty.php
+++ b/core/lib/Drupal/Core/Database/StatementEmpty.php
@@ -20,7 +20,48 @@ class StatementEmpty implements \Iterator, StatementInterface {
    *
    * @var bool
    */
-  public $allowRowCount = FALSE;
+  protected $rowCountEnabled = FALSE;
+
+  /**
+   * Implements the magic __get() method.
+   *
+   * @deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Access the
+   *   client-level statement object via ::getClientStatement().
+   *
+   * @see https://www.drupal.org/node/3177488
+   */
+  public function __get($name) {
+    if ($name === 'allowRowCount') {
+      @trigger_error("StatementEmpty::\${$name} should not be accessed in drupal:9.2.0 and will error in drupal:10.0.0. TODO. See https://www.drupal.org/node/TODO", E_USER_DEPRECATED);
+      return $this->rowCountEnabled;
+    }
+  }
+
+  /**
+   * Implements the magic __set() method.
+   *
+   * @deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Access the
+   *   client-level statement object via ::getClientStatement().
+   *
+   * @see https://www.drupal.org/node/3177488
+   */
+  public function __set($name, $value) {
+    if ($name === 'allowRowCount') {
+      @trigger_error("StatementEmpty::\${$name} should not be written in drupal:9.2.0 and will error in drupal:10.0.0. TODO. See https://www.drupal.org/node/TODO", E_USER_DEPRECATED);
+      $this->rowCountEnabled = $value;
+    }
+  }
+
+  /**
+   * Returns the target connection this statement is associated with.
+   *
+   * @return string|null
+   *   The target connection string of this statement, or NULL if no target is
+   *   set.
+   */
+  public function getConnectionTarget(): ?string {
+    return NULL;
+  }
 
   /**
    * {@inheritdoc}
@@ -40,7 +81,7 @@ public function getQueryString() {
    * {@inheritdoc}
    */
   public function rowCount() {
-    if ($this->allowRowCount) {
+    if ($this->rowCountEnabled) {
       return 0;
     }
     throw new RowCountException();
diff --git a/core/lib/Drupal/Core/Database/StatementPrefetch.php b/core/lib/Drupal/Core/Database/StatementPrefetch.php
index 3f6efdf364..1ff2d8fa15 100644
--- a/core/lib/Drupal/Core/Database/StatementPrefetch.php
+++ b/core/lib/Drupal/Core/Database/StatementPrefetch.php
@@ -25,11 +25,11 @@ class StatementPrefetch implements \Iterator, StatementInterface {
   protected $driverOptions;
 
   /**
-   * Reference to the Drupal database connection object for this statement.
+   * The Drupal database connection object.
    *
    * @var \Drupal\Core\Database\Connection
    */
-  public $dbh;
+  protected $connection;
 
   /**
    * Reference to the PDO connection object for this statement.
@@ -124,13 +124,61 @@ class StatementPrefetch implements \Iterator, StatementInterface {
    *
    * @var bool
    */
-  public $allowRowCount = FALSE;
+  protected $rowCountEnabled = FALSE;
 
-  public function __construct(\PDO $pdo_connection, Connection $connection, $query, array $driver_options = []) {
+  public function __construct(\PDO $pdo_connection, Connection $connection, $query, array $driver_options = [], int $return_type = Database::RETURN_STATEMENT) {
     $this->pdoConnection = $pdo_connection;
-    $this->dbh = $connection;
+    $this->connection = $connection;
     $this->queryString = $query;
     $this->driverOptions = $driver_options;
+    if ($return_type === Database::RETURN_AFFECTED) {
+      $this->rowCountEnabled = TRUE;
+    }
+  }
+
+  /**
+   * Implements the magic __get() method.
+   *
+   * @deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Access the
+   *   client-level statement object via ::getClientStatement().
+   *
+   * @see https://www.drupal.org/node/3177488
+   */
+  public function __get($name) {
+    if ($name === 'dbh') {
+      @trigger_error("StatementPrefetch::\${$name} should not be accessed in drupal:9.2.0 and will error in drupal:10.0.0. TODO. See https://www.drupal.org/node/TODO", E_USER_DEPRECATED);
+      return $this->connection;
+    }
+    if ($name === 'allowRowCount') {
+      @trigger_error("StatementPrefetch::\${$name} should not be accessed in drupal:9.2.0 and will error in drupal:10.0.0. TODO. See https://www.drupal.org/node/TODO", E_USER_DEPRECATED);
+      return $this->rowCountEnabled;
+    }
+  }
+
+  /**
+   * Implements the magic __set() method.
+   *
+   * @deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Access the
+   *   client-level statement object via ::getClientStatement().
+   *
+   * @see https://www.drupal.org/node/3177488
+   */
+  public function __set($name, $value) {
+    if ($name === 'allowRowCount') {
+      @trigger_error("StatementPrefetch::\${$name} should not be written in drupal:9.2.0 and will error in drupal:10.0.0. TODO. See https://www.drupal.org/node/TODO", E_USER_DEPRECATED);
+      $this->rowCountEnabled = $value;
+    }
+  }
+
+  /**
+   * Returns the target connection this statement is associated with.
+   *
+   * @return string|null
+   *   The target connection string of this statement, or NULL if no target is
+   *   set.
+   */
+  public function getConnectionTarget(): ?string {
+    return $this->connection->getTarget();
   }
 
   /**
@@ -149,7 +197,7 @@ public function execute($args = [], $options = []) {
       }
     }
 
-    $logger = $this->dbh->getLogger();
+    $logger = $this->connection->getLogger();
     if (!empty($logger)) {
       $query_start = microtime(TRUE);
     }
@@ -199,7 +247,7 @@ public function execute($args = [], $options = []) {
    * Throw a PDO Exception based on the last PDO error.
    */
   protected function throwPDOException() {
-    $error_info = $this->dbh->errorInfo();
+    $error_info = $this->connection->errorInfo();
     // We rebuild a message formatted in the same way as PDO.
     $exception = new \PDOException("SQLSTATE[" . $error_info[0] . "]: General error " . $error_info[1] . ": " . $error_info[2]);
     $exception->errorInfo = $error_info;
@@ -221,7 +269,7 @@ protected function throwPDOException() {
    *   A PDOStatement object.
    */
   protected function getStatement($query, &$args = []) {
-    return $this->dbh->prepare($query, $this->driverOptions);
+    return $this->connection->prepare($query, $this->driverOptions);
   }
 
   /**
@@ -364,7 +412,7 @@ public function valid() {
    */
   public function rowCount() {
     // SELECT query should not use the method.
-    if ($this->allowRowCount) {
+    if ($this->rowCountEnabled) {
       return $this->rowCount;
     }
     else {
diff --git a/core/lib/Drupal/Core/Database/StatementWrapper.php b/core/lib/Drupal/Core/Database/StatementWrapper.php
index eff40102f4..5089e5c013 100644
--- a/core/lib/Drupal/Core/Database/StatementWrapper.php
+++ b/core/lib/Drupal/Core/Database/StatementWrapper.php
@@ -14,7 +14,7 @@ class StatementWrapper implements \IteratorAggregate, StatementInterface {
    *
    * @var \Drupal\Core\Database\Connection
    */
-  public $dbh;
+  protected $connection;
 
   /**
    * The client database Statement object.
@@ -30,7 +30,7 @@ class StatementWrapper implements \IteratorAggregate, StatementInterface {
    *
    * @var bool
    */
-  public $allowRowCount = FALSE;
+  protected $rowCountEnabled = FALSE;
 
   /**
    * Constructs a StatementWrapper object.
@@ -43,10 +43,15 @@ class StatementWrapper implements \IteratorAggregate, StatementInterface {
    *   The SQL query string.
    * @param array $options
    *   Array of query options.
+   * @param int $return_type
+   *   The return type.
    */
-  public function __construct(Connection $connection, $client_connection, string $query, array $options) {
-    $this->dbh = $connection;
+  public function __construct(Connection $connection, $client_connection, string $query, array $options, int $return_type = Database::RETURN_STATEMENT) {
+    $this->connection = $connection;
     $this->clientStatement = $client_connection->prepare($query, $options);
+    if ($return_type === Database::RETURN_AFFECTED) {
+      $this->rowCountEnabled = TRUE;
+    }
     $this->setFetchMode(\PDO::FETCH_OBJ);
   }
 
@@ -63,6 +68,29 @@ public function __get($name) {
       @trigger_error("StatementWrapper::\${$name} should not be accessed in drupal:9.1.0 and will error in drupal:10.0.0. Access the client-level statement object via ::getClientStatement(). See https://www.drupal.org/node/3177488", E_USER_DEPRECATED);
       return $this->getClientStatement()->queryString;
     }
+    if ($name === 'dbh') {
+      @trigger_error("StatementWrapper::\${$name} should not be accessed in drupal:9.2.0 and will error in drupal:10.0.0. TODO. See https://www.drupal.org/node/TODO", E_USER_DEPRECATED);
+      return $this->connection;
+    }
+    if ($name === 'allowRowCount') {
+      @trigger_error("StatementWrapper::\${$name} should not be accessed in drupal:9.2.0 and will error in drupal:10.0.0. TODO. See https://www.drupal.org/node/TODO", E_USER_DEPRECATED);
+      return $this->rowCountEnabled;
+    }
+  }
+
+  /**
+   * Implements the magic __set() method.
+   *
+   * @deprecated in drupal:9.2.0 and is removed from drupal:10.0.0. Access the
+   *   client-level statement object via ::getClientStatement().
+   *
+   * @see https://www.drupal.org/node/3177488
+   */
+  public function __set($name, $value) {
+    if ($name === 'allowRowCount') {
+      @trigger_error("StatementWrapper::\${$name} should not be written in drupal:9.2.0 and will error in drupal:10.0.0. TODO. See https://www.drupal.org/node/TODO", E_USER_DEPRECATED);
+      $this->rowCountEnabled = $value;
+    }
   }
 
   /**
@@ -93,6 +121,17 @@ public function getClientStatement() {
     return $this->clientStatement;
   }
 
+  /**
+   * Returns the target connection this statement is associated with.
+   *
+   * @return string|null
+   *   The target connection string of this statement, or NULL if no target is
+   *   set.
+   */
+  public function getConnectionTarget(): ?string {
+    return $this->connection->getTarget();
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -108,7 +147,7 @@ public function execute($args = [], $options = []) {
       }
     }
 
-    $logger = $this->dbh->getLogger();
+    $logger = $this->connection->getLogger();
     if (!empty($logger)) {
       $query_start = microtime(TRUE);
     }
@@ -202,7 +241,7 @@ public function fetchObject(string $class_name = NULL) {
    */
   public function rowCount() {
     // SELECT query should not use the method.
-    if ($this->allowRowCount) {
+    if ($this->rowCountEnabled) {
       return $this->clientStatement->rowCount();
     }
     else {
diff --git a/core/tests/Drupal/KernelTests/Core/Database/StatementWrapperLegacyTest.php b/core/tests/Drupal/KernelTests/Core/Database/StatementWrapperLegacyTest.php
index 56609ee8a6..fb914de8b9 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/StatementWrapperLegacyTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/StatementWrapperLegacyTest.php
@@ -20,7 +20,7 @@ class StatementWrapperLegacyTest extends DatabaseTestBase {
    */
   protected function setUp(): void {
     parent::setUp();
-    $this->statement = $this->connection->prepareStatement('SELECT * FROM {test}', []);
+    $this->statement = $this->connection->prepareStatement('SELECT * FROM {test}', ['return' => Database::RETURN_STATEMENT]);
     if (!$this->statement instanceof StatementWrapper) {
       $this->markTestSkipped('This test only works for drivers implementing Drupal\Core\Database\StatementWrapper.');
     }
