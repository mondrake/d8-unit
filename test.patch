diff --git a/core/modules/inline_form_errors/tests/src/Unit/FormErrorHandlerTest.php b/core/modules/inline_form_errors/tests/src/Unit/FormErrorHandlerTest.php
index 962f107955..904ae03147 100644
--- a/core/modules/inline_form_errors/tests/src/Unit/FormErrorHandlerTest.php
+++ b/core/modules/inline_form_errors/tests/src/Unit/FormErrorHandlerTest.php
@@ -120,12 +120,12 @@ protected function setUp(): void {
   public function testErrorMessagesInline() {
     $this->messenger->expects($this->exactly(4))
       ->method('addError')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['no title given', FALSE],
         ['element is invisible', FALSE],
         ['this missing element is invalid', FALSE],
         ['3 errors have been found: <ul-comma-list-mock><li-mock>Test 1</li-mock><li-mock>Test 2 &amp; a half</li-mock><li-mock>Test 3</li-mock></ul-comma-list-mock>', FALSE],
-      );
+      ));
 
     $this->renderer->expects($this->once())
       ->method('renderPlain')
@@ -164,7 +164,7 @@ public function testErrorMessagesNotInline() {
     // Asserts all messages are summarized.
     $this->messenger->expects($this->exactly(7))
       ->method('addMessage')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['invalid', 'error', FALSE],
         ['invalid', 'error', FALSE],
         ['invalid', 'error', FALSE],
@@ -172,7 +172,7 @@ public function testErrorMessagesNotInline() {
         ['no title given', 'error', FALSE],
         ['element is invisible', 'error', FALSE],
         ['this missing element is invalid', 'error', FALSE],
-      );
+      ));
 
     $this->renderer->expects($this->never())
       ->method('renderPlain');
diff --git a/core/modules/migrate/tests/src/Unit/MigrateExecutableMemoryExceededTest.php b/core/modules/migrate/tests/src/Unit/MigrateExecutableMemoryExceededTest.php
index acf3e64c09..a4c5dac329 100644
--- a/core/modules/migrate/tests/src/Unit/MigrateExecutableMemoryExceededTest.php
+++ b/core/modules/migrate/tests/src/Unit/MigrateExecutableMemoryExceededTest.php
@@ -80,7 +80,7 @@ protected function runMemoryExceededTest($message, $memory_exceeded, $memory_usa
     if ($message) {
       $this->executable->message->expects($this->exactly(2))
         ->method('display')
-        ->withConsecutive(
+        ->with(...self::consecutiveCalls(
           [
             $this->callback(function ($subject) {
               return mb_stripos((string) $subject, 'reclaiming memory') !== FALSE;
@@ -91,7 +91,7 @@ protected function runMemoryExceededTest($message, $memory_exceeded, $memory_usa
               return mb_stripos((string) $subject, $message) !== FALSE;
             }),
           ],
-        );
+        ));
     }
     else {
       $this->executable->message->expects($this->never())
diff --git a/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapEnsureTablesTest.php b/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapEnsureTablesTest.php
index f4a4dc2596..6ab49b98a9 100644
--- a/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapEnsureTablesTest.php
+++ b/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapEnsureTablesTest.php
@@ -126,10 +126,10 @@ public function testEnsureTablesNotExist() {
       ]);
     $schema->expects($this->exactly(2))
       ->method('createTable')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['migrate_map_sql_idmap_test', $map_table_schema],
         ['migrate_message_sql_idmap_test', $table_schema],
-      );
+      ));
 
     $this->runEnsureTablesTest($schema);
   }
@@ -154,7 +154,7 @@ public function testEnsureTablesExist() {
       ]);
     $schema->expects($this->exactly(3))
       ->method('addField')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         [
           'migrate_map_sql_idmap_test', 'rollback_action', [
             'type' => 'int',
@@ -181,7 +181,7 @@ public function testEnsureTablesExist() {
             'description' => 'Hash of source ids. Used as primary key',
           ],
         ],
-      );
+      ));
 
     $this->runEnsureTablesTest($schema);
   }
diff --git a/core/modules/pgsql/tests/src/Unit/SchemaTest.php b/core/modules/pgsql/tests/src/Unit/SchemaTest.php
index 3b9192fdea..ed151c891c 100644
--- a/core/modules/pgsql/tests/src/Unit/SchemaTest.php
+++ b/core/modules/pgsql/tests/src/Unit/SchemaTest.php
@@ -55,10 +55,10 @@ public function testComputedConstraintName($table_name, $name, $expected) {
 
     $this->connection->expects($this->exactly(2))
       ->method('query')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         [$this->anything()],
         ["SELECT 1 FROM pg_constraint WHERE conname = '$expected'"],
-      )
+      ))
       ->willReturnOnConsecutiveCalls(
         $statement,
         $this->createMock('\Drupal\Core\Database\StatementInterface'),
diff --git a/core/modules/serialization/tests/src/Unit/Normalizer/EntityNormalizerTest.php b/core/modules/serialization/tests/src/Unit/Normalizer/EntityNormalizerTest.php
index 28403d6b05..6544c77362 100644
--- a/core/modules/serialization/tests/src/Unit/Normalizer/EntityNormalizerTest.php
+++ b/core/modules/serialization/tests/src/Unit/Normalizer/EntityNormalizerTest.php
@@ -98,10 +98,10 @@ public function testNormalize() {
       ->getMock();
     $serializer->expects($this->exactly(2))
       ->method('normalize')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         [$list_item_1, 'test_format'],
         [$list_item_2, 'test_format'],
-      );
+      ));
 
     $this->entityNormalizer->setSerializer($serializer);
 
@@ -228,10 +228,10 @@ public function testDenormalizeWithValidBundle() {
       ->getMock();
     $serializer->expects($this->exactly(2))
       ->method('denormalize')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['value_1', get_class($key_1), NULL, ['target_instance' => $key_1, 'entity_type' => 'test']],
         ['value_2', get_class($key_2), NULL, ['target_instance' => $key_2, 'entity_type' => 'test']],
-      );
+      ));
 
     $this->entityNormalizer->setSerializer($serializer);
 
@@ -381,10 +381,10 @@ public function testDenormalizeWithNoBundle() {
       ->getMock();
     $serializer->expects($this->exactly(2))
       ->method('denormalize')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['value_1', get_class($key_1), NULL, ['target_instance' => $key_1, 'entity_type' => 'test']],
         ['value_2', get_class($key_2), NULL, ['target_instance' => $key_2, 'entity_type' => 'test']],
-      );
+      ));
 
     $this->entityNormalizer->setSerializer($serializer);
 
diff --git a/core/modules/system/tests/src/Kernel/System/CronQueueTest.php b/core/modules/system/tests/src/Kernel/System/CronQueueTest.php
index abedf8b4b5..9142570392 100644
--- a/core/modules/system/tests/src/Kernel/System/CronQueueTest.php
+++ b/core/modules/system/tests/src/Kernel/System/CronQueueTest.php
@@ -175,7 +175,7 @@ public function testLeaseTime() {
   public function testUncaughtExceptions() {
     $this->logger->expects($this->atLeast(2))
       ->method('log')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         [
           $this->equalTo(RfcLogLevel::ERROR),
           $this->equalTo('%type: @message in %function (line %line of %file).'),
@@ -189,7 +189,7 @@ public function testUncaughtExceptions() {
           $this->equalTo('Cron run completed.'),
           $this->anything(),
         ],
-      );
+      ));
 
     // Get the queue to test the normal Exception.
     $queue = $this->container->get('queue')->get(CronQueueTestException::PLUGIN_ID);
@@ -228,7 +228,7 @@ public function testUncaughtExceptions() {
   public function testSuspendQueueException(): void {
     $this->logger->expects($this->atLeast(2))
       ->method('log')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         [
           $this->equalTo(RfcLogLevel::DEBUG),
           $this->equalTo('A worker for @queue queue suspended further processing of the queue.'),
@@ -241,7 +241,7 @@ public function testSuspendQueueException(): void {
           $this->equalTo('Cron run completed.'),
           $this->anything(),
         ],
-      );
+      ));
 
     // Get the queue to test the specific SuspendQueueException.
     $queue = \Drupal::queue(CronQueueTestSuspendQueue::PLUGIN_ID);
diff --git a/core/modules/views/tests/src/Unit/ViewsDataTest.php b/core/modules/views/tests/src/Unit/ViewsDataTest.php
index b382c427cd..a72f55690f 100644
--- a/core/modules/views/tests/src/Unit/ViewsDataTest.php
+++ b/core/modules/views/tests/src/Unit/ViewsDataTest.php
@@ -220,21 +220,21 @@ public function testFullAndTableGetCache() {
     // will get all table data in the first get().
     $this->cacheBackend->expects($this->exactly(4))
       ->method('get')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['views_data:en'],
         ["views_data:$random_table_name:en"],
         ['views_data:en'],
         ["views_data:$random_table_name:en"],
-      )
+      ))
       ->willReturn(FALSE);
     $this->cacheBackend->expects($this->exactly(4))
       ->method('set')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['views_data:en', $expected_views_data],
         ["views_data:$random_table_name:en", []],
         ['views_data:en', $expected_views_data],
         ["views_data:$random_table_name:en", []],
-      );
+      ));
     $this->cacheTagsInvalidator->expects($this->once())
       ->method('invalidateTags')
       ->with(['views_data']);
@@ -303,10 +303,10 @@ public function testSingleTableGetCache() {
 
     $this->cacheBackend->expects($this->exactly(2))
       ->method('get')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ["views_data:$table_name:en"],
         ['views_data:en'],
-      )
+      ))
       ->willReturn(FALSE);
 
     $views_data = $this->viewsData->get($table_name);
@@ -337,10 +337,10 @@ public function testNonExistingTableGetCache() {
 
     $this->cacheBackend->expects($this->exactly(2))
       ->method('get')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ["views_data:$random_table_name:en"],
         ['views_data:en'],
-      )
+      ))
       ->willReturn(FALSE);
 
     // All views data should be requested on the first try.
@@ -362,16 +362,16 @@ public function testCacheCallsWithSameTableMultipleTimes() {
 
     $this->cacheBackend->expects($this->exactly(2))
       ->method('get')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['views_data:views_test_data:en'],
         ['views_data:en'],
-      );
+      ));
     $this->cacheBackend->expects($this->exactly(2))
       ->method('set')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['views_data:en', $expected_views_data],
         ['views_data:views_test_data:en', $expected_views_data['views_test_data']],
-      );
+      ));
 
     // Request the same table 5 times. The caches are empty at this point, so
     // what will happen is that it will first check for a cache entry for the
@@ -430,10 +430,10 @@ public function testCacheCallsWithWarmCacheAndDifferentTable() {
     // Setup a warm cache backend for a single table.
     $this->cacheBackend->expects($this->exactly(2))
       ->method('get')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['views_data:views_test_data_2:en'],
         ['views_data:en'],
-      )
+      ))
       ->willReturnOnConsecutiveCalls(
         FALSE,
         (object) ['data' => $expected_views_data],
@@ -469,10 +469,10 @@ public function testCacheCallsWithWarmCacheAndInvalidTable() {
     // Setup a warm cache backend for a single table.
     $this->cacheBackend->expects($this->exactly(2))
       ->method('get')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ["views_data:$non_existing_table:en"],
         ['views_data:en'],
-      )
+      ))
       ->willReturnOnConsecutiveCalls(
         FALSE,
         (object) ['data' => $expected_views_data],
@@ -587,11 +587,11 @@ public function testCacheCallsWithoutWarmCacheAndGetMultipleTables() {
     // Setup a warm cache backend for all table data, but not single tables.
     $this->cacheBackend->expects($this->exactly(3))
       ->method('get')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ["views_data:$table_name:en"],
         ['views_data:en'],
         ["views_data:$table_name_2:en"],
-      )
+      ))
       ->willReturnOnConsecutiveCalls(
         FALSE,
         (object) ['data' => $expected_views_data],
@@ -599,10 +599,10 @@ public function testCacheCallsWithoutWarmCacheAndGetMultipleTables() {
       );
     $this->cacheBackend->expects($this->exactly(2))
       ->method('set')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ["views_data:$table_name:en", $expected_views_data[$table_name]],
         ["views_data:$table_name_2:en", $expected_views_data[$table_name_2]],
-      );
+      ));
 
     $this->assertSame($expected_views_data[$table_name], $this->viewsData->get($table_name));
     $this->assertSame($expected_views_data[$table_name_2], $this->viewsData->get($table_name_2));
diff --git a/core/phpstan-baseline.neon b/core/phpstan-baseline.neon
index 6840667cb8..d931f2684d 100644
--- a/core/phpstan-baseline.neon
+++ b/core/phpstan-baseline.neon
@@ -1591,11 +1591,6 @@ parameters:
 			count: 1
 			path: modules/image/tests/src/Functional/ImageStyleFlushTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 2
-			path: modules/inline_form_errors/tests/src/Unit/FormErrorHandlerTest.php
-
 		-
 			message: "#^Variable \\$reason in empty\\(\\) always exists and is not falsy\\.$#"
 			count: 1
@@ -1853,11 +1848,6 @@ parameters:
 			count: 1
 			path: modules/migrate/tests/src/Kernel/MigrateTestBase.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 2
-			path: modules/migrate/tests/src/Unit/MigrateSqlIdMapEnsureTablesTest.php
-
 		-
 			message: "#^Variable \\$sub_process_plugins might not be defined\\.$#"
 			count: 2
@@ -2150,11 +2140,6 @@ parameters:
 			count: 1
 			path: modules/pgsql/src/Update10101.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: modules/pgsql/tests/src/Unit/SchemaTest.php
-
 		-
 			message: "#^Variable \\$responsive_image_styles in empty\\(\\) always exists and is not falsy\\.$#"
 			count: 1
@@ -2215,11 +2200,6 @@ parameters:
 			count: 1
 			path: modules/serialization/src/Normalizer/EntityNormalizer.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 3
-			path: modules/serialization/tests/src/Unit/Normalizer/EntityNormalizerTest.php
-
 		-
 			message: "#^Method Drupal\\\\shortcut\\\\Form\\\\SetCustomize\\:\\:save\\(\\) should return int but return statement is missing\\.$#"
 			count: 1
@@ -2400,11 +2380,6 @@ parameters:
 			count: 2
 			path: modules/system/tests/src/Functional/Theme/ThemeUiTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 2
-			path: modules/system/tests/src/Kernel/System/CronQueueTest.php
-
 		-
 			message: "#^Call to deprecated constant REQUEST_TIME\\: Deprecated in drupal\\:8\\.3\\.0 and is removed from drupal\\:11\\.0\\.0\\. Use \\\\Drupal\\:\\:time\\(\\)\\-\\>getRequestTime\\(\\); $#"
 			count: 1
@@ -2931,11 +2906,6 @@ parameters:
 			count: 2
 			path: modules/views/tests/src/Kernel/RenderCacheIntegrationTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 10
-			path: modules/views/tests/src/Unit/ViewsDataTest.php
-
 		-
 			message: "#^Variable \\$relationship_handler in empty\\(\\) always exists and is not falsy\\.$#"
 			count: 1
@@ -3363,11 +3333,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Composer/ComposerTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Cache/CacheCollectorTest.php
-
 		-
 			message: """
 				#^Call to deprecated method expectError\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
@@ -3392,11 +3357,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Core/Controller/ControllerResolverTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 3
-			path: tests/Drupal/Tests/Core/Cron/CronSuspendQueueDelayTest.php
-
 		-
 			message: """
 				#^Call to deprecated method expectError\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
@@ -3431,11 +3391,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Core/DependencyInjection/DependencySerializationTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 2
-			path: tests/Drupal/Tests/Core/Entity/EntityUnitTest.php
-
 		-
 			message: "#^Trying to mock an undefined method getRevisionId\\(\\) on class Drupal\\\\Tests\\\\Core\\\\Entity\\\\UrlTestEntity\\.$#"
 			count: 1
@@ -3446,16 +3401,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Core/Entity/EntityUrlTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 6
-			path: tests/Drupal/Tests/Core/Entity/KeyValueStore/KeyValueEntityStorageTest.php
-
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Entity/Sql/SqlContentEntityStorageSchemaTest.php
-
 		-
 			message: """
 				#^Call to deprecated method expectError\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
@@ -3480,21 +3425,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Core/EventSubscriber/SpecialAttributesRouteSubscriberTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Extension/ModuleHandlerTest.php
-
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Form/FormCacheTest.php
-
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Form/FormErrorHandlerTest.php
-
 		-
 			message: """
 				#^Call to deprecated method getConfig\\(\\) of class GuzzleHttp\\\\Client\\:
@@ -3503,26 +3433,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Core/Http/ClientFactoryTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Menu/ContextualLinkManagerTest.php
-
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Menu/DefaultMenuLinkTreeManipulatorsTest.php
-
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 2
-			path: tests/Drupal/Tests/Core/Menu/LocalTaskManagerTest.php
-
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Menu/StaticMenuLinkOverridesTest.php
-
 		-
 			message: "#^Call to method getDefinitions\\(\\) on an unknown class Drupal\\\\Core\\\\Plugin\\\\CategorizingPluginManagerTrait\\.$#"
 			count: 1
@@ -3538,11 +3448,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Core/Plugin/CategorizingPluginManagerTraitTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Plugin/Discovery/DerivativeDiscoveryDecoratorTest.php
-
 		-
 			message: "#^Constructor of class Drupal\\\\Tests\\\\Core\\\\Plugin\\\\Discovery\\\\TestContainerDerivativeDiscovery has an unused parameter \\$example_service\\.$#"
 			count: 1
@@ -3579,11 +3484,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Core/Render/ElementTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 3
-			path: tests/Drupal/Tests/Core/Routing/RouteBuilderTest.php
-
 		-
 			message: """
 				#^Call to deprecated method expectWarning\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
@@ -3600,26 +3500,11 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Core/Security/DoTrustedCallbackTraitTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 2
-			path: tests/Drupal/Tests/Core/TempStore/PrivateTempStoreTest.php
-
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 3
-			path: tests/Drupal/Tests/Core/TempStore/SharedTempStoreTest.php
-
 		-
 			message: "#^Variable \\$value in isset\\(\\) always exists and is not nullable\\.$#"
 			count: 1
 			path: tests/Drupal/Tests/Core/Test/AssertContentTraitTest.php
 
-		-
-			message: "#^Call to deprecated method withConsecutive\\(\\) of class PHPUnit\\\\Framework\\\\MockObject\\\\Builder\\\\InvocationMocker\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/UrlTest.php
-
 		-
 			message: """
 				#^Class Drupal\\\\Tests\\\\Core\\\\Utility\\\\MockContainerAware implements deprecated interface Symfony\\\\Component\\\\DependencyInjection\\\\ContainerAwareInterface\\:
diff --git a/core/tests/Drupal/KernelTests/KernelTestBase.php b/core/tests/Drupal/KernelTests/KernelTestBase.php
index 63e9f73246..3d32e25bfb 100644
--- a/core/tests/Drupal/KernelTests/KernelTestBase.php
+++ b/core/tests/Drupal/KernelTests/KernelTestBase.php
@@ -25,6 +25,7 @@
 use Drupal\TestTools\Comparator\MarkupInterfaceComparator;
 use Drupal\TestTools\Extension\SchemaInspector;
 use Drupal\TestTools\TestVarDumper;
+use Drupal\TestTools\Trait\MockTrait;
 use PHPUnit\Framework\Exception;
 use PHPUnit\Framework\TestCase;
 use Prophecy\PhpUnit\ProphecyTrait;
@@ -88,6 +89,7 @@ abstract class KernelTestBase extends TestCase implements ServiceProviderInterfa
   use RandomGeneratorTrait;
   use ConfigTestTrait;
   use ExtensionListTestTrait;
+  use MockTrait;
   use TestRequirementsTrait;
   use PhpUnitWarnings;
   use PhpUnitCompatibilityTrait;
diff --git a/core/tests/Drupal/TestTools/ConsecutiveCallsIterator.php b/core/tests/Drupal/TestTools/ConsecutiveCallsIterator.php
new file mode 100644
index 0000000000..15eb2e1d06
--- /dev/null
+++ b/core/tests/Drupal/TestTools/ConsecutiveCallsIterator.php
@@ -0,0 +1,85 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\TestTools;
+
+use PHPUnit\Framework\Assert;
+use PHPUnit\Framework\Constraint\Callback;
+use PHPUnit\Framework\Constraint\Constraint;
+
+/**
+ * A class returning expected arguments for a sequence of mocked method calls.
+ *
+ * @internal
+ */
+class ConsecutiveCallsIterator {
+
+  /**
+   * An array of arguments for subsequent mocked method's calls.
+   *
+   * @var array<mixed>
+   */
+  private array $expectedArguments = [];
+
+  /**
+   * Constructor.
+   *
+   * @param array<mixed> $expectedArgumentsSequence
+   *   An array of expected arguments and return values for a stack of calls to
+   *   the method. Each array item contains the expected call arguments, either
+   *   concrete values or Constraint objects (could be a partial list, in which
+   *   case the actual arguments in excess of the expected ones are ignored).
+   */
+  public function __construct(array $expectedArgumentsSequence) {
+    // Find maximum count of parameters in expected sequence.
+    $countParameters = 0;
+    foreach ($expectedArgumentsSequence as $args) {
+      $countParameters = max($countParameters, count($args));
+    }
+
+    // Check expected calls arguments count.
+    for ($i = 0; $i < count($expectedArgumentsSequence); $i++) {
+      $this->expectedArguments[$i] = $expectedArgumentsSequence[$i];
+      if (count($this->expectedArguments[$i]) < $countParameters) {
+        // Fill missing argument expectations with an 'anything' constraint.
+        for ($m = count($this->expectedArguments[$i]); $m < $countParameters; $m++) {
+          $this->expectedArguments[$i][] = Assert::anything();
+        }
+      }
+    }
+  }
+
+  /**
+   * Generator.
+   *
+   * @return iterable<\PHPUnit\Framework\Constraint\Callback<mixed>>
+   *   Each item yields a method's call expected arguments.
+   */
+  public function generator(): iterable {
+    $expectedArgumentsSequence = $this->expectedArguments;
+    $countParameters = count($expectedArgumentsSequence[0] ?? []);
+    $expectedCall = 0;
+    $yieldsCounter = 0;
+    for ($argumentPosition = 0; $argumentPosition < $countParameters; $argumentPosition++) {
+      yield new Callback(
+        static function (mixed $actual) use ($expectedArgumentsSequence, &$expectedCall, &$yieldsCounter, $argumentPosition, $countParameters): bool {
+          $expected = $expectedArgumentsSequence[$expectedCall][$argumentPosition] ?? Assert::anything();
+
+          if ($expected instanceof Constraint) {
+            Assert::assertThat($actual, $expected, "Failed for call set #{$expectedCall}, argument #{$argumentPosition}");
+          }
+          else {
+            Assert::assertEquals($expected, $actual, "Failed for call set #{$expectedCall}, argument #{$argumentPosition}");
+          }
+
+          $yieldsCounter++;
+          $expectedCall = (int) ($yieldsCounter / $countParameters);
+
+          return TRUE;
+        },
+      );
+    }
+  }
+
+}
diff --git a/core/tests/Drupal/TestTools/Trait/MockTrait.php b/core/tests/Drupal/TestTools/Trait/MockTrait.php
new file mode 100644
index 0000000000..5313830acf
--- /dev/null
+++ b/core/tests/Drupal/TestTools/Trait/MockTrait.php
@@ -0,0 +1,36 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\TestTools\Trait;
+
+use Drupal\TestTools\ConsecutiveCallsIterator;
+
+/**
+ * A trait providing helper methods for mocking.
+ *
+ * @internal
+ */
+trait MockTrait {
+
+  /**
+   * Helper for consecutive calls to mock objects.
+   *
+   * Since the removal of InvocationMocker::withConsecutive() from PHPUnit, we
+   * can use InvocationMocker::with() instead, passing a stack of expected
+   * calls to mocked methods.
+   *
+   * @param array<mixed> ...$expectedArgumentsSequence
+   *   An array of expected arguments and return values for a stack of calls to
+   *   the method. Each array item contains the expected call arguments, either
+   *   concrete values or Constraint objects (could be a partial list, in which
+   *   case the actual arguments in excess of the expected ones are ignored).
+   *
+   * @return iterable<\PHPUnit\Framework\Constraint\Callback<mixed>>
+   *   Each item yields a method's call expected arguments.
+   */
+  public static function consecutiveCalls(array ...$expectedArgumentsSequence): iterable {
+    return (new ConsecutiveCallsIterator($expectedArgumentsSequence))->generator();
+  }
+
+}
diff --git a/core/tests/Drupal/Tests/Core/Cache/CacheCollectorTest.php b/core/tests/Drupal/Tests/Core/Cache/CacheCollectorTest.php
index d345763c6e..ab3220a512 100644
--- a/core/tests/Drupal/Tests/Core/Cache/CacheCollectorTest.php
+++ b/core/tests/Drupal/Tests/Core/Cache/CacheCollectorTest.php
@@ -309,10 +309,10 @@ public function testUpdateCacheDelete() {
     // set to TRUE because we triggered a cache invalidation.
     $this->cacheBackend->expects($this->exactly(2))
       ->method('get')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         [$this->cid],
         [$this->cid, TRUE],
-      )
+      ))
       ->willReturn($cache);
 
     $this->collector->delete($key);
diff --git a/core/tests/Drupal/Tests/Core/Cron/CronSuspendQueueDelayTest.php b/core/tests/Drupal/Tests/Core/Cron/CronSuspendQueueDelayTest.php
index 6ac8367a99..f889bf37fa 100644
--- a/core/tests/Drupal/Tests/Core/Cron/CronSuspendQueueDelayTest.php
+++ b/core/tests/Drupal/Tests/Core/Cron/CronSuspendQueueDelayTest.php
@@ -135,10 +135,10 @@ public function testSuspendQueue(): void {
 
     $cron->expects($this->exactly(2))
       ->method('usleep')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         [$this->equalTo(2000000)],
         [$this->equalTo(3000000)],
-      );
+      ));
 
     $queueManager->expects($this->once())
       ->method('getDefinitions')
@@ -391,7 +391,7 @@ public function testSuspendQueueOrder(): void {
 
     $this->workerA->expects($this->exactly(6))
       ->method('processItem')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         // All queues are executed in sequence of definition:
         [$this->equalTo('test_data_from_queue_a')],
         [$this->equalTo('test_data_from_queue_b')],
@@ -401,7 +401,7 @@ public function testSuspendQueueOrder(): void {
         [$this->equalTo('test_data_from_queue_c')],
         // Queue B is executed again, after queue C since its delay was longer.
         [$this->equalTo('test_data_from_queue_b')],
-      )
+      ))
       ->willReturnOnConsecutiveCalls(
         NULL,
         $this->throwException(new SuspendQueueException('', 0, NULL, 16.0)),
@@ -425,7 +425,7 @@ public function testSuspendQueueOrder(): void {
 
     $cron->expects($this->exactly(2))
       ->method('usleep')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         // Expect to wait for 8 seconds.
         [
           $this->callback(function (int $microseconds) use (&$currentTime) {
@@ -437,7 +437,7 @@ public function testSuspendQueueOrder(): void {
         // SuspendQueueException requests to delay by 16 seconds, but 4 seconds
         // have passed above, so there are just 12 seconds remaining:
         [$this->equalTo(12000000)],
-      );
+      ));
 
     $cron->run();
   }
diff --git a/core/tests/Drupal/Tests/Core/Entity/EntityUnitTest.php b/core/tests/Drupal/Tests/Core/Entity/EntityUnitTest.php
index e23eabea6c..579a41f9f2 100644
--- a/core/tests/Drupal/Tests/Core/Entity/EntityUnitTest.php
+++ b/core/tests/Drupal/Tests/Core/Entity/EntityUnitTest.php
@@ -401,7 +401,7 @@ public function testPreSave() {
   public function testPostSave() {
     $this->cacheTagsInvalidator->expects($this->exactly(2))
       ->method('invalidateTags')
-      ->withConsecutive([
+      ->with(...self::consecutiveCalls([
         [
           // List cache tag.
           $this->entityTypeId . '_list',
@@ -414,7 +414,7 @@ public function testPostSave() {
           // Own cache tag.
           $this->entityTypeId . ':' . $this->values['id'],
         ],
-      ]);
+      ]));
 
     // This method is internal, so check for errors on calling it only.
     $storage = $this->createMock('\Drupal\Core\Entity\EntityStorageInterface');
@@ -432,7 +432,7 @@ public function testPostSave() {
   public function testPostSaveBundle() {
     $this->cacheTagsInvalidator->expects($this->exactly(2))
       ->method('invalidateTags')
-      ->withConsecutive([
+      ->with(...self::consecutiveCalls([
         [
           // List cache tag.
           $this->entityTypeId . '_list',
@@ -447,7 +447,7 @@ public function testPostSaveBundle() {
           // Own cache tag.
           $this->entityTypeId . ':' . $this->values['id'],
         ],
-      ]);
+      ]));
 
     $this->entityType->expects($this->atLeastOnce())
       ->method('hasKey')
diff --git a/core/tests/Drupal/Tests/Core/Entity/KeyValueStore/KeyValueEntityStorageTest.php b/core/tests/Drupal/Tests/Core/Entity/KeyValueStore/KeyValueEntityStorageTest.php
index ea94a0c07c..c39031b4b1 100644
--- a/core/tests/Drupal/Tests/Core/Entity/KeyValueStore/KeyValueEntityStorageTest.php
+++ b/core/tests/Drupal/Tests/Core/Entity/KeyValueStore/KeyValueEntityStorageTest.php
@@ -158,7 +158,7 @@ public function testCreateWithPredefinedUuid() {
 
     $this->moduleHandler->expects($this->exactly(2))
       ->method('invokeAll')
-      ->withConsecutive(['test_entity_type_create'], ['entity_create']);
+      ->with(...self::consecutiveCalls(['test_entity_type_create'], ['entity_create']));
     $this->uuidService->expects($this->never())
       ->method('generate');
 
@@ -181,7 +181,7 @@ public function testCreateWithoutUuidKey() {
 
     $this->moduleHandler->expects($this->exactly(2))
       ->method('invokeAll')
-      ->withConsecutive(['test_entity_type_create'], ['entity_create']);
+      ->with(...self::consecutiveCalls(['test_entity_type_create'], ['entity_create']));
     $this->uuidService->expects($this->never())
       ->method('generate');
 
@@ -206,7 +206,7 @@ public function testCreate() {
 
     $this->moduleHandler->expects($this->exactly(2))
       ->method('invokeAll')
-      ->withConsecutive(['test_entity_type_create'], ['entity_create']);
+      ->with(...self::consecutiveCalls(['test_entity_type_create'], ['entity_create']));
     $this->uuidService->expects($this->once())
       ->method('generate')
       ->willReturn('bar');
@@ -248,12 +248,12 @@ public function testSaveInsert(EntityInterface $entity) {
 
     $this->moduleHandler->expects($this->exactly(4))
       ->method('invokeAll')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['test_entity_type_presave'],
         ['entity_presave'],
         ['test_entity_type_insert'],
         ['entity_insert'],
-      );
+      ));
     $this->keyValueStore->expects($this->once())
       ->method('set')
       ->with('foo', $expected);
@@ -292,12 +292,12 @@ public function testSaveUpdate(EntityInterface $entity) {
       ->method('delete');
     $this->moduleHandler->expects($this->exactly(4))
       ->method('invokeAll')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['test_entity_type_presave'],
         ['entity_presave'],
         ['test_entity_type_update'],
         ['entity_update'],
-      );
+      ));
     $this->keyValueStore->expects($this->once())
       ->method('set')
       ->with('foo', $expected);
@@ -574,10 +574,10 @@ public function testDelete() {
 
     $this->moduleHandler->expects($this->exactly(8))
       ->method('invokeAll')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['test_entity_type_predelete'],
         ['entity_predelete'],
-      );
+      ));
 
     $this->keyValueStore->expects($this->once())
       ->method('deleteMultiple')
diff --git a/core/tests/Drupal/Tests/Core/Entity/Sql/SqlContentEntityStorageSchemaTest.php b/core/tests/Drupal/Tests/Core/Entity/Sql/SqlContentEntityStorageSchemaTest.php
index ac6941caa3..42fd07f1d0 100644
--- a/core/tests/Drupal/Tests/Core/Entity/Sql/SqlContentEntityStorageSchemaTest.php
+++ b/core/tests/Drupal/Tests/Core/Entity/Sql/SqlContentEntityStorageSchemaTest.php
@@ -1536,10 +1536,10 @@ public function testonEntityTypeUpdateWithNewIndex() {
     // The original indexes should be dropped before the new one is added.
     $this->dbSchemaHandler->expects($this->exactly(3))
       ->method('dropIndex')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['entity_test', 'entity_test__b588603cb9'],
         ['entity_test', 'entity_test__removed_field'],
-      );
+      ));
 
     $this->dbSchemaHandler->expects($this->atLeastOnce())
       ->method('fieldExists')
diff --git a/core/tests/Drupal/Tests/Core/Extension/ModuleHandlerTest.php b/core/tests/Drupal/Tests/Core/Extension/ModuleHandlerTest.php
index c989ea870d..c1c97fe450 100644
--- a/core/tests/Drupal/Tests/Core/Extension/ModuleHandlerTest.php
+++ b/core/tests/Drupal/Tests/Core/Extension/ModuleHandlerTest.php
@@ -115,13 +115,13 @@ public function testModuleReloading() {
       ->getMock();
     $module_handler->expects($this->exactly(3))
       ->method('load')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         // First reload.
         ['module_handler_test'],
         // Second reload.
         ['module_handler_test'],
         ['module_handler_test_added'],
-      );
+      ));
     $module_handler->reload();
     $module_handler->addModule('module_handler_test_added', 'core/tests/Drupal/Tests/Core/Extension/modules/module_handler_test_added');
     $module_handler->reload();
diff --git a/core/tests/Drupal/Tests/Core/Form/FormCacheTest.php b/core/tests/Drupal/Tests/Core/Form/FormCacheTest.php
index 765fcfe281..1e79223f30 100644
--- a/core/tests/Drupal/Tests/Core/Form/FormCacheTest.php
+++ b/core/tests/Drupal/Tests/Core/Form/FormCacheTest.php
@@ -313,10 +313,10 @@ public function testLoadCachedFormStateWithFiles() {
     ];
     $this->moduleHandler->expects($this->exactly(2))
       ->method('loadInclude')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['a_module', 'the_type', 'some_name'],
         ['another_module', 'inc', 'another_module'],
-      );
+      ));
     $this->formStateCacheStore->expects($this->once())
       ->method('get')
       ->with($form_build_id)
diff --git a/core/tests/Drupal/Tests/Core/Form/FormErrorHandlerTest.php b/core/tests/Drupal/Tests/Core/Form/FormErrorHandlerTest.php
index 237050d1b7..970d1457af 100644
--- a/core/tests/Drupal/Tests/Core/Form/FormErrorHandlerTest.php
+++ b/core/tests/Drupal/Tests/Core/Form/FormErrorHandlerTest.php
@@ -50,14 +50,14 @@ protected function setUp(): void {
   public function testDisplayErrorMessages() {
     $this->messenger->expects($this->exactly(6))
       ->method('addMessage')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['invalid', 'error'],
         ['invalid', 'error'],
         ['invalid', 'error'],
         ['no title given', 'error'],
         ['element is invisible', 'error'],
         ['this missing element is invalid', 'error'],
-      );
+      ));
 
     $form = [
       '#parents' => [],
diff --git a/core/tests/Drupal/Tests/Core/Menu/ContextualLinkManagerTest.php b/core/tests/Drupal/Tests/Core/Menu/ContextualLinkManagerTest.php
index 55087bb87b..77d96767a3 100644
--- a/core/tests/Drupal/Tests/Core/Menu/ContextualLinkManagerTest.php
+++ b/core/tests/Drupal/Tests/Core/Menu/ContextualLinkManagerTest.php
@@ -247,10 +247,10 @@ public function testGetContextualLinksArrayByGroup() {
 
     $this->moduleHandler->expects($this->exactly(2))
       ->method('alter')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['contextual_links_plugins'],
         ['contextual_links', new Count(2), 'group1', ['key' => 'value']],
-      );
+      ));
 
     $result = $this->contextualLinkManager->getContextualLinksArrayByGroup('group1', ['key' => 'value']);
     $this->assertCount(2, $result);
diff --git a/core/tests/Drupal/Tests/Core/Menu/DefaultMenuLinkTreeManipulatorsTest.php b/core/tests/Drupal/Tests/Core/Menu/DefaultMenuLinkTreeManipulatorsTest.php
index 05bf621082..68e37bde41 100644
--- a/core/tests/Drupal/Tests/Core/Menu/DefaultMenuLinkTreeManipulatorsTest.php
+++ b/core/tests/Drupal/Tests/Core/Menu/DefaultMenuLinkTreeManipulatorsTest.php
@@ -325,10 +325,10 @@ public function testCheckNodeAccess() {
       ->with(TRUE);
     $query->expects($this->exactly(2))
       ->method('condition')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['nid', [1, 2, 3, 4]],
         ['status', NodeInterface::PUBLISHED],
-      );
+      ));
     $query->expects($this->once())
       ->method('execute')
       ->willReturn([1, 2, 4]);
diff --git a/core/tests/Drupal/Tests/Core/Menu/LocalTaskManagerTest.php b/core/tests/Drupal/Tests/Core/Menu/LocalTaskManagerTest.php
index dfb55098a3..661343cc51 100644
--- a/core/tests/Drupal/Tests/Core/Menu/LocalTaskManagerTest.php
+++ b/core/tests/Drupal/Tests/Core/Menu/LocalTaskManagerTest.php
@@ -180,16 +180,16 @@ public function testGetLocalTaskForRouteWithEmptyCache() {
 
     $this->cacheBackend->expects($this->exactly(2))
       ->method('get')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['local_task_plugins:en:menu_local_task_test_tasks_view'],
         ['local_task_plugins:en'],
-      );
+      ));
     $this->cacheBackend->expects($this->exactly(2))
       ->method('set')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['local_task_plugins:en', $definitions, Cache::PERMANENT],
         ['local_task_plugins:en:menu_local_task_test_tasks_view', $this->getLocalTasksCache(), Cache::PERMANENT, ['local_task']],
-      );
+      ));
 
     $local_tasks = $this->manager->getLocalTasksForRoute('menu_local_task_test_tasks_view');
     $this->assertEquals($result, $local_tasks);
diff --git a/core/tests/Drupal/Tests/Core/Menu/StaticMenuLinkOverridesTest.php b/core/tests/Drupal/Tests/Core/Menu/StaticMenuLinkOverridesTest.php
index a440d539d3..42fd75811e 100644
--- a/core/tests/Drupal/Tests/Core/Menu/StaticMenuLinkOverridesTest.php
+++ b/core/tests/Drupal/Tests/Core/Menu/StaticMenuLinkOverridesTest.php
@@ -110,10 +110,10 @@ public function testSaveOverride() {
       );
     $config->expects($this->exactly(2))
       ->method('set')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['definitions', $definition_save_1['definitions']],
         ['definitions', $definitions_save_2['definitions']],
-      )
+      ))
       ->will($this->returnSelf());
     $config->expects($this->exactly(2))
       ->method('save');
diff --git a/core/tests/Drupal/Tests/Core/Plugin/Discovery/DerivativeDiscoveryDecoratorTest.php b/core/tests/Drupal/Tests/Core/Plugin/Discovery/DerivativeDiscoveryDecoratorTest.php
index e3b45e77d0..338a1b5c99 100644
--- a/core/tests/Drupal/Tests/Core/Plugin/Discovery/DerivativeDiscoveryDecoratorTest.php
+++ b/core/tests/Drupal/Tests/Core/Plugin/Discovery/DerivativeDiscoveryDecoratorTest.php
@@ -243,10 +243,10 @@ public function testSingleExistingDerivative() {
 
     $this->discoveryMain->expects($this->exactly(2))
       ->method('getDefinition')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['non_container_aware_discovery:test_discovery_1'],
         ['non_container_aware_discovery'],
-      )
+      ))
       ->willReturnOnConsecutiveCalls(
         $derivative_definition,
         $base_definition,
diff --git a/core/tests/Drupal/Tests/Core/Routing/RouteBuilderTest.php b/core/tests/Drupal/Tests/Core/Routing/RouteBuilderTest.php
index a9e33597df..efe292cbc3 100644
--- a/core/tests/Drupal/Tests/Core/Routing/RouteBuilderTest.php
+++ b/core/tests/Drupal/Tests/Core/Routing/RouteBuilderTest.php
@@ -161,10 +161,10 @@ public function testRebuildWithStaticModuleRoutes() {
     // Ensure that the alter routes events are fired.
     $this->dispatcher->expects($this->atLeast(2))
       ->method('dispatch')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         [$route_build_event, RoutingEvents::DYNAMIC],
         [$route_build_event, RoutingEvents::ALTER],
-      );
+      ));
 
     // Ensure that access checks are set.
     $this->checkProvider->expects($this->once())
@@ -231,10 +231,10 @@ public function testRebuildWithProviderBasedRoutes() {
     // Ensure that the alter routes events are fired.
     $this->dispatcher->expects($this->atLeast(2))
       ->method('dispatch')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         [$route_build_event, RoutingEvents::DYNAMIC],
         [$route_build_event, RoutingEvents::ALTER],
-      );
+      ));
 
     // Ensure that access checks are set.
     $this->checkProvider->expects($this->once())
@@ -313,10 +313,10 @@ public function testRebuildWithOverriddenRouteClass() {
     $route_build_event = new RouteBuildEvent($route_collection_filled);
     $this->dispatcher->expects($this->atLeast(2))
       ->method('dispatch')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         [$route_build_event, RoutingEvents::DYNAMIC],
         [$route_build_event, RoutingEvents::ALTER],
-      );
+      ));
 
     $this->assertTrue($this->routeBuilder->rebuild());
   }
diff --git a/core/tests/Drupal/Tests/Core/TempStore/PrivateTempStoreTest.php b/core/tests/Drupal/Tests/Core/TempStore/PrivateTempStoreTest.php
index c0959e11e9..ddd0ae854c 100644
--- a/core/tests/Drupal/Tests/Core/TempStore/PrivateTempStoreTest.php
+++ b/core/tests/Drupal/Tests/Core/TempStore/PrivateTempStoreTest.php
@@ -102,11 +102,11 @@ protected function setUp(): void {
   public function testGet() {
     $this->keyValue->expects($this->exactly(3))
       ->method('get')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['1:test_2'],
         ['1:test'],
         ['1:test'],
-      )
+      ))
       ->willReturnOnConsecutiveCalls(
         FALSE,
         $this->ownObject,
@@ -248,11 +248,11 @@ public function testDelete() {
 
     $this->keyValue->expects($this->exactly(3))
       ->method('get')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['1:test_1'],
         ['1:test_2'],
         ['1:test_3'],
-      )
+      ))
       ->willReturnOnConsecutiveCalls(
         FALSE,
         $this->ownObject,
diff --git a/core/tests/Drupal/Tests/Core/TempStore/SharedTempStoreTest.php b/core/tests/Drupal/Tests/Core/TempStore/SharedTempStoreTest.php
index c4a67a85d1..5d9a68a4bc 100644
--- a/core/tests/Drupal/Tests/Core/TempStore/SharedTempStoreTest.php
+++ b/core/tests/Drupal/Tests/Core/TempStore/SharedTempStoreTest.php
@@ -101,10 +101,10 @@ protected function setUp(): void {
   public function testGet() {
     $this->keyValue->expects($this->exactly(2))
       ->method('get')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['test_2'],
         ['test'],
-      )
+      ))
       ->willReturnOnConsecutiveCalls(
         FALSE,
         $this->ownObject,
@@ -122,11 +122,11 @@ public function testGet() {
   public function testGetIfOwner() {
     $this->keyValue->expects($this->exactly(3))
       ->method('get')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['test_2'],
         ['test'],
         ['test'],
-      )
+      ))
       ->willReturnOnConsecutiveCalls(
         FALSE,
         $this->ownObject,
@@ -328,11 +328,11 @@ public function testDeleteIfOwner() {
 
     $this->keyValue->expects($this->exactly(3))
       ->method('get')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         ['test_1'],
         ['test_2'],
         ['test_3'],
-      )
+      ))
       ->willReturnOnConsecutiveCalls(
         FALSE,
         $this->ownObject,
diff --git a/core/tests/Drupal/Tests/Core/UrlTest.php b/core/tests/Drupal/Tests/Core/UrlTest.php
index 054c6c0f13..5fef398d77 100644
--- a/core/tests/Drupal/Tests/Core/UrlTest.php
+++ b/core/tests/Drupal/Tests/Core/UrlTest.php
@@ -118,11 +118,11 @@ protected function setUp(): void {
   public function testUrlFromRequest() {
     $this->router->expects($this->exactly(3))
       ->method('matchRequest')
-      ->withConsecutive(
+      ->with(...self::consecutiveCalls(
         [$this->getRequestConstraint('/node')],
         [$this->getRequestConstraint('/node/1')],
         [$this->getRequestConstraint('/node/2/edit')],
-      )
+      ))
       ->willReturnOnConsecutiveCalls([
         RouteObjectInterface::ROUTE_NAME => 'view.frontpage.page_1',
         '_raw_variables' => new InputBag(),
diff --git a/core/tests/Drupal/Tests/MockTraitTest.php b/core/tests/Drupal/Tests/MockTraitTest.php
new file mode 100644
index 0000000000..e6d2539a42
--- /dev/null
+++ b/core/tests/Drupal/Tests/MockTraitTest.php
@@ -0,0 +1,167 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Tests;
+
+use PHPUnit\Framework\ExpectationFailedException;
+
+/**
+ * Tests for the MockTrait trait.
+ *
+ * @group Tests
+ */
+class MockTraitTest extends UnitTestCase {
+
+  /**
+   * Tests a successful ::consecutiveCalls loop.
+   */
+  public function testConsecutiveCalls(): void {
+    $mock = $this->createMock(ForTesting::class);
+    $mock->expects($this->exactly(3))
+      ->method('justReturn')
+      ->with(...self::consecutiveCalls(
+        ['1:test_1', 'a'],
+        ['1:test_2'],
+        ['1:test_3', 'c', 'd'],
+      ))
+      ->willReturn(TRUE);
+
+    $actual = [
+      ['1:test_1', 'a'],
+      ['1:test_2'],
+      ['1:test_3', 'c', 'd'],
+    ];
+    foreach ($actual as $act) {
+      $this->assertTrue($mock->justReturn(...$act));
+    }
+  }
+
+  /**
+   * Tests a failing ::consecutiveCalls loop.
+   */
+  public function testConsecutiveCallsFail(): void {
+    $mock = $this->createMock(ForTesting::class);
+    $mock->expects($this->exactly(3))
+      ->method('justReturn')
+      ->with(...self::consecutiveCalls(
+        ['1:test_1', 'a'],
+        ['1:test_2'],
+        ['1:test_3', 'c', 'd'],
+      ))
+      ->willReturn(TRUE);
+
+    $actual = [
+      ['1:test_1', 'a'],
+      ['1:test_2'],
+      ['1:test_3', 'baaah', 'd'],
+    ];
+    $this->expectException(ExpectationFailedException::class);
+    $this->expectExceptionMessage('Failed for call set #2, argument #1');
+    foreach ($actual as $act) {
+      $this->assertTrue($mock->justReturn(...$act));
+    }
+  }
+
+  /**
+   * Tests a successful ::consecutiveCalls loop, with constraint args.
+   */
+  public function testConsecutiveCallsWithConstraintArguments(): void {
+    $mock = $this->createMock(ForTesting::class);
+    $mock->expects($this->exactly(3))
+      ->method('justReturn')
+      ->with(...self::consecutiveCalls(
+        ['1:test_1', $this->isType('string')],
+        ['1:test_2'],
+        ['1:test_3', $this->identicalTo('c'), 'd'],
+      ))
+      ->willReturn(TRUE);
+
+    $actual = [
+      ['1:test_1', 'a'],
+      ['1:test_2'],
+      ['1:test_3', 'c', 'd'],
+    ];
+    foreach ($actual as $act) {
+      $this->assertTrue($mock->justReturn(...$act));
+    }
+  }
+
+  /**
+   * Tests a failing ::consecutiveCalls loop, with constraint args.
+   */
+  public function testConsecutiveCallsWithConstraintArgumentsFail(): void {
+    $mock = $this->createMock(ForTesting::class);
+    $mock->expects($this->exactly(3))
+      ->method('justReturn')
+      ->with(...self::consecutiveCalls(
+        ['1:test_1', $this->isType('string')],
+        ['1:test_2'],
+        [$this->isType('object'), 'c', 'd'],
+      ))
+      ->willReturn(TRUE);
+
+    $actual = [
+      ['1:test_1', 'a'],
+      ['1:test_2'],
+      ['1:test_3', 'c', 'd'],
+    ];
+    $this->expectException(ExpectationFailedException::class);
+    $this->expectExceptionMessage('Failed for call set #2, argument #0');
+    try {
+      foreach ($actual as $act) {
+        $this->assertTrue($mock->justReturn(...$act));
+      }
+
+    }
+    catch (\Throwable $t) {
+      dump($t);
+    }
+  }
+
+  /**
+   * Tests a ::consecutiveCalls loop with more calls than defined.
+   */
+  public function testConsecutiveCallsExhaustedExpectations(): void {
+    $mock = $this->createMock(ForTesting::class);
+    $mock->expects($this->exactly(2))
+      ->method('justReturn')
+      ->with(...self::consecutiveCalls(
+        ['1:test_1', 'a'],
+      ))
+      ->willReturn(TRUE);
+
+    $actual = [
+      ['1:test_1', 'a'],
+      ['1:test_2'],
+    ];
+    foreach ($actual as $act) {
+      $this->assertTrue($mock->justReturn(...$act));
+    }
+  }
+
+}
+
+/**
+ * A class to be mocked for testing.
+ */
+class ForTesting {
+
+  /**
+   * A function used for testing.
+   *
+   * @param string $a
+   *   A mandatory parameter.
+   * @param string|null $b
+   *   An optional parameter.
+   * @param string|null $c
+   *   An optional parameter.
+   *
+   * @return bool
+   *   Always TRUE.
+   */
+  public function justReturn(string $a, ?string $b = NULL, ?string $c = NULL): bool {
+    return TRUE;
+  }
+
+}
diff --git a/core/tests/Drupal/Tests/UnitTestCase.php b/core/tests/Drupal/Tests/UnitTestCase.php
index 9306d7d362..e5e066173e 100644
--- a/core/tests/Drupal/Tests/UnitTestCase.php
+++ b/core/tests/Drupal/Tests/UnitTestCase.php
@@ -10,6 +10,7 @@
 use Drupal\Core\StringTranslation\PluralTranslatableMarkup;
 use Drupal\Tests\Traits\PhpUnitWarnings;
 use Drupal\TestTools\TestVarDumper;
+use Drupal\TestTools\Trait\MockTrait;
 use PHPUnit\Framework\TestCase;
 use Prophecy\PhpUnit\ProphecyTrait;
 use Symfony\Component\VarDumper\VarDumper;
@@ -25,6 +26,7 @@
  */
 abstract class UnitTestCase extends TestCase {
 
+  use MockTrait;
   use PhpUnitWarnings;
   use PhpUnitCompatibilityTrait;
   use ProphecyTrait;
