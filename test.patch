diff --git a/core/modules/user/src/Plugin/Validation/Constraint/ProtectedUserFieldConstraintValidator.php b/core/modules/user/src/Plugin/Validation/Constraint/ProtectedUserFieldConstraintValidator.php
index 6102ab9e78..92678f8d53 100644
--- a/core/modules/user/src/Plugin/Validation/Constraint/ProtectedUserFieldConstraintValidator.php
+++ b/core/modules/user/src/Plugin/Validation/Constraint/ProtectedUserFieldConstraintValidator.php
@@ -84,11 +84,15 @@ public function validate($items, Constraint $constraint) {
       // Special case for the password, it being empty means that the existing
       // password should not be changed, ignore empty password fields.
       $value = $items->value;
-      if ($field->getName() != 'pass' || !empty($value)) {
+$xxx = $field->getName();
+dump([__METHOD__, 'AAA', $value, $changed, $xxx]);
+      if ($xxx != 'pass' || !empty($value)) {
         // Compare the values of the field this is being validated on.
         $changed = $items->getValue() != $account_unchanged->get($field->getName())->getValue();
       }
-      if ($changed && (!$account->checkExistingPassword($account_unchanged))) {
+$yyy = $account->checkExistingPassword($account_unchanged);
+dump([__METHOD__, 'BBB', $value, $changed, $xxx, $yyy]);
+      if ($changed && (!$yyy)) {
         $this->context->addViolation($constraint->message, ['%name' => $field->getLabel()]);
       }
     }
