diff --git a/core/modules/block/tests/src/Functional/BlockHtmlTest.php b/core/modules/block/tests/src/Functional/BlockHtmlTest.php
index 8944c7a3cb..30ab1110a9 100644
--- a/core/modules/block/tests/src/Functional/BlockHtmlTest.php
+++ b/core/modules/block/tests/src/Functional/BlockHtmlTest.php
@@ -48,8 +48,7 @@ public function testHtml() {
     $this->assertFieldByXPath('//div[@id="block-test-html-block" and @data-custom-attribute="foo"]', NULL, 'HTML ID and attributes for test block are valid and on the same DOM element.');
 
     // Ensure expected markup for a menu block.
-    $elements = $this->xpath('//nav[contains(@class, :nav-class)]/ul[contains(@class, :ul-class)]/li', [':nav-class' => 'block-menu', ':ul-class' => 'menu']);
-    $this->assertTrue(!empty($elements), 'The proper block markup was found.');
+    $this->assertSession()->elementExists('xpath', '//nav[contains(@class, "block-menu")]/ul[contains(@class, "menu")]/li');
   }
 
 }
diff --git a/core/modules/block/tests/src/Functional/BlockLanguageTest.php b/core/modules/block/tests/src/Functional/BlockLanguageTest.php
index 30cf2943ef..23829e391a 100644
--- a/core/modules/block/tests/src/Functional/BlockLanguageTest.php
+++ b/core/modules/block/tests/src/Functional/BlockLanguageTest.php
@@ -115,8 +115,7 @@ public function testLanguageBlockVisibilityLanguageDelete() {
     // Ensure that the block visibility for language is gone from the UI.
     $this->drupalGet('admin/structure/block');
     $this->clickLink('Configure');
-    $elements = $this->xpath('//details[@id="edit-visibility-language"]');
-    $this->assertTrue(empty($elements));
+    $this->assertSession()->elementNotExists('xpath', '//details[@id="edit-visibility-language"]');
   }
 
   /**
diff --git a/core/modules/block/tests/src/Functional/BlockSystemBrandingTest.php b/core/modules/block/tests/src/Functional/BlockSystemBrandingTest.php
index 7a2c324f8b..6c178e5048 100644
--- a/core/modules/block/tests/src/Functional/BlockSystemBrandingTest.php
+++ b/core/modules/block/tests/src/Functional/BlockSystemBrandingTest.php
@@ -44,13 +44,10 @@ public function testSystemBrandingSettings() {
 
     // Set default block settings.
     $this->drupalGet('');
-    $site_logo_element = $this->xpath($site_logo_xpath);
-    $site_name_element = $this->xpath($site_name_xpath);
-    $site_slogan_element = $this->xpath($site_slogan_xpath);
+    $this->assertSession()->elementExists('xpath', $site_logo_xpath);
+    $this->assertSession()->elementExists('xpath', $site_name_xpath);
+    $this->assertSession()->elementExists('xpath', $site_slogan_xpath);
     // Test that all branding elements are displayed.
-    $this->assertTrue(!empty($site_logo_element), 'The branding block logo was found.');
-    $this->assertTrue(!empty($site_name_element), 'The branding block site name was found.');
-    $this->assertTrue(!empty($site_slogan_element), 'The branding block slogan was found.');
     $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:system.site');
 
     // Be sure the slogan is XSS-filtered.
@@ -58,21 +55,17 @@ public function testSystemBrandingSettings() {
       ->set('slogan', '<script>alert("Community carpentry");</script>')
       ->save();
     $this->drupalGet('');
-    $site_slogan_element = $this->xpath($site_slogan_xpath);
-    $this->assertEqual($site_slogan_element[0]->getText(), 'alert("Community carpentry");', 'The site slogan was XSS-filtered.');
+    $this->assertSession()->elementTextContains('xpath', $site_slogan_xpath, 'alert("Community carpentry");');
 
     // Turn just the logo off.
     $this->config('block.block.site-branding')
       ->set('settings.use_site_logo', 0)
       ->save();
     $this->drupalGet('');
-    $site_logo_element = $this->xpath($site_logo_xpath);
-    $site_name_element = $this->xpath($site_name_xpath);
-    $site_slogan_element = $this->xpath($site_slogan_xpath);
     // Re-test all branding elements.
-    $this->assertTrue(empty($site_logo_element), 'The branding block logo was disabled.');
-    $this->assertTrue(!empty($site_name_element), 'The branding block site name was found.');
-    $this->assertTrue(!empty($site_slogan_element), 'The branding block slogan was found.');
+    $this->assertSession()->elementNotExists('xpath', $site_logo_xpath);
+    $this->assertSession()->elementExists('xpath', $site_name_xpath);
+    $this->assertSession()->elementExists('xpath', $site_slogan_xpath);
     $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:system.site');
 
     // Turn just the site name off.
@@ -81,13 +74,10 @@ public function testSystemBrandingSettings() {
       ->set('settings.use_site_name', 0)
       ->save();
     $this->drupalGet('');
-    $site_logo_element = $this->xpath($site_logo_xpath);
-    $site_name_element = $this->xpath($site_name_xpath);
-    $site_slogan_element = $this->xpath($site_slogan_xpath);
     // Re-test all branding elements.
-    $this->assertTrue(!empty($site_logo_element), 'The branding block logo was found.');
-    $this->assertTrue(empty($site_name_element), 'The branding block site name was disabled.');
-    $this->assertTrue(!empty($site_slogan_element), 'The branding block slogan was found.');
+    $this->assertSession()->elementExists('xpath', $site_logo_xpath);
+    $this->assertSession()->elementNotExists('xpath', $site_name_xpath);
+    $this->assertSession()->elementExists('xpath', $site_slogan_xpath);
     $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:system.site');
 
     // Turn just the site slogan off.
@@ -96,13 +86,10 @@ public function testSystemBrandingSettings() {
       ->set('settings.use_site_slogan', 0)
       ->save();
     $this->drupalGet('');
-    $site_logo_element = $this->xpath($site_logo_xpath);
-    $site_name_element = $this->xpath($site_name_xpath);
-    $site_slogan_element = $this->xpath($site_slogan_xpath);
     // Re-test all branding elements.
-    $this->assertTrue(!empty($site_logo_element), 'The branding block logo was found.');
-    $this->assertTrue(!empty($site_name_element), 'The branding block site name was found.');
-    $this->assertTrue(empty($site_slogan_element), 'The branding block slogan was disabled.');
+    $this->assertSession()->elementExists('xpath', $site_logo_xpath);
+    $this->assertSession()->elementExists('xpath', $site_name_xpath);
+    $this->assertSession()->elementNotExists('xpath', $site_slogan_xpath);
     $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:system.site');
 
     // Turn the site name and the site slogan off.
@@ -111,13 +98,10 @@ public function testSystemBrandingSettings() {
       ->set('settings.use_site_slogan', 0)
       ->save();
     $this->drupalGet('');
-    $site_logo_element = $this->xpath($site_logo_xpath);
-    $site_name_element = $this->xpath($site_name_xpath);
-    $site_slogan_element = $this->xpath($site_slogan_xpath);
     // Re-test all branding elements.
-    $this->assertTrue(!empty($site_logo_element), 'The branding block logo was found.');
-    $this->assertTrue(empty($site_name_element), 'The branding block site name was disabled.');
-    $this->assertTrue(empty($site_slogan_element), 'The branding block slogan was disabled.');
+    $this->assertSession()->elementExists('xpath', $site_logo_xpath);
+    $this->assertSession()->elementNotExists('xpath', $site_name_xpath);
+    $this->assertSession()->elementNotExists('xpath', $site_slogan_xpath);
     $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:system.site');
   }
 
diff --git a/core/modules/block/tests/src/Functional/BlockTest.php b/core/modules/block/tests/src/Functional/BlockTest.php
index a7ab47a4c8..312944b509 100644
--- a/core/modules/block/tests/src/Functional/BlockTest.php
+++ b/core/modules/block/tests/src/Functional/BlockTest.php
@@ -154,9 +154,8 @@ public function testAddBlockFromLibraryWithWeight() {
         'plugin_id' => $block_name,
         'theme' => $default_theme,
       ]);
-      $links = $this->xpath('//a[contains(@href, :href)]', [':href' => $add_url->toString()]);
-      $this->assertCount(1, $links, 'Found one matching link.');
-      $this->assertEqual(t('Place block'), $links[0]->getText(), 'Found the expected link text.');
+      $this->assertSession()->elementExists('xpath', "//a[contains(@href, \"{$add_url->toString()}\")]");
+      $this->assertSession()->elementTextContains('xpath', "//a[contains(@href, \"{$add_url->toString()}\")]", 'Place block');
 
       list($path, $query_string) = explode('?', $links[0]->getAttribute('href'), 2);
       parse_str($query_string, $query_parts);
@@ -266,8 +265,7 @@ public function testBlockThemeSelector() {
       // Set the default theme and ensure the block is placed.
       $theme_settings->set('default', $theme)->save();
       $this->drupalGet('');
-      $elements = $this->xpath('//div[@id = :id]', [':id' => Html::getUniqueId('block-' . $block['id'])]);
-      $this->assertTrue(!empty($elements), 'The block was found.');
+      $this->assertSession()->elementExists('xpath', '//div[@id = "' . Html::getUniqueId('block-' . $block['id']) . '"]');
     }
   }
 
diff --git a/core/modules/block/tests/src/Functional/BlockUiTest.php b/core/modules/block/tests/src/Functional/BlockUiTest.php
index f396a306cd..bda1a1d089 100644
--- a/core/modules/block/tests/src/Functional/BlockUiTest.php
+++ b/core/modules/block/tests/src/Functional/BlockUiTest.php
@@ -93,8 +93,7 @@ public function testBlockDemoUiPage() {
     $this->drupalPlaceBlock('help_block', ['region' => 'help']);
     $this->drupalGet('admin/structure/block');
     $this->clickLink(t('Demonstrate block regions (@theme)', ['@theme' => 'Classy']));
-    $elements = $this->xpath('//div[contains(@class, "region-highlighted")]/div[contains(@class, "block-region") and contains(text(), :title)]', [':title' => 'Highlighted']);
-    $this->assertTrue(!empty($elements), 'Block demo regions are shown.');
+    $this->assertSession()->elementExists('xpath', '//div[contains(@class, "region-highlighted")]/div[contains(@class, "block-region") and contains(text(), "Highlighted")]');
 
     // Ensure that other themes can use the block demo page.
     \Drupal::service('theme_installer')->install(['test_theme']);
@@ -114,14 +113,12 @@ public function testBlockAdminUiPage() {
     // Visit the blocks admin ui.
     $this->drupalGet('admin/structure/block');
     // Look for the blocks table.
-    $blocks_table = $this->xpath("//table[@id='blocks']");
-    $this->assertTrue(!empty($blocks_table), 'The blocks table is being rendered.');
+    $this->assertSession()->elementExists('xpath', "//table[@id='blocks']");
     // Look for test blocks in the table.
     foreach ($this->blockValues as $delta => $values) {
       $block = $this->blocks[$delta];
       $label = $block->label();
-      $element = $this->xpath('//*[@id="blocks"]/tbody/tr[' . $values['tr'] . ']/td[1]/text()');
-      $this->assertEquals($element[0]->getText(), $label, 'The "' . $label . '" block title is set inside the ' . $values['settings']['region'] . ' region.');
+      $this->assertSession()->elementExists('xpath', '//*[@id="blocks"]/tbody/tr[' . $values['tr'] . ']/td[1 and text() = "' . $label . '"]');
       // Look for a test block region select form element.
       $this->assertSession()->fieldExists('blocks[' . $values['settings']['id'] . '][region]');
       // Move the test block to the header region.
@@ -141,8 +138,7 @@ public function testBlockAdminUiPage() {
     // Add a block with a machine name the same as a region name.
     $this->drupalPlaceBlock('system_powered_by_block', ['region' => 'header', 'id' => 'header']);
     $this->drupalGet('admin/structure/block');
-    $element = $this->xpath('//tr[contains(@class, :class)]', [':class' => 'region-title-header']);
-    $this->assertTrue(!empty($element));
+    $this->assertSession()->elementExists('xpath', '//tr[contains(@class, "region-title-header")]');
 
     // Ensure hidden themes do not appear in the UI. Enable another non base
     // theme and place the local tasks block.
@@ -174,17 +170,9 @@ public function testBlockAdminUiPage() {
    * Tests the block categories on the listing page.
    */
   public function testCandidateBlockList() {
-    $arguments = [
-      ':title' => 'Display message',
-      ':category' => 'Block test',
-      ':href' => 'admin/structure/block/add/test_block_instantiation/classy',
-    ];
-    $pattern = '//tr[.//td/div[text()=:title] and .//td[text()=:category] and .//td//a[contains(@href, :href)]]';
-
     $this->drupalGet('admin/structure/block');
     $this->clickLink('Place block');
-    $elements = $this->xpath($pattern, $arguments);
-    $this->assertTrue(!empty($elements), 'The test block appears in the category for its module.');
+    $this->assertSession()->elementExists('xpath', "//tr[.//td/div[text() = \"Display message\"] and .//td[text() = \"Block test\"] and .//td//a[contains(@href, \"admin/structure/block/add/test_block_instantiation/classy\")]]");
 
     // Trigger the custom category addition in block_test_block_alter().
     $this->container->get('state')->set('block_test_info_alter', TRUE);
@@ -192,25 +180,16 @@ public function testCandidateBlockList() {
 
     $this->drupalGet('admin/structure/block');
     $this->clickLink('Place block');
-    $arguments[':category'] = 'Custom category';
-    $elements = $this->xpath($pattern, $arguments);
-    $this->assertTrue(!empty($elements), 'The test block appears in a custom category controlled by block_test_block_alter().');
+    $this->assertSession()->elementExists('xpath', "//tr[.//td/div[text() = \"Display message\"] and .//td[text() = \"Custom category\"] and .//td//a[contains(@href, \"admin/structure/block/add/test_block_instantiation/classy\")]]");
   }
 
   /**
    * Tests the behavior of unsatisfied context-aware blocks.
    */
   public function testContextAwareUnsatisfiedBlocks() {
-    $arguments = [
-      ':category' => 'Block test',
-      ':href' => 'admin/structure/block/add/test_context_aware_unsatisfied/classy',
-      ':text' => 'Test context-aware unsatisfied block',
-    ];
-
     $this->drupalGet('admin/structure/block');
     $this->clickLink('Place block');
-    $elements = $this->xpath('//tr[.//td/div[text()=:text] and .//td[text()=:category] and .//td//a[contains(@href, :href)]]', $arguments);
-    $this->assertTrue(empty($elements), 'The context-aware test block does not appear.');
+    $this->assertSession()->elementNotExists('xpath', '//tr[.//td/div[text() = "Test context-aware unsatisfied block"] and .//td[text() = "Block test"] and .//td//a[contains(@href, "admin/structure/block/add/test_context_aware_unsatisfied/classy")]]');
 
     $definition = \Drupal::service('plugin.manager.block')->getDefinition('test_context_aware_unsatisfied');
     $this->assertTrue(!empty($definition), 'The context-aware test block does not exist.');
@@ -226,17 +205,10 @@ public function testContextAwareBlocks() {
     $this->assertNoRaw($expected_text);
 
     $block_url = 'admin/structure/block/add/test_context_aware/classy';
-    $arguments = [
-      ':title' => 'Test context-aware block',
-      ':category' => 'Block test',
-      ':href' => $block_url,
-    ];
-    $pattern = '//tr[.//td/div[text()=:title] and .//td[text()=:category] and .//td//a[contains(@href, :href)]]';
 
     $this->drupalGet('admin/structure/block');
     $this->clickLink('Place block');
-    $elements = $this->xpath($pattern, $arguments);
-    $this->assertTrue(!empty($elements), 'The context-aware test block appears.');
+    $this->assertSession()->elementExists('xpath', "//tr[.//td/div[text() = \"Test context-aware block\"] and .//td[text() = \"Block test\"] and .//td//a[contains(@href, \"{$block_url}\")]]");
     $definition = \Drupal::service('plugin.manager.block')->getDefinition('test_context_aware');
     $this->assertTrue(!empty($definition), 'The context-aware test block exists.');
     $edit = [
@@ -357,15 +329,8 @@ public function testBlockPlacementIndicator() {
    */
   public function testBlockValidateErrors() {
     $this->drupalPostForm('admin/structure/block/add/test_settings_validation/classy', ['region' => 'content', 'settings[digits]' => 'abc'], t('Save block'));
-
-    $arguments = [':message' => 'Only digits are allowed'];
-    $pattern = '//div[contains(@class,"messages messages--error")]/div[contains(text()[2],:message)]';
-    $elements = $this->xpath($pattern, $arguments);
-    $this->assertNotEmpty($elements, 'Plugin error message found in parent form.');
-
-    $error_class_pattern = '//div[contains(@class,"form-item-settings-digits")]/input[contains(@class,"error")]';
-    $error_class = $this->xpath($error_class_pattern);
-    $this->assertNotEmpty($error_class, 'Plugin error class found in parent form.');
+    $this->assertSession()->elementExists('xpath', '//div[contains(@class,"messages messages--error")]/div[contains(text()[2],"Only digits are allowed")]');
+    $this->assertSession()->elementExists('xpath', '//div[contains(@class,"form-item-settings-digits")]/input[contains(@class,"error")]');
   }
 
   /**
diff --git a/core/modules/block/tests/src/Functional/Views/DisplayBlockTest.php b/core/modules/block/tests/src/Functional/Views/DisplayBlockTest.php
index 089f9005e8..8d661cf042 100644
--- a/core/modules/block/tests/src/Functional/Views/DisplayBlockTest.php
+++ b/core/modules/block/tests/src/Functional/Views/DisplayBlockTest.php
@@ -79,21 +79,15 @@ public function testBlockCategory() {
     $edit['block[style][row_plugin]'] = 'fields';
     $this->drupalPostForm('admin/structure/views/add', $edit, t('Save and edit'));
 
-    $pattern = '//tr[.//td[text()=:category] and .//td//a[contains(@href, :href)]]';
-
     // Test that the block was given a default category corresponding to its
     // base table.
-    $arguments = [
-      ':href' => Url::fromRoute('block.admin_add', [
-        'plugin_id' => 'views_block:' . $edit['id'] . '-block_1',
-        'theme' => 'classy',
-      ])->toString(),
-      ':category' => 'Lists (Views)',
-    ];
     $this->drupalGet('admin/structure/block');
     $this->clickLink('Place block');
-    $elements = $this->xpath($pattern, $arguments);
-    $this->assertTrue(!empty($elements), 'The test block appears in the category for its base table.');
+    $href = Url::fromRoute('block.admin_add', [
+      'plugin_id' => 'views_block:' . $edit['id'] . '-block_1',
+      'theme' => 'classy',
+    ])->toString();
+    $this->assertSession()->elementExists('xpath', "//tr[.//td[text() = \"Lists (Views)\"] and .//td//a[contains(@href, \"{$href}\")]]");
 
     // Duplicate the block before changing the category.
     $this->drupalPostForm('admin/structure/views/view/' . $edit['id'] . '/edit/block_1', [], t('Duplicate @display_title', ['@display_title' => 'Block']));
@@ -101,8 +95,7 @@ public function testBlockCategory() {
 
     // Change the block category to a random string.
     $this->drupalGet('admin/structure/views/view/' . $edit['id'] . '/edit/block_1');
-    $link = $this->xpath('//a[@id="views-block-1-block-category" and normalize-space(text())=:category]', $arguments);
-    $this->assertTrue(!empty($link));
+    $this->assertSession()->elementExists('xpath', '//a[@id="views-block-1-block-category" and normalize-space(text()) = "Lists (Views)"]');
     $this->clickLink(t('Lists (Views)'));
     $category = $this->randomString();
     $this->drupalPostForm(NULL, ['block_category' => $category], t('Apply'));
@@ -114,31 +107,21 @@ public function testBlockCategory() {
     $this->drupalPostForm(NULL, [], t('Save'));
 
     // Test that the blocks are listed under the correct categories.
-    $arguments[':category'] = $category;
     $this->drupalGet('admin/structure/block');
     $this->clickLink('Place block');
-    $elements = $this->xpath($pattern, $arguments);
-    $this->assertTrue(!empty($elements), 'The test block appears in the custom category.');
-
-    $arguments = [
-      ':href' => Url::fromRoute('block.admin_add', [
-        'plugin_id' => 'views_block:' . $edit['id'] . '-block_2',
-        'theme' => 'classy',
-      ])->toString(),
-      ':category' => 'Lists (Views)',
-    ];
-    $elements = $this->xpath($pattern, $arguments);
-    $this->assertTrue(!empty($elements), 'The first duplicated test block remains in the original category.');
-
-    $arguments = [
-      ':href' => Url::fromRoute('block.admin_add', [
-        'plugin_id' => 'views_block:' . $edit['id'] . '-block_3',
-        'theme' => 'classy',
-      ])->toString(),
-      ':category' => $category,
-    ];
-    $elements = $this->xpath($pattern, $arguments);
-    $this->assertTrue(!empty($elements), 'The second duplicated test block appears in the custom category.');
+    $this->assertSession()->elementExists('xpath', "//tr[.//td[text() = \"{$category}\"] and .//td//a[contains(@href, \"{$href}\")]]");
+
+    $href = Url::fromRoute('block.admin_add', [
+      'plugin_id' => 'views_block:' . $edit['id'] . '-block_2',
+      'theme' => 'classy',
+    ])->toString();
+    $this->assertSession()->elementNotExists('xpath', "//tr[.//td[text() = \"Lists (Views)\"] and .//td//a[contains(@href, \"{$href}\")]]");
+
+    $href = Url::fromRoute('block.admin_add', [
+      'plugin_id' => 'views_block:' . $edit['id'] . '-block_3',
+      'theme' => 'classy',
+    ])->toString();
+    $this->assertSession()->elementExists('xpath', "//tr[.//td[text() = \"{$category}\"] and .//td//a[contains(@href, \"{$href}\")]]");
   }
 
   /**
@@ -201,8 +184,7 @@ public function testViewsBlockForm() {
     $this->drupalLogin($this->drupalCreateUser(['administer blocks']));
     $default_theme = $this->config('system.theme')->get('default');
     $this->drupalGet('admin/structure/block/add/views_block:test_view_block-block_1/' . $default_theme);
-    $elements = $this->xpath('//input[@name="label"]');
-    $this->assertTrue(empty($elements), 'The label field is not found for Views blocks.');
+    $this->assertSession()->fieldNotExists('label');
     // Test that the machine name field is hidden from display and has been
     // saved as expected from the default value.
     $this->assertSession()->fieldNotExists('edit-machine-name', NULL);
@@ -263,8 +245,7 @@ public function testBlockRendering() {
     $block = $this->drupalPlaceBlock('views_block:test_view_block-block_1', ['label' => 'test_view_block-block_1:1', 'views_label' => 'Custom title']);
     $this->drupalGet('');
 
-    $result = $this->xpath('//div[contains(@class, "region-sidebar-first")]/div[contains(@class, "block-views")]/h2');
-    $this->assertEqual($result[0]->getText(), 'Custom title');
+    $this->assertSession()->elementTextContains('xpath', '//div[contains(@class, "region-sidebar-first")]/div[contains(@class, "block-views")]/h2', 'Custom title');
 
     // Don't override the title anymore.
     $plugin = $block->getPlugin();
@@ -272,16 +253,14 @@ public function testBlockRendering() {
     $block->save();
 
     $this->drupalGet('');
-    $result = $this->xpath('//div[contains(@class, "region-sidebar-first")]/div[contains(@class, "block-views")]/h2');
-    $this->assertEqual($result[0]->getText(), 'test_view_block');
+    $this->assertSession()->elementTextContains('xpath', '//div[contains(@class, "region-sidebar-first")]/div[contains(@class, "block-views")]/h2', 'test_view_block');
 
     // Hide the title.
     $block->getPlugin()->setConfigurationValue('label_display', FALSE);
     $block->save();
 
     $this->drupalGet('');
-    $result = $this->xpath('//div[contains(@class, "region-sidebar-first")]/div[contains(@class, "block-views")]/h2');
-    $this->assertTrue(empty($result), 'The title is not visible.');
+    $this->assertSession()->elementNotExists('xpath', '//div[contains(@class, "region-sidebar-first")]/div[contains(@class, "block-views")]/h2');
 
     $this->assertCacheTags(array_merge($block->getCacheTags(), ['block_view', 'config:block_list', 'config:system.site', 'config:views.view.test_view_block', 'http_response', 'rendered']));
   }
@@ -299,14 +278,14 @@ public function testBlockEmptyRendering() {
 
     $block = $this->drupalPlaceBlock('views_block:test_view_block-block_1', ['label' => 'test_view_block-block_1:1', 'views_label' => 'Custom title']);
     $this->drupalGet('');
-    $this->assertCount(1, $this->xpath('//div[contains(@class, "block-views-blocktest-view-block-block-1")]'));
+    $this->assertSession()->elementExists('xpath', '//div[contains(@class, "block-views-blocktest-view-block-block-1")]');
 
     $display = &$view->getDisplay('block_1');
     $display['display_options']['block_hide_empty'] = TRUE;
     $view->save();
 
     $this->drupalGet($url);
-    $this->assertCount(0, $this->xpath('//div[contains(@class, "block-views-blocktest-view-block-block-1")]'));
+    $this->assertSession()->elementNotExists('xpath', '//div[contains(@class, "block-views-blocktest-view-block-block-1")]');
     // Ensure that the view cacheability metadata is propagated even, for an
     // empty block.
     $this->assertCacheTags(array_merge($block->getCacheTags(), ['block_view', 'config:block_list', 'config:views.view.test_view_block', 'http_response', 'rendered']));
@@ -326,7 +305,7 @@ public function testBlockEmptyRendering() {
     $view->save();
 
     $this->drupalGet($url);
-    $this->assertCount(1, $this->xpath('//div[contains(@class, "block-views-blocktest-view-block-block-1")]'));
+    $this->assertSession()->elementExists('xpath', '//div[contains(@class, "block-views-blocktest-view-block-block-1")]');
     $this->assertCacheTags(array_merge($block->getCacheTags(), ['block_view', 'config:block_list', 'config:views.view.test_view_block', 'http_response', 'rendered']));
     $this->assertCacheContexts(['url.query_args:_wrapper_format']);
 
@@ -344,7 +323,7 @@ public function testBlockEmptyRendering() {
     $view->save();
 
     $this->drupalGet($url);
-    $this->assertCount(0, $this->xpath('//div[contains(@class, "block-views-blocktest-view-block-block-1")]'));
+    $this->assertSession()->elementNotExists('xpath', '//div[contains(@class, "block-views-blocktest-view-block-block-1")]');
     $this->assertCacheTags(array_merge($block->getCacheTags(), ['block_view', 'config:block_list', 'config:views.view.test_view_block', 'http_response', 'rendered']));
     $this->assertCacheContexts(['url.query_args:_wrapper_format']);
 
@@ -361,7 +340,7 @@ public function testBlockEmptyRendering() {
     $view->save();
 
     $this->drupalGet($url);
-    $this->assertCount(1, $this->xpath('//div[contains(@class, "block-views-blocktest-view-block-block-1")]'));
+    $this->assertSession()->elementExists('xpath', '//div[contains(@class, "block-views-blocktest-view-block-block-1")]');
     $this->assertCacheTags(array_merge($block->getCacheTags(), ['block_view', 'config:block_list', 'config:views.view.test_view_block', 'http_response', 'rendered']));
     $this->assertCacheContexts(['url.query_args:_wrapper_format']);
   }
