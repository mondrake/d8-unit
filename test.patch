diff --git a/core/drupalci.yml b/core/drupalci.yml
index 82edd46046..c0d6553d91 100644
--- a/core/drupalci.yml
+++ b/core/drupalci.yml
@@ -25,24 +25,24 @@ build:
         testgroups: '--all'
         suppress-deprecations: false
         halt-on-fail: false
-      run_tests.build:
-        # Limit concurrency due to disk space concerns.
-        concurrency: 15
-        types: 'PHPUnit-Build'
-        testgroups: '--all'
-        suppress-deprecations: false
-        halt-on-fail: false
-      run_tests.functional:
-        types: 'PHPUnit-Functional'
-        testgroups: '--all'
-        suppress-deprecations: false
-        halt-on-fail: false
-      run_tests.javascript:
-        concurrency: 15
-        types: 'PHPUnit-FunctionalJavascript'
-        testgroups: '--all'
-        suppress-deprecations: false
-        halt-on-fail: false
-      # Run nightwatch testing.
-      # @see https://www.drupal.org/project/drupal/issues/2869825
-      nightwatchjs:
+#      run_tests.build:
+#        # Limit concurrency due to disk space concerns.
+#        concurrency: 15
+#        types: 'PHPUnit-Build'
+#        testgroups: '--all'
+#        suppress-deprecations: false
+#        halt-on-fail: false
+#      run_tests.functional:
+#        types: 'PHPUnit-Functional'
+#        testgroups: '--all'
+#        suppress-deprecations: false
+#        halt-on-fail: false
+#      run_tests.javascript:
+#        concurrency: 15
+#        types: 'PHPUnit-FunctionalJavascript'
+#        testgroups: '--all'
+#        suppress-deprecations: false
+#        halt-on-fail: false
+#      # Run nightwatch testing.
+#      # @see https://www.drupal.org/project/drupal/issues/2869825
+#      nightwatchjs:
diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index 3f194e1aa0..0571c02d35 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -157,41 +157,9 @@
   protected $unprefixedTablesMap = [];
 
   /**
-   * List of escaped database, table, and field names, keyed by unescaped names.
-   *
-   * @var array
-   *
-   * @deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. This is no
-   *   longer used. Use \Drupal\Core\Database\Connection::$escapedTables or
-   *   \Drupal\Core\Database\Connection::$escapedFields instead.
-   *
-   * @see https://www.drupal.org/node/2986894
+   * @todo
    */
-  protected $escapedNames = [];
-
-  /**
-   * List of escaped table names, keyed by unescaped names.
-   *
-   * @var array
-   */
-  protected $escapedTables = [];
-
-  /**
-   * List of escaped field names, keyed by unescaped names.
-   *
-   * There are cases in which escapeField() is called on an empty string. In
-   * this case it should always return an empty string.
-   *
-   * @var array
-   */
-  protected $escapedFields = ["" => ""];
-
-  /**
-   * List of escaped aliases names, keyed by unescaped aliases.
-   *
-   * @var array
-   */
-  protected $escapedAliases = [];
+  protected $identifierHandler;
 
   /**
    * Post-root (non-nested) transaction commit callbacks.
@@ -201,15 +169,16 @@
   protected $rootTransactionEndCallbacks = [];
 
   /**
-   * The identifier quote characters for the database type.
-   *
-   * An array containing the start and end identifier quote characters for the
-   * database type. The ANSI SQL standard identifier quote character is a double
-   * quotation mark.
+   * Implements the magic __get() method.
    *
-   * @var string[]
+   * @todo Remove the method in Drupal 10.
    */
-  protected $identifierQuotes;
+  public function __get($name) {
+    if (in_array($name, ['escapedNames', 'escapedTables', 'escapedFields', 'escapedAliases', 'identifierQuotes'])) {
+      @trigger_error("Connection::\${$name} should not be accessed in drupal:9.x.0 and is removed from drupal:10.0.0. This is no longer used. See https://www.drupal.org/node/1234567", E_USER_DEPRECATED);
+      return [];
+    }
+  }
 
   /**
    * Constructs a Connection object.
@@ -223,12 +192,6 @@
    *   - Other driver-specific options.
    */
   public function __construct(\PDO $connection, array $connection_options) {
-    if ($this->identifierQuotes === NULL) {
-      @trigger_error('In drupal:10.0.0 not setting the $identifierQuotes property in the concrete Connection class will result in an RuntimeException. See https://www.drupal.org/node/2986894', E_USER_DEPRECATED);
-      $this->identifierQuotes = ['', ''];
-    }
-
-    assert(count($this->identifierQuotes) === 2 && Inspector::assertAllStrings($this->identifierQuotes), '\Drupal\Core\Database\Connection::$identifierQuotes must contain 2 string values');
     // The 'transactions' option is deprecated.
     if (isset($connection_options['transactions'])) {
       @trigger_error('Passing a \'transactions\' connection option to ' . __METHOD__ . ' is deprecated in drupal:9.1.0 and is removed in drupal:10.0.0. All database drivers must support transactions. See https://www.drupal.org/node/2278745', E_USER_DEPRECATED);
@@ -413,7 +376,7 @@ protected function setPrefix($prefix) {
       $this->prefixes = ['default' => $prefix];
     }
 
-    [$start_quote, $end_quote] = $this->identifierQuotes;
+    [$start_quote, $end_quote] = ['"', '"'];
     // Set up variables for use in prefixTables(). Replace table-specific
     // prefixes first.
     $this->prefixSearch = [];
@@ -442,6 +405,10 @@ protected function setPrefix($prefix) {
         $this->unprefixedTablesMap[$prefix . $table_name] = $table_name;
       }
     }
+
+    if ($this->identifierHandler) {
+      $this->identifierHandler->setPrefix($this->prefixes);
+    }
   }
 
   /**
@@ -459,7 +426,12 @@ protected function setPrefix($prefix) {
    *   The properly-prefixed string.
    */
   public function prefixTables($sql) {
-    return str_replace($this->prefixSearch, $this->prefixReplace, $sql);
+    $replacements = $tables = [];
+    preg_match_all('/(\{(\S*)\})/', $sql, $tables, PREG_SET_ORDER, 0);
+    foreach ($tables as $table) {
+      $replacements[$table[1]] = $this->identifierHandler->getPlatformTableName($table[2], TRUE, TRUE);
+    }
+    return str_replace(array_keys($replacements), array_values($replacements), $sql);
   }
 
   /**
@@ -483,7 +455,14 @@ public function prefixTables($sql) {
    *   This method should only be called by database API code.
    */
   public function quoteIdentifiers($sql) {
-    return str_replace(['[', ']'], $this->identifierQuotes, $sql);
+    preg_match_all('/(\[(.+?)\])/', $sql, $matches);
+    $identifiers = [];
+    $i = 0;
+    foreach($matches[1] as $match) {
+      $identifiers[$match] = $this->identifierHandler->getPlatformIdentifierName($matches[2][$i]);
+      $i++;
+    }
+    return strtr($sql, $identifiers);
   }
 
   /**
@@ -524,9 +503,7 @@ public function getUnprefixedTablesMap() {
    * @return string
    */
   public function getFullQualifiedTableName($table) {
-    $options = $this->getConnectionOptions();
-    $prefix = $this->tablePrefix($table);
-    return $options['database'] . '.' . $prefix . $table;
+    return $this->identifierHandler->getPlatformDatabaseName($this->getConnectionOptions()['database']) . '.' . $this->identifierHandler->getPlatformTableName($table, TRUE, TRUE);
   }
 
   /**
@@ -679,7 +656,7 @@ public function makeSequenceName($table, $field) {
     $sequence_name = $this->prefixTables('{' . $table . '}_' . $field . '_seq');
     // Remove identifier quotes as we are constructing a new name from a
     // prefixed and quoted table name.
-    return str_replace($this->identifierQuotes, '', $sequence_name);
+    return str_replace(['"', '"'], '', $sequence_name);
   }
 
   /**
@@ -990,6 +967,10 @@ public function getDriverClass($class) {
       }
       else {
         switch ($class) {
+          case 'IdentifierHandler':
+            $this->driverClasses[$class] = IdentifierHandler::class;
+            break;
+
           case 'Condition':
             $this->driverClasses[$class] = Condition::class;
             break;
@@ -1228,9 +1209,7 @@ public function condition($conjunction) {
    *   The sanitized database name.
    */
   public function escapeDatabase($database) {
-    $database = preg_replace('/[^A-Za-z0-9_]+/', '', $database);
-    [$start_quote, $end_quote] = $this->identifierQuotes;
-    return $start_quote . $database . $end_quote;
+    return $this->identifierHandler->getPlatformDatabaseName($database);
   }
 
   /**
@@ -1251,10 +1230,7 @@ public function escapeDatabase($database) {
    * @see \Drupal\Core\Database\Connection::setPrefix()
    */
   public function escapeTable($table) {
-    if (!isset($this->escapedTables[$table])) {
-      $this->escapedTables[$table] = preg_replace('/[^A-Za-z0-9_.]+/', '', $table);
-    }
-    return $this->escapedTables[$table];
+    return $this->identifierHandler->getPlatformTableName($table);
   }
 
   /**
@@ -1271,14 +1247,7 @@ public function escapeTable($table) {
    *   The sanitized field name.
    */
   public function escapeField($field) {
-    if (!isset($this->escapedFields[$field])) {
-      $escaped = preg_replace('/[^A-Za-z0-9_.]+/', '', $field);
-      [$start_quote, $end_quote] = $this->identifierQuotes;
-      // Sometimes fields have the format table_alias.field. In such cases
-      // both identifiers should be quoted, for example, "table_alias"."field".
-      $this->escapedFields[$field] = $start_quote . str_replace('.', $end_quote . '.' . $start_quote, $escaped) . $end_quote;
-    }
-    return $this->escapedFields[$field];
+    return $this->identifierHandler->getPlatformColumnName($field);
   }
 
   /**
@@ -1296,11 +1265,7 @@ public function escapeField($field) {
    *   The sanitized alias name.
    */
   public function escapeAlias($field) {
-    if (!isset($this->escapedAliases[$field])) {
-      [$start_quote, $end_quote] = $this->identifierQuotes;
-      $this->escapedAliases[$field] = $start_quote . preg_replace('/[^A-Za-z0-9_]+/', '', $field) . $end_quote;
-    }
-    return $this->escapedAliases[$field];
+    return $this->identifierHandler->getPlatformAliasName($field);
   }
 
   /**
@@ -1968,4 +1933,18 @@ public function getProvider(): string {
     return ($first === 'Drupal' && strtolower($second) === $second) ? $second : 'core';
   }
 
+  /**
+   * @todo
+   */
+  public function getIdentifierHandler(): IdentifierHandler {
+    return $this->identifierHandler;
+  }
+
+  /**
+   * @todo remove, debug only
+   */
+  public function dumpIdentifiers(): void {
+    $this->identifierHandler->doDump();
+  }
+
 }
diff --git a/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php b/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php
index fe281cb3d9..df25f7c570 100644
--- a/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php
+++ b/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php
@@ -85,9 +85,15 @@ class Connection extends DatabaseConnection {
   const MIN_MAX_ALLOWED_PACKET = 1024;
 
   /**
-   * {@inheritdoc}
+   * Constructs a connection object.
    */
-  protected $identifierQuotes = ['"', '"'];
+  public function __construct(\PDO $connection, array $connection_options) {
+    parent::__construct($connection, $connection_options);
+
+    // Initialize the identifier handler.
+    $identifier_handler_class = $this->getDriverClass('IdentifierHandler');
+    $this->identifierHandler = new $identifier_handler_class($this->prefixes);
+  }
 
   /**
    * {@inheritdoc}
diff --git a/core/lib/Drupal/Core/Database/Driver/pgsql/Connection.php b/core/lib/Drupal/Core/Database/Driver/pgsql/Connection.php
index b996735aab..92cac62667 100644
--- a/core/lib/Drupal/Core/Database/Driver/pgsql/Connection.php
+++ b/core/lib/Drupal/Core/Database/Driver/pgsql/Connection.php
@@ -68,11 +68,6 @@ class Connection extends DatabaseConnection {
    */
   protected $transactionalDDLSupport = TRUE;
 
-  /**
-   * {@inheritdoc}
-   */
-  protected $identifierQuotes = ['"', '"'];
-
   /**
    * Constructs a connection object.
    */
@@ -86,6 +81,10 @@ public function __construct(\PDO $connection, array $connection_options) {
     if (isset($connection_options['init_commands'])) {
       $this->connection->exec(implode('; ', $connection_options['init_commands']));
     }
+
+    // Initialize the identifier handler.
+    $identifier_handler_class = $this->getDriverClass('IdentifierHandler');
+    $this->identifierHandler = new $identifier_handler_class($this->prefixes);
   }
 
   /**
diff --git a/core/lib/Drupal/Core/Database/Driver/sqlite/Connection.php b/core/lib/Drupal/Core/Database/Driver/sqlite/Connection.php
index 64957038d2..7e688b14ef 100644
--- a/core/lib/Drupal/Core/Database/Driver/sqlite/Connection.php
+++ b/core/lib/Drupal/Core/Database/Driver/sqlite/Connection.php
@@ -74,11 +74,6 @@ class Connection extends DatabaseConnection {
    */
   protected $transactionalDDLSupport = TRUE;
 
-  /**
-   * {@inheritdoc}
-   */
-  protected $identifierQuotes = ['"', '"'];
-
   /**
    * Constructs a \Drupal\Core\Database\Driver\sqlite\Connection object.
    */
@@ -111,6 +106,10 @@ public function __construct(\PDO $connection, array $connection_options) {
     }
     // Regenerate the prefixes replacement table.
     $this->setPrefix($prefixes);
+
+    // Initialize the identifier handler.
+    $identifier_handler_class = $this->getDriverClass('IdentifierHandler');
+    $this->identifierHandler = new $identifier_handler_class($prefixes);
   }
 
   /**
diff --git a/core/lib/Drupal/Core/Database/IdentifierHandler.php b/core/lib/Drupal/Core/Database/IdentifierHandler.php
new file mode 100644
index 0000000000..86d6dbae2f
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/IdentifierHandler.php
@@ -0,0 +1,166 @@
+<?php
+
+namespace Drupal\Core\Database;
+
+/**
+ * @todo
+ */
+class IdentifierHandler {
+
+  const GENERIC = 0x0;
+  const DATABASE = 0x4;
+  const SEQUENCE = 0x5;
+  const TABLE = 0x7;
+  const PREFIXED_TABLE = 0x8;
+  const COLUMN = 0xC;
+  const INDEX = 0xD;
+  const ALIAS = 0x10;
+
+  /**
+   * The identifier quote characters for the database type.
+   *
+   * An array containing the start and end identifier quote characters for the
+   * database type. The ANSI SQL standard identifier quote character is a double
+   * quotation mark.
+   *
+   * @var string[]
+   */
+  protected $identifierQuotes;
+
+  /**
+   * The table prefixes used by this database connection.
+   *
+   * @var array
+   */
+  protected $prefixes;
+
+  /**
+   * @todo
+   */
+  protected $identifiers;
+
+  /**
+   * Constructs a Connection object.
+   *
+   * @param string[] $identifier_quotes
+   *   The identifier quote characters. Defaults to an empty strings.
+   * @param string[] $prefixes
+   *   @todo
+   */
+  public function __construct(array $prefixes, array $identifier_quotes = ['"', '"']) {
+    $this->setPrefix($prefixes);
+    $this->identifierQuotes = $identifier_quotes;
+  }
+
+  /**
+   * Set the list of prefixes used by this database connection.
+   *
+   * @param array $prefix
+   *   An array of prefixes, in any of the multiple forms documented in
+   *   default.settings.php.
+   */
+  public function setPrefix(array $prefix): void {
+    $this->prefixes = $prefix;
+  }
+
+  /**
+   * @todo
+   */
+  protected function setIdentifier(string $identifier, string $platform_identifier, int $type): void {
+    $is_alias = (bool) ($type & static::ALIAS);
+    $type = $type & 0xF;
+    if (!$is_alias) {
+      $this->identifiers['identifier'][$identifier][$type] = $platform_identifier;
+      $this->identifiers['platform'][$platform_identifier][$type] = $identifier;
+    }
+    else {
+      $this->identifiers['identifier'][$identifier][static::ALIAS][$type] = $platform_identifier;
+      $this->identifiers['platform'][$platform_identifier][static::ALIAS][$type] = $identifier;
+    }
+  }
+
+  /**
+   * @todo
+   */
+  protected function hasIdentifier(string $identifier, int $type = 0): bool {
+    return isset($this->identifiers['identifier'][$identifier][$type]);
+  }
+
+  /**
+   * @todo remove, debug only
+   */
+  public function doDump() {
+    dump($this->identifiers);
+  }
+
+  /**
+   * @todo
+   */
+  public function getPlatformIdentifierName(string $original_name, bool $quoted = TRUE): string {
+    if (!$this->hasIdentifier($original_name, static::GENERIC)) {
+      $this->setIdentifier($original_name, $original_name, static::GENERIC);
+    }
+    [$start_quote, $end_quote] = $this->identifierQuotes;
+    $identifier = $this->identifiers['identifier'][$original_name][static::GENERIC];
+    return $quoted ? $start_quote . $identifier . $end_quote : $identifier;
+  }
+
+  /**
+   * @todo
+   */
+  public function getPlatformDatabaseName(string $original_name, bool $quoted = TRUE): string {
+    if (!$this->hasIdentifier($original_name, static::DATABASE)) {
+      $this->setIdentifier($original_name, preg_replace('/[^A-Za-z0-9_]+/', '', $original_name), static::DATABASE);
+    }
+    [$start_quote, $end_quote] = $this->identifierQuotes;
+    return $quoted ?
+      $start_quote . $this->identifiers['identifier'][$original_name][static::DATABASE] . $end_quote :
+      $this->identifiers['identifier'][$original_name][static::DATABASE];
+  }
+
+  /**
+   * @todo
+   */
+  public function getPlatformTableName(string $original_name, bool $prefixed = FALSE, bool $quoted = FALSE): string {
+    if (!$this->hasIdentifier($original_name, static::TABLE)) {
+      $table_name = preg_replace('/[^A-Za-z0-9_.]+/', '', $original_name);
+      $this->setIdentifier($original_name, $table_name, static::TABLE);
+      $prefix = isset($this->prefixes[$table_name]) ? $this->prefixes[$table_name] : $this->prefixes['default'];
+      $this->setIdentifier($original_name, $prefix . $table_name, static::PREFIXED_TABLE);
+    }
+    [$start_quote, $end_quote] = $this->identifierQuotes;
+    $table = $prefixed ? $this->identifiers['identifier'][$original_name][static::PREFIXED_TABLE] : $this->identifiers['identifier'][$original_name][static::TABLE];
+    return $quoted ? $start_quote . str_replace(".", "$end_quote.$start_quote", $table) . $end_quote : $table;
+  }
+
+  /**
+   * @todo
+   */
+  public function getPlatformColumnName(string $original_name, bool $quoted = TRUE): string {
+    if ($original_name === '') {
+      return '';
+    }
+    if (!$this->hasIdentifier($original_name, static::COLUMN)) {
+      $this->setIdentifier($original_name, preg_replace('/[^A-Za-z0-9_.]+/', '', $original_name), static::COLUMN);
+    }
+    // Sometimes fields have the format table_alias.field. In such cases
+    // both identifiers should be quoted, for example, "table_alias"."field".
+    [$start_quote, $end_quote] = $this->identifierQuotes;
+    return $quoted ?
+      $start_quote . str_replace(".", "$end_quote.$start_quote", $this->identifiers['identifier'][$original_name][static::COLUMN]) . $end_quote :
+      $this->identifiers['identifier'][$original_name][static::COLUMN];
+  }
+
+  /**
+   * @todo
+   */
+  public function getPlatformAliasName(string $original_name, int $type = 0, bool $quoted = TRUE): string {
+    if (!$this->hasIdentifier($original_name, static::ALIAS)) {
+      $this->setIdentifier($original_name, preg_replace('/[^A-Za-z0-9_]+/', '', $original_name), $type | static::ALIAS);
+    }
+    [$start_quote, $end_quote] = $this->identifierQuotes;
+    $alias = $this->identifiers['identifier'][$original_name][static::ALIAS][$type] ?? $this->identifiers['identifier'][$original_name][static::ALIAS][0];
+    return $quoted ? $start_quote . $alias . $end_quote : $alias;
+  }
+
+}
diff --git a/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php b/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php
index 146ba0891c..d90fb019c7 100644
--- a/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php
+++ b/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php
@@ -45,12 +45,15 @@ class StubConnection extends Connection {
    *   A class to use as a statement class for deprecation testing.
    */
   public function __construct(\PDO $connection, array $connection_options, $identifier_quotes = ['', ''], $statement_class = NULL) {
-    $this->identifierQuotes = $identifier_quotes;
     if ($statement_class) {
       $this->statementClass = $statement_class;
       $this->statementWrapperClass = NULL;
     }
     parent::__construct($connection, $connection_options);
+
+    // Initialize the identifier handler.
+    $identifier_handler_class = $this->getDriverClass('IdentifierHandler');
+    $this->identifierHandler = new $identifier_handler_class($this->prefixes, $identifier_quotes);
   }
 
   /**
