diff --git a/core/modules/image/tests/src/Functional/ImageAdminStylesTest.php b/core/modules/image/tests/src/Functional/ImageAdminStylesTest.php
index e38cf39e5c..05ea7060b5 100644
--- a/core/modules/image/tests/src/Functional/ImageAdminStylesTest.php
+++ b/core/modules/image/tests/src/Functional/ImageAdminStylesTest.php
@@ -68,7 +68,7 @@ public function testNumericStyleName() {
     ];
     $this->drupalGet('admin/config/media/image-styles/add');
     $this->submitForm($edit, 'Create new style');
-    $this->assertSession()->pageTextContains("Style {$style_label} was created.");
+    $this->assertWebPageTextContains("Style {$style_label} was created.");
     $options = image_style_options();
     $this->assertArrayHasKey($style_name, $options);
   }
@@ -120,7 +120,7 @@ public function testStyle() {
     ];
     $this->drupalGet($admin_path . '/add');
     $this->submitForm($edit, 'Create new style');
-    $this->assertSession()->pageTextContains("Style {$style_label} was created.");
+    $this->assertWebPageTextContains("Style {$style_label} was created.");
 
     // Ensure that the expected entity operations are there.
     $this->drupalGet($admin_path);
@@ -141,7 +141,7 @@ public function testStyle() {
       $this->submitForm(['new' => $effect], 'Add');
       if (!empty($edit)) {
         $effect_label = \Drupal::service('plugin.manager.image.effect')->createInstance($effect)->label();
-        $this->assertSession()->pageTextContains("Add {$effect_label} effect to style {$style_label}");
+        $this->assertWebPageTextContains("Add {$effect_label} effect to style {$style_label}");
         $this->submitForm($edit_data, 'Add effect');
       }
     }
@@ -221,11 +221,11 @@ public function testStyle() {
 
     // Check that the URL was updated.
     $this->drupalGet($style_path);
-    $this->assertSession()->titleEquals("Edit style $style_label | Drupal");
+    $this->assertWebPageTitleEquals("Edit style $style_label | Drupal");
 
     // Check that the available image effects are properly sorted.
-    $option = $this->assertSession()->selectExists('edit-new--2')->findAll('css', 'option');
-    $this->assertEquals('Ajax test', $option[1]->getText(), '"Ajax test" is the first selectable effect.');
+    $this->assertWebSelectExists('edit-new--2');
+    $this->assertEquals('Ajax test', $this->currentNodeElement->findAll('css', 'option')[1]->getText(), '"Ajax test" is the first selectable effect.');
 
     // Check that the image was flushed after updating the style.
     // This is especially important when renaming the style. Make sure that
@@ -257,9 +257,9 @@ public function testStyle() {
     $this->drupalGet($style_path . '/effects/' . $uuids['image_crop'] . '/delete');
     $this->submitForm([], 'Delete');
     // Confirm that the form submission was successful.
-    $this->assertSession()->statusCodeEquals(200);
+    $this->assertWebStatusCodeEquals(200);
     $image_crop_effect = $style->getEffect($uuids['image_crop']);
-    $this->assertSession()->pageTextContains("The image effect {$image_crop_effect->label()} has been deleted.");
+    $this->assertWebPageTextContains("The image effect {$image_crop_effect->label()} has been deleted.");
     // Confirm that there is no longer a link to the effect.
     $this->assertSession()->linkByHrefNotExists($style_path . '/effects/' . $uuids['image_crop'] . '/delete');
     // Refresh the image style information and verify that the effect was
@@ -307,7 +307,7 @@ public function testStyle() {
 
     // Confirm that the empty text is correct on the image styles page.
     $this->drupalGet($admin_path);
-    $this->assertSession()->pageTextContains("There are currently no styles. Add a new one.");
+    $this->assertWebPageTextContains("There are currently no styles. Add a new one.");
     $this->assertSession()->linkByHrefExists(Url::fromRoute('image.style_add')->toString());
 
   }
@@ -348,7 +348,7 @@ public function testStyleReplacement() {
     $file_url_generator = \Drupal::service('file_url_generator');
 
     $this->drupalGet('node/' . $nid);
-    $this->assertSession()->responseContains($file_url_generator->transformRelative($style->buildUrl($original_uri)));
+    $this->assertWebResponseContains($file_url_generator->transformRelative($style->buildUrl($original_uri)));
 
     // Rename the style and make sure the image field is updated.
     $new_style_name = strtolower($this->randomMachineName(10));
@@ -359,12 +359,12 @@ public function testStyleReplacement() {
     ];
     $this->drupalGet($style_path . $style_name);
     $this->submitForm($edit, 'Save');
-    $this->assertSession()->pageTextContains('Changes to the style have been saved.');
+    $this->assertWebPageTextContains('Changes to the style have been saved.');
     $this->drupalGet('node/' . $nid);
 
     // Reload the image style using the new name.
     $style = ImageStyle::load($new_style_name);
-    $this->assertSession()->responseContains($file_url_generator->transformRelative($style->buildUrl($original_uri)));
+    $this->assertWebResponseContains($file_url_generator->transformRelative($style->buildUrl($original_uri)));
 
     // Delete the style and choose a replacement style.
     $edit = [
@@ -372,11 +372,11 @@ public function testStyleReplacement() {
     ];
     $this->drupalGet($style_path . $new_style_name . '/delete');
     $this->submitForm($edit, 'Delete');
-    $this->assertSession()->pageTextContains("The image style {$new_style_label} has been deleted.");
+    $this->assertWebPageTextContains("The image style {$new_style_label} has been deleted.");
 
     $replacement_style = ImageStyle::load('thumbnail');
     $this->drupalGet('node/' . $nid);
-    $this->assertSession()->responseContains($file_url_generator->transformRelative($replacement_style->buildUrl($original_uri)));
+    $this->assertWebResponseContains($file_url_generator->transformRelative($replacement_style->buildUrl($original_uri)));
   }
 
   /**
@@ -389,16 +389,16 @@ public function testEditEffect() {
     $this->submitForm(['label' => 'Test style effect edit', 'name' => $style_name], 'Create new style');
     $this->submitForm(['new' => 'image_scale_and_crop'], 'Add');
     $this->submitForm(['data[width]' => '300', 'data[height]' => '200'], 'Add effect');
-    $this->assertSession()->pageTextContains('Scale and crop 300×200');
+    $this->assertWebPageTextContains('Scale and crop 300×200');
 
     // There should normally be only one edit link on this page initially.
     $this->clickLink('Edit');
-    $this->assertSession()->pageTextContains("Edit Scale and crop effect on style Test style effect edit");
+    $this->assertWebPageTextContains("Edit Scale and crop effect on style Test style effect edit");
     $this->submitForm(['data[width]' => '360', 'data[height]' => '240'], 'Update effect');
-    $this->assertSession()->pageTextContains('Scale and crop 360×240');
+    $this->assertWebPageTextContains('Scale and crop 360×240');
 
     // Check that the previous effect is replaced.
-    $this->assertSession()->pageTextNotContains('Scale and crop 300×200');
+    $this->assertWebPageTextDoesNotContain('Scale and crop 300×200');
 
     // Add another scale effect.
     $this->drupalGet('admin/config/media/image-styles/add');
@@ -408,7 +408,7 @@ public function testEditEffect() {
 
     // Edit the scale effect that was just added.
     $this->clickLink('Edit');
-    $this->assertSession()->pageTextContains("Edit Scale effect on style Test style scale edit scale");
+    $this->assertWebPageTextContains("Edit Scale effect on style Test style scale edit scale");
     $this->submitForm(['data[width]' => '24', 'data[height]' => '19'], 'Update effect');
 
     // Add another scale effect and make sure both exist. Click through from
@@ -425,13 +425,13 @@ public function testEditEffect() {
     }
     $this->submitForm(['new' => 'image_scale'], 'Add');
     $this->submitForm(['data[width]' => '12', 'data[height]' => '19'], 'Add effect');
-    $this->assertSession()->pageTextContains('Scale 24×19');
-    $this->assertSession()->pageTextContains('Scale 12×19');
+    $this->assertWebPageTextContains('Scale 24×19');
+    $this->assertWebPageTextContains('Scale 12×19');
 
     // Try to edit a nonexistent effect.
     $uuid = $this->container->get('uuid');
     $this->drupalGet('admin/config/media/image-styles/manage/' . $style_name . '/effects/' . $uuid->generate());
-    $this->assertSession()->statusCodeEquals(404);
+    $this->assertWebStatusCodeEquals(404);
   }
 
   /**
@@ -498,7 +498,7 @@ public function testConfigImport() {
 
     // Test that image is displayed using newly created style.
     $this->drupalGet('node/' . $nid);
-    $this->assertSession()->responseContains(\Drupal::service('file_url_generator')->transformRelative($style->buildUrl($original_uri)));
+    $this->assertWebResponseContains(\Drupal::service('file_url_generator')->transformRelative($style->buildUrl($original_uri)));
 
     // Copy config to sync, and delete the image style.
     $sync = $this->container->get('config.storage.sync');
@@ -525,7 +525,7 @@ public function testImageStyleAccess() {
 
     $this->drupalGet('admin/config/media/image-styles');
     $this->clickLink('Edit');
-    $this->assertSession()->pageTextContains("Select a new effect");
+    $this->assertWebPageTextContains("Select a new effect");
   }
 
 }
diff --git a/core/modules/image/tests/src/Functional/ImageDimensionsTest.php b/core/modules/image/tests/src/Functional/ImageDimensionsTest.php
index efa06faf4c..1875e96e8c 100644
--- a/core/modules/image/tests/src/Functional/ImageDimensionsTest.php
+++ b/core/modules/image/tests/src/Functional/ImageDimensionsTest.php
@@ -82,7 +82,7 @@ public function testImageDimensions() {
     $this->assertEquals('<img src="' . $url . '" width="120" height="60" alt="" loading="lazy" class="image-style-test" />', $this->getImageTag($variables));
     $this->assertFileDoesNotExist($generated_uri);
     $this->drupalGet($this->getAbsoluteUrl($url));
-    $this->assertSession()->statusCodeEquals(200);
+    $this->assertWebStatusCodeEquals(200);
     $this->assertFileExists($generated_uri);
     $image_file = $image_factory->get($generated_uri);
     $this->assertEquals(120, $image_file->getWidth());
@@ -103,7 +103,7 @@ public function testImageDimensions() {
     $this->assertEquals('<img src="' . $url . '" width="60" height="120" alt="" loading="lazy" class="image-style-test" />', $this->getImageTag($variables));
     $this->assertFileDoesNotExist($generated_uri);
     $this->drupalGet($this->getAbsoluteUrl($url));
-    $this->assertSession()->statusCodeEquals(200);
+    $this->assertWebStatusCodeEquals(200);
     $this->assertFileExists($generated_uri);
     $image_file = $image_factory->get($generated_uri);
     $this->assertEquals(60, $image_file->getWidth());
@@ -125,7 +125,7 @@ public function testImageDimensions() {
     $this->assertEquals('<img src="' . $url . '" width="45" height="90" alt="" loading="lazy" class="image-style-test" />', $this->getImageTag($variables));
     $this->assertFileDoesNotExist($generated_uri);
     $this->drupalGet($this->getAbsoluteUrl($url));
-    $this->assertSession()->statusCodeEquals(200);
+    $this->assertWebStatusCodeEquals(200);
     $this->assertFileExists($generated_uri);
     $image_file = $image_factory->get($generated_uri);
     $this->assertEquals(45, $image_file->getWidth());
@@ -147,7 +147,7 @@ public function testImageDimensions() {
     $this->assertEquals('<img src="' . $url . '" width="45" height="90" alt="" loading="lazy" class="image-style-test" />', $this->getImageTag($variables));
     $this->assertFileDoesNotExist($generated_uri);
     $this->drupalGet($this->getAbsoluteUrl($url));
-    $this->assertSession()->statusCodeEquals(200);
+    $this->assertWebStatusCodeEquals(200);
     $this->assertFileExists($generated_uri);
     $image_file = $image_factory->get($generated_uri);
     $this->assertEquals(45, $image_file->getWidth());
@@ -165,7 +165,7 @@ public function testImageDimensions() {
     $this->assertEquals('<img src="' . $url . '" width="45" height="90" alt="" loading="lazy" class="image-style-test" />', $this->getImageTag($variables));
     $this->assertFileDoesNotExist($generated_uri);
     $this->drupalGet($this->getAbsoluteUrl($url));
-    $this->assertSession()->statusCodeEquals(200);
+    $this->assertWebStatusCodeEquals(200);
     $this->assertFileExists($generated_uri);
     $image_file = $image_factory->get($generated_uri);
     $this->assertEquals(45, $image_file->getWidth());
@@ -186,7 +186,7 @@ public function testImageDimensions() {
     $this->assertEquals('<img src="' . $url . '" alt="" class="image-style-test" />', $this->getImageTag($variables));
     $this->assertFileDoesNotExist($generated_uri);
     $this->drupalGet($this->getAbsoluteUrl($url));
-    $this->assertSession()->statusCodeEquals(200);
+    $this->assertWebStatusCodeEquals(200);
     $this->assertFileExists($generated_uri);
 
     // Add a crop effect.
@@ -205,7 +205,7 @@ public function testImageDimensions() {
     $this->assertEquals('<img src="' . $url . '" width="30" height="30" alt="" loading="lazy" class="image-style-test" />', $this->getImageTag($variables));
     $this->assertFileDoesNotExist($generated_uri);
     $this->drupalGet($this->getAbsoluteUrl($url));
-    $this->assertSession()->statusCodeEquals(200);
+    $this->assertWebStatusCodeEquals(200);
     $this->assertFileExists($generated_uri);
     $image_file = $image_factory->get($generated_uri);
     $this->assertEquals(30, $image_file->getWidth());
@@ -228,7 +228,7 @@ public function testImageDimensions() {
     // $this->assertEquals('<img src="' . $url . '" width="41" height="41" alt="" class="image-style-test" />', $this->getImageTag($variables));
     $this->assertFileDoesNotExist($generated_uri);
     $this->drupalGet($this->getAbsoluteUrl($url));
-    $this->assertSession()->statusCodeEquals(200);
+    $this->assertWebStatusCodeEquals(200);
     $this->assertFileExists($generated_uri);
     $image_file = $image_factory->get($generated_uri);
     // @todo Uncomment this once
@@ -272,7 +272,7 @@ public function testImageDimensions() {
     $this->assertEquals('<img src="' . $url . '" width="100" height="100" alt="" loading="lazy" class="image-style-test-uri" />', $this->getImageTag($variables));
     $this->assertFileDoesNotExist($generated_uri);
     $this->drupalGet($this->getAbsoluteUrl($url));
-    $this->assertSession()->statusCodeEquals(200);
+    $this->assertWebStatusCodeEquals(200);
     $this->assertFileExists($generated_uri);
     $image_file = $image_factory->get($generated_uri);
     $this->assertEquals(100, $image_file->getWidth());
@@ -286,7 +286,7 @@ public function testImageDimensions() {
     $this->assertEquals('<img src="' . $url . '" width="50" height="50" alt="" loading="lazy" class="image-style-test-uri" />', $this->getImageTag($variables));
     $this->assertFileDoesNotExist($generated_uri);
     $this->drupalGet($this->getAbsoluteUrl($url));
-    $this->assertSession()->statusCodeEquals(200);
+    $this->assertWebStatusCodeEquals(200);
     $this->assertFileExists($generated_uri);
     $image_file = $image_factory->get($generated_uri);
     $this->assertEquals(50, $image_file->getWidth());
diff --git a/core/modules/image/tests/src/Functional/ImageEffect/ConvertTest.php b/core/modules/image/tests/src/Functional/ImageEffect/ConvertTest.php
index 168b5dda39..17da5c7efb 100644
--- a/core/modules/image/tests/src/Functional/ImageEffect/ConvertTest.php
+++ b/core/modules/image/tests/src/Functional/ImageEffect/ConvertTest.php
@@ -51,7 +51,7 @@ public function testConvertFileInRoot() {
     $this->assertFileDoesNotExist($derivative_uri);
     $url = \Drupal::service('file_url_generator')->transformRelative($image_style->buildUrl($test_uri));
     $this->drupalGet($this->getAbsoluteUrl($url));
-    $this->assertSession()->statusCodeEquals(200);
+    $this->assertWebStatusCodeEquals(200);
     $this->assertFileExists($derivative_uri);
   }
 
diff --git a/core/modules/image/tests/src/Functional/ImageFieldDefaultImagesTest.php b/core/modules/image/tests/src/Functional/ImageFieldDefaultImagesTest.php
index a657d2cacb..229afec086 100644
--- a/core/modules/image/tests/src/Functional/ImageFieldDefaultImagesTest.php
+++ b/core/modules/image/tests/src/Functional/ImageFieldDefaultImagesTest.php
@@ -200,7 +200,7 @@ public function testDefaultImages() {
     // Confirm the default image is shown on the node form.
     $file = File::load($default_images['field_new']->id());
     $this->drupalGet('node/add/article');
-    $this->assertSession()->responseContains($file->getFilename());
+    $this->assertWebResponseContains($file->getFilename());
 
     // Remove the field default from articles.
     $default_image_settings = $field->getSetting('default_image');
@@ -223,13 +223,13 @@ public function testDefaultImages() {
 
     $non_image = $this->drupalGetTestFiles('text');
     $this->submitForm(['files[settings_default_image_uuid]' => \Drupal::service('file_system')->realpath($non_image[0]->uri)], 'Upload');
-    $this->assertSession()->pageTextContains('The specified file text-0.txt could not be uploaded.');
-    $this->assertSession()->pageTextContains('Only files with the following extensions are allowed: png gif jpg jpeg.');
+    $this->assertWebPageTextContains('The specified file text-0.txt could not be uploaded.');
+    $this->assertWebPageTextContains('Only files with the following extensions are allowed: png gif jpg jpeg.');
 
     // Confirm the default image is shown on the node form.
     $file = File::load($default_images['field_storage_new']->id());
     $this->drupalGet('node/add/article');
-    $this->assertSession()->responseContains($file->getFilename());
+    $this->assertWebResponseContains($file->getFilename());
 
     // Change the default image for the field storage and also change the upload
     // destination to the private filesystem at the same time.
diff --git a/core/modules/image/tests/src/Functional/ImageFieldDisplayTest.php b/core/modules/image/tests/src/Functional/ImageFieldDisplayTest.php
index 551c77aa0e..f5d2278e70 100644
--- a/core/modules/image/tests/src/Functional/ImageFieldDisplayTest.php
+++ b/core/modules/image/tests/src/Functional/ImageFieldDisplayTest.php
@@ -117,7 +117,7 @@ public function _testImageFieldFormatters($scheme) {
       '#alt' => $alt,
     ];
     $default_output = str_replace("\n", '', $renderer->renderRoot($image));
-    $this->assertSession()->responseContains($default_output);
+    $this->assertWebResponseContains($default_output);
 
     // Test the image linked to file formatter.
     $display_options = [
@@ -138,24 +138,24 @@ public function _testImageFieldFormatters($scheme) {
     ];
     $default_output = '<a href="' . $file->createFileUrl() . '">' . $renderer->renderRoot($image) . '</a>';
     $this->drupalGet('node/' . $nid);
-    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', $file->getCacheTags()[0]);
+    $this->assertWebResponseHeaderContains('X-Drupal-Cache-Tags', $file->getCacheTags()[0]);
     // @todo Remove in https://www.drupal.org/node/2646744.
     $this->assertCacheContext('url.site');
     // Verify that no image style cache tags are found.
-    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'image_style:');
-    $this->assertSession()->responseContains($default_output);
+    $this->assertWebResponseHeaderDoesNotContain('X-Drupal-Cache-Tags', 'image_style:');
+    $this->assertWebResponseContains($default_output);
     // Verify that the image can be downloaded.
     $this->assertEquals(file_get_contents($test_image->uri), $this->drupalGet($file->createFileUrl(FALSE)), 'File was downloaded successfully.');
     if ($scheme == 'private') {
       // Only verify HTTP headers when using private scheme and the headers are
       // sent by Drupal.
-      $this->assertSession()->responseHeaderEquals('Content-Type', 'image/png');
-      $this->assertSession()->responseHeaderContains('Cache-Control', 'private');
+      $this->assertWebResponseHeaderEquals('Content-Type', 'image/png');
+      $this->assertWebResponseHeaderContains('Cache-Control', 'private');
 
       // Log out and ensure the file cannot be accessed.
       $this->drupalLogout();
       $this->drupalGet($file->createFileUrl(FALSE));
-      $this->assertSession()->statusCodeEquals(403);
+      $this->assertWebStatusCodeEquals(403);
 
       // Log in again.
       $this->drupalLogin($this->adminUser);
@@ -172,9 +172,9 @@ public function _testImageFieldFormatters($scheme) {
       '#height' => 20,
     ];
     $this->drupalGet('node/' . $nid);
-    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', $file->getCacheTags()[0]);
+    $this->assertWebResponseHeaderContains('X-Drupal-Cache-Tags', $file->getCacheTags()[0]);
     // Verify that no image style cache tags are found.
-    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'image_style:');
+    $this->assertWebResponseHeaderDoesNotContain('X-Drupal-Cache-Tags', 'image_style:');
     $elements = $this->xpath(
       '//a[@href=:path]/img[@src=:url and @alt=:alt and @width=:width and @height=:height]',
       [
@@ -207,14 +207,14 @@ public function _testImageFieldFormatters($scheme) {
     $default_output = $renderer->renderRoot($image_style);
     $this->drupalGet('node/' . $nid);
     $image_style = ImageStyle::load('thumbnail');
-    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', $image_style->getCacheTags()[0]);
-    $this->assertSession()->responseContains($default_output);
+    $this->assertWebResponseHeaderContains('X-Drupal-Cache-Tags', $image_style->getCacheTags()[0]);
+    $this->assertWebResponseContains($default_output);
 
     if ($scheme == 'private') {
       // Log out and ensure the file cannot be accessed.
       $this->drupalLogout();
       $this->drupalGet(ImageStyle::load('thumbnail')->buildUrl($image_uri));
-      $this->assertSession()->statusCodeEquals(403);
+      $this->assertWebStatusCodeEquals(403);
     }
 
     // Test the image URL formatter without an image style.
@@ -263,9 +263,9 @@ public function testImageFieldSettings() {
     $this->assertSession()->fieldValueEquals('settings[min_resolution][y]', '10');
 
     $this->drupalGet('node/add/article');
-    $this->assertSession()->pageTextContains('50 KB limit.');
-    $this->assertSession()->pageTextContains('Allowed types: ' . $test_image_extension . '.');
-    $this->assertSession()->pageTextContains('Images must be larger than 10x10 pixels. Images larger than 100x100 pixels will be resized.');
+    $this->assertWebPageTextContains('50 KB limit.');
+    $this->assertWebPageTextContains('Allowed types: ' . $test_image_extension . '.');
+    $this->assertWebPageTextContains('Images must be larger than 10x10 pixels. Images larger than 100x100 pixels will be resized.');
 
     // We have to create the article first and then edit it because the alt
     // and title fields do not display until the image has been attached.
@@ -306,7 +306,7 @@ public function testImageFieldSettings() {
     $this->drupalGet('node/' . $nid . '/edit');
     $this->submitForm($edit, 'Save');
     $default_output = str_replace("\n", '', $renderer->renderRoot($image));
-    $this->assertSession()->responseContains($default_output);
+    $this->assertWebResponseContains($default_output);
 
     // Verify that alt/title longer than allowed results in a validation error.
     $test_size = 2000;
@@ -317,8 +317,8 @@ public function testImageFieldSettings() {
     $this->drupalGet('node/' . $nid . '/edit');
     $this->submitForm($edit, 'Save');
     $schema = $field->getFieldStorageDefinition()->getSchema();
-    $this->assertSession()->pageTextContains("Alternative text cannot be longer than {$schema['columns']['alt']['length']} characters but is currently {$test_size} characters long.");
-    $this->assertSession()->pageTextContains("Title cannot be longer than {$schema['columns']['title']['length']} characters but is currently {$test_size} characters long.");
+    $this->assertWebPageTextContains("Alternative text cannot be longer than {$schema['columns']['alt']['length']} characters but is currently {$test_size} characters long.");
+    $this->assertWebPageTextContains("Title cannot be longer than {$schema['columns']['title']['length']} characters but is currently {$test_size} characters long.");
 
     // Set cardinality to unlimited and add upload a second image.
     // The image widget is extending on the file widget, but the image field
@@ -338,7 +338,7 @@ public function testImageFieldSettings() {
     $this->submitForm($edit, 'Save');
     // Add the required alt text.
     $this->submitForm([$field_name . '[1][alt]' => $alt], 'Save');
-    $this->assertSession()->pageTextContains('Article ' . $node->getTitle() . ' has been updated.');
+    $this->assertWebPageTextContains('Article ' . $node->getTitle() . ' has been updated.');
 
     // Assert ImageWidget::process() calls FieldWidget::process().
     $this->drupalGet('node/' . $node->id() . '/edit');
@@ -370,7 +370,7 @@ public function testImageFieldDefaultImage() {
     // that would be used on the image field.
     $this->assertSession()->responseNotMatches('<div class="(.*?)field--name-' . strtr($field_name, '_', '-') . '(.*?)">');
     // Verify that no image style cache tags are found.
-    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'image_style:');
+    $this->assertWebResponseHeaderDoesNotContain('X-Drupal-Cache-Tags', 'image_style:');
 
     // Add a default image to the public image field.
     $images = $this->drupalGetTestFiles('image');
@@ -400,10 +400,10 @@ public function testImageFieldDefaultImage() {
     ];
     $default_output = str_replace("\n", '', $renderer->renderRoot($image));
     $this->drupalGet('node/' . $node->id());
-    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', $file->getCacheTags()[0]);
+    $this->assertWebResponseHeaderContains('X-Drupal-Cache-Tags', $file->getCacheTags()[0]);
     // Verify that no image style cache tags are found.
-    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'image_style:');
-    $this->assertSession()->responseContains($default_output);
+    $this->assertWebResponseHeaderDoesNotContain('X-Drupal-Cache-Tags', 'image_style:');
+    $this->assertWebResponseContains($default_output);
 
     // Create a node with an image attached and ensure that the default image
     // is not displayed.
@@ -425,13 +425,13 @@ public function testImageFieldDefaultImage() {
     ];
     $image_output = str_replace("\n", '', $renderer->renderRoot($image));
     $this->drupalGet('node/' . $nid);
-    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', $file->getCacheTags()[0]);
+    $this->assertWebResponseHeaderContains('X-Drupal-Cache-Tags', $file->getCacheTags()[0]);
     // Verify that no image style cache tags are found.
-    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'image_style:');
+    $this->assertWebResponseHeaderDoesNotContain('X-Drupal-Cache-Tags', 'image_style:');
     // Default image should not be displayed.
-    $this->assertSession()->responseNotContains($default_output);
+    $this->assertWebResponseDoesNotContain($default_output);
     // User supplied image should be displayed.
-    $this->assertSession()->responseContains($image_output);
+    $this->assertWebResponseContains($image_output);
 
     // Remove default image from the field and make sure it is no longer used.
     // Can't use fillField cause Mink can't fill hidden fields.
@@ -479,12 +479,12 @@ public function testImageFieldDefaultImage() {
     ];
     $default_output = str_replace("\n", '', $renderer->renderRoot($image));
     $this->drupalGet('node/' . $node->id());
-    $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', $file->getCacheTags()[0]);
+    $this->assertWebResponseHeaderContains('X-Drupal-Cache-Tags', $file->getCacheTags()[0]);
     // Verify that no image style cache tags are found.
-    $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'image_style:');
+    $this->assertWebResponseHeaderDoesNotContain('X-Drupal-Cache-Tags', 'image_style:');
     // Default private image should be displayed when no user supplied image
     // is present.
-    $this->assertSession()->responseContains($default_output);
+    $this->assertWebResponseContains($default_output);
   }
 
 }
diff --git a/core/modules/image/tests/src/Functional/ImageFieldValidateTest.php b/core/modules/image/tests/src/Functional/ImageFieldValidateTest.php
index a78f91980b..3b9c2be325 100644
--- a/core/modules/image/tests/src/Functional/ImageFieldValidateTest.php
+++ b/core/modules/image/tests/src/Functional/ImageFieldValidateTest.php
@@ -145,18 +145,18 @@ public function testResolution() {
       }
     }
     $this->uploadNodeImage($image_that_is_too_small, $field_names[0], 'article');
-    $this->assertSession()->pageTextContains("The specified file {$image_that_is_too_small->filename} could not be uploaded.");
-    $this->assertSession()->pageTextContains("The image is too small. The minimum dimensions are 50x50 pixels and the image size is {$image_that_is_too_small_file->getWidth()}x{$image_that_is_too_small_file->getHeight()} pixels.");
+    $this->assertWebPageTextContains("The specified file {$image_that_is_too_small->filename} could not be uploaded.");
+    $this->assertWebPageTextContains("The image is too small. The minimum dimensions are 50x50 pixels and the image size is {$image_that_is_too_small_file->getWidth()}x{$image_that_is_too_small_file->getHeight()} pixels.");
     $this->uploadNodeImage($image_that_is_too_big, $field_names[0], 'article');
-    $this->assertSession()->pageTextContains('The image was resized to fit within the maximum allowed dimensions of 100x100 pixels.');
+    $this->assertWebPageTextContains('The image was resized to fit within the maximum allowed dimensions of 100x100 pixels.');
     $this->uploadNodeImage($image_that_is_too_small, $field_names[1], 'article');
-    $this->assertSession()->pageTextContains("The specified file {$image_that_is_too_small->filename} could not be uploaded.");
+    $this->assertWebPageTextContains("The specified file {$image_that_is_too_small->filename} could not be uploaded.");
     $this->uploadNodeImage($image_that_is_too_big, $field_names[1], 'article');
-    $this->assertSession()->pageTextContains('The image was resized to fit within the maximum allowed width of 100 pixels.');
+    $this->assertWebPageTextContains('The image was resized to fit within the maximum allowed width of 100 pixels.');
     $this->uploadNodeImage($image_that_is_too_small, $field_names[2], 'article');
-    $this->assertSession()->pageTextContains("The specified file {$image_that_is_too_small->filename} could not be uploaded.");
+    $this->assertWebPageTextContains("The specified file {$image_that_is_too_small->filename} could not be uploaded.");
     $this->uploadNodeImage($image_that_is_too_big, $field_names[2], 'article');
-    $this->assertSession()->pageTextContains('The image was resized to fit within the maximum allowed height of 100 pixels.');
+    $this->assertWebPageTextContains('The image was resized to fit within the maximum allowed height of 100 pixels.');
   }
 
   /**
@@ -180,8 +180,8 @@ public function testRequiredAttributes() {
     // Look for form-required for the alt text.
     $this->assertSession()->elementExists('xpath', '//label[@for="edit-' . $field_name . '-0-alt" and @class="js-form-required form-required"]/following-sibling::input[@id="edit-' . $field_name . '-0-alt"]');
     $this->assertSession()->elementExists('xpath', '//label[@for="edit-' . $field_name . '-0-title" and @class="js-form-required form-required"]/following-sibling::input[@id="edit-' . $field_name . '-0-title"]');
-    $this->assertSession()->pageTextContains('Alternative text field is required.');
-    $this->assertSession()->pageTextContains('Title field is required.');
+    $this->assertWebPageTextContains('Alternative text field is required.');
+    $this->assertWebPageTextContains('Title field is required.');
 
     $instance->setSetting('alt_field_required', 0);
     $instance->setSetting('title_field_required', 0);
@@ -193,8 +193,8 @@ public function testRequiredAttributes() {
     $this->drupalGet('node/add/article');
     $this->submitForm($edit, 'Save');
 
-    $this->assertSession()->pageTextNotContains('Alternative text field is required.');
-    $this->assertSession()->pageTextNotContains('Title field is required.');
+    $this->assertWebPageTextDoesNotContain('Alternative text field is required.');
+    $this->assertWebPageTextDoesNotContain('Title field is required.');
 
     $instance->setSetting('required', 0);
     $instance->setSetting('alt_field_required', 1);
@@ -207,8 +207,8 @@ public function testRequiredAttributes() {
     $this->drupalGet('node/add/article');
     $this->submitForm($edit, 'Save');
 
-    $this->assertSession()->pageTextNotContains('Alternative text field is required.');
-    $this->assertSession()->pageTextNotContains('Title field is required.');
+    $this->assertWebPageTextDoesNotContain('Alternative text field is required.');
+    $this->assertWebPageTextDoesNotContain('Title field is required.');
   }
 
   /**
@@ -229,7 +229,7 @@ public function testEmpty($field_name, $required, $cardinality, $form_element_na
       'title[0][value]' => 'Article with edit-access-allowed image field',
     ];
     $this->submitForm($edit, 'Save');
-    $this->assertSession()->pageTextContains($expected_page_text_when_edit_access_allowed);
+    $this->assertWebPageTextContains($expected_page_text_when_edit_access_allowed);
 
     // Test with field edit access forbidden.
     \Drupal::service('module_installer')->install(['image_access_test_hidden']);
@@ -239,7 +239,7 @@ public function testEmpty($field_name, $required, $cardinality, $form_element_na
       'title[0][value]' => 'Article with edit-access-forbidden image field',
     ];
     $this->submitForm($edit, 'Save');
-    $this->assertSession()->pageTextContains($expected_page_text_when_edit_access_forbidden);
+    $this->assertWebPageTextContains($expected_page_text_when_edit_access_forbidden);
   }
 
   /**
diff --git a/core/modules/image/tests/src/Functional/ImageFieldWidgetTest.php b/core/modules/image/tests/src/Functional/ImageFieldWidgetTest.php
index fb25470433..3d414fa0a4 100644
--- a/core/modules/image/tests/src/Functional/ImageFieldWidgetTest.php
+++ b/core/modules/image/tests/src/Functional/ImageFieldWidgetTest.php
@@ -35,23 +35,23 @@ public function testWidgetElement() {
     $this->assertSession()->elementExists('xpath', '//div[contains(@class, "field--widget-image-image")]');
     // Verify that the image field widget limits accepted files.
     $this->assertSession()->elementExists('xpath', '//input[contains(@accept, "image/*")]');
-    $this->assertSession()->pageTextNotContains('Image test on [site:name]');
+    $this->assertWebPageTextDoesNotContain('Image test on [site:name]');
 
     // Check for allowed image file extensions - default.
-    $this->assertSession()->pageTextContains('Allowed types: png gif jpg jpeg.');
+    $this->assertWebPageTextContains('Allowed types: png gif jpg jpeg.');
 
     // Try adding to the field config an unsupported extension, should not
     // appear in the allowed types.
     $field_config = FieldConfig::loadByName('node', 'article', $field_name);
     $field_config->setSetting('file_extensions', 'png gif jpg jpeg tiff')->save();
     $this->drupalGet('node/add/article');
-    $this->assertSession()->pageTextContains('Allowed types: png gif jpg jpeg.');
+    $this->assertWebPageTextContains('Allowed types: png gif jpg jpeg.');
 
     // Add a supported extension and remove some supported ones, we should see
     // the intersect of those entered in field config with those supported.
     $field_config->setSetting('file_extensions', 'png jpe tiff')->save();
     $this->drupalGet('node/add/article');
-    $this->assertSession()->pageTextContains('Allowed types: png jpe.');
+    $this->assertWebPageTextContains('Allowed types: png jpe.');
   }
 
 }
diff --git a/core/modules/image/tests/src/Functional/ImageOnTranslatedEntityTest.php b/core/modules/image/tests/src/Functional/ImageOnTranslatedEntityTest.php
index 64d2f92c74..5ee0339f78 100644
--- a/core/modules/image/tests/src/Functional/ImageOnTranslatedEntityTest.php
+++ b/core/modules/image/tests/src/Functional/ImageOnTranslatedEntityTest.php
@@ -130,12 +130,12 @@ public function testSyncedImages() {
     $this->submitForm($edit, 'Save (this translation)');
     // This inspects the HTML after the post of the translation, the image
     // should be displayed on the original node.
-    $this->assertSession()->responseContains('alt="Lost in translation image"');
-    $this->assertSession()->responseContains('title="Lost in translation image title"');
+    $this->assertWebResponseContains('alt="Lost in translation image"');
+    $this->assertWebResponseContains('title="Lost in translation image title"');
     $second_fid = $this->getLastFileId();
     // View the translated node.
     $this->drupalGet('fr/node/' . $default_language_node->id());
-    $this->assertSession()->responseContains('alt="Scarlett Johansson image"');
+    $this->assertWebResponseContains('alt="Scarlett Johansson image"');
 
     \Drupal::entityTypeManager()->getStorage('file')->resetCache();
 
@@ -170,12 +170,12 @@ public function testSyncedImages() {
     $this->assertTrue($file->isPermanent(), 'First file still exists and is permanent.');
     // This inspects the HTML after the post of the translation, the image
     // should be displayed on the original node.
-    $this->assertSession()->responseContains('alt="Lost in translation image"');
-    $this->assertSession()->responseContains('title="Lost in translation image title"');
+    $this->assertWebResponseContains('alt="Lost in translation image"');
+    $this->assertWebResponseContains('title="Lost in translation image title"');
     // View the translated node.
     $this->drupalGet('nl/node/' . $default_language_node->id());
-    $this->assertSession()->responseContains('alt="Akiko Takeshita image"');
-    $this->assertSession()->responseContains('title="Akiko Takeshita image title"');
+    $this->assertWebResponseContains('alt="Akiko Takeshita image"');
+    $this->assertWebResponseContains('title="Akiko Takeshita image title"');
 
     // Ensure the file status of the second file is permanent.
     $file = File::load($second_fid);
diff --git a/core/modules/image/tests/src/Functional/ImageStyleDeleteTest.php b/core/modules/image/tests/src/Functional/ImageStyleDeleteTest.php
index fbdeb95879..59d1280594 100644
--- a/core/modules/image/tests/src/Functional/ImageStyleDeleteTest.php
+++ b/core/modules/image/tests/src/Functional/ImageStyleDeleteTest.php
@@ -35,8 +35,8 @@ public function testDelete() {
     // Checks that the 'replacement' select element is displayed.
     $this->assertSession()->fieldExists('replacement');
     // Checks that UI messages are correct.
-    $this->assertSession()->pageTextContains("If this style is in use on the site, you may select another style to replace it. All images that have been generated for this style will be permanently deleted. If no replacement style is selected, the dependent configurations might need manual reconfiguration.");
-    $this->assertSession()->pageTextNotContains("All images that have been generated for this style will be permanently deleted. The dependent configurations might need manual reconfiguration.");
+    $this->assertWebPageTextContains("If this style is in use on the site, you may select another style to replace it. All images that have been generated for this style will be permanently deleted. If no replacement style is selected, the dependent configurations might need manual reconfiguration.");
+    $this->assertWebPageTextDoesNotContain("All images that have been generated for this style will be permanently deleted. The dependent configurations might need manual reconfiguration.");
 
     // Delete 'medium' image style but replace it with 'thumbnail'. This style
     // is involved in 'node.page.default' display view and form.
@@ -58,8 +58,8 @@ public function testDelete() {
     // Checks that the 'replacement' select element is displayed.
     $this->assertSession()->fieldExists('replacement');
     // Checks that UI messages are correct.
-    $this->assertSession()->pageTextContains("If this style is in use on the site, you may select another style to replace it. All images that have been generated for this style will be permanently deleted. If no replacement style is selected, the dependent configurations might need manual reconfiguration.");
-    $this->assertSession()->pageTextNotContains("All images that have been generated for this style will be permanently deleted. The dependent configurations might need manual reconfiguration.");
+    $this->assertWebPageTextContains("If this style is in use on the site, you may select another style to replace it. All images that have been generated for this style will be permanently deleted. If no replacement style is selected, the dependent configurations might need manual reconfiguration.");
+    $this->assertWebPageTextDoesNotContain("All images that have been generated for this style will be permanently deleted. The dependent configurations might need manual reconfiguration.");
 
     // Delete 'thumbnail' image style. Provide no replacement.
     $this->submitForm([], 'Delete');
@@ -77,8 +77,8 @@ public function testDelete() {
     // Checks that the 'replacement' select element is displayed.
     $this->assertSession()->fieldExists('replacement');
     // Checks that UI messages are correct.
-    $this->assertSession()->pageTextContains("If this style is in use on the site, you may select another style to replace it. All images that have been generated for this style will be permanently deleted. If no replacement style is selected, the dependent configurations might need manual reconfiguration.");
-    $this->assertSession()->pageTextNotContains("All images that have been generated for this style will be permanently deleted. The dependent configurations might need manual reconfiguration.");
+    $this->assertWebPageTextContains("If this style is in use on the site, you may select another style to replace it. All images that have been generated for this style will be permanently deleted. If no replacement style is selected, the dependent configurations might need manual reconfiguration.");
+    $this->assertWebPageTextDoesNotContain("All images that have been generated for this style will be permanently deleted. The dependent configurations might need manual reconfiguration.");
     // Delete 'wide' image style. Provide no replacement.
     $this->submitForm([], 'Delete');
 
@@ -87,8 +87,8 @@ public function testDelete() {
     // Checks that the 'replacement' select element is not displayed.
     $this->assertSession()->fieldNotExists('replacement');
     // Checks that UI messages are correct.
-    $this->assertSession()->pageTextNotContains("If this style is in use on the site, you may select another style to replace it. All images that have been generated for this style will be permanently deleted. If no replacement style is selected, the dependent configurations might need manual reconfiguration.");
-    $this->assertSession()->pageTextContains("All images that have been generated for this style will be permanently deleted. The dependent configurations might need manual reconfiguration.");
+    $this->assertWebPageTextDoesNotContain("If this style is in use on the site, you may select another style to replace it. All images that have been generated for this style will be permanently deleted. If no replacement style is selected, the dependent configurations might need manual reconfiguration.");
+    $this->assertWebPageTextContains("All images that have been generated for this style will be permanently deleted. The dependent configurations might need manual reconfiguration.");
   }
 
 }
diff --git a/core/modules/image/tests/src/Functional/ImageStyleFlushTest.php b/core/modules/image/tests/src/Functional/ImageStyleFlushTest.php
index 820bedffa2..02d4ef586a 100644
--- a/core/modules/image/tests/src/Functional/ImageStyleFlushTest.php
+++ b/core/modules/image/tests/src/Functional/ImageStyleFlushTest.php
@@ -115,10 +115,10 @@ public function testFlush() {
     }
     $this->drupalGet($style_path . '/effects/' . $uuids['image_scale'] . '/delete');
     $this->submitForm([], 'Delete');
-    $this->assertSession()->statusCodeEquals(200);
+    $this->assertWebStatusCodeEquals(200);
     $this->drupalGet($style_path);
     $this->submitForm([], 'Save');
-    $this->assertSession()->statusCodeEquals(200);
+    $this->assertWebStatusCodeEquals(200);
 
     // Post flush, expected 1 image in the 'public' wrapper (sample.png).
     $this->assertEquals(1, $this->getImageCount($style, 'public'), new FormattableMarkup('Image style %style flushed correctly for %wrapper wrapper.', ['%style' => $style->label(), '%wrapper' => 'public']));
diff --git a/core/modules/image/tests/src/Functional/ImageStylesPathAndUrlTest.php b/core/modules/image/tests/src/Functional/ImageStylesPathAndUrlTest.php
index 6d89a920d8..eb7fc0a2a1 100644
--- a/core/modules/image/tests/src/Functional/ImageStylesPathAndUrlTest.php
+++ b/core/modules/image/tests/src/Functional/ImageStylesPathAndUrlTest.php
@@ -126,7 +126,7 @@ public function testImageStyleUrlForMissingSourceImage() {
     $non_existent_uri = 'public://foo.png';
     $generated_url = $this->style->buildUrl($non_existent_uri);
     $this->drupalGet($generated_url);
-    $this->assertSession()->statusCodeEquals(404);
+    $this->assertWebStatusCodeEquals(404);
   }
 
   /**
@@ -185,10 +185,10 @@ public function doImageStyleUrlAndPathTests($scheme, $clean_url = TRUE, $extra_s
     }
     // Add some extra chars to the token.
     $this->drupalGet(str_replace(IMAGE_DERIVATIVE_TOKEN . '=', IMAGE_DERIVATIVE_TOKEN . '=Zo', $generate_url));
-    $this->assertSession()->statusCodeEquals(404);
+    $this->assertWebStatusCodeEquals(404);
     // Change the parameter name so the token is missing.
     $this->drupalGet(str_replace(IMAGE_DERIVATIVE_TOKEN . '=', 'wrongparam=', $generate_url));
-    $this->assertSession()->statusCodeEquals(404);
+    $this->assertWebStatusCodeEquals(404);
 
     // Check that the generated URL is the same when we pass in a relative path
     // rather than a URI. We need to temporarily switch the default scheme to
@@ -202,41 +202,41 @@ public function doImageStyleUrlAndPathTests($scheme, $clean_url = TRUE, $extra_s
 
     // Fetch the URL that generates the file.
     $this->drupalGet($generate_url);
-    $this->assertSession()->statusCodeEquals(200);
+    $this->assertWebStatusCodeEquals(200);
     $this->assertFileExists($generated_uri);
     // assertRaw can't be used with string containing non UTF-8 chars.
     $this->assertNotEmpty(file_get_contents($generated_uri), 'URL returns expected file.');
     $image = $this->container->get('image.factory')->get($generated_uri);
-    $this->assertSession()->responseHeaderEquals('Content-Type', $image->getMimeType());
-    $this->assertSession()->responseHeaderEquals('Content-Length', (string) $image->getFileSize());
+    $this->assertWebResponseHeaderEquals('Content-Type', $image->getMimeType());
+    $this->assertWebResponseHeaderEquals('Content-Length', (string) $image->getFileSize());
 
     // Check that we did not download the original file.
     $original_image = $this->container->get('image.factory')
       ->get($original_uri);
-    $this->assertSession()->responseHeaderNotEquals('Content-Length', (string) $original_image->getFileSize());
+    $this->assertWebResponseHeaderDoesNotEqual('Content-Length', (string) $original_image->getFileSize());
 
     if ($scheme == 'private') {
-      $this->assertSession()->responseHeaderEquals('Expires', 'Sun, 19 Nov 1978 05:00:00 GMT');
+      $this->assertWebResponseHeaderEquals('Expires', 'Sun, 19 Nov 1978 05:00:00 GMT');
       // Check that Cache-Control header contains 'no-cache' to prevent caching.
-      $this->assertSession()->responseHeaderContains('Cache-Control', 'no-cache');
-      $this->assertSession()->responseHeaderEquals('X-Image-Owned-By', 'image_module_test');
+      $this->assertWebResponseHeaderContains('Cache-Control', 'no-cache');
+      $this->assertWebResponseHeaderEquals('X-Image-Owned-By', 'image_module_test');
 
       // Make sure that a second request to the already existing derivative
       // works too.
       $this->drupalGet($generate_url);
-      $this->assertSession()->statusCodeEquals(200);
+      $this->assertWebStatusCodeEquals(200);
 
       // Check that the second request also returned the generated image.
-      $this->assertSession()->responseHeaderEquals('Content-Length', (string) $image->getFileSize());
+      $this->assertWebResponseHeaderEquals('Content-Length', (string) $image->getFileSize());
 
       // Check that we did not download the original file.
-      $this->assertSession()->responseHeaderNotEquals('Content-Length', (string) $original_image->getFileSize());
+      $this->assertWebResponseHeaderDoesNotEqual('Content-Length', (string) $original_image->getFileSize());
 
       // Make sure that access is denied for existing style files if we do not
       // have access.
       \Drupal::state()->delete('image.test_file_download');
       $this->drupalGet($generate_url);
-      $this->assertSession()->statusCodeEquals(403);
+      $this->assertWebStatusCodeEquals(403);
 
       // Repeat this with a different file that we do not have access to and
       // make sure that access is denied.
@@ -247,7 +247,7 @@ public function doImageStyleUrlAndPathTests($scheme, $clean_url = TRUE, $extra_s
       $generate_url_noaccess = $this->style->buildUrl($original_uri_noaccess);
 
       $this->drupalGet($generate_url_noaccess);
-      $this->assertSession()->statusCodeEquals(403);
+      $this->assertWebStatusCodeEquals(403);
       // Verify that images are not appended to the response.
       // Currently this test only uses PNG images.
       if (strpos($generate_url, '.png') === FALSE) {
@@ -262,13 +262,13 @@ public function doImageStyleUrlAndPathTests($scheme, $clean_url = TRUE, $extra_s
       }
     }
     else {
-      $this->assertSession()->responseHeaderEquals('Expires', 'Sun, 19 Nov 1978 05:00:00 GMT');
-      $this->assertSession()->responseHeaderNotContains('Cache-Control', 'no-cache');
+      $this->assertWebResponseHeaderEquals('Expires', 'Sun, 19 Nov 1978 05:00:00 GMT');
+      $this->assertWebResponseHeaderDoesNotContain('Cache-Control', 'no-cache');
 
       if ($clean_url) {
         // Add some extra chars to the token.
         $this->drupalGet(str_replace(IMAGE_DERIVATIVE_TOKEN . '=', IMAGE_DERIVATIVE_TOKEN . '=Zo', $generate_url));
-        $this->assertSession()->statusCodeEquals(200);
+        $this->assertWebStatusCodeEquals(200);
       }
     }
 
@@ -295,7 +295,7 @@ public function doImageStyleUrlAndPathTests($scheme, $clean_url = TRUE, $extra_s
     $generate_url = $this->style->buildUrl($original_uri, $clean_url);
     $this->assertStringNotContainsString(IMAGE_DERIVATIVE_TOKEN . '=', $generate_url, 'The security token does not appear in the image style URL.');
     $this->drupalGet($generate_url);
-    $this->assertSession()->statusCodeEquals(200);
+    $this->assertWebStatusCodeEquals(200);
 
     // Stop suppressing the security token in the URL.
     $this->config('image.settings')->set('suppress_itok_output', FALSE)->save();
@@ -308,16 +308,16 @@ public function doImageStyleUrlAndPathTests($scheme, $clean_url = TRUE, $extra_s
     $this->assertTrue($matches_expected_url_format, "URL for a derivative of an image style matches expected format.");
     $nested_url_with_wrong_token = str_replace(IMAGE_DERIVATIVE_TOKEN . '=', 'wrongparam=', $nested_url);
     $this->drupalGet($nested_url_with_wrong_token);
-    $this->assertSession()->statusCodeEquals(404);
+    $this->assertWebStatusCodeEquals(404);
     // Check that this restriction cannot be bypassed by adding extra slashes
     // to the URL.
     $this->drupalGet(substr_replace($nested_url_with_wrong_token, '//styles/', strrpos($nested_url_with_wrong_token, '/styles/'), strlen('/styles/')));
-    $this->assertSession()->statusCodeEquals(404);
+    $this->assertWebStatusCodeEquals(404);
     $this->drupalGet(substr_replace($nested_url_with_wrong_token, '////styles/', strrpos($nested_url_with_wrong_token, '/styles/'), strlen('/styles/')));
-    $this->assertSession()->statusCodeEquals(404);
+    $this->assertWebStatusCodeEquals(404);
     // Make sure the image can still be generated if a correct token is used.
     $this->drupalGet($nested_url);
-    $this->assertSession()->statusCodeEquals(200);
+    $this->assertWebStatusCodeEquals(200);
 
     // Check that requesting a nonexistent image does not create any new
     // directories in the file system.
diff --git a/core/modules/user/tests/src/FunctionalJavascript/RegistrationWithUserFieldsTest.php b/core/modules/user/tests/src/FunctionalJavascript/RegistrationWithUserFieldsTest.php
index da488b7598..1744179eee 100644
--- a/core/modules/user/tests/src/FunctionalJavascript/RegistrationWithUserFieldsTest.php
+++ b/core/modules/user/tests/src/FunctionalJavascript/RegistrationWithUserFieldsTest.php
@@ -14,13 +14,6 @@
  */
 class RegistrationWithUserFieldsTest extends WebDriverTestBase {
 
-  /**
-   * WebAssert object.
-   *
-   * @var \Drupal\Tests\WebAssert
-   */
-  protected $webAssert;
-
   /**
    * DocumentElement object.
    *
diff --git a/core/tests/Drupal/FunctionalJavascriptTests/WebDriverTestBase.php b/core/tests/Drupal/FunctionalJavascriptTests/WebDriverTestBase.php
index 7f92b9ed00..ed6bc11554 100644
--- a/core/tests/Drupal/FunctionalJavascriptTests/WebDriverTestBase.php
+++ b/core/tests/Drupal/FunctionalJavascriptTests/WebDriverTestBase.php
@@ -186,6 +186,7 @@ protected function createScreenshot($filename, $set_background_color = TRUE) {
    * {@inheritdoc}
    */
   public function assertSession($name = NULL) {
+    @trigger_error('UiHelperTrait::assertSession() is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use #todo instead. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     return new WebDriverWebAssert($this->getSession($name), $this->baseUrl);
   }
 
diff --git a/core/tests/Drupal/Tests/BrowserTestBase.php b/core/tests/Drupal/Tests/BrowserTestBase.php
index 704149fdd2..4d6328f077 100644
--- a/core/tests/Drupal/Tests/BrowserTestBase.php
+++ b/core/tests/Drupal/Tests/BrowserTestBase.php
@@ -4,6 +4,7 @@
 
 use Behat\Mink\Driver\BrowserKitDriver;
 use Behat\Mink\Element\Element;
+use Behat\Mink\Element\NodeElement;
 use Behat\Mink\Mink;
 use Behat\Mink\Selector\SelectorsHandler;
 use Behat\Mink\Session;
@@ -18,6 +19,7 @@
 use Drupal\Tests\node\Traits\NodeCreationTrait;
 use Drupal\Tests\Traits\PhpUnitWarnings;
 use Drupal\Tests\user\Traits\UserCreationTrait;
+use Drupal\Tests\WebAssert;
 use Drupal\TestTools\Comparator\MarkupInterfaceComparator;
 use Drupal\TestTools\TestVarDumper;
 use GuzzleHttp\Cookie\CookieJar;
@@ -174,6 +176,20 @@ abstract class BrowserTestBase extends TestCase {
    */
   protected $mink;
 
+  /**
+   * The WebAssert object for asserting web page elements.
+   *
+   * @var \Drupal\Tests\WebAssert
+   */
+  protected WebAssert $webAssert;
+
+  /**
+   * The latest node element selected via Mink.
+   *
+   * @var \Behat\Mink\Element\NodeElement|null
+   */
+  protected ?NodeElement $currentNodeElement;
+
   /**
    * {@inheritdoc}
    *
@@ -258,6 +274,7 @@ protected function initMink() {
     $this->mink->registerSession('default', $session);
     $this->mink->setDefaultSessionName('default');
     $this->registerSessions();
+    $this->webAssert = $this->getWebAssert($session);
 
     $this->initFrontPage();
 
diff --git a/core/tests/Drupal/Tests/Core/Assert/WebAssertArgumentsTest.php b/core/tests/Drupal/Tests/Core/Assert/WebAssertArgumentsTest.php
index 1e2476514d..7141f655d3 100644
--- a/core/tests/Drupal/Tests/Core/Assert/WebAssertArgumentsTest.php
+++ b/core/tests/Drupal/Tests/Core/Assert/WebAssertArgumentsTest.php
@@ -36,13 +36,6 @@ class WebAssertArgumentsTest extends UnitTestCase {
    */
   protected $page;
 
-  /**
-   * The mocked web assert class.
-   *
-   * @var \Drupal\Tests\WebAssert
-   */
-  protected $webAssert;
-
   /**
    * {@inheritdoc}
    */
diff --git a/core/tests/Drupal/Tests/UiHelperTrait.php b/core/tests/Drupal/Tests/UiHelperTrait.php
index cd0b7dea74..26ebcab88b 100644
--- a/core/tests/Drupal/Tests/UiHelperTrait.php
+++ b/core/tests/Drupal/Tests/UiHelperTrait.php
@@ -3,6 +3,8 @@
 namespace Drupal\Tests;
 
 use Behat\Mink\Driver\BrowserKitDriver;
+use Behat\Mink\Exception\ExpectationException;
+use Behat\Mink\Session;
 use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\UrlHelper;
@@ -10,6 +12,7 @@
 use Drupal\Core\Session\AnonymousUserSession;
 use Drupal\Core\Test\RefreshVariablesTrait;
 use Drupal\Core\Url;
+use PHPUnit\Framework\Assert;
 use Symfony\Component\CssSelector\CssSelectorConverter;
 
 /**
@@ -293,12 +296,31 @@ protected function drupalLogout() {
    *
    * @return \Drupal\Tests\WebAssert
    *   A new web-assert option for asserting the presence of elements with.
+   *
+   * @deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use
+   *   #todo instead.
+   *
+   * @see https://www.drupal.org/node/7654321
    */
   public function assertSession($name = NULL) {
+    @trigger_error('UiHelperTrait::assertSession() is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use #todo instead. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     $this->addToAssertionCount(1);
     return new WebAssert($this->getSession($name), $this->baseUrl);
   }
 
+  /**
+   * Returns the WebAssert object.
+   *
+   * @param \Behat\Mink\Session $session
+   *   The mink session.
+   *
+   * @return \Drupal\Tests\WebAssert
+   *   A new web-assert option for asserting the presence of elements with.
+   */
+  protected function getWebAssert(Session $session): WebAssert {
+    return new WebAssert($session, $this->baseUrl);
+  }
+
   /**
    * Retrieves a Drupal path or an absolute path.
    *
@@ -437,6 +459,7 @@ protected function getAbsoluteUrl($path) {
    * @see drupal_valid_test_ua()
    */
   protected function prepareRequest() {
+    $this->currentNodeElement = NULL;
     $session = $this->getSession();
     $session->setCookie('SIMPLETEST_USER_AGENT', drupal_generate_test_ua($this->databasePrefix));
   }
@@ -468,6 +491,7 @@ protected function drupalUserIsLoggedIn(AccountInterface $account) {
    *   The CSS selector identifying the element to click.
    */
   protected function click($css_selector) {
+    $this->currentNodeElement = NULL;
     $starting_url = $this->getSession()->getCurrentUrl();
     $this->getSession()->getDriver()->click($this->cssSelectToXpath($css_selector));
     // Log only for WebDriverTestBase tests because for BrowserKitDriver we log
@@ -498,6 +522,7 @@ protected function click($css_selector) {
    *   text. Defaults to 0.
    */
   protected function clickLink($label, $index = 0) {
+    $this->currentNodeElement = NULL;
     $label = (string) $label;
     $links = $this->getSession()->getPage()->findAll('named', ['link', $label]);
     $this->assertArrayHasKey($index, $links, 'The link ' . $label . ' was not found on the page.');
@@ -591,4 +616,241 @@ protected function isTestUsingGuzzleClient() {
     return FALSE;
   }
 
+  /**
+   * Checks that current response code equals to provided one.
+   *
+   * @param int $code
+   *   The expected status code.
+   */
+  public function assertWebStatusCodeEquals(int $code): void {
+    $this->addToAssertionCount(1);
+    try {
+      $this->webAssert->statusCodeEquals($code);
+    }
+    catch (ExpectationException $e) {
+      Assert::fail($e->getMessage());
+    }
+  }
+
+  /**
+   * Checks that current response code does not equal to provided one.
+   *
+   * @param int $code
+   *   The non expected status code.
+   */
+  public function assertWebStatusCodeDoesNotEqual(int $code): void {
+    $this->addToAssertionCount(1);
+    try {
+      $this->webAssert->statusCodeNotEquals($code);
+    }
+    catch (ExpectationException $e) {
+      Assert::fail($e->getMessage());
+    }
+  }
+
+  /**
+   * Checks that page HTML (response content) contains text.
+   *
+   * @param string $text
+   *   Text value.
+   */
+  public function assertWebResponseContains(string $text): void {
+    $this->addToAssertionCount(1);
+    try {
+      $this->webAssert->responseContains($text);
+    }
+    catch (ExpectationException $e) {
+      Assert::fail($e->getMessage());
+    }
+  }
+
+  /**
+   * Checks that page HTML (response content) does not contains text.
+   *
+   * @param string $text
+   *   Text value.
+   */
+  public function assertWebResponseDoesNotContain(string $text): void {
+    $this->addToAssertionCount(1);
+    try {
+      $this->webAssert->responseNotContains($text);
+    }
+    catch (ExpectationException $e) {
+      Assert::fail($e->getMessage());
+    }
+  }
+
+  /**
+   * Checks that current page contains text.
+   *
+   * @param string $text
+   *   The expected text.
+   */
+  public function assertWebPageTextContains(string $text): void {
+    $this->addToAssertionCount(1);
+    try {
+      $this->webAssert->pageTextContains($text);
+    }
+    catch (ExpectationException $e) {
+      Assert::fail($e->getMessage());
+    }
+  }
+
+  /**
+   * Checks that current page does not contains text.
+   *
+   * @param string $text
+   *   The non expected text.
+   */
+  public function assertWebPageTextDoesNotContain(string $text): void {
+    $this->addToAssertionCount(1);
+    try {
+      $this->webAssert->pageTextNotContains($text);
+    }
+    catch (ExpectationException $e) {
+      Assert::fail($e->getMessage());
+    }
+  }
+
+  /**
+   * Asserts that the page title is the given string.
+   *
+   * @param string $title
+   *   The string the page title should be.
+   */
+  public function assertWebPageTitleEquals(string $title): void {
+    $this->addToAssertionCount(1);
+    try {
+      $this->webAssert->titleEquals($title);
+    }
+    catch (ExpectationException $e) {
+      Assert::fail($e->getMessage());
+    }
+  }
+
+  /**
+   * Checks that current response header equals value.
+   *
+   * @param string $name
+   *   The response header name.
+   * @param string $value
+   *   The expected value.
+   */
+  public function assertWebResponseHeaderEquals(string $name, string $value): void {
+    $this->addToAssertionCount(1);
+    try {
+      $this->webAssert->responseHeaderEquals($name, $value);
+    }
+    catch (ExpectationException $e) {
+      Assert::fail($e->getMessage());
+    }
+  }
+
+  /**
+   * Checks that current response header does not equal value.
+   *
+   * @param string $name
+   *   The response header name.
+   * @param string $value
+   *   The non expected value.
+   */
+  public function assertWebResponseHeaderDoesNotEqual(string $name, string $value): void {
+    $this->addToAssertionCount(1);
+    try {
+      $this->webAssert->responseHeaderNotEquals($name, $value);
+    }
+    catch (ExpectationException $e) {
+      Assert::fail($e->getMessage());
+    }
+  }
+
+  /**
+   * Checks that current response header contains value.
+   *
+   * @param string $name
+   *   The response header name.
+   * @param string $value
+   *   The expected value.
+   */
+  public function assertWebResponseHeaderContains(string $name, string $value): void {
+    $this->addToAssertionCount(1);
+    try {
+      $this->webAssert->responseHeaderContains($name, $value);
+    }
+    catch (ExpectationException $e) {
+      Assert::fail($e->getMessage());
+    }
+  }
+
+  /**
+   * Checks that current response header does not contain value.
+   *
+   * @param string $name
+   *   The response header name.
+   * @param string $value
+   *   The non expected value.
+   */
+  public function assertWebResponseHeaderDoesNotContain(string $name, string $value): void {
+    $this->addToAssertionCount(1);
+    try {
+      $this->webAssert->responseHeaderNotContains($name, $value);
+    }
+    catch (ExpectationException $e) {
+      Assert::fail($e->getMessage());
+    }
+  }
+
+  /**
+   * Checks that current response header matches regex.
+   *
+   * @param string $name
+   *   The response header name.
+   * @param string $regex
+   *   The expected regular expression.
+   */
+  public function assertWebResponseHeaderMatches(string $name, string $regex): void {
+    $this->addToAssertionCount(1);
+    try {
+      $this->webAssert->responseHeaderMatches($name, $regex);
+    }
+    catch (ExpectationException $e) {
+      Assert::fail($e->getMessage());
+    }
+  }
+
+  /**
+   * Checks that current response header does not match regex.
+   *
+   * @param string $name
+   *   The response header name.
+   * @param string $regex
+   *   The non expected regular expression.
+   */
+  public function assertWebResponseHeaderDoesNotMatch(string $name, string $regex): void {
+    $this->addToAssertionCount(1);
+    try {
+      $this->webAssert->responseHeaderNotMatches($name, $regex);
+    }
+    catch (ExpectationException $e) {
+      Assert::fail($e->getMessage());
+    }
+  }
+
+  /**
+   * Checks that specific select field exists on the current page.
+   *
+   * @param string $select
+   *   One of id|name|label|value for the select field.
+   */
+  public function assertWebSelectExists(string $select): void {
+    $this->currentNodeElement = NULL;
+    $this->addToAssertionCount(1);
+    try {
+      $this->currentNodeElement = $this->webAssert->selectExists($select);
+    }
+    catch (ExpectationException $e) {
+      Assert::fail($e->getMessage());
+    }
+  }
+
 }
