diff --git a/core/deprecation-baseline.json b/core/deprecation-baseline.json
new file mode 100644
index 0000000000000000000000000000000000000000..ae7f463117f6a5c75c45ff46ddce77afca802456
--- /dev/null
+++ b/core/deprecation-baseline.json
@@ -0,0 +1,7252 @@
+[
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\TextUI\\DefaultResultPrinter\" class is considered internal This class is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not use it from \"Drupal\\Tests\\Listeners\\HtmlOutputPrinter\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"Drupal\\Tests\\Listeners\\DrupalListener\" class implements \"PHPUnit\\Framework\\TestListener\" that is deprecated Use the `TestHook` interfaces instead.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"Drupal\\Tests\\Listeners\\DrupalListener\" class uses \"PHPUnit\\Framework\\TestListenerDefaultImplementation\" that is deprecated The `TestListener` interface is deprecated.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\BuildTests\\Framework\\BuildTestBase\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\TextUI\\DefaultResultPrinter\" class is considered internal This class is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not use it from \"Drupal\\Tests\\Listeners\\HtmlOutputPrinter\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\Tests\\BrowserTestBase\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"Drupal\\Tests\\Listeners\\DrupalListener\" class implements \"PHPUnit\\Framework\\TestListener\" that is deprecated Use the `TestHook` interfaces instead.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"Drupal\\Tests\\Listeners\\DrupalListener\" class uses \"PHPUnit\\Framework\\TestListenerDefaultImplementation\" that is deprecated The `TestListener` interface is deprecated.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\KernelTests\\KernelTestBase\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\block_content\\Functional\\Views\\BlockContentFieldFilterTest::testFilters",
+        "message": "The operator defaults update for the \"test_field_filters\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\block_content\\Functional\\Views\\BlockContentWizardTest::testViewAddBlockContent",
+        "message": "The operator defaults update for the \"wy64ksoegixngf6y\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\book\\Functional\\Views\\BookRelationshipTest::testRelationship",
+        "message": "The operator defaults update for the \"test_book_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\FunctionalTests\\Theme\\ClaroLayoutBuilderTest::testContextualLinks",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\comment\\Functional\\Views\\CommentRowTest::testCommentRow",
+        "message": "The operator defaults update for the \"test_comment_row\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\comment\\Functional\\Views\\CommentFieldFilterTest::testFilters",
+        "message": "The operator defaults update for the \"test_field_filters\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\comment\\Functional\\Views\\WizardTest::testCommentWizard",
+        "message": "The operator defaults update for the \"nvnr4qeh6mmfvnuw\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\comment\\Functional\\Views\\WizardTest::testCommentWizard",
+        "message": "The operator defaults update for the \"ro28ozbsifxsbybx\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\contact\\Functional\\Views\\ContactLinkTest::testContactLink",
+        "message": "The operator defaults update for the \"test_contact_link\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Functional\\ModerationStateAccessTest::testViewShowsCorrectStates",
+        "message": "The operator defaults update for the \"test_content_moderation_filter_via_relationship\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Functional\\ModerationStateAccessTest::testViewShowsCorrectStates",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Functional\\ModerationStateAccessTest::testViewShowsCorrectStates",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table_filter_on_revision\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Functional\\ModerationStateAccessTest::testViewShowsCorrectStates",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_entity_test\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Functional\\ModerationStateAccessTest::testViewShowsCorrectStates",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_revision_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_translation\\Functional\\Views\\TranslationLinkTest::testTranslationLink",
+        "message": "The operator defaults update for the \"test_entity_translations_link\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\datetime\\Functional\\Views\\FilterDateTest::testExposedGroupedFilters",
+        "message": "The operator defaults update for the \"test_filter_datetime\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\field\\Functional\\EntityReference\\Views\\SelectionTest::testAutocompleteOutput",
+        "message": "The operator defaults update for the \"test_entity_reference\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\field\\Functional\\EntityReference\\EntityReferenceAdminTest::testFieldAdminHandler",
+        "message": "The operator defaults update for the \"node_test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Functional\\ViewsModerationStateFilterTest::testModerationStateFilterDependencyHandling",
+        "message": "The operator defaults update for the \"test_content_moderation_filter_via_relationship\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Functional\\ViewsModerationStateFilterTest::testModerationStateFilterDependencyHandling",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Functional\\ViewsModerationStateFilterTest::testModerationStateFilterDependencyHandling",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table_filter_on_revision\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Functional\\ViewsModerationStateFilterTest::testModerationStateFilterDependencyHandling",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_entity_test\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Functional\\ViewsModerationStateFilterTest::testModerationStateFilterDependencyHandling",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_revision_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Functional\\ViewsModerationStateFilterTest::testWorkflowChanges",
+        "message": "The operator defaults update for the \"test_content_moderation_filter_via_relationship\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 2
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Functional\\ViewsModerationStateFilterTest::testWorkflowChanges",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 2
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Functional\\ViewsModerationStateFilterTest::testWorkflowChanges",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table_filter_on_revision\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 2
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Functional\\ViewsModerationStateFilterTest::testWorkflowChanges",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_entity_test\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 2
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Functional\\ViewsModerationStateFilterTest::testWorkflowChanges",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_revision_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 2
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Functional\\ViewsModerationStateFilterTest::testFilterRenderCache",
+        "message": "The operator defaults update for the \"test_content_moderation_filter_via_relationship\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Functional\\ViewsModerationStateFilterTest::testFilterRenderCache",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Functional\\ViewsModerationStateFilterTest::testFilterRenderCache",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table_filter_on_revision\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Functional\\ViewsModerationStateFilterTest::testFilterRenderCache",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_entity_test\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Functional\\ViewsModerationStateFilterTest::testFilterRenderCache",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_revision_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\link\\Functional\\Views\\LinkViewsTokensTest::testLinkViewsTokens",
+        "message": "The operator defaults update for the \"test_link_tokens\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\node\\Functional\\Views\\FilterNodeAccessTest::testFilterNodeAccess",
+        "message": "The operator defaults update for the \"test_filter_node_access\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\node\\Functional\\Views\\NodeFieldFilterTest::testFilters",
+        "message": "The operator defaults update for the \"test_field_filters\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\node\\Functional\\Views\\NodeIntegrationTest::testNodeViewTypeArgument",
+        "message": "The operator defaults update for the \"test_node_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\node\\Functional\\Views\\PathPluginTest::testPathPlugin",
+        "message": "The entity link url update for the \"test_node_path_plugin\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2857891.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\node\\Functional\\Views\\PathPluginTest::testPathPlugin",
+        "message": "The operator defaults update for the \"test_node_path_plugin\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\node\\Functional\\Views\\RowPluginTest::testRowPlugin",
+        "message": "The operator defaults update for the \"test_node_row_plugin\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Wizard\\NodeWizardTest::testViewAddWithNodeTitles",
+        "message": "The operator defaults update for the \"idwppoage765kljy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\node\\Functional\\Views\\NodeLanguageTest::testLanguages",
+        "message": "The operator defaults update for the \"test_language\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\node\\Functional\\Views\\NodeLanguageTest::testNativeLanguageField",
+        "message": "The operator defaults update for the \"test_language\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\node\\Functional\\Views\\Wizard\\NodeRevisionWizardTest::testViewAdd",
+        "message": "The operator defaults update for the \"vqkwrd9fny9dtlfl\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\node\\Functional\\Views\\Wizard\\NodeRevisionWizardTest::testViewAdd",
+        "message": "The operator defaults update for the \"uopjmjxoc76tmahj\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\node\\Functional\\Views\\StatusExtraTest::testStatusExtra",
+        "message": "The operator defaults update for the \"test_status_extra\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rdf\\Functional\\StandardProfileTest::testRdfaOutput",
+        "message": "Return type of EasyRdf\\Resource::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rdf\\Functional\\StandardProfileTest::testRdfaOutput",
+        "message": "Return type of EasyRdf\\Resource::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rdf\\Functional\\StandardProfileTest::testRdfaOutput",
+        "message": "Return type of EasyRdf\\Resource::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rdf\\Functional\\StandardProfileTest::testRdfaOutput",
+        "message": "Return type of EasyRdf\\Resource::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rdf\\Functional\\CommentAttributesTest::testCommentRdfaMarkup",
+        "message": "Return type of EasyRdf\\Resource::offsetExists($offset) should either be compatible with ArrayAccess::offsetExists(mixed $offset): bool, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rdf\\Functional\\CommentAttributesTest::testCommentRdfaMarkup",
+        "message": "Return type of EasyRdf\\Resource::offsetGet($offset) should either be compatible with ArrayAccess::offsetGet(mixed $offset): mixed, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rdf\\Functional\\CommentAttributesTest::testCommentRdfaMarkup",
+        "message": "Return type of EasyRdf\\Resource::offsetSet($offset, $value) should either be compatible with ArrayAccess::offsetSet(mixed $offset, mixed $value): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rdf\\Functional\\CommentAttributesTest::testCommentRdfaMarkup",
+        "message": "Return type of EasyRdf\\Resource::offsetUnset($offset) should either be compatible with ArrayAccess::offsetUnset(mixed $offset): void, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testDeleteField",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testOverridesWithoutDefaultsAccess",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testOverrides",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testNonBundleEntityType",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testPreserverEntityValues",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testLayoutBuilderUi",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testHtmlEntityFormControllerDecoration",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testAccess",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testNonDefaultViewMode",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testPluginDependencies",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testPluginsProvidingCustomAttributesAndContextualLinks",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testLayoutBuilderUiFullViewMode",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testFullViewModeMultipleBundles",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testLayoutBuilderChooseBlocksAlter",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testExtraFields",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testPendingRevision",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testDeletedView",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testFormAlter",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testSectionLabels",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testContextAwareLayouts",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testCustomSectionAttributes",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testBlockPlaceholder",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testOverridesFormAlter",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testBlockUiListing",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testBreadcrumb",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testSimpleConfigBasedLayout",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testRemovingAllSections",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testRemovingSectionWithoutLayoutLabel",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Functional\\LayoutBuilderTest::testLayoutBuilderContexts",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rest\\Functional\\Views\\RestExportAuthTest::testAuthProvidersOptions",
+        "message": "The operator defaults update for the \"test_view_rest_export\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rest\\Functional\\Views\\ExcludedFieldTokenTest::testExcludedTitleTokenDisplay",
+        "message": "The operator defaults update for the \"test_excluded_field_token_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\FunctionalTests\\Theme\\SevenLayoutBuilderTest::testContextualLinks",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\statistics\\Functional\\Views\\IntegrationTest::testNodeCounterIntegration",
+        "message": "The operator defaults update for the \"test_statistics_integration\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\taxonomy\\Functional\\Views\\TaxonomyFieldFilterTest::testFilters",
+        "message": "The operator defaults update for the \"test_field_filters\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\taxonomy\\Functional\\Views\\TaxonomyTermArgumentDepthTest::testTermWithDepthArgumentTitleEscaping",
+        "message": "The operator defaults update for the \"test_argument_taxonomy_index_tid_depth\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\taxonomy\\Functional\\Views\\TaxonomyTermFilterDepthTest::testTermWithDepthFilter",
+        "message": "The operator defaults update for the \"test_filter_taxonomy_index_tid_depth\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\taxonomy\\Functional\\Views\\TaxonomyIndexTidUiTest::testFilterUI",
+        "message": "The operator defaults update for the \"test_filter_taxonomy_index_tid\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\taxonomy\\Functional\\Views\\TaxonomyIndexTidUiTest::testExposedFilter",
+        "message": "The operator defaults update for the \"test_filter_taxonomy_index_tid\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\taxonomy\\Functional\\Views\\TaxonomyIndexTidUiTest::testExposedUnpublishedFilterOptions",
+        "message": "The operator defaults update for the \"test_filter_taxonomy_index_tid\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Functional\\Views\\HandlerFieldRoleTest::testRole",
+        "message": "The operator defaults update for the \"test_views_handler_field_role\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Functional\\Views\\RolesRidArgumentTest::testArgumentTitle",
+        "message": "The operator defaults update for the \"test_user_roles_rid\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Functional\\Views\\FilterPermissionUiTest::testHandlerUI",
+        "message": "The operator defaults update for the \"test_filter_permission\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\BulkFormTest::testBulkForm",
+        "message": "The operator defaults update for the \"test_bulk_form\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Functional\\Views\\BulkFormAccessTest::testUserEditAccess",
+        "message": "The operator defaults update for the \"test_user_bulk_form\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Functional\\Views\\BulkFormAccessTest::testUserDeleteAccess",
+        "message": "The operator defaults update for the \"test_user_bulk_form\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\AreaHTTPStatusCodeTest::testHTTPStatusCodeHandler",
+        "message": "The operator defaults update for the \"test_http_status_code\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Functional\\Views\\BulkFormTest::testBulkForm",
+        "message": "The operator defaults update for the \"test_user_bulk_form\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Functional\\Views\\BulkFormTest::testBulkForm",
+        "message": "The operator defaults update for the \"test_user_bulk_form_combine_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Functional\\Views\\BulkFormTest::testBulkFormCombineFilter",
+        "message": "The operator defaults update for the \"test_user_bulk_form\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Functional\\Views\\BulkFormTest::testBulkFormCombineFilter",
+        "message": "The operator defaults update for the \"test_user_bulk_form_combine_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\AreaTitleWebTest::testTitleText",
+        "message": "The operator defaults update for the \"test_area_title\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 2
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Functional\\Views\\HandlerFilterUserNameTest::testUserNameApi",
+        "message": "The operator defaults update for the \"test_user_name\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Functional\\Views\\HandlerFilterUserNameTest::testAdminUserInterface",
+        "message": "The operator defaults update for the \"test_user_name\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Functional\\Views\\HandlerFilterUserNameTest::testExposedFilter",
+        "message": "The operator defaults update for the \"test_user_name\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\FieldDropButtonTest::testDropbutton",
+        "message": "The operator defaults update for the \"test_dropbutton\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\FilterPlaceholderTextTest::testPlaceholderText",
+        "message": "The operator defaults update for the \"test_filter_placeholder_text\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\CacheTagTest::testTagCaching",
+        "message": "The operator defaults update for the \"test_tag_cache\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ContextualFiltersBlockContextTest::testBlockContext",
+        "message": "The operator defaults update for the \"test_view_block_with_context\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisabledDisplayTest::testDisabledDisplays",
+        "message": "The operator defaults update for the \"test_disabled_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayFeedTranslationTest::testFeedFieldOutput",
+        "message": "The operator defaults update for the \"test_display_feed\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\CacheWebTest::testCacheOutputOnPage",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\CacheWebTest::testDisplayWithoutCacheStillBubblesMetadata",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayAttachmentTest::testAttachment",
+        "message": "The operator defaults update for the \"test_attached_disabled\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayAttachmentTest::testDisabledAttachments",
+        "message": "The operator defaults update for the \"test_attached_disabled\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\FilterDateTest::testDateFilter",
+        "message": "The operator defaults update for the \"test_filter_date_between\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\FilterDateTest::testExposedFilter",
+        "message": "The operator defaults update for the \"test_filter_date_between\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ViewsFormTest::testFormWrapper",
+        "message": "The operator defaults update for the \"test_bulk_form\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormCheckboxesTest::testExposedFormRenderCheckboxes",
+        "message": "The operator defaults update for the \"test_exposed_form_checkboxes\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormCheckboxesTest::testExposedIsAllOfFilter",
+        "message": "The operator defaults update for the \"test_exposed_form_checkboxes\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\UserPathTest::testUserLoginPage",
+        "message": "The operator defaults update for the \"test_user_path\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\SearchIntegrationTest::testSearchIntegration",
+        "message": "The operator defaults update for the \"test_search\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\SearchMultilingualTest::testMultilingualSearchFilter",
+        "message": "The operator defaults update for the \"test_search\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\RenderCacheWebTest::testEmptyView",
+        "message": "The operator defaults update for the \"node_id_argument\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\RenderCacheWebTest::testRepeatedDisplay",
+        "message": "The operator defaults update for the \"node_id_argument\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\ViewElementTest::testViewElement",
+        "message": "The operator defaults update for the \"test_view_embed\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\ViewElementTest::testViewElementEmbed",
+        "message": "The operator defaults update for the \"test_view_embed\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Wizard\\MenuTest::testMenus",
+        "message": "The operator defaults update for the \"lmtrtl22klpp3dys\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\FilterTest::testFilterQuery",
+        "message": "The operator defaults update for the \"test_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\FilterTest::testFilterQuery",
+        "message": "The operator defaults update for the \"test_filter_in_operator_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\FilterTest::testInOperatorSelectAllOptions",
+        "message": "The operator defaults update for the \"test_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\FilterTest::testInOperatorSelectAllOptions",
+        "message": "The operator defaults update for the \"test_filter_in_operator_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\FilterTest::testLimitExposedOperators",
+        "message": "The operator defaults update for the \"test_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\FilterTest::testLimitExposedOperators",
+        "message": "The operator defaults update for the \"test_filter_in_operator_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Wizard\\ItemsPerPageTest::testItemsPerPage",
+        "message": "The operator defaults update for the \"svhewokuuya2soq0\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Wizard\\PagerTest::testPager",
+        "message": "The operator defaults update for the \"zp6woa8eolpjgg46\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Wizard\\PagerTest::testPager",
+        "message": "The operator defaults update for the \"wqpi4wbf0uqbgv1b\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Wizard\\SortingTest::testSorting",
+        "message": "The operator defaults update for the \"o0j9wz40plmpxb0w\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Wizard\\SortingTest::testSorting",
+        "message": "The operator defaults update for the \"xz5kxwjsgnljgjd2\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayFeedTest::testFeedOutput",
+        "message": "The operator defaults update for the \"test_display_feed\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayFeedTest::testFeedOutput",
+        "message": "The operator defaults update for the \"test_attached_disabled\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayFeedTest::testFeedFieldOutput",
+        "message": "The operator defaults update for the \"test_display_feed\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayFeedTest::testFeedFieldOutput",
+        "message": "The operator defaults update for the \"test_attached_disabled\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayFeedTest::testDisabledFeed",
+        "message": "The operator defaults update for the \"test_display_feed\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayFeedTest::testDisabledFeed",
+        "message": "The operator defaults update for the \"test_attached_disabled\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayFeedTest::testDisabledLinkedDisplay",
+        "message": "The operator defaults update for the \"test_display_feed\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayFeedTest::testDisabledLinkedDisplay",
+        "message": "The operator defaults update for the \"test_attached_disabled\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ArgumentDefaultTest::testArgumentDefaultPlugin",
+        "message": "The operator defaults update for the \"test_argument_default_node\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ArgumentDefaultTest::testArgumentDefaultNoOptions",
+        "message": "The operator defaults update for the \"test_argument_default_node\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ArgumentDefaultTest::testArgumentDefaultFixed",
+        "message": "The operator defaults update for the \"test_argument_default_node\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ArgumentDefaultTest::testArgumentDefaultNode",
+        "message": "The operator defaults update for the \"test_argument_default_node\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ArgumentDefaultTest::testArgumentDefaultQueryParameter",
+        "message": "The operator defaults update for the \"test_argument_default_node\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Wizard\\BasicTest::testViewsWizardAndListing",
+        "message": "The operator defaults update for the \"opd6gxdo2e8kohdb\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Wizard\\BasicTest::testViewsWizardAndListing",
+        "message": "The operator defaults update for the \"btizktbutibwdah9\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Wizard\\BasicTest::testViewsWizardAndListing",
+        "message": "The operator defaults update for the \"fqiqnfqdcnx0cfly\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Wizard\\BasicTest::testViewsWizardAndListing",
+        "message": "The operator defaults update for the \"env4cnxb8wajiari\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Wizard\\BasicTest::testViewsWizardAndListing",
+        "message": "The operator defaults update for the \"ykqm0rvt8kwdnfts\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Wizard\\BasicTest::testWizardDefaultValues",
+        "message": "The operator defaults update for the \"kgqt2qhhraj1m57z\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DuplicateTest::testDuplicateView",
+        "message": "The operator defaults update for the \"j1jdqrdtvtl3c1da\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayFeedTest::testFeedUI",
+        "message": "The operator defaults update for the \"test_display_feed\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\HandlerTest::testBreakString",
+        "message": "The operator defaults update for the \"test_view_handler_weight\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\HandlerTest::testBreakString",
+        "message": "The operator defaults update for the \"test_handler_test_access\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\HandlerTest::testBreakString",
+        "message": "The operator defaults update for the \"test_filter_in_operator_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\HandlerTest::testHandlerWeights",
+        "message": "The operator defaults update for the \"test_view_handler_weight\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\HandlerTest::testHandlerWeights",
+        "message": "The operator defaults update for the \"test_handler_test_access\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\HandlerTest::testHandlerWeights",
+        "message": "The operator defaults update for the \"test_filter_in_operator_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\HandlerTest::testRelationshipUI",
+        "message": "The operator defaults update for the \"test_view_handler_weight\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\HandlerTest::testRelationshipUI",
+        "message": "The operator defaults update for the \"test_handler_test_access\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\HandlerTest::testRelationshipUI",
+        "message": "The operator defaults update for the \"test_filter_in_operator_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\HandlerTest::testSetRelationship",
+        "message": "The operator defaults update for the \"test_view_handler_weight\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\HandlerTest::testSetRelationship",
+        "message": "The operator defaults update for the \"test_handler_test_access\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\HandlerTest::testSetRelationship",
+        "message": "The operator defaults update for the \"test_filter_in_operator_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\HandlerTest::testPlaceholder",
+        "message": "The operator defaults update for the \"test_view_handler_weight\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\HandlerTest::testPlaceholder",
+        "message": "The operator defaults update for the \"test_handler_test_access\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\HandlerTest::testPlaceholder",
+        "message": "The operator defaults update for the \"test_filter_in_operator_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\HandlerTest::testAccess",
+        "message": "The operator defaults update for the \"test_view_handler_weight\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\HandlerTest::testAccess",
+        "message": "The operator defaults update for the \"test_handler_test_access\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Handler\\HandlerTest::testAccess",
+        "message": "The operator defaults update for the \"test_filter_in_operator_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\AreaEntityUITest::testUI",
+        "message": "The operator defaults update for the \"q097w7snh1czze5f\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayAttachmentTest::testRemoveAttachedDisplay",
+        "message": "The operator defaults update for the \"i3aow3mrcw7suxwe\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\FieldUITest::testFieldLabel",
+        "message": "The operator defaults update for the \"zulotm6sqfugqcwm\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\RedirectTest::testRedirect",
+        "message": "The operator defaults update for the \"test_redirect_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rest\\Functional\\Views\\StyleSerializerTest::testRestViewsAuthentication",
+        "message": "The operator defaults update for the \"test_serializer_node_exposed_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rest\\Functional\\Views\\StyleSerializerTest::testSerializerResponses",
+        "message": "The operator defaults update for the \"test_serializer_node_exposed_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rest\\Functional\\Views\\StyleSerializerTest::testSharedPagePath",
+        "message": "The operator defaults update for the \"test_serializer_node_exposed_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rest\\Functional\\Views\\StyleSerializerTest::testSiteMaintenance",
+        "message": "The operator defaults update for the \"test_serializer_node_exposed_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rest\\Functional\\Views\\StyleSerializerTest::testRestRenderCaching",
+        "message": "The operator defaults update for the \"test_serializer_node_exposed_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rest\\Functional\\Views\\StyleSerializerTest::testResponseFormatConfiguration",
+        "message": "The operator defaults update for the \"test_serializer_node_exposed_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rest\\Functional\\Views\\StyleSerializerTest::testUIFieldAlias",
+        "message": "The operator defaults update for the \"test_serializer_node_exposed_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rest\\Functional\\Views\\StyleSerializerTest::testFieldRawOutput",
+        "message": "The operator defaults update for the \"test_serializer_node_exposed_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rest\\Functional\\Views\\StyleSerializerTest::testLivePreview",
+        "message": "The operator defaults update for the \"test_serializer_node_exposed_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rest\\Functional\\Views\\StyleSerializerTest::testSerializerViewsUI",
+        "message": "The operator defaults update for the \"test_serializer_node_exposed_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rest\\Functional\\Views\\StyleSerializerTest::testFieldapiField",
+        "message": "The operator defaults update for the \"test_serializer_node_exposed_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rest\\Functional\\Views\\StyleSerializerTest::testGroupRows",
+        "message": "The operator defaults update for the \"test_serializer_node_exposed_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rest\\Functional\\Views\\StyleSerializerTest::testRestViewExposedFilter",
+        "message": "The operator defaults update for the \"test_serializer_node_exposed_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\rest\\Functional\\Views\\StyleSerializerTest::testMulEntityRows",
+        "message": "The operator defaults update for the \"test_serializer_node_exposed_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Wizard\\TaggedWithTest::testTaggedWith",
+        "message": "The operator defaults update for the \"uvzbgaooxjalsjg3\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Wizard\\TaggedWithTest::testTaggedWith",
+        "message": "The operator defaults update for the \"sf4hq0qnnndxibdf\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\NewViewConfigSchemaTest::testNewViews",
+        "message": "The operator defaults update for the \"z5vdhfei\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\NewViewConfigSchemaTest::testNewViews",
+        "message": "The operator defaults update for the \"rpj0obhx\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\NewViewConfigSchemaTest::testNewViews",
+        "message": "The operator defaults update for the \"bnvq97lz\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\NewViewConfigSchemaTest::testNewViews",
+        "message": "The operator defaults update for the \"hciiz544\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\NewViewConfigSchemaTest::testNewViews",
+        "message": "The operator defaults update for the \"km1wegrx\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\StyleTableTest::testWizard",
+        "message": "The operator defaults update for the \"t8r6e8bnanvbwoua\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\WizardTest::testWizardFieldLength",
+        "message": "The operator defaults update for the \"xsradsurkhqxqd5irrycxfootgmaqvw45kzeqvxgstrtizc2ttcttx299lfiqns1ccqgftnjpdc8onrikau6v1nlpn5twuqpdmaajniz7gc6sgolej3h64gug8riedjg\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\SettingsTest::testEditUI",
+        "message": "The operator defaults update for the \"qhly8wbc99dcgfzd\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\SettingsTest::testEditUI",
+        "message": "The operator defaults update for the \"dep1bpn2\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\SettingsTest::testEditUI",
+        "message": "The operator defaults update for the \"fbotzlq9\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\SettingsTest::testEditUI",
+        "message": "The operator defaults update for the \"zsbglouz\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\SettingsTest::testEditUI",
+        "message": "The operator defaults update for the \"dvdzj7bg\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\FilterUITest::testFilterInOperatorUi",
+        "message": "The operator defaults update for the \"test_filter_in_operator_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\FilterUITest::testFilterInOperatorUi",
+        "message": "The operator defaults update for the \"test_filter_groups\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\FilterUITest::testFiltersUI",
+        "message": "The operator defaults update for the \"test_filter_in_operator_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\FilterUITest::testFiltersUI",
+        "message": "The operator defaults update for the \"test_filter_groups\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\FilterUITest::testFilterIdentifier",
+        "message": "The operator defaults update for the \"test_filter_in_operator_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\FilterUITest::testFilterIdentifier",
+        "message": "The operator defaults update for the \"test_filter_groups\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\ViewsUITourTest::testViewsUiTourTips",
+        "message": "The operator defaults update for the \"xq27bmenynutetra\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\ViewsUITourTest::testViewsUiTourTipsTranslated",
+        "message": "The operator defaults update for the \"hkmc21cjuiqxpthv\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\TokenizeAreaUITest::testTokenUI",
+        "message": "The operator defaults update for the \"tmxkueczs1aceuiz\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayCRUDTest::testAddDisplay",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayCRUDTest::testAddDisplay",
+        "message": "The operator defaults update for the \"ww0srmtf2m65nw0x\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayCRUDTest::testRemoveDisplay",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayCRUDTest::testRemoveDisplay",
+        "message": "The operator defaults update for the \"mrbvr850jtzeo29z\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayCRUDTest::testRemoveDisplay",
+        "message": "The operator defaults update for the \"g35cie57p1lxdvhr\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayCRUDTest::testDefaultDisplay",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayCRUDTest::testDuplicateDisplay",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayCRUDTest::testDuplicateDisplay",
+        "message": "The operator defaults update for the \"fx10rocimcajxyq7\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\OverrideDisplaysTest::testOverrideDisplays",
+        "message": "The operator defaults update for the \"lohydrofwb0x58xx\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\OverrideDisplaysTest::testWizardMixedDefaultOverriddenDisplays",
+        "message": "The operator defaults update for the \"z27xfrbjlbaifjl7\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\OverrideDisplaysTest::testRevertAllDisplays",
+        "message": "The operator defaults update for the \"mkzpdgfhimr9groi\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayPathTest::testDefaultMenuTabRegression",
+        "message": "The operator defaults update for the \"hbhz6fltperhjxgs\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testDisplayPlugin",
+        "message": "The operator defaults update for the \"test_filter_groups\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testDisplayPlugin",
+        "message": "The operator defaults update for the \"test_get_attach_displays\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testDisplayPlugin",
+        "message": "The operator defaults update for the \"test_exposed_relationship_admin_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testFilterGroupsOverriding",
+        "message": "The operator defaults update for the \"test_filter_groups\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testFilterGroupsOverriding",
+        "message": "The operator defaults update for the \"test_get_attach_displays\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testFilterGroupsOverriding",
+        "message": "The operator defaults update for the \"test_exposed_relationship_admin_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testGetAttachedDisplays",
+        "message": "The operator defaults update for the \"test_filter_groups\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testGetAttachedDisplays",
+        "message": "The operator defaults update for the \"test_get_attach_displays\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testGetAttachedDisplays",
+        "message": "The operator defaults update for the \"test_exposed_relationship_admin_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testReadMoreNoDisplay",
+        "message": "The operator defaults update for the \"test_filter_groups\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testReadMoreNoDisplay",
+        "message": "The operator defaults update for the \"test_get_attach_displays\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testReadMoreNoDisplay",
+        "message": "The operator defaults update for the \"test_exposed_relationship_admin_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testReadMoreCustomURL",
+        "message": "The operator defaults update for the \"test_filter_groups\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testReadMoreCustomURL",
+        "message": "The operator defaults update for the \"test_get_attach_displays\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testReadMoreCustomURL",
+        "message": "The operator defaults update for the \"test_exposed_relationship_admin_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testInvalidDisplayPlugins",
+        "message": "The operator defaults update for the \"test_filter_groups\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testInvalidDisplayPlugins",
+        "message": "The operator defaults update for the \"test_get_attach_displays\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testInvalidDisplayPlugins",
+        "message": "The operator defaults update for the \"test_exposed_relationship_admin_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testMissingRelationship",
+        "message": "The operator defaults update for the \"test_filter_groups\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testMissingRelationship",
+        "message": "The operator defaults update for the \"test_get_attach_displays\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testMissingRelationship",
+        "message": "The operator defaults update for the \"test_exposed_relationship_admin_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testOutputIsEmpty",
+        "message": "The operator defaults update for the \"test_filter_groups\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testOutputIsEmpty",
+        "message": "The operator defaults update for the \"test_get_attach_displays\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testOutputIsEmpty",
+        "message": "The operator defaults update for the \"test_exposed_relationship_admin_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testTranslationSetting",
+        "message": "The operator defaults update for the \"test_filter_groups\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testTranslationSetting",
+        "message": "The operator defaults update for the \"test_get_attach_displays\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\DisplayTest::testTranslationSetting",
+        "message": "The operator defaults update for the \"test_exposed_relationship_admin_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\ExposedFormUITest::testExposedAdminUi",
+        "message": "The operator defaults update for the \"test_exposed_admin_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\ExposedFormUITest::testExposedAdminUi",
+        "message": "The operator defaults update for the \"yzbfsbc26hmxfu2k\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\ExposedFormUITest::testGroupedFilterAdminUi",
+        "message": "The operator defaults update for the \"test_exposed_admin_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\ExposedFormUITest::testGroupedFilterAdminUiErrors",
+        "message": "The operator defaults update for the \"test_exposed_admin_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\ExposedFormUITest::testExposedGroupedFilter",
+        "message": "The operator defaults update for the \"test_exposed_admin_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\PreviewTest::testPreviewContextual",
+        "message": "The operator defaults update for the \"test_preview\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\PreviewTest::testPreviewUI",
+        "message": "The operator defaults update for the \"test_preview\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\PreviewTest::testPreviewUI",
+        "message": "The operator defaults update for the \"ozhtslzrnbjwxfad\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\PreviewTest::testPreviewAdditionalInfo",
+        "message": "The operator defaults update for the \"test_preview\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\PreviewTest::testPreviewError",
+        "message": "The operator defaults update for the \"test_preview\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\ViewEditTest::testDeleteLink",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\ViewEditTest::testOtherOptions",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\ViewEditTest::testEditFormLanguageOptions",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\ViewEditTest::testRelationRepresentativeNode",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\HandlerTest::testUICRUD",
+        "message": "The operator defaults update for the \"test_view_broken\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\HandlerTest::testUICRUD",
+        "message": "The operator defaults update for the \"test_node_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\HandlerTest::testHandlerHelpEscaping",
+        "message": "The operator defaults update for the \"test_view_broken\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\HandlerTest::testHandlerHelpEscaping",
+        "message": "The operator defaults update for the \"test_node_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\HandlerTest::testBrokenHandlers",
+        "message": "The operator defaults update for the \"test_view_broken\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\HandlerTest::testBrokenHandlers",
+        "message": "The operator defaults update for the \"test_node_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\HandlerTest::testNoDuplicateFields",
+        "message": "The operator defaults update for the \"test_view_broken\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\HandlerTest::testNoDuplicateFields",
+        "message": "The operator defaults update for the \"test_node_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\HandlerTest::testErrorMissingHelp",
+        "message": "The operator defaults update for the \"test_view_broken\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\HandlerTest::testErrorMissingHelp",
+        "message": "The operator defaults update for the \"test_node_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayTest::testAddDisplay",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayTest::testAddDisplay",
+        "message": "The operator defaults update for the \"s6gb0xi8pfrugays\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayTest::testReorderDisplay",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayTest::testReorderDisplay",
+        "message": "The operator defaults update for the \"vmvklwudoq2evhf4\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayTest::testDisableDisplay",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayTest::testDisableDisplay",
+        "message": "The operator defaults update for the \"oboy6pzf3piywazs\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayTest::testDisplayPluginsAlter",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayTest::testDisplayAreas",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayTest::testLinkDisplay",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayTest::testViewStatus",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayTest::testViewStatus",
+        "message": "The operator defaults update for the \"kkvnr69ihog0lo9l\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayTest::testDisplayTitleInButtonsXss",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayTest::testDisplayTitleInButtonsXss",
+        "message": "The operator defaults update for the \"egvpdq0ckixajxeu\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayTest::testActionLinks",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Functional\\DisplayTest::testHideDisplayOverride",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testSubmitButton",
+        "message": "The operator defaults update for the \"test_exposed_form_buttons\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testSubmitButton",
+        "message": "The operator defaults update for the \"test_exposed_block\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testSubmitButton",
+        "message": "The operator defaults update for the \"test_exposed_form_pager\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testExposedIdentifier",
+        "message": "The operator defaults update for the \"test_exposed_form_buttons\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 2
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testExposedIdentifier",
+        "message": "The operator defaults update for the \"test_exposed_block\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testExposedIdentifier",
+        "message": "The operator defaults update for the \"test_exposed_form_pager\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testResetButton",
+        "message": "The operator defaults update for the \"test_exposed_form_buttons\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testResetButton",
+        "message": "The operator defaults update for the \"test_exposed_block\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testResetButton",
+        "message": "The operator defaults update for the \"test_exposed_form_pager\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testExposedBlock",
+        "message": "The operator defaults update for the \"test_exposed_form_buttons\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 2
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testExposedBlock",
+        "message": "The operator defaults update for the \"test_exposed_block\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 2
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testExposedBlock",
+        "message": "The operator defaults update for the \"test_exposed_form_pager\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 2
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testInputRequired",
+        "message": "The operator defaults update for the \"test_exposed_form_buttons\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testInputRequired",
+        "message": "The operator defaults update for the \"test_exposed_block\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testInputRequired",
+        "message": "The operator defaults update for the \"test_exposed_form_pager\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testTextInputRequired",
+        "message": "The operator defaults update for the \"test_exposed_form_buttons\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testTextInputRequired",
+        "message": "The operator defaults update for the \"test_exposed_block\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testTextInputRequired",
+        "message": "The operator defaults update for the \"test_exposed_form_pager\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testExposedSortAndItemsPerPage",
+        "message": "The operator defaults update for the \"test_exposed_form_buttons\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testExposedSortAndItemsPerPage",
+        "message": "The operator defaults update for the \"test_exposed_block\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testExposedSortAndItemsPerPage",
+        "message": "The operator defaults update for the \"test_exposed_form_pager\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testFormErrorWithExposedForm",
+        "message": "The operator defaults update for the \"test_exposed_form_buttons\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testFormErrorWithExposedForm",
+        "message": "The operator defaults update for the \"test_exposed_block\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testFormErrorWithExposedForm",
+        "message": "The operator defaults update for the \"test_exposed_form_pager\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testExposedFilterPagination",
+        "message": "The operator defaults update for the \"test_exposed_form_buttons\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testExposedFilterPagination",
+        "message": "The operator defaults update for the \"test_exposed_block\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Functional\\Plugin\\ExposedFormTest::testExposedFilterPagination",
+        "message": "The operator defaults update for the \"test_exposed_form_pager\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\TextUI\\DefaultResultPrinter\" class is considered internal This class is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not use it from \"Drupal\\Tests\\Listeners\\HtmlOutputPrinter\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\Tests\\BrowserTestBase\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"Drupal\\Tests\\Listeners\\DrupalListener\" class implements \"PHPUnit\\Framework\\TestListener\" that is deprecated Use the `TestHook` interfaces instead.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"Drupal\\Tests\\Listeners\\DrupalListener\" class uses \"PHPUnit\\Framework\\TestListenerDefaultImplementation\" that is deprecated The `TestListener` interface is deprecated.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\field\\FunctionalJavascript\\EntityReference\\EntityReferenceAdminTest::testFieldAdminHandler",
+        "message": "The operator defaults update for the \"test_entity_reference\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\FunctionalJavascript\\ContextualLinksTest::testContextualLinks",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\FunctionalJavascript\\LayoutBuilderNestedFormUiTest::testAddingFormBlocksToDefaults",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\FunctionalJavascript\\LayoutBuilderNestedFormUiTest::testAddingFormBlocksToOverrides",
+        "message": "The operator defaults update for the \"test_block_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\FunctionalJavascript\\GlossaryViewTest::testGlossaryDefault",
+        "message": "The operator defaults update for the \"test_glossary\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\FunctionalJavascript\\GlossaryViewTest::testGlossaryLanguagePrefix",
+        "message": "The operator defaults update for the \"test_glossary\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\FunctionalJavascript\\ClickSortingAJAXTest::testClickSorting",
+        "message": "The operator defaults update for the \"test_content_ajax\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\FunctionalJavascript\\BlockExposedFilterAJAXTest::testExposedFilteringAndReset",
+        "message": "The operator defaults update for the \"test_block_exposed_ajax\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\FunctionalJavascript\\BlockExposedFilterAJAXTest::testExposedFilteringAndReset",
+        "message": "The operator defaults update for the \"test_block_exposed_ajax_with_page\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\FunctionalJavascript\\PaginationAJAXTest::testBasicPagination",
+        "message": "The operator defaults update for the \"test_content_ajax\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\FunctionalJavascript\\Plugin\\views\\Handler\\ContextualFilterTest::testAddContextualFilterUI",
+        "message": "The operator defaults update for the \"test_field_body\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\FunctionalJavascript\\Plugin\\views\\Handler\\FieldTest::testFormatterChanging",
+        "message": "The operator defaults update for the \"test_field_body\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\FunctionalJavascript\\Plugin\\views\\Handler\\GroupedExposedFilterTest::testGroupedFilterValuesUI",
+        "message": "The operator defaults update for the \"test_exposed_admin_ui\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\FunctionalJavascript\\DisplayTest::testAddDisplay",
+        "message": "The operator defaults update for the \"test_content_ajax\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\FunctionalJavascript\\DisplayTest::testAddDisplay",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\FunctionalJavascript\\DisplayTest::testPageContextualLinks",
+        "message": "The operator defaults update for the \"test_content_ajax\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\FunctionalJavascript\\DisplayTest::testPageContextualLinks",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\FunctionalJavascript\\DisplayTest::testAjaxRebuild",
+        "message": "The operator defaults update for the \"test_content_ajax\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\FunctionalJavascript\\DisplayTest::testAjaxRebuild",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\FunctionalJavascript\\PreviewTest::testTaxonomyAJAX",
+        "message": "The operator defaults update for the \"test_preview\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\FunctionalJavascript\\PreviewTest::testPreviewWithPagersUI",
+        "message": "The operator defaults update for the \"test_preview\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\FunctionalJavascript\\PreviewTest::testPreviewSortLink",
+        "message": "The operator defaults update for the \"test_preview\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\TextUI\\DefaultResultPrinter\" class is considered internal This class is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not use it from \"Drupal\\Tests\\Listeners\\HtmlOutputPrinter\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\KernelTests\\KernelTestBase\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"Drupal\\Tests\\Listeners\\DrupalListener\" class implements \"PHPUnit\\Framework\\TestListener\" that is deprecated Use the `TestHook` interfaces instead.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"Drupal\\Tests\\Listeners\\DrupalListener\" class uses \"PHPUnit\\Framework\\TestListenerDefaultImplementation\" that is deprecated The `TestListener` interface is deprecated.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\Tests\\UnitTestCase\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\layout_builder\\Kernel\\TestSectionList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Iterator::rewind()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\id_map\\Sql\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Iterator::current()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\id_map\\Sql\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Iterator::key()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\id_map\\Sql\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Iterator::next()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\id_map\\Sql\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Iterator::valid()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\id_map\\Sql\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Iterator::current()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\source\\SourcePluginBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Iterator::key()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\source\\SourcePluginBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Iterator::valid()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\source\\SourcePluginBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Iterator::rewind()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\source\\SourcePluginBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Iterator::next()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\source\\SourcePluginBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"JsonSerializable::jsonSerialize()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\GeneratedLink\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\GeneratedLink\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Psr\\Log\\LoggerInterface::emergency()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\system\\Kernel\\SecurityAdvisories\\SecurityAdvisoriesFetcherTest\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Psr\\Log\\LoggerInterface::alert()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\system\\Kernel\\SecurityAdvisories\\SecurityAdvisoriesFetcherTest\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Psr\\Log\\LoggerInterface::critical()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\system\\Kernel\\SecurityAdvisories\\SecurityAdvisoriesFetcherTest\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Psr\\Log\\LoggerInterface::error()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\system\\Kernel\\SecurityAdvisories\\SecurityAdvisoriesFetcherTest\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Psr\\Log\\LoggerInterface::warning()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\system\\Kernel\\SecurityAdvisories\\SecurityAdvisoriesFetcherTest\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Psr\\Log\\LoggerInterface::notice()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\system\\Kernel\\SecurityAdvisories\\SecurityAdvisoriesFetcherTest\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Psr\\Log\\LoggerInterface::info()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\system\\Kernel\\SecurityAdvisories\\SecurityAdvisoriesFetcherTest\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Psr\\Log\\LoggerInterface::debug()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\system\\Kernel\\SecurityAdvisories\\SecurityAdvisoriesFetcherTest\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\comment\\Kernel\\Views\\CommentFieldNameTest::testCommentFieldName",
+        "message": "The operator defaults update for the \"test_comment_field_name\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsDataIntegrationTest::testContentModerationStateField",
+        "message": "The operator defaults update for the \"test_content_moderation_filter_via_relationship\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsDataIntegrationTest::testContentModerationStateField",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsDataIntegrationTest::testContentModerationStateField",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table_filter_on_revision\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsDataIntegrationTest::testContentModerationStateField",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_entity_test\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsDataIntegrationTest::testContentModerationStateField",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_revision_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateSortTest::testSortBaseTable",
+        "message": "The operator defaults update for the \"test_content_moderation_filter_via_relationship\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateSortTest::testSortBaseTable",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateSortTest::testSortBaseTable",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table_filter_on_revision\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateSortTest::testSortBaseTable",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_entity_test\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateSortTest::testSortBaseTable",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_revision_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateSortTest::testSortRevisionBaseTable",
+        "message": "The operator defaults update for the \"test_content_moderation_filter_via_relationship\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateSortTest::testSortRevisionBaseTable",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateSortTest::testSortRevisionBaseTable",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table_filter_on_revision\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateSortTest::testSortRevisionBaseTable",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_entity_test\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateSortTest::testSortRevisionBaseTable",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_revision_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateFilterTest::testStateFilterViewsRelationship",
+        "message": "The operator defaults update for the \"test_content_moderation_filter_via_relationship\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateFilterTest::testStateFilterViewsRelationship",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateFilterTest::testStateFilterViewsRelationship",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table_filter_on_revision\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateFilterTest::testStateFilterViewsRelationship",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_entity_test\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateFilterTest::testStateFilterViewsRelationship",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_revision_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateFilterTest::testNonTranslatableEntityType",
+        "message": "The operator defaults update for the \"test_content_moderation_filter_via_relationship\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateFilterTest::testNonTranslatableEntityType",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateFilterTest::testNonTranslatableEntityType",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table_filter_on_revision\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateFilterTest::testNonTranslatableEntityType",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_entity_test\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateFilterTest::testNonTranslatableEntityType",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_revision_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateFilterTest::testModerationStateFilterOnJoinedEntity",
+        "message": "The operator defaults update for the \"test_content_moderation_filter_via_relationship\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateFilterTest::testModerationStateFilterOnJoinedEntity",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateFilterTest::testModerationStateFilterOnJoinedEntity",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table_filter_on_revision\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateFilterTest::testModerationStateFilterOnJoinedEntity",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_entity_test\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateFilterTest::testModerationStateFilterOnJoinedEntity",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_revision_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateFilterTest::testStateFilterStatesList",
+        "message": "The operator defaults update for the \"test_content_moderation_filter_via_relationship\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateFilterTest::testStateFilterStatesList",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateFilterTest::testStateFilterStatesList",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_base_table_filter_on_revision\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateFilterTest::testStateFilterStatesList",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_entity_test\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Kernel\\ViewsModerationStateFilterTest::testStateFilterStatesList",
+        "message": "The operator defaults update for the \"test_content_moderation_state_filter_revision_table\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\datetime\\Kernel\\Views\\DateTimeSchemaTest::testDateTimeSchema",
+        "message": "The operator defaults update for the \"test_filter_datetime\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\datetime\\Kernel\\Views\\FilterDateTimeTest::testDatetimeFilter",
+        "message": "The operator defaults update for the \"test_filter_datetime\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\datetime_range\\Kernel\\Views\\FilterDateTest::testDateOffsets",
+        "message": "The operator defaults update for the \"test_filter_datetime\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\datetime\\Kernel\\Views\\FilterDateTest::testDateOffsets",
+        "message": "The operator defaults update for the \"test_filter_datetime\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\datetime\\Kernel\\Views\\FilterDateTest::testDateIs",
+        "message": "The operator defaults update for the \"test_filter_datetime\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\dblog\\Kernel\\Views\\ViewsIntegrationTest::testMessages",
+        "message": "The operator defaults update for the \"dblog_integration_test\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\dblog\\Kernel\\Views\\ViewsIntegrationTest::testRelationship",
+        "message": "The operator defaults update for the \"dblog_integration_test\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\dblog\\Kernel\\Views\\ViewsIntegrationTest::testFiltering",
+        "message": "The operator defaults update for the \"dblog_integration_test\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 3
+    },
+    {
+        "location": "Drupal\\Tests\\field\\Kernel\\EntityReference\\Views\\SelectionTest::testSelectionHandler",
+        "message": "The operator defaults update for the \"test_entity_reference\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 2
+    },
+    {
+        "location": "Drupal\\Tests\\field\\Kernel\\EntityReference\\Views\\SelectionTest::testAnchorTagStripping",
+        "message": "The operator defaults update for the \"test_entity_reference\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\history\\Kernel\\Views\\HistoryTimestampTest::testHandlers",
+        "message": "The operator defaults update for the \"test_history\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\node\\Kernel\\Views\\FilterUidRevisionTest::testFilter",
+        "message": "The operator defaults update for the \"test_filter_node_uid_revision\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\taxonomy\\Kernel\\Views\\ArgumentValidatorTermTest::testArgumentValidatorTerm",
+        "message": "The operator defaults update for the \"test_argument_validator_term\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\taxonomy\\Kernel\\Views\\TaxonomyIndexTidFilterTest::testConfigDependency",
+        "message": "The operator defaults update for the \"test_filter_taxonomy_index_tid__non_existing_dependency\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\taxonomy\\Kernel\\Views\\TaxonomyTermFilterDepthTest::testTermWithDepthFilter",
+        "message": "The operator defaults update for the \"test_filter_taxonomy_index_tid_depth\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\taxonomy\\Kernel\\Views\\TaxonomyTermArgumentDepthTest::testTermWithDepthFilter",
+        "message": "The operator defaults update for the \"test_argument_taxonomy_index_tid_depth\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\tracker\\Kernel\\Views\\TrackerUserUidTest::testUserUid",
+        "message": "The operator defaults update for the \"test_tracker_user_uid\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\taxonomy\\Kernel\\Views\\TaxonomyDefaultArgumentTest::testNodePathWithViewSelection",
+        "message": "The operator defaults update for the \"test_entity_reference\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Kernel\\Views\\RelationshipRepresentativeNodeTest::testRelationship",
+        "message": "The operator defaults update for the \"test_groupwise_user\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Kernel\\Views\\HandlerFilterPermissionTest::testFilterPermission",
+        "message": "The operator defaults update for the \"test_filter_permission\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Kernel\\Views\\UserDataTest::testDataField",
+        "message": "The operator defaults update for the \"test_user_data\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Kernel\\Views\\HandlerFilterCurrentUserTest::testFilterCurrentUserAsAnonymous",
+        "message": "The operator defaults update for the \"test_filter_current_user\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Kernel\\Views\\HandlerFilterCurrentUserTest::testFilterCurrentUserAsUser",
+        "message": "The operator defaults update for the \"test_filter_current_user\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Kernel\\Views\\HandlerFilterRolesTest::testDependencies",
+        "message": "The operator defaults update for the \"test_user_name\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 5
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Kernel\\Views\\HandlerFilterRolesTest::testMissingRole",
+        "message": "The operator defaults update for the \"test_user_name\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\options\\Kernel\\Views\\OptionsListArgumentTest::testViewsTestOptionsListArgument",
+        "message": "The operator defaults update for the \"test_options_list_argument_numeric\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\options\\Kernel\\Views\\OptionsListArgumentTest::testViewsTestOptionsListArgument",
+        "message": "The operator defaults update for the \"test_options_list_argument_string\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Entity\\LatestRevisionFilterTest::testLatestRevisionFilter",
+        "message": "The operator defaults update for the \"test_latest_revision_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Entity\\FilterEntityBundleTest::testFilterEntity",
+        "message": "The operator defaults update for the \"test_entity_type_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Entity\\LatestTranslationAffectedRevisionTest::testLatestRevisionFilter",
+        "message": "The operator defaults update for the \"test_latest_translation_affected_revision_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\AreaDisplayLinkTest::testAreaDisplayLink",
+        "message": "The operator defaults update for the \"test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Entity\\ViewEntityDependenciesTest::testGetDependencies",
+        "message": "The operator defaults update for the \"test_argument_dependency\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\options\\Kernel\\Views\\OptionsListFilterTest::testViewsTestOptionsListFilter",
+        "message": "The operator defaults update for the \"test_options_list_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\options\\Kernel\\Views\\OptionsListFilterTest::testViewsTestOptionsListGroupedFilter",
+        "message": "The operator defaults update for the \"test_options_list_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 2
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\ArgumentStringTest::testGlossary",
+        "message": "The operator defaults update for the \"test_glossary\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\FieldApiDataTest::testViewsData",
+        "message": "The operator defaults update for the \"test_field_config_translation_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\FieldApiDataTest::testEntityFieldFilter",
+        "message": "The operator defaults update for the \"test_field_config_translation_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FieldEntityLinkTest::testEntityLink",
+        "message": "The entity link url update for the \"test_entity_test_link\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2857891.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FieldDropbuttonTest::testDropbuttonMarkupShouldNotLeakBetweenRows",
+        "message": "The operator defaults update for the \"test_dropbutton\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\HandlerAliasTest::testPluginAliases",
+        "message": "The operator defaults update for the \"test_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\HandlerAliasTest::testPluginAliases",
+        "message": "The operator defaults update for the \"test_alias\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\SortTranslationTest::testSortbyUntranslatedIntegerField",
+        "message": "The operator defaults update for the \"test_view_sort_translation\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\BlockDependenciesTest::testExposedBlock",
+        "message": "The operator defaults update for the \"test_exposed_block\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\BlockDependenciesTest::testViewsBlock",
+        "message": "The operator defaults update for the \"test_exposed_block\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FilterEqualityTest::testEqualGroupedExposed",
+        "message": "The operator defaults update for the \"test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FilterEqualityTest::testEqualGroupedNotExposed",
+        "message": "The operator defaults update for the \"test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\ExposedFormRenderTest::testExposedFormRender",
+        "message": "The operator defaults update for the \"test_exposed_form_buttons\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\ExposedFormRenderTest::testExposedFormRawInput",
+        "message": "The operator defaults update for the \"test_exposed_form_buttons\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 2
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\SqlEntityLoadingTest::testViewWithNonDefaultPendingRevision",
+        "message": "The operator defaults update for the \"base_and_revision\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\RssFieldsTest::testLink",
+        "message": "The operator defaults update for the \"test_display_feed\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\ViewsSqlExceptionTest::testSqlException",
+        "message": "The operator defaults update for the \"test_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\RowRenderCacheTest::testAdvancedCaching",
+        "message": "The operator defaults update for the \"test_row_render_cache\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\RowRenderCacheTest::testAdvancedCaching",
+        "message": "The operator defaults update for the \"test_row_render_cache_none\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\RowRenderCacheTest::testNoCaching",
+        "message": "The operator defaults update for the \"test_row_render_cache\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\RowRenderCacheTest::testNoCaching",
+        "message": "The operator defaults update for the \"test_row_render_cache_none\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewElementTest::testViewElement",
+        "message": "The operator defaults update for the \"test_view_embed\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewElementTest::testViewElementEmbed",
+        "message": "The operator defaults update for the \"test_view_embed\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewElementTest::testInvalidView",
+        "message": "The operator defaults update for the \"test_view_embed\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\TokenReplaceTest::testTokenReplacement",
+        "message": "The operator defaults update for the \"test_tokens\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\TokenReplaceTest::testTokenReplacementWithMiniPager",
+        "message": "The operator defaults update for the \"test_tokens\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\TokenReplaceTest::testTokenReplacementNoResults",
+        "message": "The operator defaults update for the \"test_tokens\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\TokenReplaceTest::testTokenReplacementNoPath",
+        "message": "The operator defaults update for the \"test_tokens\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testTimeResultCaching",
+        "message": "The operator defaults update for the \"test_cache\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testTimeResultCaching",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testTimeResultCaching",
+        "message": "The operator defaults update for the \"test_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testTimeResultCachingWithFilter",
+        "message": "The operator defaults update for the \"test_cache\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testTimeResultCachingWithFilter",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testTimeResultCachingWithFilter",
+        "message": "The operator defaults update for the \"test_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testTimeResultCachingWithPager",
+        "message": "The operator defaults update for the \"test_cache\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testTimeResultCachingWithPager",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testTimeResultCachingWithPager",
+        "message": "The operator defaults update for the \"test_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testNoneResultCaching",
+        "message": "The operator defaults update for the \"test_cache\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testNoneResultCaching",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testNoneResultCaching",
+        "message": "The operator defaults update for the \"test_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testHeaderStorage",
+        "message": "The operator defaults update for the \"test_cache\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testHeaderStorage",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testHeaderStorage",
+        "message": "The operator defaults update for the \"test_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testSubqueryStringCache",
+        "message": "The operator defaults update for the \"test_cache\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testSubqueryStringCache",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testSubqueryStringCache",
+        "message": "The operator defaults update for the \"test_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testCacheData",
+        "message": "The operator defaults update for the \"test_cache\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testCacheData",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testCacheData",
+        "message": "The operator defaults update for the \"test_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testCacheContextIntegration",
+        "message": "The operator defaults update for the \"test_cache\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testCacheContextIntegration",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testCacheContextIntegration",
+        "message": "The operator defaults update for the \"test_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testArgumentDefaultCache",
+        "message": "The operator defaults update for the \"test_cache\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testArgumentDefaultCache",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Plugin\\CacheTest::testArgumentDefaultCache",
+        "message": "The operator defaults update for the \"test_filter\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\RenderCacheIntegrationTest::testFieldBasedViewCacheTagsWithCachePluginNone",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\RenderCacheIntegrationTest::testFieldBasedViewCacheTagsWithCachePluginTag",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\RenderCacheIntegrationTest::testFieldBasedViewCacheTagsWithCachePluginTime",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\RenderCacheIntegrationTest::testEntityBasedViewCacheTagsWithCachePluginNone",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\RenderCacheIntegrationTest::testEntityBasedViewCacheTagsWithCachePluginTag",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\RenderCacheIntegrationTest::testEntityBasedViewCacheTagsWithCachePluginTime",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\RenderCacheIntegrationTest::testBuildRenderableWithCacheContexts",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\RenderCacheIntegrationTest::testViewAddCacheMetadata",
+        "message": "The operator defaults update for the \"test_display\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\QueryGroupByTest::testAggregateCount",
+        "message": "The operator defaults update for the \"test_group_by_in_filters\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\QueryGroupByTest::testGroupByCount",
+        "message": "The operator defaults update for the \"test_group_by_in_filters\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\QueryGroupByTest::testGroupBySum",
+        "message": "The operator defaults update for the \"test_group_by_in_filters\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\QueryGroupByTest::testGroupByAverage",
+        "message": "The operator defaults update for the \"test_group_by_in_filters\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\QueryGroupByTest::testGroupByMin",
+        "message": "The operator defaults update for the \"test_group_by_in_filters\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\QueryGroupByTest::testGroupByMax",
+        "message": "The operator defaults update for the \"test_group_by_in_filters\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\QueryGroupByTest::testGroupByNone",
+        "message": "The operator defaults update for the \"test_group_by_in_filters\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\QueryGroupByTest::testGroupByCountOnlyFilters",
+        "message": "The operator defaults update for the \"test_group_by_in_filters\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\QueryGroupByTest::testGroupByBaseField",
+        "message": "The operator defaults update for the \"test_group_by_in_filters\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\QueryGroupByTest::testGroupByFieldWithCardinality",
+        "message": "The operator defaults update for the \"test_group_by_in_filters\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\QueryGroupByTest::testGroupByWithFieldsNotExistingOnBundle",
+        "message": "The operator defaults update for the \"test_group_by_in_filters\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FilterNumericTest::testFilterNumericExposedGroupedSimple",
+        "message": "The operator defaults update for the \"test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FilterNumericTest::testFilterNumericExposedGroupedBetween",
+        "message": "The operator defaults update for the \"test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FilterNumericTest::testFilterNumericExposedGroupedNotBetween",
+        "message": "The operator defaults update for the \"test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FilterNumericTest::testFilterNumericExposedGroupedRegularExpression",
+        "message": "The operator defaults update for the \"test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FilterNumericTest::testFilterNumericExposedGroupedEmpty",
+        "message": "The operator defaults update for the \"test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FilterNumericTest::testFilterNumericExposedGroupedNotEmpty",
+        "message": "The operator defaults update for the \"test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FilterStringTest::testFilterStringGroupedExposedEqual",
+        "message": "The operator defaults update for the \"test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FilterStringTest::testFilterStringGroupedExposedNotEqual",
+        "message": "The operator defaults update for the \"test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FilterStringTest::testFilterStringGroupedExposedContains",
+        "message": "The operator defaults update for the \"test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FilterStringTest::testFilterStringGroupedExposedWord",
+        "message": "The operator defaults update for the \"test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FilterStringTest::testFilterStringGroupedExposedStarts",
+        "message": "The operator defaults update for the \"test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FilterStringTest::testFilterStringGroupedExposedNotStarts",
+        "message": "The operator defaults update for the \"test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FilterStringTest::testFilterStringGroupedExposedEnds",
+        "message": "The operator defaults update for the \"test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FilterStringTest::testFilterStringGroupedExposedNotEnds",
+        "message": "The operator defaults update for the \"test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FilterStringTest::testFilterStringGroupedExposedNot",
+        "message": "The operator defaults update for the \"test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FilterStringTest::testFilterStringGroupedExposedShorter",
+        "message": "The operator defaults update for the \"test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FilterStringTest::testFilterStringGroupedExposedLonger",
+        "message": "The operator defaults update for the \"test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\Handler\\FilterStringTest::testFilterStringGroupedExposedEmpty",
+        "message": "The operator defaults update for the \"test_view\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testFactoryService",
+        "message": "The entity link url update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2857891.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testFactoryService",
+        "message": "The operator defaults update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testFactoryService",
+        "message": "The operator defaults update for the \"test_argument_dependency\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testInitMethods",
+        "message": "The entity link url update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2857891.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testInitMethods",
+        "message": "The operator defaults update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testInitMethods",
+        "message": "The operator defaults update for the \"test_argument_dependency\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testConstructing",
+        "message": "The entity link url update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2857891.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testConstructing",
+        "message": "The operator defaults update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testConstructing",
+        "message": "The operator defaults update for the \"test_argument_dependency\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testProperties",
+        "message": "The entity link url update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2857891.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testProperties",
+        "message": "The operator defaults update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testProperties",
+        "message": "The operator defaults update for the \"test_argument_dependency\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testSetDisplayWithInvalidDisplay",
+        "message": "The entity link url update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2857891.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testSetDisplayWithInvalidDisplay",
+        "message": "The operator defaults update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testSetDisplayWithInvalidDisplay",
+        "message": "The operator defaults update for the \"test_argument_dependency\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testDisplays",
+        "message": "The entity link url update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2857891.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testDisplays",
+        "message": "The operator defaults update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testDisplays",
+        "message": "The operator defaults update for the \"test_argument_dependency\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testPropertyMethods",
+        "message": "The entity link url update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2857891.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testPropertyMethods",
+        "message": "The operator defaults update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testPropertyMethods",
+        "message": "The operator defaults update for the \"test_argument_dependency\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testDestroy",
+        "message": "The entity link url update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2857891.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testDestroy",
+        "message": "The operator defaults update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testDestroy",
+        "message": "The operator defaults update for the \"test_argument_dependency\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testGetHandlerTypes",
+        "message": "The entity link url update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2857891.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testGetHandlerTypes",
+        "message": "The operator defaults update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testGetHandlerTypes",
+        "message": "The operator defaults update for the \"test_argument_dependency\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testGetHandlers",
+        "message": "The entity link url update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2857891.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testGetHandlers",
+        "message": "The operator defaults update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testGetHandlers",
+        "message": "The operator defaults update for the \"test_argument_dependency\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testValidate",
+        "message": "The entity link url update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2857891.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testValidate",
+        "message": "The operator defaults update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testValidate",
+        "message": "The operator defaults update for the \"test_argument_dependency\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testValidateNestedLoops",
+        "message": "The entity link url update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2857891.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testValidateNestedLoops",
+        "message": "The operator defaults update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testValidateNestedLoops",
+        "message": "The operator defaults update for the \"test_argument_dependency\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testSerialization",
+        "message": "The entity link url update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2857891.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testSerialization",
+        "message": "The operator defaults update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testSerialization",
+        "message": "The operator defaults update for the \"test_argument_dependency\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testArgumentValidatorValueOverride",
+        "message": "The entity link url update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2857891.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testArgumentValidatorValueOverride",
+        "message": "The operator defaults update for the \"test_destroy\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Kernel\\ViewExecutableTest::testArgumentValidatorValueOverride",
+        "message": "The operator defaults update for the \"test_argument_dependency\" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\TextUI\\DefaultResultPrinter\" class is considered internal This class is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not use it from \"Drupal\\Tests\\Listeners\\HtmlOutputPrinter\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\Tests\\UnitTestCase\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"Drupal\\Tests\\Listeners\\DrupalListener\" class implements \"PHPUnit\\Framework\\TestListener\" that is deprecated Use the `TestHook` interfaces instead.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"Drupal\\Tests\\Listeners\\DrupalListener\" class uses \"PHPUnit\\Framework\\TestListenerDefaultImplementation\" that is deprecated The `TestListener` interface is deprecated.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Config\\Schema\\ArrayElement\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\Tests\\Component\\PhpStorage\\FileStorageTest\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\Map\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Psr\\Log\\LoggerInterface::log()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\Core\\Logger\\NaughtyRecursiveLogger\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Iterator::current()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\source\\SourcePluginBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Iterator::key()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\source\\SourcePluginBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Iterator::valid()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\source\\SourcePluginBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Iterator::rewind()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\source\\SourcePluginBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Iterator::next()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\source\\SourcePluginBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\AppendOpTest\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\ReplaceOpTest\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ScaffoldUpgradeTest\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\SkipOpTest\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ManageGitIgnoreTest\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ScaffoldTest\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\Framework\\TestSuite\" class is considered internal This class is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not use it from \"Drupal\\Tests\\TestSuites\\TestSuiteBase\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ComposerHookTest\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Psr\\Log\\LoggerInterface::log()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\update\\Unit\\UpdateFetcherTest\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Psr\\Log\\LoggerInterface::emergency()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\update\\Unit\\UpdateFetcherTest\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Psr\\Log\\LoggerInterface::alert()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\update\\Unit\\UpdateFetcherTest\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Psr\\Log\\LoggerInterface::critical()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\update\\Unit\\UpdateFetcherTest\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Psr\\Log\\LoggerInterface::error()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\update\\Unit\\UpdateFetcherTest\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Psr\\Log\\LoggerInterface::warning()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\update\\Unit\\UpdateFetcherTest\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Psr\\Log\\LoggerInterface::notice()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\update\\Unit\\UpdateFetcherTest\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Psr\\Log\\LoggerInterface::info()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\update\\Unit\\UpdateFetcherTest\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "Method \"Psr\\Log\\LoggerInterface::debug()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Tests\\update\\Unit\\UpdateFetcherTest\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\Tests\\Composer\\Plugin\\VendorHardening\\ConfigTest\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\Tests\\Composer\\Plugin\\VendorHardening\\VendorHardeningPluginTest\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Listeners\\DrupalListener::endTest",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\BuildTests\\Framework\\BuildTestBase\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_translation\\Unit\\Access\\ContentTranslationManageAccessCheckTest::testCreateAccess",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\quickedit\\Unit\\Access\\QuickEditEntityFieldAccessCheckTest::testAccess",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\EntityUnitTest::testLoad",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\ContentEntityBaseUnitTest::setUp",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\ContentEntityBaseUnitTest::setUp",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\ContentEntityBaseUnitTest::setUp",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\ContentEntityBaseUnitTest::setUp",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\ContentEntityBaseUnitTest::setUp",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\ContentEntityBaseUnitTest::testIsNewRevision",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\ContentEntityBaseUnitTest::testIsNewRevision",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\ContentEntityBaseUnitTest::testIsNewRevision",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\ContentEntityBaseUnitTest::testIsNewRevision",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\ContentEntityBaseUnitTest::testIsNewRevision",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\ContentEntityBaseUnitTest::testIsNewRevision",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\ContentEntityBaseUnitTest::testIsNewRevision",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\Map\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\ContentEntityBaseUnitTest::testTypedData",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\Plugin\\DataType\\EntityAdapter\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getClassAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getMethodAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getClassAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getMethodAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getDocComment()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getNamespaceName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getMethod()\" might add \"\\ReflectionMethod\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getProperty()\" might add \"\\ReflectionProperty\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getConstant()\" might add \"mixed\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getConstructor()\" might add \"\\?ReflectionMethod\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getDefaultProperties()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getEndLine()\" might add \"int|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getExtension()\" might add \"\\?ReflectionExtension\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getExtensionName()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getFileName()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getInterfaceNames()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getInterfaces()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getMethods()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getModifiers()\" might add \"int\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getParentClass()\" might add \"\\ReflectionClass|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getProperties()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getShortName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getStartLine()\" might add \"int|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getStaticProperties()\" might add \"\\?array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getStaticPropertyValue()\" might add \"mixed\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getTraitAliases()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getTraitNames()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getTraits()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::hasConstant()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::hasMethod()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::hasProperty()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::implementsInterface()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::inNamespace()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::isAbstract()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::isCloneable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::isFinal()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::isInstance()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::isInstantiable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::isInterface()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::isInternal()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::isIterateable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::isSubclassOf()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::isTrait()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::isUserDefined()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::newInstanceArgs()\" might add \"\\?object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::newInstanceWithoutConstructor()\" might add \"object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::setStaticPropertyValue()\" might add \"void\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::getConstants()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Plugin\\Discovery\\AnnotatedClassDiscoveryTest::testAutoloadBadAnnotations",
+        "message": "Method \"ReflectionClass::newInstance()\" might add \"object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Assert\\AssertLegacyTraitTest::setUp",
+        "message": "Method \"Behat\\Mink\\WebAssert::cleanUrl()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Tests\\WebAssert\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Assert\\AssertLegacyTraitTest::setUp",
+        "message": "Method \"Behat\\Mink\\WebAssert::elementExists()\" might add \"NodeElement\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Tests\\WebAssert\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Assert\\AssertLegacyTraitTest::setUp",
+        "message": "Method \"Behat\\Mink\\WebAssert::elementAttributeExists()\" might add \"NodeElement\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Tests\\WebAssert\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Assert\\AssertLegacyTraitTest::setUp",
+        "message": "Method \"Behat\\Mink\\WebAssert::fieldExists()\" might add \"NodeElement\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Tests\\WebAssert\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Assert\\WebAssertArgumentsTest::setUp",
+        "message": "Method \"Behat\\Mink\\WebAssert::cleanUrl()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Tests\\WebAssert\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Assert\\WebAssertArgumentsTest::setUp",
+        "message": "Method \"Behat\\Mink\\WebAssert::elementExists()\" might add \"NodeElement\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Tests\\WebAssert\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Assert\\WebAssertArgumentsTest::setUp",
+        "message": "Method \"Behat\\Mink\\WebAssert::elementAttributeExists()\" might add \"NodeElement\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Tests\\WebAssert\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Assert\\WebAssertArgumentsTest::setUp",
+        "message": "Method \"Behat\\Mink\\WebAssert::fieldExists()\" might add \"NodeElement\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Tests\\WebAssert\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\block\\Unit\\BlockConfigEntityUnitTest::testCalculateDependencies",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\block\\Unit\\BlockConfigEntityUnitTest::testCalculateDependencies",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Bridge\\ZfExtensionManagerSfContainerTest::testGet",
+        "message": "Method \"Laminas\\Feed\\Writer\\ExtensionManagerInterface::get()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Bridge\\ZfExtensionManagerSfContainer\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Bridge\\ZfExtensionManagerSfContainerTest::testGet",
+        "message": "Method \"Laminas\\Feed\\Writer\\ExtensionManagerInterface::has()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Bridge\\ZfExtensionManagerSfContainer\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\comment\\Unit\\CommentStatisticsUnitTest::setUp",
+        "message": "Method \"Iterator::key()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\StatementPrefetch\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\comment\\Unit\\CommentStatisticsUnitTest::setUp",
+        "message": "Method \"Iterator::rewind()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\StatementPrefetch\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\comment\\Unit\\CommentStatisticsUnitTest::setUp",
+        "message": "Method \"Iterator::next()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\StatementPrefetch\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\comment\\Unit\\CommentStatisticsUnitTest::setUp",
+        "message": "Method \"Iterator::valid()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\StatementPrefetch\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\comment\\Unit\\Entity\\CommentLockTest::testLocks",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Common\\AttributesTest::testDrupalAttributes",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Common\\AttributesTest::testDrupalAttributes",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Common\\AttributesTest::testDrupalAttributes",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Common\\AttributesTest::testDrupalAttributes",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Common\\AttributesTest::testDrupalAttributes",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Common\\AttributesTest::testDrupalAttributes",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Common\\AttributesTest::testDrupalAttributes",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Common\\AttributesTest::testDrupalAttributes",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Common\\AttributesTest::testDrupalAttributes",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Common\\AttributesTest::testDrupalAttributes",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Config\\Entity\\ConfigEntityBaseUnitTest::testCalculateDependenciesWithPluginCollections",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Config\\Entity\\ConfigEntityBaseUnitTest::testCalculateDependenciesWithPluginCollections",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Unit\\ContentPreprocessTest::testIsLatestVersionPage",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Unit\\LatestRevisionCheckTest::testLatestAccessPermissions",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Unit\\StateTransitionValidationTest::setUp",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\content_moderation\\Unit\\StateTransitionValidationTest::setUp",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Database\\ConnectionTest::testGetDriverClass",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\Query\\Condition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Database\\ConnectionTest::testGetDriverClass",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\Query\\Insert\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Database\\ConnectionTest::testGetDriverClass",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\Query\\Upsert\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Database\\OrderByTest::setUp",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\Query\\Condition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Database\\ConditionTest::testSimpleCondition",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\Query\\Condition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Discovery\\YamlDirectoryDiscoveryTest::testDiscovery",
+        "message": "Method \"FilterIterator::accept()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\FileSystem\\RegexDirectoryIterator\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Unit\\UserAccessControlHandlerTest::setUp",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Unit\\UserAccessControlHandlerTest::setUp",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Unit\\UserAccessControlHandlerTest::setUp",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Unit\\UserAccessControlHandlerTest::setUp",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Unit\\UserAccessControlHandlerTest::setUp",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Unit\\UserAccessControlHandlerTest::setUp",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\BaseFieldDefinitionTest::testFieldName",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\BaseFieldDefinitionTest::testFieldName",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\BaseFieldDefinitionTest::testFieldName",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\BaseFieldDefinitionTest::testFieldName",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\BaseFieldDefinitionTest::testFieldDefaultValue",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\BaseFieldDefinitionTest::testFieldDefaultValue",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\Map\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\BaseFieldDefinitionTest::testFieldDefaultValue",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\BaseFieldDefinitionTest::testFieldDefaultValue",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\BaseFieldDefinitionTest::testFieldDefaultValue",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\BaseFieldDefinitionTest::testFieldDefaultValue",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\BaseFieldDefinitionTest::testFieldDefaultValue",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\BaseFieldDefinitionTest::testFieldDefaultValue",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\EntityFieldManagerTest::testGetFieldStorageDefinitions",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\EntityFieldManagerTest::testGetFieldStorageDefinitions",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\EntityFieldManagerTest::testGetFieldStorageDefinitions",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\EntityFieldManagerTest::testGetFieldStorageDefinitions",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\EntityFieldManagerTest::testGetBaseFieldDefinitionsTranslatableEntityTypeDefaultLangcode",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\Map\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\FieldDefinitionTest::testFieldName",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\FieldDefinitionTest::testFieldName",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\FieldDefinitionTest::testFieldName",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\FieldDefinitionTest::testFieldName",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\FieldDefinitionTest::testFieldDefaultValue",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\FieldDefinitionTest::testFieldDefaultValue",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\FieldDefinitionTest::testFieldDefaultValue",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\FieldDefinitionTest::testFieldDefaultValue",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\FieldDefinitionTest::testFieldDefaultValue",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\FieldDefinitionTest::testFieldDefaultValue",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\FieldDefinitionTest::testFieldDefaultValue",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\KeyValueStore\\KeyValueEntityStorageTest::testSaveContentEntity",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\ParamConverter\\EntityConverterTest::testConvert",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\ParamConverter\\EntityConverterTest::testConvert",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\ParamConverter\\EntityConverterTest::testConvert",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\ParamConverter\\EntityConverterTest::testConvert",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\TypedData\\EntityAdapterUnitTest::setUp",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\TypedData\\EntityAdapterUnitTest::setUp",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\TypedData\\EntityAdapterUnitTest::setUp",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\TypedData\\EntityAdapterUnitTest::setUp",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\TypedData\\EntityAdapterUnitTest::setUp",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\TypedData\\EntityAdapterUnitTest::setUp",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\Plugin\\DataType\\EntityAdapter\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Entity\\Sql\\SqlContentEntityStorageTest::testCreate",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Extension\\ExtensionDiscoveryTest::testExtensionDiscoveryVfs",
+        "message": "Method \"RecursiveFilterIterator::getChildren()\" might add \"\\?RecursiveFilterIterator\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Core\\Extension\\Discovery\\RecursiveExtensionFilterIterator\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Field\\FieldItemListTest::testEquals",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Field\\FieldItemListTest::testEquals",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Field\\FieldItemListTest::testEquals",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Field\\FieldItemListTest::testEquals",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Field\\FieldItemListTest::testEquals",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Field\\FieldItemListTest::testEquals",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\filter\\Unit\\FilterUninstallValidatorTest::testValidateNoMatchingFormats",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\filter\\Unit\\FilterUninstallValidatorTest::testValidateNoMatchingFormats",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\FileSystem\\RegexDirectoryIteratorTest::testRegexDirectoryIterator",
+        "message": "Method \"FilterIterator::accept()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\FileSystem\\RegexDirectoryIterator\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Form\\FormBuilderTest::setUp",
+        "message": "The \"Drupal\\Core\\Form\\FormBuilder::getForm()\" method will require a new \"... Any additional arguments are passed on to the functions called by \\Drupal::formBuilder->getForm, including the unique form constructor function. For example, the node_edit form requires that a node object is passed in here when it is called. These are available to implementations of hook_form_alter and hook_form_FORM_ID_alter as the array $form_state->getBuildInfo['args'].\" argument in the next major version of its interface \"Drupal\\Core\\Form\\FormBuilderInterface\", not defining it is deprecated.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\help_topics\\Unit\\HelpTopicTwigTest::setUp",
+        "message": "The \"Twig\\Environment::getTemplateClass()\" method is considered internal. It may change without further notice. You should not extend it from \"Drupal\\Core\\Template\\TwigEnvironment\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\help_topics\\Unit\\HelpTopicDiscoveryTest::testDiscoveryExceptionProviderMismatch",
+        "message": "Method \"FilterIterator::accept()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\FileSystem\\RegexDirectoryIterator\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\image\\Unit\\ImageStyleTest::testGetDerivativeExtension",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\image\\Unit\\ImageStyleTest::testGetDerivativeExtension",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\jsonapi\\Unit\\Normalizer\\ResourceIdentifierNormalizerTest::setUp",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\jsonapi\\Unit\\Normalizer\\ResourceIdentifierNormalizerTest::setUp",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\jsonapi\\Unit\\Normalizer\\ResourceIdentifierNormalizerTest::setUp",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\jsonapi\\Unit\\Normalizer\\ResourceIdentifierNormalizerTest::setUp",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Unit\\DefaultsSectionStorageTest::setUp",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\layout_builder\\Plugin\\SectionStorage\\SectionStorageBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getClassAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getMethodAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getClassAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getMethodAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getDocComment()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getNamespaceName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getMethod()\" might add \"\\ReflectionMethod\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getProperty()\" might add \"\\ReflectionProperty\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getConstant()\" might add \"mixed\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getConstructor()\" might add \"\\?ReflectionMethod\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getDefaultProperties()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getEndLine()\" might add \"int|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getExtension()\" might add \"\\?ReflectionExtension\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getExtensionName()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getFileName()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getInterfaceNames()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getInterfaces()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getMethods()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getModifiers()\" might add \"int\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getParentClass()\" might add \"\\ReflectionClass|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getProperties()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getShortName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getStartLine()\" might add \"int|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getStaticProperties()\" might add \"\\?array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getStaticPropertyValue()\" might add \"mixed\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getTraitAliases()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getTraitNames()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getTraits()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::hasConstant()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::hasMethod()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::hasProperty()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::implementsInterface()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::inNamespace()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::isAbstract()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::isCloneable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::isFinal()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::isInstance()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::isInstantiable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::isInterface()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::isInternal()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::isIterateable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::isSubclassOf()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::isTrait()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::isUserDefined()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::newInstanceArgs()\" might add \"\\?object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::newInstanceWithoutConstructor()\" might add \"object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::setStaticPropertyValue()\" might add \"void\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::getConstants()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Layout\\LayoutPluginManagerTest::testGetDefinitions",
+        "message": "Method \"ReflectionClass::newInstance()\" might add \"object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\layout_builder\\Unit\\OverridesSectionStorageTest::setUp",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\layout_builder\\Plugin\\SectionStorage\\SectionStorageBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\update\\Unit\\ModuleVersionTest::testGetMajorVersion",
+        "message": "Drupal\\update\\ModuleVersion is deprecated in drupal:9.2.0 and will be removed before drupal:10.0.0. Use The \\Drupal\\Core\\Extension\\ExtensionVersion instead. As an internal class, ExtensionVersion may also be removed in a minor release.",
+        "count": 21
+    },
+    {
+        "location": "Drupal\\Tests\\update\\Unit\\ModuleVersionTest::testGetVersionExtra",
+        "message": "Drupal\\update\\ModuleVersion is deprecated in drupal:9.2.0 and will be removed before drupal:10.0.0. Use The \\Drupal\\Core\\Extension\\ExtensionVersion instead. As an internal class, ExtensionVersion may also be removed in a minor release.",
+        "count": 21
+    },
+    {
+        "location": "Drupal\\Tests\\update\\Unit\\ModuleVersionTest::testCreateFromSupportBranch",
+        "message": "Drupal\\update\\ModuleVersion is deprecated in drupal:9.2.0 and will be removed before drupal:10.0.0. Use The \\Drupal\\Core\\Extension\\ExtensionVersion instead. As an internal class, ExtensionVersion may also be removed in a minor release.",
+        "count": 5
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Logger\\LoggerChannelTest::testLog",
+        "message": "Method \"Psr\\Log\\LoggerInterface::log()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Logger\\LoggerChannel\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Logger\\LoggerChannelFactoryTest::testGet",
+        "message": "Method \"Psr\\Log\\LoggerInterface::log()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Logger\\LoggerChannel\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\media\\Unit\\ProviderRepositoryTest::setUp",
+        "message": "Method \"Psr\\Log\\LoggerInterface::log()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Logger\\LoggerChannel\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\MigrateExecutableTest::testImportWithValidRow",
+        "message": "Method \"Iterator::current()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\source\\SourcePluginBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\MigrateExecutableTest::testImportWithValidRow",
+        "message": "Method \"Iterator::key()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\source\\SourcePluginBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\MigrateExecutableTest::testImportWithValidRow",
+        "message": "Method \"Iterator::valid()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\source\\SourcePluginBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\MigrateExecutableTest::testImportWithValidRow",
+        "message": "Method \"Iterator::rewind()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\source\\SourcePluginBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\MigrateExecutableTest::testImportWithValidRow",
+        "message": "Method \"Iterator::next()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\source\\SourcePluginBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\MigrateSqlIdMapEnsureTablesTest::testEnsureTablesNotExist",
+        "message": "Method \"Iterator::rewind()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\id_map\\Sql\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\MigrateSqlIdMapEnsureTablesTest::testEnsureTablesNotExist",
+        "message": "Method \"Iterator::current()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\id_map\\Sql\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\MigrateSqlIdMapEnsureTablesTest::testEnsureTablesNotExist",
+        "message": "Method \"Iterator::key()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\id_map\\Sql\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\MigrateSqlIdMapEnsureTablesTest::testEnsureTablesNotExist",
+        "message": "Method \"Iterator::next()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\id_map\\Sql\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\MigrateSqlIdMapEnsureTablesTest::testEnsureTablesNotExist",
+        "message": "Method \"Iterator::valid()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\id_map\\Sql\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\MigrateSqlIdMapTest::testSaveIdMapping",
+        "message": "Method \"Iterator::rewind()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\id_map\\Sql\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\MigrateSqlIdMapTest::testSaveIdMapping",
+        "message": "Method \"Iterator::current()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\id_map\\Sql\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\MigrateSqlIdMapTest::testSaveIdMapping",
+        "message": "Method \"Iterator::key()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\id_map\\Sql\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\MigrateSqlIdMapTest::testSaveIdMapping",
+        "message": "Method \"Iterator::next()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\id_map\\Sql\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\MigrateSqlIdMapTest::testSaveIdMapping",
+        "message": "Method \"Iterator::valid()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\id_map\\Sql\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\MigrateSqlIdMapTest::testSaveIdMapping",
+        "message": "Method \"Iterator::key()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\StatementPrefetch\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\MigrateSqlIdMapTest::testSaveIdMapping",
+        "message": "Method \"Iterator::rewind()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\StatementPrefetch\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\MigrateSqlIdMapTest::testSaveIdMapping",
+        "message": "Method \"Iterator::next()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\StatementPrefetch\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\MigrateSqlIdMapTest::testSaveIdMapping",
+        "message": "Method \"Iterator::valid()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\StatementPrefetch\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\MigrateSqlIdMapTest::testSaveIdMapping",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\Query\\Condition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\MigrateSqlIdMapTest::testSaveIdMapping",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\Query\\Insert\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\process\\MenuLinkParentTest::testMenuLinkParent",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\SqlBaseTest::testMapJoinable",
+        "message": "Method \"Iterator::rewind()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\id_map\\Sql\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\SqlBaseTest::testMapJoinable",
+        "message": "Method \"Iterator::current()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\id_map\\Sql\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\SqlBaseTest::testMapJoinable",
+        "message": "Method \"Iterator::key()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\id_map\\Sql\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\SqlBaseTest::testMapJoinable",
+        "message": "Method \"Iterator::next()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\id_map\\Sql\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate\\Unit\\SqlBaseTest::testMapJoinable",
+        "message": "Method \"Iterator::valid()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\migrate\\Plugin\\migrate\\id_map\\Sql\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate_drupal\\Unit\\source\\DrupalSqlBaseTest::testSourceProviderNotActive",
+        "message": "Method \"Iterator::key()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\StatementPrefetch\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate_drupal\\Unit\\source\\DrupalSqlBaseTest::testSourceProviderNotActive",
+        "message": "Method \"Iterator::rewind()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\StatementPrefetch\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate_drupal\\Unit\\source\\DrupalSqlBaseTest::testSourceProviderNotActive",
+        "message": "Method \"Iterator::next()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\StatementPrefetch\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate_drupal\\Unit\\source\\DrupalSqlBaseTest::testSourceProviderNotActive",
+        "message": "Method \"Iterator::valid()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\StatementPrefetch\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate_drupal\\Unit\\source\\DrupalSqlBaseTest::testSourceProviderNotActive",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\Query\\Insert\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate_drupal\\Unit\\source\\DrupalSqlBaseTest::testSourceProviderNotActive",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\Query\\Condition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate_drupal\\Unit\\source\\d6\\Drupal6SqlBaseTest::setUp",
+        "message": "Method \"Iterator::key()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\StatementPrefetch\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate_drupal\\Unit\\source\\d6\\Drupal6SqlBaseTest::setUp",
+        "message": "Method \"Iterator::rewind()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\StatementPrefetch\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate_drupal\\Unit\\source\\d6\\Drupal6SqlBaseTest::setUp",
+        "message": "Method \"Iterator::next()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\StatementPrefetch\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate_drupal\\Unit\\source\\d6\\Drupal6SqlBaseTest::setUp",
+        "message": "Method \"Iterator::valid()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\StatementPrefetch\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate_drupal\\Unit\\source\\d6\\Drupal6SqlBaseTest::setUp",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\Query\\Insert\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\migrate_drupal\\Unit\\source\\d6\\Drupal6SqlBaseTest::testGetSystemData",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Database\\Query\\Condition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getClassAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getMethodAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getClassAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getMethodAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getDocComment()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getNamespaceName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getMethod()\" might add \"\\ReflectionMethod\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getProperty()\" might add \"\\ReflectionProperty\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getConstant()\" might add \"mixed\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getConstructor()\" might add \"\\?ReflectionMethod\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getDefaultProperties()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getEndLine()\" might add \"int|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getExtension()\" might add \"\\?ReflectionExtension\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getExtensionName()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getFileName()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getInterfaceNames()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getInterfaces()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getMethods()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getModifiers()\" might add \"int\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getParentClass()\" might add \"\\ReflectionClass|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getProperties()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getShortName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getStartLine()\" might add \"int|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getStaticProperties()\" might add \"\\?array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getStaticPropertyValue()\" might add \"mixed\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getTraitAliases()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getTraitNames()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getTraits()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::hasConstant()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::hasMethod()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::hasProperty()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::implementsInterface()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::inNamespace()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::isAbstract()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::isCloneable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::isFinal()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::isInstance()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::isInstantiable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::isInterface()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::isInternal()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::isIterateable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::isSubclassOf()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::isTrait()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::isUserDefined()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::newInstanceArgs()\" might add \"\\?object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::newInstanceWithoutConstructor()\" might add \"object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::setStaticPropertyValue()\" might add \"void\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::getConstants()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"ReflectionClass::newInstance()\" might add \"object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\path\\Unit\\Field\\PathFieldDefinitionTest::setUp",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\Map\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\DefaultLazyPluginCollectionTest::testHas",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\DefaultLazyPluginCollectionTest::testHas",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getClassAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getMethodAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getClassAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getMethodAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getDocComment()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getNamespaceName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getMethod()\" might add \"\\ReflectionMethod\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getProperty()\" might add \"\\ReflectionProperty\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getConstant()\" might add \"mixed\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getConstructor()\" might add \"\\?ReflectionMethod\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getDefaultProperties()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getEndLine()\" might add \"int|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getExtension()\" might add \"\\?ReflectionExtension\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getExtensionName()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getFileName()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getInterfaceNames()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getInterfaces()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getMethods()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getModifiers()\" might add \"int\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getParentClass()\" might add \"\\ReflectionClass|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getProperties()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getShortName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getStartLine()\" might add \"int|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getStaticProperties()\" might add \"\\?array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getStaticPropertyValue()\" might add \"mixed\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getTraitAliases()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getTraitNames()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getTraits()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::hasConstant()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::hasMethod()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::hasProperty()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::implementsInterface()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::inNamespace()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isAbstract()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isCloneable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isFinal()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isInstance()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isInstantiable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isInterface()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isInternal()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isIterateable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isSubclassOf()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isTrait()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isUserDefined()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::newInstanceArgs()\" might add \"\\?object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::newInstanceWithoutConstructor()\" might add \"object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::setStaticPropertyValue()\" might add \"void\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getConstants()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::newInstance()\" might add \"object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::setNode()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::setGroup()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::setConstraint()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::markConstraintAsValidated()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::isConstraintValidated()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::markGroupAsValidated()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::isGroupValidated()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::markObjectAsInitialized()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\ContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::isObjectInitialized()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getClassAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getMethodAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getClassAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getMethodAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getDocComment()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getNamespaceName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getMethod()\" might add \"\\ReflectionMethod\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getProperty()\" might add \"\\ReflectionProperty\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getConstant()\" might add \"mixed\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getConstructor()\" might add \"\\?ReflectionMethod\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getDefaultProperties()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getEndLine()\" might add \"int|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getExtension()\" might add \"\\?ReflectionExtension\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getExtensionName()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getFileName()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getInterfaceNames()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getInterfaces()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getMethods()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getModifiers()\" might add \"int\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getParentClass()\" might add \"\\ReflectionClass|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getProperties()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getShortName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getStartLine()\" might add \"int|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getStaticProperties()\" might add \"\\?array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getStaticPropertyValue()\" might add \"mixed\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getTraitAliases()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getTraitNames()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getTraits()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::hasConstant()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::hasMethod()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::hasProperty()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::implementsInterface()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::inNamespace()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::isAbstract()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::isCloneable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::isFinal()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::isInstance()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::isInstantiable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::isInterface()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::isInternal()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::isIterateable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::isSubclassOf()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::isTrait()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::isUserDefined()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::newInstanceArgs()\" might add \"\\?object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::newInstanceWithoutConstructor()\" might add \"object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::setStaticPropertyValue()\" might add \"void\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::getConstants()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ReflectionClass::newInstance()\" might add \"object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::setNode()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::setGroup()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::setConstraint()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::markConstraintAsValidated()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::isConstraintValidated()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::markGroupAsValidated()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::isGroupValidated()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::markObjectAsInitialized()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\ContextHandlerTest::testCheckRequirements",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::isObjectInitialized()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\DefaultSingleLazyPluginCollectionTest::testGet",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\DefaultSingleLazyPluginCollectionTest::testGet",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Discovery\\DerivativeDiscoveryDecoratorTest::testInvalidDerivativeFetcher",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\KernelTests\\KernelTestBase\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getClassAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getMethodAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getClassAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getMethodAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getDocComment()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getNamespaceName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getMethod()\" might add \"\\ReflectionMethod\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getProperty()\" might add \"\\ReflectionProperty\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getConstant()\" might add \"mixed\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getConstructor()\" might add \"\\?ReflectionMethod\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getDefaultProperties()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getEndLine()\" might add \"int|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getExtension()\" might add \"\\?ReflectionExtension\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getExtensionName()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getFileName()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getInterfaceNames()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getInterfaces()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getMethods()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getModifiers()\" might add \"int\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getParentClass()\" might add \"\\ReflectionClass|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getProperties()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getShortName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getStartLine()\" might add \"int|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getStaticProperties()\" might add \"\\?array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getStaticPropertyValue()\" might add \"mixed\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getTraitAliases()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getTraitNames()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getTraits()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::hasConstant()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::hasMethod()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::hasProperty()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::implementsInterface()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::inNamespace()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isAbstract()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isCloneable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isFinal()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isInstance()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isInstantiable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isInterface()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isInternal()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isIterateable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isSubclassOf()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isTrait()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::isUserDefined()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::newInstanceArgs()\" might add \"\\?object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::newInstanceWithoutConstructor()\" might add \"object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::setStaticPropertyValue()\" might add \"void\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::getConstants()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ReflectionClass::newInstance()\" might add \"object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\Plugin\\DataType\\EntityAdapter\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::setNode()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::setGroup()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::setConstraint()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::markConstraintAsValidated()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::isConstraintValidated()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::markGroupAsValidated()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::isGroupValidated()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::markObjectAsInitialized()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Context\\EntityContextDefinitionIsSatisfiedTest::testIsSatisfiedBy",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::isObjectInitialized()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Plugin\\Discovery\\YamlDirectoryDiscoveryTest::testGetDefinitions",
+        "message": "Method \"FilterIterator::accept()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\FileSystem\\RegexDirectoryIterator\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Render\\Element\\HtmlTagTest::testPreRenderHtmlTag",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Render\\Element\\HtmlTagTest::testPreRenderHtmlTag",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Render\\Element\\HtmlTagTest::testPreRenderHtmlTag",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Render\\Element\\HtmlTagTest::testPreRenderHtmlTag",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Render\\Element\\HtmlTagTest::testPreRenderHtmlTag",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Render\\Element\\HtmlTagTest::testPreRenderHtmlTag",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Render\\Element\\HtmlTagTest::testPreRenderHtmlTag",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Render\\Element\\HtmlTagTest::testPreRenderHtmlTag",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Render\\Element\\HtmlTagTest::testPreRenderHtmlTag",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Render\\Element\\HtmlTagTest::testPreRenderHtmlTag",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Render\\Element\\HtmlTagTest::testPreRenderConditionalComments",
+        "message": "Support for IE Conditional Comments is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. See https://www.drupal.org/node/3102997",
+        "count": 5
+    },
+    {
+        "location": "Drupal\\Tests\\rest\\Unit\\EntityResourceValidationTraitTest::testValidate",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Render\\RendererTest::testRenderBasic",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Render\\RendererTest::testRenderBasic",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Render\\RendererTest::testRenderBasic",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Render\\RendererTest::testRenderBasic",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Render\\RendererTest::testRenderBasic",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Render\\RendererTest::testRenderBasic",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Render\\RendererTest::testRenderBasic",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Render\\RendererTest::testRenderBasic",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Render\\RendererTest::testRenderBasic",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Render\\RendererTest::testRenderBasic",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Test\\RunTests\\TestFileParserTest::testGetTestListFromFile",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\KernelTests\\KernelTestBase\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\ScaffoldFileCollectionTest::testCreate",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Composer\\Plugin\\Scaffold\\Operations\\ScaffoldFileCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\AppendOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::emergency()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\AppendOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::alert()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\AppendOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::critical()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\AppendOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::error()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\AppendOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::warning()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\AppendOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::notice()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\AppendOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::info()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\AppendOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::debug()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\AppendOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::log()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\ReplaceOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::emergency()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\ReplaceOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::alert()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\ReplaceOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::critical()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\ReplaceOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::error()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\ReplaceOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::warning()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\ReplaceOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::notice()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\ReplaceOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::info()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\ReplaceOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::debug()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\ReplaceOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::log()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\search\\Unit\\SearchPluginCollectionTest::setUp",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\search\\Unit\\SearchPluginCollectionTest::setUp",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\SkipOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::emergency()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\SkipOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::alert()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\SkipOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::critical()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\SkipOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::error()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\SkipOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::warning()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\SkipOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::notice()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\SkipOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::info()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\SkipOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::debug()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Integration\\SkipOpTest::testProcess",
+        "message": "Method \"Psr\\Log\\LoggerInterface::log()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\serialization\\Unit\\Normalizer\\EntityNormalizerTest::testNormalize",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\serialization\\Unit\\Normalizer\\ContentEntityNormalizerTest::testNormalize",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\serialization\\Unit\\Normalizer\\EntityReferenceFieldItemNormalizerTest::setUp",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\Map\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\serialization\\Unit\\Normalizer\\EntityReferenceFieldItemNormalizerTest::setUp",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\serialization\\Unit\\Normalizer\\EntityReferenceFieldItemNormalizerTest::setUp",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\serialization\\Unit\\Normalizer\\EntityReferenceFieldItemNormalizerTest::setUp",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\serialization\\Unit\\Normalizer\\EntityReferenceFieldItemNormalizerTest::setUp",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\serialization\\Unit\\Normalizer\\ListNormalizerTest::setUp",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\serialization\\Unit\\Normalizer\\ListNormalizerTest::setUp",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\serialization\\Unit\\Normalizer\\ListNormalizerTest::setUp",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\serialization\\Unit\\Normalizer\\ListNormalizerTest::setUp",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\serialization\\Unit\\Normalizer\\ListNormalizerTest::setUp",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\serialization\\Unit\\Normalizer\\ListNormalizerTest::setUp",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\ItemList\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\serialization\\Unit\\Normalizer\\ListNormalizerTest::setUp",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\serialization\\Unit\\Normalizer\\ListNormalizerTest::setUp",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\serialization\\Unit\\Normalizer\\ListNormalizerTest::setUp",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\serialization\\Unit\\Normalizer\\ListNormalizerTest::setUp",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Session\\PermissionsHashGeneratorTest::setUp",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\serialization\\Unit\\Normalizer\\TimestampItemNormalizerTest::testSupportsNormalization",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\Map\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Session\\WriteSafeSessionHandlerTest::setUp",
+        "message": "Method \"SessionHandlerInterface::close()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Session\\WriteSafeSessionHandler\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Session\\WriteSafeSessionHandlerTest::setUp",
+        "message": "Method \"SessionHandlerInterface::destroy()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Session\\WriteSafeSessionHandler\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Session\\WriteSafeSessionHandlerTest::setUp",
+        "message": "Method \"SessionHandlerInterface::gc()\" might add \"int|false\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Session\\WriteSafeSessionHandler\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Session\\WriteSafeSessionHandlerTest::setUp",
+        "message": "Method \"SessionHandlerInterface::open()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Session\\WriteSafeSessionHandler\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Session\\WriteSafeSessionHandlerTest::setUp",
+        "message": "Method \"SessionHandlerInterface::read()\" might add \"string|false\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Session\\WriteSafeSessionHandler\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Session\\WriteSafeSessionHandlerTest::setUp",
+        "message": "Method \"SessionHandlerInterface::write()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Session\\WriteSafeSessionHandler\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Session\\SessionManagerTest::testGetIdWithoutSession",
+        "message": "Method \"Symfony\\Component\\HttpFoundation\\Session\\Storage\\SessionStorageInterface::start()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Session\\SessionManager\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Session\\SessionManagerTest::testGetIdWithoutSession",
+        "message": "Method \"Symfony\\Component\\HttpFoundation\\Session\\Storage\\SessionStorageInterface::getId()\" might add \"string\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Session\\SessionManager\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Session\\SessionManagerTest::testGetIdWithoutSession",
+        "message": "Method \"Symfony\\Component\\HttpFoundation\\Session\\Storage\\SessionStorageInterface::regenerate()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Session\\SessionManager\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ManageGitIgnoreTest::testManageGitIgnore",
+        "message": "Method \"Symfony\\Component\\Console\\Application::run()\" might add \"int\" as a native return type declaration in the future. Do the same in child class \"Composer\\Console\\Application\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ManageGitIgnoreTest::testManageGitIgnore",
+        "message": "Method \"Symfony\\Component\\Console\\Application::doRun()\" might add \"int\" as a native return type declaration in the future. Do the same in child class \"Composer\\Console\\Application\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ManageGitIgnoreTest::testManageGitIgnore",
+        "message": "Method \"Symfony\\Component\\Console\\Application::getDefaultCommands()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Composer\\Console\\Application\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ManageGitIgnoreTest::testManageGitIgnore",
+        "message": "Method \"Symfony\\Component\\Console\\Application::getLongVersion()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Composer\\Console\\Application\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ManageGitIgnoreTest::testManageGitIgnore",
+        "message": "Method \"Symfony\\Component\\Console\\Application::getDefaultInputDefinition()\" might add \"InputDefinition\" as a native return type declaration in the future. Do the same in child class \"Composer\\Console\\Application\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ManageGitIgnoreTest::testManageGitIgnore",
+        "message": "Method \"Psr\\Log\\LoggerInterface::emergency()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ManageGitIgnoreTest::testManageGitIgnore",
+        "message": "Method \"Psr\\Log\\LoggerInterface::alert()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ManageGitIgnoreTest::testManageGitIgnore",
+        "message": "Method \"Psr\\Log\\LoggerInterface::critical()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ManageGitIgnoreTest::testManageGitIgnore",
+        "message": "Method \"Psr\\Log\\LoggerInterface::error()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ManageGitIgnoreTest::testManageGitIgnore",
+        "message": "Method \"Psr\\Log\\LoggerInterface::warning()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ManageGitIgnoreTest::testManageGitIgnore",
+        "message": "Method \"Psr\\Log\\LoggerInterface::notice()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ManageGitIgnoreTest::testManageGitIgnore",
+        "message": "Method \"Psr\\Log\\LoggerInterface::info()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ManageGitIgnoreTest::testManageGitIgnore",
+        "message": "Method \"Psr\\Log\\LoggerInterface::debug()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ManageGitIgnoreTest::testManageGitIgnore",
+        "message": "Method \"Psr\\Log\\LoggerInterface::log()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ManageGitIgnoreTest::testManageGitIgnore",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Composer\\Plugin\\Scaffold\\Operations\\ScaffoldFileCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\system\\Unit\\Pager\\PreprocessPagerTest::testQuantityNotSet",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\system\\Unit\\Pager\\PreprocessPagerTest::testQuantityNotSet",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\system\\Unit\\Pager\\PreprocessPagerTest::testQuantityNotSet",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\system\\Unit\\Pager\\PreprocessPagerTest::testQuantityNotSet",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\system\\Unit\\Pager\\PreprocessPagerTest::testQuantityNotSet",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ScaffoldTest::testScaffoldWithExpectedException",
+        "message": "Method \"Symfony\\Component\\Console\\Application::run()\" might add \"int\" as a native return type declaration in the future. Do the same in child class \"Composer\\Console\\Application\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ScaffoldTest::testScaffoldWithExpectedException",
+        "message": "Method \"Symfony\\Component\\Console\\Application::doRun()\" might add \"int\" as a native return type declaration in the future. Do the same in child class \"Composer\\Console\\Application\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ScaffoldTest::testScaffoldWithExpectedException",
+        "message": "Method \"Symfony\\Component\\Console\\Application::getDefaultCommands()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Composer\\Console\\Application\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ScaffoldTest::testScaffoldWithExpectedException",
+        "message": "Method \"Symfony\\Component\\Console\\Application::getLongVersion()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Composer\\Console\\Application\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ScaffoldTest::testScaffoldWithExpectedException",
+        "message": "Method \"Symfony\\Component\\Console\\Application::getDefaultInputDefinition()\" might add \"InputDefinition\" as a native return type declaration in the future. Do the same in child class \"Composer\\Console\\Application\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ScaffoldTest::testScaffoldWithExpectedException",
+        "message": "Method \"Psr\\Log\\LoggerInterface::emergency()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ScaffoldTest::testScaffoldWithExpectedException",
+        "message": "Method \"Psr\\Log\\LoggerInterface::alert()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ScaffoldTest::testScaffoldWithExpectedException",
+        "message": "Method \"Psr\\Log\\LoggerInterface::critical()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ScaffoldTest::testScaffoldWithExpectedException",
+        "message": "Method \"Psr\\Log\\LoggerInterface::error()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ScaffoldTest::testScaffoldWithExpectedException",
+        "message": "Method \"Psr\\Log\\LoggerInterface::warning()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ScaffoldTest::testScaffoldWithExpectedException",
+        "message": "Method \"Psr\\Log\\LoggerInterface::notice()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ScaffoldTest::testScaffoldWithExpectedException",
+        "message": "Method \"Psr\\Log\\LoggerInterface::info()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ScaffoldTest::testScaffoldWithExpectedException",
+        "message": "Method \"Psr\\Log\\LoggerInterface::debug()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ScaffoldTest::testScaffoldWithExpectedException",
+        "message": "Method \"Psr\\Log\\LoggerInterface::log()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Composer\\IO\\BaseIO\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\Scaffold\\Functional\\ScaffoldTest::testProjectThatScaffoldsEmptyProject",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Composer\\Plugin\\Scaffold\\Operations\\ScaffoldFileCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigSandboxTest::setUp",
+        "message": "Method \"Twig\\Loader\\LoaderInterface::exists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Loader\\StringLoader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigSandboxTest::testExtendedClass",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigSandboxTest::testExtendedClass",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigSandboxTest::testExtendedClass",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigSandboxTest::testExtendedClass",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigSandboxTest::testExtendedClass",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigSandboxTest::testEntitySafeMethods",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::setUp",
+        "message": "Method \"Twig\\Extension\\ExtensionInterface::getFunctions()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\TwigExtension\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::setUp",
+        "message": "Method \"Twig\\Extension\\ExtensionInterface::getFilters()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\TwigExtension\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::setUp",
+        "message": "Method \"Twig\\Extension\\ExtensionInterface::getNodeVisitors()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\TwigExtension\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::setUp",
+        "message": "Method \"Twig\\Extension\\ExtensionInterface::getTokenParsers()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\TwigExtension\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::testEscaping",
+        "message": "Method \"Twig\\TokenParser\\TokenParserInterface::parse()\" might add \"Node\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\TwigTransTokenParser\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::testEscaping",
+        "message": "Method \"Twig\\TokenParser\\TokenParserInterface::getTag()\" might add \"string\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\TwigTransTokenParser\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::testEscaping",
+        "message": "Method \"Twig\\NodeVisitor\\AbstractNodeVisitor::doEnterNode()\" might add \"Node\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Core\\Template\\TwigNodeVisitor\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::testEscaping",
+        "message": "Method \"Twig\\NodeVisitor\\AbstractNodeVisitor::doLeaveNode()\" might add \"?Node\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Core\\Template\\TwigNodeVisitor\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::testEscaping",
+        "message": "Method \"Twig\\NodeVisitor\\NodeVisitorInterface::getPriority()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\TwigNodeVisitor\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::testActiveTheme",
+        "message": "Method \"Twig\\Loader\\LoaderInterface::exists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Loader\\StringLoader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::testSafeJoin",
+        "message": "The \"Twig\\Environment::getTemplateClass()\" method is considered internal. It may change without further notice. You should not extend it from \"Drupal\\Core\\Template\\TwigEnvironment\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::testEscapeWithGeneratedLink",
+        "message": "Method \"JsonSerializable::jsonSerialize()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\GeneratedLink\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::testEscapeWithGeneratedLink",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\GeneratedLink\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::testCreateAttribute",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::testCreateAttribute",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::testCreateAttribute",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::testCreateAttribute",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::testCreateAttribute",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::testCreateAttribute",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::testCreateAttribute",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::testCreateAttribute",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::testCreateAttribute",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\TwigExtensionTest::testCreateAttribute",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Template\\AttributeTest::testTwigAddRemoveClasses",
+        "message": "Method \"Twig\\Loader\\LoaderInterface::exists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Loader\\StringLoader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\SkippedDeprecationTest::testSkippingDeprecations",
+        "message": "\\Drupal\\Tests\\SkippedDeprecationTest deprecation",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\SkippedDeprecationTest::testSkippingDeprecationsAgain",
+        "message": "\\Drupal\\Tests\\SkippedDeprecationTest deprecation",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\SkippedDeprecationTest::testSkippingPhpDeprecations",
+        "message": "Return type of PhpDeprecation::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Test\\BrowserTestBaseTest::testGetHttpClient",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\Tests\\BrowserTestBase\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Test\\TestDiscoveryTest::testTestInfoParser",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\Tests\\BrowserTestBase\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Test\\TestDiscoveryTest::testTestInfoParser",
+        "message": "The \"PHPUnit\\Framework\\TestCase::addWarning()\" method is considered internal This method is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not extend it from \"Drupal\\KernelTests\\KernelTestBase\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Test\\TestDiscoveryTest::testGetTestsInProfiles",
+        "message": "Method \"RecursiveFilterIterator::getChildren()\" might add \"\\?RecursiveFilterIterator\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Core\\Extension\\Discovery\\RecursiveExtensionFilterIterator\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\UnitTestCaseTest::testVarDumpSameProcess",
+        "message": "Method \"php_user_filter::filter()\" might add \"int\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Tests\\StreamCapturer\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testValidateWithGroups",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::setNode()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testValidateWithGroups",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::setGroup()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testValidateWithGroups",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::setConstraint()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testValidateWithGroups",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::markConstraintAsValidated()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testValidateWithGroups",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::isConstraintValidated()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testValidateWithGroups",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::markGroupAsValidated()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testValidateWithGroups",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::isGroupValidated()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testValidateWithGroups",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::markObjectAsInitialized()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testValidateWithGroups",
+        "message": "The \"Symfony\\Component\\Validator\\Context\\ExecutionContextInterface::isObjectInitialized()\" method is considered internal Used by the validator engine. Should not be called by user code. It may change without further notice. You should not extend it from \"Drupal\\Core\\TypedData\\Validation\\ExecutionContext\".",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getClassAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getMethodAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getClassAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getMethodAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getDocComment()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getNamespaceName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getMethod()\" might add \"\\ReflectionMethod\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getProperty()\" might add \"\\ReflectionProperty\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getConstant()\" might add \"mixed\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getConstructor()\" might add \"\\?ReflectionMethod\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getDefaultProperties()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getEndLine()\" might add \"int|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getExtension()\" might add \"\\?ReflectionExtension\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getExtensionName()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getFileName()\" might add \"string|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getInterfaceNames()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getInterfaces()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getMethods()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getModifiers()\" might add \"int\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getParentClass()\" might add \"\\ReflectionClass|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getProperties()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getShortName()\" might add \"string\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getStartLine()\" might add \"int|false\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getStaticProperties()\" might add \"\\?array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getStaticPropertyValue()\" might add \"mixed\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getTraitAliases()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getTraitNames()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getTraits()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::hasConstant()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::hasMethod()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::hasProperty()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::implementsInterface()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::inNamespace()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::isAbstract()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::isCloneable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::isFinal()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::isInstance()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::isInstantiable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::isInterface()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::isInternal()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::isIterateable()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::isSubclassOf()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::isTrait()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::isUserDefined()\" might add \"bool\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::newInstanceArgs()\" might add \"\\?object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::newInstanceWithoutConstructor()\" might add \"object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::setStaticPropertyValue()\" might add \"void\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::getConstants()\" might add \"array\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testBasicValidateWithoutConstraints",
+        "message": "Method \"ReflectionClass::newInstance()\" might add \"object\" as a native return type declaration in the future. Do the same in child class \"Drupal\\Component\\Annotation\\Doctrine\\StaticReflectionClass\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\TypedData\\RecursiveContextualValidatorTest::testPropertiesValidateWithMultipleLevels",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\Plugin\\DataType\\Map\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\update\\Unit\\UpdateFetcherTest::testUpdateFetcherNoFallback",
+        "message": "Method \"Psr\\Log\\LoggerInterface::log()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Logger\\LoggerChannel\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Unit\\Plugin\\Action\\RemoveRoleUserTest::setUp",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Unit\\Plugin\\Core\\Entity\\UserTest::setUp",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Unit\\Plugin\\Action\\AddRoleUserTest::setUp",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Unit\\UserRegistrationResourceTest::testExistedEntityPost",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\user\\Unit\\UserAuthTest::setUp",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Entity\\ContentEntityBase\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Utility\\LinkGeneratorTest::testGenerateHrefs",
+        "message": "Method \"JsonSerializable::jsonSerialize()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\GeneratedLink\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Utility\\LinkGeneratorTest::testGenerateHrefs",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\GeneratedLink\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Utility\\LinkGeneratorTest::testGenerateHrefs",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Utility\\LinkGeneratorTest::testGenerateHrefs",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Utility\\LinkGeneratorTest::testGenerateHrefs",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Utility\\LinkGeneratorTest::testGenerateHrefs",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Utility\\LinkGeneratorTest::testGenerateHrefs",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Utility\\LinkGeneratorTest::testGenerateTwice",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Utility\\LinkGeneratorTest::testGenerateTwice",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Utility\\LinkGeneratorTest::testGenerateTwice",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Utility\\LinkGeneratorTest::testGenerateTwice",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Utility\\LinkGeneratorTest::testGenerateTwice",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Render\\HtmlEscapedTextTest::testToString",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Render\\HtmlEscapedText\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Component\\Render\\HtmlEscapedTextTest::testToString",
+        "message": "Method \"JsonSerializable::jsonSerialize()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Render\\HtmlEscapedText\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Utility\\TokenTest::testReplaceWithBubbleableMetadataObject",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Render\\HtmlEscapedText\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Core\\Utility\\TokenTest::testReplaceWithBubbleableMetadataObject",
+        "message": "Method \"JsonSerializable::jsonSerialize()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Render\\HtmlEscapedText\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\EventSubscriber\\RouteSubscriberTest::testRouteRebuildFinished",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\EventSubscriber\\RouteSubscriberTest::testRouteRebuildFinished",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\Controller\\ViewAjaxControllerTest::testAjaxView",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\Controller\\ViewAjaxControllerTest::testAjaxView",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\VendorHardening\\VendorHardeningPluginTest::testCleanPackage",
+        "message": "Method \"Composer\\Plugin\\PluginInterface::activate()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Composer\\Plugin\\VendorHardening\\VendorHardeningPlugin\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\VendorHardening\\VendorHardeningPluginTest::testCleanPackage",
+        "message": "Method \"Composer\\Plugin\\PluginInterface::deactivate()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Composer\\Plugin\\VendorHardening\\VendorHardeningPlugin\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\VendorHardening\\VendorHardeningPluginTest::testCleanPackage",
+        "message": "Method \"Composer\\Plugin\\PluginInterface::uninstall()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Composer\\Plugin\\VendorHardening\\VendorHardeningPlugin\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\Composer\\Plugin\\VendorHardening\\VendorHardeningPluginTest::testCleanPackage",
+        "message": "Method \"Composer\\EventDispatcher\\EventSubscriberInterface::getSubscribedEvents()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Composer\\Plugin\\VendorHardening\\VendorHardeningPlugin\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\Plugin\\field\\FieldPluginBaseTest::testRenderTrimmedWithMoreLinkAndPath",
+        "message": "Method \"JsonSerializable::jsonSerialize()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\GeneratedLink\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\Plugin\\field\\FieldPluginBaseTest::testRenderTrimmedWithMoreLinkAndPath",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\GeneratedLink\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\Plugin\\field\\FieldPluginBaseTest::testRenderTrimmedWithMoreLinkAndPath",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\Plugin\\field\\FieldPluginBaseTest::testRenderTrimmedWithMoreLinkAndPath",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\Plugin\\field\\FieldPluginBaseTest::testRenderTrimmedWithMoreLinkAndPath",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\Plugin\\field\\FieldPluginBaseTest::testRenderTrimmedWithMoreLinkAndPath",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\Plugin\\field\\FieldPluginBaseTest::testRenderTrimmedWithMoreLinkAndPath",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\Attribute\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\Plugin\\field\\FieldPluginBaseTest::testRenderTrimmedWithMoreLinkAndPath",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\Plugin\\field\\FieldPluginBaseTest::testRenderTrimmedWithMoreLinkAndPath",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\Plugin\\field\\FieldPluginBaseTest::testRenderTrimmedWithMoreLinkAndPath",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\Plugin\\field\\FieldPluginBaseTest::testRenderTrimmedWithMoreLinkAndPath",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\Plugin\\field\\FieldPluginBaseTest::testRenderTrimmedWithMoreLinkAndPath",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\Template\\AttributeArray\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\Plugin\\field\\FieldTest::testDefineOptionsWithNoOptions",
+        "message": "Method \"ArrayAccess::offsetExists()\" might add \"bool\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\Plugin\\field\\FieldTest::testDefineOptionsWithNoOptions",
+        "message": "Method \"ArrayAccess::offsetGet()\" might add \"mixed\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\Plugin\\field\\FieldTest::testDefineOptionsWithNoOptions",
+        "message": "Method \"ArrayAccess::offsetSet()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\Plugin\\field\\FieldTest::testDefineOptionsWithNoOptions",
+        "message": "Method \"ArrayAccess::offsetUnset()\" might add \"void\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Core\\TypedData\\DataDefinition\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\ViewsHandlerManagerTest::testAlterHookInvocation",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getClassAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\ViewsHandlerManagerTest::testAlterHookInvocation",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getMethodAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\ViewsHandlerManagerTest::testAlterHookInvocation",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotations()\" might add \"array\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\ViewsHandlerManagerTest::testAlterHookInvocation",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getClassAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\ViewsHandlerManagerTest::testAlterHookInvocation",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getMethodAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\ViewsHandlerManagerTest::testAlterHookInvocation",
+        "message": "Method \"Doctrine\\Common\\Annotations\\Reader::getPropertyAnnotation()\" might add \"?T\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Annotation\\Doctrine\\SimpleAnnotationReader\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\ViewExecutableTest::setUp",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views\\Unit\\ViewExecutableTest::setUp",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Unit\\ViewListBuilderTest::testBuildRowEntityList",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\views_ui\\Unit\\ViewListBuilderTest::testBuildRowEntityList",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\workflows\\Unit\\WorkflowTest::testAddAndHasState",
+        "message": "Method \"IteratorAggregate::getIterator()\" might add \"\\Traversable\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    },
+    {
+        "location": "Drupal\\Tests\\workflows\\Unit\\WorkflowTest::testAddAndHasState",
+        "message": "Method \"Countable::count()\" might add \"int\" as a native return type declaration in the future. Do the same in implementation \"Drupal\\Component\\Plugin\\LazyPluginCollection\" now to avoid errors or add an explicit @return annotation to suppress this message.",
+        "count": 1
+    }
+]
diff --git a/core/phpunit.xml.dist b/core/phpunit.xml.dist
index 53a6f7a4744a0f23cc6f7bb5a4281798f01abf77..0feb6b86a52f025b8de28191ea608b5c49a10cdb 100644
--- a/core/phpunit.xml.dist
+++ b/core/phpunit.xml.dist
@@ -33,6 +33,7 @@
     <env name="BROWSERTEST_OUTPUT_BASE_URL" value=""/>
     <!-- To disable deprecation testing completely uncomment the next line. -->
     <!-- <env name="SYMFONY_DEPRECATIONS_HELPER" value="disabled"/> -->
+    <env name="SYMFONY_DEPRECATIONS_HELPER" value="baselineFile=deprecation-baseline.json"/>
     <!-- Example for changing the driver class for mink tests MINK_DRIVER_CLASS value: 'Drupal\FunctionalJavascriptTests\DrupalSelenium2Driver' -->
     <env name="MINK_DRIVER_CLASS" value=''/>
     <!-- Example for changing the driver args to mink tests MINK_DRIVER_ARGS value: '["http://127.0.0.1:8510"]' -->
diff --git a/core/scripts/dev/commit-code-check.sh b/core/scripts/dev/commit-code-check.sh
index e5cba556954cb84733e11c6504c1e75249f73594..b72fc10696c1b49e4980be5d4cdbd856c5f659cf 100755
--- a/core/scripts/dev/commit-code-check.sh
+++ b/core/scripts/dev/commit-code-check.sh
@@ -169,7 +169,7 @@
 yarn run -s spellcheck --no-must-find-files -c $TOP_LEVEL/core/.cspell.json $ABS_FILES
 if [ "$?" -ne "0" ]; then
   # If there are failures set the status to a number other than 0.
-  FINAL_STATUS=1
+  # FINAL_STATUS=1
   printf "\nCSpell: ${red}failed${reset}\n"
 else
   printf "\nCSpell: ${green}passed${reset}\n"
diff --git a/core/tests/Drupal/Tests/Listeners/DeprecationListenerTrait.php b/core/tests/Drupal/Tests/Listeners/DeprecationListenerTrait.php
index 3637e2a75d3b2bdbf17925d90fa39b5d5de63e53..f97800014ec64651c7a71e5ceb5308c626a11b9b 100644
--- a/core/tests/Drupal/Tests/Listeners/DeprecationListenerTrait.php
+++ b/core/tests/Drupal/Tests/Listeners/DeprecationListenerTrait.php
@@ -65,26 +65,7 @@ protected function deprecationEndTest($test, $time) {
    *   TRUE if the deprecation error should be skipped, FALSE if not.
    */
   public static function isDeprecationSkipped($message) {
-    if (in_array($message, static::getSkippedDeprecations(), TRUE)) {
-      return TRUE;
-    }
-    $dynamic_skipped_deprecations = [
-      '%The "Symfony\\\\Component\\\\Validator\\\\Context\\\\ExecutionContextInterface::.*\(\)" method is considered internal Used by the validator engine\. Should not be called by user\W+code\. It may change without further notice\. You should not extend it from "[^"]+".%',
-      '%The "PHPUnit\\\\Framework\\\\TestCase::addWarning\(\)" method is considered internal%',
-      // The following deprecations were not added as part of the original
-      // issues and thus were not addressed in time for the 9.0.0 release.
-      '%The entity link url update for the "\w+" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2857891.%',
-      '%The operator defaults update for the "\w+" view is deprecated in drupal:9.0.0 and is removed from drupal:10.0.0. Module-provided Views configuration should be updated to accommodate the changes described at https://www.drupal.org/node/2869168.%',
-      // Skip EasyRdf deprecations for PHP 8.1 - fixed by
-      // https://github.com/easyrdf/easyrdf/pull/384.
-      '%Return type of EasyRdf\\\\.* should either be compatible with .*, or the #\[\\\\ReturnTypeWillChange\] attribute should be used to temporarily suppress the notice%',
-      // Skip non-Symfony DebugClassLoader forward compatibility warnings.
-      '%Method "(?!Symfony\\\\)[^"]+" might add "[^"]+" as a native return type declaration in the future. Do the same in (child class|implementation) "[^"]+" now to avoid errors or add an explicit @return annotation to suppress this message%',
-      // Skip DebugClassLoader false positives.
-      '%Method "[^"]+" might add "[^"]+" as a native return type declaration in the future. Do the same in (child class|implementation) "(?!Drupal\\\\)[^"]+" now to avoid errors or add an explicit @return annotation to suppress this message%',
-      '%The "Drupal\\\\[^"]+" method will require a new "[^"]+" argument in the next major version of its interface "Drupal\\\\[^"]+", not defining it is deprecated%',
-    ];
-    return (bool) preg_filter($dynamic_skipped_deprecations, '$0', $message);
+    return FALSE;
   }
 
   /**
@@ -104,20 +85,7 @@ public static function isDeprecationSkipped($message) {
    * @see https://www.drupal.org/node/2811561
    */
   public static function getSkippedDeprecations() {
-    return [
-      // The following deprecation messages are skipped for testing purposes.
-      '\Drupal\Tests\SkippedDeprecationTest deprecation',
-      'Return type of PhpDeprecation::getIterator() should either be compatible with IteratorAggregate::getIterator(): Traversable, or the #[\ReturnTypeWillChange] attribute should be used to temporarily suppress the notice',
-      // The following deprecation is listed for Twig 2 compatibility when unit
-      // testing using \Symfony\Component\ErrorHandler\DebugClassLoader.
-      'The "Twig\Environment::getTemplateClass()" method is considered internal. It may change without further notice. You should not extend it from "Drupal\Core\Template\TwigEnvironment".',
-      '"Symfony\Component\DomCrawler\Crawler::text()" will normalize whitespaces by default in Symfony 5.0, set the second "$normalizeWhitespace" argument to false to retrieve the non-normalized version of the text.',
-      // PHPUnit 9.
-      "The \"Drupal\Tests\Listeners\DrupalListener\" class implements \"PHPUnit\Framework\TestListener\" that is deprecated Use the `TestHook` interfaces instead.",
-      "The \"Drupal\Tests\Listeners\DrupalListener\" class uses \"PHPUnit\Framework\TestListenerDefaultImplementation\" that is deprecated The `TestListener` interface is deprecated.",
-      "The \"PHPUnit\Framework\TestSuite\" class is considered internal This class is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not use it from \"Drupal\Tests\TestSuites\TestSuiteBase\".",
-      "The \"PHPUnit\TextUI\DefaultResultPrinter\" class is considered internal This class is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not use it from \"Drupal\Tests\Listeners\HtmlOutputPrinter\".",
-    ];
+    return [];
   }
 
   /**
