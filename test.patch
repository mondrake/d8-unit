diff --git a/core/modules/system/tests/src/Kernel/Theme/ThemeTest.php b/core/modules/system/tests/src/Kernel/Theme/ThemeTest.php
index 74b0e496..defae093 100644
--- a/core/modules/system/tests/src/Kernel/Theme/ThemeTest.php
+++ b/core/modules/system/tests/src/Kernel/Theme/ThemeTest.php
@@ -55,16 +55,19 @@ public function testThemeDataTypes() {
     // theme_test_false is an implemented theme hook so \Drupal::theme() service
     // should return a string or an object that implements MarkupInterface,
     // even though the theme function itself can return anything.
-    $foos = ['null' => NULL, 'false' => FALSE, 'integer' => 1, 'string' => 'foo', 'empty_string' => ''];
+    $foos = ['integer' => 1, 'string' => 'foo'];
     foreach ($foos as $type => $example) {
       $output = \Drupal::theme()->render('theme_test_foo', ['foo' => $example]);
-      $this->assertTrue($output instanceof MarkupInterface || is_string($output), new FormattableMarkup('\Drupal::theme() returns an object that implements MarkupInterface or a string for data type @type.', ['@type' => $type]));
-      if ($output instanceof MarkupInterface) {
-        $this->assertIdentical((string) $example, $output->__toString());
-      }
-      elseif (is_string($output)) {
-        $this->assertIdentical($output, '', 'A string will be return when the theme returns an empty string.');
-      }
+      $this->assertInstanceOf(MarkupInterface::class, $output, "\\Drupal::theme()->render() should return an object that implements MarkupInterface for data type '$type'.");
+      $this->assertEquals($example, $output);
+    }
+
+    // Check that a string is returned when the theme returns an empty string.
+    $foos = ['null' => NULL, 'false' => FALSE, 'empty_string' => ''];
+    foreach ($foos as $type => $example) {
+      $output = \Drupal::theme()->render('theme_test_foo', ['foo' => $example]);
+      $this->assertIsString($output, "\\Drupal::theme()->render() should return a string for data type '$type'.");
+      $this->assertSame('', $output, "\\Drupal::theme()->render() should return an empty string for data type '$type'.");
     }
 
     // suggestionnotimplemented is not an implemented theme hook so \Drupal::theme() service
