diff --git a/core/modules/block/tests/src/Kernel/BlockViewBuilderTest.php b/core/modules/block/tests/src/Kernel/BlockViewBuilderTest.php
index d14e9021a1..1504077dfd 100644
--- a/core/modules/block/tests/src/Kernel/BlockViewBuilderTest.php
+++ b/core/modules/block/tests/src/Kernel/BlockViewBuilderTest.php
@@ -93,7 +93,7 @@ public function testBasicRendering() {
     $expected[] = '  </div>';
     $expected[] = '';
     $expected_output = implode("\n", $expected);
-    $this->assertEquals($expected_output, $this->renderer->renderRoot($output));
+    $this->assertSame($expected_output, (string) $this->renderer->renderRoot($output));
 
     // Reset the HTML IDs so that the next render is not affected.
     Html::resetSeenIds();
@@ -118,7 +118,7 @@ public function testBasicRendering() {
     $expected[] = '  </div>';
     $expected[] = '';
     $expected_output = implode("\n", $expected);
-    $this->assertEquals($expected_output, $this->renderer->renderRoot($output));
+    $this->assertSame($expected_output, (string) $this->renderer->renderRoot($output));
   }
 
   /**
diff --git a/core/modules/comment/tests/src/Functional/CommentTokenReplaceTest.php b/core/modules/comment/tests/src/Functional/CommentTokenReplaceTest.php
index f7a90496e0..4fffc6e042 100644
--- a/core/modules/comment/tests/src/Functional/CommentTokenReplaceTest.php
+++ b/core/modules/comment/tests/src/Functional/CommentTokenReplaceTest.php
@@ -3,7 +3,6 @@
 namespace Drupal\Tests\comment\Functional;
 
 use Drupal\comment\Plugin\Field\FieldType\CommentItemInterface;
-use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Html;
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\comment\Entity\Comment;
@@ -139,7 +138,7 @@ public function testCommentTokenReplacement() {
     foreach ($tests as $input => $expected) {
       $bubbleable_metadata = new BubbleableMetadata();
       $output = $token_service->replace($input, ['comment' => $comment], ['langcode' => $language_interface->getId()], $bubbleable_metadata);
-      $this->assertEquals($expected, $output, new FormattableMarkup('Comment token %token replaced.', ['%token' => $input]));
+      $this->assertSame((string) $expected, (string) $output, "Failed test case: {$input}");
       $this->assertEquals($metadata_tests[$input], $bubbleable_metadata);
     }
 
@@ -148,7 +147,7 @@ public function testCommentTokenReplacement() {
     $comment->setOwnerId(0)->setAuthorName($author_name);
     $input = '[comment:author]';
     $output = $token_service->replace($input, ['comment' => $comment], ['langcode' => $language_interface->getId()]);
-    $this->assertEquals(Html::escape($author_name), $output, new FormattableMarkup('Comment author token %token replaced.', ['%token' => $input]));
+    $this->assertSame((string) Html::escape($author_name), (string) $output);
     // Add comment field to user and term entities.
     $this->addDefaultCommentField('user', 'user', 'comment', CommentItemInterface::OPEN, 'comment_user');
     $this->addDefaultCommentField('taxonomy_term', 'tags', 'comment', CommentItemInterface::OPEN, 'comment_term');
@@ -186,7 +185,7 @@ public function testCommentTokenReplacement() {
 
     foreach ($tests as $input => $expected) {
       $output = $token_service->replace($input, ['entity' => $node, 'node' => $node, 'user' => $user, 'term' => $term], ['langcode' => $language_interface->getId()]);
-      $this->assertEquals($expected, $output, new FormattableMarkup('Comment token %token replaced.', ['%token' => $input]));
+      $this->assertSame((string) $expected, (string) $output, "Failed test case: {$input}");
     }
   }
 
diff --git a/core/modules/comment/tests/src/Kernel/CommentValidationTest.php b/core/modules/comment/tests/src/Kernel/CommentValidationTest.php
index 2e6af32070..254deeed8c 100644
--- a/core/modules/comment/tests/src/Kernel/CommentValidationTest.php
+++ b/core/modules/comment/tests/src/Kernel/CommentValidationTest.php
@@ -101,7 +101,7 @@ public function testValidation() {
     $violations = $comment->validate();
     $this->assertCount(1, $violations, "Violation found on author name collision");
     $this->assertEquals("name", $violations[0]->getPropertyPath());
-    $this->assertEquals(t('The name you used (%name) belongs to a registered user.', ['%name' => 'test']), $violations[0]->getMessage());
+    $this->assertEquals('The name you used (test) belongs to a registered user.', $violations[0]->getMessage());
 
     // Make the name valid.
     $comment->set('name', 'valid unused name');
@@ -197,7 +197,7 @@ protected function assertLengthViolation(CommentInterface $comment, string $fiel
     $this->assertCount(1, $violations, "Violation found when $field_name is too long.");
     $this->assertEquals("{$field_name}.0.value", $violations[0]->getPropertyPath());
     $field_label = $comment->get($field_name)->getFieldDefinition()->getLabel();
-    $this->assertEquals(t('%name: may not be longer than @max characters.', ['%name' => $field_label, '@max' => $length]), $violations[0]->getMessage());
+    $this->assertEquals("{$field_label}: may not be longer than {$length} characters.", $violations[0]->getMessage());
   }
 
 }
diff --git a/core/modules/comment/tests/src/Kernel/Views/CommentLinksTest.php b/core/modules/comment/tests/src/Kernel/Views/CommentLinksTest.php
index 663f49e8d8..19bd3dca0c 100644
--- a/core/modules/comment/tests/src/Kernel/Views/CommentLinksTest.php
+++ b/core/modules/comment/tests/src/Kernel/Views/CommentLinksTest.php
@@ -82,7 +82,7 @@ public function testLinkApprove() {
     $approve_comment = $view->style_plugin->getField(0, 'approve_comment');
     $options = ['query' => ['destination' => '/']];
     $url = Url::fromRoute('comment.approve', ['comment' => $comment->id()], $options);
-    $this->assertEquals((string) $approve_comment, Link::fromTextAndUrl('Approve', $url)->toString(), 'Found a comment approve link for an unapproved comment.');
+    $this->assertSame((string) $approve_comment, (string) Link::fromTextAndUrl('Approve', $url)->toString(), 'Found a comment approve link for an unapproved comment.');
 
     // Approve the comment.
     $comment->setPublished();
@@ -182,7 +182,7 @@ public function testLinkReply() {
       'field_name' => 'comment',
       'pid' => $comment->id(),
     ]);
-    $this->assertEquals((string) $replyto_comment, Link::fromTextAndUrl('Reply', $url)->toString(), 'Found the comment reply link as an admin user.');
+    $this->assertSame((string) $replyto_comment, (string) Link::fromTextAndUrl('Reply', $url)->toString(), 'Found the comment reply link as an admin user.');
 
     // Check if I can see the reply link as an anonymous user.
     $account_switcher->switchTo(new AnonymousUserSession());
diff --git a/core/modules/content_moderation/tests/src/Kernel/ContentModerationPermissionsTest.php b/core/modules/content_moderation/tests/src/Kernel/ContentModerationPermissionsTest.php
index c1760feb23..8498d8d976 100644
--- a/core/modules/content_moderation/tests/src/Kernel/ContentModerationPermissionsTest.php
+++ b/core/modules/content_moderation/tests/src/Kernel/ContentModerationPermissionsTest.php
@@ -108,8 +108,8 @@ public function permissionsTestCases() {
         ],
         [
           'use simple_workflow transition publish' => [
-            'title' => '<em class="placeholder">Simple Workflow</em> workflow: Use <em class="placeholder">Publish</em> transition.',
-            'description' => 'Move content from <em class="placeholder">Draft, Published</em> states to <em class="placeholder">Published</em> state.',
+            'title' => 'Simple Workflow workflow: Use Publish transition.',
+            'description' => 'Move content from Draft, Published states to Published state.',
             'dependencies' => [
               'config' => [
                 'workflows.workflow.simple_workflow',
@@ -117,8 +117,8 @@ public function permissionsTestCases() {
             ],
           ],
           'use simple_workflow transition create_new_draft' => [
-            'title' => '<em class="placeholder">Simple Workflow</em> workflow: Use <em class="placeholder">Create New Draft</em> transition.',
-            'description' => 'Move content from <em class="placeholder">Draft, Published</em> states to <em class="placeholder">Draft</em> state.',
+            'title' => 'Simple Workflow workflow: Use Create New Draft transition.',
+            'description' => 'Move content from Draft, Published states to Draft state.',
             'dependencies' => [
               'config' => [
                 'workflows.workflow.simple_workflow',
@@ -126,8 +126,8 @@ public function permissionsTestCases() {
             ],
           ],
           'use simple_workflow transition archive' => [
-            'title' => '<em class="placeholder">Simple Workflow</em> workflow: Use <em class="placeholder">Archive</em> transition.',
-            'description' => 'Move content from <em class="placeholder">Published</em> state to <em class="placeholder">Archived</em> state.',
+            'title' => 'Simple Workflow workflow: Use Archive transition.',
+            'description' => 'Move content from Published state to Archived state.',
             'dependencies' => [
               'config' => [
                 'workflows.workflow.simple_workflow',
diff --git a/core/modules/content_moderation/tests/src/Kernel/EntityStateChangeValidationTest.php b/core/modules/content_moderation/tests/src/Kernel/EntityStateChangeValidationTest.php
index 606ffee101..100b95b1e3 100644
--- a/core/modules/content_moderation/tests/src/Kernel/EntityStateChangeValidationTest.php
+++ b/core/modules/content_moderation/tests/src/Kernel/EntityStateChangeValidationTest.php
@@ -111,7 +111,7 @@ public function testInvalidTransition() {
     $violations = $node->validate();
     $this->assertCount(1, $violations);
 
-    $this->assertEquals('Invalid state transition from <em class="placeholder">Draft</em> to <em class="placeholder">Archived</em>', $violations->get(0)->getMessage());
+    $this->assertEquals('Invalid state transition from Draft to Archived', $violations->get(0)->getMessage());
   }
 
   /**
@@ -134,7 +134,7 @@ public function testInvalidState() {
     $violations = $node->validate();
 
     $this->assertCount(1, $violations);
-    $this->assertEquals('State <em class="placeholder">invalid_state</em> does not exist on <em class="placeholder">Editorial</em> workflow', $violations->get(0)->getMessage());
+    $this->assertEquals('State invalid_state does not exist on Editorial workflow', $violations->get(0)->getMessage());
   }
 
   /**
@@ -226,7 +226,7 @@ public function testInvalidStateMultilingual() {
     $node->moderation_state = 'archived';
     $violations = $node->validate();
     $this->assertCount(1, $violations);
-    $this->assertEquals('Invalid state transition from <em class="placeholder">Draft</em> to <em class="placeholder">Archived</em>', $violations->get(0)->getMessage());
+    $this->assertEquals('Invalid state transition from Draft to Archived', $violations->get(0)->getMessage());
 
     // From the default french published revision, there should be none.
     $node_fr = Node::load($node->id())->getTranslation('fr');
@@ -362,12 +362,12 @@ public function transitionAccessValidationTestCases() {
       'Invalid transition, no permissions validated' => [
         [],
         'archived',
-        ['Invalid state transition from <em class="placeholder">Draft</em> to <em class="placeholder">Archived</em>'],
+        ['Invalid state transition from Draft to Archived'],
       ],
       'Valid transition, missing permission' => [
         [],
         'published',
-        ['You do not have access to transition from <em class="placeholder">Draft</em> to <em class="placeholder">Published</em>'],
+        ['You do not have access to transition from Draft to Published'],
       ],
       'Valid transition, granted published permission' => [
         ['use editorial transition publish'],
@@ -382,7 +382,7 @@ public function transitionAccessValidationTestCases() {
       'Valid transition, incorrect permission granted' => [
         ['use editorial transition create_new_draft'],
         'published',
-        ['You do not have access to transition from <em class="placeholder">Draft</em> to <em class="placeholder">Published</em>'],
+        ['You do not have access to transition from Draft to Published'],
       ],
       // Test with an additional state and set of transitions, since the
       // "published" transition can start from either "draft" or "published", it
@@ -396,7 +396,7 @@ public function transitionAccessValidationTestCases() {
       'Valid transition, incorrect  foo permission granted' => [
         ['use editorial transition foo_to_foo'],
         'foo',
-        ['You do not have access to transition from <em class="placeholder">Draft</em> to <em class="placeholder">Foo</em>'],
+        ['You do not have access to transition from Draft to Foo'],
       ],
     ];
   }
diff --git a/core/modules/content_translation/tests/src/Kernel/ContentTranslationHandlerTest.php b/core/modules/content_translation/tests/src/Kernel/ContentTranslationHandlerTest.php
index 22c411127f..55428a40ee 100644
--- a/core/modules/content_translation/tests/src/Kernel/ContentTranslationHandlerTest.php
+++ b/core/modules/content_translation/tests/src/Kernel/ContentTranslationHandlerTest.php
@@ -139,7 +139,7 @@ public function testEntityFormSharedElements(array $element, $default_translatio
       $messages = $this->messenger->messagesByType('warning');
       $this->assertCount(1, $messages);
       $expected_message = sprintf('Fields that apply to all languages are hidden to avoid conflicting changes. <a href="%s">Edit them on the original language form</a>.', $entity->toUrl('edit-form')->toString());
-      $this->assertEquals($expected_message, reset($messages));
+      $this->assertSame($expected_message, (string) reset($messages));
     }
   }
 
diff --git a/core/modules/dblog/tests/src/Kernel/Views/ViewsIntegrationTest.php b/core/modules/dblog/tests/src/Kernel/Views/ViewsIntegrationTest.php
index 12ec986813..6ab50e91ec 100644
--- a/core/modules/dblog/tests/src/Kernel/Views/ViewsIntegrationTest.php
+++ b/core/modules/dblog/tests/src/Kernel/Views/ViewsIntegrationTest.php
@@ -70,10 +70,11 @@ public function testMessages() {
       // The 3rd entry contains some unsafe markup that needs to get filtered.
       if ($index == 2) {
         // Make sure that unsafe link differs from the rendered link, so we know
-        // that some filtering actually happened.
-        $this->assertNotEquals($entry['variables']['link'], $link_field);
+        // that some filtering actually happened. We use assertNotSame and cast
+        // values to strings since HTML tags are significant.
+        $this->assertNotSame((string) $entry['variables']['link'], (string) $link_field);
       }
-      $this->assertEquals(Xss::filterAdmin($entry['variables']['link']), $link_field);
+      $this->assertSame(Xss::filterAdmin($entry['variables']['link']), (string) $link_field);
     }
 
     // Disable replacing variables and check that the tokens aren't replaced.
diff --git a/core/modules/field/tests/src/Kernel/EntityReference/EntityReferenceFormatterTest.php b/core/modules/field/tests/src/Kernel/EntityReference/EntityReferenceFormatterTest.php
index cd62a41ece..9614f0de9d 100644
--- a/core/modules/field/tests/src/Kernel/EntityReference/EntityReferenceFormatterTest.php
+++ b/core/modules/field/tests/src/Kernel/EntityReference/EntityReferenceFormatterTest.php
@@ -213,7 +213,7 @@ public function testEntityFormatter() {
           </div>
 ';
     $renderer->renderRoot($build[0]);
-    $this->assertEquals('default | ' . $this->referencedEntity->label() . $expected_rendered_name_field_1 . $expected_rendered_body_field_1, $build[0]['#markup'], sprintf('The markup returned by the %s formatter is correct for an item with a saved entity.', $formatter));
+    $this->assertSame('default | ' . $this->referencedEntity->label() . $expected_rendered_name_field_1 . $expected_rendered_body_field_1, (string) $build[0]['#markup'], sprintf('The markup returned by the %s formatter is correct for an item with a saved entity.', $formatter));
     $expected_cache_tags = Cache::mergeTags(\Drupal::entityTypeManager()->getViewBuilder($this->entityType)->getCacheTags(), $this->referencedEntity->getCacheTags());
     $expected_cache_tags = Cache::mergeTags($expected_cache_tags, FilterFormat::load('full_html')->getCacheTags());
     $this->assertEquals($expected_cache_tags, $build[0]['#cache']['tags'], new FormattableMarkup('The @formatter formatter has the expected cache tags.', ['@formatter' => $formatter]));
@@ -230,7 +230,7 @@ public function testEntityFormatter() {
 ';
 
     $renderer->renderRoot($build[1]);
-    $this->assertEquals('default | ' . $this->unsavedReferencedEntity->label() . $expected_rendered_name_field_2 . $expected_rendered_body_field_2, $build[1]['#markup'], sprintf('The markup returned by the %s formatter is correct for an item with a unsaved entity.', $formatter));
+    $this->assertSame('default | ' . $this->unsavedReferencedEntity->label() . $expected_rendered_name_field_2 . $expected_rendered_body_field_2, (string) $build[1]['#markup'], sprintf('The markup returned by the %s formatter is correct for an item with a unsaved entity.', $formatter));
   }
 
   /**
diff --git a/core/modules/field/tests/src/Kernel/EntityReference/Views/SelectionTest.php b/core/modules/field/tests/src/Kernel/EntityReference/Views/SelectionTest.php
index 2e0b3a1023..ae8d995086 100644
--- a/core/modules/field/tests/src/Kernel/EntityReference/Views/SelectionTest.php
+++ b/core/modules/field/tests/src/Kernel/EntityReference/Views/SelectionTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\field\Kernel\EntityReference\Views;
 
+use Drupal\Component\Render\MarkupInterface;
 use Drupal\Component\Utility\Html;
 use Drupal\field\Entity\FieldConfig;
 use Drupal\KernelTests\KernelTestBase;
@@ -132,7 +133,10 @@ public function testSelectionHandler() {
   public function testAnchorTagStripping() {
     $filtered_rendered_results_formatted = [];
     foreach ($this->selectionHandler->getReferenceableEntities() as $subresults) {
-      $filtered_rendered_results_formatted += $subresults;
+      $subresults_formatted = array_map(function (MarkupInterface $markup): string {
+        return (string) $markup;
+      }, $subresults);
+      $filtered_rendered_results_formatted += $subresults_formatted;
     }
 
     // Note the missing <a> tags.
@@ -142,7 +146,7 @@ public function testAnchorTagStripping() {
       3 => '<span class="views-field views-field-title"><span class="field-content">' . Html::escape($this->nodes[3]->label()) . '</span></span>',
     ];
 
-    $this->assertEquals($expected, $filtered_rendered_results_formatted, 'Anchor tag stripping has failed.');
+    $this->assertSame($expected, $filtered_rendered_results_formatted, 'Anchor tag stripping has failed.');
   }
 
   /**
diff --git a/core/modules/field/tests/src/Kernel/Number/NumberItemTest.php b/core/modules/field/tests/src/Kernel/Number/NumberItemTest.php
index 4b56f1973a..37030b4925 100644
--- a/core/modules/field/tests/src/Kernel/Number/NumberItemTest.php
+++ b/core/modules/field/tests/src/Kernel/Number/NumberItemTest.php
@@ -167,24 +167,24 @@ public function testConstraints($type, $min, $max, $value, $expect_constraints,
    */
   public function dataNumberFieldSettingsProvider() {
     yield ['integer', NULL, NULL, -100, FALSE];
-    yield ['integer', 0, NULL, -100, TRUE, '<em class="placeholder">field_integer</em>: the value may be no less than <em class="placeholder">0</em>.'];
+    yield ['integer', 0, NULL, -100, TRUE, 'field_integer: the value may be no less than 0.'];
     yield ['integer', 10, NULL, 100, FALSE];
-    yield ['integer', 10, NULL, 5, TRUE, '<em class="placeholder">field_integer</em>: the value may be no less than <em class="placeholder">10</em>.'];
-    yield ['integer', 10, 20, 25, TRUE, '<em class="placeholder">field_integer</em>: the value may be no greater than <em class="placeholder">20</em>.'];
+    yield ['integer', 10, NULL, 5, TRUE, 'field_integer: the value may be no less than 10.'];
+    yield ['integer', 10, 20, 25, TRUE, 'field_integer: the value may be no greater than 20.'];
     yield ['integer', 10, 20, 15, FALSE];
 
     yield ['float', NULL, NULL, -100, FALSE];
-    yield ['float', 0.003, NULL, 0.0029, TRUE, '<em class="placeholder">field_float</em>: the value may be no less than <em class="placeholder">0.003</em>.'];
+    yield ['float', 0.003, NULL, 0.0029, TRUE, 'field_float: the value may be no less than 0.003.'];
     yield ['float', 10.05, NULL, 13.4, FALSE];
-    yield ['float', 10, NULL, 9.999, TRUE, '<em class="placeholder">field_float</em>: the value may be no less than <em class="placeholder">10</em>.'];
-    yield ['float', 1, 2, 2.5, TRUE, '<em class="placeholder">field_float</em>: the value may be no greater than <em class="placeholder">2</em>.'];
+    yield ['float', 10, NULL, 9.999, TRUE, 'field_float: the value may be no less than 10.'];
+    yield ['float', 1, 2, 2.5, TRUE, 'field_float: the value may be no greater than 2.'];
     yield ['float', 1, 2, 1.5, FALSE];
 
     yield ['decimal', NULL, NULL, -100, FALSE];
-    yield ['decimal', 0.001, NULL, -0.05, TRUE, '<em class="placeholder">field_decimal</em>: the value may be no less than <em class="placeholder">0.001</em>.'];
+    yield ['decimal', 0.001, NULL, -0.05, TRUE, 'field_decimal: the value may be no less than 0.001.'];
     yield ['decimal', 10.05, NULL, 13.4, FALSE];
-    yield ['decimal', 10, NULL, 9.999, TRUE, '<em class="placeholder">field_decimal</em>: the value may be no less than <em class="placeholder">10</em>.'];
-    yield ['decimal', 1, 2, 2.5, TRUE, '<em class="placeholder">field_decimal</em>: the value may be no greater than <em class="placeholder">2</em>.'];
+    yield ['decimal', 10, NULL, 9.999, TRUE, 'field_decimal: the value may be no less than 10.'];
+    yield ['decimal', 1, 2, 2.5, TRUE, 'field_decimal: the value may be no greater than 2.'];
     yield ['decimal', 1, 2, 1.5, FALSE];
   }
 
diff --git a/core/modules/field/tests/src/Kernel/Views/HandlerFieldFieldTest.php b/core/modules/field/tests/src/Kernel/Views/HandlerFieldFieldTest.php
index 0cdc94f759..7e20a0b764 100644
--- a/core/modules/field/tests/src/Kernel/Views/HandlerFieldFieldTest.php
+++ b/core/modules/field/tests/src/Kernel/Views/HandlerFieldFieldTest.php
@@ -298,7 +298,7 @@ public function doTestMultipleFieldRender() {
       }
 
       // Check that the custom separator is correctly escaped.
-      $this->assertEquals(implode('<h2>test</h2>', $items), $rendered_field);
+      $this->assertSame(implode('<h2>test</h2>', $items), (string) $rendered_field);
     }
   }
 
diff --git a/core/modules/filter/tests/src/Functional/FilterSecurityTest.php b/core/modules/filter/tests/src/Functional/FilterSecurityTest.php
index 4294154b03..0e200f16c6 100644
--- a/core/modules/filter/tests/src/Functional/FilterSecurityTest.php
+++ b/core/modules/filter/tests/src/Functional/FilterSecurityTest.php
@@ -98,8 +98,8 @@ public function testDisableFilterModule() {
   public function testSkipSecurityFilters() {
     $text = "Text with some disallowed tags: <script />, <p><object>unicorn</object></p>, <i><table></i>.";
     $expected_filtered_text = "Text with some disallowed tags: , <p>unicorn</p>, .";
-    $this->assertEquals($expected_filtered_text, check_markup($text, 'filtered_html', '', []), 'Expected filter result.');
-    $this->assertEquals($expected_filtered_text, check_markup($text, 'filtered_html', '', [FilterInterface::TYPE_HTML_RESTRICTOR]), 'Expected filter result, even when trying to disable filters of the FilterInterface::TYPE_HTML_RESTRICTOR type.');
+    $this->assertSame($expected_filtered_text, (string) check_markup($text, 'filtered_html', '', []), 'Expected filter result.');
+    $this->assertSame($expected_filtered_text, (string) check_markup($text, 'filtered_html', '', [FilterInterface::TYPE_HTML_RESTRICTOR]), 'Expected filter result, even when trying to disable filters of the FilterInterface::TYPE_HTML_RESTRICTOR type.');
   }
 
 }
diff --git a/core/modules/filter/tests/src/Kernel/FilterAPITest.php b/core/modules/filter/tests/src/Kernel/FilterAPITest.php
index 3181ba9be7..bbced3761d 100644
--- a/core/modules/filter/tests/src/Kernel/FilterAPITest.php
+++ b/core/modules/filter/tests/src/Kernel/FilterAPITest.php
@@ -71,15 +71,15 @@ public function testCheckMarkupFilterSubset() {
     $expected_filter_text_without_html_generators = "Text with evil content and a URL: https://www.drupal.org!";
 
     $actual_filtered_text = check_markup($text, 'filtered_html', '', []);
-    $this->assertEquals($expected_filtered_text, $actual_filtered_text, 'Expected filter result.');
+    $this->assertSame($expected_filtered_text, (string) $actual_filtered_text, 'Expected filter result.');
     $actual_filtered_text_without_html_generators = check_markup($text, 'filtered_html', '', [FilterInterface::TYPE_MARKUP_LANGUAGE]);
-    $this->assertEquals($expected_filter_text_without_html_generators, $actual_filtered_text_without_html_generators, 'Expected filter result when skipping FilterInterface::TYPE_MARKUP_LANGUAGE filters.');
+    $this->assertSame($expected_filter_text_without_html_generators, (string) $actual_filtered_text_without_html_generators, 'Expected filter result when skipping FilterInterface::TYPE_MARKUP_LANGUAGE filters.');
     // Related to @see FilterSecurityTest.php/testSkipSecurityFilters(), but
     // this check focuses on the ability to filter multiple filter types at once.
     // Drupal core only ships with these two types of filters, so this is the
     // most extensive test possible.
     $actual_filtered_text_without_html_generators = check_markup($text, 'filtered_html', '', [FilterInterface::TYPE_HTML_RESTRICTOR, FilterInterface::TYPE_MARKUP_LANGUAGE]);
-    $this->assertEquals($expected_filter_text_without_html_generators, $actual_filtered_text_without_html_generators, 'Expected filter result when skipping FilterInterface::TYPE_MARKUP_LANGUAGE filters, even when trying to disable filters of the FilterInterface::TYPE_HTML_RESTRICTOR type.');
+    $this->assertSame($expected_filter_text_without_html_generators, (string) $actual_filtered_text_without_html_generators, 'Expected filter result when skipping FilterInterface::TYPE_MARKUP_LANGUAGE filters, even when trying to disable filters of the FilterInterface::TYPE_HTML_RESTRICTOR type.');
   }
 
   /**
@@ -317,7 +317,7 @@ public function testProcessedTextElement() {
     ];
     $this->assertEqualsCanonicalizing($expected_cache_contexts, $build['#cache']['contexts'], 'Expected cache contexts present.');
     $expected_markup = '<p>Hello, world!</p><p>This is a dynamic llama.</p>';
-    $this->assertEquals($expected_markup, $build['#markup'], 'Expected #lazy_builder callback has been applied.');
+    $this->assertSame($expected_markup, (string) $build['#markup'], 'Expected #lazy_builder callback has been applied.');
   }
 
   /**
diff --git a/core/modules/locale/tests/src/Kernel/LocaleStringIsSafeTest.php b/core/modules/locale/tests/src/Kernel/LocaleStringIsSafeTest.php
index 5d0df06da3..c36a154435 100644
--- a/core/modules/locale/tests/src/Kernel/LocaleStringIsSafeTest.php
+++ b/core/modules/locale/tests/src/Kernel/LocaleStringIsSafeTest.php
@@ -78,7 +78,7 @@ public function testLocalizedTokenizedString() {
       $rendered_safe_string = \Drupal::theme()->render('locale_test_tokenized', ['content' => $safe_string]);
       // t() function always marks the string as safe so it won't be escaped,
       // and should be the same as the original.
-      $this->assertEquals($original_string . "\n", $rendered_safe_string, 'Security test ' . $i . ' after translation before token replacement');
+      $this->assertSame($original_string . "\n", (string) $rendered_safe_string, 'Security test ' . $i . ' after translation before token replacement');
 
       // Replace tokens in the safe string to inject it with dangerous content.
       // @see locale_test_tokens().
diff --git a/core/modules/menu_link_content/tests/src/Kernel/MenuLinksTest.php b/core/modules/menu_link_content/tests/src/Kernel/MenuLinksTest.php
index 894bb59993..13da7d23af 100644
--- a/core/modules/menu_link_content/tests/src/Kernel/MenuLinksTest.php
+++ b/core/modules/menu_link_content/tests/src/Kernel/MenuLinksTest.php
@@ -401,7 +401,7 @@ public function testPendingRevisions() {
     $child2_pending_revision->set('parent', $child1->id());
     $violations = $child2_pending_revision->validate();
     $this->assertCount(1, $violations);
-    $this->assertEquals('You can only change the hierarchy for the <em>published</em> version of this menu link.', $violations[0]->getMessage());
+    $this->assertEquals('You can only change the hierarchy for the published version of this menu link.', $violations[0]->getMessage());
     $this->assertEquals('menu_parent', $violations[0]->getPropertyPath());
 
     // Check that changing the weight in a pending revision is not allowed.
@@ -409,7 +409,7 @@ public function testPendingRevisions() {
     $child2_pending_revision->set('weight', 500);
     $violations = $child2_pending_revision->validate();
     $this->assertCount(1, $violations);
-    $this->assertEquals('You can only change the hierarchy for the <em>published</em> version of this menu link.', $violations[0]->getMessage());
+    $this->assertEquals('You can only change the hierarchy for the published version of this menu link.', $violations[0]->getMessage());
     $this->assertEquals('weight', $violations[0]->getPropertyPath());
 
     // Check that changing both the parent and the weight in a pending revision
@@ -419,8 +419,8 @@ public function testPendingRevisions() {
     $child2_pending_revision->set('weight', 500);
     $violations = $child2_pending_revision->validate();
     $this->assertCount(2, $violations);
-    $this->assertEquals('You can only change the hierarchy for the <em>published</em> version of this menu link.', $violations[0]->getMessage());
-    $this->assertEquals('You can only change the hierarchy for the <em>published</em> version of this menu link.', $violations[1]->getMessage());
+    $this->assertEquals('You can only change the hierarchy for the published version of this menu link.', $violations[0]->getMessage());
+    $this->assertEquals('You can only change the hierarchy for the published version of this menu link.', $violations[1]->getMessage());
     $this->assertEquals('menu_parent', $violations[0]->getPropertyPath());
     $this->assertEquals('weight', $violations[1]->getPropertyPath());
 
@@ -430,7 +430,7 @@ public function testPendingRevisions() {
     $root_2_pending_revision->set('parent', $root_1->id());
     $violations = $root_2_pending_revision->validate();
     $this->assertCount(1, $violations);
-    $this->assertEquals('You can only change the hierarchy for the <em>published</em> version of this menu link.', $violations[0]->getMessage());
+    $this->assertEquals('You can only change the hierarchy for the published version of this menu link.', $violations[0]->getMessage());
     $this->assertEquals('menu_parent', $violations[0]->getPropertyPath());
   }
 
diff --git a/core/modules/node/tests/src/Kernel/NodeTokenReplaceTest.php b/core/modules/node/tests/src/Kernel/NodeTokenReplaceTest.php
index 61b8898345..4f10dce724 100644
--- a/core/modules/node/tests/src/Kernel/NodeTokenReplaceTest.php
+++ b/core/modules/node/tests/src/Kernel/NodeTokenReplaceTest.php
@@ -2,7 +2,6 @@
 
 namespace Drupal\Tests\node\Kernel;
 
-use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\node\Entity\Node;
@@ -104,7 +103,7 @@ public function testNodeTokenReplacement() {
     foreach ($tests as $input => $expected) {
       $bubbleable_metadata = new BubbleableMetadata();
       $output = $this->tokenService->replace($input, ['node' => $node], ['langcode' => $this->interfaceLanguage->getId()], $bubbleable_metadata);
-      $this->assertEquals($expected, $output, new FormattableMarkup('Node token %token replaced.', ['%token' => $input]));
+      $this->assertSame((string) $expected, (string) $output, "Failed test case: {$input}");
       $this->assertEquals($metadata_tests[$input], $bubbleable_metadata);
     }
 
@@ -126,7 +125,7 @@ public function testNodeTokenReplacement() {
 
     foreach ($tests as $input => $expected) {
       $output = $this->tokenService->replace($input, ['node' => $node], ['language' => $this->interfaceLanguage]);
-      $this->assertEquals($expected, $output, new FormattableMarkup('Node token %token replaced for node without a summary.', ['%token' => $input]));
+      $this->assertSame((string) $expected, (string) $output, "Failed test case: {$input}");
     }
   }
 
diff --git a/core/modules/node/tests/src/Kernel/NodeValidationTest.php b/core/modules/node/tests/src/Kernel/NodeValidationTest.php
index 43a87ebbe1..39994b85a2 100644
--- a/core/modules/node/tests/src/Kernel/NodeValidationTest.php
+++ b/core/modules/node/tests/src/Kernel/NodeValidationTest.php
@@ -44,7 +44,7 @@ public function testValidation() {
     $violations = $node->validate();
     $this->assertCount(1, $violations, 'Violation found when title is too long.');
     $this->assertEquals('title.0.value', $violations[0]->getPropertyPath());
-    $this->assertEquals('<em class="placeholder">Title</em>: may not be longer than 255 characters.', $violations[0]->getMessage());
+    $this->assertEquals('Title: may not be longer than 255 characters.', $violations[0]->getMessage());
 
     $node->set('title', NULL);
     $violations = $node->validate();
diff --git a/core/modules/rest/tests/src/Functional/Views/StyleSerializerTest.php b/core/modules/rest/tests/src/Functional/Views/StyleSerializerTest.php
index 7360f4d865..14a581562e 100644
--- a/core/modules/rest/tests/src/Functional/Views/StyleSerializerTest.php
+++ b/core/modules/rest/tests/src/Functional/Views/StyleSerializerTest.php
@@ -663,7 +663,7 @@ public function testFieldapiField() {
 
     $result = Json::decode($this->drupalGet('test/serialize/node-field', ['query' => ['_format' => 'json']]));
     $this->assertEquals($node->id(), $result[0]['nid']);
-    $this->assertEquals($node->body->processed, $result[0]['body']);
+    $this->assertEquals((string) $node->body->processed, (string) $result[0]['body']);
 
     // Make sure that serialized fields are not exposed to XSS.
     $node = $this->drupalCreateNode();
@@ -807,19 +807,19 @@ public function testRestViewExposedFilter() {
     $expected = [
       0 => [
         'nid' => $node0->id(),
-        'body' => $node0->body->processed,
+        'body' => (string) $node0->body->processed,
       ],
       1 => [
         'nid' => $node1->id(),
-        'body' => $node1->body->processed,
+        'body' => (string) $node1->body->processed,
       ],
       2 => [
         'nid' => $node2->id(),
-        'body' => $node2->body->processed,
+        'body' => (string) $node2->body->processed,
       ],
     ];
 
-    $this->assertEquals($expected, $result, 'Querying a view with no exposed filter returns all nodes.');
+    $this->assertSame($expected, $result, 'Querying a view with no exposed filter returns all nodes.');
 
     // Test that title starts with 'Node 11' query finds 2 of the 3 nodes.
     $result = Json::decode($this->drupalGet('test/serialize/node-exposed-filter', ['query' => ['_format' => 'json', 'title' => 'Node 11']]));
@@ -827,11 +827,11 @@ public function testRestViewExposedFilter() {
     $expected = [
       0 => [
         'nid' => $node1->id(),
-        'body' => $node1->body->processed,
+        'body' => (string) $node1->body->processed,
       ],
       1 => [
         'nid' => $node2->id(),
-        'body' => $node2->body->processed,
+        'body' => (string) $node2->body->processed,
       ],
     ];
 
@@ -844,7 +844,7 @@ public function testRestViewExposedFilter() {
       'url',
     ];
 
-    $this->assertEquals($expected, $result, 'Querying a view with a starts with exposed filter on the title returns nodes whose title starts with value provided.');
+    $this->assertSame($expected, $result, 'Querying a view with a starts with exposed filter on the title returns nodes whose title starts with value provided.');
     $this->assertCacheContexts($cache_contexts);
   }
 
diff --git a/core/modules/system/tests/src/Functional/Ajax/OffCanvasDialogTest.php b/core/modules/system/tests/src/Functional/Ajax/OffCanvasDialogTest.php
index 6317b1a04d..a913275870 100644
--- a/core/modules/system/tests/src/Functional/Ajax/OffCanvasDialogTest.php
+++ b/core/modules/system/tests/src/Functional/Ajax/OffCanvasDialogTest.php
@@ -42,7 +42,7 @@ public function testDialog($position) {
       'command' => 'openDialog',
       'selector' => '#drupal-off-canvas',
       'settings' => NULL,
-      'data' => $dialog_contents,
+      'data' => (string) $dialog_contents,
       'dialogOptions' =>
         [
           'title' => 'AJAX Dialog & contents',
@@ -65,7 +65,8 @@ public function testDialog($position) {
     $wrapper_format = $position && ($position !== 'side') ? 'drupal_dialog.off_canvas_' . $position : 'drupal_dialog.off_canvas';
     $ajax_result = $this->drupalGet('ajax-test/dialog-contents', ['query' => [MainContentViewSubscriber::WRAPPER_FORMAT => $wrapper_format]]);
     $ajax_result = Json::decode($ajax_result);
-    $this->assertEquals($off_canvas_expected_response, $ajax_result[4], 'off-canvas dialog JSON response matches.');
+
+    $this->assertSame($off_canvas_expected_response, $ajax_result[4], 'off-canvas dialog JSON response matches.');
   }
 
   /**
diff --git a/core/modules/system/tests/src/Kernel/Theme/TwigIncludeTest.php b/core/modules/system/tests/src/Kernel/Theme/TwigIncludeTest.php
index c97e606ad1..78298c5044 100644
--- a/core/modules/system/tests/src/Kernel/Theme/TwigIncludeTest.php
+++ b/core/modules/system/tests/src/Kernel/Theme/TwigIncludeTest.php
@@ -39,7 +39,7 @@ public function testTemplateInclusion(): void {
       '#type' => 'inline_template',
       '#template' => "{% include '@system/container.html.twig' %}",
     ];
-    $this->assertEquals("<div></div>\n", $renderer->renderRoot($element));
+    $this->assertSame("<div></div>\n", (string) $renderer->renderRoot($element));
 
     // Test that SQL files cannot be included in Twig templates by default.
     $element = [];
diff --git a/core/modules/taxonomy/tests/src/Functional/TermTest.php b/core/modules/taxonomy/tests/src/Functional/TermTest.php
index a1e13c16b2..98fa1b65e5 100644
--- a/core/modules/taxonomy/tests/src/Functional/TermTest.php
+++ b/core/modules/taxonomy/tests/src/Functional/TermTest.php
@@ -405,7 +405,7 @@ public function testTermInterface() {
     $value = $this->randomMachineName();
     $term->setDescription($value);
     $term->save();
-    $this->assertEquals("<p>{$value}</p>\n", $term->description->processed);
+    $this->assertSame("<p>{$value}</p>\n", (string) $term->description->processed);
 
     // Check that the term feed page is working.
     $this->drupalGet('taxonomy/term/' . $term->id() . '/feed');
diff --git a/core/modules/taxonomy/tests/src/Functional/TokenReplaceTest.php b/core/modules/taxonomy/tests/src/Functional/TokenReplaceTest.php
index 43105bd1f8..383853ab28 100644
--- a/core/modules/taxonomy/tests/src/Functional/TokenReplaceTest.php
+++ b/core/modules/taxonomy/tests/src/Functional/TokenReplaceTest.php
@@ -2,7 +2,6 @@
 
 namespace Drupal\Tests\taxonomy\Functional;
 
-use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Render\BubbleableMetadata;
 
@@ -119,7 +118,7 @@ public function testTaxonomyTokenReplacement() {
     foreach ($tests as $input => $expected) {
       $bubbleable_metadata = new BubbleableMetadata();
       $output = $token_service->replace($input, ['term' => $term1], ['langcode' => $language_interface->getId()], $bubbleable_metadata);
-      $this->assertEquals($expected, $output, new FormattableMarkup('Sanitized taxonomy term token %token replaced.', ['%token' => $input]));
+      $this->assertSame((string) $expected, (string) $output, "Failed test case: {$input}");
       $this->assertEquals($metadata_tests[$input], $bubbleable_metadata);
     }
 
@@ -140,7 +139,7 @@ public function testTaxonomyTokenReplacement() {
 
     foreach ($tests as $input => $expected) {
       $output = $token_service->replace($input, ['term' => $term2], ['langcode' => $language_interface->getId()]);
-      $this->assertEquals($expected, $output, new FormattableMarkup('Sanitized taxonomy term token %token replaced.', ['%token' => $input]));
+      $this->assertSame((string) $expected, (string) $output, "Failed test case: {$input}");
     }
 
     // Generate and test sanitized tokens.
@@ -156,7 +155,7 @@ public function testTaxonomyTokenReplacement() {
 
     foreach ($tests as $input => $expected) {
       $output = $token_service->replace($input, ['vocabulary' => $this->vocabulary], ['langcode' => $language_interface->getId()]);
-      $this->assertEquals($expected, $output, new FormattableMarkup('Sanitized taxonomy vocabulary token %token replaced.', ['%token' => $input]));
+      $this->assertSame((string) $expected, (string) $output, "Failed test case: {$input}");
     }
   }
 
diff --git a/core/modules/taxonomy/tests/src/Kernel/TermHierarchyValidationTest.php b/core/modules/taxonomy/tests/src/Kernel/TermHierarchyValidationTest.php
index 2523bc9d00..8ff253d18e 100644
--- a/core/modules/taxonomy/tests/src/Kernel/TermHierarchyValidationTest.php
+++ b/core/modules/taxonomy/tests/src/Kernel/TermHierarchyValidationTest.php
@@ -77,7 +77,7 @@ public function testTermHierarchyValidation() {
     $this->assertEmpty($violations);
     $child1->save();
 
-    $validation_message = 'You can only change the hierarchy for the <em>published</em> version of this term.';
+    $validation_message = 'You can only change the hierarchy for the published version of this term.';
 
     // Add a pending revision without changing the term parent.
     $pending_name = $this->randomMachineName();
diff --git a/core/modules/text/tests/src/Kernel/TextFormatterTest.php b/core/modules/text/tests/src/Kernel/TextFormatterTest.php
index 977953e0bc..d2baebafce 100644
--- a/core/modules/text/tests/src/Kernel/TextFormatterTest.php
+++ b/core/modules/text/tests/src/Kernel/TextFormatterTest.php
@@ -91,7 +91,7 @@ public function testFormatters() {
       // Verify the text field formatter's render array.
       $build = $entity->get('formatted_text')->view(['type' => $formatter]);
       \Drupal::service('renderer')->renderRoot($build[0]);
-      $this->assertEquals("<p>Hello, world!</p>\n", $build[0]['#markup']);
+      $this->assertSame("<p>Hello, world!</p>\n", (string) $build[0]['#markup']);
       $this->assertEquals(FilterFormat::load('my_text_format')->getCacheTags(), $build[0]['#cache']['tags'], new FormattableMarkup('The @formatter formatter has the expected cache tags when formatting a formatted text field.', ['@formatter' => $formatter]));
     }
   }
diff --git a/core/modules/text/tests/src/Kernel/TextWithSummaryItemTest.php b/core/modules/text/tests/src/Kernel/TextWithSummaryItemTest.php
index 6630330bdb..5676ba47e4 100644
--- a/core/modules/text/tests/src/Kernel/TextWithSummaryItemTest.php
+++ b/core/modules/text/tests/src/Kernel/TextWithSummaryItemTest.php
@@ -79,13 +79,13 @@ public function testCrudAndUpdate() {
     $this->assertNull($entity->summary_field->format);
     // Even if no format is given, if text processing is enabled, the default
     // format is used.
-    $this->assertEquals("<p>{$value}</p>\n", $entity->summary_field->processed);
-    $this->assertEquals("<p>{$summary}</p>\n", $entity->summary_field->summary_processed);
+    $this->assertSame("<p>{$value}</p>\n", (string) $entity->summary_field->processed);
+    $this->assertSame("<p>{$summary}</p>\n", (string) $entity->summary_field->summary_processed);
 
     // Change the format, this should update the processed properties.
     $entity->summary_field->format = 'no_filters';
-    $this->assertEquals($value, $entity->summary_field->processed);
-    $this->assertEquals($summary, $entity->summary_field->summary_processed);
+    $this->assertSame($value, (string) $entity->summary_field->processed);
+    $this->assertSame($summary, (string) $entity->summary_field->summary_processed);
 
     // Test the generateSampleValue() method.
     $entity = $this->container->get('entity_type.manager')
diff --git a/core/modules/user/tests/src/Functional/UserTokenReplaceTest.php b/core/modules/user/tests/src/Functional/UserTokenReplaceTest.php
index 4ea4a29c89..2649f7a8f0 100644
--- a/core/modules/user/tests/src/Functional/UserTokenReplaceTest.php
+++ b/core/modules/user/tests/src/Functional/UserTokenReplaceTest.php
@@ -3,7 +3,6 @@
 namespace Drupal\Tests\user\Functional;
 
 use Drupal\Core\Url;
-use Drupal\Component\Render\FormattableMarkup;
 use Drupal\Core\Render\BubbleableMetadata;
 use Drupal\language\Entity\ConfigurableLanguage;
 use Drupal\Tests\BrowserTestBase;
@@ -111,7 +110,7 @@ public function testUserTokenReplacement() {
     foreach ($tests as $input => $expected) {
       $bubbleable_metadata = new BubbleableMetadata();
       $output = $token_service->replace($input, ['user' => $account], ['langcode' => $language_interface->getId()], $bubbleable_metadata);
-      $this->assertEquals($expected, $output, new FormattableMarkup('User token %token replaced.', ['%token' => $input]));
+      $this->assertSame((string) $expected, (string) $output, "Failed test case: {$input}");
       $this->assertEquals($metadata_tests[$input], $bubbleable_metadata);
     }
 
@@ -131,7 +130,7 @@ public function testUserTokenReplacement() {
     foreach ($tests as $input => $expected) {
       $bubbleable_metadata = new BubbleableMetadata();
       $output = $token_service->replace($input, ['user' => $anonymous_user], ['langcode' => $language_interface->getId()], $bubbleable_metadata);
-      $this->assertEquals($expected, $output, new FormattableMarkup('Sanitized user token %token replaced.', ['%token' => $input]));
+      $this->assertSame((string) $expected, (string) $output, "Failed test case: {$input}");
       $this->assertEquals($metadata_tests[$input], $bubbleable_metadata);
     }
 
@@ -171,7 +170,7 @@ public function testUserTokenReplacement() {
     $input = '[user:display-name] [current-user:display-name]';
     $expected = "<em>{$user1->id()}</em> <em>{$user2->id()}</em>";
     $output = $token_service->replace($input, ['user' => $user1]);
-    $this->assertEquals($expected, $output, new FormattableMarkup('User token %token does not escape safe markup.', ['%token' => 'display-name']));
+    $this->assertSame($expected, (string) $output);
   }
 
 }
diff --git a/core/modules/views/tests/src/Kernel/Handler/FieldCustomTest.php b/core/modules/views/tests/src/Kernel/Handler/FieldCustomTest.php
index 2d654592e4..682d9dafa8 100644
--- a/core/modules/views/tests/src/Kernel/Handler/FieldCustomTest.php
+++ b/core/modules/views/tests/src/Kernel/Handler/FieldCustomTest.php
@@ -52,7 +52,7 @@ public function testFieldCustom() {
 
     $this->executeView($view);
 
-    $this->assertEquals($random, $view->style_plugin->getField(0, 'name'));
+    $this->assertSame($random, (string) $view->style_plugin->getField(0, 'name'));
   }
 
   /**
diff --git a/core/modules/views/tests/src/Kernel/Handler/FieldEntityLinkTest.php b/core/modules/views/tests/src/Kernel/Handler/FieldEntityLinkTest.php
index 7fa2a6a667..51ff188005 100644
--- a/core/modules/views/tests/src/Kernel/Handler/FieldEntityLinkTest.php
+++ b/core/modules/views/tests/src/Kernel/Handler/FieldEntityLinkTest.php
@@ -143,11 +143,11 @@ protected function doTestEntityLink(AccountInterface $account, $expected_results
             $expected_link = '<a href="' . $path . $destination . '" hreflang="en">' . $info[$template]['label'] . '</a>';
           }
           else {
-            $expected_link = $path;
+            $expected_link = (string) $path;
           }
         }
         $link = $view->style_plugin->getField($index, $info[$template]['field_id']);
-        $this->assertEquals($expected_link, $link);
+        $this->assertSame($expected_link, (string) $link);
       }
       $index++;
     }
diff --git a/core/modules/views/tests/src/Kernel/Handler/FieldKernelTest.php b/core/modules/views/tests/src/Kernel/Handler/FieldKernelTest.php
index fa37204e0a..7dda16f0ac 100644
--- a/core/modules/views/tests/src/Kernel/Handler/FieldKernelTest.php
+++ b/core/modules/views/tests/src/Kernel/Handler/FieldKernelTest.php
@@ -333,7 +333,7 @@ public function testFieldTokens() {
     $output = $renderer->executeInRenderContext(new RenderContext(), function () use ($job_field, $row) {
       return $job_field->advancedRender($row);
     });
-    $this->assertEquals('<h1>&lt;span&gt;' . $random_text . '&lt;/span&gt;</h1>', $output, 'Valid tags are allowed in rewrite templates and token replacements.');
+    $this->assertSame('<h1>&lt;span&gt;' . $random_text . '&lt;/span&gt;</h1>', (string) $output, 'Valid tags are allowed in rewrite templates and token replacements.');
 
     // Verify <script> tags are correctly removed from rewritten text.
     $rewrite_template = '<script>alert("malicious");</script>';
diff --git a/core/modules/views/tests/src/Kernel/Handler/SortRandomTest.php b/core/modules/views/tests/src/Kernel/Handler/SortRandomTest.php
index a1ad7d31d9..235beb068a 100644
--- a/core/modules/views/tests/src/Kernel/Handler/SortRandomTest.php
+++ b/core/modules/views/tests/src/Kernel/Handler/SortRandomTest.php
@@ -133,7 +133,9 @@ public function testRandomOrderingWithRenderCaching() {
     $result2 = $renderer->renderPlain($build);
 
     // Ensure that the random ordering works and don't produce the same result.
-    $this->assertNotEquals($result, $result2);
+    // We use assertNotSame and cast values to strings since HTML tags are
+    // significant.
+    $this->assertNotSame((string) $result, (string) $result2);
   }
 
 }
diff --git a/core/modules/views/tests/src/Kernel/Plugin/RowRenderCacheTest.php b/core/modules/views/tests/src/Kernel/Plugin/RowRenderCacheTest.php
index 6523c40cbc..2eac087cdf 100644
--- a/core/modules/views/tests/src/Kernel/Plugin/RowRenderCacheTest.php
+++ b/core/modules/views/tests/src/Kernel/Plugin/RowRenderCacheTest.php
@@ -165,26 +165,26 @@ protected function doTestRenderedOutput(AccountInterface $account, $check_cache
       $counter = $index + 1;
       $expected = "$nid: $counter (just in case: $nid)";
       $counter_output = $view->style_plugin->getField($index, 'counter');
-      $this->assertEquals($expected, $counter_output);
+      $this->assertSame($expected, (string) $counter_output);
 
       $node_url = $node->toUrl()->toString();
       $expected = "<a href=\"$node_url\"><span class=\"da-title\">{$node->label()}</span> <span class=\"counter\">$counter_output</span></a>";
       $output = $view->style_plugin->getField($index, 'title');
-      $this->assertEquals($expected, $output);
+      $this->assertSame($expected, (string) $output);
 
       $expected = $access ? "<a href=\"$node_url/edit?destination=/\" hreflang=\"en\">edit</a>" : "";
       $output = $view->style_plugin->getField($index, 'edit_node');
-      $this->assertEquals($expected, $output);
+      $this->assertSame($expected, (string) $output);
 
       $expected = $access ? "<a href=\"$node_url/delete?destination=/\" hreflang=\"en\">delete</a>" : "";
       $output = $view->style_plugin->getField($index, 'delete_node');
-      $this->assertEquals($expected, $output);
+      $this->assertSame($expected, (string) $output);
       $expected = $access ? '  <div class="dropbutton-wrapper"><div class="dropbutton-widget"><ul class="dropbutton">' .
         '<li><a href="' . $node_url . '/edit?destination=/" hreflang="en">Edit</a></li>' .
         '<li><a href="' . $node_url . '/delete?destination=/" hreflang="en">Delete</a></li>' .
         '</ul></div></div>' : '';
       $output = $view->style_plugin->getField($index, 'operations');
-      $this->assertEquals($expected, $output);
+      $this->assertSame($expected, (string) $output);
 
       if ($check_cache) {
         $keys = $cache_plugin->getRowCacheKeys($view->result[$index]);
diff --git a/core/modules/workspaces/tests/src/Functional/WorkspaceConcurrentEditingTest.php b/core/modules/workspaces/tests/src/Functional/WorkspaceConcurrentEditingTest.php
index d6d2fd2b39..3e4fce715b 100644
--- a/core/modules/workspaces/tests/src/Functional/WorkspaceConcurrentEditingTest.php
+++ b/core/modules/workspaces/tests/src/Functional/WorkspaceConcurrentEditingTest.php
@@ -74,7 +74,7 @@ public function testConcurrentEditing() {
     // Check that the node fails validation for API calls.
     $violations = $test_node->validate();
     $this->assertCount(1, $violations);
-    $this->assertEquals('The content is being edited in the <em class="placeholder">Vultures</em> workspace. As a result, your changes cannot be saved.', $violations->get(0)->getMessage());
+    $this->assertEquals('The content is being edited in the Vultures workspace. As a result, your changes cannot be saved.', $violations->get(0)->getMessage());
 
     // Switch to the Live version of the site and check that the user still can
     // not edit the node.
@@ -87,7 +87,7 @@ public function testConcurrentEditing() {
     // Check that the node fails validation for API calls.
     $violations = $test_node->validate();
     $this->assertCount(1, $violations);
-    $this->assertEquals('The content is being edited in the <em class="placeholder">Vultures</em> workspace. As a result, your changes cannot be saved.', $violations->get(0)->getMessage());
+    $this->assertEquals('The content is being edited in the Vultures workspace. As a result, your changes cannot be saved.', $violations->get(0)->getMessage());
 
     // Publish the changes from the 'Vultures' workspace and check that the node
     // can be edited again in other workspaces.
diff --git a/core/modules/workspaces/tests/src/Kernel/EntityReferenceSupportedNewEntitiesConstraintValidatorTest.php b/core/modules/workspaces/tests/src/Kernel/EntityReferenceSupportedNewEntitiesConstraintValidatorTest.php
index 47e2bd6804..9568ec1a07 100644
--- a/core/modules/workspaces/tests/src/Kernel/EntityReferenceSupportedNewEntitiesConstraintValidatorTest.php
+++ b/core/modules/workspaces/tests/src/Kernel/EntityReferenceSupportedNewEntitiesConstraintValidatorTest.php
@@ -84,7 +84,7 @@ public function testNewEntitiesForbiddenInNonDefaultWorkspace() {
     ]);
     $violations = $entity->validate();
     $this->assertCount(1, $violations);
-    $this->assertEquals('<em class="placeholder">Test entity entities</em> can only be created in the default workspace.', $violations[0]->getMessage());
+    $this->assertEquals('Test entity entities can only be created in the default workspace.', $violations[0]->getMessage());
   }
 
 }
diff --git a/core/tests/Drupal/KernelTests/Component/Render/FormattableMarkupKernelTest.php b/core/tests/Drupal/KernelTests/Component/Render/FormattableMarkupKernelTest.php
index 8d04d1d892..ae2b16367a 100644
--- a/core/tests/Drupal/KernelTests/Component/Render/FormattableMarkupKernelTest.php
+++ b/core/tests/Drupal/KernelTests/Component/Render/FormattableMarkupKernelTest.php
@@ -44,7 +44,7 @@ protected static function getFormattableMarkupUriArgs($uri, $options = []) {
    */
   public function testFormattableMarkupUri($string, $uri, $options, $expected) {
     $args = self::getFormattableMarkupUriArgs($uri, $options);
-    $this->assertEquals($expected, new FormattableMarkup($string, $args));
+    $this->assertSame($expected, (string) new FormattableMarkup($string, $args));
   }
 
   /**
diff --git a/core/tests/Drupal/KernelTests/Core/Common/XssUnitTest.php b/core/tests/Drupal/KernelTests/Core/Common/XssUnitTest.php
index c02ff3135c..ff7fba57ff 100644
--- a/core/tests/Drupal/KernelTests/Core/Common/XssUnitTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Common/XssUnitTest.php
@@ -33,11 +33,11 @@ protected function setUp(): void {
    */
   public function testT() {
     $text = t('Simple text');
-    $this->assertEquals('Simple text', $text, 't leaves simple text alone.');
+    $this->assertSame('Simple text', (string) $text, 't leaves simple text alone.');
     $text = t('Escaped text: @value', ['@value' => '<script>']);
-    $this->assertEquals('Escaped text: &lt;script&gt;', $text, 't replaces and escapes string.');
+    $this->assertSame('Escaped text: &lt;script&gt;', (string) $text, 't replaces and escapes string.');
     $text = t('Placeholder text: %value', ['%value' => '<script>']);
-    $this->assertEquals('Placeholder text: <em class="placeholder">&lt;script&gt;</em>', $text, 't replaces, escapes and themes string.');
+    $this->assertSame('Placeholder text: <em class="placeholder">&lt;script&gt;</em>', (string) $text, 't replaces, escapes and themes string.');
   }
 
   /**
diff --git a/core/tests/Drupal/KernelTests/Core/Config/ConfigImporterTest.php b/core/tests/Drupal/KernelTests/Core/Config/ConfigImporterTest.php
index a7ce730c26..83e3b6666e 100644
--- a/core/tests/Drupal/KernelTests/Core/Config/ConfigImporterTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Config/ConfigImporterTest.php
@@ -683,7 +683,7 @@ public function testRequiredModuleValidation() {
     catch (ConfigImporterException $e) {
       $this->assertStringContainsString('There were errors validating the config synchronization.', $e->getMessage());
       $error_log = $config_importer->getErrors();
-      $this->assertEquals('Unable to uninstall the <em class="placeholder">System</em> module because: The System module is required.', $error_log[0]);
+      $this->assertEquals('Unable to uninstall the System module because: The System module is required.', $error_log[0]);
     }
   }
 
@@ -710,7 +710,7 @@ public function testInstallProfile() {
       $this->assertEquals($expected, $e->getMessage(), 'There were errors validating the config synchronization.');
       $error_log = $config_importer->getErrors();
       // Install profiles should not even be scanned at this point.
-      $this->assertEquals(['Unable to install the <em class="placeholder">standard</em> module since it does not exist.'], $error_log);
+      $this->assertEquals(['Unable to install the standard module since it does not exist.'], $error_log);
     }
   }
 
@@ -740,7 +740,7 @@ public function testInstallProfileMisMatch() {
       // does not use an install profile. This situation should be impossible
       // to get in but site's can removed the install profile setting from
       // settings.php so the test is valid.
-      $this->assertEquals(['Cannot change the install profile from <em class="placeholder"></em> to <em class="placeholder">this_will_not_work</em> once Drupal is installed.'], $error_log);
+      $this->assertEquals(['Cannot change the install profile from  to this_will_not_work once Drupal is installed.'], $error_log);
     }
   }
 
diff --git a/core/tests/Drupal/KernelTests/Core/Entity/EntityFieldTest.php b/core/tests/Drupal/KernelTests/Core/Entity/EntityFieldTest.php
index d861b3d1bb..4e7fcbb086 100644
--- a/core/tests/Drupal/KernelTests/Core/Entity/EntityFieldTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Entity/EntityFieldTest.php
@@ -915,14 +915,14 @@ protected function doTestComputedProperties($entity_type) {
     $entity->field_test_text->format = filter_default_format();
 
     $target = "<p>The &lt;strong&gt;text&lt;/strong&gt; text to filter.</p>\n";
-    $this->assertEquals($target, $entity->field_test_text->processed, new FormattableMarkup('%entity_type: Text is processed with the default filter.', ['%entity_type' => $entity_type]));
+    $this->assertSame($target, (string) $entity->field_test_text->processed, new FormattableMarkup('%entity_type: Text is processed with the default filter.', ['%entity_type' => $entity_type]));
 
     // Save and load entity and make sure it still works.
     $entity->save();
     $entity = $this->container->get('entity_type.manager')
       ->getStorage($entity_type)
       ->load($entity->id());
-    $this->assertEquals($target, $entity->field_test_text->processed, new FormattableMarkup('%entity_type: Text is processed with the default filter.', ['%entity_type' => $entity_type]));
+    $this->assertSame($target, (string) $entity->field_test_text->processed, new FormattableMarkup('%entity_type: Text is processed with the default filter.', ['%entity_type' => $entity_type]));
   }
 
   /**
diff --git a/core/tests/Drupal/KernelTests/Core/Entity/EntityHasFieldConstraintValidatorTest.php b/core/tests/Drupal/KernelTests/Core/Entity/EntityHasFieldConstraintValidatorTest.php
index fcccd1e3c2..0e4b063594 100644
--- a/core/tests/Drupal/KernelTests/Core/Entity/EntityHasFieldConstraintValidatorTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Entity/EntityHasFieldConstraintValidatorTest.php
@@ -47,7 +47,7 @@ public function testValidation() {
     // field has been created.
     $violations = $entity->validate();
     $this->assertCount(1, $violations);
-    $this->assertEquals('The entity must have the <em class="placeholder">body</em> field.', $violations[0]->getMessage());
+    $this->assertEquals('The entity must have the body field.', $violations[0]->getMessage());
     $storage->save($entity);
 
     // Create the field.
diff --git a/core/tests/Drupal/KernelTests/Core/Test/Comparator/MarkupInterfaceComparatorTest.php b/core/tests/Drupal/KernelTests/Core/Test/Comparator/MarkupInterfaceComparatorTest.php
index f3008e694e..526ba41fdd 100644
--- a/core/tests/Drupal/KernelTests/Core/Test/Comparator/MarkupInterfaceComparatorTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Test/Comparator/MarkupInterfaceComparatorTest.php
@@ -122,6 +122,76 @@ public function dataSetProvider() {
         FALSE,
         TRUE,
       ],
+      'hmtl string with tags vs hmtl string with tags, equal' => [
+        '<em class="placeholder">For Your Eyes</em> Only',
+        '<em class="placeholder">For Your Eyes</em> Only',
+        FALSE,
+        TRUE,
+      ],
+      'hmtl string with tags vs plain string, not equal' => [
+        '<em class="placeholder">For Your Eyes</em> Only',
+        'For Your Eyes Only',
+        FALSE,
+        FALSE,
+      ],
+      'FormattableMarkup with placeholders vs FormattableMarkup with placeholders, equal' => [
+        new FormattableMarkup('%foryoureyes Only', ['%foryoureyes' => 'For Your Eyes']),
+        new FormattableMarkup('%foryoureyes Only', ['%foryoureyes' => 'For Your Eyes']),
+        TRUE,
+        TRUE,
+      ],
+      'FormattableMarkup with placeholders vs FormattableMarkup with placeholders, not equal' => [
+        new FormattableMarkup('%foryoureyes Only', ['%foryoureyes' => 'For Your Eyes']),
+        new FormattableMarkup('%foryoureyes Too', ['%foryoureyes' => 'For Your Eyes']),
+        TRUE,
+        FALSE,
+      ],
+    ];
+  }
+
+  /**
+   * Provides test data for the comparator - deprecated cases.
+   *
+   * @return array
+   *   Each array entry has:
+   *   - test expected value,
+   *   - test actual value,
+   *   - a bool indicating the expected return value of ::accepts,
+   *   - a value indicating the expected result of ::assertEquals, TRUE if
+   *     comparison should match, FALSE if error, or a class name of an object
+   *     thrown.
+   *   - the expected deprecation message.
+   */
+  public function dataSetProviderDeprecatedCases() {
+    return [
+      'hmtl string with tags vs FormattableMarkup, equal' => [
+        '<em class="placeholder">For Your Eyes</em> Only',
+        new FormattableMarkup('%foryoureyes Only', ['%foryoureyes' => 'For Your Eyes']),
+        TRUE,
+        TRUE,
+        'Using assert[Not]Equals() to compare markup between MarkupInterface objects and plain strings is deprecated in drupal:10.1.0 and will throw an error from drupal:11.0.0. Expected: \'<em class="placeholder">For Your Eyes</em> Only\' - Actual \'<em class="placeholder">For Your Eyes</em> Only\'. Use assert[Not]Same() and cast objects to string instead. See https://www.drupal.org/node/3334057',
+      ],
+      'hmtl string with tags vs FormattableMarkup, not equal' => [
+        '<em class="placeholder">For Your Eyes</em> Too',
+        new FormattableMarkup('%foryoureyes Only', ['%foryoureyes' => 'For Your Eyes']),
+        TRUE,
+        FALSE,
+        'Using assert[Not]Equals() to compare markup between MarkupInterface objects and plain strings is deprecated in drupal:10.1.0 and will throw an error from drupal:11.0.0. Expected: \'<em class="placeholder">For Your Eyes</em> Too\' - Actual \'<em class="placeholder">For Your Eyes</em> Only\'. Use assert[Not]Same() and cast objects to string instead. See https://www.drupal.org/node/3334057',
+      ],
+      'FormattableMarkup vs hmtl string with tags, equal' => [
+        new FormattableMarkup('%foryoureyes Only', ['%foryoureyes' => 'For Your Eyes']),
+        '<em class="placeholder">For Your Eyes</em> Only',
+        TRUE,
+        TRUE,
+        'Using assert[Not]Equals() to compare markup between MarkupInterface objects and plain strings is deprecated in drupal:10.1.0 and will throw an error from drupal:11.0.0. Expected: \'<em class="placeholder">For Your Eyes</em> Only\' - Actual \'<em class="placeholder">For Your Eyes</em> Only\'. Use assert[Not]Same() and cast objects to string instead. See https://www.drupal.org/node/3334057',
+      ],
+      'FormattableMarkup vs hmtl string with tags, not equal' => [
+        new FormattableMarkup('%foryoureyes Only', ['%foryoureyes' => 'For Your Eyes']),
+        '<em class="placeholder">For Your Eyes</em> Too',
+        TRUE,
+        FALSE,
+        'Using assert[Not]Equals() to compare markup between MarkupInterface objects and plain strings is deprecated in drupal:10.1.0 and will throw an error from drupal:11.0.0. Expected: \'<em class="placeholder">For Your Eyes</em> Only\' - Actual \'<em class="placeholder">For Your Eyes</em> Too\'. Use assert[Not]Same() and cast objects to string instead. See https://www.drupal.org/node/3334057',
+      ],
     ];
   }
 
@@ -129,7 +199,7 @@ public function dataSetProvider() {
    * @covers ::accepts
    * @dataProvider dataSetProvider
    */
-  public function testAccepts($expected, $actual, $accepts_result, $equals_result) {
+  public function testAccepts($expected, $actual, bool $accepts_result, $equals_result): void {
     if ($accepts_result) {
       $this->assertTrue($this->comparator->accepts($expected, $actual));
     }
@@ -142,7 +212,36 @@ public function testAccepts($expected, $actual, $accepts_result, $equals_result)
    * @covers ::assertEquals
    * @dataProvider dataSetProvider
    */
-  public function testAssertEquals($expected, $actual, $accepts_result, $equals_result) {
+  public function testAssertEquals($expected, $actual, bool $accepts_result, $equals_result): void {
+    try {
+      $this->assertNull($this->comparator->assertEquals($expected, $actual));
+      $this->assertTrue($equals_result);
+    }
+    catch (\Throwable $e) {
+      if ($equals_result === FALSE) {
+        $this->assertNotNull($e->getMessage());
+      }
+      else {
+        $this->assertInstanceOf($equals_result, $e);
+      }
+    }
+  }
+
+  /**
+   * @covers ::assertEquals
+   * @dataProvider dataSetProviderDeprecatedCases
+   * @group legacy
+   */
+  public function testDeprecatedAssertEquals($expected, $actual, bool $accepts_result, $equals_result, string $deprecation_message): void {
+    if ($accepts_result) {
+      $this->assertTrue($this->comparator->accepts($expected, $actual));
+    }
+    else {
+      $this->assertFalse($this->comparator->accepts($expected, $actual));
+    }
+    if ($deprecation_message) {
+      $this->expectDeprecation($deprecation_message);
+    }
     try {
       $this->assertNull($this->comparator->assertEquals($expected, $actual));
       $this->assertTrue($equals_result);
diff --git a/core/tests/Drupal/KernelTests/Core/Theme/ConfigImportThemeInstallTest.php b/core/tests/Drupal/KernelTests/Core/Theme/ConfigImportThemeInstallTest.php
index dfe1773b38..204ed9f91f 100644
--- a/core/tests/Drupal/KernelTests/Core/Theme/ConfigImportThemeInstallTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Theme/ConfigImportThemeInstallTest.php
@@ -50,7 +50,7 @@ public function testConfigImportWithThemeWithModuleDependencies() {
       $error_message = 'Unable to uninstall the <em class="placeholder">Test Module Required by Theme</em> module because: Required by the theme: Test Theme Depending on Modules.';
       $this->assertStringContainsString($error_message, $e->getMessage(), 'There were errors validating the config synchronization.');
       $error_log = $this->configImporter->getErrors();
-      $this->assertEquals([$error_message], $error_log);
+      $this->assertSame($error_message, (string) $error_log[0]);
     }
 
     // Remove the other module and the theme.
@@ -73,7 +73,7 @@ public function testConfigImportWithThemeWithModuleDependencies() {
       $error_message = 'Unable to install the <em class="placeholder">Test Theme Depending on Modules</em> theme since it requires the <em class="placeholder">Test Module Required by Theme</em> module.';
       $this->assertStringContainsString($error_message, $e->getMessage(), 'There were errors validating the config synchronization.');
       $error_log = $this->configImporter->getErrors();
-      $this->assertEquals([$error_message], $error_log);
+      $this->assertSame($error_message, (string) $error_log[0]);
     }
 
     $extensions['module']['test_module_required_by_theme'] = 0;
diff --git a/core/tests/Drupal/KernelTests/Core/Theme/TwigEnvironmentTest.php b/core/tests/Drupal/KernelTests/Core/Theme/TwigEnvironmentTest.php
index 0e61a08a51..6257dc07cf 100644
--- a/core/tests/Drupal/KernelTests/Core/Theme/TwigEnvironmentTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Theme/TwigEnvironmentTest.php
@@ -46,7 +46,7 @@ public function testInlineTemplate() {
       '#template' => 'test-with-context <label>{{ unsafe_content }}</label>',
       '#context' => ['unsafe_content' => $unsafe_string],
     ];
-    $this->assertEquals('test-with-context <label>' . Html::escape($unsafe_string) . '</label>', $renderer->renderRoot($element));
+    $this->assertSame('test-with-context <label>' . Html::escape($unsafe_string) . '</label>', (string) $renderer->renderRoot($element));
 
     // Enable twig_auto_reload and twig_debug.
     $settings = Settings::getAll();
diff --git a/core/tests/Drupal/KernelTests/Core/Theme/TwigMarkupInterfaceTest.php b/core/tests/Drupal/KernelTests/Core/Theme/TwigMarkupInterfaceTest.php
index 3fd4fc9089..fd0d4da97b 100644
--- a/core/tests/Drupal/KernelTests/Core/Theme/TwigMarkupInterfaceTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Theme/TwigMarkupInterfaceTest.php
@@ -37,7 +37,7 @@ class TwigMarkupInterfaceTest extends KernelTestBase {
    * @dataProvider providerTestMarkupInterfaceEmpty
    */
   public function testMarkupInterfaceEmpty($expected, $variable) {
-    $this->assertEquals($expected, $this->renderObjectWithTwig($variable));
+    $this->assertSame($expected, (string) $this->renderObjectWithTwig($variable));
   }
 
   /**
@@ -71,10 +71,10 @@ public function testEmptyTranslation() {
     new Settings($settings);
 
     $variable = new TranslatableMarkup('test');
-    $this->assertEquals('', $this->renderObjectWithTwig($variable));
+    $this->assertEquals('', (string) $this->renderObjectWithTwig($variable));
 
     $variable = new TranslatableMarkup('test', [], ['langcode' => 'de']);
-    $this->assertEquals('<span>test</span>', $this->renderObjectWithTwig($variable));
+    $this->assertEquals('<span>test</span>', (string) $this->renderObjectWithTwig($variable));
   }
 
   /**
diff --git a/core/tests/Drupal/KernelTests/KernelTestBaseTest.php b/core/tests/Drupal/KernelTests/KernelTestBaseTest.php
index fefc271f91..1c88374494 100644
--- a/core/tests/Drupal/KernelTests/KernelTestBaseTest.php
+++ b/core/tests/Drupal/KernelTests/KernelTestBaseTest.php
@@ -202,8 +202,8 @@ public function testRender() {
     $output = \Drupal::service('renderer')->renderRoot($build);
     $this->assertEquals('core', \Drupal::theme()->getActiveTheme()->getName());
 
-    $this->assertEquals($expected, $build['#markup']);
-    $this->assertEquals($expected, $output);
+    $this->assertSame($expected, (string) $build['#markup']);
+    $this->assertSame($expected, (string) $output);
   }
 
   /**
diff --git a/core/tests/Drupal/TestTools/Comparator/MarkupInterfaceComparator.php b/core/tests/Drupal/TestTools/Comparator/MarkupInterfaceComparator.php
index 71ea80b82d..d88acf244c 100644
--- a/core/tests/Drupal/TestTools/Comparator/MarkupInterfaceComparator.php
+++ b/core/tests/Drupal/TestTools/Comparator/MarkupInterfaceComparator.php
@@ -27,8 +27,15 @@ public function accepts($expected, $actual) {
   public function assertEquals($expected, $actual, $delta = 0.0, $canonicalize = FALSE, $ignoreCase = FALSE) {
     $expected_safe = (string) $expected;
     $actual_safe = (string) $actual;
-    $comparator = $this->factory->getComparatorFor($expected_safe, $actual_safe);
-    $comparator->assertEquals($expected_safe, $actual_safe, $delta, $canonicalize, $ignoreCase);
+    $expected_safe_stripped = strip_tags($expected_safe);
+    $actual_safe_stripped = strip_tags($actual_safe);
+    if (!($expected instanceof MarkupInterface && $actual instanceof MarkupInterface)) {
+      if ($expected_safe !== $expected_safe_stripped && $actual_safe !== $actual_safe_stripped) {
+        @trigger_error("Using assert[Not]Equals() to compare markup between MarkupInterface objects and plain strings is deprecated in drupal:10.1.0 and will throw an error from drupal:11.0.0. Expected: '{$expected_safe}' - Actual '{$actual_safe}'. Use assert[Not]Same() and cast objects to string instead. See https://www.drupal.org/node/3334057", E_USER_DEPRECATED);
+      }
+    }
+    $comparator = $this->factory->getComparatorFor($expected_safe_stripped, $actual_safe_stripped);
+    $comparator->assertEquals($expected_safe_stripped, $actual_safe_stripped, $delta, $canonicalize, $ignoreCase);
   }
 
 }
