diff --git a/core/lib/Drupal/Core/ImageToolkit/ImageToolkitBase.php b/core/lib/Drupal/Core/ImageToolkit/ImageToolkitBase.php
index ce0e283c8e..903f797b18 100644
--- a/core/lib/Drupal/Core/ImageToolkit/ImageToolkitBase.php
+++ b/core/lib/Drupal/Core/ImageToolkit/ImageToolkitBase.php
@@ -119,16 +119,25 @@ protected function getToolkitOperation($operation) {
    * {@inheritdoc}
    */
   public function apply($operation, array $arguments = []) {
+dump([__METHOD__, $operation, $arguments]);
     try {
       // Get the plugin to use for the operation and apply the operation.
       return $this->getToolkitOperation($operation)->apply($arguments);
     }
     catch (PluginNotFoundException $e) {
+dump([__METHOD__, $e]);
       $this->logger->error("The selected image handling toolkit '@toolkit' can not process operation '@operation'.", ['@toolkit' => $this->getPluginId(), '@operation' => $operation]);
       return FALSE;
     }
-    catch (\InvalidArgumentException $e) {
-      $this->logger->warning($e->getMessage(), []);
+    catch (\Throwable $t) {
+dump([__METHOD__, $t]);
+      $this->logger->warning("The image toolkit '@toolkit' failed processing '@operation' for image '@image'. Reported error: @class - @message", [
+        '@toolkit' => $this->getPluginId(),
+        '@operation' => $operation,
+        '@image' => $this->getSource(),
+        '@class' => get_class($t),
+        '@message' => $t->getMessage(),
+      ]);
       return FALSE;
     }
   }
diff --git a/core/lib/Drupal/Core/ImageToolkit/ImageToolkitOperationBase.php b/core/lib/Drupal/Core/ImageToolkit/ImageToolkitOperationBase.php
index dcc3b3d121..95b8a9c4f7 100644
--- a/core/lib/Drupal/Core/ImageToolkit/ImageToolkitOperationBase.php
+++ b/core/lib/Drupal/Core/ImageToolkit/ImageToolkitOperationBase.php
@@ -185,6 +185,9 @@ protected function validateArguments(array $arguments) {
    *
    * @return bool
    *   TRUE if the operation was performed successfully, FALSE otherwise.
+   *
+   * @throws \RuntimeException
+   *   If the operation can not be performed.
    */
   abstract protected function execute(array $arguments);
 
diff --git a/core/modules/system/src/Plugin/ImageToolkit/GDToolkit.php b/core/modules/system/src/Plugin/ImageToolkit/GDToolkit.php
index 2753273a41..2abda1bdbe 100644
--- a/core/modules/system/src/Plugin/ImageToolkit/GDToolkit.php
+++ b/core/modules/system/src/Plugin/ImageToolkit/GDToolkit.php
@@ -180,31 +180,54 @@ protected function load() {
       return FALSE;
     }
 
+    // Invalidate the image object and return if there's no function to load the
+    // image file.
     $function = 'imagecreatefrom' . image_type_to_extension($this->getType(), FALSE);
-    if (function_exists($function) && $resource = $function($this->getSource())) {
-      $this->setResource($resource);
-      if (imageistruecolor($resource)) {
-        return TRUE;
-      }
-      else {
-        // Convert indexed images to truecolor, copying the image to a new
-        // truecolor resource, so that filters work correctly and don't result
-        // in unnecessary dither.
-        $data = [
-          'width' => imagesx($resource),
-          'height' => imagesy($resource),
-          'extension' => image_type_to_extension($this->getType(), FALSE),
-          'transparent_color' => $this->getTransparentColor(),
-          'is_temp' => TRUE,
-        ];
-        if ($this->apply('create_new', $data)) {
-          imagecopy($this->getResource(), $resource, 0, 0, 0, 0, imagesx($resource), imagesy($resource));
-          imagedestroy($resource);
-        }
+    if (!function_exists($function)) {
+      $this->logger->error("The image toolkit '@toolkit' can not process image '@image'.", [
+        '@toolkit' => $this->getPluginId(),
+        '@image' => $this->getSource(),
+      ]);
+      $this->preLoadInfo = NULL;
+      return FALSE;
+    }
+
+    // Invalidate the image object and return if the load fails.
+    try {
+      $resource = $function($this->getSource());
+    }
+    catch (\Throwable $t) {
+      $this->logger->error("The image toolkit '@toolkit' failed loading image '@image'. Reported error: @class - @message", [
+        '@toolkit' => $this->getPluginId(),
+        '@image' => $this->getSource(),
+        '@class' => get_class($t),
+        '@message' => $t->getMessage(),
+      ]);
+      $this->preLoadInfo = NULL;
+      return FALSE;
+    }
+
+    $this->setResource($resource);
+    if (imageistruecolor($resource)) {
+      return TRUE;
+    }
+    else {
+      // Convert indexed images to truecolor, copying the image to a new
+      // truecolor resource, so that filters work correctly and don't result
+      // in unnecessary dither.
+      $data = [
+        'width' => imagesx($resource),
+        'height' => imagesy($resource),
+        'extension' => image_type_to_extension($this->getType(), FALSE),
+        'transparent_color' => $this->getTransparentColor(),
+        'is_temp' => TRUE,
+      ];
+      if ($this->apply('create_new', $data)) {
+        imagecopy($this->getResource(), $resource, 0, 0, 0, 0, imagesx($resource), imagesy($resource));
+        imagedestroy($resource);
       }
-      return (bool) $this->getResource();
     }
-    return FALSE;
+    return (bool) $this->getResource();
   }
 
   /**
@@ -236,7 +259,18 @@ public function save($destination) {
       return FALSE;
     }
     if ($this->getType() == IMAGETYPE_JPEG) {
-      $success = $function($this->getResource(), $destination, $this->configFactory->get('system.image.gd')->get('jpeg_quality'));
+      try {
+        $success = $function($this->getResource(), $destination, $this->configFactory->get('system.image.gd')->get('jpeg_quality'));
+      }
+      catch (\Throwable $t) {
+        $this->logger->error("The image toolkit '@toolkit' failed saving image '@image'. Reported error: @class - @message", [
+          '@toolkit' => $this->getPluginId(),
+          '@image' => $destination,
+          '@class' => get_class($t),
+          '@message' => $t->getMessage(),
+        ]);
+        $success = FALSE;
+      }
     }
     else {
       // Image types that support alpha need to be saved accordingly.
@@ -244,7 +278,18 @@ public function save($destination) {
         imagealphablending($this->getResource(), FALSE);
         imagesavealpha($this->getResource(), TRUE);
       }
-      $success = $function($this->getResource(), $destination);
+      try {
+        $success = $function($this->getResource(), $destination);
+      }
+      catch (\Throwable $t) {
+        $this->logger->error("The image toolkit '@toolkit' failed saving image '@image'. Reported error: @class - @message", [
+          '@toolkit' => $this->getPluginId(),
+          '@image' => $destination,
+          '@class' => get_class($t),
+          '@message' => $t->getMessage(),
+        ]);
+        $success = FALSE;
+      }
     }
     // Move temporary local file to remote destination.
     if (isset($permanent_destination) && $success) {
diff --git a/core/modules/system/tests/modules/image_test/src/Plugin/ImageToolkit/Operation/test/Failing.php b/core/modules/system/tests/modules/image_test/src/Plugin/ImageToolkit/Operation/test/Failing.php
new file mode 100644
index 0000000000..eb37d9f07d
--- /dev/null
+++ b/core/modules/system/tests/modules/image_test/src/Plugin/ImageToolkit/Operation/test/Failing.php
@@ -0,0 +1,25 @@
+<?php
+
+namespace Drupal\image_test\Plugin\ImageToolkit\Operation\test;
+
+/**
+ * An image toolkit operation that throws a \RuntimeException.
+ *
+ * @ImageToolkitOperation(
+ *   id = "failing",
+ *   toolkit = "test",
+ *   operation = "failing",
+ *   label = @Translation("An image toolkit operation that throws a \\RuntimeException"),
+ *   description = @Translation("An image toolkit operation that throws a \\RuntimeException.")
+ * )
+ */
+class Failing extends OperationBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function execute(array $arguments) {
+    throw new \RuntimeException('Ahem, this image operation failed');
+  }
+
+}
diff --git a/core/modules/system/tests/modules/image_test/src/Plugin/ImageToolkit/TestToolkit.php b/core/modules/system/tests/modules/image_test/src/Plugin/ImageToolkit/TestToolkit.php
index eb38ec0656..09600e5734 100644
--- a/core/modules/system/tests/modules/image_test/src/Plugin/ImageToolkit/TestToolkit.php
+++ b/core/modules/system/tests/modules/image_test/src/Plugin/ImageToolkit/TestToolkit.php
@@ -258,7 +258,7 @@ protected static function supportedTypes() {
    */
   public function apply($operation, array $arguments = []) {
     $this->logCall('apply', func_get_args());
-    return TRUE;
+    return parent::apply($operation, $arguments);
   }
 
 }
diff --git a/core/tests/Drupal/KernelTests/Core/Image/ToolkitTest.php b/core/tests/Drupal/KernelTests/Core/Image/ToolkitTest.php
index 03c85052c7..a78647ff9a 100644
--- a/core/tests/Drupal/KernelTests/Core/Image/ToolkitTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Image/ToolkitTest.php
@@ -128,4 +128,17 @@ public function testDerivative() {
     $this->assertEquals('bar', $invert->getPluginId());
   }
 
+  /**
+   * Tests calling a failing image operation plugin.
+   */
+  public function testFailingOperation(): void {
+    $this->assertFalse($this->image->apply('failing'));
+
+    // Check that apply was called and with the correct parameters.
+    $this->assertToolkitOperationsCalled(['apply']);
+    $calls = $this->imageTestGetAllCalls();
+    $this->assertEquals('failing', $calls['apply'][0][0]);
+    $this->assertSame([], $calls['apply'][0][1]);
+  }
+
 }
