diff --git a/core/modules/views/src/Plugin/views/field/EntityField.php b/core/modules/views/src/Plugin/views/field/EntityField.php
index 2c1d76ce44..310fc02aed 100644
--- a/core/modules/views/src/Plugin/views/field/EntityField.php
+++ b/core/modules/views/src/Plugin/views/field/EntityField.php
@@ -913,7 +913,7 @@ protected function createEntityForGroupBy(EntityInterface $entity, ResultRow $ro
       // affect it. Other side effects could happen similarly.
       $data = FALSE;
       foreach ($this->group_fields as $field_name => $column) {
-        if (property_exists($row, $this->aliases[$column])) {
+        if ($row->hasColumn($this->aliases[$column])) {
           $base_value[$field_name] = $row->{$this->aliases[$column]};
           if (isset($base_value[$field_name])) {
             $data = TRUE;
diff --git a/core/modules/views/src/Plugin/views/query/Sql.php b/core/modules/views/src/Plugin/views/query/Sql.php
index 14b335b63f..4f4cf9b936 100644
--- a/core/modules/views/src/Plugin/views/query/Sql.php
+++ b/core/modules/views/src/Plugin/views/query/Sql.php
@@ -1530,13 +1530,17 @@ public function execute(ViewExecutable $view) {
         }
 
         $result = $query->execute();
-        $result->setFetchMode(\PDO::FETCH_CLASS, 'Drupal\views\ResultRow');
+        $result->setFetchMode(\PDO::FETCH_ASSOC);
 
         // Setup the result row objects.
-        $view->result = iterator_to_array($result);
-        array_walk($view->result, function (ResultRow $row, $index) {
-          $row->index = $index;
-        });
+        $i = 0;
+        $view->result = [];
+        foreach ($result as $rowData) {
+          $view->result[] = new ResultRow([
+            'data' => $rowData,
+            'index' => $i++,
+          ]);
+        }
 
         $view->pager->postExecute($view->result);
         $view->pager->updatePageInfo();
diff --git a/core/modules/views/src/ResultRow.php b/core/modules/views/src/ResultRow.php
index 2399f69983..bf5839dc2e 100644
--- a/core/modules/views/src/ResultRow.php
+++ b/core/modules/views/src/ResultRow.php
@@ -5,9 +5,13 @@
 /**
  * A class representing a view result row.
  */
-#[\AllowDynamicProperties]
 class ResultRow {
 
+  /**
+   * Raw row data.
+   */
+  protected array $data;
+
   /**
    * The entity for this result.
    *
@@ -38,11 +42,31 @@ class ResultRow {
    *   (optional) An array of values to add as properties on the object.
    */
   public function __construct(array $values = []) {
+    if (!isset($values['data'])) {
+      $this->data = [];
+    }
+    else {
+      $this->data = $values['data'];
+      unset($values['data']);
+    }
     foreach ($values as $key => $value) {
       $this->{$key} = $value;
     }
   }
 
+  /**
+   * Checks if a named column is in the result row.
+   *
+   * @param string $name
+   *   The name of the column to check existence of.
+   *
+   * @return bool
+   *   TRUE if the result row contains a column of the given name.
+   */
+  public function hasColumn(string $name): bool {
+    return array_key_exists($name, $this->data);
+  }
+
   /**
    * Resets the _entity and _relationship_entities properties.
    */
@@ -51,4 +75,35 @@ public function resetEntityData() {
     $this->_relationship_entities = [];
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function __get(string $name): mixed {
+    if (array_key_exists($name, $this->data)) {
+      return $this->data[$name];
+    }
+    throw new \UnexpectedValueException("Column '{$name}' does not exist");
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function __isset(string $name): bool {
+    return isset($this->data[$name]);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function __set(string $name, mixed $value): void {
+    $this->data[$name] = $value;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function __unset($name): void {
+    unset($this->data[$name]);
+  }
+
 }
diff --git a/core/modules/views/src/Tests/ViewResultAssertionTrait.php b/core/modules/views/src/Tests/ViewResultAssertionTrait.php
index a98c18e647..b2cbbce3c9 100644
--- a/core/modules/views/src/Tests/ViewResultAssertionTrait.php
+++ b/core/modules/views/src/Tests/ViewResultAssertionTrait.php
@@ -77,7 +77,7 @@ protected function assertIdenticalResultsetHelper($view, $expected_result, $colu
     foreach ($view->result as $key => $value) {
       $row = [];
       foreach ($column_map as $view_column => $expected_column) {
-        if (property_exists($value, $view_column)) {
+        if ($value->hasColumn($view_column)) {
           $row[$expected_column] = (string) $value->$view_column;
         }
         // For entity fields we don't have the raw value. Let's try to fetch it
diff --git a/core/modules/views/tests/src/Unit/ResultRowTest.php b/core/modules/views/tests/src/Unit/ResultRowTest.php
new file mode 100644
index 0000000000..cd0e98a8be
--- /dev/null
+++ b/core/modules/views/tests/src/Unit/ResultRowTest.php
@@ -0,0 +1,60 @@
+<?php
+
+namespace Drupal\Tests\views\Unit;
+
+use Drupal\Tests\UnitTestCase;
+use Drupal\views\ResultRow;
+
+/**
+ * @coversDefaultClass \Drupal\views\ResultRow
+ * @group views
+ */
+class ResultRowTest extends UnitTestCase {
+
+  /**
+   * A views' result row.
+   */
+  protected ResultRow $row;
+
+  protected function setUp(): void {
+    parent::setUp();
+    $this->row = new ResultRow([
+      'index' => 1,
+      'data' => [
+        'alpha' => 'foo',
+        'beta' => 'bar',
+      ],
+    ]);
+  }
+
+  /**
+   * @covers ::__construct
+   * @covers ::__set
+   * @covers ::__get
+   * @covers ::__isset
+   * @covers ::__unset
+   * @covers ::hasColumn
+   */
+  public function testMagic(): void {
+    $this->assertTrue(isset($this->row->index));
+    $this->assertTrue(isset($this->row->alpha));
+    $this->assertTrue(isset($this->row->beta));
+    $this->assertFalse($this->row->hasColumn('index'));
+    $this->assertTrue($this->row->hasColumn('alpha'));
+    $this->assertTrue($this->row->hasColumn('beta'));
+    $this->assertSame(1, $this->row->index);
+    $this->assertSame('foo', $this->row->alpha);
+    $this->assertSame('bar', $this->row->beta);
+    unset($this->row->beta);
+    $this->assertFalse(isset($this->row->beta));
+    $this->assertFalse($this->row->hasColumn('beta'));
+    $this->row->charlie = 'baz';
+    $this->assertTrue(isset($this->row->charlie));
+    $this->assertTrue($this->row->hasColumn('charlie'));
+    $this->assertSame('baz', $this->row->charlie);
+    $this->expectException(\UnexpectedValueException::class);
+    $this->expectExceptionMessage("Column 'zulu' does not exist");
+    $value = $this->row->zulu;
+  }
+
+}
