diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index f38ac642cd..84783c5a1c 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -899,6 +899,10 @@ protected function expandArguments(&$query, &$args) {
    *   The name of the class that should be used for this driver.
    */
   public function getDriverClass($class) {
+    match($class) {
+      'ExceptionHandler', 'Select', 'Insert', 'Merge', 'Upsert', 'Update', 'Delete', 'Truncate', 'Schema', 'Condition', 'Transaction' => @trigger_error('Calling ' . __METHOD__ . '() for \'' . $class . '\' is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Use standard autoloading in the methods that return database operations. See https://www.drupal.org/node/3217534', E_USER_DEPRECATED),
+      default => NULL,
+    };
     if (empty($this->driverClasses[$class])) {
       $driver_class = $this->connectionOptions['namespace'] . '\\' . $class;
       if (class_exists($driver_class)) {
@@ -963,6 +967,8 @@ public function getDriverClass($class) {
    *
    * @return \Drupal\Core\Database\ExceptionHandler
    *   The database exceptions handler.
+   *
+   * @todo in drupal:11.0.0, make this method abstract.
    */
   public function exceptionHandler() {
     $class = $this->getDriverClass('ExceptionHandler');
@@ -987,6 +993,8 @@ public function exceptionHandler() {
    *   driver.
    *
    * @see \Drupal\Core\Database\Query\Select
+   *
+   * @todo in drupal:11.0.0, make this method abstract.
    */
   public function select($table, $alias = NULL, array $options = []) {
     assert(is_string($alias) || $alias === NULL, 'The \'$alias\' argument to ' . __METHOD__ . '() must be a string or NULL');
@@ -1009,6 +1017,8 @@ public function select($table, $alias = NULL, array $options = []) {
    *
    * @see \Drupal\Core\Database\Query\Insert
    * @see \Drupal\Core\Database\Connection::defaultOptions()
+   *
+   * @todo in drupal:11.0.0, make this method abstract.
    */
   public function insert($table, array $options = []) {
     $class = $this->getDriverClass('Insert');
@@ -1057,6 +1067,8 @@ public function lastInsertId(?string $name = NULL): string {
    *   A new Merge query object.
    *
    * @see \Drupal\Core\Database\Query\Merge
+   *
+   * @todo in drupal:11.0.0, make this method abstract.
    */
   public function merge($table, array $options = []) {
     $class = $this->getDriverClass('Merge');
@@ -1075,6 +1087,8 @@ public function merge($table, array $options = []) {
    *   A new Upsert query object.
    *
    * @see \Drupal\Core\Database\Query\Upsert
+   *
+   * @todo in drupal:11.0.0, make this method abstract.
    */
   public function upsert($table, array $options = []) {
     $class = $this->getDriverClass('Upsert');
@@ -1096,6 +1110,8 @@ public function upsert($table, array $options = []) {
    *
    * @see \Drupal\Core\Database\Query\Update
    * @see \Drupal\Core\Database\Connection::defaultOptions()
+   *
+   * @todo in drupal:11.0.0, make this method abstract.
    */
   public function update($table, array $options = []) {
     $class = $this->getDriverClass('Update');
@@ -1117,6 +1133,8 @@ public function update($table, array $options = []) {
    *
    * @see \Drupal\Core\Database\Query\Delete
    * @see \Drupal\Core\Database\Connection::defaultOptions()
+   *
+   * @todo in drupal:11.0.0, make this method abstract.
    */
   public function delete($table, array $options = []) {
     $class = $this->getDriverClass('Delete');
@@ -1135,6 +1153,8 @@ public function delete($table, array $options = []) {
    *   A new Truncate query object.
    *
    * @see \Drupal\Core\Database\Query\Truncate
+   *
+   * @todo in drupal:11.0.0, make this method abstract.
    */
   public function truncate($table, array $options = []) {
     $class = $this->getDriverClass('Truncate');
@@ -1148,6 +1168,8 @@ public function truncate($table, array $options = []) {
    *
    * @return \Drupal\Core\Database\Schema
    *   The database Schema object for this connection.
+   *
+   * @todo in drupal:11.0.0, make this method abstract.
    */
   public function schema() {
     if (empty($this->schema)) {
@@ -1167,6 +1189,8 @@ public function schema() {
    *   A new Condition query object.
    *
    * @see \Drupal\Core\Database\Query\Condition
+   *
+   * @todo in drupal:11.0.0, make this method abstract.
    */
   public function condition($conjunction) {
     $class = $this->getDriverClass('Condition');
@@ -1324,6 +1348,8 @@ public function transactionDepth() {
    *   A Transaction object.
    *
    * @see \Drupal\Core\Database\Transaction
+   *
+   * @todo in drupal:11.0.0, make this method abstract.
    */
   public function startTransaction($name = '') {
     $class = $this->getDriverClass('Transaction');
diff --git a/core/modules/mysql/src/Driver/Database/mysql/Connection.php b/core/modules/mysql/src/Driver/Database/mysql/Connection.php
index 9ff1fdf84d..e0b33c856f 100644
--- a/core/modules/mysql/src/Driver/Database/mysql/Connection.php
+++ b/core/modules/mysql/src/Driver/Database/mysql/Connection.php
@@ -2,15 +2,17 @@
 
 namespace Drupal\mysql\Driver\Database\mysql;
 
+use Drupal\Core\Database\Connection as DatabaseConnection;
+use Drupal\Core\Database\Database;
 use Drupal\Core\Database\DatabaseAccessDeniedException;
+use Drupal\Core\Database\DatabaseConnectionRefusedException;
+use Drupal\Core\Database\DatabaseException;
 use Drupal\Core\Database\DatabaseExceptionWrapper;
-use Drupal\Core\Database\StatementWrapperIterator;
-use Drupal\Core\Database\Database;
 use Drupal\Core\Database\DatabaseNotFoundException;
-use Drupal\Core\Database\DatabaseException;
-use Drupal\Core\Database\Connection as DatabaseConnection;
-use Drupal\Core\Database\DatabaseConnectionRefusedException;
+use Drupal\Core\Database\Query\Condition;
+use Drupal\Core\Database\StatementWrapperIterator;
 use Drupal\Core\Database\SupportsTemporaryTablesInterface;
+use Drupal\Core\Database\Transaction;
 use Drupal\Core\Database\TransactionNoActiveException;
 
 /**
@@ -511,6 +513,86 @@ protected function doCommit() {
     return $success;
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function exceptionHandler() {
+    return new ExceptionHandler();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function select($table, $alias = NULL, array $options = []) {
+    return new Select($this, $table, $alias, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function insert($table, array $options = []) {
+    return new Insert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function merge($table, array $options = []) {
+    return new Merge($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function upsert($table, array $options = []) {
+    return new Upsert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function update($table, array $options = []) {
+    return new Update($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function delete($table, array $options = []) {
+    return new Delete($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function truncate($table, array $options = []) {
+    return new Truncate($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function schema() {
+    if (empty($this->schema)) {
+      $this->schema = new Schema($this);
+    }
+    return $this->schema;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function condition($conjunction) {
+    return new Condition($conjunction);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function startTransaction($name = '') {
+    return new Transaction($this, $name);
+  }
+
 }
 
 
diff --git a/core/modules/pgsql/src/Driver/Database/pgsql/Connection.php b/core/modules/pgsql/src/Driver/Database/pgsql/Connection.php
index 32f6110be6..3ba9748bcd 100644
--- a/core/modules/pgsql/src/Driver/Database/pgsql/Connection.php
+++ b/core/modules/pgsql/src/Driver/Database/pgsql/Connection.php
@@ -2,13 +2,16 @@
 
 namespace Drupal\pgsql\Driver\Database\pgsql;
 
-use Drupal\Core\Database\Database;
 use Drupal\Core\Database\Connection as DatabaseConnection;
+use Drupal\Core\Database\Database;
 use Drupal\Core\Database\DatabaseAccessDeniedException;
 use Drupal\Core\Database\DatabaseNotFoundException;
+use Drupal\Core\Database\ExceptionHandler;
+use Drupal\Core\Database\Query\Condition;
 use Drupal\Core\Database\StatementInterface;
 use Drupal\Core\Database\StatementWrapperIterator;
 use Drupal\Core\Database\SupportsTemporaryTablesInterface;
+use Drupal\Core\Database\Transaction;
 
 // cSpell:ignore ilike nextval
 
@@ -404,6 +407,86 @@ public function hasJson(): bool {
     }
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function exceptionHandler() {
+    return new ExceptionHandler();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function select($table, $alias = NULL, array $options = []) {
+    return new Select($this, $table, $alias, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function insert($table, array $options = []) {
+    return new Insert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function merge($table, array $options = []) {
+    return new Merge($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function upsert($table, array $options = []) {
+    return new Upsert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function update($table, array $options = []) {
+    return new Update($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function delete($table, array $options = []) {
+    return new Delete($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function truncate($table, array $options = []) {
+    return new Truncate($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function schema() {
+    if (empty($this->schema)) {
+      $this->schema = new Schema($this);
+    }
+    return $this->schema;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function condition($conjunction) {
+    return new Condition($conjunction);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function startTransaction($name = '') {
+    return new Transaction($this, $name);
+  }
+
 }
 
 /**
diff --git a/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php b/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php
index c46dc1bce6..0c14efb20f 100644
--- a/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php
+++ b/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php
@@ -2,11 +2,14 @@
 
 namespace Drupal\sqlite\Driver\Database\sqlite;
 
+use Drupal\Core\Database\Connection as DatabaseConnection;
 use Drupal\Core\Database\DatabaseExceptionWrapper;
 use Drupal\Core\Database\DatabaseNotFoundException;
-use Drupal\Core\Database\Connection as DatabaseConnection;
+use Drupal\Core\Database\ExceptionHandler;
+use Drupal\Core\Database\Query\Condition;
 use Drupal\Core\Database\StatementInterface;
 use Drupal\Core\Database\SupportsTemporaryTablesInterface;
+use Drupal\Core\Database\Transaction;
 
 /**
  * SQLite implementation of \Drupal\Core\Database\Connection.
@@ -508,4 +511,84 @@ public static function createUrlFromConnectionOptions(array $connection_options)
     return $db_url;
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function exceptionHandler() {
+    return new ExceptionHandler();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function select($table, $alias = NULL, array $options = []) {
+    return new Select($this, $table, $alias, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function insert($table, array $options = []) {
+    return new Insert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function merge($table, array $options = []) {
+    return new Merge($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function upsert($table, array $options = []) {
+    return new Upsert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function update($table, array $options = []) {
+    return new Update($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function delete($table, array $options = []) {
+    return new Delete($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function truncate($table, array $options = []) {
+    return new Truncate($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function schema() {
+    if (empty($this->schema)) {
+      $this->schema = new Schema($this);
+    }
+    return $this->schema;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function condition($conjunction) {
+    return new Condition($conjunction);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function startTransaction($name = '') {
+    return new Transaction($this, $name);
+  }
+
 }
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Delete.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Delete.php
deleted file mode 100644
index 9e0ca19134..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Delete.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
-
-use Drupal\mysql\Driver\Database\mysql\Delete as CoreDelete;
-
-/**
- * MySQL test implementation of \Drupal\Core\Database\Query\Delete.
- */
-class Delete extends CoreDelete {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Insert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Insert.php
deleted file mode 100644
index 5c253174bc..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Insert.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
-
-use Drupal\mysql\Driver\Database\mysql\Insert as CoreInsert;
-
-/**
- * MySQL test implementation of \Drupal\Core\Database\Query\Insert.
- */
-class Insert extends CoreInsert {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Merge.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Merge.php
deleted file mode 100644
index 832d778567..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Merge.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
-
-use Drupal\mysql\Driver\Database\mysql\Merge as CoreMerge;
-
-/**
- * MySQL test implementation of \Drupal\Core\Database\Query\Merge.
- */
-class Merge extends CoreMerge {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Schema.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Schema.php
deleted file mode 100644
index bc1bf9eec2..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Schema.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
-
-use Drupal\mysql\Driver\Database\mysql\Schema as CoreSchema;
-
-/**
- * MySQL test implementation of \Drupal\Core\Database\Schema.
- */
-class Schema extends CoreSchema {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Select.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Select.php
deleted file mode 100644
index b87333103e..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Select.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
-
-use Drupal\mysql\Driver\Database\mysql\Select as CoreSelect;
-
-/**
- * MySQL test implementation of \Drupal\Core\Database\Query\Select.
- */
-class Select extends CoreSelect {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Truncate.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Truncate.php
deleted file mode 100644
index 24ac394cc7..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Truncate.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
-
-use Drupal\mysql\Driver\Database\mysql\Truncate as CoreTruncate;
-
-/**
- * MySQL test implementation of \Drupal\Core\Database\Query\Truncate.
- */
-class Truncate extends CoreTruncate {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Update.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Update.php
deleted file mode 100644
index 3f36bab738..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Update.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
-
-use Drupal\mysql\Driver\Database\mysql\Update as CoreUpdate;
-
-/**
- * MySQL test implementation of \Drupal\Core\Database\Query\Update.
- */
-class Update extends CoreUpdate {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Upsert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Upsert.php
deleted file mode 100644
index d2bd76e6ea..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Upsert.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
-
-use Drupal\mysql\Driver\Database\mysql\Upsert as CoreUpsert;
-
-/**
- * MySQL test implementation of \Drupal\Core\Database\Query\Upsert.
- */
-class Upsert extends CoreUpsert {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Delete.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Delete.php
deleted file mode 100644
index 2590810442..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Delete.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
-
-use Drupal\mysql\Driver\Database\mysql\Delete as CoreDelete;
-
-/**
- * MySQL test implementation of \Drupal\Core\Database\Query\Delete.
- */
-class Delete extends CoreDelete {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Insert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Insert.php
deleted file mode 100644
index f29049d5af..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Insert.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
-
-use Drupal\mysql\Driver\Database\mysql\Insert as CoreInsert;
-
-/**
- * MySQL test implementation of \Drupal\Core\Database\Query\Insert.
- */
-class Insert extends CoreInsert {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Merge.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Merge.php
deleted file mode 100644
index d4f0fd8cd2..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Merge.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
-
-use Drupal\mysql\Driver\Database\mysql\Merge as CoreMerge;
-
-/**
- * MySQL test implementation of \Drupal\Core\Database\Query\Merge.
- */
-class Merge extends CoreMerge {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Schema.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Schema.php
deleted file mode 100644
index 0b608b4baf..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Schema.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
-
-use Drupal\mysql\Driver\Database\mysql\Schema as CoreSchema;
-
-/**
- * MySQL test implementation of \Drupal\Core\Database\Schema.
- */
-class Schema extends CoreSchema {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Select.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Select.php
deleted file mode 100644
index 8b58677005..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Select.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
-
-use Drupal\mysql\Driver\Database\mysql\Select as CoreSelect;
-
-/**
- * MySQL test implementation of \Drupal\Core\Database\Query\Select.
- */
-class Select extends CoreSelect {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Truncate.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Truncate.php
deleted file mode 100644
index fbdbb05b79..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Truncate.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
-
-use Drupal\mysql\Driver\Database\mysql\Truncate as CoreTruncate;
-
-/**
- * MySQL test implementation of \Drupal\Core\Database\Query\Truncate.
- */
-class Truncate extends CoreTruncate {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Update.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Update.php
deleted file mode 100644
index 9d8c63905e..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Update.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
-
-use Drupal\mysql\Driver\Database\mysql\Update as CoreUpdate;
-
-/**
- * MySQL test implementation of \Drupal\Core\Database\Query\Update.
- */
-class Update extends CoreUpdate {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Upsert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Upsert.php
deleted file mode 100644
index 58a792b644..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Upsert.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
-
-use Drupal\mysql\Driver\Database\mysql\Upsert as CoreUpsert;
-
-/**
- * MySQL test implementation of \Drupal\Core\Database\Query\Upsert.
- */
-class Upsert extends CoreUpsert {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Delete.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Delete.php
deleted file mode 100644
index 29840d0dfa..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Delete.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
-
-use Drupal\pgsql\Driver\Database\pgsql\Delete as CoreDelete;
-
-/**
- * PostgreSQL implementation of \Drupal\Core\Database\Query\Delete.
- */
-class Delete extends CoreDelete {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Insert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Insert.php
deleted file mode 100644
index a35e74d445..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Insert.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
-
-use Drupal\pgsql\Driver\Database\pgsql\Insert as CoreInsert;
-
-/**
- * PostgreSQL implementation of \Drupal\Core\Database\Query\Insert.
- */
-class Insert extends CoreInsert {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Schema.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Schema.php
deleted file mode 100644
index 522311cdc2..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Schema.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
-
-use Drupal\pgsql\Driver\Database\pgsql\Schema as CoreSchema;
-
-/**
- * PostgreSQL implementation of \Drupal\Core\Database\Schema.
- */
-class Schema extends CoreSchema {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Select.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Select.php
deleted file mode 100644
index 12fe909b2e..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Select.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
-
-use Drupal\pgsql\Driver\Database\pgsql\Select as CoreSelect;
-
-/**
- * PostgreSQL implementation of \Drupal\Core\Database\Query\Select.
- */
-class Select extends CoreSelect {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Truncate.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Truncate.php
deleted file mode 100644
index 416c082563..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Truncate.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
-
-use Drupal\pgsql\Driver\Database\pgsql\Truncate as CoreTruncate;
-
-/**
- * PostgreSQL implementation of \Drupal\Core\Database\Query\Truncate.
- */
-class Truncate extends CoreTruncate {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Update.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Update.php
deleted file mode 100644
index 48d3f0380e..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Update.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
-
-use Drupal\pgsql\Driver\Database\pgsql\Update as CoreUpdate;
-
-/**
- * PostgreSQL implementation of \Drupal\Core\Database\Query\Update.
- */
-class Update extends CoreUpdate {}
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Upsert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Upsert.php
deleted file mode 100644
index 93e51d1ae0..0000000000
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Upsert.php
+++ /dev/null
@@ -1,10 +0,0 @@
-<?php
-
-namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
-
-use Drupal\pgsql\Driver\Database\pgsql\Upsert as CoreUpsert;
-
-/**
- * PostgreSQL implementation of \Drupal\Core\Database\Query\Upsert.
- */
-class Upsert extends CoreUpsert {}
diff --git a/core/tests/Drupal/KernelTests/Core/Database/ConnectionTest.php b/core/tests/Drupal/KernelTests/Core/Database/ConnectionTest.php
index 1f441ec736..a7951e25cd 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/ConnectionTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/ConnectionTest.php
@@ -97,8 +97,6 @@ public function testConnectionOptions() {
     // Set up identical replica and confirm connection options are identical.
     Database::addConnectionInfo('default', 'replica', $connection_info['default']);
     $db2 = Database::getConnection('replica', 'default');
-    // Getting a driver class ensures the namespace option is set.
-    $this->assertEquals($db->getDriverClass('Select'), $db2->getDriverClass('Select'));
     $connectionOptions2 = $db2->getConnectionOptions();
 
     // Get a fresh copy of the default connection options.
diff --git a/core/tests/Drupal/Tests/Core/Database/ConditionTest.php b/core/tests/Drupal/Tests/Core/Database/ConditionTest.php
index 56f674ac2c..629459ef22 100644
--- a/core/tests/Drupal/Tests/Core/Database/ConditionTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/ConditionTest.php
@@ -5,6 +5,7 @@
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Query\Condition;
 use Drupal\Core\Database\Query\PlaceholderInterface;
+use Drupal\Tests\Core\Database\Stub\StubCondition;
 use Drupal\Tests\Core\Database\Stub\StubConnection;
 use Drupal\Tests\Core\Database\Stub\StubPDO;
 use Drupal\Tests\UnitTestCase;
@@ -184,14 +185,7 @@ public function providerTestCompileWithSqlInjectionForOperator() {
    * Tests that the core Condition can be overridden.
    */
   public function testContribCondition() {
-    $mockCondition = $this->getMockBuilder(Condition::class)
-      ->setMockClassName('MockCondition')
-      ->setConstructorArgs([NULL])
-      ->disableOriginalConstructor()
-      ->getMock();
     $contrib_namespace = 'Drupal\mock\Driver\Database\mock';
-    $mocked_namespace = $contrib_namespace . '\\Condition';
-    class_alias('MockCondition', $mocked_namespace);
 
     $options['namespace'] = $contrib_namespace;
     $options['prefix'] = '';
@@ -200,7 +194,7 @@ class_alias('MockCondition', $mocked_namespace);
 
     $connection = new StubConnection($mockPdo, $options);
     $condition = $connection->condition('AND');
-    $this->assertSame('MockCondition', get_class($condition));
+    $this->assertSame(StubCondition::class, get_class($condition));
   }
 
 }
diff --git a/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php b/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php
index 45e8f49e4c..2a2ca15453 100644
--- a/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php
@@ -316,6 +316,7 @@ public function providerGetDriverClass() {
   /**
    * @covers ::getDriverClass
    * @dataProvider providerGetDriverClass
+   * @group legacy
    */
   public function testGetDriverClass($expected, $namespace, $class) {
     $additional_class_loader = new ClassLoader();
@@ -325,6 +326,10 @@ public function testGetDriverClass($expected, $namespace, $class) {
 
     $mock_pdo = $this->createMock('Drupal\Tests\Core\Database\Stub\StubPDO');
     $connection = new StubConnection($mock_pdo, ['namespace' => $namespace]);
+    match($class) {
+      'ExceptionHandler', 'Select', 'Insert', 'Merge', 'Upsert', 'Update', 'Delete', 'Truncate', 'Schema', 'Condition', 'Transaction' => $this->expectDeprecation('Calling Drupal\\Core\\Database\\Connection::getDriverClass() for \'' . $class . '\' is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Use standard autoloading in the methods that return database operations. See https://www.drupal.org/node/3217534'),
+      default => NULL,
+    };
     $this->assertEquals($expected, $connection->getDriverClass($class));
   }
 
@@ -663,7 +668,7 @@ public function testFindCallerFromDebugBacktrace() {
     $result = $connection->findCallerFromDebugBacktrace();
     $this->assertSame([
       'file' => __FILE__,
-      'line' => 663,
+      'line' => __LINE__ - 8,
       'function' => 'testFindCallerFromDebugBacktrace',
       'class' => 'Drupal\Tests\Core\Database\ConnectionTest',
       'type' => '->',
diff --git a/core/tests/Drupal/Tests/Core/Database/Stub/StubCondition.php b/core/tests/Drupal/Tests/Core/Database/Stub/StubCondition.php
new file mode 100644
index 0000000000..3b7b79a699
--- /dev/null
+++ b/core/tests/Drupal/Tests/Core/Database/Stub/StubCondition.php
@@ -0,0 +1,11 @@
+<?php
+
+namespace Drupal\Tests\Core\Database\Stub;
+
+use Drupal\Core\Database\Query\Condition;
+
+/**
+ * A stub of core Condition class for testing purposes.
+ */
+class StubCondition extends Condition {
+}
diff --git a/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php b/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php
index e39d388181..2ce07e0646 100644
--- a/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php
+++ b/core/tests/Drupal/Tests/Core/Database/Stub/StubConnection.php
@@ -3,8 +3,17 @@
 namespace Drupal\Tests\Core\Database\Stub;
 
 use Drupal\Core\Database\Connection;
+use Drupal\Core\Database\ExceptionHandler;
 use Drupal\Core\Database\Log;
+use Drupal\Core\Database\Query\Delete;
+use Drupal\Core\Database\Query\Insert;
+use Drupal\Core\Database\Query\Merge;
+use Drupal\Core\Database\Query\Select;
+use Drupal\Core\Database\Query\Truncate;
+use Drupal\Core\Database\Query\Update;
 use Drupal\Core\Database\StatementWrapper;
+use Drupal\Core\Database\Transaction;
+use Drupal\Tests\Core\Database\Stub\Driver\Schema;
 
 /**
  * A stub of the abstract Connection class for testing purposes.
@@ -99,4 +108,84 @@ public function testLogCaller() {
     return (new Log())->findCaller();
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function exceptionHandler() {
+    return new ExceptionHandler();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function select($table, $alias = NULL, array $options = []) {
+    return new Select($this, $table, $alias, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function insert($table, array $options = []) {
+    return new Insert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function merge($table, array $options = []) {
+    return new Merge($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function upsert($table, array $options = []) {
+    return new StubUpsert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function update($table, array $options = []) {
+    return new Update($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function delete($table, array $options = []) {
+    return new Delete($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function truncate($table, array $options = []) {
+    return new Truncate($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function schema() {
+    if (empty($this->schema)) {
+      $this->schema = new Schema();
+    }
+    return $this->schema;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function condition($conjunction) {
+    return new StubCondition($conjunction);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function startTransaction($name = '') {
+    return new Transaction($this, $name);
+  }
+
 }
diff --git a/core/tests/Drupal/Tests/Core/Database/Stub/StubUpsert.php b/core/tests/Drupal/Tests/Core/Database/Stub/StubUpsert.php
new file mode 100644
index 0000000000..34b28e9398
--- /dev/null
+++ b/core/tests/Drupal/Tests/Core/Database/Stub/StubUpsert.php
@@ -0,0 +1,19 @@
+<?php
+
+namespace Drupal\Tests\Core\Database\Stub;
+
+use Drupal\Core\Database\Query\Upsert;
+
+/**
+ * A stub of core Upsert for testing purposes.
+ */
+class StubUpsert extends Upsert {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function __toString() {
+    return '';
+  }
+
+}
diff --git a/core/tests/fixtures/database_drivers/custom/fake/Connection.php b/core/tests/fixtures/database_drivers/custom/fake/Connection.php
index 761d4efd32..4f3eb088b6 100644
--- a/core/tests/fixtures/database_drivers/custom/fake/Connection.php
+++ b/core/tests/fixtures/database_drivers/custom/fake/Connection.php
@@ -3,12 +3,38 @@
 namespace Drupal\Driver\Database\fake;
 
 use Drupal\Core\Database\Connection as CoreConnection;
+use Drupal\Core\Database\ExceptionHandler;
+use Drupal\Core\Database\Query\Condition;
+use Drupal\Core\Database\Query\Delete;
+use Drupal\Core\Database\Query\Insert;
+use Drupal\Core\Database\Query\Merge;
+use Drupal\Core\Database\Query\Select;
+use Drupal\Core\Database\Query\Truncate;
+use Drupal\Core\Database\Query\Update;
+use Drupal\Core\Database\Query\Upsert;
+use Drupal\Core\Database\StatementWrapper;
+use Drupal\Core\Database\Transaction;
 
 /**
  * A fake Connection class for testing purposes.
  */
 class Connection extends CoreConnection {
 
+  /**
+   * {@inheritdoc}
+   */
+  protected $statementClass = NULL;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $statementWrapperClass = StatementWrapper::class;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $identifierQuotes = ['"', '"'];
+
   /**
    * Public property so we can test driver loading mechanism.
    *
@@ -58,4 +84,84 @@ public function nextId($existing_id = 0) {
     return 0;
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function exceptionHandler() {
+    return new ExceptionHandler();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function select($table, $alias = NULL, array $options = []) {
+    return new Select($this, $table, $alias, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function insert($table, array $options = []) {
+    return new Insert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function merge($table, array $options = []) {
+    return new Merge($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function upsert($table, array $options = []) {
+    return new Upsert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function update($table, array $options = []) {
+    return new Update($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function delete($table, array $options = []) {
+    return new Delete($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function truncate($table, array $options = []) {
+    return new Truncate($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function schema() {
+    if (empty($this->schema)) {
+      $this->schema = new Schema($this);
+    }
+    return $this->schema;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function condition($conjunction) {
+    return new Condition($conjunction, FALSE);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function startTransaction($name = '') {
+    return new Transaction($this, $name);
+  }
+
 }
diff --git a/core/tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefakeWithAllCustomClasses/Connection.php b/core/tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefakeWithAllCustomClasses/Connection.php
index ecf7e5cccc..5f44ffa533 100644
--- a/core/tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefakeWithAllCustomClasses/Connection.php
+++ b/core/tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefakeWithAllCustomClasses/Connection.php
@@ -14,4 +14,84 @@ class Connection extends BaseConnection {
    */
   public $driver = 'corefakeWithAllCustomClasses';
 
+  /**
+   * {@inheritdoc}
+   */
+  public function exceptionHandler() {
+    return new ExceptionHandler();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function select($table, $alias = NULL, array $options = []) {
+    return new Select($this, $table, $alias, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function insert($table, array $options = []) {
+    return new Insert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function merge($table, array $options = []) {
+    return new Merge($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function upsert($table, array $options = []) {
+    return new Upsert($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function update($table, array $options = []) {
+    return new Update($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function delete($table, array $options = []) {
+    return new Delete($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function truncate($table, array $options = []) {
+    return new Truncate($this, $table, $options);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function schema() {
+    if (empty($this->schema)) {
+      $this->schema = new Schema($this);
+    }
+    return $this->schema;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function condition($conjunction) {
+    return new Condition($conjunction, FALSE);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function startTransaction($name = '') {
+    return new Transaction($this, $name);
+  }
+
 }
