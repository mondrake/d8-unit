diff --git a/core/drupalci.yml b/core/drupalci.yml
index cd92d8102d..cf1e26d809 100644
--- a/core/drupalci.yml
+++ b/core/drupalci.yml
@@ -9,43 +9,43 @@ _phpunit_testgroups_to_execute: &testgroups
 build:
   assessment:
     testing:
-      # Run code quality checks.
-      container_command.commit-checks:
-        commands:
-          - "core/scripts/dev/commit-code-check.sh --drupalci"
-        halt-on-fail: true
+#      # Run code quality checks.
+#      container_command.commit-checks:
+#        commands:
+#          - "core/scripts/dev/commit-code-check.sh --drupalci"
+#        halt-on-fail: true
       # run_tests task is executed several times in order of performance speeds.
       # halt-on-fail can be set on the run_tests tasks in order to fail fast.
       # suppress-deprecations is false in order to be alerted to usages of
       # deprecated code.
-      run_tests.phpunit:
-        types: 'PHPUnit-Unit'
-        suppress-deprecations: false
-        halt-on-fail: false
-        <<: *testgroups
-      run_tests.kernel:
-        types: 'PHPUnit-Kernel'
-        suppress-deprecations: false
-        halt-on-fail: false
-        <<: *testgroups
-      run_tests.build:
-        # Limit concurrency due to disk space concerns.
-        concurrency: 15
-        types: 'PHPUnit-Build'
-        suppress-deprecations: false
-        halt-on-fail: false
-        <<: *testgroups
+#      run_tests.phpunit:
+#        types: 'PHPUnit-Unit'
+#        suppress-deprecations: false
+#        halt-on-fail: false
+#        <<: *testgroups
+#      run_tests.kernel:
+#        types: 'PHPUnit-Kernel'
+#        suppress-deprecations: false
+#        halt-on-fail: false
+#        <<: *testgroups
+#      run_tests.build:
+#        # Limit concurrency due to disk space concerns.
+#        concurrency: 15
+#        types: 'PHPUnit-Build'
+#        suppress-deprecations: false
+#        halt-on-fail: false
+#        <<: *testgroups
       run_tests.functional:
         types: 'PHPUnit-Functional'
         suppress-deprecations: false
         halt-on-fail: false
         <<: *testgroups
-      run_tests.javascript:
-        concurrency: 15
-        types: 'PHPUnit-FunctionalJavascript'
-        suppress-deprecations: false
-        halt-on-fail: false
-        <<: *testgroups
-      # Run nightwatch testing.
-      # @see https://www.drupal.org/project/drupal/issues/2869825
-      nightwatchjs: {}
+#      run_tests.javascript:
+#        concurrency: 15
+#        types: 'PHPUnit-FunctionalJavascript'
+#        suppress-deprecations: false
+#        halt-on-fail: false
+#        <<: *testgroups
+#      # Run nightwatch testing.
+#      # @see https://www.drupal.org/project/drupal/issues/2869825
+#      nightwatchjs: {}
diff --git a/core/lib/Drupal/Core/Batch/BatchStorage.php b/core/lib/Drupal/Core/Batch/BatchStorage.php
index 3c44628ef9..766b1013ea 100644
--- a/core/lib/Drupal/Core/Batch/BatchStorage.php
+++ b/core/lib/Drupal/Core/Batch/BatchStorage.php
@@ -126,7 +126,7 @@ public function create(array $batch) {
     $try_again = FALSE;
     try {
       // The batch table might not yet exist.
-      $this->doCreate($batch);
+      return $this->doCreate($batch);
     }
     catch (\Exception $e) {
       // If there was an exception, try to create the table.
@@ -138,7 +138,7 @@ public function create(array $batch) {
     }
     // Now that the table has been created, try again if necessary.
     if ($try_again) {
-      $this->doCreate($batch);
+      return $this->doCreate($batch);
     }
   }
 
@@ -147,16 +147,26 @@ public function create(array $batch) {
    *
    * @param array $batch
    *   The array representing the batch to create.
+   *
+   * @return int
+   *   The batch id.
    */
   protected function doCreate(array $batch) {
-    $this->connection->insert('batch')
+    throw new \Exception('here');
+    $transaction = $this->connection->startTransaction();
+    $batchId = $this->connection->insert('batch')
       ->fields([
-        'bid' => $batch['id'],
         'timestamp' => REQUEST_TIME,
-        'token' => $this->csrfToken->get($batch['id']),
+        'token' => '',
         'batch' => serialize($batch),
       ])
       ->execute();
+    $this->connection->update('batch')
+      ->fields(['token' => $this->csrfToken->get($batchId)])
+      ->condition('bid', $batchId)
+      ->execute();
+    $transaction = NULL;
+    return $batchId;
   }
 
   /**
@@ -208,9 +218,7 @@ public function schemaDefinition() {
       'fields' => [
         'bid' => [
           'description' => 'Primary Key: Unique batch ID.',
-          // This is not a serial column, to allow both progressive and
-          // non-progressive batches. See batch_process().
-          'type' => 'int',
+          'type' => 'serial',
           'unsigned' => TRUE,
           'not null' => TRUE,
         ],
