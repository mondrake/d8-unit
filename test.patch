diff --git a/core/includes/batch.inc b/core/includes/batch.inc
index 2dc34b33d4..dd5da074c4 100644
--- a/core/includes/batch.inc
+++ b/core/includes/batch.inc
@@ -183,7 +183,7 @@ function _batch_progress_page() {
     print $fallback;
 
     // Perform actual processing.
-    [$percentage, $message, $label] = _batch_process($batch);
+    [$percentage, $message, $label] = _batch_process();
     if ($percentage == 100) {
       $new_op = 'finished';
     }
diff --git a/core/includes/install.inc b/core/includes/install.inc
index 63b5ee5589..c43a7e159d 100644
--- a/core/includes/install.inc
+++ b/core/includes/install.inc
@@ -314,7 +314,7 @@ function drupal_rewrite_settings($settings = [], $settings_file = NULL) {
             break;
 
           case 'array_index':
-            if (_drupal_rewrite_settings_is_array_index($type, $value)) {
+            if (_drupal_rewrite_settings_is_array_index($type)) {
               $index = trim($value, '\'"');
               $state = 'right_bracket';
             }
@@ -633,7 +633,7 @@ function drupal_install_system($install_state) {
   // its dependencies, and here the dependencies will be installed as well.
   if ($provider !== 'core') {
     $autoload = $connection->getConnectionOptions()['autoload'] ?? '';
-    if (($pos = strpos($autoload, 'src/Driver/Database/')) !== FALSE) {
+    if (strpos($autoload, 'src/Driver/Database/') !== FALSE) {
       $kernel->getContainer()->get('module_installer')->install([$provider], TRUE);
     }
   }
diff --git a/core/lib/Drupal/Component/Gettext/PoStreamReader.php b/core/lib/Drupal/Component/Gettext/PoStreamReader.php
index 87f50601e6..e14ed213ab 100644
--- a/core/lib/Drupal/Component/Gettext/PoStreamReader.php
+++ b/core/lib/Drupal/Component/Gettext/PoStreamReader.php
@@ -349,7 +349,7 @@ private function readLine() {
         $quoted = $this->parseQuoted($line);
         if ($quoted === FALSE) {
           // The message id must be wrapped in quotes.
-          $this->errors[] = new FormattableMarkup('The translation stream %uri contains an error: invalid format for "msgid" on line %line.', $log_vars, $log_vars);
+          $this->errors[] = new FormattableMarkup('The translation stream %uri contains an error: invalid format for "msgid" on line %line.', $log_vars);
           return FALSE;
         }
 
diff --git a/core/lib/Drupal/Component/Utility/Variable.php b/core/lib/Drupal/Component/Utility/Variable.php
index 8fe25c6da9..b4cfe04eff 100644
--- a/core/lib/Drupal/Component/Utility/Variable.php
+++ b/core/lib/Drupal/Component/Utility/Variable.php
@@ -57,7 +57,7 @@ public static function export($var, $prefix = '') {
         // Don't export keys if the array is non associative.
         $export_keys = array_values($var) != $var;
         foreach ($var as $key => $value) {
-          $output .= '  ' . ($export_keys ? static::export($key) . ' => ' : '') . static::export($value, '  ', FALSE) . ",\n";
+          $output .= '  ' . ($export_keys ? static::export($key) . ' => ' : '') . static::export($value, '  ') . ",\n";
         }
         $output .= ')';
       }
diff --git a/core/lib/Drupal/Core/Action/ActionBase.php b/core/lib/Drupal/Core/Action/ActionBase.php
index cb009c30ef..c7ba6997c2 100644
--- a/core/lib/Drupal/Core/Action/ActionBase.php
+++ b/core/lib/Drupal/Core/Action/ActionBase.php
@@ -18,9 +18,7 @@ abstract class ActionBase extends PluginBase implements ActionInterface {
    * {@inheritdoc}
    */
   public function executeMultiple(array $entities) {
-    foreach ($entities as $entity) {
-      $this->execute($entity);
-    }
+    $this->execute();
   }
 
 }
diff --git a/core/lib/Drupal/Core/Config/ConfigInstaller.php b/core/lib/Drupal/Core/Config/ConfigInstaller.php
index 33e1524d71..5118607a10 100644
--- a/core/lib/Drupal/Core/Config/ConfigInstaller.php
+++ b/core/lib/Drupal/Core/Config/ConfigInstaller.php
@@ -256,7 +256,7 @@ public function installOptionalConfig(StorageInterface $storage = NULL, $depende
 
     // Create the optional configuration if there is any left after filtering.
     if (!empty($config_to_create)) {
-      $this->createConfiguration(StorageInterface::DEFAULT_COLLECTION, $config_to_create, TRUE);
+      $this->createConfiguration(StorageInterface::DEFAULT_COLLECTION, $config_to_create);
     }
   }
 
diff --git a/core/lib/Drupal/Core/DependencyInjection/YamlFileLoader.php b/core/lib/Drupal/Core/DependencyInjection/YamlFileLoader.php
index 0c35209135..f1fcfabd0f 100644
--- a/core/lib/Drupal/Core/DependencyInjection/YamlFileLoader.php
+++ b/core/lib/Drupal/Core/DependencyInjection/YamlFileLoader.php
@@ -474,13 +474,10 @@ private function resolveServices($value)
 
             if ('=' === substr($value, -1)) {
                 $value = substr($value, 0, -1);
-                $strict = false;
-            } else {
-                $strict = true;
             }
 
             if (null !== $invalidBehavior) {
-                $value = new Reference($value, $invalidBehavior, $strict);
+                $value = new Reference($value, $invalidBehavior);
             }
         }
 
diff --git a/core/lib/Drupal/Core/Test/AssertMailTrait.php b/core/lib/Drupal/Core/Test/AssertMailTrait.php
index 7bd4ad89f9..e0b36180b4 100644
--- a/core/lib/Drupal/Core/Test/AssertMailTrait.php
+++ b/core/lib/Drupal/Core/Test/AssertMailTrait.php
@@ -50,16 +50,11 @@ protected function getMails(array $filter = []) {
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Email'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE on pass.
    */
-  protected function assertMail($name, $value = '', $message = '', $group = 'Email') {
+  protected function assertMail($name, $value = '', $message = '') {
     $captured_emails = $this->container->get('state')->get('system.test_mail_collector') ?: [];
     $email = end($captured_emails);
     $this->assertIsArray($email, $message);
diff --git a/core/lib/Drupal/Core/Update/UpdateCacheBackendFactory.php b/core/lib/Drupal/Core/Update/UpdateCacheBackendFactory.php
index 1a459f3a0b..9ae04cc41b 100644
--- a/core/lib/Drupal/Core/Update/UpdateCacheBackendFactory.php
+++ b/core/lib/Drupal/Core/Update/UpdateCacheBackendFactory.php
@@ -43,7 +43,7 @@ public function __construct(CacheFactoryInterface $cache_factory) {
    */
   public function get($bin) {
     if (!isset($this->bins[$bin])) {
-      $this->bins[$bin] = new UpdateBackend($this->cacheFactory->get($bin), $bin);
+      $this->bins[$bin] = new UpdateBackend($this->cacheFactory->get($bin));
     }
     return $this->bins[$bin];
   }
diff --git a/core/lib/Drupal/Core/Update/UpdateKernel.php b/core/lib/Drupal/Core/Update/UpdateKernel.php
index 8e7f44b135..7f20365342 100644
--- a/core/lib/Drupal/Core/Update/UpdateKernel.php
+++ b/core/lib/Drupal/Core/Update/UpdateKernel.php
@@ -72,7 +72,7 @@ public function handle(Request $request, $type = self::MAIN_REQUEST, $catch = TR
       // Handle the actual request. We need the session both for authentication
       // as well as the DB update, like
       // \Drupal\system\Controller\DbUpdateController::batchFinished.
-      $this->bootSession($request, $type);
+      $this->bootSession($request);
       $result = $this->handleRaw($request);
       $this->shutdownSession($request);
 
@@ -99,7 +99,7 @@ public function handle(Request $request, $type = self::MAIN_REQUEST, $catch = TR
   protected function handleRaw(Request $request) {
     $container = $this->getContainer();
 
-    $this->handleAccess($request, $container);
+    $this->handleAccess($request);
 
     /** @var \Drupal\Core\Controller\ControllerResolverInterface $controller_resolver */
     $controller_resolver = $container->get('controller_resolver');
diff --git a/core/modules/block/src/Plugin/migrate/process/BlockTheme.php b/core/modules/block/src/Plugin/migrate/process/BlockTheme.php
index a1e935698e..eda3631d0e 100644
--- a/core/modules/block/src/Plugin/migrate/process/BlockTheme.php
+++ b/core/modules/block/src/Plugin/migrate/process/BlockTheme.php
@@ -53,7 +53,9 @@ class BlockTheme extends ProcessPluginBase implements ContainerFactoryPluginInte
    *   The list of themes available on the destination.
    */
   public function __construct(array $configuration, $plugin_id, $plugin_definition, MigrationInterface $migration, Config $theme_config, array $themes) {
-    parent::__construct($configuration, $plugin_id, $plugin_definition, $migration);
+    // @todo $migration is unused, consider deprecating/removing in D11.
+    assert($migration instanceof MigrationInterface);
+    parent::__construct($configuration, $plugin_id, $plugin_definition);
     $this->themeConfig = $theme_config;
     $this->themes = $themes;
   }
diff --git a/core/modules/block/tests/src/Unit/Plugin/migrate/process/BlockSettingsTest.php b/core/modules/block/tests/src/Unit/Plugin/migrate/process/BlockSettingsTest.php
index 827f3fbe6a..47e3128eb9 100644
--- a/core/modules/block/tests/src/Unit/Plugin/migrate/process/BlockSettingsTest.php
+++ b/core/modules/block/tests/src/Unit/Plugin/migrate/process/BlockSettingsTest.php
@@ -32,7 +32,7 @@ public function testTransform($value, $expected) {
       $row = $this->prophesize(Row::class)->reveal();
     }
 
-    $plugin = new BlockSettings([], 'block_settings', [], 'foo');
+    $plugin = new BlockSettings([], 'block_settings', []);
     $actual = $plugin->transform($value, $executable, $row, 'foo');
     $this->assertSame($expected, $actual);
   }
diff --git a/core/modules/comment/src/CommentForm.php b/core/modules/comment/src/CommentForm.php
index 45fd79229d..ba4047d45f 100644
--- a/core/modules/comment/src/CommentForm.php
+++ b/core/modules/comment/src/CommentForm.php
@@ -242,7 +242,7 @@ public function form(array $form, FormStateInterface $form_state) {
       '#access' => $is_admin,
     ];
 
-    return parent::form($form, $form_state, $comment);
+    return parent::form($form, $form_state);
   }
 
   /**
diff --git a/core/modules/comment/tests/src/Functional/CommentPagerTest.php b/core/modules/comment/tests/src/Functional/CommentPagerTest.php
index 62d2b3c761..4039e2b36d 100644
--- a/core/modules/comment/tests/src/Functional/CommentPagerTest.php
+++ b/core/modules/comment/tests/src/Functional/CommentPagerTest.php
@@ -432,7 +432,7 @@ protected function clickLinkWithXPath($xpath, $arguments = [], $index = 0) {
       $url_target = $this->getAbsoluteUrl($urls[$index]->getAttribute('href'));
       return $this->drupalGet($url_target);
     }
-    $this->fail(new FormattableMarkup('Link %label does not exist on @url_before', ['%label' => $xpath, '@url_before' => $url_before]), 'Browser');
+    $this->fail(new FormattableMarkup('Link %label does not exist on @url_before', ['%label' => $xpath, '@url_before' => $url_before]));
     return FALSE;
   }
 
diff --git a/core/modules/contact/src/MessageForm.php b/core/modules/contact/src/MessageForm.php
index 4b64d2cc50..91facbd575 100644
--- a/core/modules/contact/src/MessageForm.php
+++ b/core/modules/contact/src/MessageForm.php
@@ -101,7 +101,7 @@ public static function create(ContainerInterface $container) {
   public function form(array $form, FormStateInterface $form_state) {
     $user = $this->currentUser();
     $message = $this->entity;
-    $form = parent::form($form, $form_state, $message);
+    $form = parent::form($form, $form_state);
     $form['#attributes']['class'][] = 'contact-form';
 
     if (!empty($message->preview)) {
diff --git a/core/modules/content_translation/src/ContentTranslationHandler.php b/core/modules/content_translation/src/ContentTranslationHandler.php
index 7e782db495..24caa245c7 100644
--- a/core/modules/content_translation/src/ContentTranslationHandler.php
+++ b/core/modules/content_translation/src/ContentTranslationHandler.php
@@ -653,7 +653,7 @@ protected function addTranslatabilityClue(&$element) {
     // If the current element does not have a (valid) title, try child elements.
     elseif ($children = Element::children($element)) {
       foreach ($children as $delta) {
-        $this->addTranslatabilityClue($element[$delta], $suffix);
+        $this->addTranslatabilityClue($element[$delta]);
       }
     }
     // If there are no children, fall back to the current #title attribute if it
diff --git a/core/modules/editor/tests/src/Functional/EditorLoadingTest.php b/core/modules/editor/tests/src/Functional/EditorLoadingTest.php
index efdccccc84..c8d0629767 100644
--- a/core/modules/editor/tests/src/Functional/EditorLoadingTest.php
+++ b/core/modules/editor/tests/src/Functional/EditorLoadingTest.php
@@ -155,7 +155,7 @@ public function testLoading() {
     $this->assertFalse($editor_js_present, 'No Text Editor JavaScript.');
     $this->assertSession()->elementsCount('xpath', $body, 1);
     $this->assertSession()->elementNotExists('css', 'select.js-filter-list');
-    $this->drupalLogout($this->normalUser);
+    $this->drupalLogout();
 
     // The privileged user:
     // - has access to 2 text formats (and the fallback format);
@@ -186,7 +186,7 @@ public function testLoading() {
     $this->drupalGet('editor/dialog/image/full_html');
     $this->assertSession()->statusCodeEquals(200);
 
-    $this->drupalLogout($this->privilegedUser);
+    $this->drupalLogout();
 
     // Also associate a text editor with the "Plain Text" text format.
     $editor = Editor::create([
diff --git a/core/modules/field/tests/src/Unit/Plugin/migrate/process/d6/FieldInstanceSettingsTest.php b/core/modules/field/tests/src/Unit/Plugin/migrate/process/d6/FieldInstanceSettingsTest.php
index 27f830a611..cb69ff29c9 100644
--- a/core/modules/field/tests/src/Unit/Plugin/migrate/process/d6/FieldInstanceSettingsTest.php
+++ b/core/modules/field/tests/src/Unit/Plugin/migrate/process/d6/FieldInstanceSettingsTest.php
@@ -24,7 +24,7 @@ class FieldInstanceSettingsTest extends UnitTestCase {
   public function testGetSettings($field_type, $instance_settings, $expected) {
     $instance_settings = unserialize($instance_settings);
     $migration = $this->createMock(MigrationInterface::class);
-    $plugin = new FieldInstanceSettings([], 'd6_field_field_settings', [], $migration);
+    $plugin = new FieldInstanceSettings([], 'd6_field_field_settings', []);
 
     $executable = $this->createMock(MigrateExecutableInterface::class);
     $row = $this->getMockBuilder(Row::class)
diff --git a/core/modules/field/tests/src/Unit/Plugin/migrate/process/d6/FieldSettingsTest.php b/core/modules/field/tests/src/Unit/Plugin/migrate/process/d6/FieldSettingsTest.php
index f6823d13b7..1664d97aab 100644
--- a/core/modules/field/tests/src/Unit/Plugin/migrate/process/d6/FieldSettingsTest.php
+++ b/core/modules/field/tests/src/Unit/Plugin/migrate/process/d6/FieldSettingsTest.php
@@ -21,7 +21,7 @@ class FieldSettingsTest extends UnitTestCase {
    */
   public function testGetSettings($field_type, $field_settings, $allowed_values) {
     $migration = $this->createMock(MigrationInterface::class);
-    $plugin = new FieldSettings([], 'd6_field_settings', [], $migration);
+    $plugin = new FieldSettings([], 'd6_field_settings', []);
 
     $executable = $this->createMock(MigrateExecutableInterface::class);
     $row = $this->getMockBuilder(Row::class)
diff --git a/core/modules/field/tests/src/Unit/Plugin/migrate/process/d7/FieldInstanceSettingsTest.php b/core/modules/field/tests/src/Unit/Plugin/migrate/process/d7/FieldInstanceSettingsTest.php
index bda611c6a2..d6860a7880 100644
--- a/core/modules/field/tests/src/Unit/Plugin/migrate/process/d7/FieldInstanceSettingsTest.php
+++ b/core/modules/field/tests/src/Unit/Plugin/migrate/process/d7/FieldInstanceSettingsTest.php
@@ -21,7 +21,7 @@ class FieldInstanceSettingsTest extends MigrateTestCase {
    */
   public function testTransformImageSettings() {
     $migration = $this->createMock(MigrationInterface::class);
-    $plugin = new FieldInstanceSettings([], 'd7_field_instance_settings', [], $migration);
+    $plugin = new FieldInstanceSettings([], 'd7_field_instance_settings', []);
 
     $executable = $this->createMock(MigrateExecutableInterface::class);
     $row = $this->getMockBuilder(Row::class)
diff --git a/core/modules/field/tests/src/Unit/Plugin/migrate/process/d7/FieldSettingsTest.php b/core/modules/field/tests/src/Unit/Plugin/migrate/process/d7/FieldSettingsTest.php
index cb12d960d0..5a55adec32 100644
--- a/core/modules/field/tests/src/Unit/Plugin/migrate/process/d7/FieldSettingsTest.php
+++ b/core/modules/field/tests/src/Unit/Plugin/migrate/process/d7/FieldSettingsTest.php
@@ -21,7 +21,7 @@ class FieldSettingsTest extends MigrateTestCase {
    */
   public function testTransformImageSettings() {
     $migration = $this->createMock(MigrationInterface::class);
-    $plugin = new FieldSettings([], 'd7_field_settings', [], $migration);
+    $plugin = new FieldSettings([], 'd7_field_settings', []);
 
     $executable = $this->createMock(MigrateExecutableInterface::class);
     $row = $this->getMockBuilder(Row::class)
diff --git a/core/modules/field_ui/src/Form/FieldStorageAddForm.php b/core/modules/field_ui/src/Form/FieldStorageAddForm.php
index 7c54ca94cc..9e4f3ddd4f 100644
--- a/core/modules/field_ui/src/Form/FieldStorageAddForm.php
+++ b/core/modules/field_ui/src/Form/FieldStorageAddForm.php
@@ -430,7 +430,7 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
     if ($destinations) {
       $destination = $this->getDestinationArray();
       $destinations[] = $destination['destination'];
-      $form_state->setRedirectUrl(FieldUI::getNextDestination($destinations, $form_state));
+      $form_state->setRedirectUrl(FieldUI::getNextDestination($destinations));
     }
     elseif (!$error) {
       $this->messenger()->addStatus($this->t('Your settings have been saved.'));
diff --git a/core/modules/file/tests/src/Functional/FileFieldWidgetTest.php b/core/modules/file/tests/src/Functional/FileFieldWidgetTest.php
index e096d19f69..71310a53e8 100644
--- a/core/modules/file/tests/src/Functional/FileFieldWidgetTest.php
+++ b/core/modules/file/tests/src/Functional/FileFieldWidgetTest.php
@@ -230,7 +230,7 @@ public function testMultiValuedWidget() {
     $this->assertSameSize($upload_files_node_creation, $node->{$field_name}, 'Node was successfully saved with multiple files.');
 
     // Try to upload exactly the allowed number of files on revision.
-    $this->uploadNodeFile($test_file, $field_name, $node->id(), 1, [], TRUE);
+    $this->uploadNodeFile($test_file, $field_name, $node->id(), 1, []);
     $node = $node_storage->loadUnchanged($nid);
     $this->assertCount($cardinality, $node->{$field_name}, 'Node was successfully revised to maximum number of files.');
 
diff --git a/core/modules/file/tests/src/Kernel/SaveTest.php b/core/modules/file/tests/src/Kernel/SaveTest.php
index 6e7524bdd5..67ba4329b3 100644
--- a/core/modules/file/tests/src/Kernel/SaveTest.php
+++ b/core/modules/file/tests/src/Kernel/SaveTest.php
@@ -50,7 +50,7 @@ public function testFileSave() {
     $loaded_file = File::load($file->id());
     // Verify that the timestamp didn't go backwards.
     $this->assertGreaterThanOrEqual($file->getChangedTime(), $loaded_file->getChangedTime());
-    $this->assertNotNull($loaded_file, 'Record still exists in the database.', 'File');
+    $this->assertNotNull($loaded_file, 'Record still exists in the database.');
     $this->assertEquals($file->isPermanent(), $loaded_file->isPermanent(), 'Status was saved correctly.');
     $this->assertEquals('en', $loaded_file->langcode->value, 'Langcode was saved correctly.');
 
diff --git a/core/modules/filter/tests/src/Kernel/Plugin/migrate/process/FilterSettingsTest.php b/core/modules/filter/tests/src/Kernel/Plugin/migrate/process/FilterSettingsTest.php
index 636850c815..51592ee8b9 100644
--- a/core/modules/filter/tests/src/Kernel/Plugin/migrate/process/FilterSettingsTest.php
+++ b/core/modules/filter/tests/src/Kernel/Plugin/migrate/process/FilterSettingsTest.php
@@ -24,7 +24,7 @@ class FilterSettingsTest extends MigrateTestCase {
    */
   public function testTransform($value, $destination_id, $expected_value) {
     $migration = $this->createMock(MigrationInterface::class);
-    $plugin = new FilterSettings([], 'filter_settings', [], $migration);
+    $plugin = new FilterSettings([], 'filter_settings', []);
 
     $executable = $this->createMock(MigrateExecutableInterface::class);
     $row = $this->getMockBuilder(Row::class)
diff --git a/core/modules/jsonapi/tests/src/Functional/ResourceTestBase.php b/core/modules/jsonapi/tests/src/Functional/ResourceTestBase.php
index 0092a95e97..a08b016383 100644
--- a/core/modules/jsonapi/tests/src/Functional/ResourceTestBase.php
+++ b/core/modules/jsonapi/tests/src/Functional/ResourceTestBase.php
@@ -2377,7 +2377,7 @@ public function testPatchIndividual() {
     $doc_multi_value_tests['data']['attributes']['field_rest_test_multivalue'] = $this->entity->get('field_rest_test_multivalue')->getValue();
     $doc_remove_item = $doc_multi_value_tests;
     unset($doc_remove_item['data']['attributes']['field_rest_test_multivalue'][0]);
-    $request_options[RequestOptions::BODY] = Json::encode($doc_remove_item, 'api_json');
+    $request_options[RequestOptions::BODY] = Json::encode($doc_remove_item);
     $response = $this->request('PATCH', $url, $request_options);
     $this->assertResourceResponse(200, FALSE, $response);
     $updated_entity = $this->entityLoadUnchanged($this->entity->id());
diff --git a/core/modules/jsonapi/tests/src/Unit/Normalizer/JsonApiDocumentTopLevelNormalizerTest.php b/core/modules/jsonapi/tests/src/Unit/Normalizer/JsonApiDocumentTopLevelNormalizerTest.php
index 589a0d4891..9254a3829a 100644
--- a/core/modules/jsonapi/tests/src/Unit/Normalizer/JsonApiDocumentTopLevelNormalizerTest.php
+++ b/core/modules/jsonapi/tests/src/Unit/Normalizer/JsonApiDocumentTopLevelNormalizerTest.php
@@ -7,7 +7,6 @@
 use Drupal\Core\Entity\EntityTypeInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Entity\FieldableEntityInterface;
-use Drupal\jsonapi\Context\FieldResolver;
 use Drupal\jsonapi\ResourceType\ResourceType;
 use Drupal\jsonapi\Normalizer\JsonApiDocumentTopLevelNormalizer;
 use Drupal\Tests\UnitTestCase;
@@ -37,7 +36,6 @@ class JsonApiDocumentTopLevelNormalizerTest extends UnitTestCase {
    */
   protected function setUp(): void {
     $resource_type_repository = $this->prophesize(ResourceTypeRepository::class);
-    $field_resolver = $this->prophesize(FieldResolver::class);
 
     $resource_type_repository
       ->getByTypeName(Argument::any())
@@ -68,8 +66,7 @@ protected function setUp(): void {
 
     $this->normalizer = new JsonApiDocumentTopLevelNormalizer(
       $entity_type_manager->reveal(),
-      $resource_type_repository->reveal(),
-      $field_resolver->reveal()
+      $resource_type_repository->reveal()
     );
 
     $serializer = $this->prophesize(DenormalizerInterface::class);
diff --git a/core/modules/locale/tests/src/Kernel/LocaleConfigSubscriberTest.php b/core/modules/locale/tests/src/Kernel/LocaleConfigSubscriberTest.php
index f059508eed..b7bfe21112 100644
--- a/core/modules/locale/tests/src/Kernel/LocaleConfigSubscriberTest.php
+++ b/core/modules/locale/tests/src/Kernel/LocaleConfigSubscriberTest.php
@@ -201,7 +201,7 @@ public function testLocaleDeleteTranslation() {
    */
   protected function setUpNoTranslation($config_name, $key, $source, $langcode) {
     $this->localeConfigManager->updateConfigTranslations([$config_name], [$langcode]);
-    $this->assertNoConfigOverride($config_name, $key, $source, $langcode);
+    $this->assertNoConfigOverride($config_name, $key);
     $this->assertNoTranslation($config_name, $langcode);
   }
 
@@ -346,7 +346,7 @@ protected function deleteLanguageOverride($config_name, $key, $source_value, $la
       ->save();
     $this->configFactory->reset($config_name);
 
-    $this->assertNoConfigOverride($config_name, $key, $source_value, $langcode);
+    $this->assertNoConfigOverride($config_name, $key);
   }
 
   /**
@@ -376,7 +376,7 @@ protected function deleteLocaleTranslationData($config_name, $key, $source_value
     $this->localeConfigManager->updateConfigTranslations([$config_name], [$langcode]);
     $this->configFactory->reset($config_name);
 
-    $this->assertNoConfigOverride($config_name, $key, $source_value, $langcode);
+    $this->assertNoConfigOverride($config_name, $key);
   }
 
   /**
diff --git a/core/modules/media_library/tests/src/FunctionalJavascript/WidgetUploadTest.php b/core/modules/media_library/tests/src/FunctionalJavascript/WidgetUploadTest.php
index 6bd9829ec2..37be455fc3 100644
--- a/core/modules/media_library/tests/src/FunctionalJavascript/WidgetUploadTest.php
+++ b/core/modules/media_library/tests/src/FunctionalJavascript/WidgetUploadTest.php
@@ -210,7 +210,7 @@ public function testWidgetUpload() {
     // Assert media type four should only allow jpg files by trying a png file
     // first.
     $png_uri_4 = $file_system->copy($png_image->uri, 'public://');
-    $this->addMediaFileToField('Add file', $file_system->realpath($png_uri_4), FALSE);
+    $this->addMediaFileToField('Add file', $file_system->realpath($png_uri_4));
     $this->waitForText('Only files with the following extensions are allowed');
     // Assert that jpg files are accepted by type four.
     $jpg_uri_2 = $file_system->copy($jpg_image->uri, 'public://');
@@ -553,7 +553,7 @@ public function testWidgetUploadAdvancedUi() {
     // Assert media type four should only allow jpg files by trying a png file
     // first.
     $png_uri_4 = $file_system->copy($png_image->uri, 'public://');
-    $this->addMediaFileToField('Add file', $file_system->realpath($png_uri_4), FALSE);
+    $this->addMediaFileToField('Add file', $file_system->realpath($png_uri_4));
     $this->waitForText('Only files with the following extensions are allowed');
     // Assert that jpg files are accepted by type four.
     $jpg_uri_2 = $file_system->copy($jpg_image->uri, 'public://');
diff --git a/core/modules/menu_link_content/tests/src/Kernel/Migrate/d6/MigrateMenuLinkLocalizedTest.php b/core/modules/menu_link_content/tests/src/Kernel/Migrate/d6/MigrateMenuLinkLocalizedTest.php
index 9ad274dca5..3839df7d17 100644
--- a/core/modules/menu_link_content/tests/src/Kernel/Migrate/d6/MigrateMenuLinkLocalizedTest.php
+++ b/core/modules/menu_link_content/tests/src/Kernel/Migrate/d6/MigrateMenuLinkLocalizedTest.php
@@ -53,7 +53,7 @@ public function testMenuLinkLocalized() {
       'attributes' => ['title' => 'fr - Test menu link 1'],
       'langcode' => 'fr',
       'alter' => TRUE,
-    ], 'internal:/user/login', -49, 0);
+    ], 'internal:/user/login', -49);
   }
 
 }
diff --git a/core/modules/menu_link_content/tests/src/Kernel/Plugin/migrate/process/LinkUriTest.php b/core/modules/menu_link_content/tests/src/Kernel/Plugin/migrate/process/LinkUriTest.php
index f52bd0f990..01ac9ffd84 100644
--- a/core/modules/menu_link_content/tests/src/Kernel/Plugin/migrate/process/LinkUriTest.php
+++ b/core/modules/menu_link_content/tests/src/Kernel/Plugin/migrate/process/LinkUriTest.php
@@ -182,11 +182,10 @@ public function providerTestDisablingRouteValidation() {
    */
   public function doTransform($value, $configuration = []) {
     $entityTypeManager = $this->container->get('entity_type.manager');
-    $routeBuilder = $this->container->get('router.builder');
     $row = new Row();
     $executable = $this->prophesize(MigrateExecutableInterface::class)->reveal();
 
-    $plugin = new LinkUri($configuration, 'link_uri', [], $entityTypeManager, $routeBuilder);
+    $plugin = new LinkUri($configuration, 'link_uri', [], $entityTypeManager);
     $actual = $plugin->transform($value, $executable, $row, 'destination_property');
 
     return $actual;
diff --git a/core/modules/migrate/tests/src/Unit/Event/EventBaseTest.php b/core/modules/migrate/tests/src/Unit/Event/EventBaseTest.php
index fc1b4bb942..fee181f582 100644
--- a/core/modules/migrate/tests/src/Unit/Event/EventBaseTest.php
+++ b/core/modules/migrate/tests/src/Unit/Event/EventBaseTest.php
@@ -20,8 +20,7 @@ class EventBaseTest extends UnitTestCase {
   public function testGetMigration() {
     $migration = $this->prophesize('\Drupal\migrate\Plugin\MigrationInterface')->reveal();
     $message_service = $this->prophesize('\Drupal\migrate\MigrateMessageInterface')->reveal();
-    $row = $this->prophesize('\Drupal\migrate\Row')->reveal();
-    $event = new EventBase($migration, $message_service, $row, [1, 2, 3]);
+    $event = new EventBase($migration, $message_service);
     $this->assertSame($migration, $event->getMigration());
   }
 
diff --git a/core/modules/responsive_image/src/ResponsiveImageStyleForm.php b/core/modules/responsive_image/src/ResponsiveImageStyleForm.php
index 7bceff174e..7413db5343 100644
--- a/core/modules/responsive_image/src/ResponsiveImageStyleForm.php
+++ b/core/modules/responsive_image/src/ResponsiveImageStyleForm.php
@@ -204,7 +204,7 @@ public function form(array $form, FormStateInterface $form_state) {
 
     $form['#tree'] = TRUE;
 
-    return parent::form($form, $form_state, $responsive_image_style);
+    return parent::form($form, $form_state);
   }
 
   /**
diff --git a/core/modules/shortcut/src/ShortcutAccessControlHandler.php b/core/modules/shortcut/src/ShortcutAccessControlHandler.php
index dbfd3a6880..6b39bd126d 100644
--- a/core/modules/shortcut/src/ShortcutAccessControlHandler.php
+++ b/core/modules/shortcut/src/ShortcutAccessControlHandler.php
@@ -52,7 +52,7 @@ public static function createInstance(ContainerInterface $container, EntityTypeI
    */
   protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
     if ($shortcut_set = $this->shortcutSetStorage->load($entity->bundle())) {
-      return shortcut_set_edit_access($shortcut_set, $account);
+      return shortcut_set_edit_access($shortcut_set);
     }
     // @todo Fix this bizarre code: how can a shortcut exist without a shortcut
     // set? The above if-test is unnecessary. See https://www.drupal.org/node/2339903.
@@ -64,7 +64,7 @@ protected function checkAccess(EntityInterface $entity, $operation, AccountInter
    */
   protected function checkCreateAccess(AccountInterface $account, array $context, $entity_bundle = NULL) {
     if ($shortcut_set = $this->shortcutSetStorage->load($entity_bundle)) {
-      return shortcut_set_edit_access($shortcut_set, $account);
+      return shortcut_set_edit_access($shortcut_set);
     }
     // @todo Fix this bizarre code: how can a shortcut exist without a shortcut
     // set? The above if-test is unnecessary. See https://www.drupal.org/node/2339903.
diff --git a/core/modules/shortcut/tests/src/Functional/ShortcutLinksTest.php b/core/modules/shortcut/tests/src/Functional/ShortcutLinksTest.php
index be4d92180c..5ecd7fa72e 100644
--- a/core/modules/shortcut/tests/src/Functional/ShortcutLinksTest.php
+++ b/core/modules/shortcut/tests/src/Functional/ShortcutLinksTest.php
@@ -372,7 +372,7 @@ public function testAccessShortcutsPermission() {
     $this->drupalLogin($this->drupalCreateUser([
       'access toolbar', 'access shortcuts', 'administer site configuration',
     ]));
-    $this->clickLink('Shortcuts', 0, 'Shortcut link found on page.');
+    $this->clickLink('Shortcuts', 0);
     $this->assertSession()->linkExists('Cron', 0, 'Cron shortcut link found on page.');
 
     $this->verifyAccessShortcutsPermissionForEditPages();
diff --git a/core/modules/system/tests/modules/form_test/src/FormTestServiceObject.php b/core/modules/system/tests/modules/form_test/src/FormTestServiceObject.php
index f4a89bf9fd..65ae8c19a7 100644
--- a/core/modules/system/tests/modules/form_test/src/FormTestServiceObject.php
+++ b/core/modules/system/tests/modules/form_test/src/FormTestServiceObject.php
@@ -58,7 +58,7 @@ public function validateForm(array &$form, FormStateInterface $form_state) {
    */
   public function submitForm(array &$form, FormStateInterface $form_state) {
     $this->messenger()->addStatus($this->t('The FormTestServiceObject::submitForm() method was used for this form.'));
-    $this->config('form_test.object', FALSE)
+    $this->config('form_test.object')
       ->set('bananas', $form_state->getValue('bananas'))
       ->save();
   }
diff --git a/core/modules/system/tests/src/Functional/Ajax/FrameworkTest.php b/core/modules/system/tests/src/Functional/Ajax/FrameworkTest.php
index 5f44d545a5..ccd21ca523 100644
--- a/core/modules/system/tests/src/Functional/Ajax/FrameworkTest.php
+++ b/core/modules/system/tests/src/Functional/Ajax/FrameworkTest.php
@@ -36,7 +36,7 @@ public function testAJAXRender() {
     // Verify that settings command is generated if JavaScript settings exist.
     $commands = $this->drupalGetAjax('ajax-test/render');
     $expected = new SettingsCommand(['ajax' => 'test'], TRUE);
-    $this->assertCommand($commands, $expected->render(), 'JavaScript settings command is present.');
+    $this->assertCommand($commands, $expected->render());
   }
 
   /**
@@ -86,7 +86,7 @@ public function testAJAXRenderError() {
     ];
     $commands = $this->drupalGetAjax('ajax-test/render-error', ['query' => $edit]);
     $expected = new AlertCommand($edit['message']);
-    $this->assertCommand($commands, $expected->render(), 'Custom error message is output.');
+    $this->assertCommand($commands, $expected->render());
   }
 
   /**
diff --git a/core/modules/system/tests/src/Functional/Batch/ProcessingTest.php b/core/modules/system/tests/src/Functional/Batch/ProcessingTest.php
index c30fd51ee2..a341cf121f 100644
--- a/core/modules/system/tests/src/Functional/Batch/ProcessingTest.php
+++ b/core/modules/system/tests/src/Functional/Batch/ProcessingTest.php
@@ -30,7 +30,7 @@ class ProcessingTest extends BrowserTestBase {
   public function testBatchNoForm() {
     // Displaying the page triggers batch 1.
     $this->drupalGet('batch-test/no-form');
-    $this->assertBatchMessages($this->_resultMessages('batch_1'), 'Batch for step 2 performed successfully.');
+    $this->assertBatchMessages($this->_resultMessages('batch_1'));
     $this->assertEquals($this->_resultStack('batch_1'), batch_test_stack(), 'Execution order was correct.');
     $this->assertSession()->pageTextContains('Redirection successful.');
   }
@@ -41,7 +41,7 @@ public function testBatchNoForm() {
   public function testBatchRedirectFinishedCallback() {
     // Displaying the page triggers batch 1.
     $this->drupalGet('batch-test/finish-redirect');
-    $this->assertBatchMessages($this->_resultMessages('batch_1'), 'Batch for step 2 performed successfully.');
+    $this->assertBatchMessages($this->_resultMessages('batch_1'));
     $this->assertEquals($this->_resultStack('batch_1'), batch_test_stack(), 'Execution order was correct.');
     // Verify that the custom redirection after batch execution displays the
     // correct page.
@@ -61,7 +61,7 @@ public function testBatchForm() {
     // character, so assert on each page that there is no escaped '<' as a way
     // of verifying that no markup is incorrectly escaped.
     $this->assertSession()->assertNoEscaped('<');
-    $this->assertBatchMessages($this->_resultMessages('batch_0'), 'Batch with no operation performed successfully.');
+    $this->assertBatchMessages($this->_resultMessages('batch_0'));
     $this->assertSession()->pageTextContains('Redirection successful.');
 
     // Batch 1: several simple operations.
@@ -69,7 +69,7 @@ public function testBatchForm() {
     $this->drupalGet('batch-test');
     $this->submitForm($edit, 'Submit');
     $this->assertSession()->assertNoEscaped('<');
-    $this->assertBatchMessages($this->_resultMessages('batch_1'), 'Batch with simple operations performed successfully.');
+    $this->assertBatchMessages($this->_resultMessages('batch_1'));
     $this->assertEquals($this->_resultStack('batch_1'), batch_test_stack(), 'Execution order was correct.');
     $this->assertSession()->pageTextContains('Redirection successful.');
 
@@ -78,7 +78,7 @@ public function testBatchForm() {
     $this->drupalGet('batch-test');
     $this->submitForm($edit, 'Submit');
     $this->assertSession()->assertNoEscaped('<');
-    $this->assertBatchMessages($this->_resultMessages('batch_2'), 'Batch with multistep operation performed successfully.');
+    $this->assertBatchMessages($this->_resultMessages('batch_2'));
     $this->assertEquals($this->_resultStack('batch_2'), batch_test_stack(), 'Execution order was correct.');
     $this->assertSession()->pageTextContains('Redirection successful.');
 
@@ -87,7 +87,7 @@ public function testBatchForm() {
     $this->drupalGet('batch-test');
     $this->submitForm($edit, 'Submit');
     $this->assertSession()->assertNoEscaped('<');
-    $this->assertBatchMessages($this->_resultMessages('batch_3'), 'Batch with simple and multistep operations performed successfully.');
+    $this->assertBatchMessages($this->_resultMessages('batch_3'));
     $this->assertEquals($this->_resultStack('batch_3'), batch_test_stack(), 'Execution order was correct.');
     $this->assertSession()->pageTextContains('Redirection successful.');
 
@@ -96,7 +96,7 @@ public function testBatchForm() {
     $this->drupalGet('batch-test');
     $this->submitForm($edit, 'Submit');
     $this->assertSession()->assertNoEscaped('<');
-    $this->assertBatchMessages($this->_resultMessages('batch_4'), 'Nested batch performed successfully.');
+    $this->assertBatchMessages($this->_resultMessages('batch_4'));
     $this->assertEquals($this->_resultStack('batch_4'), batch_test_stack(), 'Execution order was correct.');
     $this->assertSession()->pageTextContains('Redirection successful.');
 
@@ -107,8 +107,8 @@ public function testBatchForm() {
     $this->submitForm($edit, 'Submit');
     $this->assertSession()->assertNoEscaped('<');
     $this->assertSession()->responseContains('Redirection successful.');
-    $this->assertBatchMessages($this->_resultMessages('batch_4'), 'Nested batch performed successfully.');
-    $this->assertBatchMessages($this->_resultMessages('batch_7'), 'Nested batch performed successfully.');
+    $this->assertBatchMessages($this->_resultMessages('batch_4'));
+    $this->assertBatchMessages($this->_resultMessages('batch_7'));
     $expected_stack = array_merge($this->_resultStack('batch_4'), $this->_resultStack('batch_7'));
     $this->assertEquals($expected_stack, batch_test_stack(), 'Execution order was correct.');
     $batch = \Drupal::state()->get('batch_test_nested_order_multiple_batches');
@@ -137,14 +137,14 @@ public function testBatchFormMultistep() {
 
     // First step triggers batch 1.
     $this->submitForm([], 'Submit');
-    $this->assertBatchMessages($this->_resultMessages('batch_1'), 'Batch for step 1 performed successfully.');
+    $this->assertBatchMessages($this->_resultMessages('batch_1'));
     $this->assertEquals($this->_resultStack('batch_1'), batch_test_stack(), 'Execution order was correct.');
     $this->assertSession()->pageTextContains('step 2');
     $this->assertSession()->assertNoEscaped('<');
 
     // Second step triggers batch 2.
     $this->submitForm([], 'Submit');
-    $this->assertBatchMessages($this->_resultMessages('batch_2'), 'Batch for step 2 performed successfully.');
+    $this->assertBatchMessages($this->_resultMessages('batch_2'));
     $this->assertEquals($this->_resultStack('batch_2'), batch_test_stack(), 'Execution order was correct.');
     $this->assertSession()->pageTextContains('Redirection successful.');
     $this->assertSession()->assertNoEscaped('<');
@@ -168,7 +168,7 @@ public function testBatchFormMultipleBatches() {
     $this->drupalGet('batch-test/chained');
     $this->submitForm($edit, 'Submit');
     // Check that result messages are present and in the correct order.
-    $this->assertBatchMessages($this->_resultMessages('chained'), 'Batches defined in separate submit handlers performed successfully.');
+    $this->assertBatchMessages($this->_resultMessages('chained'));
     // The stack contains execution order of batch callbacks and submit
     // handlers and logging of corresponding $form_state->getValues().
     $this->assertEquals($this->_resultStack('chained', $value), batch_test_stack(), 'Execution order was correct, and $form_state is correctly persisted.');
@@ -186,7 +186,7 @@ public function testBatchFormProgrammatic() {
     $value = rand(0, 255);
     $this->drupalGet('batch-test/programmatic/' . $value);
     // Check that result messages are present and in the correct order.
-    $this->assertBatchMessages($this->_resultMessages('chained'), 'Batches defined in separate submit handlers performed successfully.');
+    $this->assertBatchMessages($this->_resultMessages('chained'));
     // The stack contains execution order of batch callbacks and submit
     // handlers and logging of corresponding $form_state->getValues().
     $this->assertEquals($this->_resultStack('chained', $value), batch_test_stack(), 'Execution order was correct, and $form_state is correctly persisted.');
@@ -212,7 +212,7 @@ public function testDrupalFormSubmitInBatch() {
   public function testBatchLargePercentage() {
     // Displaying the page triggers batch 5.
     $this->drupalGet('batch-test/large-percentage');
-    $this->assertBatchMessages($this->_resultMessages('batch_5'), 'Batch for step 2 performed successfully.');
+    $this->assertBatchMessages($this->_resultMessages('batch_5'));
     $this->assertEquals($this->_resultStack('batch_5'), batch_test_stack(), 'Execution order was correct.');
     $this->assertSession()->pageTextContains('Redirection successful.');
   }
diff --git a/core/modules/system/tests/src/Functional/Entity/EntityCacheTagsTestBase.php b/core/modules/system/tests/src/Functional/Entity/EntityCacheTagsTestBase.php
index 1f2dd2bd97..73fd3daf07 100644
--- a/core/modules/system/tests/src/Functional/Entity/EntityCacheTagsTestBase.php
+++ b/core/modules/system/tests/src/Functional/Entity/EntityCacheTagsTestBase.php
@@ -360,7 +360,7 @@ public function testReferencedEntity() {
     $empty_entity_listing_cache_tags = Cache::mergeTags($this->entity->getEntityType()->getListCacheTags(), $page_cache_tags);
 
     $nonempty_entity_listing_cache_tags = Cache::mergeTags($this->entity->getEntityType()->getListCacheTags(), $this->entity->getCacheTags());
-    $nonempty_entity_listing_cache_tags = Cache::mergeTags($nonempty_entity_listing_cache_tags, $this->getAdditionalCacheTagsForEntityListing($this->entity));
+    $nonempty_entity_listing_cache_tags = Cache::mergeTags($nonempty_entity_listing_cache_tags, $this->getAdditionalCacheTagsForEntityListing());
     $nonempty_entity_listing_cache_tags = Cache::mergeTags($nonempty_entity_listing_cache_tags, $page_cache_tags);
 
     $this->verifyPageCache($referencing_entity_url, 'MISS');
diff --git a/core/modules/system/tests/src/Functional/FileTransfer/FileTransferTest.php b/core/modules/system/tests/src/Functional/FileTransfer/FileTransferTest.php
index b96caa610d..6d5d6f4112 100644
--- a/core/modules/system/tests/src/Functional/FileTransfer/FileTransferTest.php
+++ b/core/modules/system/tests/src/Functional/FileTransfer/FileTransferTest.php
@@ -13,10 +13,6 @@
  * @group FileTransfer
  */
 class FileTransferTest extends BrowserTestBase {
-  protected $hostname = 'localhost';
-  protected $username = 'drupal';
-  protected $password = 'password';
-  protected $port = '42';
 
   /**
    * {@inheritdoc}
@@ -33,7 +29,7 @@ class FileTransferTest extends BrowserTestBase {
    */
   protected function setUp(): void {
     parent::setUp();
-    $this->testConnection = TestFileTransfer::factory($this->root, ['hostname' => $this->hostname, 'username' => $this->username, 'password' => $this->password, 'port' => $this->port]);
+    $this->testConnection = TestFileTransfer::factory($this->root, []);
   }
 
   public function _getFakeModuleFiles() {
diff --git a/core/modules/system/tests/src/Functional/FileTransfer/TestFileTransfer.php b/core/modules/system/tests/src/Functional/FileTransfer/TestFileTransfer.php
index 2794ea98b2..33bf01c253 100644
--- a/core/modules/system/tests/src/Functional/FileTransfer/TestFileTransfer.php
+++ b/core/modules/system/tests/src/Functional/FileTransfer/TestFileTransfer.php
@@ -36,12 +36,9 @@ class TestFileTransfer extends FileTransfer {
    */
   public $shouldIsDirectoryReturnTrue = FALSE;
 
-  public function __construct($jail, $username, $password, $hostname = 'localhost', $port = 9999) {
-    parent::__construct($jail, $username, $password, $hostname, $port);
-  }
-
   public static function factory($jail, $settings) {
-    return new TestFileTransfer($jail, $settings['username'], $settings['password'], $settings['hostname'], $settings['port']);
+    assert(is_array($settings));
+    return new TestFileTransfer($jail);
   }
 
   public function connect() {
diff --git a/core/modules/system/tests/src/Functional/Lock/LockFunctionalTest.php b/core/modules/system/tests/src/Functional/Lock/LockFunctionalTest.php
index 4d89c41b00..6e067bf8c7 100644
--- a/core/modules/system/tests/src/Functional/Lock/LockFunctionalTest.php
+++ b/core/modules/system/tests/src/Functional/Lock/LockFunctionalTest.php
@@ -30,34 +30,34 @@ public function testLockAcquire() {
     $lock = $this->container->get('lock');
     $lock_acquired = 'TRUE: Lock successfully acquired in \Drupal\system_test\Controller\SystemTestController::lockAcquire()';
     $lock_not_acquired = 'FALSE: Lock not acquired in \Drupal\system_test\Controller\SystemTestController::lockAcquire()';
-    $this->assertTrue($lock->acquire('system_test_lock_acquire'), 'Lock acquired by this request.', 'Lock');
-    $this->assertTrue($lock->acquire('system_test_lock_acquire'), 'Lock extended by this request.', 'Lock');
+    $this->assertTrue($lock->acquire('system_test_lock_acquire'), 'Lock acquired by this request.');
+    $this->assertTrue($lock->acquire('system_test_lock_acquire'), 'Lock extended by this request.');
     $lock->release('system_test_lock_acquire');
 
     // Cause another request to acquire the lock.
     $this->drupalGet('system-test/lock-acquire');
     $this->assertSession()->pageTextContains($lock_acquired);
     // The other request has finished, thus it should have released its lock.
-    $this->assertTrue($lock->acquire('system_test_lock_acquire'), 'Lock acquired by this request.', 'Lock');
+    $this->assertTrue($lock->acquire('system_test_lock_acquire'), 'Lock acquired by this request.');
     // This request holds the lock, so the other request cannot acquire it.
     $this->drupalGet('system-test/lock-acquire');
     $this->assertSession()->pageTextContains($lock_not_acquired);
     $lock->release('system_test_lock_acquire');
 
     // Try a very short timeout and lock breaking.
-    $this->assertTrue($lock->acquire('system_test_lock_acquire', 0.5), 'Lock acquired by this request.', 'Lock');
+    $this->assertTrue($lock->acquire('system_test_lock_acquire', 0.5), 'Lock acquired by this request.');
     sleep(1);
     // The other request should break our lock.
     $this->drupalGet('system-test/lock-acquire');
     $this->assertSession()->pageTextContains($lock_acquired);
     // We cannot renew it, since the other thread took it.
-    $this->assertFalse($lock->acquire('system_test_lock_acquire'), 'Lock cannot be extended by this request.', 'Lock');
+    $this->assertFalse($lock->acquire('system_test_lock_acquire'), 'Lock cannot be extended by this request.');
 
     // Check the shut-down function.
     $lock_acquired_exit = 'TRUE: Lock successfully acquired in \Drupal\system_test\Controller\SystemTestController::lockExit()';
     $this->drupalGet('system-test/lock-exit');
     $this->assertSession()->pageTextContains($lock_acquired_exit);
-    $this->assertTrue($lock->acquire('system_test_lock_exit'), 'Lock acquired by this request after the other request exits.', 'Lock');
+    $this->assertTrue($lock->acquire('system_test_lock_exit'), 'Lock acquired by this request after the other request exits.');
   }
 
   /**
diff --git a/core/modules/system/tests/src/Functional/Session/SessionTest.php b/core/modules/system/tests/src/Functional/Session/SessionTest.php
index 2781e5b86d..243b04332a 100644
--- a/core/modules/system/tests/src/Functional/Session/SessionTest.php
+++ b/core/modules/system/tests/src/Functional/Session/SessionTest.php
@@ -85,7 +85,7 @@ public function testSessionSaveRegenerate() {
   public function testDataPersistence() {
     $user = $this->drupalCreateUser([]);
     // Enable sessions.
-    $this->sessionReset($user->id());
+    $this->sessionReset();
 
     $this->drupalLogin($user);
 
@@ -151,7 +151,7 @@ public function testDataPersistence() {
 
     // Login, the data should persist.
     $this->drupalLogin($user);
-    $this->sessionReset($user->id());
+    $this->sessionReset();
     // Verify that the session persists for an authenticated user after
     // logging out and then back in.
     $this->drupalGet('session-test/get');
@@ -159,7 +159,7 @@ public function testDataPersistence() {
 
     // Change session and create another user.
     $user2 = $this->drupalCreateUser([]);
-    $this->sessionReset($user2->id());
+    $this->sessionReset();
     $this->drupalLogin($user2);
   }
 
diff --git a/core/modules/system/tests/src/Kernel/TimezoneResolverTest.php b/core/modules/system/tests/src/Kernel/TimezoneResolverTest.php
index ae7701f470..1b7bfc0205 100644
--- a/core/modules/system/tests/src/Kernel/TimezoneResolverTest.php
+++ b/core/modules/system/tests/src/Kernel/TimezoneResolverTest.php
@@ -7,7 +7,6 @@
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Symfony\Component\HttpKernel\HttpKernelInterface;
-use Symfony\Component\HttpKernel\KernelEvents;
 
 /**
  * @coversDefaultClass \Drupal\system\TimeZoneResolver
@@ -45,7 +44,7 @@ public function testGetTimeZone() {
     $eventDispatcher = $this->container->get('event_dispatcher');
     $kernel = $this->container->get('kernel');
 
-    $eventDispatcher->dispatch(new RequestEvent($kernel, Request::create('http://www.example.com'), HttpKernelInterface::MAIN_REQUEST, KernelEvents::REQUEST));
+    $eventDispatcher->dispatch(new RequestEvent($kernel, Request::create('http://www.example.com'), HttpKernelInterface::MAIN_REQUEST));
 
     $this->assertEquals('Australia/Adelaide', date_default_timezone_get());
 
diff --git a/core/modules/toolbar/src/Menu/ToolbarMenuLinkTree.php b/core/modules/toolbar/src/Menu/ToolbarMenuLinkTree.php
index 24ef4e7720..e40e646918 100644
--- a/core/modules/toolbar/src/Menu/ToolbarMenuLinkTree.php
+++ b/core/modules/toolbar/src/Menu/ToolbarMenuLinkTree.php
@@ -17,7 +17,7 @@ public function build(array $tree, $level = 0) {
       if (!$tree) {
         return [];
       }
-      $build = parent::build($tree, $level);
+      $build = parent::build($tree);
 
       /** @var \Drupal\Core\Menu\MenuLinkInterface $link */
       $first_link = reset($tree)->link;
@@ -30,7 +30,7 @@ public function build(array $tree, $level = 0) {
       return $build;
     }
     else {
-      return parent::build($tree, $level);
+      return parent::build($tree);
     }
   }
 
diff --git a/core/modules/user/src/AccountForm.php b/core/modules/user/src/AccountForm.php
index c74619fddc..1f6d36bc2a 100644
--- a/core/modules/user/src/AccountForm.php
+++ b/core/modules/user/src/AccountForm.php
@@ -306,7 +306,7 @@ public function form(array $form, FormStateInterface $form_state) {
       $form['timezone']['timezone']['#attributes'] = ['class' => ['timezone-detect']];
     }
 
-    return parent::form($form, $form_state, $account);
+    return parent::form($form, $form_state);
   }
 
   /**
@@ -430,7 +430,7 @@ protected function flagViolations(EntityConstraintViolationListInterface $violat
   public function submitForm(array &$form, FormStateInterface $form_state) {
     parent::submitForm($form, $form_state);
 
-    $user = $this->getEntity($form_state);
+    $user = $this->getEntity();
     // If there's a session set to the users id, remove the password reset tag
     // since a new password was saved.
     $this->getRequest()->getSession()->remove('pass_reset_' . $user->id());
diff --git a/core/modules/user/src/RegisterForm.php b/core/modules/user/src/RegisterForm.php
index 0a4da2dcf1..6ebb4edcdc 100644
--- a/core/modules/user/src/RegisterForm.php
+++ b/core/modules/user/src/RegisterForm.php
@@ -50,7 +50,7 @@ public function form(array $form, FormStateInterface $form_state) {
     }
 
     // Start with the default user account fields.
-    $form = parent::form($form, $form_state, $account);
+    $form = parent::form($form, $form_state);
 
     return $form;
   }
diff --git a/core/modules/user/src/RoleForm.php b/core/modules/user/src/RoleForm.php
index 34aa98e8fc..92a48c90da 100644
--- a/core/modules/user/src/RoleForm.php
+++ b/core/modules/user/src/RoleForm.php
@@ -42,7 +42,7 @@ public function form(array $form, FormStateInterface $form_state) {
       '#value' => $entity->getWeight(),
     ];
 
-    return parent::form($form, $form_state, $entity);
+    return parent::form($form, $form_state);
   }
 
   /**
diff --git a/core/modules/user/tests/src/Functional/UserBlocksTest.php b/core/modules/user/tests/src/Functional/UserBlocksTest.php
index 59f96ffa6a..dfc14fb0b1 100644
--- a/core/modules/user/tests/src/Functional/UserBlocksTest.php
+++ b/core/modules/user/tests/src/Functional/UserBlocksTest.php
@@ -41,7 +41,7 @@ protected function setUp(): void {
     $this->adminUser = $this->drupalCreateUser(['administer blocks']);
     $this->drupalLogin($this->adminUser);
     $this->drupalPlaceBlock('user_login_block', ['id' => 'user_blocks_test_user_login_block']);
-    $this->drupalLogout($this->adminUser);
+    $this->drupalLogout();
   }
 
   /**
diff --git a/core/modules/user/tests/src/Functional/UserCancelTest.php b/core/modules/user/tests/src/Functional/UserCancelTest.php
index d9a2f709e6..59c71814a0 100644
--- a/core/modules/user/tests/src/Functional/UserCancelTest.php
+++ b/core/modules/user/tests/src/Functional/UserCancelTest.php
@@ -390,7 +390,7 @@ public function testUserAnonymize() {
     $test_node = $node_storage->load($node->id());
     $this->assertEquals(0, $test_node->getOwnerId(), 'Node of the user has been attributed to anonymous user.');
     $this->assertTrue($test_node->isPublished());
-    $test_node = node_revision_load($revision, TRUE);
+    $test_node = node_revision_load($revision);
     $this->assertEquals(0, $test_node->getRevisionUser()->id(), 'Node revision of the user has been attributed to anonymous user.');
     $this->assertTrue($test_node->isPublished());
     $node_storage->resetCache([$revision_node->id()]);
diff --git a/core/modules/user/tests/src/Traits/UserCreationTrait.php b/core/modules/user/tests/src/Traits/UserCreationTrait.php
index 92a3101e18..0e3ee41311 100644
--- a/core/modules/user/tests/src/Traits/UserCreationTrait.php
+++ b/core/modules/user/tests/src/Traits/UserCreationTrait.php
@@ -92,12 +92,12 @@ protected function setUpCurrentUser(array $values = [], array $permissions = [],
         $admin = FALSE;
         $values = [];
       }
-      $user = $this->createUser($permissions, NULL, $admin, $values);
+      $user = $this->createUser($permissions, NULL);
     }
     catch (EntityStorageException $e) {
       if ($this instanceof KernelTestBase) {
         $this->installEntitySchema('user');
-        $user = $this->createUser($permissions, NULL, $admin, $values);
+        $user = $this->createUser($permissions, NULL);
       }
       else {
         throw $e;
@@ -118,7 +118,7 @@ protected function setUpCurrentUser(array $values = [], array $permissions = [],
     // user account before setting up the current user service to avoid
     // potential false positives caused by access control bypass.
     if ($autocreate_user_1) {
-      $user = $this->createUser($original_permissions, NULL, $original_admin, $original_values);
+      $user = $this->createUser($original_permissions, NULL);
     }
 
     $this->setCurrentUser($user);
diff --git a/core/modules/views/src/Entity/Render/EntityTranslationRenderTrait.php b/core/modules/views/src/Entity/Render/EntityTranslationRenderTrait.php
index 788174a1c3..178c1b1aa5 100644
--- a/core/modules/views/src/Entity/Render/EntityTranslationRenderTrait.php
+++ b/core/modules/views/src/Entity/Render/EntityTranslationRenderTrait.php
@@ -34,9 +34,11 @@ protected function getEntityTranslationRenderer() {
         '***LANGUAGE_entity_translation***' => 'TranslationLanguageRenderer',
         '***LANGUAGE_entity_default***' => 'DefaultLanguageRenderer',
       ];
+      $entity_type = $this->getEntityTypeManager()->getDefinition($this->getEntityTypeId());
       if (isset($dynamic_renderers[$rendering_language])) {
         // Dynamic language set based on result rows or instance defaults.
-        $renderer = $dynamic_renderers[$rendering_language];
+        $class = '\Drupal\views\Entity\Render\\' . $dynamic_renderers[$rendering_language];
+        $this->entityTranslationRenderer = new $class($view, $this->getLanguageManager(), $entity_type);
       }
       else {
         if (strpos($rendering_language, '***LANGUAGE_') !== FALSE) {
@@ -46,11 +48,8 @@ protected function getEntityTranslationRenderer() {
           // Specific langcode set.
           $langcode = $rendering_language;
         }
-        $renderer = 'ConfigurableLanguageRenderer';
+        $this->entityTranslationRenderer = new ConfigurableLanguageRenderer($view, $this->getLanguageManager(), $entity_type, $langcode);
       }
-      $class = '\Drupal\views\Entity\Render\\' . $renderer;
-      $entity_type = $this->getEntityTypeManager()->getDefinition($this->getEntityTypeId());
-      $this->entityTranslationRenderer = new $class($view, $this->getLanguageManager(), $entity_type, $langcode);
     }
     return $this->entityTranslationRenderer;
   }
diff --git a/core/modules/views/src/Plugin/views/argument/Date.php b/core/modules/views/src/Plugin/views/argument/Date.php
index 97918df9a9..502e264679 100644
--- a/core/modules/views/src/Plugin/views/argument/Date.php
+++ b/core/modules/views/src/Plugin/views/argument/Date.php
@@ -123,7 +123,7 @@ public function getDefaultArgument($raw = FALSE) {
       }
     }
 
-    return parent::getDefaultArgument($raw);
+    return parent::getDefaultArgument();
   }
 
   /**
diff --git a/core/modules/views/src/Plugin/views/display/DisplayPluginBase.php b/core/modules/views/src/Plugin/views/display/DisplayPluginBase.php
index 1eed2d4c2b..11cbaf4490 100644
--- a/core/modules/views/src/Plugin/views/display/DisplayPluginBase.php
+++ b/core/modules/views/src/Plugin/views/display/DisplayPluginBase.php
@@ -1687,7 +1687,7 @@ public function buildOptionsForm(&$form, FormStateInterface $form_state) {
         if (empty($style)) {
           $form['#title'] .= $this->t('Row style options');
         }
-        $plugin = $this->getPlugin(empty($style) ? 'row' : 'style', $name);
+        $plugin = $this->getPlugin(empty($style) ? 'row' : 'style');
         if ($plugin) {
           $form[$section] = [
             '#tree' => TRUE,
diff --git a/core/modules/views/src/Plugin/views/field/FieldPluginBase.php b/core/modules/views/src/Plugin/views/field/FieldPluginBase.php
index 3a30b1ee77..8428f1308c 100644
--- a/core/modules/views/src/Plugin/views/field/FieldPluginBase.php
+++ b/core/modules/views/src/Plugin/views/field/FieldPluginBase.php
@@ -636,7 +636,7 @@ public function buildOptionsForm(&$form, FormStateInterface $form_state) {
     ];
     $form['element_label_type'] = [
       '#title' => $this->t('Label HTML element'),
-      '#options' => $this->getElements(FALSE),
+      '#options' => $this->getElements(),
       '#type' => 'select',
       '#default_value' => $this->options['element_label_type'],
       '#description' => $this->t('Choose the HTML element to wrap around this label, e.g. H1, H2, etc.'),
@@ -680,7 +680,7 @@ public function buildOptionsForm(&$form, FormStateInterface $form_state) {
     ];
     $form['element_wrapper_type'] = [
       '#title' => $this->t('Wrapper HTML element'),
-      '#options' => $this->getElements(FALSE),
+      '#options' => $this->getElements(),
       '#type' => 'select',
       '#default_value' => $this->options['element_wrapper_type'],
       '#description' => $this->t('Choose the HTML element to wrap around this field and label, e.g. H1, H2, etc. This may not be used if the field and label are not rendered together, such as with a table.'),
diff --git a/core/modules/views/src/Tests/TestHelperPlugin.php b/core/modules/views/src/Tests/TestHelperPlugin.php
index 51d20bd68c..511fa036db 100644
--- a/core/modules/views/src/Tests/TestHelperPlugin.php
+++ b/core/modules/views/src/Tests/TestHelperPlugin.php
@@ -24,7 +24,7 @@ class TestHelperPlugin extends PluginBase {
    * @see \Drupal\views\Plugin\views\PluginBase::setOptionDefaults()
    */
   public function testSetOptionDefaults(&$storage, $options, $level = 0) {
-    $this->setOptionDefaults($storage, $options, $level);
+    $this->setOptionDefaults($storage, $options);
   }
 
   /**
diff --git a/core/modules/views/tests/src/Unit/EventSubscriber/RouteSubscriberTest.php b/core/modules/views/tests/src/Unit/EventSubscriber/RouteSubscriberTest.php
index 55d9fcf5c0..16167cf27d 100644
--- a/core/modules/views/tests/src/Unit/EventSubscriber/RouteSubscriberTest.php
+++ b/core/modules/views/tests/src/Unit/EventSubscriber/RouteSubscriberTest.php
@@ -97,7 +97,7 @@ public function testOnAlterRoutes() {
     $route_2 = new Route('test_route/example', ['_controller' => 'Drupal\Tests\Core\Controller\TestController']);
     $collection->add('test_route_2', $route_2);
 
-    $route_event = new RouteBuildEvent($collection, 'views');
+    $route_event = new RouteBuildEvent($collection);
 
     [$display_1, $display_2] = $this->setupMocks();
 
diff --git a/core/phpstan-baseline.neon b/core/phpstan-baseline.neon
index 82279b2b10..ba9019a042 100644
--- a/core/phpstan-baseline.neon
+++ b/core/phpstan-baseline.neon
@@ -15,11 +15,6 @@ parameters:
 			count: 1
 			path: assets/scaffold/files/default.settings.php
 
-		-
-			message: "#^Function _batch_process invoked with 1 parameter, 0 required\\.$#"
-			count: 1
-			path: includes/batch.inc
-
 		-
 			message: "#^Variable \\$finished might not be defined\\.$#"
 			count: 1
@@ -50,11 +45,6 @@ parameters:
 			count: 1
 			path: includes/install.core.inc
 
-		-
-			message: "#^Function _drupal_rewrite_settings_is_array_index invoked with 2 parameters, 1 required\\.$#"
-			count: 1
-			path: includes/install.inc
-
 		-
 			message: "#^Variable \\$current might not be defined\\.$#"
 			count: 1
@@ -200,11 +190,6 @@ parameters:
 			count: 1
 			path: lib/Drupal/Component/Gettext/PoMemoryWriter.php
 
-		-
-			message: "#^Class Drupal\\\\Component\\\\Render\\\\FormattableMarkup constructor invoked with 3 parameters, 2 required\\.$#"
-			count: 1
-			path: lib/Drupal/Component/Gettext/PoStreamReader.php
-
 		-
 			message: "#^Variable \\$log_vars might not be defined\\.$#"
 			count: 1
@@ -215,11 +200,6 @@ parameters:
 			count: 1
 			path: lib/Drupal/Component/Utility/Color.php
 
-		-
-			message: "#^Static method Drupal\\\\Component\\\\Utility\\\\Variable\\:\\:export\\(\\) invoked with 3 parameters, 1\\-2 required\\.$#"
-			count: 1
-			path: lib/Drupal/Component/Utility/Variable.php
-
 		-
 			message: "#^Variable \\$permission might not be defined\\.$#"
 			count: 1
@@ -230,11 +210,6 @@ parameters:
 			count: 1
 			path: lib/Drupal/Core/Access/CsrfRequestHeaderAccessCheck.php
 
-		-
-			message: "#^Method Drupal\\\\Core\\\\Executable\\\\ExecutableInterface\\:\\:execute\\(\\) invoked with 1 parameter, 0 required\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Action/ActionBase.php
-
 		-
 			message: "#^Call to method getDefinitions\\(\\) on an unknown class Drupal\\\\Core\\\\Plugin\\\\CategorizingPluginManagerTrait\\.$#"
 			count: 3
@@ -315,11 +290,6 @@ parameters:
 			count: 1
 			path: lib/Drupal/Core/Condition/ConditionManager.php
 
-		-
-			message: "#^Method Drupal\\\\Core\\\\Config\\\\ConfigInstaller\\:\\:createConfiguration\\(\\) invoked with 3 parameters, 2 required\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Config/ConfigInstaller.php
-
 		-
 			message: "#^Variable \\$value in isset\\(\\) always exists and is not nullable\\.$#"
 			count: 2
@@ -370,11 +340,6 @@ parameters:
 			count: 2
 			path: lib/Drupal/Core/Datetime/DateHelper.php
 
-		-
-			message: "#^Class Symfony\\\\Component\\\\DependencyInjection\\\\Reference constructor invoked with 3 parameters, 1\\-2 required\\.$#"
-			count: 1
-			path: lib/Drupal/Core/DependencyInjection/YamlFileLoader.php
-
 		-
 			message: "#^Method Drupal\\\\Core\\\\DrupalKernel\\:\\:discoverServiceProviders\\(\\) should return array but return statement is missing\\.$#"
 			count: 1
@@ -820,26 +785,11 @@ parameters:
 			count: 1
 			path: lib/Drupal/Core/TypedData/Validation/RecursiveContextualValidator.php
 
-		-
-			message: "#^Class Drupal\\\\Core\\\\Update\\\\UpdateBackend constructor invoked with 2 parameters, 1 required\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Update/UpdateCacheBackendFactory.php
-
-		-
-			message: "#^Method Drupal\\\\Core\\\\Update\\\\UpdateKernel\\:\\:bootSession\\(\\) invoked with 2 parameters, 1 required\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Update/UpdateKernel.php
-
 		-
 			message: "#^Method Drupal\\\\Core\\\\Update\\\\UpdateKernel\\:\\:discoverServiceProviders\\(\\) should return array but return statement is missing\\.$#"
 			count: 1
 			path: lib/Drupal/Core/Update/UpdateKernel.php
 
-		-
-			message: "#^Method Drupal\\\\Core\\\\Update\\\\UpdateKernel\\:\\:handleAccess\\(\\) invoked with 2 parameters, 1 required\\.$#"
-			count: 1
-			path: lib/Drupal/Core/Update/UpdateKernel.php
-
 		-
 			message: "#^Method Drupal\\\\Core\\\\Updater\\\\Module\\:\\:postUpdateTasks\\(\\) should return array but return statement is missing\\.$#"
 			count: 1
@@ -875,11 +825,6 @@ parameters:
 			count: 1
 			path: modules/big_pipe/tests/modules/big_pipe_test/src/BigPipePlaceholderTestCases.php
 
-		-
-			message: "#^Method Drupal\\\\Component\\\\Plugin\\\\PluginBase\\:\\:__construct\\(\\) invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/block/src/Plugin/migrate/process/BlockTheme.php
-
 		-
 			message: "#^Variable \\$position might not be defined\\.$#"
 			count: 4
@@ -890,11 +835,6 @@ parameters:
 			count: 1
 			path: modules/block/tests/src/Functional/BlockUiTest.php
 
-		-
-			message: "#^Class Drupal\\\\block\\\\Plugin\\\\migrate\\\\process\\\\BlockSettings constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/block/tests/src/Unit/Plugin/migrate/process/BlockSettingsTest.php
-
 		-
 			message: "#^Variable \\$row in empty\\(\\) is never defined\\.$#"
 			count: 1
@@ -995,11 +935,6 @@ parameters:
 			count: 1
 			path: modules/comment/src/CommentForm.php
 
-		-
-			message: "#^Method Drupal\\\\Core\\\\Entity\\\\ContentEntityForm\\:\\:form\\(\\) invoked with 3 parameters, 2 required\\.$#"
-			count: 1
-			path: modules/comment/src/CommentForm.php
-
 		-
 			message: "#^Method Drupal\\\\comment\\\\CommentForm\\:\\:save\\(\\) should return int but return statement is missing\\.$#"
 			count: 1
@@ -1055,11 +990,6 @@ parameters:
 			count: 1
 			path: modules/comment/tests/src/Functional/CommentLanguageTest.php
 
-		-
-			message: "#^Method PHPUnit\\\\Framework\\\\Assert\\:\\:fail\\(\\) invoked with 2 parameters, 0\\-1 required\\.$#"
-			count: 1
-			path: modules/comment/tests/src/Functional/CommentPagerTest.php
-
 		-
 			message: "#^Variable \\$mode_text might not be defined\\.$#"
 			count: 1
@@ -1110,11 +1040,6 @@ parameters:
 			count: 1
 			path: modules/contact/src/Entity/Message.php
 
-		-
-			message: "#^Method Drupal\\\\Core\\\\Entity\\\\ContentEntityForm\\:\\:form\\(\\) invoked with 3 parameters, 2 required\\.$#"
-			count: 1
-			path: modules/contact/src/MessageForm.php
-
 		-
 			message: "#^Method Drupal\\\\contact\\\\MessageForm\\:\\:save\\(\\) should return int but return statement is missing\\.$#"
 			count: 1
@@ -1155,11 +1080,6 @@ parameters:
 			count: 5
 			path: modules/content_translation/src/ContentTranslationHandler.php
 
-		-
-			message: "#^Method Drupal\\\\content_translation\\\\ContentTranslationHandler\\:\\:addTranslatabilityClue\\(\\) invoked with 2 parameters, 1 required\\.$#"
-			count: 1
-			path: modules/content_translation/src/ContentTranslationHandler.php
-
 		-
 			message: "#^Call to deprecated constant REQUEST_TIME\\: Deprecated in drupal\\:8\\.3\\.0 and is removed from drupal\\:10\\.0\\.0\\. Use \\\\Drupal\\:\\:time\\(\\)\\-\\>getRequestTime\\(\\); $#"
 			count: 1
@@ -1260,11 +1180,6 @@ parameters:
 			count: 1
 			path: modules/dblog/tests/src/Kernel/DbLogTest.php
 
-		-
-			message: "#^Method Drupal\\\\Tests\\\\BrowserTestBase\\:\\:drupalLogout\\(\\) invoked with 1 parameter, 0 required\\.$#"
-			count: 2
-			path: modules/editor/tests/src/Functional/EditorLoadingTest.php
-
 		-
 			message: "#^Variable \\$items in empty\\(\\) always exists and is not falsy\\.$#"
 			count: 1
@@ -1290,26 +1205,6 @@ parameters:
 			count: 1
 			path: modules/field/tests/src/Kernel/Timestamp/TimestampFormatterTest.php
 
-		-
-			message: "#^Class Drupal\\\\field\\\\Plugin\\\\migrate\\\\process\\\\d6\\\\FieldInstanceSettings constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/field/tests/src/Unit/Plugin/migrate/process/d6/FieldInstanceSettingsTest.php
-
-		-
-			message: "#^Class Drupal\\\\field\\\\Plugin\\\\migrate\\\\process\\\\d6\\\\FieldSettings constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/field/tests/src/Unit/Plugin/migrate/process/d6/FieldSettingsTest.php
-
-		-
-			message: "#^Class Drupal\\\\field\\\\Plugin\\\\migrate\\\\process\\\\d7\\\\FieldInstanceSettings constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/field/tests/src/Unit/Plugin/migrate/process/d7/FieldInstanceSettingsTest.php
-
-		-
-			message: "#^Class Drupal\\\\field\\\\Plugin\\\\migrate\\\\process\\\\d7\\\\FieldSettings constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/field/tests/src/Unit/Plugin/migrate/process/d7/FieldSettingsTest.php
-
 		-
 			message: "#^Variable \\$entity_display might not be defined\\.$#"
 			count: 1
@@ -1345,11 +1240,6 @@ parameters:
 			count: 1
 			path: modules/field_ui/src/Form/FieldConfigEditForm.php
 
-		-
-			message: "#^Static method Drupal\\\\field_ui\\\\FieldUI\\:\\:getNextDestination\\(\\) invoked with 2 parameters, 1 required\\.$#"
-			count: 1
-			path: modules/field_ui/src/Form/FieldStorageAddForm.php
-
 		-
 			message: "#^Method Drupal\\\\field_ui\\\\Form\\\\FieldStorageConfigEditForm\\:\\:save\\(\\) should return int but return statement is missing\\.$#"
 			count: 1
@@ -1395,11 +1285,6 @@ parameters:
 			count: 2
 			path: modules/file/tests/src/Functional/FileFieldRevisionTest.php
 
-		-
-			message: "#^Method Drupal\\\\Tests\\\\file\\\\Functional\\\\FileFieldTestBase\\:\\:uploadNodeFile\\(\\) invoked with 6 parameters, 3\\-5 required\\.$#"
-			count: 1
-			path: modules/file/tests/src/Functional/FileFieldWidgetTest.php
-
 		-
 			message: "#^Variable \\$unexpected in empty\\(\\) always exists and is not falsy\\.$#"
 			count: 1
@@ -1425,11 +1310,6 @@ parameters:
 			count: 1
 			path: modules/file/tests/src/Kernel/FileManagedUnitTestBase.php
 
-		-
-			message: "#^Method PHPUnit\\\\Framework\\\\Assert\\:\\:assertNotNull\\(\\) invoked with 3 parameters, 1\\-2 required\\.$#"
-			count: 1
-			path: modules/file/tests/src/Kernel/SaveTest.php
-
 		-
 			message: "#^Call to deprecated constant REQUEST_TIME\\: Deprecated in drupal\\:8\\.3\\.0 and is removed from drupal\\:10\\.0\\.0\\. Use \\\\Drupal\\:\\:time\\(\\)\\-\\>getRequestTime\\(\\); $#"
 			count: 2
@@ -1440,11 +1320,6 @@ parameters:
 			count: 1
 			path: modules/filter/src/Plugin/Filter/FilterHtml.php
 
-		-
-			message: "#^Class Drupal\\\\filter\\\\Plugin\\\\migrate\\\\process\\\\FilterSettings constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/filter/tests/src/Kernel/Plugin/migrate/process/FilterSettingsTest.php
-
 		-
 			message: "#^Method Drupal\\\\forum\\\\ForumManager\\:\\:getTopicOrder\\(\\) should return array but return statement is missing\\.$#"
 			count: 1
@@ -1540,11 +1415,6 @@ parameters:
 			count: 1
 			path: modules/jsonapi/src/Revisions/VersionNegotiator.php
 
-		-
-			message: "#^Static method Drupal\\\\Component\\\\Serialization\\\\Json\\:\\:encode\\(\\) invoked with 2 parameters, 1 required\\.$#"
-			count: 1
-			path: modules/jsonapi/tests/src/Functional/ResourceTestBase.php
-
 		-
 			message: "#^Variable \\$created_entity might not be defined\\.$#"
 			count: 1
@@ -1565,11 +1435,6 @@ parameters:
 			count: 2
 			path: modules/jsonapi/tests/src/Functional/ResourceTestBase.php
 
-		-
-			message: "#^Class Drupal\\\\jsonapi\\\\Normalizer\\\\JsonApiDocumentTopLevelNormalizer constructor invoked with 3 parameters, 2 required\\.$#"
-			count: 1
-			path: modules/jsonapi/tests/src/Unit/Normalizer/JsonApiDocumentTopLevelNormalizerTest.php
-
 		-
 			message: "#^Variable \\$id in isset\\(\\) always exists and is not nullable\\.$#"
 			count: 2
@@ -1690,11 +1555,6 @@ parameters:
 			count: 2
 			path: modules/locale/tests/src/Functional/LocaleUpdateInterfaceTest.php
 
-		-
-			message: "#^Method Drupal\\\\Tests\\\\locale\\\\Kernel\\\\LocaleConfigSubscriberTest\\:\\:assertNoConfigOverride\\(\\) invoked with 4 parameters, 2 required\\.$#"
-			count: 3
-			path: modules/locale/tests/src/Kernel/LocaleConfigSubscriberTest.php
-
 		-
 			message: "#^Variable \\$error in empty\\(\\) always exists and is not falsy\\.$#"
 			count: 1
@@ -1720,11 +1580,6 @@ parameters:
 			count: 1
 			path: modules/media_library/tests/src/FunctionalJavascript/EmbeddedFormWidgetTest.php
 
-		-
-			message: "#^Method Drupal\\\\Tests\\\\media_library\\\\FunctionalJavascript\\\\MediaLibraryTestBase\\:\\:addMediaFileToField\\(\\) invoked with 3 parameters, 2 required\\.$#"
-			count: 2
-			path: modules/media_library/tests/src/FunctionalJavascript/WidgetUploadTest.php
-
 		-
 			message: "#^Constructor of class Drupal\\\\menu_link_content\\\\Form\\\\MenuLinkContentForm has an unused parameter \\$language_manager\\.$#"
 			count: 1
@@ -1745,16 +1600,6 @@ parameters:
 			count: 2
 			path: modules/menu_link_content/tests/src/Kernel/MenuLinksTest.php
 
-		-
-			message: "#^Method Drupal\\\\Tests\\\\menu_link_content\\\\Kernel\\\\Migrate\\\\d6\\\\MigrateMenuLinkLocalizedTest\\:\\:assertEntity\\(\\) invoked with 11 parameters, 10 required\\.$#"
-			count: 1
-			path: modules/menu_link_content/tests/src/Kernel/Migrate/d6/MigrateMenuLinkLocalizedTest.php
-
-		-
-			message: "#^Class Drupal\\\\menu_link_content\\\\Plugin\\\\migrate\\\\process\\\\LinkUri constructor invoked with 5 parameters, 4 required\\.$#"
-			count: 1
-			path: modules/menu_link_content/tests/src/Kernel/Plugin/migrate/process/LinkUriTest.php
-
 		-
 			message: "#^Method Drupal\\\\menu_ui\\\\MenuForm\\:\\:save\\(\\) should return int but return statement is missing\\.$#"
 			count: 1
@@ -1820,11 +1665,6 @@ parameters:
 			count: 1
 			path: modules/migrate/tests/src/Kernel/MigrateTestBase.php
 
-		-
-			message: "#^Class Drupal\\\\migrate\\\\Event\\\\EventBase constructor invoked with 4 parameters, 2 required\\.$#"
-			count: 1
-			path: modules/migrate/tests/src/Unit/Event/EventBaseTest.php
-
 		-
 			message: "#^Variable \\$sub_process_plugins might not be defined\\.$#"
 			count: 2
@@ -2105,26 +1945,11 @@ parameters:
 			count: 1
 			path: modules/responsive_image/src/Plugin/Field/FieldFormatter/ResponsiveImageFormatter.php
 
-		-
-			message: "#^Method Drupal\\\\Core\\\\Entity\\\\EntityForm\\:\\:form\\(\\) invoked with 3 parameters, 2 required\\.$#"
-			count: 1
-			path: modules/responsive_image/src/ResponsiveImageStyleForm.php
-
 		-
 			message: "#^Method Drupal\\\\responsive_image\\\\ResponsiveImageStyleForm\\:\\:save\\(\\) should return int but return statement is missing\\.$#"
 			count: 1
 			path: modules/responsive_image/src/ResponsiveImageStyleForm.php
 
-		-
-			message: "#^Class Drupal\\\\views\\\\Entity\\\\Render\\\\DefaultLanguageRenderer constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/rest/src/Plugin/views/row/DataEntityRow.php
-
-		-
-			message: "#^Class Drupal\\\\views\\\\Entity\\\\Render\\\\TranslationLanguageRenderer constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/rest/src/Plugin/views/row/DataEntityRow.php
-
 		-
 			message: "#^Method Drupal\\\\rest\\\\Routing\\\\ResourceRoutes\\:\\:onDynamicRouteEvent\\(\\) should return array but return statement is missing\\.$#"
 			count: 1
@@ -2200,11 +2025,6 @@ parameters:
 			count: 1
 			path: modules/shortcut/src/Form/SetCustomize.php
 
-		-
-			message: "#^Function shortcut_set_edit_access invoked with 2 parameters, 0\\-1 required\\.$#"
-			count: 2
-			path: modules/shortcut/src/ShortcutAccessControlHandler.php
-
 		-
 			message: "#^Method Drupal\\\\shortcut\\\\ShortcutForm\\:\\:save\\(\\) should return int but return statement is missing\\.$#"
 			count: 1
@@ -2215,11 +2035,6 @@ parameters:
 			count: 1
 			path: modules/shortcut/src/ShortcutSetForm.php
 
-		-
-			message: "#^Method Drupal\\\\Tests\\\\BrowserTestBase\\:\\:clickLink\\(\\) invoked with 3 parameters, 1\\-2 required\\.$#"
-			count: 1
-			path: modules/shortcut/tests/src/Functional/ShortcutLinksTest.php
-
 		-
 			message: "#^Variable \\$args might not be defined\\.$#"
 			count: 1
@@ -2325,11 +2140,6 @@ parameters:
 			count: 1
 			path: modules/system/tests/modules/form_test/src/Form/FormTestTableSelectJsSelectForm.php
 
-		-
-			message: "#^Method Drupal\\\\Core\\\\Form\\\\ConfigFormBase\\:\\:config\\(\\) invoked with 2 parameters, 1 required\\.$#"
-			count: 1
-			path: modules/system/tests/modules/form_test/src/FormTestServiceObject.php
-
 		-
 			message: "#^Constructor of class Drupal\\\\lazy_route_provider_install_test\\\\PluginManager has an unused parameter \\$cache_backend\\.$#"
 			count: 1
@@ -2345,21 +2155,6 @@ parameters:
 			count: 1
 			path: modules/system/tests/modules/module_installer_config_test/src/Entity/TestConfigType.php
 
-		-
-			message: "#^Method Drupal\\\\Tests\\\\system\\\\Functional\\\\Ajax\\\\FrameworkTest\\:\\:assertCommand\\(\\) invoked with 3 parameters, 2 required\\.$#"
-			count: 2
-			path: modules/system/tests/src/Functional/Ajax/FrameworkTest.php
-
-		-
-			message: "#^Method Drupal\\\\Tests\\\\system\\\\Functional\\\\Batch\\\\ProcessingTest\\:\\:assertBatchMessages\\(\\) invoked with 2 parameters, 1 required\\.$#"
-			count: 14
-			path: modules/system/tests/src/Functional/Batch/ProcessingTest.php
-
-		-
-			message: "#^Method Drupal\\\\Tests\\\\system\\\\Functional\\\\Entity\\\\EntityCacheTagsTestBase\\:\\:getAdditionalCacheTagsForEntityListing\\(\\) invoked with 1 parameter, 0 required\\.$#"
-			count: 1
-			path: modules/system/tests/src/Functional/Entity/EntityCacheTagsTestBase.php
-
 		-
 			message: "#^Instantiated class Drupal\\\\Tests\\\\system\\\\Functional\\\\FileTransfer\\\\Exception not found\\.$#"
 			count: 1
@@ -2370,11 +2165,6 @@ parameters:
 			count: 5
 			path: modules/system/tests/src/Functional/FileTransfer/TestFileTransfer.php
 
-		-
-			message: "#^Method Drupal\\\\Core\\\\FileTransfer\\\\FileTransfer\\:\\:__construct\\(\\) invoked with 5 parameters, 1 required\\.$#"
-			count: 1
-			path: modules/system/tests/src/Functional/FileTransfer/TestFileTransfer.php
-
 		-
 			message: "#^Variable \\$checked might not be defined\\.$#"
 			count: 1
@@ -2385,16 +2175,6 @@ parameters:
 			count: 2
 			path: modules/system/tests/src/Functional/Form/FormTest.php
 
-		-
-			message: "#^Method PHPUnit\\\\Framework\\\\Assert\\:\\:assertFalse\\(\\) invoked with 3 parameters, 1\\-2 required\\.$#"
-			count: 1
-			path: modules/system/tests/src/Functional/Lock/LockFunctionalTest.php
-
-		-
-			message: "#^Method PHPUnit\\\\Framework\\\\Assert\\:\\:assertTrue\\(\\) invoked with 3 parameters, 1\\-2 required\\.$#"
-			count: 5
-			path: modules/system/tests/src/Functional/Lock/LockFunctionalTest.php
-
 		-
 			message: "#^Variable \\$goto in isset\\(\\) always exists and is not nullable\\.$#"
 			count: 1
@@ -2410,11 +2190,6 @@ parameters:
 			count: 7
 			path: modules/system/tests/src/Functional/Menu/BreadcrumbTest.php
 
-		-
-			message: "#^Method Drupal\\\\Tests\\\\system\\\\Functional\\\\Session\\\\SessionTest\\:\\:sessionReset\\(\\) invoked with 1 parameter, 0 required\\.$#"
-			count: 3
-			path: modules/system/tests/src/Functional/Session/SessionTest.php
-
 		-
 			message: "#^Variable \\$expected_required_list_items might not be defined\\.$#"
 			count: 2
@@ -2425,11 +2200,6 @@ parameters:
 			count: 1
 			path: modules/system/tests/src/Kernel/Common/UrlTest.php
 
-		-
-			message: "#^Class Symfony\\\\Component\\\\HttpKernel\\\\Event\\\\RequestEvent constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/system/tests/src/Kernel/TimezoneResolverTest.php
-
 		-
 			message: "#^Call to deprecated constant REQUEST_TIME\\: Deprecated in drupal\\:8\\.3\\.0 and is removed from drupal\\:10\\.0\\.0\\. Use \\\\Drupal\\:\\:time\\(\\)\\-\\>getRequestTime\\(\\); $#"
 			count: 1
@@ -2525,11 +2295,6 @@ parameters:
 			count: 1
 			path: modules/toolbar/src/Controller/ToolbarController.php
 
-		-
-			message: "#^Method Drupal\\\\Core\\\\Menu\\\\MenuLinkTree\\:\\:build\\(\\) invoked with 2 parameters, 1 required\\.$#"
-			count: 2
-			path: modules/toolbar/src/Menu/ToolbarMenuLinkTree.php
-
 		-
 			message: "#^Method Drupal\\\\tour\\\\TipPluginBase\\:\\:get\\(\\) should return string but return statement is missing\\.$#"
 			count: 1
@@ -2550,16 +2315,6 @@ parameters:
 			count: 4
 			path: modules/update/src/UpdateProcessor.php
 
-		-
-			message: "#^Method Drupal\\\\Core\\\\Entity\\\\ContentEntityForm\\:\\:form\\(\\) invoked with 3 parameters, 2 required\\.$#"
-			count: 1
-			path: modules/user/src/AccountForm.php
-
-		-
-			message: "#^Method Drupal\\\\Core\\\\Entity\\\\EntityForm\\:\\:getEntity\\(\\) invoked with 1 parameter, 0 required\\.$#"
-			count: 1
-			path: modules/user/src/AccountForm.php
-
 		-
 			message: "#^Variable \\$users might not be defined\\.$#"
 			count: 1
@@ -2605,36 +2360,16 @@ parameters:
 			count: 1
 			path: modules/user/src/ProfileForm.php
 
-		-
-			message: "#^Method Drupal\\\\user\\\\AccountForm\\:\\:form\\(\\) invoked with 3 parameters, 2 required\\.$#"
-			count: 1
-			path: modules/user/src/RegisterForm.php
-
 		-
 			message: "#^Method Drupal\\\\user\\\\RegisterForm\\:\\:save\\(\\) should return int but return statement is missing\\.$#"
 			count: 1
 			path: modules/user/src/RegisterForm.php
 
-		-
-			message: "#^Method Drupal\\\\Core\\\\Entity\\\\EntityForm\\:\\:form\\(\\) invoked with 3 parameters, 2 required\\.$#"
-			count: 1
-			path: modules/user/src/RoleForm.php
-
 		-
 			message: "#^Method Drupal\\\\user\\\\RoleForm\\:\\:save\\(\\) should return int but return statement is missing\\.$#"
 			count: 1
 			path: modules/user/src/RoleForm.php
 
-		-
-			message: "#^Method Drupal\\\\Tests\\\\BrowserTestBase\\:\\:drupalLogout\\(\\) invoked with 1 parameter, 0 required\\.$#"
-			count: 1
-			path: modules/user/tests/src/Functional/UserBlocksTest.php
-
-		-
-			message: "#^Function node_revision_load invoked with 2 parameters, 0\\-1 required\\.$#"
-			count: 1
-			path: modules/user/tests/src/Functional/UserCancelTest.php
-
 		-
 			message: "#^Call to deprecated constant REQUEST_TIME\\: Deprecated in drupal\\:8\\.3\\.0 and is removed from drupal\\:10\\.0\\.0\\. Use \\\\Drupal\\:\\:time\\(\\)\\-\\>getRequestTime\\(\\); $#"
 			count: 2
@@ -2690,16 +2425,6 @@ parameters:
 			count: 1
 			path: modules/user/tests/src/Unit/UserAccessControlHandlerTest.php
 
-		-
-			message: "#^Class Drupal\\\\views\\\\Entity\\\\Render\\\\DefaultLanguageRenderer constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/views/src/Entity/Render/EntityFieldRenderer.php
-
-		-
-			message: "#^Class Drupal\\\\views\\\\Entity\\\\Render\\\\TranslationLanguageRenderer constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/views/src/Entity/Render/EntityFieldRenderer.php
-
 		-
 			message: "#^Variable \\$batch in isset\\(\\) is never defined\\.$#"
 			count: 1
@@ -2770,11 +2495,6 @@ parameters:
 			count: 1
 			path: modules/views/src/Plugin/views/argument/Date.php
 
-		-
-			message: "#^Method Drupal\\\\views\\\\Plugin\\\\views\\\\argument\\\\ArgumentPluginBase\\:\\:getDefaultArgument\\(\\) invoked with 1 parameter, 0 required\\.$#"
-			count: 1
-			path: modules/views/src/Plugin/views/argument/Date.php
-
 		-
 			message: "#^Method Drupal\\\\views\\\\Plugin\\\\views\\\\cache\\\\CachePluginBase\\:\\:cacheGet\\(\\) should return bool but return statement is missing\\.$#"
 			count: 1
@@ -2790,11 +2510,6 @@ parameters:
 			count: 1
 			path: modules/views/src/Plugin/views/display/DisplayPluginBase.php
 
-		-
-			message: "#^Method Drupal\\\\views\\\\Plugin\\\\views\\\\display\\\\DisplayPluginBase\\:\\:getPlugin\\(\\) invoked with 2 parameters, 1 required\\.$#"
-			count: 1
-			path: modules/views/src/Plugin/views/display/DisplayPluginBase.php
-
 		-
 			message: "#^Variable \\$pager in isset\\(\\) always exists and is not nullable\\.$#"
 			count: 1
@@ -2820,16 +2535,6 @@ parameters:
 			count: 1
 			path: modules/views/src/Plugin/views/field/Broken.php
 
-		-
-			message: "#^Class Drupal\\\\views\\\\Entity\\\\Render\\\\DefaultLanguageRenderer constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/views/src/Plugin/views/field/BulkForm.php
-
-		-
-			message: "#^Class Drupal\\\\views\\\\Entity\\\\Render\\\\TranslationLanguageRenderer constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/views/src/Plugin/views/field/BulkForm.php
-
 		-
 			message: "#^Variable \\$entity in empty\\(\\) always exists and is not falsy\\.$#"
 			count: 1
@@ -2865,21 +2570,6 @@ parameters:
 			count: 1
 			path: modules/views/src/Plugin/views/field/EntityField.php
 
-		-
-			message: "#^Class Drupal\\\\views\\\\Entity\\\\Render\\\\DefaultLanguageRenderer constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/views/src/Plugin/views/field/EntityOperations.php
-
-		-
-			message: "#^Class Drupal\\\\views\\\\Entity\\\\Render\\\\TranslationLanguageRenderer constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/views/src/Plugin/views/field/EntityOperations.php
-
-		-
-			message: "#^Method Drupal\\\\views\\\\Plugin\\\\views\\\\field\\\\FieldPluginBase\\:\\:getElements\\(\\) invoked with 1 parameter, 0 required\\.$#"
-			count: 2
-			path: modules/views/src/Plugin/views/field/FieldPluginBase.php
-
 		-
 			message: "#^Variable \\$options in empty\\(\\) always exists and is not falsy\\.$#"
 			count: 1
@@ -2895,16 +2585,6 @@ parameters:
 			count: 1
 			path: modules/views/src/Plugin/views/field/FieldPluginBase.php
 
-		-
-			message: "#^Class Drupal\\\\views\\\\Entity\\\\Render\\\\DefaultLanguageRenderer constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/views/src/Plugin/views/field/LinkBase.php
-
-		-
-			message: "#^Class Drupal\\\\views\\\\Entity\\\\Render\\\\TranslationLanguageRenderer constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/views/src/Plugin/views/field/LinkBase.php
-
 		-
 			message: "#^Method Drupal\\\\views\\\\Plugin\\\\views\\\\field\\\\Markup\\:\\:render\\(\\) should return Drupal\\\\Component\\\\Render\\\\MarkupInterface\\|string but return statement is missing\\.$#"
 			count: 1
@@ -2915,16 +2595,6 @@ parameters:
 			count: 1
 			path: modules/views/src/Plugin/views/field/PrerenderList.php
 
-		-
-			message: "#^Class Drupal\\\\views\\\\Entity\\\\Render\\\\DefaultLanguageRenderer constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/views/src/Plugin/views/field/RenderedEntity.php
-
-		-
-			message: "#^Class Drupal\\\\views\\\\Entity\\\\Render\\\\TranslationLanguageRenderer constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/views/src/Plugin/views/field/RenderedEntity.php
-
 		-
 			message: "#^Variable \\$entity in isset\\(\\) always exists and is not nullable\\.$#"
 			count: 1
@@ -2995,16 +2665,6 @@ parameters:
 			count: 1
 			path: modules/views/src/Plugin/views/relationship/GroupwiseMax.php
 
-		-
-			message: "#^Class Drupal\\\\views\\\\Entity\\\\Render\\\\DefaultLanguageRenderer constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/views/src/Plugin/views/row/EntityRow.php
-
-		-
-			message: "#^Class Drupal\\\\views\\\\Entity\\\\Render\\\\TranslationLanguageRenderer constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: modules/views/src/Plugin/views/row/EntityRow.php
-
 		-
 			message: "#^Variable \\$items might not be defined\\.$#"
 			count: 1
@@ -3045,11 +2705,6 @@ parameters:
 			count: 1
 			path: modules/views/src/Routing/ViewPageController.php
 
-		-
-			message: "#^Method Drupal\\\\views\\\\Plugin\\\\views\\\\PluginBase\\:\\:setOptionDefaults\\(\\) invoked with 3 parameters, 2 required\\.$#"
-			count: 1
-			path: modules/views/src/Tests/TestHelperPlugin.php
-
 		-
 			message: "#^Call to deprecated constant REQUEST_TIME\\: Deprecated in drupal\\:8\\.3\\.0 and is removed from drupal\\:10\\.0\\.0\\. Use \\\\Drupal\\:\\:time\\(\\)\\-\\>getRequestTime\\(\\); $#"
 			count: 1
@@ -3130,11 +2785,6 @@ parameters:
 			count: 2
 			path: modules/views/tests/src/Kernel/RenderCacheIntegrationTest.php
 
-		-
-			message: "#^Class Drupal\\\\Core\\\\Routing\\\\RouteBuildEvent constructor invoked with 2 parameters, 1 required\\.$#"
-			count: 1
-			path: modules/views/tests/src/Unit/EventSubscriber/RouteSubscriberTest.php
-
 		-
 			message: "#^Variable \\$entity_revision_data_table might not be defined\\.$#"
 			count: 1
@@ -3320,11 +2970,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/KernelTests/Core/Entity/EntityDisplayFormBaseTest.php
 
-		-
-			message: "#^Method Drupal\\\\KernelTests\\\\Core\\\\Entity\\\\EntityKernelTestBase\\:\\:createUser\\(\\) invoked with 4 parameters, 0\\-2 required\\.$#"
-			count: 3
-			path: tests/Drupal/KernelTests/Core/Entity/EntityKernelTestBase.php
-
 		-
 			message: "#^Variable \\$field might not be defined\\.$#"
 			count: 9
@@ -3335,16 +2980,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/KernelTests/Core/Entity/EntityTypeConstraintsTest.php
 
-		-
-			message: "#^Method PHPUnit\\\\Framework\\\\Assert\\:\\:assertFalse\\(\\) invoked with 3 parameters, 1\\-2 required\\.$#"
-			count: 1
-			path: tests/Drupal/KernelTests/Core/Entity/FieldSqlStorageTest.php
-
-		-
-			message: "#^Method PHPUnit\\\\Framework\\\\Assert\\:\\:assertTrue\\(\\) invoked with 3 parameters, 1\\-2 required\\.$#"
-			count: 2
-			path: tests/Drupal/KernelTests/Core/Entity/FieldSqlStorageTest.php
-
 		-
 			message: "#^Variable \\$e might not be defined\\.$#"
 			count: 1
@@ -3360,16 +2995,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/KernelTests/Core/Entity/FieldableEntityDefinitionUpdateTest.php
 
-		-
-			message: "#^Method PHPUnit\\\\Framework\\\\Assert\\:\\:assertFalse\\(\\) invoked with 3 parameters, 1\\-2 required\\.$#"
-			count: 2
-			path: tests/Drupal/KernelTests/Core/File/DirectoryTest.php
-
-		-
-			message: "#^Method PHPUnit\\\\Framework\\\\Assert\\:\\:assertTrue\\(\\) invoked with 3 parameters, 1\\-2 required\\.$#"
-			count: 3
-			path: tests/Drupal/KernelTests/Core/File/DirectoryTest.php
-
 		-
 			message: "#^Variable \\$x might not be defined\\.$#"
 			count: 1
@@ -3385,11 +3010,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/KernelTests/Core/KeyValueStore/GarbageCollectionTest.php
 
-		-
-			message: "#^Class Drupal\\\\Core\\\\Extension\\\\ModuleHandler constructor invoked with 4 parameters, 3 required\\.$#"
-			count: 1
-			path: tests/Drupal/KernelTests/Core/Plugin/PluginTestBase.php
-
 		-
 			message: "#^\\#pre_render callback 'element_info_test…' at key '1' is not trusted\\.$#"
 			count: 1
@@ -3415,26 +3035,6 @@ parameters:
 			count: 5
 			path: tests/Drupal/KernelTests/Core/TypedData/TypedDataTest.php
 
-		-
-			message: "#^Method PHPUnit\\\\Framework\\\\Assert\\:\\:assertNotEquals\\(\\) invoked with 4 parameters, 2\\-3 required\\.$#"
-			count: 1
-			path: tests/Drupal/KernelTests/KernelTestBase.php
-
-		-
-			message: "#^Method PHPUnit\\\\Framework\\\\Assert\\:\\:assertSame\\(\\) invoked with 4 parameters, 2\\-3 required\\.$#"
-			count: 1
-			path: tests/Drupal/KernelTests/KernelTestBase.php
-
-		-
-			message: "#^Method PHPUnit\\\\Framework\\\\Assert\\:\\:assertTrue\\(\\) invoked with 3 parameters, 1\\-2 required\\.$#"
-			count: 2
-			path: tests/Drupal/KernelTests/KernelTestBase.php
-
-		-
-			message: "#^Method PHPUnit\\\\Framework\\\\Assert\\:\\:fail\\(\\) invoked with 2 parameters, 0\\-1 required\\.$#"
-			count: 1
-			path: tests/Drupal/KernelTests/KernelTestBase.php
-
 		-
 			message: "#^Variable \\$value in isset\\(\\) always exists and is not nullable\\.$#"
 			count: 1
@@ -3485,11 +3085,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Component/DependencyInjection/Dumper/OptimizedPhpArrayDumperTest.php
 
-		-
-			message: "#^Method PHPUnit\\\\Framework\\\\TestCase\\:\\:expectException\\(\\) invoked with 2 parameters, 1 required\\.$#"
-			count: 3
-			path: tests/Drupal/Tests/Component/Gettext/PoStreamWriterTest.php
-
 		-
 			message: "#^Constructor of class Drupal\\\\Tests\\\\Component\\\\Plugin\\\\Factory\\\\ArgumentsAllNull has an unused parameter \\$charismatic\\.$#"
 			count: 1
@@ -3550,26 +3145,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Composer/ComposerTest.php
 
-		-
-			message: "#^Method PHPUnit\\\\Framework\\\\TestCase\\:\\:expectError\\(\\) invoked with 1 parameter, 0 required\\.$#"
-			count: 52
-			path: tests/Drupal/Tests/Core/Assert/WebAssertArgumentsTest.php
-
-		-
-			message: "#^Class Drupal\\\\Core\\\\Asset\\\\LibraryDiscovery constructor invoked with 2 parameters, 1 required\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Asset/LibraryDiscoveryTest.php
-
-		-
-			message: "#^Method PHPUnit\\\\Framework\\\\Assert\\:\\:assertTrue\\(\\) invoked with 3 parameters, 1\\-2 required\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Common/TagsTest.php
-
-		-
-			message: "#^Class Drupal\\\\Core\\\\Database\\\\Query\\\\Condition constructor invoked with 2 parameters, 1 required\\.$#"
-			count: 3
-			path: tests/Drupal/Tests/Core/Database/ConditionTest.php
-
 		-
 			message: "#^Class Drupal\\\\Driver\\\\Database\\\\corefake\\\\Install\\\\Tasks not found\\.$#"
 			count: 1
@@ -3590,46 +3165,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Core/Entity/EntityTypeBundleInfoTest.php
 
-		-
-			message: "#^Method PHPUnit\\\\Framework\\\\Assert\\:\\:stringStartsWith\\(\\) invoked with 2 parameters, 1 required\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/EventSubscriber/FinalExceptionSubscriberTest.php
-
-		-
-			message: "#^Class Drupal\\\\Core\\\\Routing\\\\RouteBuildEvent constructor invoked with 2 parameters, 1 required\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/EventSubscriber/ModuleRouteSubscriberTest.php
-
-		-
-			message: "#^Class Drupal\\\\Core\\\\Routing\\\\RouteBuildEvent constructor invoked with 2 parameters, 1 required\\.$#"
-			count: 2
-			path: tests/Drupal/Tests/Core/EventSubscriber/PathRootsSubscriberTest.php
-
-		-
-			message: "#^Class Drupal\\\\Core\\\\Routing\\\\RouteBuildEvent constructor invoked with 2 parameters, 1 required\\.$#"
-			count: 2
-			path: tests/Drupal/Tests/Core/EventSubscriber/SpecialAttributesRouteSubscriberTest.php
-
-		-
-			message: "#^Class Drupal\\\\Core\\\\State\\\\State constructor invoked with 3 parameters, 1 required\\.$#"
-			count: 2
-			path: tests/Drupal/Tests/Core/Extension/ThemeExtensionListTest.php
-
-		-
-			message: "#^Class Drupal\\\\Tests\\\\Core\\\\Extension\\\\TestThemeEngineExtensionList constructor invoked with 8 parameters, 7 required\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Extension/ThemeExtensionListTest.php
-
-		-
-			message: "#^Class Drupal\\\\Core\\\\Layout\\\\LayoutPluginManager constructor invoked with 5 parameters, 4 required\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Layout/LayoutPluginManagerTest.php
-
-		-
-			message: "#^Method Drupal\\\\Tests\\\\Core\\\\Menu\\\\LocalTaskManagerTest\\:\\:getLocalTasksCache\\(\\) invoked with 1 parameter, 0 required\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Menu/LocalTaskManagerTest.php
-
 		-
 			message: "#^Call to method getDefinitions\\(\\) on an unknown class Drupal\\\\Core\\\\Plugin\\\\CategorizingPluginManagerTrait\\.$#"
 			count: 3
@@ -3690,31 +3225,6 @@ parameters:
 			count: 1
 			path: tests/Drupal/Tests/Core/Render/RendererRecursionTest.php
 
-		-
-			message: "#^Class Drupal\\\\Core\\\\Cache\\\\Context\\\\ContextCacheKeys constructor invoked with 2 parameters, 1 required\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Render/RendererTestBase.php
-
-		-
-			message: "#^Method PHPUnit\\\\Framework\\\\Assert\\:\\:assertNotEquals\\(\\) invoked with 4 parameters, 2\\-3 required\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Test/AssertContentTraitTest.php
-
-		-
-			message: "#^Method PHPUnit\\\\Framework\\\\Assert\\:\\:assertSame\\(\\) invoked with 4 parameters, 2\\-3 required\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Test/AssertContentTraitTest.php
-
-		-
-			message: "#^Method PHPUnit\\\\Framework\\\\Assert\\:\\:assertTrue\\(\\) invoked with 3 parameters, 1\\-2 required\\.$#"
-			count: 2
-			path: tests/Drupal/Tests/Core/Test/AssertContentTraitTest.php
-
-		-
-			message: "#^Method PHPUnit\\\\Framework\\\\Assert\\:\\:fail\\(\\) invoked with 2 parameters, 0\\-1 required\\.$#"
-			count: 1
-			path: tests/Drupal/Tests/Core/Test/AssertContentTraitTest.php
-
 		-
 			message: "#^Variable \\$value in isset\\(\\) always exists and is not nullable\\.$#"
 			count: 1
diff --git a/core/tests/Drupal/FunctionalTests/MailCaptureTest.php b/core/tests/Drupal/FunctionalTests/MailCaptureTest.php
index 87cae976fb..d4bc642e71 100644
--- a/core/tests/Drupal/FunctionalTests/MailCaptureTest.php
+++ b/core/tests/Drupal/FunctionalTests/MailCaptureTest.php
@@ -51,7 +51,7 @@ public function testMailSend() {
     // Assert that the email was sent by iterating over the message properties
     // and ensuring that they are captured intact.
     foreach ($message as $field => $value) {
-      $this->assertMail($field, $value, new FormattableMarkup('The email was sent and the value for property @field is intact.', ['@field' => $field]), 'Email');
+      $this->assertMail($field, $value, new FormattableMarkup('The email was sent and the value for property @field is intact.', ['@field' => $field]));
     }
 
     // Send additional emails so more than one email is captured.
diff --git a/core/tests/Drupal/KernelTests/AssertContentTrait.php b/core/tests/Drupal/KernelTests/AssertContentTrait.php
index 6db9ddaf35..f569c40262 100644
--- a/core/tests/Drupal/KernelTests/AssertContentTrait.php
+++ b/core/tests/Drupal/KernelTests/AssertContentTrait.php
@@ -276,16 +276,11 @@ protected function getAllOptions(\SimpleXMLElement $element) {
    *   (optional) A message to display with the assertion. Do not translate
    *   messages: use strtr() to embed variables in the message text, not
    *   t(). If left blank, a default message will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE if the assertion succeeded.
    */
-  protected function assertLink($label, $index = 0, $message = '', $group = 'Other') {
+  protected function assertLink($label, $index = 0, $message = '') {
     // Cast MarkupInterface objects to string.
     $label = (string) $label;
     $links = $this->xpath('//a[normalize-space(text())=:label]', [':label' => $label]);
@@ -304,16 +299,11 @@ protected function assertLink($label, $index = 0, $message = '', $group = 'Other
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE if the assertion succeeded.
    */
-  protected function assertNoLink($label, $message = '', $group = 'Other') {
+  protected function assertNoLink($label, $message = '') {
     // Cast MarkupInterface objects to string.
     $label = (string) $label;
     $links = $this->xpath('//a[normalize-space(text())=:label]', [':label' => $label]);
@@ -334,16 +324,11 @@ protected function assertNoLink($label, $message = '', $group = 'Other') {
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE if the assertion succeeded.
    */
-  protected function assertLinkByHref($href, $index = 0, $message = '', $group = 'Other') {
+  protected function assertLinkByHref($href, $index = 0, $message = '') {
     $links = $this->xpath('//a[contains(@href, :href)]', [':href' => $href]);
     $message = ($message ? $message : new FormattableMarkup('Link containing href %href found.', ['%href' => $href]));
     $this->assertArrayHasKey($index, $links, $message);
@@ -360,16 +345,11 @@ protected function assertLinkByHref($href, $index = 0, $message = '', $group = '
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE if the assertion succeeded.
    */
-  protected function assertNoLinkByHref($href, $message = '', $group = 'Other') {
+  protected function assertNoLinkByHref($href, $message = '') {
     $links = $this->xpath('//a[contains(@href, :href)]', [':href' => $href]);
     $message = ($message ? $message : new FormattableMarkup('No link containing href %href found.', ['%href' => $href]));
     $this->assertEmpty($links, $message);
@@ -386,16 +366,11 @@ protected function assertNoLinkByHref($href, $message = '', $group = 'Other') {
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE if the assertion succeeded.
    */
-  protected function assertNoLinkByHrefInMainRegion($href, $message = '', $group = 'Other') {
+  protected function assertNoLinkByHrefInMainRegion($href, $message = '') {
     $links = $this->xpath('//main//a[contains(@href, :href)]', [':href' => $href]);
     $message = ($message ? $message : new FormattableMarkup('No link containing href %href found.', ['%href' => $href]));
     $this->assertEmpty($links, $message);
@@ -414,13 +389,8 @@ protected function assertNoLinkByHrefInMainRegion($href, $message = '', $group =
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    */
-  protected function assertRaw($raw, $message = '', $group = 'Other'): void {
+  protected function assertRaw($raw, $message = ''): void {
     if (!$message) {
       $message = 'Raw "' . Html::escape($raw) . '" found';
     }
@@ -439,13 +409,8 @@ protected function assertRaw($raw, $message = '', $group = 'Other'): void {
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    */
-  protected function assertNoRaw($raw, $message = '', $group = 'Other'): void {
+  protected function assertNoRaw($raw, $message = ''): void {
     if (!$message) {
       $message = 'Raw "' . Html::escape($raw) . '" not found';
     }
@@ -464,13 +429,8 @@ protected function assertNoRaw($raw, $message = '', $group = 'Other'): void {
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    */
-  protected function assertEscaped($raw, $message = '', $group = 'Other'): void {
+  protected function assertEscaped($raw, $message = ''): void {
     if (!$message) {
       $message = 'Escaped "' . Html::escape($raw) . '" found';
     }
@@ -490,13 +450,8 @@ protected function assertEscaped($raw, $message = '', $group = 'Other'): void {
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    */
-  protected function assertNoEscaped($raw, $message = '', $group = 'Other'): void {
+  protected function assertNoEscaped($raw, $message = ''): void {
     if (!$message) {
       $message = 'Escaped "' . Html::escape($raw) . '" not found';
     }
@@ -516,16 +471,11 @@ protected function assertNoEscaped($raw, $message = '', $group = 'Other'): void
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    *
    * @see \Drupal\KernelTests\AssertContentTrait::assertRaw()
    */
-  protected function assertText($text, $message = '', $group = 'Other'): void {
-    $this->assertTextHelper($text, $message, $group, FALSE);
+  protected function assertText($text, $message = ''): void {
+    $this->assertTextHelper($text, $message, NULL, FALSE);
   }
 
   /**
@@ -541,16 +491,11 @@ protected function assertText($text, $message = '', $group = 'Other'): void {
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    *
    * @see \Drupal\KernelTests\AssertContentTrait::assertNoRaw()
    */
-  protected function assertNoText($text, $message = '', $group = 'Other'): void {
-    $this->assertTextHelper($text, $message, $group, TRUE);
+  protected function assertNoText($text, $message = ''): void {
+    $this->assertTextHelper($text, $message, NULL, TRUE);
   }
 
   /**
@@ -566,15 +511,12 @@ protected function assertNoText($text, $message = '', $group = 'Other'): void {
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
    * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default. Defaults to 'Other'.
+   *   Deprecated.
    * @param bool $not_exists
    *   (optional) TRUE if this text should not exist, FALSE if it should.
    *   Defaults to TRUE.
    */
-  protected function assertTextHelper($text, $message = '', $group = 'Other', $not_exists = TRUE): void {
+  protected function assertTextHelper($text, $message = '', $group = NULL, $not_exists = TRUE): void {
     if (!$message) {
       $message = !$not_exists ? new FormattableMarkup('"@text" found', ['@text' => $text]) : new FormattableMarkup('"@text" not found', ['@text' => $text]);
     }
@@ -600,17 +542,12 @@ protected function assertTextHelper($text, $message = '', $group = 'Other', $not
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE on pass, FALSE on fail.
    */
-  protected function assertUniqueText($text, $message = '', $group = 'Other') {
-    return $this->assertUniqueTextHelper($text, $message, $group, TRUE);
+  protected function assertUniqueText($text, $message = '') {
+    return $this->assertUniqueTextHelper($text, $message, NULL, TRUE);
   }
 
   /**
@@ -627,17 +564,12 @@ protected function assertUniqueText($text, $message = '', $group = 'Other') {
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE on pass, FALSE on fail.
    */
-  protected function assertNoUniqueText($text, $message = '', $group = 'Other') {
-    return $this->assertUniqueTextHelper($text, $message, $group, FALSE);
+  protected function assertNoUniqueText($text, $message = '') {
+    return $this->assertUniqueTextHelper($text, $message, NULL, FALSE);
   }
 
   /**
@@ -653,10 +585,7 @@ protected function assertNoUniqueText($text, $message = '', $group = 'Other') {
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
    * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default. Defaults to 'Other'.
+   *   Deprecated.
    * @param bool $be_unique
    *   (optional) TRUE if this text should be found only once, FALSE if it
    *   should be found more than once. Defaults to FALSE.
@@ -664,7 +593,7 @@ protected function assertNoUniqueText($text, $message = '', $group = 'Other') {
    * @return bool
    *   TRUE on pass.
    */
-  protected function assertUniqueTextHelper($text, $message = '', $group = 'Other', $be_unique = FALSE) {
+  protected function assertUniqueTextHelper($text, $message = '', $group = NULL, $be_unique = FALSE) {
     // Cast MarkupInterface objects to string.
     $text = (string) $text;
     if (!$message) {
@@ -690,16 +619,11 @@ protected function assertUniqueTextHelper($text, $message = '', $group = 'Other'
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE on pass.
    */
-  protected function assertPattern($pattern, $message = '', $group = 'Other') {
+  protected function assertPattern($pattern, $message = '') {
     if (!$message) {
       $message = new FormattableMarkup('Pattern "@pattern" found', ['@pattern' => $pattern]);
     }
@@ -717,16 +641,11 @@ protected function assertPattern($pattern, $message = '', $group = 'Other') {
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE on pass.
    */
-  protected function assertNoPattern($pattern, $message = '', $group = 'Other') {
+  protected function assertNoPattern($pattern, $message = '') {
     if (!$message) {
       $message = new FormattableMarkup('Pattern "@pattern" not found', ['@pattern' => $pattern]);
     }
@@ -741,16 +660,11 @@ protected function assertNoPattern($pattern, $message = '', $group = 'Other') {
    *   Perl regex to look for including the regex delimiters.
    * @param string $message
    *   (optional) A message to display with the assertion.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE on pass.
    */
-  protected function assertTextPattern($pattern, $message = NULL, $group = 'Other') {
+  protected function assertTextPattern($pattern, $message = NULL) {
     if (!isset($message)) {
       $message = new FormattableMarkup('Pattern "@pattern" found', ['@pattern' => $pattern]);
     }
@@ -768,13 +682,8 @@ protected function assertTextPattern($pattern, $message = NULL, $group = 'Other'
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    */
-  protected function assertTitle($title, $message = '', $group = 'Other') {
+  protected function assertTitle($title, $message = '') {
     // Don't use xpath as it messes with HTML escaping.
     preg_match('@<title>(.*)</title>@', $this->getRawContent(), $matches);
     if (isset($matches[1])) {
@@ -802,13 +711,8 @@ protected function assertTitle($title, $message = '', $group = 'Other') {
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    */
-  protected function assertNoTitle($title, $message = '', $group = 'Other') {
+  protected function assertNoTitle($title, $message = '') {
     $actual = (string) current($this->xpath('//title'));
     if (!$message) {
       $message = new FormattableMarkup('Page title @actual is not equal to @unexpected.', [
@@ -816,7 +720,7 @@ protected function assertNoTitle($title, $message = '', $group = 'Other') {
         '@unexpected' => var_export($title, TRUE),
       ]);
     }
-    $this->assertNotEquals($title, $actual, $message, $group);
+    $this->assertNotEquals($title, $actual, $message);
   }
 
   /**
@@ -833,13 +737,8 @@ protected function assertNoTitle($title, $message = '', $group = 'Other') {
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    */
-  protected function assertThemeOutput($callback, array $variables = [], $expected = '', $message = '', $group = 'Other') {
+  protected function assertThemeOutput($callback, array $variables = [], $expected = '', $message = '') {
     /** @var \Drupal\Core\Render\RendererInterface $renderer */
     $renderer = \Drupal::service('renderer');
 
@@ -853,7 +752,7 @@ protected function assertThemeOutput($callback, array $variables = [], $expected
       $message = '%callback rendered correctly.';
     }
     $message = new FormattableMarkup($message, ['%callback' => 'theme_' . $callback . '()']);
-    $this->assertSame($expected, $output, $message, $group);
+    $this->assertSame($expected, $output, $message);
   }
 
   /**
@@ -869,16 +768,11 @@ protected function assertThemeOutput($callback, array $variables = [], $expected
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE on pass.
    */
-  protected function assertFieldsByValue($fields, $value = NULL, $message = '', $group = 'Other') {
+  protected function assertFieldsByValue($fields, $value = NULL, $message = '') {
     // If value specified then check array for match.
     $found = TRUE;
     if (isset($value)) {
@@ -929,19 +823,14 @@ protected function assertFieldsByValue($fields, $value = NULL, $message = '', $g
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE on pass, FALSE on fail.
    */
-  protected function assertFieldByXPath($xpath, $value = NULL, $message = '', $group = 'Other') {
+  protected function assertFieldByXPath($xpath, $value = NULL, $message = '') {
     $fields = $this->xpath($xpath);
 
-    return $this->assertFieldsByValue($fields, $value, $message, $group);
+    return $this->assertFieldsByValue($fields, $value, $message);
   }
 
   /**
@@ -980,16 +869,11 @@ protected function getSelectedItem(\SimpleXMLElement $element) {
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE on pass.
    */
-  protected function assertNoFieldByXPath($xpath, $value = NULL, $message = '', $group = 'Other') {
+  protected function assertNoFieldByXPath($xpath, $value = NULL, $message = '') {
     $fields = $this->xpath($xpath);
 
     // If value specified then check array for match.
@@ -1023,16 +907,11 @@ protected function assertNoFieldByXPath($xpath, $value = NULL, $message = '', $g
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Browser'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE on pass, FALSE on fail.
    */
-  protected function assertFieldByName($name, $value = NULL, $message = NULL, $group = 'Browser') {
+  protected function assertFieldByName($name, $value = NULL, $message = NULL) {
     if (!isset($message)) {
       if (!isset($value)) {
         $message = new FormattableMarkup('Found field with name @name', [
@@ -1046,7 +925,7 @@ protected function assertFieldByName($name, $value = NULL, $message = NULL, $gro
         ]);
       }
     }
-    return $this->assertFieldByXPath($this->constructFieldXpath('name', $name), $value, $message, $group);
+    return $this->assertFieldByXPath($this->constructFieldXpath('name', $name), $value, $message);
   }
 
   /**
@@ -1064,17 +943,12 @@ protected function assertFieldByName($name, $value = NULL, $message = NULL, $gro
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Browser'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE on pass, FALSE on fail.
    */
-  protected function assertNoFieldByName($name, $value = '', $message = '', $group = 'Browser') {
-    return $this->assertNoFieldByXPath($this->constructFieldXpath('name', $name), $value, $message ? $message : new FormattableMarkup('Did not find field by name @name', ['@name' => $name]), $group);
+  protected function assertNoFieldByName($name, $value = '', $message = '') {
+    return $this->assertNoFieldByXPath($this->constructFieldXpath('name', $name), $value, $message ? $message : new FormattableMarkup('Did not find field by name @name', ['@name' => $name]));
   }
 
   /**
@@ -1092,22 +966,17 @@ protected function assertNoFieldByName($name, $value = '', $message = '', $group
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Browser'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE on pass, FALSE on fail.
    */
-  protected function assertFieldById($id, $value = '', $message = '', $group = 'Browser') {
+  protected function assertFieldById($id, $value = '', $message = '') {
     // Cast MarkupInterface objects to string.
     if (isset($value)) {
       $value = (string) $value;
     }
     $message = (string) $message;
-    return $this->assertFieldByXPath($this->constructFieldXpath('id', $id), $value, $message ? $message : new FormattableMarkup('Found field by id @id', ['@id' => $id]), $group);
+    return $this->assertFieldByXPath($this->constructFieldXpath('id', $id), $value, $message ? $message : new FormattableMarkup('Found field by id @id', ['@id' => $id]));
   }
 
   /**
@@ -1125,17 +994,12 @@ protected function assertFieldById($id, $value = '', $message = '', $group = 'Br
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Browser'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE on pass, FALSE on fail.
    */
-  protected function assertNoFieldById($id, $value = '', $message = '', $group = 'Browser') {
-    return $this->assertNoFieldByXPath($this->constructFieldXpath('id', $id), $value, $message ? $message : new FormattableMarkup('Did not find field by id @id', ['@id' => $id]), $group);
+  protected function assertNoFieldById($id, $value = '', $message = '') {
+    return $this->assertNoFieldByXPath($this->constructFieldXpath('id', $id), $value, $message ? $message : new FormattableMarkup('Did not find field by id @id', ['@id' => $id]));
   }
 
   /**
@@ -1148,16 +1012,11 @@ protected function assertNoFieldById($id, $value = '', $message = '', $group = '
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Browser'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE on pass.
    */
-  protected function assertFieldChecked($id, $message = '', $group = 'Browser') {
+  protected function assertFieldChecked($id, $message = '') {
     $message = $message ? $message : new FormattableMarkup('Checkbox field @id is checked.', ['@id' => $id]);
     $elements = $this->xpath('//input[@id=:id]', [':id' => $id]);
     $this->assertNotEmpty($elements, $message);
@@ -1175,16 +1034,11 @@ protected function assertFieldChecked($id, $message = '', $group = 'Browser') {
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Browser'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE on pass.
    */
-  protected function assertNoFieldChecked($id, $message = '', $group = 'Browser') {
+  protected function assertNoFieldChecked($id, $message = '') {
     $message = $message ? $message : new FormattableMarkup('Checkbox field @id is not checked.', ['@id' => $id]);
     $elements = $this->xpath('//input[@id=:id]', [':id' => $id]);
     $this->assertNotEmpty($elements, $message);
@@ -1204,15 +1058,10 @@ protected function assertNoFieldChecked($id, $message = '', $group = 'Browser')
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Browser'; most tests do not override
-   *   this default.
    */
-  protected function assertOption($id, $option, $message = '', $group = 'Browser') {
+  protected function assertOption($id, $option, $message = '') {
     $options = $this->xpath('//select[@id=:id]//option[@value=:option]', [':id' => $id, ':option' => $option]);
-    $this->assertTrue(isset($options[0]), $message ? $message : new FormattableMarkup('Option @option for field @id exists.', ['@option' => $option, '@id' => $id]), $group);
+    $this->assertTrue(isset($options[0]), $message ? $message : new FormattableMarkup('Option @option for field @id exists.', ['@option' => $option, '@id' => $id]));
   }
 
   /**
@@ -1242,15 +1091,10 @@ protected function assertOptionByText($id, $text, $message = '') {
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Browser'; most tests do not override
-   *   this default.
    */
-  protected function assertOptionWithDrupalSelector($drupal_selector, $option, $message = '', $group = 'Browser') {
+  protected function assertOptionWithDrupalSelector($drupal_selector, $option, $message = '') {
     $options = $this->xpath('//select[@data-drupal-selector=:data_drupal_selector]//option[@value=:option]', [':data_drupal_selector' => $drupal_selector, ':option' => $option]);
-    $this->assertTrue(isset($options[0]), $message ? $message : new FormattableMarkup('Option @option for field @data_drupal_selector exists.', ['@option' => $option, '@data_drupal_selector' => $drupal_selector]), $group);
+    $this->assertTrue(isset($options[0]), $message ? $message : new FormattableMarkup('Option @option for field @data_drupal_selector exists.', ['@option' => $option, '@data_drupal_selector' => $drupal_selector]));
   }
 
   /**
@@ -1265,16 +1109,11 @@ protected function assertOptionWithDrupalSelector($drupal_selector, $option, $me
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Browser'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE on pass.
    */
-  protected function assertNoOption($id, $option, $message = '', $group = 'Browser') {
+  protected function assertNoOption($id, $option, $message = '') {
     $message = $message ? $message : new FormattableMarkup('Option @option for field @id does not exist.', ['@option' => $option, '@id' => $id]);
     $selects = $this->xpath('//select[@id=:id]', [':id' => $id]);
     $options = $this->xpath('//select[@id=:id]//option[@value=:option]', [':id' => $id, ':option' => $option]);
@@ -1295,18 +1134,13 @@ protected function assertNoOption($id, $option, $message = '', $group = 'Browser
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Browser'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE on pass.
    *
    * @todo $id is unusable. Replace with $name.
    */
-  protected function assertOptionSelected($id, $option, $message = '', $group = 'Browser') {
+  protected function assertOptionSelected($id, $option, $message = '') {
     $message = $message ? $message : new FormattableMarkup('Option @option for field @id is selected.', ['@option' => $option, '@id' => $id]);
     $elements = $this->xpath('//select[@id=:id]//option[@value=:option]', [':id' => $id, ':option' => $option]);
     $this->assertNotEmpty($elements, $message);
@@ -1326,18 +1160,13 @@ protected function assertOptionSelected($id, $option, $message = '', $group = 'B
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Browser'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE on pass, FALSE on fail.
    *
    * @todo $id is unusable. Replace with $name.
    */
-  protected function assertOptionSelectedWithDrupalSelector($drupal_selector, $option, $message = '', $group = 'Browser') {
+  protected function assertOptionSelectedWithDrupalSelector($drupal_selector, $option, $message = '') {
     $message = $message ? $message : new FormattableMarkup('Option @option for field @data_drupal_selector is selected.', ['@option' => $option, '@data_drupal_selector' => $drupal_selector]);
     $elements = $this->xpath('//select[@data-drupal-selector=:data_drupal_selector]//option[@value=:option]', [':data_drupal_selector' => $drupal_selector, ':option' => $option]);
     $this->assertNotEmpty($elements, $message);
@@ -1357,16 +1186,11 @@ protected function assertOptionSelectedWithDrupalSelector($drupal_selector, $opt
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Browser'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE on pass.
    */
-  protected function assertNoOptionSelected($id, $option, $message = '', $group = 'Browser') {
+  protected function assertNoOptionSelected($id, $option, $message = '') {
     $message = $message ? $message : new FormattableMarkup('Option @option for field @id is not selected.', ['@option' => $option, '@id' => $id]);
     $elements = $this->xpath('//select[@id=:id]//option[@value=:option]', [':id' => $id, ':option' => $option]);
     $this->assertNotEmpty($elements, $message);
@@ -1384,17 +1208,12 @@ protected function assertNoOptionSelected($id, $option, $message = '', $group =
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE on pass, FALSE on fail.
    */
-  protected function assertField($field, $message = '', $group = 'Other') {
-    return $this->assertFieldByXPath($this->constructFieldXpath('name', $field) . '|' . $this->constructFieldXpath('id', $field), NULL, $message, $group);
+  protected function assertField($field, $message = '') {
+    return $this->assertFieldByXPath($this->constructFieldXpath('name', $field) . '|' . $this->constructFieldXpath('id', $field), NULL, $message);
   }
 
   /**
@@ -1407,17 +1226,12 @@ protected function assertField($field, $message = '', $group = 'Other') {
    *   messages: use \Drupal\Component\Render\FormattableMarkup to embed
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
-   * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
    *
    * @return bool
    *   TRUE on pass, FALSE on fail.
    */
-  protected function assertNoField($field, $message = '', $group = 'Other') {
-    return $this->assertNoFieldByXPath($this->constructFieldXpath('name', $field) . '|' . $this->constructFieldXpath('id', $field), NULL, $message, $group);
+  protected function assertNoField($field, $message = '') {
+    return $this->assertNoFieldByXPath($this->constructFieldXpath('name', $field) . '|' . $this->constructFieldXpath('id', $field), NULL, $message);
   }
 
   /**
@@ -1429,10 +1243,7 @@ protected function assertNoField($field, $message = '', $group = 'Other') {
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
    * @param string $group
-   *   (optional) The group this message is in, which is displayed in a column
-   *   in test output. Use 'Debug' to indicate this is debugging output. Do not
-   *   translate this string. Defaults to 'Other'; most tests do not override
-   *   this default.
+   *   Deprecated.
    * @param array $ids_to_skip
    *   An optional array of ids to skip when checking for duplicates. It is
    *   always a bug to have duplicate HTML IDs, so this parameter is to enable
@@ -1444,12 +1255,12 @@ protected function assertNoField($field, $message = '', $group = 'Other') {
    * @return bool
    *   TRUE on pass.
    */
-  protected function assertNoDuplicateIds($message = '', $group = 'Other', $ids_to_skip = []) {
+  protected function assertNoDuplicateIds($message = '', $group = NULL, $ids_to_skip = []) {
     $status = TRUE;
     foreach ($this->xpath('//*[@id]') as $element) {
       $id = (string) $element['id'];
       if (isset($seen_ids[$id]) && !in_array($id, $ids_to_skip)) {
-        $this->fail(new FormattableMarkup('The HTML ID %id is unique.', ['%id' => $id]), $group);
+        $this->fail(new FormattableMarkup('The HTML ID %id is unique.', ['%id' => $id]));
         $status = FALSE;
       }
       $seen_ids[$id] = TRUE;
diff --git a/core/tests/Drupal/KernelTests/Core/Entity/FieldSqlStorageTest.php b/core/tests/Drupal/KernelTests/Core/Entity/FieldSqlStorageTest.php
index 99057a2fdc..6d3ac67e91 100644
--- a/core/tests/Drupal/KernelTests/Core/Entity/FieldSqlStorageTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Entity/FieldSqlStorageTest.php
@@ -427,15 +427,15 @@ public function testFieldUpdateIndexesWithData() {
     $field_storage->setIndexes(['value' => [['value', 255]]]);
     $field_storage->save();
     foreach ($tables as $table) {
-      $this->assertTrue(Database::getConnection()->schema()->indexExists($table, "{$field_name}_value"), "Index on value created in @table", ['@table' => $table]);
+      $this->assertTrue(Database::getConnection()->schema()->indexExists($table, "{$field_name}_value"), "Index on value created in $table");
     }
 
     // Add a different index, removing the existing custom one.
     $field_storage->setIndexes(['value_format' => [['value', 127], ['format', 127]]]);
     $field_storage->save();
     foreach ($tables as $table) {
-      $this->assertTrue(Database::getConnection()->schema()->indexExists($table, "{$field_name}_value_format"), "Index on value_format created in @table", ['@table' => $table]);
-      $this->assertFalse(Database::getConnection()->schema()->indexExists($table, "{$field_name}_value"), "Index on value removed in @table", ['@table' => $table]);
+      $this->assertTrue(Database::getConnection()->schema()->indexExists($table, "{$field_name}_value_format"), "Index on value_format created in $table");
+      $this->assertFalse(Database::getConnection()->schema()->indexExists($table, "{$field_name}_value"), "Index on value removed in $table");
     }
 
     // Verify that the tables were not dropped in the process.
diff --git a/core/tests/Drupal/KernelTests/Core/File/DirectoryTest.php b/core/tests/Drupal/KernelTests/Core/File/DirectoryTest.php
index adca42d668..633a12afc5 100644
--- a/core/tests/Drupal/KernelTests/Core/File/DirectoryTest.php
+++ b/core/tests/Drupal/KernelTests/Core/File/DirectoryTest.php
@@ -53,7 +53,7 @@ public function testFileCheckLocalDirectoryHandling() {
 
     // Check creating a directory using an absolute path.
     $absolute_path = $file_system->realpath($directory) . DIRECTORY_SEPARATOR . $this->randomMachineName() . DIRECTORY_SEPARATOR . $this->randomMachineName();
-    $this->assertTrue($file_system->mkdir($absolute_path, 0775, TRUE), 'No error reported when creating new absolute directories.', 'File');
+    $this->assertTrue($file_system->mkdir($absolute_path, 0775, TRUE), 'No error reported when creating new absolute directories.');
     $this->assertDirectoryPermissions($absolute_path, 0775);
   }
 
@@ -69,10 +69,10 @@ public function testFileCheckDirectoryHandling() {
     // Non-existent directory.
     /** @var \Drupal\Core\File\FileSystemInterface $file_system */
     $file_system = \Drupal::service('file_system');
-    $this->assertFalse($file_system->prepareDirectory($directory, 0), 'Error reported for non-existing directory.', 'File');
+    $this->assertFalse($file_system->prepareDirectory($directory, 0), 'Error reported for non-existing directory.');
 
     // Make a directory.
-    $this->assertTrue($file_system->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY), 'No error reported when creating a new directory.', 'File');
+    $this->assertTrue($file_system->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY), 'No error reported when creating a new directory.');
 
     // Make sure directory actually exists.
     $this->assertDirectoryExists($directory);
@@ -85,11 +85,11 @@ public function testFileCheckDirectoryHandling() {
 
       // Make directory read only.
       @$file_system->chmod($directory, 0444);
-      $this->assertFalse($file_system->prepareDirectory($directory, 0), 'Error reported for a non-writable directory.', 'File');
+      $this->assertFalse($file_system->prepareDirectory($directory, 0), 'Error reported for a non-writable directory.');
 
       // Test directory permission modification.
       $this->setSetting('file_chmod_directory', 0777);
-      $this->assertTrue($file_system->prepareDirectory($directory, FileSystemInterface::MODIFY_PERMISSIONS), 'No error reported when making directory writable.', 'File');
+      $this->assertTrue($file_system->prepareDirectory($directory, FileSystemInterface::MODIFY_PERMISSIONS), 'No error reported when making directory writable.');
     }
 
     // Test that the directory has the correct permissions.
diff --git a/core/tests/Drupal/KernelTests/Core/Plugin/PluginTestBase.php b/core/tests/Drupal/KernelTests/Core/Plugin/PluginTestBase.php
index 16c87953ad..b1b48d0db8 100644
--- a/core/tests/Drupal/KernelTests/Core/Plugin/PluginTestBase.php
+++ b/core/tests/Drupal/KernelTests/Core/Plugin/PluginTestBase.php
@@ -45,7 +45,7 @@ protected function setUp(): void {
     //   as derivatives and ReflectionFactory.
     $this->testPluginManager = new TestPluginManager();
     $this->mockBlockManager = new MockBlockManager();
-    $module_handler = new ModuleHandler($this->root, [], new MemoryBackend(), $this->container->get('event_dispatcher'));
+    $module_handler = new ModuleHandler($this->root, [], new MemoryBackend());
     $this->defaultsTestPluginManager = new DefaultsTestPluginManager($module_handler);
 
     // The expected plugin definitions within each manager. Several tests assert
diff --git a/core/tests/Drupal/Tests/Component/Gettext/PoStreamWriterTest.php b/core/tests/Drupal/Tests/Component/Gettext/PoStreamWriterTest.php
index c3994a67cb..cd04a4f3b5 100644
--- a/core/tests/Drupal/Tests/Component/Gettext/PoStreamWriterTest.php
+++ b/core/tests/Drupal/Tests/Component/Gettext/PoStreamWriterTest.php
@@ -52,7 +52,8 @@ protected function setUp(): void {
    * @covers ::getURI
    */
   public function testGetUriException() {
-    $this->expectException(\Exception::class, 'No URI set.');
+    $this->expectException(\Exception::class);
+    $this->expectExceptionMessage('No URI set.');
 
     $this->poWriter->getURI();
   }
@@ -63,7 +64,8 @@ public function testGetUriException() {
    */
   public function testWriteItem($poContent, $expected, $long) {
     if ($long) {
-      $this->expectException(\Exception::class, 'Unable to write data:');
+      $this->expectException(\Exception::class);
+      $this->expectExceptionMessage('Unable to write data:');
     }
 
     // Limit the file system quota to make the write fail on long strings.
@@ -104,7 +106,8 @@ public function providerWriteData() {
    * @covers ::close
    */
   public function testCloseException() {
-    $this->expectException(\Exception::class, 'Cannot close stream that is not open.');
+    $this->expectException(\Exception::class);
+    $this->expectExceptionMessage('Cannot close stream that is not open.');
 
     $this->poWriter->close();
   }
diff --git a/core/tests/Drupal/Tests/Core/Assert/WebAssertArgumentsTest.php b/core/tests/Drupal/Tests/Core/Assert/WebAssertArgumentsTest.php
deleted file mode 100644
index 6b9abd3b20..0000000000
--- a/core/tests/Drupal/Tests/Core/Assert/WebAssertArgumentsTest.php
+++ /dev/null
@@ -1,570 +0,0 @@
-<?php
-
-namespace Drupal\Tests\Core\Assert;
-
-use Behat\Mink\Element\DocumentElement;
-use Behat\Mink\Element\Element;
-use Behat\Mink\Element\NodeElement;
-use Behat\Mink\Session;
-use Drupal\Tests\UnitTestCase;
-use Drupal\Tests\WebAssert;
-use Prophecy\Argument;
-
-/**
- * Tests that calling WebAssert methods with extra arguments leads to errors.
- *
- * @coversDefaultClass \Drupal\Tests\WebAssert
- * @group Assert
- */
-class WebAssertArgumentsTest extends UnitTestCase {
-
-  /**
-   * The mocked Mink session object used for testing.
-   *
-   * @var \Behat\Mink\Session|\Prophecy\Prophecy\ObjectProphecy
-   */
-  protected $session;
-
-  /**
-   * The mocked page element used for testing.
-   *
-   * @var Behat\Mink\Element\DocumentElement|\Prophecy\Prophecy\ObjectProphecy
-   */
-  protected $page;
-
-  /**
-   * The mocked web assert class.
-   *
-   * @var \Drupal\Tests\WebAssert
-   */
-  protected $webAssert;
-
-  /**
-   * {@inheritdoc}
-   */
-  protected function setUp(): void {
-    parent::setUp();
-
-    $this->page = $this->prophesize(DocumentElement::class);
-    $this->session = $this->prophesize(Session::class);
-    $this->session->getPage()->willReturn($this->page->reveal());
-    $this->webAssert = new WebAssert($this->getSession());
-  }
-
-  /**
-   * @covers ::buttonExists
-   */
-  public function testButtonExists(): void {
-    $this->expectError(\AssertionError::class);
-    $this->page->findButton(Argument::any())->willReturn('bar');
-    $this->webAssert->buttonExists('foo', NULL, 'Extra argument');
-  }
-
-  /**
-   * @covers ::buttonNotExists
-   */
-  public function testButtonNotExists(): void {
-    $this->expectError(\AssertionError::class);
-    $this->page->findButton(Argument::any())->willReturn(NULL);
-    $this->webAssert->buttonNotExists('qux', NULL, 'Extra argument');
-  }
-
-  /**
-   * @covers ::selectExists
-   */
-  public function testSelectExists(): void {
-    $this->expectError(\AssertionError::class);
-    $this->page->find(Argument::any(), Argument::any())->willReturn('bar');
-    $this->webAssert->selectExists('foo', NULL, 'Extra argument');
-  }
-
-  /**
-   * @covers ::optionExists
-   */
-  public function testOptionExists(): void {
-    $this->expectError(\AssertionError::class);
-    $select = $this->prophesize(Element::class);
-    $select->find(Argument::any(), Argument::any())->willReturn('bar');
-    $this->page->find(Argument::any(), Argument::any())->willReturn($select->reveal());
-    $this->webAssert->optionExists('foo', 'bar', NULL, 'Extra argument');
-  }
-
-  /**
-   * @covers ::optionNotExists
-   */
-  public function testOptionNotExists(): void {
-    $this->expectError(\AssertionError::class);
-    $select = $this->prophesize(Element::class);
-    $select->find(Argument::any(), Argument::any())->willReturn(NULL);
-    $this->page->find(Argument::any(), Argument::any())->willReturn($select->reveal());
-    $this->webAssert->optionNotExists('foo', 'qux', NULL, 'Extra argument');
-  }
-
-  /**
-   * @covers ::titleEquals
-   */
-  public function testTitleEquals(): void {
-    $this->expectError(\AssertionError::class);
-    $title = $this->prophesize(Element::class);
-    $title->getText()->willReturn('foo');
-    $this->page->find(Argument::any(), Argument::any())->willReturn($title->reveal());
-    $this->webAssert->titleEquals('foo', 'Extra argument');
-  }
-
-  /**
-   * @covers ::assertNoEscaped
-   */
-  public function testAssertNoEscaped(): void {
-    $this->expectError(\AssertionError::class);
-    $this->page->getContent()->willReturn('foo bar bar');
-    $this->webAssert->assertNoEscaped('qux', 'Extra argument');
-  }
-
-  /**
-   * @covers ::assertEscaped
-   */
-  public function testAssertEscaped(): void {
-    $this->expectError(\AssertionError::class);
-    $this->page->getContent()->willReturn('foo bar bar');
-    $this->webAssert->assertEscaped('foo', 'Extra argument');
-  }
-
-  /**
-   * @covers ::responseContains
-   */
-  public function testResponseContains(): void {
-    $this->expectError(\AssertionError::class);
-    $this->page->getContent()->willReturn('foo bar bar');
-    $this->webAssert->responseContains('foo', 'Extra argument');
-  }
-
-  /**
-   * @covers ::responseNotContains
-   */
-  public function testResponseNotContains(): void {
-    $this->expectError(\AssertionError::class);
-    $this->page->getContent()->willReturn('foo bar bar');
-    $this->webAssert->responseNotContains('qux', 'Extra argument');
-  }
-
-  /**
-   * @covers ::fieldDisabled
-   */
-  public function testFieldDisabled(): void {
-    $this->expectError(\AssertionError::class);
-    $field = $this->prophesize(NodeElement::class);
-    $field->hasAttribute('disabled')->willReturn(TRUE);
-    $this->page->findField(Argument::any())->willReturn($field->reveal());
-    $this->webAssert->fieldDisabled('foo', NULL, 'Extra argument');
-  }
-
-  /**
-   * @covers ::fieldEnabled
-   */
-  public function testFieldEnabled(): void {
-    $this->expectError(\AssertionError::class);
-    $field = $this->prophesize(NodeElement::class);
-    $field->hasAttribute('disabled')->willReturn(FALSE);
-    $this->page->findField(Argument::any())->willReturn($field->reveal());
-    $this->webAssert->fieldEnabled('foo', NULL, 'Extra argument');
-  }
-
-  /**
-   * @covers ::hiddenFieldExists
-   */
-  public function testHiddenFieldExists(): void {
-    $this->expectError(\AssertionError::class);
-    $this->page->find(Argument::any(), Argument::any())->willReturn('bar');
-    $this->webAssert->hiddenFieldExists('foo', NULL, 'Extra argument');
-  }
-
-  /**
-   * @covers ::hiddenFieldNotExists
-   */
-  public function testHiddenFieldNotExists(): void {
-    $this->expectError(\AssertionError::class);
-    $this->page->find(Argument::any(), Argument::any())->willReturn(NULL);
-    $this->webAssert->hiddenFieldNotExists('qux', NULL, 'Extra argument');
-  }
-
-  /**
-   * @covers ::hiddenFieldValueEquals
-   */
-  public function testHiddenFieldValueEquals(): void {
-    $this->expectError(\AssertionError::class);
-    $field = $this->prophesize(NodeElement::class);
-    $field->getValue()->willReturn('bar');
-    $this->page->find(Argument::any(), Argument::any())->willReturn($field->reveal());
-    $this->webAssert->hiddenFieldValueEquals('foo', 'bar', NULL, 'Extra argument');
-  }
-
-  /**
-   * @covers ::hiddenFieldValueNotEquals
-   */
-  public function testHiddenFieldValueNotEquals(): void {
-    $this->expectError(\AssertionError::class);
-    $field = $this->prophesize(NodeElement::class);
-    $field->getValue()->willReturn('bar');
-    $this->page->find(Argument::any(), Argument::any())->willReturn($field->reveal());
-    $this->webAssert->hiddenFieldValueNotEquals('foo', 'qux', NULL, 'Extra argument');
-  }
-
-  /**
-   * @covers ::pageTextContainsOnce
-   */
-  public function testPageTextContainsOnce(): void {
-    $this->expectError(\AssertionError::class);
-    $this->page->getText()->willReturn('foo bar bar');
-    $this->webAssert->pageTextContainsOnce('foo', 'Extra argument');
-  }
-
-  /**
-   * @covers ::addressEquals
-   */
-  public function testAddressEquals(): void {
-    $this->expectError(\AssertionError::class);
-    $this->session->getCurrentUrl()->willReturn('foo');
-    $this->webAssert->addressEquals('foo', 'Extra argument');
-  }
-
-  /**
-   * @covers ::addressNotEquals
-   */
-  public function testAddressNotEquals(): void {
-    $this->expectError(\AssertionError::class);
-    $this->session->getCurrentUrl()->willReturn('foo');
-    $this->webAssert->addressNotEquals('qux', 'Extra argument');
-  }
-
-  /**
-   * @covers ::addressMatches
-   */
-  public function testAddressMatches(): void {
-    $this->expectError(\AssertionError::class);
-    $this->session->getCurrentUrl()->willReturn('foo');
-    $this->webAssert->addressMatches('/foo/', 'Extra argument');
-  }
-
-  /**
-   * @covers ::cookieEquals
-   */
-  public function testCookieEquals(): void {
-    $this->expectError(\AssertionError::class);
-    $this->session->getCookie('foo')->willReturn('bar');
-    $this->webAssert->cookieEquals('foo', 'bar', 'Extra argument');
-  }
-
-  /**
-   * @covers ::cookieExists
-   */
-  public function testCookieExists(): void {
-    $this->expectError(\AssertionError::class);
-    $this->session->getCookie('foo')->willReturn('bar');
-    $this->webAssert->cookieExists('foo', 'Extra argument');
-  }
-
-  /**
-   * @covers ::statusCodeEquals
-   */
-  public function testStatusCodeEquals(): void {
-    $this->expectError(\AssertionError::class);
-    $this->session->getStatusCode()->willReturn(200);
-    $this->webAssert->statusCodeEquals(200, 'Extra argument');
-  }
-
-  /**
-   * @covers ::statusCodeNotEquals
-   */
-  public function testStatusCodeNotEquals(): void {
-    $this->expectError(\AssertionError::class);
-    $this->session->getStatusCode()->willReturn(200);
-    $this->webAssert->statusCodeNotEquals(403, 'Extra argument');
-  }
-
-  /**
-   * @covers ::responseHeaderEquals
-   */
-  public function testResponseHeaderEquals(): void {
-    $this->expectError(\AssertionError::class);
-    $this->session->getResponseHeader('foo')->willReturn('bar');
-    $this->webAssert->responseHeaderEquals('foo', 'bar', 'Extra argument');
-  }
-
-  /**
-   * @covers ::responseHeaderNotEquals
-   */
-  public function testResponseHeaderNotEquals(): void {
-    $this->expectError(\AssertionError::class);
-    $this->session->getResponseHeader('foo')->willReturn('bar');
-    $this->webAssert->responseHeaderNotEquals('foo', 'qux', 'Extra argument');
-  }
-
-  /**
-   * @covers ::responseHeaderContains
-   */
-  public function testResponseHeaderContains(): void {
-    $this->expectError(\AssertionError::class);
-    $this->session->getResponseHeader('foo')->willReturn('bar');
-    $this->webAssert->responseHeaderContains('foo', 'ar', 'Extra argument');
-  }
-
-  /**
-   * @covers ::responseHeaderNotContains
-   */
-  public function testResponseHeaderNotContains(): void {
-    $this->expectError(\AssertionError::class);
-    $this->session->getResponseHeader('foo')->willReturn('bar');
-    $this->webAssert->responseHeaderNotContains('foo', 'qu', 'Extra argument');
-  }
-
-  /**
-   * @covers ::responseHeaderMatches
-   */
-  public function testResponseHeaderMatches(): void {
-    $this->expectError(\AssertionError::class);
-    $this->session->getResponseHeader('foo')->willReturn('bar');
-    $this->webAssert->responseHeaderMatches('foo', '/bar/', 'Extra argument');
-  }
-
-  /**
-   * @covers ::responseHeaderNotMatches
-   */
-  public function testResponseHeaderNotMatches(): void {
-    $this->expectError(\AssertionError::class);
-    $this->session->getResponseHeader('foo')->willReturn('bar');
-    $this->webAssert->responseHeaderNotMatches('foo', '/qux/', 'Extra argument');
-  }
-
-  /**
-   * @covers ::pageTextContains
-   */
-  public function testPageTextContains(): void {
-    $this->expectError(\AssertionError::class);
-    $this->page->getText()->willReturn('foo bar bar');
-    $this->webAssert->pageTextContains('foo', 'Extra argument');
-  }
-
-  /**
-   * @covers ::pageTextNotContains
-   */
-  public function testPageTextNotContains(): void {
-    $this->expectError(\AssertionError::class);
-    $this->page->getText()->willReturn('foo bar bar');
-    $this->webAssert->pageTextNotContains('qux', 'Extra argument');
-  }
-
-  /**
-   * @covers ::pageTextMatches
-   */
-  public function testPageTextMatches(): void {
-    $this->expectError(\AssertionError::class);
-    $this->page->getText()->willReturn('foo bar bar');
-    $this->webAssert->pageTextMatches('/foo/', 'Extra argument');
-  }
-
-  /**
-   * @covers ::pageTextNotMatches
-   */
-  public function testPageTextNotMatches(): void {
-    $this->expectError(\AssertionError::class);
-    $this->page->getText()->willReturn('foo bar bar');
-    $this->webAssert->pageTextNotMatches('/qux/', 'Extra argument');
-  }
-
-  /**
-   * @covers ::responseMatches
-   */
-  public function testResponseMatches(): void {
-    $this->expectError(\AssertionError::class);
-    $this->page->getContent()->willReturn('foo bar bar');
-    $this->webAssert->responseMatches('/foo/', 'Extra argument');
-  }
-
-  /**
-   * @covers ::responseNotMatches
-   */
-  public function testResponseNotMatches(): void {
-    $this->expectError(\AssertionError::class);
-    $this->page->getContent()->willReturn('foo bar bar');
-    $this->webAssert->responseNotMatches('/qux/', 'Extra argument');
-  }
-
-  /**
-   * @covers ::elementsCount
-   */
-  public function testElementsCount(): void {
-    $this->expectError(\AssertionError::class);
-    $this->page->findAll(Argument::any(), Argument::any())->willReturn(['bar']);
-    $this->webAssert->elementsCount('xpath', '//foo', 1, NULL, 'Extra argument');
-  }
-
-  /**
-   * @covers ::elementExists
-   */
-  public function testElementExists(): void {
-    $this->expectError(\AssertionError::class);
-    $this->page->find(Argument::any(), Argument::any())->willReturn('bar');
-    $this->webAssert->elementExists('xpath', '//foo', NULL, 'Extra argument');
-  }
-
-  /**
-   * @covers ::elementNotExists
-   */
-  public function testElementNotExists(): void {
-    $this->expectError(\AssertionError::class);
-    $this->page->find(Argument::any(), Argument::any())->willReturn(NULL);
-    $this->webAssert->elementNotExists('xpath', '//foo', NULL, 'Extra argument');
-  }
-
-  /**
-   * @covers ::elementTextContains
-   */
-  public function testElementTextContains(): void {
-    $this->expectError(\AssertionError::class);
-    $element = $this->prophesize(NodeElement::class);
-    $element->getText()->willReturn('bar');
-    $this->page->find(Argument::any(), Argument::any())->willReturn($element->reveal());
-    $this->webAssert->elementTextContains('xpath', '//foo', 'bar', 'Extra argument');
-  }
-
-  /**
-   * @covers ::elementTextNotContains
-   */
-  public function testElementTextNotContains(): void {
-    $this->expectError(\AssertionError::class);
-    $element = $this->prophesize(NodeElement::class);
-    $element->getText()->willReturn('bar');
-    $this->page->find(Argument::any(), Argument::any())->willReturn($element->reveal());
-    $this->webAssert->elementTextNotContains('xpath', '//foo', 'qux', 'Extra argument');
-  }
-
-  /**
-   * @covers ::elementContains
-   */
-  public function testElementContains(): void {
-    $this->expectError(\AssertionError::class);
-    $element = $this->prophesize(NodeElement::class);
-    $element->getHtml()->willReturn('bar');
-    $this->page->find(Argument::any(), Argument::any())->willReturn($element->reveal());
-    $this->webAssert->elementContains('xpath', '//foo', 'bar', 'Extra argument');
-  }
-
-  /**
-   * @covers ::elementNotContains
-   */
-  public function testElementNotContains(): void {
-    $this->expectError(\AssertionError::class);
-    $element = $this->prophesize(NodeElement::class);
-    $element->getHtml()->willReturn('bar');
-    $this->page->find(Argument::any(), Argument::any())->willReturn($element->reveal());
-    $this->webAssert->elementNotContains('xpath', '//foo', 'qux', 'Extra argument');
-  }
-
-  /**
-   * @covers ::elementAttributeExists
-   */
-  public function testElementAttributeExists(): void {
-    $this->expectError(\AssertionError::class);
-    $element = $this->prophesize(NodeElement::class);
-    $element->hasAttribute('bar')->willReturn(TRUE);
-    $this->page->find(Argument::any(), Argument::any())->willReturn($element->reveal());
-    $this->webAssert->elementAttributeExists('xpath', '//foo', 'bar', 'Extra argument');
-  }
-
-  /**
-   * @covers ::elementAttributeContains
-   */
-  public function testElementAttributeContains(): void {
-    $this->expectError(\AssertionError::class);
-    $element = $this->prophesize(NodeElement::class);
-    $element->hasAttribute('bar')->willReturn(TRUE);
-    $element->getAttribute('bar')->willReturn('baz');
-    $this->page->find(Argument::any(), Argument::any())->willReturn($element->reveal());
-    $this->webAssert->elementAttributeContains('xpath', '//foo', 'bar', 'baz', 'Extra argument');
-  }
-
-  /**
-   * @covers ::elementAttributeNotContains
-   */
-  public function testElementAttributeNotContains(): void {
-    $this->expectError(\AssertionError::class);
-    $element = $this->prophesize(NodeElement::class);
-    $element->hasAttribute('bar')->willReturn(TRUE);
-    $element->getAttribute('bar')->willReturn('baz');
-    $this->page->find(Argument::any(), Argument::any())->willReturn($element->reveal());
-    $this->webAssert->elementAttributeNotContains('xpath', '//foo', 'bar', 'qux', 'Extra argument');
-  }
-
-  /**
-   * @covers ::fieldExists
-   */
-  public function testFieldExists(): void {
-    $this->expectError(\AssertionError::class);
-    $this->page->findField(Argument::any())->willReturn('bar');
-    $this->webAssert->fieldExists('foo', NULL, 'Extra argument');
-  }
-
-  /**
-   * @covers ::fieldNotExists
-   */
-  public function testFieldNotExists(): void {
-    $this->expectError(\AssertionError::class);
-    $this->page->findField(Argument::any())->willReturn();
-    $this->webAssert->fieldNotExists('qux', NULL, 'Extra argument');
-  }
-
-  /**
-   * @covers ::fieldValueEquals
-   */
-  public function testFieldValueEquals(): void {
-    $this->expectError(\AssertionError::class);
-    $field = $this->prophesize(NodeElement::class);
-    $field->getValue()->willReturn('bar');
-    $this->page->findField(Argument::any())->willReturn($field->reveal());
-    $this->webAssert->fieldValueEquals('foo', 'bar', NULL, 'Extra argument');
-  }
-
-  /**
-   * @covers ::fieldValueNotEquals
-   */
-  public function testFieldValueNotEquals(): void {
-    $this->expectError(\AssertionError::class);
-    $field = $this->prophesize(NodeElement::class);
-    $field->getValue()->willReturn('bar');
-    $this->page->findField(Argument::any())->willReturn($field->reveal());
-    $this->webAssert->fieldValueNotEquals('foo', 'qux', NULL, 'Extra argument');
-  }
-
-  /**
-   * @covers ::checkboxChecked
-   */
-  public function testCheckboxChecked(): void {
-    $this->expectError(\AssertionError::class);
-    $field = $this->prophesize(NodeElement::class);
-    $field->isChecked()->willReturn(TRUE);
-    $this->page->findField(Argument::any())->willReturn($field->reveal());
-    $this->webAssert->checkboxChecked('foo', NULL, 'Extra argument');
-  }
-
-  /**
-   * @covers ::checkboxNotChecked
-   */
-  public function testCheckboxNotChecked(): void {
-    $this->expectError(\AssertionError::class);
-    $field = $this->prophesize(NodeElement::class);
-    $field->isChecked()->willReturn(FALSE);
-    $this->page->findField(Argument::any())->willReturn($field->reveal());
-    $this->webAssert->checkboxNotChecked('qux', NULL, 'Extra argument');
-  }
-
-  /**
-   * Returns a mocked behat session object.
-   *
-   * @return \Behat\Mink\Session
-   *   The mocked session.
-   */
-  protected function getSession(): Session {
-    return $this->session->reveal();
-  }
-
-}
diff --git a/core/tests/Drupal/Tests/Core/Asset/LibraryDiscoveryTest.php b/core/tests/Drupal/Tests/Core/Asset/LibraryDiscoveryTest.php
index fd2f4189fe..b53d6a72b9 100644
--- a/core/tests/Drupal/Tests/Core/Asset/LibraryDiscoveryTest.php
+++ b/core/tests/Drupal/Tests/Core/Asset/LibraryDiscoveryTest.php
@@ -69,7 +69,7 @@ protected function setUp(): void {
     $this->libraryDiscoveryCollector = $this->getMockBuilder('Drupal\Core\Asset\LibraryDiscoveryCollector')
       ->disableOriginalConstructor()
       ->getMock();
-    $this->libraryDiscovery = new LibraryDiscovery($this->libraryDiscoveryCollector, $this->cacheTagsInvalidator);
+    $this->libraryDiscovery = new LibraryDiscovery($this->libraryDiscoveryCollector);
     $this->libraryDiscoveryCollector->expects($this->once())
       ->method('get')
       ->with('test')
diff --git a/core/tests/Drupal/Tests/Core/Common/TagsTest.php b/core/tests/Drupal/Tests/Core/Common/TagsTest.php
index ad2fba9322..23a1d23a1f 100644
--- a/core/tests/Drupal/Tests/Core/Common/TagsTest.php
+++ b/core/tests/Drupal/Tests/Core/Common/TagsTest.php
@@ -50,12 +50,10 @@ protected function assertTags(array $tags): void {
     $original = $this->validTags;
     foreach ($tags as $tag) {
       $key = array_search($tag, $original);
-      $this->assertTrue((bool) $key, $tag, sprintf('Make sure tag %s shows up in the final tags array (originally %s)', $tag, $key));
+      $this->assertNotFalse($key, sprintf('Make sure tag %s shows up in the final tags array', $tag));
       unset($original[$key]);
     }
-    foreach ($original as $leftover) {
-      $this->fail(sprintf('Leftover tag %s was left over.', $leftover));
-    }
+    $this->assertEmpty($original, 'No tags should be left over');
   }
 
 }
diff --git a/core/tests/Drupal/Tests/Core/Database/ConditionTest.php b/core/tests/Drupal/Tests/Core/Database/ConditionTest.php
index 6ef0cc7adb..8f19768a7e 100644
--- a/core/tests/Drupal/Tests/Core/Database/ConditionTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/ConditionTest.php
@@ -41,7 +41,7 @@ public function testSimpleCondition($expected, $field_name) {
       return preg_replace('/[^A-Za-z0-9_.]+/', '', $args[0]);
     });
     $connection->mapConditionOperator('=')->willReturn(['operator' => '=']);
-    $connection->condition('AND')->willReturn(new Condition('AND', FALSE));
+    $connection->condition('AND')->willReturn(new Condition('AND'));
     $connection = $connection->reveal();
 
     $query_placeholder = $this->prophesize(PlaceholderInterface::class);
@@ -83,7 +83,7 @@ public function testCompileWithKnownOperators($expected, $field, $value, $operat
       return preg_replace('/[^A-Za-z0-9_.]+/', '', $args[0]);
     });
     $connection->mapConditionOperator(Argument::any())->willReturn(NULL);
-    $connection->condition('AND')->willReturn(new Condition('AND', FALSE));
+    $connection->condition('AND')->willReturn(new Condition('AND'));
     $connection = $connection->reveal();
 
     $query_placeholder = $this->prophesize(PlaceholderInterface::class);
@@ -152,7 +152,7 @@ public function testCompileWithSqlInjectionForOperator($operator) {
       return preg_replace('/[^A-Za-z0-9_.]+/', '', $args[0]);
     });
     $connection->mapConditionOperator(Argument::any())->willReturn(NULL);
-    $connection->condition('AND')->willReturn(new Condition('AND', FALSE));
+    $connection->condition('AND')->willReturn(new Condition('AND'));
     $connection = $connection->reveal();
 
     $query_placeholder = $this->prophesize(PlaceholderInterface::class);
diff --git a/core/tests/Drupal/Tests/Core/EventSubscriber/FinalExceptionSubscriberTest.php b/core/tests/Drupal/Tests/Core/EventSubscriber/FinalExceptionSubscriberTest.php
index 4b6bc941e6..4827771d8a 100644
--- a/core/tests/Drupal/Tests/Core/EventSubscriber/FinalExceptionSubscriberTest.php
+++ b/core/tests/Drupal/Tests/Core/EventSubscriber/FinalExceptionSubscriberTest.php
@@ -35,7 +35,7 @@ public function testOnExceptionWithUnknownFormat() {
     $response = $event->getResponse();
 
     $this->assertInstanceOf(Response::class, $response);
-    $this->stringStartsWith('The website encountered an unexpected error. Please try again later.<br><br><em class="placeholder">Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException</em>: test message in ', $response->getContent());
+    $this->assertStringStartsWith('The website encountered an unexpected error. Please try again later.<br><br><em class="placeholder">Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException</em>: test message in ', $response->getContent());
     $this->assertEquals(405, $response->getStatusCode());
     $this->assertEquals('POST, PUT', $response->headers->get('Allow'));
     // Also check that the text/plain content type was added.
diff --git a/core/tests/Drupal/Tests/Core/EventSubscriber/ModuleRouteSubscriberTest.php b/core/tests/Drupal/Tests/Core/EventSubscriber/ModuleRouteSubscriberTest.php
index d58560e12e..ce79113904 100644
--- a/core/tests/Drupal/Tests/Core/EventSubscriber/ModuleRouteSubscriberTest.php
+++ b/core/tests/Drupal/Tests/Core/EventSubscriber/ModuleRouteSubscriberTest.php
@@ -55,7 +55,7 @@ public function testRemoveRoute($route_name, array $requirements, $removed) {
     $route = new Route('', [], $requirements);
     $collection->add($route_name, $route);
 
-    $event = new RouteBuildEvent($collection, 'test');
+    $event = new RouteBuildEvent($collection);
     $route_subscriber = new ModuleRouteSubscriber($this->moduleHandler);
     $route_subscriber->onAlterRoutes($event);
 
diff --git a/core/tests/Drupal/Tests/Core/EventSubscriber/PathRootsSubscriberTest.php b/core/tests/Drupal/Tests/Core/EventSubscriber/PathRootsSubscriberTest.php
index 7ba79ed582..4a5ff02d62 100644
--- a/core/tests/Drupal/Tests/Core/EventSubscriber/PathRootsSubscriberTest.php
+++ b/core/tests/Drupal/Tests/Core/EventSubscriber/PathRootsSubscriberTest.php
@@ -53,7 +53,7 @@ public function testSubscribing() {
     $route_collection->add('test_route2', new Route('/test/baz'));
     $route_collection->add('test_route3', new Route('/test2/bar/baz'));
 
-    $event = new RouteBuildEvent($route_collection, 'provider');
+    $event = new RouteBuildEvent($route_collection);
     $this->pathRootsSubscriber->onRouteAlter($event);
 
     $route_collection = new RouteCollection();
@@ -61,7 +61,7 @@ public function testSubscribing() {
     $route_collection->add('test_route5', new Route('/test2/baz'));
     $route_collection->add('test_route6', new Route('/test2/bar/baz'));
 
-    $event = new RouteBuildEvent($route_collection, 'provider');
+    $event = new RouteBuildEvent($route_collection);
     $this->pathRootsSubscriber->onRouteAlter($event);
 
     $this->state->expects($this->once())
diff --git a/core/tests/Drupal/Tests/Core/EventSubscriber/SpecialAttributesRouteSubscriberTest.php b/core/tests/Drupal/Tests/Core/EventSubscriber/SpecialAttributesRouteSubscriberTest.php
index 3adcef36e3..440b1e48c9 100644
--- a/core/tests/Drupal/Tests/Core/EventSubscriber/SpecialAttributesRouteSubscriberTest.php
+++ b/core/tests/Drupal/Tests/Core/EventSubscriber/SpecialAttributesRouteSubscriberTest.php
@@ -78,7 +78,7 @@ public function testOnRouteBuildingValidVariables(Route $route) {
     $route_collection = new RouteCollection();
     $route_collection->add('test', $route);
 
-    $event = new RouteBuildEvent($route_collection, 'test');
+    $event = new RouteBuildEvent($route_collection);
     $subscriber = new SpecialAttributesRouteSubscriber();
     $this->assertNull($subscriber->onAlterRoutes($event));
   }
@@ -96,7 +96,7 @@ public function testOnRouteBuildingInvalidVariables(Route $route) {
     $route_collection = new RouteCollection();
     $route_collection->add('test', $route);
 
-    $event = new RouteBuildEvent($route_collection, 'test');
+    $event = new RouteBuildEvent($route_collection);
     $subscriber = new SpecialAttributesRouteSubscriber();
     $this->expectWarning();
     $this->expectWarningMessage('uses reserved variable names');
diff --git a/core/tests/Drupal/Tests/Core/Extension/ThemeExtensionListTest.php b/core/tests/Drupal/Tests/Core/Extension/ThemeExtensionListTest.php
index 835dc94b59..51057ea77c 100644
--- a/core/tests/Drupal/Tests/Core/Extension/ThemeExtensionListTest.php
+++ b/core/tests/Drupal/Tests/Core/Extension/ThemeExtensionListTest.php
@@ -2,7 +2,6 @@
 
 namespace Drupal\Tests\Core\Extension;
 
-use Drupal\Core\Cache\MemoryBackend;
 use Drupal\Core\Cache\NullBackend;
 use Drupal\Core\Extension\Extension;
 use Drupal\Core\Extension\ExtensionDiscovery;
@@ -12,7 +11,6 @@
 use Drupal\Core\Extension\ThemeEngineExtensionList;
 use Drupal\Core\Extension\ThemeExtensionList;
 use Drupal\Core\KeyValueStore\KeyValueMemoryFactory;
-use Drupal\Core\Lock\NullLockBackend;
 use Drupal\Core\State\State;
 use Drupal\Tests\UnitTestCase;
 use Prophecy\Argument;
@@ -65,7 +63,7 @@ public function testRebuildThemeDataWithThemeParents() {
       ->alter('system_info', Argument::type('array'), Argument::type(Extension::class), Argument::any())
       ->shouldBeCalled();
 
-    $state = new State(new KeyValueMemoryFactory(), new MemoryBackend(), new NullLockBackend());
+    $state = new State(new KeyValueMemoryFactory());
 
     $config_factory = $this->getConfigFactoryStub([
       'core.extension' => [
@@ -78,7 +76,7 @@ public function testRebuildThemeDataWithThemeParents() {
       ],
     ]);
 
-    $theme_engine_list = new TestThemeEngineExtensionList($this->root, 'theme_engine', new NullBackend('test'), $info_parser->reveal(), $module_handler->reveal(), $state, $config_factory, 'testing');
+    $theme_engine_list = new TestThemeEngineExtensionList($this->root, 'theme_engine', new NullBackend('test'), $info_parser->reveal(), $module_handler->reveal(), $state, $config_factory);
     $theme_engine_list->setExtensionDiscovery($extension_discovery->reveal());
 
     $theme_list = new TestThemeExtensionList($this->root, 'theme', new NullBackend('test'), $info_parser->reveal(), $module_handler->reveal(), $state, $config_factory, $theme_engine_list, 'testing');
@@ -121,7 +119,7 @@ public function testRebuildThemeDataWithThemeParents() {
   public function testGetBaseThemes(array $themes, $theme, array $expected) {
     // Mocks and stubs.
     $module_handler = $this->prophesize(ModuleHandlerInterface::class);
-    $state = new State(new KeyValueMemoryFactory(), new MemoryBackend(), new NullLockBackend());
+    $state = new State(new KeyValueMemoryFactory());
     $config_factory = $this->getConfigFactoryStub([]);
     $theme_engine_list = $this->prophesize(ThemeEngineExtensionList::class);
     $theme_listing = new ThemeExtensionList($this->root, 'theme', new NullBackend('test'), new InfoParser($this->root), $module_handler->reveal(), $state, $config_factory, $theme_engine_list->reveal(), 'test');
diff --git a/core/tests/Drupal/Tests/Core/Layout/LayoutPluginManagerTest.php b/core/tests/Drupal/Tests/Core/Layout/LayoutPluginManagerTest.php
index 35b7b32b6e..a87329268c 100644
--- a/core/tests/Drupal/Tests/Core/Layout/LayoutPluginManagerTest.php
+++ b/core/tests/Drupal/Tests/Core/Layout/LayoutPluginManagerTest.php
@@ -89,7 +89,7 @@ protected function setUp(): void {
     $this->cacheBackend = $this->prophesize(CacheBackendInterface::class);
 
     $namespaces = new \ArrayObject(['Drupal\Core' => vfsStream::url('root/core/lib/Drupal/Core')]);
-    $this->layoutPluginManager = new LayoutPluginManager($namespaces, $this->cacheBackend->reveal(), $this->moduleHandler->reveal(), $this->themeHandler->reveal(), $this->getStringTranslationStub());
+    $this->layoutPluginManager = new LayoutPluginManager($namespaces, $this->cacheBackend->reveal(), $this->moduleHandler->reveal(), $this->themeHandler->reveal());
   }
 
   /**
diff --git a/core/tests/Drupal/Tests/Core/Menu/LocalTaskManagerTest.php b/core/tests/Drupal/Tests/Core/Menu/LocalTaskManagerTest.php
index 41cce150c7..faf6850cbe 100644
--- a/core/tests/Drupal/Tests/Core/Menu/LocalTaskManagerTest.php
+++ b/core/tests/Drupal/Tests/Core/Menu/LocalTaskManagerTest.php
@@ -207,7 +207,7 @@ public function testGetLocalTaskForRouteWithFilledCache() {
 
     $this->setupLocalTaskManager();
 
-    $result = $this->getLocalTasksCache($mock_plugin);
+    $result = $this->getLocalTasksCache();
 
     $this->cacheBackend->expects($this->once())
       ->method('get')
diff --git a/core/tests/Drupal/Tests/Core/Render/RendererTestBase.php b/core/tests/Drupal/Tests/Core/Render/RendererTestBase.php
index 70346b7925..4419f04ceb 100644
--- a/core/tests/Drupal/Tests/Core/Render/RendererTestBase.php
+++ b/core/tests/Drupal/Tests/Core/Render/RendererTestBase.php
@@ -8,7 +8,6 @@
 namespace Drupal\Tests\Core\Render;
 
 use Drupal\Core\Cache\Cache;
-use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Cache\Context\ContextCacheKeys;
 use Drupal\Core\Cache\MemoryBackend;
 use Drupal\Core\Security\TrustedCallbackInterface;
@@ -171,7 +170,7 @@ protected function setUp(): void {
               $keys[] = $context_id;
           }
         }
-        return new ContextCacheKeys($keys, new CacheableMetadata());
+        return new ContextCacheKeys($keys);
       });
     $this->placeholderGenerator = new PlaceholderGenerator($this->rendererConfig);
     $this->renderCache = new PlaceholderingRenderCache($this->requestStack, $this->cacheFactory, $this->cacheContextsManager, $this->placeholderGenerator);
diff --git a/core/tests/Drupal/Tests/WebAssert.php b/core/tests/Drupal/Tests/WebAssert.php
index 404796e973..7f9b5dbeb1 100644
--- a/core/tests/Drupal/Tests/WebAssert.php
+++ b/core/tests/Drupal/Tests/WebAssert.php
@@ -5,7 +5,6 @@
 use Behat\Mink\Exception\ExpectationException;
 use Behat\Mink\Exception\ResponseTextException;
 use Behat\Mink\WebAssert as MinkWebAssert;
-use Behat\Mink\Element\ElementInterface;
 use Behat\Mink\Element\TraversableElement;
 use Behat\Mink\Exception\ElementNotFoundException;
 use Behat\Mink\Session;
@@ -138,7 +137,6 @@ public function pageTextMatchesCount(int $count, string $regex, string $message
    *   When the element doesn't exist.
    */
   public function buttonExists($button, TraversableElement $container = NULL) {
-    assert(func_num_args() <= 2);
     $container = $container ?: $this->session->getPage();
     $node = $container->findButton($button);
 
@@ -161,7 +159,6 @@ public function buttonExists($button, TraversableElement $container = NULL) {
    *   When the button exists.
    */
   public function buttonNotExists($button, TraversableElement $container = NULL) {
-    assert(func_num_args() <= 2);
     $container = $container ?: $this->session->getPage();
     $node = $container->findButton($button);
 
@@ -183,7 +180,6 @@ public function buttonNotExists($button, TraversableElement $container = NULL) {
    *   When the element doesn't exist.
    */
   public function selectExists($select, TraversableElement $container = NULL) {
-    assert(func_num_args() <= 2);
     $container = $container ?: $this->session->getPage();
     $node = $container->find('named', [
       'select',
@@ -214,7 +210,6 @@ public function selectExists($select, TraversableElement $container = NULL) {
    *   When the element doesn't exist.
    */
   public function optionExists($select, $option, TraversableElement $container = NULL) {
-    assert(func_num_args() <= 3);
     $container = $container ?: $this->session->getPage();
     $select_field = $container->find('named', [
       'select',
@@ -248,7 +243,6 @@ public function optionExists($select, $option, TraversableElement $container = N
    *   When the select element doesn't exist.
    */
   public function optionNotExists($select, $option, TraversableElement $container = NULL) {
-    assert(func_num_args() <= 3);
     $container = $container ?: $this->session->getPage();
     $select_field = $container->find('named', [
       'select',
@@ -274,7 +268,6 @@ public function optionNotExists($select, $option, TraversableElement $container
    *   Thrown when element doesn't exist, or the title is a different one.
    */
   public function titleEquals($expected_title) {
-    assert(func_num_args() === 1);
     $title_element = $this->session->getPage()->find('css', 'title');
     if (!$title_element) {
       throw new ExpectationException('No title element found on the page', $this->session->getDriver());
@@ -476,7 +469,6 @@ public function buildXPathQuery($xpath, array $args = []) {
    *   Raw (HTML) string to look for.
    */
   public function assertNoEscaped($raw) {
-    assert(func_num_args() === 1);
     $this->responseNotContains(Html::escape($raw));
   }
 
@@ -489,7 +481,6 @@ public function assertNoEscaped($raw) {
    *   Raw (HTML) string to look for.
    */
   public function assertEscaped($raw) {
-    assert(func_num_args() === 1);
     $this->responseContains(Html::escape($raw));
   }
 
@@ -502,7 +493,6 @@ public function assertEscaped($raw) {
    * @throws \Behat\Mink\Exception\ExpectationException
    */
   public function responseContains($text) {
-    assert(func_num_args() === 1);
     parent::responseContains((string) $text);
   }
 
@@ -515,7 +505,6 @@ public function responseContains($text) {
    * @throws \Behat\Mink\Exception\ExpectationException
    */
   public function responseNotContains($text) {
-    assert(func_num_args() === 1);
     parent::responseNotContains((string) $text);
   }
 
@@ -555,7 +544,6 @@ public function assert($condition, $message) {
    * @throws \Behat\Mink\Exception\ExpectationException
    */
   public function fieldDisabled($field, TraversableElement $container = NULL) {
-    assert(func_num_args() <= 2);
     $container = $container ?: $this->session->getPage();
     $node = $container->findField($field);
 
@@ -585,7 +573,6 @@ public function fieldDisabled($field, TraversableElement $container = NULL) {
    * @throws \Behat\Mink\Exception\ExpectationException
    */
   public function fieldEnabled($field, TraversableElement $container = NULL) {
-    assert(func_num_args() <= 2);
     $container = $container ?: $this->session->getPage();
     $node = $container->findField($field);
 
@@ -614,7 +601,6 @@ public function fieldEnabled($field, TraversableElement $container = NULL) {
    * @throws \Behat\Mink\Exception\ElementNotFoundException
    */
   public function hiddenFieldExists($field, TraversableElement $container = NULL) {
-    assert(func_num_args() <= 2);
     $container = $container ?: $this->session->getPage();
     if ($node = $container->find('hidden_field_selector', ['hidden_field', $field])) {
       return $node;
@@ -633,7 +619,6 @@ public function hiddenFieldExists($field, TraversableElement $container = NULL)
    * @throws \Behat\Mink\Exception\ExpectationException
    */
   public function hiddenFieldNotExists($field, TraversableElement $container = NULL) {
-    assert(func_num_args() <= 2);
     $container = $container ?: $this->session->getPage();
     $node = $container->find('hidden_field_selector', ['hidden_field', $field]);
     $this->assert($node === NULL, "A hidden field '$field' exists on this page, but it should not.");
@@ -653,7 +638,6 @@ public function hiddenFieldNotExists($field, TraversableElement $container = NUL
    * @throws \Behat\Mink\Exception\ExpectationException
    */
   public function hiddenFieldValueEquals($field, $value, TraversableElement $container = NULL) {
-    assert(func_num_args() <= 3);
     $node = $this->hiddenFieldExists($field, $container);
     $actual = $node->getValue();
     $regex = '/^' . preg_quote($value, '/') . '$/ui';
@@ -675,7 +659,6 @@ public function hiddenFieldValueEquals($field, $value, TraversableElement $conta
    * @throws \Behat\Mink\Exception\ExpectationException
    */
   public function hiddenFieldValueNotEquals($field, $value, TraversableElement $container = NULL) {
-    assert(func_num_args() <= 3);
     $node = $this->hiddenFieldExists($field, $container);
     $actual = $node->getValue();
     $regex = '/^' . preg_quote($value, '/') . '$/ui';
@@ -692,7 +675,6 @@ public function hiddenFieldValueNotEquals($field, $value, TraversableElement $co
    * @see \Behat\Mink\WebAssert::pageTextContains()
    */
   public function pageTextContainsOnce($text) {
-    assert(func_num_args() === 1);
     $regex = '/' . preg_quote($text, '/') . '/ui';
     try {
       $this->pageTextMatchesCount(1, $regex);
@@ -722,7 +704,6 @@ public function pageContainsNoDuplicateId() {
    * {@inheritdoc}
    */
   public function addressEquals($page) {
-    assert(func_num_args() === 1);
     $expected = $this->cleanUrl($page, TRUE);
     $actual = $this->cleanUrl($this->session->getCurrentUrl(), strpos($expected, '?') !== FALSE);
 
@@ -733,173 +714,12 @@ public function addressEquals($page) {
    * {@inheritdoc}
    */
   public function addressNotEquals($page) {
-    assert(func_num_args() === 1);
     $expected = $this->cleanUrl($page, TRUE);
     $actual = $this->cleanUrl($this->session->getCurrentUrl(), strpos($expected, '?') !== FALSE);
 
     $this->assert($actual !== $expected, sprintf('Current page is "%s", but should not be.', $actual));
   }
 
-  /**
-   * {@inheritdoc}
-   */
-  public function addressMatches($regex) {
-    assert(func_num_args() === 1);
-    return parent::addressMatches($regex);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function cookieEquals($name, $value) {
-    assert(func_num_args() === 2);
-    return parent::cookieEquals($name, $value);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function cookieExists($name) {
-    assert(func_num_args() === 1);
-    return parent::cookieExists($name);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function statusCodeEquals($code) {
-    assert(func_num_args() === 1);
-    return parent::statusCodeEquals($code);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function statusCodeNotEquals($code) {
-    assert(func_num_args() === 1);
-    return parent::statusCodeNotEquals($code);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function responseHeaderEquals($name, $value) {
-    assert(func_num_args() === 2);
-    return parent::responseHeaderEquals($name, $value);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function responseHeaderNotEquals($name, $value) {
-    assert(func_num_args() === 2);
-    return parent::responseHeaderNotEquals($name, $value);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function responseHeaderContains($name, $value) {
-    assert(func_num_args() === 2);
-    return parent::responseHeaderContains($name, $value);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function responseHeaderNotContains($name, $value) {
-    assert(func_num_args() === 2);
-    return parent::responseHeaderNotContains($name, $value);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function responseHeaderMatches($name, $regex) {
-    assert(func_num_args() === 2);
-    return parent::responseHeaderMatches($name, $regex);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function responseHeaderNotMatches($name, $regex) {
-    assert(func_num_args() === 2);
-    return parent::responseHeaderNotMatches($name, $regex);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function pageTextContains($text) {
-    assert(func_num_args() === 1);
-    return parent::pageTextContains($text);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function pageTextNotContains($text) {
-    assert(func_num_args() === 1);
-    return parent::pageTextNotContains($text);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function pageTextMatches($regex) {
-    assert(func_num_args() === 1);
-    return parent::pageTextMatches($regex);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function pageTextNotMatches($regex) {
-    assert(func_num_args() === 1);
-    return parent::pageTextNotMatches($regex);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function responseMatches($regex) {
-    assert(func_num_args() === 1);
-    return parent::responseMatches($regex);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function responseNotMatches($regex) {
-    assert(func_num_args() === 1);
-    return parent::responseNotMatches($regex);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function elementsCount($selectorType, $selector, $count, ElementInterface $container = NULL) {
-    assert(func_num_args() <= 4);
-    return parent::elementsCount($selectorType, $selector, $count, $container);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function elementExists($selectorType, $selector, ElementInterface $container = NULL) {
-    assert(func_num_args() <= 3);
-    return parent::elementExists($selectorType, $selector, $container);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function elementNotExists($selectorType, $selector, ElementInterface $container = NULL) {
-    assert(func_num_args() <= 3);
-    return parent::elementNotExists($selectorType, $selector, $container);
-  }
-
   /**
    * Asserts a specific element's text equals an expected text.
    *
@@ -917,110 +737,6 @@ public function elementTextEquals(string $selectorType, $selector, string $text)
     Assert::assertThat($this->elementExists($selectorType, $selector)->getText(), $constraint, $message);
   }
 
-  /**
-   * {@inheritdoc}
-   */
-  public function elementTextContains($selectorType, $selector, $text) {
-    assert(func_num_args() === 3);
-    return parent::elementTextContains($selectorType, $selector, $text);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function elementTextNotContains($selectorType, $selector, $text) {
-    assert(func_num_args() === 3);
-    return parent::elementTextNotContains($selectorType, $selector, $text);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function elementContains($selectorType, $selector, $html) {
-    assert(func_num_args() === 3);
-    return parent::elementContains($selectorType, $selector, $html);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function elementNotContains($selectorType, $selector, $html) {
-    assert(func_num_args() === 3);
-    return parent::elementNotContains($selectorType, $selector, $html);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function elementAttributeExists($selectorType, $selector, $attribute) {
-    assert(func_num_args() === 3);
-    return parent::elementAttributeExists($selectorType, $selector, $attribute);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function elementAttributeContains($selectorType, $selector, $attribute, $text) {
-    assert(func_num_args() === 4);
-    return parent::elementAttributeContains($selectorType, $selector, $attribute, $text);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function elementAttributeNotContains($selectorType, $selector, $attribute, $text) {
-    assert(func_num_args() === 4);
-    return parent::elementAttributeNotContains($selectorType, $selector, $attribute, $text);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function fieldExists($field, TraversableElement $container = NULL) {
-    assert(func_num_args() <= 2);
-    return parent::fieldExists($field, $container);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function fieldNotExists($field, TraversableElement $container = NULL) {
-    assert(func_num_args() <= 2);
-    return parent::fieldNotExists($field, $container);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function fieldValueEquals($field, $value, TraversableElement $container = NULL) {
-    assert(func_num_args() <= 3);
-    return parent::fieldValueEquals($field, $value, $container);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function fieldValueNotEquals($field, $value, TraversableElement $container = NULL) {
-    assert(func_num_args() <= 3);
-    return parent::fieldValueNotEquals($field, $value, $container);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function checkboxChecked($field, TraversableElement $container = NULL) {
-    assert(func_num_args() <= 2);
-    return parent::checkboxChecked($field, $container);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function checkboxNotChecked($field, TraversableElement $container = NULL) {
-    assert(func_num_args() <= 2);
-    return parent::checkboxNotChecked($field, $container);
-  }
-
   /**
    * Asserts that a status message exists.
    *
