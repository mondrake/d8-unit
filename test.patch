diff --git a/core/phpunit.xml.dist b/core/phpunit.xml.dist
index 4bfeb0086f..6363ed7f66 100644
--- a/core/phpunit.xml.dist
+++ b/core/phpunit.xml.dist
@@ -28,14 +28,7 @@
     <!-- Example SIMPLETEST_DB value: mysql://username:password@localhost/database_name#table_prefix -->
     <env name="SIMPLETEST_DB" value=""/>
     <!-- Example BROWSERTEST_OUTPUT_DIRECTORY value: /path/to/webroot/sites/simpletest/browser_output -->
-    <env name="BROWSERTEST_OUTPUT_DIRECTORY" value=""/>
-    <!-- To avoid overcrowding the output in CI environments, browser tests
-     will not print the individual links in the test run report by default.
-     The output in Drupal testing environment is saved as an artifact that
-     can be browsed or downloaded from Gitlab. However, if you need to
-     print the individual links locally you can set the
-     BROWSERTEST_OUTPUT_VERBOSE environment variable to "true". -->
-    <!-- <env name="BROWSERTEST_OUTPUT_VERBOSE" value="true"/> -->
+    <!-- <env name="BROWSERTEST_OUTPUT_DIRECTORY" value=""/> -->
     <!-- By default, browser tests will output links that use the base URL set
      in SIMPLETEST_BASE_URL. However, if your SIMPLETEST_BASE_URL is an internal
      path (such as may be the case in a virtual or Docker-based environment),
@@ -65,6 +58,18 @@
     <!-- Example for changing the driver args to webdriver tests MINK_DRIVER_ARGS_WEBDRIVER value: '["chrome", { "goog:chromeOptions": { "w3c": false } }, "http://localhost:4444/wd/hub"]' For using the Firefox browser, replace "chrome" with "firefox" -->
     <env name="MINK_DRIVER_ARGS_WEBDRIVER" value=""/>
   </php>
+  <extensions>
+    <!-- Functional tests HTML output logging. -->
+    <bootstrap class="Drupal\TestTools\Extension\HtmlLogging\HtmlOutputLogger">
+      <!-- To avoid overcrowding the output in CI environments, by default
+      browser tests will not print the individual links in the test run report.
+      The output in Drupal testing environment is saved as an artifact that
+      can be browsed or downloaded from Gitlab. However, if you need to
+      print the individual links locally you can set the "verbose" parameter
+      to "true". -->
+      <parameter name="verbose" value="false"/>
+    </bootstrap>
+  </extensions>
   <testsuites>
     <testsuite name="unit">
       <directory>tests/Drupal/Tests</directory>
diff --git a/core/tests/Drupal/FunctionalTests/Test/FunctionalTestDebugHtmlOutputTest.php b/core/tests/Drupal/FunctionalTests/Test/FunctionalTestDebugHtmlOutputTest.php
index 53c3d130b6..ff49904ac8 100644
--- a/core/tests/Drupal/FunctionalTests/Test/FunctionalTestDebugHtmlOutputTest.php
+++ b/core/tests/Drupal/FunctionalTests/Test/FunctionalTestDebugHtmlOutputTest.php
@@ -4,6 +4,7 @@
 
 namespace Drupal\FunctionalTests\Test;
 
+use Drupal\Core\File\FileExists;
 use Drupal\Tests\BrowserTestBase;
 use Symfony\Component\Process\Process;
 
@@ -28,13 +29,15 @@ class FunctionalTestDebugHtmlOutputTest extends BrowserTestBase {
   public function testFunctionalTestDebugHtmlOutput(): void {
     $command = [
       'vendor/bin/phpunit',
-      '--configuration',
-      'core',
       'core/tests/Drupal/FunctionalTests/Test/FunctionalTestDebugHtmlOutputHelperTest.php',
     ];
 
     // Test with the default output directory, specified by BROWSERTEST_OUTPUT_DIRECTORY.
-    $process = new Process($command);
+    $config = [
+      '--configuration',
+      'core',
+    ];
+    $process = new Process(array_merge($command, $config));
     $process->setWorkingDirectory($this->root)
       ->setTimeout(300)
       ->setIdleTimeout(300);
@@ -46,22 +49,33 @@ public function testFunctionalTestDebugHtmlOutput(): void {
     $this->assertMatchesRegularExpression('/HTML output was generated, \d+ page\(s\)\./m', $process->getOutput());
 
     // Test with verbose output.
-    $process = new Process($command);
+    $alteredConfigFile = $this->getAlteredPhpunitXmlConfigurationFile(
+      '<parameter name="verbose" value="false"/>',
+      '<parameter name="verbose" value="true"/>',
+    );
+    $config = [
+      '--configuration',
+      $alteredConfigFile,
+    ];
+    $process = new Process(array_merge($command, $config));
     $process->setWorkingDirectory($this->root)
       ->setTimeout(300)
       ->setIdleTimeout(300);
-    $process->run(NULL, [
-      'BROWSERTEST_OUTPUT_VERBOSE' => '1',
-    ]);
+    $process->run();
     $this->assertEquals(0, $process->getExitCode(),
       'COMMAND: ' . $process->getCommandLine() . "\n" .
       'OUTPUT: ' . $process->getOutput() . "\n" .
       'ERROR: ' . $process->getErrorOutput() . "\n");
     $this->assertStringContainsString('HTML output was generated.', $process->getOutput());
     $this->assertStringContainsString('Drupal_FunctionalTests_Test_FunctionalTestDebugHtmlOutputHelperTest', $process->getOutput());
+    unlink($alteredConfigFile);
 
     // Test with a wrong output directory.
-    $process = new Process($command);
+    $config = [
+      '--configuration',
+      'core',
+    ];
+    $process = new Process(array_merge($command, $config));
     $process->setWorkingDirectory($this->root)
       ->setTimeout(300)
       ->setIdleTimeout(300);
@@ -75,4 +89,49 @@ public function testFunctionalTestDebugHtmlOutput(): void {
     $this->assertStringContainsString('HTML output directory can_we_assume_that_a_subdirectory_with_this_name_does_not_exist is not a writable directory.', $process->getOutput());
   }
 
+  /**
+   * Checks functional tests produce HTML output with legacy env variables.
+   *
+   * This is a weird deprecation test - we need to check the CLI output of the
+   * spawned process for explicit deprecation messages. The normal deprecation
+   * process does not work here as the deprecation is triggered in PHPUnit
+   * during extensions bootstrap, before we have the tools to capture them.
+   *
+   * @group legacy
+   */
+  public function testFunctionalTestDebugHtmlOutputWithLegacyEnvironmentVariables(): void {
+    $command = [
+      'vendor/bin/phpunit',
+      '--configuration',
+      'core',
+      'core/tests/Drupal/FunctionalTests/Test/FunctionalTestDebugHtmlOutputHelperTest.php',
+    ];
+
+    // Test with verbose output.
+    $process = new Process($command);
+    $process->setWorkingDirectory($this->root)
+      ->setTimeout(300)
+      ->setIdleTimeout(300);
+    $process->run(NULL, [
+      'BROWSERTEST_OUTPUT_VERBOSE' => '1',
+    ]);
+    $this->assertEquals(0, $process->getExitCode(),
+      'COMMAND: ' . $process->getCommandLine() . "\n" .
+      'OUTPUT: ' . $process->getOutput() . "\n" .
+      'ERROR: ' . $process->getErrorOutput() . "\n");
+    $this->assertStringContainsString('The environment variable \'BROWSERTEST_OUTPUT_VERBOSE\' is deprecated.', $process->getOutput());
+    $this->assertStringContainsString('HTML output was generated.', $process->getOutput());
+    $this->assertStringContainsString('Drupal_FunctionalTests_Test_FunctionalTestDebugHtmlOutputHelperTest', $process->getOutput());
+  }
+
+  private function getAlteredPhpunitXmlConfigurationFile(array|string $search, array|string $replace): string {
+    $fileSystem = \Drupal::service('file_system');
+    $copiedConfigFile = $fileSystem->tempnam('public://', 'pux');
+    $fileSystem->copy($this->root . \DIRECTORY_SEPARATOR . 'core' . \DIRECTORY_SEPARATOR . 'phpunit.xml.dist', $copiedConfigFile, FileExists::Replace);
+    $content = file_get_contents($copiedConfigFile);
+    $content = str_replace($search, $replace, $content);
+    file_put_contents($copiedConfigFile, $content);
+dump($fileSystem->realpath($copiedConfigFile), $content);
+    return $fileSystem->realpath($copiedConfigFile);
+  }
 }
diff --git a/core/tests/Drupal/TestTools/Extension/HtmlLogging/HtmlOutputLogger.php b/core/tests/Drupal/TestTools/Extension/HtmlLogging/HtmlOutputLogger.php
index 10a8f5a49b..0515e1ea54 100644
--- a/core/tests/Drupal/TestTools/Extension/HtmlLogging/HtmlOutputLogger.php
+++ b/core/tests/Drupal/TestTools/Extension/HtmlLogging/HtmlOutputLogger.php
@@ -4,21 +4,24 @@
 
 namespace Drupal\TestTools\Extension\HtmlLogging;
 
-use PHPUnit\Event\Facade;
 use PHPUnit\Event\TestRunner\Finished as TestRunnerFinished;
 use PHPUnit\Event\TestRunner\Started as TestRunnerStarted;
+use PHPUnit\Runner\Extension\Extension;
+use PHPUnit\Runner\Extension\Facade;
+use PHPUnit\Runner\Extension\ParameterCollection;
+use PHPUnit\TextUI\Configuration\Configuration;
 
 /**
  * Drupal's extension for providing HTML output results for functional tests.
  *
  * @internal
  */
-final class HtmlOutputLogger {
+final class HtmlOutputLogger implements Extension {
 
   /**
-   * The singleton instance.
+   * The status of the extension.
    */
-  private static ?self $instance = NULL;
+  private bool $enabled = FALSE;
 
   /**
    * A file with list of links to HTML pages generated.
@@ -26,53 +29,60 @@ final class HtmlOutputLogger {
   private ?string $browserOutputFile = NULL;
 
   /**
-   * @throws \PHPUnit\Event\EventFacadeIsSealedException
-   * @throws \PHPUnit\Util\Exception
-   * @throws \PHPUnit\Event\UnknownSubscriberTypeException
-   * @throws \RuntimeException
+   * A file with list of links to HTML pages generated.
    */
-  private function __construct(
-    private readonly string $outputDirectory,
-    private readonly bool $outputVerbose,
-    private readonly Facade $facade,
-  ) {
-    $this->facade->registerSubscriber(new TestRunnerStartedSubscriber($this));
-    $this->facade->registerSubscriber(new TestRunnerFinishedSubscriber($this));
-  }
+  private string $outputDirectory;
 
   /**
-   * Initializes the extension.
+   * Verbosity of the final report.
    *
-   * @param string $outputDirectory
-   *   The directory where the HTML pages should be generated.
-   * @param bool $outputVerbose
-   *   If TRUE, a list of links generated will be output at the end of the test
-   *   run; if FALSE, only a summary with the count of pages generated.
-   *
-   * @throws \PHPUnit\Event\EventFacadeIsSealedException
-   * @throws \PHPUnit\Util\Exception
-   * @throws \PHPUnit\Event\UnknownSubscriberTypeException
-   * @throws \RuntimeException
+   * If TRUE, a list of links generated will be output at the end of the test
+   * run; if FALSE, only a summary with the count of pages generated.
    */
-  public static function init(string $outputDirectory, bool $outputVerbose): void {
-    if (self::$instance === NULL) {
-      $realDirectory = realpath($outputDirectory);
-      if ($realDirectory === FALSE || !is_dir($realDirectory) || !is_writable($realDirectory)) {
-        print "HTML output directory {$outputDirectory} is not a writable directory.\n\n";
-        return;
-      }
-      self::$instance = new self($realDirectory, $outputVerbose, Facade::instance());
-    }
-  }
+  private bool $outputVerbose;
 
   /**
-   * Determines if the extension is enabled.
-   *
-   * @return bool
-   *   TRUE if enabled, FALSE if disabled.
+   * {@inheritdoc}
    */
-  public static function isEnabled(): bool {
-    return self::$instance !== NULL;
+  public function bootstrap(
+    Configuration $configuration,
+    Facade $facade,
+    ParameterCollection $parameters,
+  ): void {
+    $browserTestOutputDirectory = getenv('BROWSERTEST_OUTPUT_DIRECTORY');
+    if ($browserTestOutputDirectory === FALSE || $browserTestOutputDirectory === "") {
+      return;
+    }
+    $realDirectory = realpath($browserTestOutputDirectory);
+    if ($realDirectory === FALSE || !is_dir($realDirectory) || !is_writable($realDirectory)) {
+      print "HTML output directory {$browserTestOutputDirectory} is not a writable directory.\n\n";
+      return;
+    }
+    $this->outputDirectory = $realDirectory;
+
+    // Determine verbose output.
+    $envVerbose = getenv('BROWSERTEST_OUTPUT_VERBOSE');
+    if ($envVerbose !== FALSE) {
+      @trigger_error('Using the environment variable \'BROWSERTEST_OUTPUT_VERBOSE\' to determine verbosity of the HTML output logger is deprecated in drupal:11.0.0 and will be removed in drupal:12.0.0. Use the "verbose" parameter for the HtmlOutputLogger extension in the phpunit.xml configuration file instead. See https://www.drupal.org/node/3453468', E_USER_DEPRECATED);
+      print "**************************************************************************\n";
+      print "The environment variable 'BROWSERTEST_OUTPUT_VERBOSE' is deprecated.\n";
+      print "Edit the \"verbose\" parameter for the HtmlOutputLogger extension in the\n";
+      print "phpunit.xml configuration file instead.\n";
+      print "**************************************************************************\n\n";
+      $verbose = $envVerbose;
+    }
+    elseif ($parameters->has('verbose')) {
+      $verbose = $parameters->get('verbose');
+    }
+    else {
+      $verbose = FALSE;
+    }
+    $this->outputVerbose = filter_var($verbose, \FILTER_VALIDATE_BOOLEAN);
+
+    $facade->registerSubscriber(new TestRunnerStartedSubscriber($this));
+    $facade->registerSubscriber(new TestRunnerFinishedSubscriber($this));
+
+    $this->enabled = TRUE;
   }
 
   /**
@@ -84,11 +94,10 @@ public static function isEnabled(): bool {
    * @throws \RuntimeException
    */
   public static function log(string $logEntry): void {
-    if (!self::isEnabled()) {
+    $browserOutputFile = getenv('BROWSERTEST_OUTPUT_FILE');
+    if ($browserOutputFile === FALSE) {
       throw new \RuntimeException("HTML output is not enabled");
     }
-
-    $browserOutputFile = getenv('BROWSERTEST_OUTPUT_FILE');
     file_put_contents($browserOutputFile, $logEntry . "\n", FILE_APPEND);
   }
 
@@ -96,7 +105,7 @@ public static function log(string $logEntry): void {
    * Empties the list of the HTML output created during the test run.
    */
   public function testRunnerStarted(TestRunnerStarted $event): void {
-    if (!self::isEnabled()) {
+    if (!$this->enabled) {
       throw new \RuntimeException("HTML output is not enabled");
     }
 
@@ -118,7 +127,7 @@ public function testRunnerStarted(TestRunnerStarted $event): void {
    * Prints the list of HTML output generated during the test.
    */
   public function testRunnerFinished(TestRunnerFinished $event): void {
-    if (!self::isEnabled()) {
+    if (!$this->enabled) {
       throw new \RuntimeException("HTML output is not enabled");
     }
 
diff --git a/core/tests/Drupal/Tests/BrowserHtmlDebugTrait.php b/core/tests/Drupal/Tests/BrowserHtmlDebugTrait.php
index 35400a5c90..dd3430b1d4 100644
--- a/core/tests/Drupal/Tests/BrowserHtmlDebugTrait.php
+++ b/core/tests/Drupal/Tests/BrowserHtmlDebugTrait.php
@@ -125,7 +125,8 @@ protected function htmlOutput($message = NULL) {
    * Creates the directory to store browser output.
    */
   protected function initBrowserOutputFile() {
-    $this->htmlOutputEnabled = HtmlOutputLogger::isEnabled();
+    $browserOutputFile = getenv('BROWSERTEST_OUTPUT_FILE');
+    $this->htmlOutputEnabled = $browserOutputFile !== FALSE;
     $this->htmlOutputBaseUrl = getenv('BROWSERTEST_OUTPUT_BASE_URL') ?: $GLOBALS['base_url'];
     if ($this->htmlOutputEnabled) {
       $this->htmlOutputClassName = str_replace("\\", "_", static::class);
diff --git a/core/tests/bootstrap.php b/core/tests/bootstrap.php
index 0d66341040..db54e2dce9 100644
--- a/core/tests/bootstrap.php
+++ b/core/tests/bootstrap.php
@@ -9,7 +9,6 @@
 
 use Drupal\TestTools\ErrorHandler\BootstrapErrorHandler;
 use Drupal\TestTools\Extension\DeprecationBridge\DeprecationHandler;
-use Drupal\TestTools\Extension\HtmlLogging\HtmlOutputLogger;
 use PHPUnit\Runner\ErrorHandler as PhpUnitErrorHandler;
 use Symfony\Component\ErrorHandler\DebugClassLoader;
 
@@ -178,12 +177,6 @@ class_alias('\Drupal\Tests\DocumentElement', '\Behat\Mink\Element\DocumentElemen
   DebugClassLoader::enable();
 }
 
-// Functional tests HTML output logging.
-$browserTestOutputDirectory = getenv('BROWSERTEST_OUTPUT_DIRECTORY');
-if ($browserTestOutputDirectory !== FALSE) {
-  HtmlOutputLogger::init($browserTestOutputDirectory, (bool) getenv('BROWSERTEST_OUTPUT_VERBOSE') ?? FALSE);
-}
-
 // Drupal expects to be run from its root directory. This ensures all test types
 // are consistent.
 chdir(dirname(__DIR__, 2));
