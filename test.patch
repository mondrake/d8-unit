diff --git a/core/modules/file/tests/src/Functional/FileFieldValidateTest.php b/core/modules/file/tests/src/Functional/FileFieldValidateTest.php
index 5aa059af45..ac744ea47e 100644
--- a/core/modules/file/tests/src/Functional/FileFieldValidateTest.php
+++ b/core/modules/file/tests/src/Functional/FileFieldValidateTest.php
@@ -208,8 +208,8 @@ public function testFileRemoval() {
    */
   public function testAssertFileExistsDeprecation() {
     if (RunnerVersion::getMajor() == 6) {
-      $this->expectDeprecation('Passing a File entity as $file argument to FileFieldTestBase::assertFileExists is deprecated in drupal:8.8.0. It will be removed from drupal:9.0.0. Instead, pass the File entity URI via File::getFileUri(). See https://www.drupal.org/node/3057326');
-      $this->expectDeprecation('Passing a File entity as $file argument to FileFieldTestBase::assertFileNotExists is deprecated in drupal:8.8.0. It will be removed from drupal:9.0.0. Instead, pass the File entity URI via File::getFileUri(). See https://www.drupal.org/node/3057326');
+      $this->addExpectedDeprecationMessage('Passing a File entity as $file argument to FileFieldTestBase::assertFileExists is deprecated in drupal:8.8.0. It will be removed from drupal:9.0.0. Instead, pass the File entity URI via File::getFileUri(). See https://www.drupal.org/node/3057326');
+      $this->addExpectedDeprecationMessage('Passing a File entity as $file argument to FileFieldTestBase::assertFileNotExists is deprecated in drupal:8.8.0. It will be removed from drupal:9.0.0. Instead, pass the File entity URI via File::getFileUri(). See https://www.drupal.org/node/3057326');
     }
     else {
       $this->markTestSkipped('This test does not work in PHPUnit 7+ since assertFileExists only accepts string arguments for $file');
diff --git a/core/modules/path/tests/src/Kernel/Migrate/d6/LegacyMigrateUrlAliasTest.php b/core/modules/path/tests/src/Kernel/Migrate/d6/LegacyMigrateUrlAliasTest.php
index 9570f16b40..697cb2acb9 100644
--- a/core/modules/path/tests/src/Kernel/Migrate/d6/LegacyMigrateUrlAliasTest.php
+++ b/core/modules/path/tests/src/Kernel/Migrate/d6/LegacyMigrateUrlAliasTest.php
@@ -109,7 +109,7 @@ protected function setUp() {
       'd6_node_translation',
     ]);
     $this->executeMigration(\Drupal::service('plugin.manager.migration')->createStubMigration($this->stubMigration));
-    $this->expectDeprecation('UrlAlias is deprecated in drupal:8.8.0 and is removed from drupal:9.0.0. Use the entity:path_alias destination instead. See https://www.drupal.org/node/3013865');
+    $this->addExpectedDeprecationMessage('UrlAlias is deprecated in drupal:8.8.0 and is removed from drupal:9.0.0. Use the entity:path_alias destination instead. See https://www.drupal.org/node/3013865');
   }

 }
diff --git a/core/modules/path/tests/src/Kernel/Migrate/d7/LegacyMigrateUrlAliasTest.php b/core/modules/path/tests/src/Kernel/Migrate/d7/LegacyMigrateUrlAliasTest.php
index 27eb202156..4ae76b1f41 100644
--- a/core/modules/path/tests/src/Kernel/Migrate/d7/LegacyMigrateUrlAliasTest.php
+++ b/core/modules/path/tests/src/Kernel/Migrate/d7/LegacyMigrateUrlAliasTest.php
@@ -104,7 +104,7 @@ protected function setUp() {
       'd7_node_translation',
     ]);
     $this->executeMigration(\Drupal::service('plugin.manager.migration')->createStubMigration($this->stubMigration));
-    $this->expectDeprecation('UrlAlias is deprecated in drupal:8.8.0 and is removed from drupal:9.0.0. Use the entity:path_alias destination instead. See https://www.drupal.org/node/3013865');
+    $this->addExpectedDeprecationMessage('UrlAlias is deprecated in drupal:8.8.0 and is removed from drupal:9.0.0. Use the entity:path_alias destination instead. See https://www.drupal.org/node/3013865');
   }

 }
diff --git a/core/modules/rest/tests/src/Functional/EntityResource/FormatSpecificGetBcRouteTestTrait.php b/core/modules/rest/tests/src/Functional/EntityResource/FormatSpecificGetBcRouteTestTrait.php
index 9313a159b5..6fd24b2829 100644
--- a/core/modules/rest/tests/src/Functional/EntityResource/FormatSpecificGetBcRouteTestTrait.php
+++ b/core/modules/rest/tests/src/Functional/EntityResource/FormatSpecificGetBcRouteTestTrait.php
@@ -25,7 +25,7 @@ public function testFormatSpecificGetBcRoute() {
     // new and old sites, but trigger deprecation notices.
     $bc_route = Url::fromRoute('rest.entity.' . static::$entityTypeId . '.GET.' . static::$format, $url->getRouteParameters(), $url->getOptions());
     $bc_route->setUrlGenerator($this->container->get('url_generator'));
-    $this->expectDeprecation(sprintf("The 'rest.entity.entity_test.GET.%s' route is deprecated since version 8.5.x and will be removed in 9.0.0. Use the 'rest.entity.entity_test.GET' route instead.", static::$format));
+    $this->addExpectedDeprecationMessage(sprintf("The 'rest.entity.entity_test.GET.%s' route is deprecated since version 8.5.x and will be removed in 9.0.0. Use the 'rest.entity.entity_test.GET' route instead.", static::$format));
     $this->assertSame($url->toString(TRUE)->getGeneratedUrl(), $bc_route->toString(TRUE)->getGeneratedUrl());
   }

diff --git a/core/modules/system/tests/src/Functional/Entity/Update/SqlContentEntityStorageSchemaConverterTestBase.php b/core/modules/system/tests/src/Functional/Entity/Update/SqlContentEntityStorageSchemaConverterTestBase.php
index 33f2ca5cd1..a6b413bb17 100644
--- a/core/modules/system/tests/src/Functional/Entity/Update/SqlContentEntityStorageSchemaConverterTestBase.php
+++ b/core/modules/system/tests/src/Functional/Entity/Update/SqlContentEntityStorageSchemaConverterTestBase.php
@@ -74,7 +74,7 @@ public function testMakeRevisionable() {
       $this->updateEntityTypeToRevisionable();
     }

-    $this->expectDeprecation('\Drupal\Core\Entity\Sql\SqlContentEntityStorageSchemaConverter is deprecated in Drupal 8.7.0, will be removed before Drupal 9.0.0. Use \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface::updateFieldableEntityType() instead. See https://www.drupal.org/node/3029997.');
+    $this->addExpectedDeprecationMessage('\Drupal\Core\Entity\Sql\SqlContentEntityStorageSchemaConverter is deprecated in Drupal 8.7.0, will be removed before Drupal 9.0.0. Use \Drupal\Core\Entity\EntityDefinitionUpdateManagerInterface::updateFieldableEntityType() instead. See https://www.drupal.org/node/3029997.');
     $this->runUpdates();

     /** @var \Drupal\Core\Entity\EntityTypeInterface $entity_test_update */
diff --git a/core/tests/Drupal/KernelTests/Core/Plugin/Context/ContextAwarePluginBaseTest.php b/core/tests/Drupal/KernelTests/Core/Plugin/Context/ContextAwarePluginBaseTest.php
index 0e1ba5daab..1271d22ec7 100644
--- a/core/tests/Drupal/KernelTests/Core/Plugin/Context/ContextAwarePluginBaseTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Plugin/Context/ContextAwarePluginBaseTest.php
@@ -75,7 +75,7 @@ public function testGetContextValue() {

     // It should be possible to access the context via the $contexts property,
     // but it should trigger a deprecation notice.
-    $this->expectDeprecation('The $contexts property is deprecated in Drupal 8.8.0 and will be removed before Drupal 9.0.0. Use methods of \Drupal\Component\Plugin\ContextAwarePluginInterface instead. See https://www.drupal.org/project/drupal/issues/3080631 for more information.');
+    $this->addExpectedDeprecationMessage('The $contexts property is deprecated in Drupal 8.8.0 and will be removed before Drupal 9.0.0. Use methods of \Drupal\Component\Plugin\ContextAwarePluginInterface instead. See https://www.drupal.org/project/drupal/issues/3080631 for more information.');
     $this->assertSame('Alpha', $this->plugin->contexts['nato_letter']->getContextValue());
   }

@@ -97,7 +97,7 @@ public function testSetContextValue() {

     // Assert that setContextValue() did NOT update the deprecated $contexts
     // property.
-    $this->expectDeprecation('The $contexts property is deprecated in Drupal 8.8.0 and will be removed before Drupal 9.0.0. Use methods of \Drupal\Component\Plugin\ContextAwarePluginInterface instead. See https://www.drupal.org/project/drupal/issues/3080631 for more information.');
+    $this->addExpectedDeprecationMessage('The $contexts property is deprecated in Drupal 8.8.0 and will be removed before Drupal 9.0.0. Use methods of \Drupal\Component\Plugin\ContextAwarePluginInterface instead. See https://www.drupal.org/project/drupal/issues/3080631 for more information.');
     $this->assertArrayNotHasKey('foo', $this->plugin->contexts);
   }

diff --git a/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit6/ExpectDeprecationTrait.php b/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit6/ExpectDeprecationTrait.php
new file mode 100644
index 0000000000..85d5a24ca8
--- /dev/null
+++ b/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit6/ExpectDeprecationTrait.php
@@ -0,0 +1,34 @@
+<?php
+
+namespace Drupal\TestTools\PhpUnitCompatibility\PhpUnit6;
+
+/**
+ * Adds the ability to dynamically set expected deprecation messages in tests.
+ *
+ * @internal
+ *   This class should only be used by Drupal core and will be removed once
+ *   https://github.com/symfony/symfony/pull/25757 is resolved.
+ *
+ * @todo Remove once https://github.com/symfony/symfony/pull/25757 is resolved.
+ */
+trait ExpectDeprecationTrait {
+
+  /**
+   * Sets an expected deprecation message.
+   *
+   * @param string $message
+   *   The expected deprecation message.
+   *
+   * @deprecated in drupal:8.9.0 and is removed from drupal:9.0.0. Use
+   *   ::addExpectedDeprecationMessage() instead.
+   *
+   * @see https://www.drupal.org/node/3106024
+   */
+  protected function expectDeprecation($message) {
+    if (strpos($message, __METHOD__) === FALSE) {
+      @trigger_error(__METHOD__ . ' is deprecated in drupal:8.9.0 and is removed from drupal:9.0.0. Use ::addExpectedDeprecationMessage() instead. See https://www.drupal.org/node/3106024', E_USER_DEPRECATED);
+    }
+    $this->addExpectedDeprecationMessage($message);
+  }
+
+}
diff --git a/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit7/ExpectDeprecationTrait.php b/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit7/ExpectDeprecationTrait.php
new file mode 100644
index 0000000000..ab5ef6defd
--- /dev/null
+++ b/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit7/ExpectDeprecationTrait.php
@@ -0,0 +1,34 @@
+<?php
+
+namespace Drupal\TestTools\PhpUnitCompatibility\PhpUnit7;
+
+/**
+ * Adds the ability to dynamically set expected deprecation messages in tests.
+ *
+ * @internal
+ *   This class should only be used by Drupal core and will be removed once
+ *   https://github.com/symfony/symfony/pull/25757 is resolved.
+ *
+ * @todo Remove once https://github.com/symfony/symfony/pull/25757 is resolved.
+ */
+trait ExpectDeprecationTrait {
+
+  /**
+   * Sets an expected deprecation message.
+   *
+   * @param string $message
+   *   The expected deprecation message.
+   *
+   * @deprecated in drupal:8.9.0 and is removed from drupal:9.0.0. Use
+   *   ::addExpectedDeprecationMessage() instead.
+   *
+   * @see https://www.drupal.org/node/3106024
+   */
+  protected function expectDeprecation($message) {
+    if (strpos($message, __METHOD__) === FALSE) {
+      @trigger_error(__METHOD__ . ' is deprecated in drupal:8.9.0 and is removed from drupal:9.0.0. Use ::addExpectedDeprecationMessage() instead. See https://www.drupal.org/node/3106024', E_USER_DEPRECATED);
+    }
+    $this->addExpectedDeprecationMessage($message);
+  }
+
+}
diff --git a/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit8/ExpectDeprecationTrait.php b/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit8/ExpectDeprecationTrait.php
new file mode 100644
index 0000000000..a81091d5e4
--- /dev/null
+++ b/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit8/ExpectDeprecationTrait.php
@@ -0,0 +1,18 @@
+<?php
+
+namespace Drupal\TestTools\PhpUnitCompatibility\PhpUnit8;
+
+/**
+ * Adds the ability to dynamically set expected deprecation messages in tests.
+ *
+ * @internal
+ *   This class should only be used by Drupal core and will be removed once
+ *   https://github.com/symfony/symfony/pull/25757 is resolved.
+ *
+ * @todo Remove once https://github.com/symfony/symfony/pull/25757 is resolved.
+ */
+trait ExpectDeprecationTrait {
+
+    // @todo remove in Drupal 9.
+
+}
diff --git a/core/tests/Drupal/Tests/Core/Entity/ContentEntityBaseUnitTest.php b/core/tests/Drupal/Tests/Core/Entity/ContentEntityBaseUnitTest.php
index 1ce29a1199..63d83117dc 100644
--- a/core/tests/Drupal/Tests/Core/Entity/ContentEntityBaseUnitTest.php
+++ b/core/tests/Drupal/Tests/Core/Entity/ContentEntityBaseUnitTest.php
@@ -479,7 +479,7 @@ public function testAccess() {
    */
   public function testLabel() {

-    $this->expectDeprecation('Entity type ' . $this->entityTypeId . ' defines a label callback. Support for that is deprecated in drupal:8.0.0 and will be removed in drupal:9.0.0. Override the EntityInterface::label() method instead. See https://www.drupal.org/node/3050794');
+    $this->addExpectedDeprecationMessage('Entity type ' . $this->entityTypeId . ' defines a label callback. Support for that is deprecated in drupal:8.0.0 and will be removed in drupal:9.0.0. Override the EntityInterface::label() method instead. See https://www.drupal.org/node/3050794');

     // Make a mock with one method that we use as the entity's label callback.
     // We check that it is called, and that the entity's label is the callback's
diff --git a/core/tests/Drupal/Tests/Core/Entity/EntityUnitTest.php b/core/tests/Drupal/Tests/Core/Entity/EntityUnitTest.php
index 2fc86a66f7..0253a56dfb 100644
--- a/core/tests/Drupal/Tests/Core/Entity/EntityUnitTest.php
+++ b/core/tests/Drupal/Tests/Core/Entity/EntityUnitTest.php
@@ -175,7 +175,7 @@ public function testBundle() {
    */
   public function testLabel() {

-    $this->expectDeprecation('Entity type ' . $this->entityTypeId . ' defines a label callback. Support for that is deprecated in drupal:8.0.0 and will be removed in drupal:9.0.0. Override the EntityInterface::label() method instead. See https://www.drupal.org/node/3050794');
+    $this->addExpectedDeprecationMessage('Entity type ' . $this->entityTypeId . ' defines a label callback. Support for that is deprecated in drupal:8.0.0 and will be removed in drupal:9.0.0. Override the EntityInterface::label() method instead. See https://www.drupal.org/node/3050794');

     // Make a mock with one method that we use as the entity's uri_callback. We
     // check that it is called, and that the entity's label is the callback's
diff --git a/core/tests/Drupal/Tests/Core/Site/SettingsTest.php b/core/tests/Drupal/Tests/Core/Site/SettingsTest.php
index c43bc99a52..b4e31d129f 100644
--- a/core/tests/Drupal/Tests/Core/Site/SettingsTest.php
+++ b/core/tests/Drupal/Tests/Core/Site/SettingsTest.php
@@ -168,7 +168,7 @@ public function testConfigDirectoriesBcLayer($settings_file_content, $directory,
       ->setContent($settings_file_content);

     if ($expect_deprecation) {
-      $this->expectDeprecation('$config_directories[\'sync\'] has moved to $settings[\'config_sync_directory\']. See https://www.drupal.org/node/3018145.');
+      $this->addExpectedDeprecationMessage('$config_directories[\'sync\'] has moved to $settings[\'config_sync_directory\']. See https://www.drupal.org/node/3018145.');
     }

     Settings::initialize(vfsStream::url('root'), 'sites', $class_loader);
diff --git a/core/tests/Drupal/Tests/ExpectDeprecationTest.php b/core/tests/Drupal/Tests/ExpectDeprecationTest.php
index aefb6a0ad9..6ee91ba663 100644
--- a/core/tests/Drupal/Tests/ExpectDeprecationTest.php
+++ b/core/tests/Drupal/Tests/ExpectDeprecationTest.php
@@ -3,6 +3,7 @@
 namespace Drupal\Tests;

 use Drupal\Tests\Traits\ExpectDeprecationTrait;
+use Drupal\TestTools\PhpUnitCompatibility\RunnerVersion;

 /**
  * @coversDefaultClass \Drupal\Tests\Traits\ExpectDeprecationTrait
@@ -14,23 +15,41 @@ class ExpectDeprecationTest extends UnitTestCase {
   use ExpectDeprecationTrait;

   /**
-   * @covers ::expectDeprecation
+   * @covers ::addExpectedDeprecationMessage
    */
   public function testExpectDeprecation() {
-    $this->expectDeprecation('Test deprecation');
+    $this->addExpectedDeprecationMessage('Test deprecation');
     @trigger_error('Test deprecation', E_USER_DEPRECATED);
   }

   /**
-   * @covers ::expectDeprecation
+   * @covers ::addExpectedDeprecationMessage
    * @runInSeparateProcess
    * @preserveGlobalState disabled
    */
   public function testExpectDeprecationInIsolation() {
-    $this->expectDeprecation('Test isolated deprecation');
-    $this->expectDeprecation('Test isolated deprecation2');
+    $this->addExpectedDeprecationMessage('Test isolated deprecation');
+    $this->addExpectedDeprecationMessage('Test isolated deprecation2');
     @trigger_error('Test isolated deprecation', E_USER_DEPRECATED);
     @trigger_error('Test isolated deprecation2', E_USER_DEPRECATED);
   }

+  /**
+   * @covers ::addExpectedDeprecationMessage
+   *
+   * @todo the expectedDeprecation annotation does not work if tests are marked
+   *   skipped.
+   * @see https://github.com/symfony/symfony/pull/25757
+   */
+  public function testDeprecatedExpectDeprecation() {
+    if (RunnerVersion::getMajor() < 8) {
+      $this->addExpectedDeprecationMessage('Passing a File entity as $file argument to FileFieldTestBase::assertFileExists is deprecated in drupal:8.8.0. It will be removed from drupal:9.0.0. Instead, pass the File entity URI via File::getFileUri(). See https://www.drupal.org/node/3057326');
+    }
+    else {
+      $this->markTestSkipped('This test does not work in PHPUnit 8+ since expectDeprecation has a specific implementation');
+    }
+    $this->expectDeprecation('Test deprecated expectDeprecation');
+    @trigger_error('Test deprecated expectDeprecation', E_USER_DEPRECATED);
+  }
+
 }
diff --git a/core/tests/Drupal/Tests/Traits/ExpectDeprecationTrait.php b/core/tests/Drupal/Tests/Traits/ExpectDeprecationTrait.php
index 9145252209..af81ad4714 100644
--- a/core/tests/Drupal/Tests/Traits/ExpectDeprecationTrait.php
+++ b/core/tests/Drupal/Tests/Traits/ExpectDeprecationTrait.php
@@ -2,12 +2,20 @@

 namespace Drupal\Tests\Traits;

+use Drupal\TestTools\PhpUnitCompatibility\RunnerVersion;
 use Symfony\Bridge\PhpUnit\Legacy\SymfonyTestsListener as LegacySymfonyTestsListener;
 use Symfony\Bridge\PhpUnit\SymfonyTestsListener;
 use PHPUnit\Framework\AssertionFailedError;
 use PHPUnit\Framework\TestCase;
 use PHPUnit\Util\Test;

+// In order to manage different method signatures between PHPUnit versions, we
+// dynamically load a compatibility trait dependent on the PHPUnit runner
+// version.
+if (!trait_exists(PhpunitVersionDependentExpectDeprecationTrait::class, FALSE)) {
+  class_alias("Drupal\TestTools\PhpUnitCompatibility\PhpUnit" . RunnerVersion::getMajor() . "\ExpectDeprecationTrait", PhpunitVersionDependentExpectDeprecationTrait::class);
+}
+
 /**
  * Adds the ability to dynamically set expected deprecation messages in tests.
  *
@@ -19,13 +27,15 @@
  */
 trait ExpectDeprecationTrait {

+  use PhpunitVersionDependentExpectDeprecationTrait;
+
   /**
    * Sets an expected deprecation message.
    *
    * @param string $message
    *   The expected deprecation message.
    */
-  protected function expectDeprecation($message) {
+  protected function addExpectedDeprecationMessage($message) {
     $this->expectedDeprecations([$message]);
   }
