diff --git a/core/core.services.yml b/core/core.services.yml
index e84dfbb29ea..26547a73ef9 100644
--- a/core/core.services.yml
+++ b/core/core.services.yml
@@ -1791,3 +1791,17 @@ services:
     class: Drupal\Core\Pager\PagerParameters
     arguments: ['@request_stack']
   Drupal\Core\Pager\PagerParametersInterface: '@pager.parameters'
+  select_extender_factory.pager:
+    class: Drupal\Core\Database\Query\PagerSelectExtenderFactory
+    arguments: ['@pager.manager']
+    tags:
+      - { name: backend_overridable }
+  Drupal\Core\Database\Query\PagerSelectExtenderFactory: '@select_extender_factory.pager'
+  Drupal\Core\Database\Query\PagerSelectExtender: '@select_extender_factory.pager'
+  select_extender_factory.table_sort:
+    class: Drupal\Core\Database\Query\TableSortExtenderFactory
+    arguments: ['@request_stack']
+    tags:
+      - { name: backend_overridable }
+  Drupal\Core\Database\Query\TableSortExtenderFactory: '@select_extender_factory.table_sort'
+  Drupal\Core\Database\Query\TableSortExtender: '@select_extender_factory.table_sort'
diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index 39a856e966e..fea51842f17 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -897,23 +897,14 @@ protected function expandArguments(&$query, &$args) {
    *
    * @return string
    *   The name of the class that should be used for this driver.
+   *
+   * @deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Use
+   *   standard autoloading in the methods that return database operations.
+   *
+   * @see https://www.drupal.org/node/3217534
    */
   public function getDriverClass($class) {
-    match($class) {
-      'Install\\Tasks',
-      'ExceptionHandler',
-      'Select',
-      'Insert',
-      'Merge',
-      'Upsert',
-      'Update',
-      'Delete',
-      'Truncate',
-      'Schema',
-      'Condition',
-      'Transaction' => @trigger_error('Calling ' . __METHOD__ . '() for \'' . $class . '\' is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Use standard autoloading in the methods that return database operations. See https://www.drupal.org/node/3217534', E_USER_DEPRECATED),
-      default => NULL,
-    };
+    @trigger_error('Calling ' . __METHOD__ . '() for \'' . $class . '\' is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Use standard autoloading in the methods that return database operations. See https://www.drupal.org/node/3217534', E_USER_DEPRECATED);
     if (empty($this->driverClasses[$class])) {
       $driver_class = $this->connectionOptions['namespace'] . '\\' . $class;
       if (class_exists($driver_class)) {
@@ -1901,8 +1892,14 @@ public function getProvider(): string {
    *
    * @throws \Drupal\Core\DependencyInjection\ContainerNotInitializedException
    *   If the container has not been initialized yet.
+   *
+   * @deprecated in drupal:9.4.0 and is removed from drupal:10.0.0. Use
+   *   dependency injection instead.
+   *
+   * @see https://www.drupal.org/node/3218001
    */
   public function getPagerManager(): PagerManagerInterface {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:9.4.0 and will be required in drupal:10.0.0. Use dependency injection instead. See https://www.drupal.org/node/3218001', E_USER_DEPRECATED);
     return \Drupal::service('pager.manager');
   }
 
diff --git a/core/lib/Drupal/Core/Database/Query/PagerSelectExtender.php b/core/lib/Drupal/Core/Database/Query/PagerSelectExtender.php
index 3620d9b5d17..76736681c3e 100644
--- a/core/lib/Drupal/Core/Database/Query/PagerSelectExtender.php
+++ b/core/lib/Drupal/Core/Database/Query/PagerSelectExtender.php
@@ -3,6 +3,7 @@
 namespace Drupal\Core\Database\Query;
 
 use Drupal\Core\Database\Connection;
+use Drupal\Core\Pager\PagerManagerInterface;
 
 /**
  * Query extender for pager queries.
@@ -16,6 +17,11 @@
  */
 class PagerSelectExtender extends SelectExtender {
 
+  /**
+   * The pager manager service.
+   */
+  protected PagerManagerInterface $pagerManager;
+
   /**
    * The number of elements per page to allow.
    *
@@ -44,9 +50,16 @@ class PagerSelectExtender extends SelectExtender {
    *   Select query object.
    * @param \Drupal\Core\Database\Connection $connection
    *   Database connection object.
+   * @param \Drupal\Core\Pager\PagerManagerInterface $pager_manager
+   *   The pager manager service.
    */
-  public function __construct(SelectInterface $query, Connection $connection) {
+  public function __construct(SelectInterface $query, Connection $connection, PagerManagerInterface $pager_manager = NULL) {
+    if (is_null($pager_manager)) {
+      @trigger_error('Calling ' . __METHOD__ . ' without the $pager_manager argument is deprecated in drupal:9.4.0 and will be required in drupal:10.0.0. Use the relevant service to instantiate extenders. See https://www.drupal.org/node/3218001', E_USER_DEPRECATED);
+      $pager_manager = \Drupal::service('pager.manager');
+    }
     parent::__construct($query, $connection);
+    $this->pagerManager = $pager_manager;
 
     // Add pager tag. Do this here to ensure that it is always added before
     // preExecute() is called.
@@ -74,7 +87,7 @@ public function execute() {
     $this->ensureElement();
 
     $total_items = $this->getCountQuery()->execute()->fetchField();
-    $pager = $this->connection->getPagerManager()->createPager($total_items, $this->limit, $this->element);
+    $pager = $this->pagerManager->createPager($total_items, $this->limit, $this->element);
     $this->range($pager->getCurrentPage() * $this->limit, $this->limit);
 
     // Now that we've added our pager-based range instructions, run the query normally.
@@ -89,7 +102,7 @@ public function execute() {
    */
   protected function ensureElement() {
     if (!isset($this->element)) {
-      $this->element($this->connection->getPagerManager()->getMaxPagerElementId() + 1);
+      $this->element($this->pagerManager->getMaxPagerElementId() + 1);
     }
   }
 
@@ -157,7 +170,7 @@ public function limit($limit = 10) {
    */
   public function element($element) {
     $this->element = $element;
-    $this->connection->getPagerManager()->reservePagerElementId($this->element);
+    $this->pagerManager->reservePagerElementId($this->element);
     return $this;
   }
 
diff --git a/core/lib/Drupal/Core/Database/Query/PagerSelectExtenderFactory.php b/core/lib/Drupal/Core/Database/Query/PagerSelectExtenderFactory.php
new file mode 100644
index 00000000000..0d74835d47e
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Query/PagerSelectExtenderFactory.php
@@ -0,0 +1,48 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\Query;
+
+use Drupal\Core\Database\Connection;
+use Drupal\Core\Pager\PagerManagerInterface;
+
+/**
+ * Select extender factory for pager queries.
+ */
+class PagerSelectExtenderFactory {
+
+  /**
+   * Constructs a PagerSelectExtenderFactory object.
+   *
+   * @param \Drupal\Core\Pager\PagerManagerInterface $pagerManager
+   *   The pager manager service.
+   */
+  public function __construct(
+    protected readonly PagerManagerInterface $pagerManager,
+  ) {
+  }
+
+  /**
+   * Returns a query extender for pager queries.
+   *
+   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   *   Select query object.
+   * @param \Drupal\Core\Database\Connection $connection
+   *   Database connection object.
+   *
+   * @return \Drupal\Core\Database\Query\PagerSelectExtender
+   *   A query extender for pager queries.
+   */
+  public function get(SelectInterface $query, Connection $connection): PagerSelectExtender {
+    // @todo remove this BC layer in drupal:11.0.0.
+    $class = $connection->getConnectionOptions()['namespace'] . '\\PagerSelectExtender';
+    if (class_exists($class)) {
+      @trigger_error("Invoking {$class} outside of a backend overridable service is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Include the driver class in a backend overridable service instead. See https://www.drupal.org/node/3217534", E_USER_DEPRECATED);
+      return new $class($query, $connection);
+    }
+    // @todo end
+    return new PagerSelectExtender($query, $connection, $this->pagerManager);
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/Query/Select.php b/core/lib/Drupal/Core/Database/Query/Select.php
index 157696d1c28..feb82812f50 100644
--- a/core/lib/Drupal/Core/Database/Query/Select.php
+++ b/core/lib/Drupal/Core/Database/Query/Select.php
@@ -331,6 +331,14 @@ public function havingCompile(Connection $connection) {
    * {@inheritdoc}
    */
   public function extend($extender_name) {
+    // @todo remove the BC layer in Drupal 10.
+    // @see https://www.drupal.org/project/drupal/issues/3260284
+    $serviceName = ltrim($extender_name, '\\');
+    if (\Drupal::hasService($serviceName)) {
+      return \Drupal::service($serviceName)->get($this, $this->connection);
+    }
+
+    // BC layer.
     $parts = explode('\\', $extender_name);
     $class = end($parts);
     $driver_class = $this->connection->getDriverClass($class);
diff --git a/core/lib/Drupal/Core/Database/Query/SelectExtender.php b/core/lib/Drupal/Core/Database/Query/SelectExtender.php
index 0681813f04c..2fd09b6d512 100644
--- a/core/lib/Drupal/Core/Database/Query/SelectExtender.php
+++ b/core/lib/Drupal/Core/Database/Query/SelectExtender.php
@@ -221,6 +221,14 @@ public function extend($extender_name) {
     // We cannot call $this->query->extend(), because with multiple extenders
     // you will replace all the earlier extenders with the last extender,
     // instead of creating list of objects that extend each other.
+    // @todo remove the BC layer in Drupal 10.
+    // @see https://www.drupal.org/project/drupal/issues/3260284
+    $serviceName = ltrim($extender_name, '\\');
+    if (\Drupal::hasService($serviceName)) {
+      return \Drupal::service($serviceName)->get($this, $this->connection);
+    }
+
+    // BC layer.
     $parts = explode('\\', $extender_name);
     $class = end($parts);
     $driver_class = $this->connection->getDriverClass($class);
diff --git a/core/lib/Drupal/Core/Database/Query/TableSortExtender.php b/core/lib/Drupal/Core/Database/Query/TableSortExtender.php
index 60da1b864ac..53f5c60ed5e 100644
--- a/core/lib/Drupal/Core/Database/Query/TableSortExtender.php
+++ b/core/lib/Drupal/Core/Database/Query/TableSortExtender.php
@@ -4,6 +4,7 @@
 
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Utility\TableSort;
+use Symfony\Component\HttpFoundation\RequestStack;
 
 /**
  * Query extender class for tablesort queries.
@@ -11,10 +12,27 @@
 class TableSortExtender extends SelectExtender {
 
   /**
-   * {@inheritdoc}
+   * The request stack.
    */
-  public function __construct(SelectInterface $query, Connection $connection) {
+  protected RequestStack $requestStack;
+
+  /**
+   * Constructs a TableSortExtender object.
+   *
+   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   *   Select query object.
+   * @param \Drupal\Core\Database\Connection $connection
+   *   Database connection object.
+   * @param \Symfony\Component\HttpFoundation\RequestStack $request_stack
+   *   The request stack.
+   */
+  public function __construct(SelectInterface $query, Connection $connection, RequestStack $request_stack = NULL) {
+    if (is_null($request_stack)) {
+      @trigger_error('Calling ' . __METHOD__ . ' without the $request_stack argument is deprecated in drupal:9.4.0 and will be required in drupal:10.0.0. Use the relevant service to instantiate extenders. See https://www.drupal.org/node/3218001', E_USER_DEPRECATED);
+      $request_stack = \Drupal::service('request_stack');
+    }
     parent::__construct($query, $connection);
+    $this->requestStack = $request_stack;
 
     // Add convenience tag to mark that this is an extended query. We have to
     // do this in the constructor to ensure that it is set before preExecute()
@@ -34,7 +52,7 @@ public function __construct(SelectInterface $query, Connection $connection) {
    * @see table.html.twig
    */
   public function orderByHeader(array $header) {
-    $context = TableSort::getContextFromRequest($header, \Drupal::request());
+    $context = TableSort::getContextFromRequest($header, $this->requestStack->getCurrentRequest());
     if (!empty($context['sql'])) {
       // Based on code from \Drupal\Core\Database\Connection::escapeTable(),
       // but this can also contain a dot.
diff --git a/core/lib/Drupal/Core/Database/Query/TableSortExtenderFactory.php b/core/lib/Drupal/Core/Database/Query/TableSortExtenderFactory.php
new file mode 100644
index 00000000000..5133988e75f
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Query/TableSortExtenderFactory.php
@@ -0,0 +1,48 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\Query;
+
+use Drupal\Core\Database\Connection;
+use Symfony\Component\HttpFoundation\RequestStack;
+
+/**
+ * Select extender factory for tablesort queries.
+ */
+class TableSortExtenderFactory {
+
+  /**
+   * Constructs a TableSortExtenderFactory object.
+   *
+   * @param \Symfony\Component\HttpFoundation\RequestStack $requestStack
+   *   The request stack.
+   */
+  public function __construct(
+    protected readonly RequestStack $requestStack,
+  ) {
+  }
+
+  /**
+   * Returns a query extender for tablesort queries.
+   *
+   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   *   Select query object.
+   * @param \Drupal\Core\Database\Connection $connection
+   *   Database connection object.
+   *
+   * @return \Drupal\Core\Database\Query\TableSortExtender
+   *   A query extender for tablesort queries.
+   */
+  public function get(SelectInterface $query, Connection $connection): TableSortExtender {
+    // @todo remove this BC layer in drupal:11.0.0.
+    $class = $connection->getConnectionOptions()['namespace'] . '\\TableSortExtender';
+    if (class_exists($class)) {
+      @trigger_error("Invoking {$class} outside of a backend overridable service is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Include the driver class in a backend overridable service instead. See https://www.drupal.org/node/3217534", E_USER_DEPRECATED);
+      return new $class($query, $connection);
+    }
+    // @todo end
+    return new TableSortExtender($query, $connection, $this->requestStack);
+  }
+
+}
diff --git a/core/modules/search/search.services.yml b/core/modules/search/search.services.yml
index bda507af4f0..405428589a4 100644
--- a/core/modules/search/search.services.yml
+++ b/core/modules/search/search.services.yml
@@ -19,3 +19,19 @@ services:
     class: Drupal\search\SearchTextProcessor
     arguments: ['@transliteration', '@config.factory', '@module_handler']
   Drupal\search\SearchTextProcessorInterface: '@search.text_processor'
+
+  select_extender_factory.search_query:
+    class: Drupal\search\SearchQueryFactory
+    arguments: ['@config.factory', '@search.text_processor']
+    tags:
+      - { name: backend_overridable }
+  Drupal\search\SearchQueryFactory: '@select_extender_factory.search_query'
+  Drupal\search\SearchQuery: '@select_extender_factory.search_query'
+
+  select_extender_factory.views_search_query:
+    class: Drupal\search\ViewsSearchQueryFactory
+    arguments: ['@config.factory', '@search.text_processor']
+    tags:
+      - { name: backend_overridable }
+  Drupal\search\ViewsSearchQueryFactory: '@select_extender_factory.views_search_query'
+  Drupal\search\ViewsSearchQuery: '@select_extender_factory.views_search_query'
diff --git a/core/modules/search/src/SearchQuery.php b/core/modules/search/src/SearchQuery.php
index 73817872e34..cbbb1829a90 100644
--- a/core/modules/search/src/SearchQuery.php
+++ b/core/modules/search/src/SearchQuery.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\search;
 
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Database\Connection;
 use Drupal\Core\Database\Query\SelectExtender;
 use Drupal\Core\Database\Query\SelectInterface;
 
@@ -73,6 +75,16 @@ class SearchQuery extends SelectExtender {
    */
   const NO_KEYWORD_MATCHES = 8;
 
+  /**
+   * The config factory.
+   */
+  protected ConfigFactoryInterface $configFactory;
+
+  /**
+   * The search text processor service.
+   */
+  protected SearchTextProcessorInterface $searchTextProcessor;
+
   /**
    * The keywords and advanced search options that are entered by the user.
    *
@@ -186,6 +198,32 @@ class SearchQuery extends SelectExtender {
    */
   protected $multiply = [];
 
+  /**
+   * Constructs a SearchQuery object.
+   *
+   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   *   Select query object.
+   * @param \Drupal\Core\Database\Connection $connection
+   *   Database connection object.
+   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
+   *   The config factory.
+   * @param \Drupal\search\SearchTextProcessorInterface $search_text_processor
+   *   The search text processor service.
+   */
+  public function __construct(SelectInterface $query, Connection $connection, ConfigFactoryInterface $config_factory = NULL, SearchTextProcessorInterface $search_text_processor = NULL) {
+    if (is_null($config_factory)) {
+      @trigger_error('Calling ' . __METHOD__ . ' without the $config_factory argument is deprecated in drupal:9.4.0 and will be required in drupal:10.0.0. Use the relevant service to instantiate extenders. See https://www.drupal.org/node/3218001', E_USER_DEPRECATED);
+      $config_factory = \Drupal::service('config.factory');
+    }
+    if (is_null($search_text_processor)) {
+      @trigger_error('Calling ' . __METHOD__ . ' without the $search_text_processor argument is deprecated in drupal:9.4.0 and will be required in drupal:10.0.0. Use the relevant service to instantiate extenders. See https://www.drupal.org/node/3218001', E_USER_DEPRECATED);
+      $search_text_processor = \Drupal::service('search.text_processor');
+    }
+    parent::__construct($query, $connection);
+    $this->configFactory = $config_factory;
+    $this->searchTextProcessor = $search_text_processor;
+  }
+
   /**
    * Sets the search query expression.
    *
@@ -231,9 +269,7 @@ protected function parseSearchExpression() {
 
     // Classify tokens.
     $in_or = FALSE;
-    $limit_combinations = \Drupal::config('search.settings')->get('and_or_limit');
-    /** @var \Drupal\search\SearchTextProcessorInterface $text_processor */
-    $text_processor = \Drupal::service('search.text_processor');
+    $limit_combinations = $this->configFactory->get('search.settings')->get('and_or_limit');
     // The first search expression does not count as AND.
     $and_count = -1;
     $or_count = 0;
@@ -256,7 +292,7 @@ protected function parseSearchExpression() {
       // Simplify keyword according to indexing rules and external
       // preprocessors. Use same process as during search indexing, so it
       // will match search index.
-      $words = $text_processor->analyze($match[2]);
+      $words = $this->searchTextProcessor->analyze($match[2]);
       // Re-explode in case simplification added more words, except when
       // matching a phrase.
       $words = $phrase ? [$words] : preg_split('/ /', $words, -1, PREG_SPLIT_NO_EMPTY);
@@ -364,7 +400,7 @@ protected function parseWord($word) {
     $split = explode(' ', $word);
     foreach ($split as $s) {
       $num = is_numeric($s);
-      if ($num || mb_strlen($s) >= \Drupal::config('search.settings')->get('index.minimum_word_size')) {
+      if ($num || mb_strlen($s) >= $this->configFactory->get('search.settings')->get('index.minimum_word_size')) {
         if (!isset($this->words[$s])) {
           $this->words[$s] = $s;
           $num_new_scores++;
diff --git a/core/modules/search/src/SearchQueryFactory.php b/core/modules/search/src/SearchQueryFactory.php
new file mode 100644
index 00000000000..f6cc07d3adf
--- /dev/null
+++ b/core/modules/search/src/SearchQueryFactory.php
@@ -0,0 +1,52 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\search;
+
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Database\Connection;
+use Drupal\Core\Database\Query\SelectInterface;
+
+/**
+ * Select extender factory for search queries.
+ */
+class SearchQueryFactory {
+
+  /**
+   * Constructs a SearchQueryFactory object.
+   *
+   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   *   The config factory.
+   * @param \Drupal\search\SearchTextProcessorInterface $searchTextProcessor
+   *   The search text processor service.
+   */
+  public function __construct(
+    protected readonly ConfigFactoryInterface $configFactory,
+    protected readonly SearchTextProcessorInterface $searchTextProcessor,
+  ) {
+  }
+
+  /**
+   * Returns a query extender for search queries.
+   *
+   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   *   Select query object.
+   * @param \Drupal\Core\Database\Connection $connection
+   *   Database connection object.
+   *
+   * @return Drupal\search\SearchQuery
+   *   A query extender for search queries.
+   */
+  public function get(SelectInterface $query, Connection $connection): SearchQuery {
+    // @todo remove this BC layer in drupal:11.0.0.
+    $class = $connection->getConnectionOptions()['namespace'] . '\\SearchQuery';
+    if (class_exists($class)) {
+      @trigger_error("Invoking {$class} outside of a backend overridable service is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Include the driver class in a backend overridable service instead. See https://www.drupal.org/node/3217534", E_USER_DEPRECATED);
+      return new $class($query, $connection);
+    }
+    // @todo end
+    return new SearchQuery($query, $connection, $this->configFactory, $this->searchTextProcessor);
+  }
+
+}
diff --git a/core/modules/search/src/ViewsSearchQueryFactory.php b/core/modules/search/src/ViewsSearchQueryFactory.php
new file mode 100644
index 00000000000..0f2ead08722
--- /dev/null
+++ b/core/modules/search/src/ViewsSearchQueryFactory.php
@@ -0,0 +1,52 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\search;
+
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Database\Connection;
+use Drupal\Core\Database\Query\SelectInterface;
+
+/**
+ * Select extender factory for views search queries.
+ */
+class ViewsSearchQueryFactory {
+
+  /**
+   * Constructs a ViewsSearchQueryFactory object.
+   *
+   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   *   The config factory.
+   * @param \Drupal\search\SearchTextProcessorInterface $searchTextProcessor
+   *   The search text processor service.
+   */
+  public function __construct(
+    protected readonly ConfigFactoryInterface $configFactory,
+    protected readonly SearchTextProcessorInterface $searchTextProcessor,
+  ) {
+  }
+
+  /**
+   * Returns a query extender for views search queries.
+   *
+   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   *   Select query object.
+   * @param \Drupal\Core\Database\Connection $connection
+   *   Database connection object.
+   *
+   * @return Drupal\search\ViewsSearchQuery
+   *   A query extender for views search queries.
+   */
+  public function get(SelectInterface $query, Connection $connection): ViewsSearchQuery {
+    // @todo remove this BC layer in drupal:11.0.0.
+    $class = $connection->getConnectionOptions()['namespace'] . '\\ViewsSearchQuery';
+    if (class_exists($class)) {
+      @trigger_error("Invoking {$class} outside of a backend overridable service is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Include the driver class in a backend overridable service instead. See https://www.drupal.org/node/3217534", E_USER_DEPRECATED);
+      return new $class($query, $connection);
+    }
+    // @todo end
+    return new ViewsSearchQuery($query, $connection, $this->configFactory, $this->searchTextProcessor);
+  }
+
+}
diff --git a/core/modules/system/tests/modules/database_test/database_test.services.yml b/core/modules/system/tests/modules/database_test/database_test.services.yml
index 0bac13c303a..9156fbc5376 100644
--- a/core/modules/system/tests/modules/database_test/database_test.services.yml
+++ b/core/modules/system/tests/modules/database_test/database_test.services.yml
@@ -3,3 +3,8 @@ services:
   Drupal\database_test\EventSubscriber\DatabaseEventSubscriber:
     tags:
       - { name: event_subscriber }
+  select_extender_factory.test_extender:
+    class: Drupal\database_test\TestExtenderFactory
+    tags:
+      - { name: backend_overridable }
+  Drupal\Core\Database\Query\SelectExtender: '@select_extender_factory.test_extender'
diff --git a/core/modules/system/tests/modules/database_test/src/TestExtenderFactory.php b/core/modules/system/tests/modules/database_test/src/TestExtenderFactory.php
new file mode 100644
index 00000000000..0f7ee9439bd
--- /dev/null
+++ b/core/modules/system/tests/modules/database_test/src/TestExtenderFactory.php
@@ -0,0 +1,31 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\database_test;
+
+use Drupal\Core\Database\Connection;
+use Drupal\Core\Database\Query\SelectExtender;
+use Drupal\Core\Database\Query\SelectInterface;
+
+/**
+ * Test select extender factory.
+ */
+class TestExtenderFactory {
+
+  /**
+   * Returns a test query extender.
+   *
+   * @param \Drupal\Core\Database\Query\SelectInterface $query
+   *   Select query object.
+   * @param \Drupal\Core\Database\Connection $connection
+   *   Database connection object.
+   *
+   * @return \Drupal\Core\Database\Query\SelectExtender
+   *   A test query extender.
+   */
+  public function get(SelectInterface $query, Connection $connection): SelectExtender {
+    return new SelectExtender($query, $connection);
+  }
+
+}
diff --git a/core/tests/Drupal/KernelTests/Core/Database/SelectExtenderTest.php b/core/tests/Drupal/KernelTests/Core/Database/SelectExtenderTest.php
index 5a23f9a2500..87b3873a965 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/SelectExtenderTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/SelectExtenderTest.php
@@ -3,8 +3,12 @@
 namespace Drupal\KernelTests\Core\Database;
 
 use Composer\Autoload\ClassLoader;
+use Drupal\Core\Database\Query\PagerSelectExtender;
 use Drupal\Core\Database\Query\SelectExtender;
+use Drupal\Core\Database\Query\TableSortExtender;
 use Drupal\KernelTests\KernelTestBase;
+use Drupal\search\SearchQuery;
+use Drupal\search\ViewsSearchQuery;
 use Drupal\Tests\Core\Database\Stub\StubConnection;
 use Drupal\Tests\Core\Database\Stub\StubPDO;
 
@@ -17,7 +21,12 @@
 class SelectExtenderTest extends KernelTestBase {
 
   /**
-   * Data provider for testExtend().
+   * {@inheritdoc}
+   */
+  protected static $modules = ['database_test', 'search'];
+
+  /**
+   * Data provider for ::testExtend().
    *
    * @return array
    *   Array of arrays with the following elements:
@@ -30,7 +39,7 @@ public function providerExtend(): array {
       [
         'Drupal\Core\Database\Query\PagerSelectExtender',
         'Drupal\corefake\Driver\Database\corefake',
-        'Drupal\Core\Database\Query\PagerSelectExtender',
+        PagerSelectExtender::class,
       ],
       [
         'Drupal\Core\Database\Query\PagerSelectExtender',
@@ -40,7 +49,7 @@ public function providerExtend(): array {
       [
         'Drupal\Core\Database\Query\TableSortExtender',
         'Drupal\corefake\Driver\Database\corefake',
-        'Drupal\Core\Database\Query\TableSortExtender',
+        TableSortExtender::class,
       ],
       [
         'Drupal\Core\Database\Query\TableSortExtender',
@@ -50,7 +59,7 @@ public function providerExtend(): array {
       [
         'Drupal\search\SearchQuery',
         'Drupal\corefake\Driver\Database\corefake',
-        'Drupal\search\SearchQuery',
+        SearchQuery::class,
       ],
       [
         'Drupal\search\SearchQuery',
@@ -60,17 +69,31 @@ public function providerExtend(): array {
       [
         'Drupal\search\ViewsSearchQuery',
         'Drupal\corefake\Driver\Database\corefake',
-        'Drupal\search\ViewsSearchQuery',
+        ViewsSearchQuery::class,
       ],
       [
         'Drupal\search\ViewsSearchQuery',
         'Drupal\corefake\Driver\Database\corefake',
         '\Drupal\search\ViewsSearchQuery',
       ],
+    ];
+  }
+
+  /**
+   * Data provider for ::testExtendWithLocalClasses().
+   *
+   * @return array
+   *   Array of arrays with the following elements:
+   *   - Expected namespaced class name.
+   *   - The database driver namespace.
+   *   - The namespaced class name for which to extend.
+   */
+  public function providerExtendWithLocalClasses(): array {
+    return [
       [
         'Drupal\corefake\Driver\Database\corefakeWithAllCustomClasses\PagerSelectExtender',
         'Drupal\corefake\Driver\Database\corefakeWithAllCustomClasses',
-        'Drupal\Core\Database\Query\PagerSelectExtender',
+        PagerSelectExtender::class,
       ],
       [
         'Drupal\corefake\Driver\Database\corefakeWithAllCustomClasses\PagerSelectExtender',
@@ -80,7 +103,7 @@ public function providerExtend(): array {
       [
         'Drupal\corefake\Driver\Database\corefakeWithAllCustomClasses\TableSortExtender',
         'Drupal\corefake\Driver\Database\corefakeWithAllCustomClasses',
-        'Drupal\Core\Database\Query\TableSortExtender',
+        TableSortExtender::class,
       ],
       [
         'Drupal\corefake\Driver\Database\corefakeWithAllCustomClasses\TableSortExtender',
@@ -90,7 +113,7 @@ public function providerExtend(): array {
       [
         'Drupal\corefake\Driver\Database\corefakeWithAllCustomClasses\SearchQuery',
         'Drupal\corefake\Driver\Database\corefakeWithAllCustomClasses',
-        'Drupal\search\SearchQuery',
+        SearchQuery::class,
       ],
       [
         'Drupal\corefake\Driver\Database\corefakeWithAllCustomClasses\SearchQuery',
@@ -100,7 +123,7 @@ public function providerExtend(): array {
       [
         'Drupal\corefake\Driver\Database\corefakeWithAllCustomClasses\ViewsSearchQuery',
         'Drupal\corefake\Driver\Database\corefakeWithAllCustomClasses',
-        'Drupal\search\ViewsSearchQuery',
+        ViewsSearchQuery::class,
       ],
       [
         'Drupal\corefake\Driver\Database\corefakeWithAllCustomClasses\ViewsSearchQuery',
@@ -118,6 +141,35 @@ public function providerExtend(): array {
   public function testExtend(string $expected, string $namespace, string $extend): void {
     $additional_class_loader = new ClassLoader();
     $additional_class_loader->addPsr4("Drupal\\corefake\\Driver\\Database\\corefake\\", __DIR__ . "/../../../../../tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefake");
+    $additional_class_loader->register(TRUE);
+
+    $mock_pdo = $this->createMock(StubPDO::class);
+    $connection = new StubConnection($mock_pdo, ['namespace' => $namespace]);
+
+    // Tests the method \Drupal\Core\Database\Query\Select::extend().
+    $select = $connection->select('test')->extend($extend);
+    $this->assertEquals($expected, get_class($select));
+
+    // Get an instance of the class \Drupal\Core\Database\Query\SelectExtender.
+    $select_extender = $connection->select('test')->extend(SelectExtender::class);
+    $this->assertEquals(SelectExtender::class, get_class($select_extender));
+
+    // Tests the method \Drupal\Core\Database\Query\SelectExtender::extend().
+    $select_extender_extended = $select_extender->extend($extend);
+    $this->assertEquals($expected, get_class($select_extender_extended));
+  }
+
+  /**
+   * @covers ::extend
+   * @covers \Drupal\Core\Database\Query\SelectExtender::extend
+   * @dataProvider providerExtendWithLocalClasses
+   * @group legacy
+   */
+  public function testExtendWithLocalClasses(string $expected, string $namespace, string $extend): void {
+    $this->expectDeprecation('Invoking Drupal\\corefake\\Driver\\Database\\corefakeWithAllCustomClasses\\%A outside of a backend overridable service is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Include the driver class in a backend overridable service instead. See https://www.drupal.org/node/3217534');
+    $this->expectDeprecation('Calling %A::__construct without the %A argument is deprecated in drupal:9.4.0 and will be required in drupal:10.0.0. Use the relevant service to instantiate extenders. See https://www.drupal.org/node/3218001');
+
+    $additional_class_loader = new ClassLoader();
     $additional_class_loader->addPsr4("Drupal\\corefake\\Driver\\Database\\corefakeWithAllCustomClasses\\", __DIR__ . "/../../../../../tests/fixtures/database_drivers/module/corefake/src/Driver/Database/corefakeWithAllCustomClasses");
     $additional_class_loader->register(TRUE);
 
@@ -137,4 +189,8 @@ public function testExtend(string $expected, string $namespace, string $extend):
     $this->assertEquals($expected, get_class($select_extender_extended));
   }
 
+  public function testXxx() {
+    dump($this->container);
+  }
+
 }
diff --git a/core/tests/Drupal/KernelTests/Core/Database/SelectTest.php b/core/tests/Drupal/KernelTests/Core/Database/SelectTest.php
index 777c8e9b822..770d0d8712a 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/SelectTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/SelectTest.php
@@ -14,6 +14,11 @@
  */
 class SelectTest extends DatabaseTestBase {
 
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = ['database_test'];
+
   /**
    * Tests rudimentary SELECT statements.
    */
diff --git a/core/tests/Drupal/KernelTests/Core/Database/TaggingTest.php b/core/tests/Drupal/KernelTests/Core/Database/TaggingTest.php
index 3a9ea2c7e6e..d127f7fe2d8 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/TaggingTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/TaggingTest.php
@@ -14,6 +14,11 @@
  */
 class TaggingTest extends DatabaseTestBase {
 
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = ['database_test'];
+
   /**
    * Confirms that a query has a tag added to it.
    */
diff --git a/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php b/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php
index 28670b71753..6d69655dfa6 100644
--- a/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/ConnectionTest.php
@@ -325,21 +325,7 @@ public function testGetDriverClass($expected, $namespace, $class) {
 
     $mock_pdo = $this->createMock('Drupal\Tests\Core\Database\Stub\StubPDO');
     $connection = new StubConnection($mock_pdo, ['namespace' => $namespace]);
-    match($class) {
-      'Install\\Tasks',
-      'ExceptionHandler',
-      'Select',
-      'Insert',
-      'Merge',
-      'Upsert',
-      'Update',
-      'Delete',
-      'Truncate',
-      'Schema',
-      'Condition',
-      'Transaction' => $this->expectDeprecation('Calling Drupal\\Core\\Database\\Connection::getDriverClass() for \'' . $class . '\' is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Use standard autoloading in the methods that return database operations. See https://www.drupal.org/node/3217534'),
-      default => NULL,
-    };
+    $this->expectDeprecation('Calling Drupal\\Core\\Database\\Connection::getDriverClass() for \'' . $class . '\' is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Use standard autoloading in the methods that return database operations. See https://www.drupal.org/node/3217534');
     $this->assertEquals($expected, $connection->getDriverClass($class));
   }
 
