diff --git a/core/modules/sqlite/src/Driver/Database/sqlite/Statement.php b/core/modules/sqlite/src/Driver/Database/sqlite/Statement.php
index 5de75a5dec..4ff7ab2e29 100644
--- a/core/modules/sqlite/src/Driver/Database/sqlite/Statement.php
+++ b/core/modules/sqlite/src/Driver/Database/sqlite/Statement.php
@@ -86,10 +86,13 @@ protected function getStatement($query, &$args = []) {
    * {@inheritdoc}
    */
   public function execute($args = [], $options = []) {
+global $xxx; 
     try {
+if ($xxx) dump([$this->queryString, $args, $options]);
       $return = parent::execute($args, $options);
     }
     catch (\PDOException $e) {
+if ($xxx) dump(['exc', $e]);
       // The database schema might be changed by another process in between the
       // time that the statement was prepared and the time the statement was run
       // (e.g. usually happens when running tests). In this case, we need to
diff --git a/core/tests/Drupal/KernelTests/Core/Database/InsertTest.php b/core/tests/Drupal/KernelTests/Core/Database/InsertTest.php
index 1ba5d1a74b..84130a41fd 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/InsertTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/InsertTest.php
@@ -232,4 +232,65 @@ public function testInsertIntegrityViolation() {
       ->execute();
   }
 
+  /**
+   * Tests insertion integrity violation with no default value for a column.
+   */
+  public function testInsertIntegrityViolationMk2() {
+global $xxx; $xxx=TRUE;
+    $this->connection->schema()->createTable('testmk2', [
+      'fields' => [
+        'bid' => [
+          'description' => 'Primary Key: Unique batch ID.',
+          // This is not a serial column, to allow both progressive and
+          // non-progressive batches. See batch_process().
+          'type' => 'int',
+          'unsigned' => TRUE,
+          'not null' => TRUE,
+        ],
+        'token' => [
+          'description' => "A string token generated against the current user's session id and the batch id, used to ensure that only the user who submitted the batch can effectively access it.",
+          'type' => 'varchar_ascii',
+          'length' => 64,
+          'not null' => TRUE,
+        ],
+        'timestamp' => [
+          'description' => 'A Unix timestamp indicating when this batch was submitted for processing. Stale batches are purged at cron time.',
+          'type' => 'int',
+          'not null' => TRUE,
+        ],
+        'batch' => [
+          'description' => 'A serialized array containing the processing data for the batch.',
+          'type' => 'blob',
+          'not null' => FALSE,
+          'size' => 'big',
+        ],
+      ],
+      'primary key' => ['bid'],
+      'indexes' => [
+        'token' => ['token'],
+      ],
+    ]);
+
+    // Try inserting a record that misses the value for the 'age' column,
+    // should raise an IntegrityConstraintViolationException.
+    // $this->expectException(IntegrityConstraintViolationException::class);
+    $this->connection->insert('testmk2')
+      ->fields(['timestamp', 'token', 'batch'])
+      ->values([
+        'timestamp' => REQUEST_TIME,
+        'token' => '',
+        'batch' => NULL,
+      ])
+      ->execute();
+    $this->connection->insert('testmk2')
+      ->fields([
+        'timestamp' => REQUEST_TIME,
+        'token' => '',
+        'batch' => NULL,
+      ])
+      ->execute();
+dump($this->connection->query('SELECT * FROM {testmk2}')->fetchAll());
+$xxx=FALSE;
+  }
+
 }
