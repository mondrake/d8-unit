diff --git a/core/drupalci.yml b/core/drupalci.yml
index 8d6ce5a376..629c09e523 100644
--- a/core/drupalci.yml
+++ b/core/drupalci.yml
@@ -34,17 +34,17 @@ build:
         testgroups: '--all'
         suppress-deprecations: false
         halt-on-fail: false
-      run_tests.functional:
-        types: 'PHPUnit-Functional'
-        testgroups: '--all'
-        suppress-deprecations: false
-        halt-on-fail: false
-      run_tests.javascript:
-        concurrency: 15
-        types: 'PHPUnit-FunctionalJavascript'
-        testgroups: '--all'
-        suppress-deprecations: false
-        halt-on-fail: false
-      # Run nightwatch testing.
-      # @see https://www.drupal.org/project/drupal/issues/2869825
-      nightwatchjs:
+#      run_tests.functional:
+#        types: 'PHPUnit-Functional'
+#        testgroups: '--all'
+#        suppress-deprecations: false
+#        halt-on-fail: false
+#      run_tests.javascript:
+#        concurrency: 15
+#        types: 'PHPUnit-FunctionalJavascript'
+#        testgroups: '--all'
+#        suppress-deprecations: false
+#        halt-on-fail: false
+#      # Run nightwatch testing.
+#      # @see https://www.drupal.org/project/drupal/issues/2869825
+#      nightwatchjs:
diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index 486d788b2c..97a3c39a63 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -542,11 +542,14 @@ public function getFullQualifiedTableName($table) {
    *   An associative array of options to control how the query is run. See
    *   the documentation for self::defaultOptions() for details. The content of
    *   the 'pdo' key will be passed to the prepared statement.
+   * @param bool $allow_row_count
+   *   (optional) A flag indicating if row count is allowed on the statement
+   *   object. Defaults to FALSE.
    *
    * @return \Drupal\Core\Database\StatementInterface
    *   A PDO prepared statement ready for its execute() method.
    */
-  public function prepareStatement(string $query, array $options): StatementInterface {
+  public function prepareStatement(string $query, array $options, bool $allow_row_count = FALSE): StatementInterface {
     $query = $this->prefixTables($query);
     if (!($options['allow_square_brackets'] ?? FALSE)) {
       $query = $this->quoteIdentifiers($query);
@@ -554,7 +557,7 @@ public function prepareStatement(string $query, array $options): StatementInterf
     // @todo in Drupal 10, only return the StatementWrapper.
     // @see https://www.drupal.org/node/3177490
     return $this->statementWrapperClass ?
-      new $this->statementWrapperClass($this, $this->connection, $query, $options['pdo'] ?? []) :
+      new $this->statementWrapperClass($this, $this->connection, $query, $options['pdo'] ?? [], $allow_row_count) :
       $this->connection->prepare($query, $options['pdo'] ?? []);
   }
 
diff --git a/core/lib/Drupal/Core/Database/Driver/pgsql/Connection.php b/core/lib/Drupal/Core/Database/Driver/pgsql/Connection.php
index b996735aab..6703bcf4b2 100644
--- a/core/lib/Drupal/Core/Database/Driver/pgsql/Connection.php
+++ b/core/lib/Drupal/Core/Database/Driver/pgsql/Connection.php
@@ -201,13 +201,13 @@ public function query($query, array $args = [], $options = []) {
   /**
    * {@inheritdoc}
    */
-  public function prepareStatement(string $query, array $options): StatementInterface {
+  public function prepareStatement(string $query, array $options, bool $allow_row_count = FALSE): StatementInterface {
     // mapConditionOperator converts some operations (LIKE, REGEXP, etc.) to
     // PostgreSQL equivalents (ILIKE, ~*, etc.). However PostgreSQL doesn't
     // automatically cast the fields to the right type for these operators,
     // so we need to alter the query and add the type-cast.
     $query = preg_replace('/ ([^ ]+) +(I*LIKE|NOT +I*LIKE|~\*|!~\*) /i', ' ${1}::text ${2} ', $query);
-    return parent::prepareStatement($query, $options);
+    return parent::prepareStatement($query, $options, $allow_row_count);
   }
 
   public function queryRange($query, $from, $count, array $args = [], array $options = []) {
diff --git a/core/lib/Drupal/Core/Database/Driver/pgsql/Update.php b/core/lib/Drupal/Core/Database/Driver/pgsql/Update.php
index 8a3d918c90..55bf0f2b45 100644
--- a/core/lib/Drupal/Core/Database/Driver/pgsql/Update.php
+++ b/core/lib/Drupal/Core/Database/Driver/pgsql/Update.php
@@ -18,7 +18,7 @@ public function execute() {
 
     // Because we filter $fields the same way here and in __toString(), the
     // placeholders will all match up properly.
-    $stmt = $this->connection->prepareStatement((string) $this, $this->queryOptions);
+    $stmt = $this->connection->prepareStatement((string) $this, $this->queryOptions, TRUE);
 
     // Fetch the list of blobs and sequences used on that table.
     $table_information = $this->connection->schema()->queryTableInformation($this->table);
@@ -71,13 +71,11 @@ public function execute() {
 
     $options = $this->queryOptions;
     $options['already_prepared'] = TRUE;
-    $options['return'] = Database::RETURN_AFFECTED;
 
     $this->connection->addSavepoint();
     try {
       $stmt->execute(NULL, $options);
       $this->connection->releaseSavepoint();
-      $stmt->allowRowCount = TRUE;
       return $stmt->rowCount();
     }
     catch (\Exception $e) {
diff --git a/core/lib/Drupal/Core/Database/Driver/sqlite/Connection.php b/core/lib/Drupal/Core/Database/Driver/sqlite/Connection.php
index 0905ca9e2a..ee169e1ae0 100644
--- a/core/lib/Drupal/Core/Database/Driver/sqlite/Connection.php
+++ b/core/lib/Drupal/Core/Database/Driver/sqlite/Connection.php
@@ -423,12 +423,12 @@ public function mapConditionOperator($operator) {
   /**
    * {@inheritdoc}
    */
-  public function prepareStatement(string $query, array $options): StatementInterface {
+  public function prepareStatement(string $query, array $options, bool $allow_row_count = FALSE): StatementInterface {
     $query = $this->prefixTables($query);
     if (!($options['allow_square_brackets'] ?? FALSE)) {
       $query = $this->quoteIdentifiers($query);
     }
-    return new Statement($this->connection, $this, $query, $options['pdo'] ?? []);
+    return new Statement($this->connection, $this, $query, $options['pdo'] ?? [], $allow_row_count);
   }
 
   public function nextId($existing_id = 0) {
@@ -441,9 +441,9 @@ public function nextId($existing_id = 0) {
     // wait until this transaction commits. Also, the return value needs to be
     // set to RETURN_AFFECTED as if it were a real update() query otherwise it
     // is not possible to get the row count properly.
-    $affected = $this->query('UPDATE {sequences} SET value = GREATEST(value, :existing_id) + 1', [
-      ':existing_id' => $existing_id,
-    ], ['return' => Database::RETURN_AFFECTED]);
+    $stmt = $this->prepareStatement('UPDATE {sequences} SET value = GREATEST(value, :existing_id) + 1', [], TRUE);
+    $stmt->execute([':existing_id' => $existing_id]);
+    $affected = $stmt->rowCount();
     if (!$affected) {
       $this->query('INSERT INTO {sequences} (value) VALUES (:existing_id + 1)', [
         ':existing_id' => $existing_id,
diff --git a/core/lib/Drupal/Core/Database/Log.php b/core/lib/Drupal/Core/Database/Log.php
index 08a0506e24..3d50320838 100644
--- a/core/lib/Drupal/Core/Database/Log.php
+++ b/core/lib/Drupal/Core/Database/Log.php
@@ -115,7 +115,7 @@ public function log(StatementInterface $statement, $args, $time) {
       $this->queryLog[$key][] = [
         'query' => $statement->getQueryString(),
         'args' => $args,
-        'target' => $statement->dbh->getTarget(),
+        'target' => $statement->getConnectionTarget(),
         'caller' => $this->findCaller(),
         'time' => $time,
       ];
diff --git a/core/lib/Drupal/Core/Database/Query/Delete.php b/core/lib/Drupal/Core/Database/Query/Delete.php
index 658b8342cc..c27e4dfdfd 100644
--- a/core/lib/Drupal/Core/Database/Query/Delete.php
+++ b/core/lib/Drupal/Core/Database/Query/Delete.php
@@ -32,7 +32,6 @@ class Delete extends Query implements ConditionInterface {
    *   Array of database options.
    */
   public function __construct(Connection $connection, $table, array $options = []) {
-    $options['return'] = Database::RETURN_AFFECTED;
     parent::__construct($connection, $options);
     $this->table = $table;
 
@@ -52,7 +51,23 @@ public function execute() {
       $values = $this->condition->arguments();
     }
 
-    return $this->connection->query((string) $this, $values, $this->queryOptions);
+    try {
+      $stmt = $this->connection->prepareStatement((string) $this, $this->queryOptions, TRUE);
+      $stmt->execute($values, $this->queryOptions);
+    }
+    catch (\PDOException $e) {
+      if ($this->queryOptions['throw_exception'] ?? TRUE) {
+        $message = $e->getMessage() . ": " . (string) $this . "; ";
+        // Match all SQLSTATE 23xxx errors.
+        if (substr($e->getCode(), -6, -3) == '23') {
+          throw new IntegrityConstraintViolationException($message, $e->getCode(), $e);
+        }
+        throw new DatabaseExceptionWrapper($message, 0, $e);
+      }
+      return NULL;
+    }
+
+    return $stmt->rowCount();
   }
 
   /**
diff --git a/core/lib/Drupal/Core/Database/Query/Merge.php b/core/lib/Drupal/Core/Database/Query/Merge.php
index 92d9c572ca..f9509bcad0 100644
--- a/core/lib/Drupal/Core/Database/Query/Merge.php
+++ b/core/lib/Drupal/Core/Database/Query/Merge.php
@@ -134,7 +134,6 @@ class Merge extends Query implements ConditionInterface {
    *   Array of database options.
    */
   public function __construct(Connection $connection, $table, array $options = []) {
-    $options['return'] = Database::RETURN_AFFECTED;
     parent::__construct($connection, $options);
     $this->table = $table;
     $this->conditionTable = $table;
diff --git a/core/lib/Drupal/Core/Database/Query/Truncate.php b/core/lib/Drupal/Core/Database/Query/Truncate.php
index 1d8fd36e0f..120ed8cc18 100644
--- a/core/lib/Drupal/Core/Database/Query/Truncate.php
+++ b/core/lib/Drupal/Core/Database/Query/Truncate.php
@@ -28,7 +28,6 @@ class Truncate extends Query {
    *   Array of database options.
    */
   public function __construct(Connection $connection, $table, array $options = []) {
-    $options['return'] = Database::RETURN_AFFECTED;
     parent::__construct($connection, $options);
     $this->table = $table;
   }
@@ -54,7 +53,18 @@ public function compiled() {
    *   Return value is dependent on the database type.
    */
   public function execute() {
-    return $this->connection->query((string) $this, [], $this->queryOptions);
+    try {
+      $stmt = $this->connection->prepareStatement((string) $this, $this->queryOptions, TRUE);
+      $stmt->execute([], $this->queryOptions);
+    }
+    catch (\PDOException $e) {
+      if ($this->queryOptions['throw_exception'] ?? TRUE) {
+        $message = $e->getMessage() . ": " . (string) $this . "; ";
+        throw new DatabaseExceptionWrapper($message, 0, $e);
+      }
+      return NULL;
+    }
+    return $stmt->rowCount();
   }
 
   /**
diff --git a/core/lib/Drupal/Core/Database/Query/Update.php b/core/lib/Drupal/Core/Database/Query/Update.php
index 2b08e20d00..8b21a09b12 100644
--- a/core/lib/Drupal/Core/Database/Query/Update.php
+++ b/core/lib/Drupal/Core/Database/Query/Update.php
@@ -61,7 +61,6 @@ class Update extends Query implements ConditionInterface {
    *   Array of database options.
    */
   public function __construct(Connection $connection, $table, array $options = []) {
-    $options['return'] = Database::RETURN_AFFECTED;
     parent::__construct($connection, $options);
     $this->table = $table;
 
@@ -145,7 +144,23 @@ public function execute() {
       $update_values = array_merge($update_values, $this->condition->arguments());
     }
 
-    return $this->connection->query((string) $this, $update_values, $this->queryOptions);
+    try {
+      $stmt = $this->connection->prepareStatement((string) $this, $this->queryOptions, TRUE);
+      $stmt->execute($update_values, $this->queryOptions);
+    }
+    catch (\PDOException $e) {
+      if ($this->queryOptions['throw_exception'] ?? TRUE) {
+        $message = $e->getMessage() . ": " . (string) $this . "; ";
+        // Match all SQLSTATE 23xxx errors.
+        if (substr($e->getCode(), -6, -3) == '23') {
+          throw new IntegrityConstraintViolationException($message, $e->getCode(), $e);
+        }
+        throw new DatabaseExceptionWrapper($message, 0, $e);
+      }
+      return NULL;
+    }
+
+    return $stmt->rowCount();
   }
 
   /**
diff --git a/core/lib/Drupal/Core/Database/Query/Upsert.php b/core/lib/Drupal/Core/Database/Query/Upsert.php
index a406d7ab97..5d43545b74 100644
--- a/core/lib/Drupal/Core/Database/Query/Upsert.php
+++ b/core/lib/Drupal/Core/Database/Query/Upsert.php
@@ -35,7 +35,6 @@
    *   (optional) An array of database options.
    */
   public function __construct(Connection $connection, $table, array $options = []) {
-    $options['return'] = Database::RETURN_AFFECTED;
     parent::__construct($connection, $options);
     $this->table = $table;
   }
@@ -103,12 +102,26 @@ public function execute() {
       }
     }
 
-    $last_insert_id = $this->connection->query((string) $this, $values, $this->queryOptions);
+    try {
+      $stmt = $this->connection->prepareStatement((string) $this, $this->queryOptions, TRUE);
+      $stmt->execute($values, $this->queryOptions);
+    }
+    catch (\PDOException $e) {
+      if ($this->queryOptions['throw_exception'] ?? TRUE) {
+        $message = $e->getMessage() . ": " . (string) $this . "; ";
+        // Match all SQLSTATE 23xxx errors.
+        if (substr($e->getCode(), -6, -3) == '23') {
+          throw new IntegrityConstraintViolationException($message, $e->getCode(), $e);
+        }
+        throw new DatabaseExceptionWrapper($message, 0, $e);
+      }
+      return NULL;
+    }
 
     // Re-initialize the values array so that we can re-use this query.
     $this->insertValues = [];
 
-    return $last_insert_id;
+    return $stmt->rowCount();
   }
 
 }
diff --git a/core/lib/Drupal/Core/Database/Statement.php b/core/lib/Drupal/Core/Database/Statement.php
index 3de4537fb2..745047b01c 100644
--- a/core/lib/Drupal/Core/Database/Statement.php
+++ b/core/lib/Drupal/Core/Database/Statement.php
@@ -44,6 +44,13 @@ protected function __construct(Connection $dbh) {
     $this->setFetchMode(\PDO::FETCH_OBJ);
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function getConnectionTarget(): string {
+    return $this->connection->getTarget();
+  }
+
   /**
    * {@inheritdoc}
    */
diff --git a/core/lib/Drupal/Core/Database/StatementEmpty.php b/core/lib/Drupal/Core/Database/StatementEmpty.php
index a87bca920a..801f28ef9a 100644
--- a/core/lib/Drupal/Core/Database/StatementEmpty.php
+++ b/core/lib/Drupal/Core/Database/StatementEmpty.php
@@ -20,7 +20,38 @@ class StatementEmpty implements \Iterator, StatementInterface {
    *
    * @var bool
    */
-  public $allowRowCount = FALSE;
+  protected $rowCountEnabled = FALSE;
+
+  /**
+   * Implements the magic __get() method.
+   *
+   * @todo Remove the method in Drupal 10.
+   */
+  public function __get($name) {
+    if ($name === 'allowRowCount') {
+      @trigger_error("StatementEmpty::\$allowRowCount should not be accessed in drupal:9.2.0 and will error in drupal:10.0.0. Use \$this->rowCountEnabled instead. See https://www.drupal.org/node/TODO", E_USER_DEPRECATED);
+      return $this->rowCountEnabled;
+    }
+  }
+
+  /**
+   * Implements the magic __set() method.
+   *
+   * @todo Remove the method in Drupal 10.
+   */
+  public function __set($name, $value) {
+    if ($name === 'allowRowCount') {
+      @trigger_error("StatementEmpty::\$allowRowCount should not be written in drupal:9.2.0 and will error in drupal:10.0.0. Enable row counting by passing the appropriate argument to the constructor instead. See https://www.drupal.org/node/TODO", E_USER_DEPRECATED);
+      $this->rowCountEnabled = $value;
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getConnectionTarget(): string {
+    return 'default';
+  }
 
   /**
    * {@inheritdoc}
@@ -40,7 +71,7 @@ public function getQueryString() {
    * {@inheritdoc}
    */
   public function rowCount() {
-    if ($this->allowRowCount) {
+    if ($this->rowCountEnabled) {
       return 0;
     }
     throw new RowCountException();
diff --git a/core/lib/Drupal/Core/Database/StatementInterface.php b/core/lib/Drupal/Core/Database/StatementInterface.php
index 917eb8b9bf..729bd94787 100644
--- a/core/lib/Drupal/Core/Database/StatementInterface.php
+++ b/core/lib/Drupal/Core/Database/StatementInterface.php
@@ -20,25 +20,6 @@
  */
 interface StatementInterface extends \Traversable {
 
-  /**
-   * Constructs a new PDOStatement object.
-   *
-   * The PDO manual does not document this constructor, but when overriding the
-   * PDOStatement class with a custom without this constructor, PDO will throw
-   * the internal exception/warning:
-   *
-   * "PDO::query(): SQLSTATE[HY000]: General error: user-supplied statement does
-   *  not accept constructor arguments"
-   *
-   * PDO enforces that the access type of this constructor must be protected,
-   * and lastly, it also enforces that a custom PDOStatement interface (like
-   * this) omits the constructor (declaring it results in fatal errors
-   * complaining about "the access type must not be public" if it is public, and
-   * "the access type must be omitted" if it is protected; i.e., conflicting
-   * statements). The access type has to be protected.
-   */
-  // protected function __construct(Connection $dbh);
-
   /**
    * Executes a prepared statement.
    *
@@ -61,6 +42,14 @@ public function execute($args = [], $options = []);
    */
   public function getQueryString();
 
+  /**
+   * Returns the target connection this statement is associated with.
+   *
+   * @return string
+   *   The target connection string of this statement.
+   */
+  public function getConnectionTarget(): string;
+
   /**
    * Returns the number of rows affected by the last SQL statement.
    *
diff --git a/core/lib/Drupal/Core/Database/StatementPrefetch.php b/core/lib/Drupal/Core/Database/StatementPrefetch.php
index 3f6efdf364..fdc0d7f4ac 100644
--- a/core/lib/Drupal/Core/Database/StatementPrefetch.php
+++ b/core/lib/Drupal/Core/Database/StatementPrefetch.php
@@ -25,11 +25,11 @@ class StatementPrefetch implements \Iterator, StatementInterface {
   protected $driverOptions;
 
   /**
-   * Reference to the Drupal database connection object for this statement.
+   * The Drupal database connection object.
    *
    * @var \Drupal\Core\Database\Connection
    */
-  public $dbh;
+  protected $connection;
 
   /**
    * Reference to the PDO connection object for this statement.
@@ -124,13 +124,63 @@ class StatementPrefetch implements \Iterator, StatementInterface {
    *
    * @var bool
    */
-  public $allowRowCount = FALSE;
+  protected $rowCountEnabled = FALSE;
 
-  public function __construct(\PDO $pdo_connection, Connection $connection, $query, array $driver_options = []) {
+  /**
+   * Constructs a StatementPrefetch object.
+   *
+   * @param \PDO $pdo_connection
+   *   An object of the PDO class representing a database connection.
+   * @param \Drupal\Core\Database\Connection $connection
+   *   The database connection.
+   * @param string $query
+   *   The query string.
+   * @param array $driver_options
+   *   Driver-specific options.
+   * @param bool $row_count_enabled
+   *   (optional) Enables counting the rows affected. Defaults to TRUE.
+   */
+  public function __construct(\PDO $pdo_connection, Connection $connection, $query, array $driver_options = [], bool $row_count_enabled = TRUE) {
     $this->pdoConnection = $pdo_connection;
-    $this->dbh = $connection;
+    $this->connection = $connection;
     $this->queryString = $query;
     $this->driverOptions = $driver_options;
+    $this->rowCountEnabled = $row_count_enabled;
+  }
+
+  /**
+   * Implements the magic __get() method.
+   *
+   * @todo Remove the method in Drupal 10.
+   */
+  public function __get($name) {
+    if ($name === 'dbh') {
+      @trigger_error("StatementPrefetch::\$dbh should not be accessed in drupal:9.2.0 and will error in drupal:10.0.0. Use \$this->connection instead. See https://www.drupal.org/node/TODO", E_USER_DEPRECATED);
+      return $this->connection;
+    }
+    if ($name === 'allowRowCount') {
+      @trigger_error("StatementPrefetch::\$allowRowCount should not be accessed in drupal:9.2.0 and will error in drupal:10.0.0. Use \$this->rowCountEnabled instead. See https://www.drupal.org/node/TODO", E_USER_DEPRECATED);
+      return $this->rowCountEnabled;
+    }
+  }
+
+  /**
+   * Implements the magic __set() method.
+   *
+   * @todo Remove the method in Drupal 10.
+   */
+  public function __set($name, $value) {
+    if ($name === 'allowRowCount') {
+      @trigger_error("StatementPrefetch::\$allowRowCount should not be written in drupal:9.2.0 and will error in drupal:10.0.0. Enable row counting by passing the appropriate argument to the constructor instead. See https://www.drupal.org/node/TODO", E_USER_DEPRECATED);
+      $this->rowCountEnabled = $value;
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getConnectionTarget(): string {
+    return $this->connection->getTarget();
   }
 
   /**
@@ -149,7 +199,7 @@ public function execute($args = [], $options = []) {
       }
     }
 
-    $logger = $this->dbh->getLogger();
+    $logger = $this->connection->getLogger();
     if (!empty($logger)) {
       $query_start = microtime(TRUE);
     }
@@ -165,7 +215,7 @@ public function execute($args = [], $options = []) {
       $this->throwPDOException();
     }
 
-    if ($options['return'] == Database::RETURN_AFFECTED) {
+    if ($this->rowCountEnabled) {
       $this->rowCount = $statement->rowCount();
     }
     // Fetch all the data from the reply, in order to release any lock
@@ -199,7 +249,7 @@ public function execute($args = [], $options = []) {
    * Throw a PDO Exception based on the last PDO error.
    */
   protected function throwPDOException() {
-    $error_info = $this->dbh->errorInfo();
+    $error_info = $this->connection->errorInfo();
     // We rebuild a message formatted in the same way as PDO.
     $exception = new \PDOException("SQLSTATE[" . $error_info[0] . "]: General error " . $error_info[1] . ": " . $error_info[2]);
     $exception->errorInfo = $error_info;
@@ -221,7 +271,7 @@ protected function throwPDOException() {
    *   A PDOStatement object.
    */
   protected function getStatement($query, &$args = []) {
-    return $this->dbh->prepare($query, $this->driverOptions);
+    return $this->connection->prepare($query, $this->driverOptions);
   }
 
   /**
@@ -364,7 +414,7 @@ public function valid() {
    */
   public function rowCount() {
     // SELECT query should not use the method.
-    if ($this->allowRowCount) {
+    if ($this->rowCountEnabled) {
       return $this->rowCount;
     }
     else {
diff --git a/core/lib/Drupal/Core/Database/StatementWrapper.php b/core/lib/Drupal/Core/Database/StatementWrapper.php
index eff40102f4..ce79337ce3 100644
--- a/core/lib/Drupal/Core/Database/StatementWrapper.php
+++ b/core/lib/Drupal/Core/Database/StatementWrapper.php
@@ -14,7 +14,7 @@ class StatementWrapper implements \IteratorAggregate, StatementInterface {
    *
    * @var \Drupal\Core\Database\Connection
    */
-  public $dbh;
+  protected $connection;
 
   /**
    * The client database Statement object.
@@ -30,7 +30,7 @@ class StatementWrapper implements \IteratorAggregate, StatementInterface {
    *
    * @var bool
    */
-  public $allowRowCount = FALSE;
+  protected $rowCountEnabled = FALSE;
 
   /**
    * Constructs a StatementWrapper object.
@@ -43,26 +43,46 @@ class StatementWrapper implements \IteratorAggregate, StatementInterface {
    *   The SQL query string.
    * @param array $options
    *   Array of query options.
+   * @param bool $row_count_enabled
+   *   (optional) Enables counting the rows affected. Defaults to TRUE.
    */
-  public function __construct(Connection $connection, $client_connection, string $query, array $options) {
-    $this->dbh = $connection;
+  public function __construct(Connection $connection, $client_connection, string $query, array $options, bool $row_count_enabled = TRUE) {
+    $this->connection = $connection;
     $this->clientStatement = $client_connection->prepare($query, $options);
+    $this->rowCountEnabled = $row_count_enabled;
     $this->setFetchMode(\PDO::FETCH_OBJ);
   }
 
   /**
    * Implements the magic __get() method.
    *
-   * @deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Access the
-   *   client-level statement object via ::getClientStatement().
-   *
-   * @see https://www.drupal.org/node/3177488
+   * @todo Remove the method in Drupal 10.
    */
   public function __get($name) {
     if ($name === 'queryString') {
-      @trigger_error("StatementWrapper::\${$name} should not be accessed in drupal:9.1.0 and will error in drupal:10.0.0. Access the client-level statement object via ::getClientStatement(). See https://www.drupal.org/node/3177488", E_USER_DEPRECATED);
+      @trigger_error("StatementWrapper::\$queryString should not be accessed in drupal:9.1.0 and will error in drupal:10.0.0. Access the client-level statement object via ::getClientStatement(). See https://www.drupal.org/node/3177488", E_USER_DEPRECATED);
       return $this->getClientStatement()->queryString;
     }
+    if ($name === 'dbh') {
+      @trigger_error("StatementWrapper::\$dbh should not be accessed in drupal:9.2.0 and will error in drupal:10.0.0. Use \$this->connection instead. See https://www.drupal.org/node/TODO", E_USER_DEPRECATED);
+      return $this->connection;
+    }
+    if ($name === 'allowRowCount') {
+      @trigger_error("StatementWrapper::\$allowRowCount should not be accessed in drupal:9.2.0 and will error in drupal:10.0.0. Use \$this->rowCountEnabled instead. See https://www.drupal.org/node/TODO", E_USER_DEPRECATED);
+      return $this->rowCountEnabled;
+    }
+  }
+
+  /**
+   * Implements the magic __set() method.
+   *
+   * @todo Remove the method in Drupal 10.
+   */
+  public function __set($name, $value) {
+    if ($name === 'allowRowCount') {
+      @trigger_error("StatementWrapper::\$allowRowCount should not be written in drupal:9.2.0 and will error in drupal:10.0.0. Enable row counting by passing the appropriate argument to the constructor instead. See https://www.drupal.org/node/TODO", E_USER_DEPRECATED);
+      $this->rowCountEnabled = $value;
+    }
   }
 
   /**
@@ -93,6 +113,13 @@ public function getClientStatement() {
     return $this->clientStatement;
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function getConnectionTarget(): string {
+    return $this->connection->getTarget();
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -108,7 +135,7 @@ public function execute($args = [], $options = []) {
       }
     }
 
-    $logger = $this->dbh->getLogger();
+    $logger = $this->connection->getLogger();
     if (!empty($logger)) {
       $query_start = microtime(TRUE);
     }
@@ -202,7 +229,7 @@ public function fetchObject(string $class_name = NULL) {
    */
   public function rowCount() {
     // SELECT query should not use the method.
-    if ($this->allowRowCount) {
+    if ($this->rowCountEnabled) {
       return $this->clientStatement->rowCount();
     }
     else {
diff --git a/core/tests/Drupal/KernelTests/Core/Database/StatementWrapperLegacyTest.php b/core/tests/Drupal/KernelTests/Core/Database/StatementWrapperLegacyTest.php
index 56609ee8a6..156ad2de1b 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/StatementWrapperLegacyTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/StatementWrapperLegacyTest.php
@@ -35,6 +35,24 @@ public function testQueryString() {
     $this->assertStringContainsString('SELECT * FROM ', $this->statement->getQueryString());
   }
 
+  /**
+   * Tests accessing deprecated properties.
+   */
+  public function testGetDeprecatedProperties() {
+    $this->expectDeprecation('%s$dbh should not be accessed in drupal:9.2.0 and will error in drupal:10.0.0.%s');
+    $this->assertNotNull($this->statement->dbh);
+    $this->expectDeprecation('%s$allowRowCount should not be accessed in drupal:9.2.0 and will error in drupal:10.0.0.%s');
+    $this->assertFalse($this->statement->allowRowCount);
+  }
+
+  /**
+   * Tests writing deprecated properties.
+   */
+  public function testSetDeprecatedProperties() {
+    $this->expectDeprecation('%s$allowRowCount should not be written in drupal:9.2.0 and will error in drupal:10.0.0.%s');
+    $this->statement->allowRowCount = TRUE;
+  }
+
   /**
    * Tests calling a non existing \PDOStatement method.
    */
