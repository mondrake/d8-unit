diff --git a/core/lib/Drupal/Core/Test/Comparator/MarkupInterfaceComparator.php b/core/lib/Drupal/Core/Test/Comparator/MarkupInterfaceComparator.php
new file mode 100644
index 0000000000..46313e7381
--- /dev/null
+++ b/core/lib/Drupal/Core/Test/Comparator/MarkupInterfaceComparator.php
@@ -0,0 +1,65 @@
+<?php
+
+namespace Drupal\Core\Test\Comparator;
+
+use Drupal\Component\Render\MarkupInterface;
+use SebastianBergmann\Comparator\Comparator;
+
+/**
+ * Compares MarkupInterface objects for equality.
+ */
+class MarkupInterfaceComparator extends Comparator {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function accepts($expected, $actual) {
+    // If we do not have an initialised container, we are likely in a unit test
+    // context. In this case we cannot cast the objects to strings, so we let
+    // PHPUnit fall back to the standard ObjectComparator.
+    if (!$this->containerExists()) {
+      return FALSE;
+    }
+    // When either expected or actual are MarkupInterface objects, we take over
+    // and convert to strings before comparing.
+    if (($expected instanceof MarkupInterface && $actual instanceof MarkupInterface) ||
+      ($expected instanceof MarkupInterface && is_scalar($actual)) ||
+      (is_scalar($expected) && $actual instanceof MarkupInterface)) {
+      return TRUE;
+    }
+    return FALSE;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function assertEquals($expected, $actual, $delta = 0.0, $canonicalize = FALSE, $ignoreCase = FALSE) {
+    $expected_safe = $this->safeCastString($expected);
+    $actual_safe = $this->safeCastString($actual);
+    $comparator = $this->factory->getComparatorFor($expected_safe, $actual_safe);
+    $comparator->assertEquals($expected_safe, $actual_safe, $delta, $canonicalize, $ignoreCase);
+  }
+
+  /**
+   * Returns TRUE if the container has been initialized, FALSE otherwise.
+   *
+   * @return bool
+   */
+  protected function containerExists() {
+    return \Drupal::hasContainer();
+  }
+
+  /**
+   * Casts MarkupInterface objects into strings.
+   *
+   * @param mixed $value
+   *   The value to act on.
+   *
+   * @return mixed
+   *   The input value, with MarkupInterface objects cast to string.
+   */
+  private function safeCastString($value) {
+    return ($value instanceof MarkupInterface && $this->containerExists()) ? (string) $value : $value;
+  }
+
+}
diff --git a/core/tests/Drupal/KernelTests/Core/Test/Comparator/MarkupInterfaceComparatorTest.php b/core/tests/Drupal/KernelTests/Core/Test/Comparator/MarkupInterfaceComparatorTest.php
new file mode 100644
index 0000000000..d742917f65
--- /dev/null
+++ b/core/tests/Drupal/KernelTests/Core/Test/Comparator/MarkupInterfaceComparatorTest.php
@@ -0,0 +1,182 @@
+<?php
+
+namespace Drupal\KernelTests\Core\Test\Comparator;
+
+use Drupal\Component\Render\FormattableMarkup;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Core\Test\Comparator\MarkupInterfaceComparator;
+use Drupal\KernelTests\KernelTestBase;
+use SebastianBergmann\Comparator\Factory;
+use SebastianBergmann\Comparator\ComparisonFailure;
+
+/**
+ * Tests \Drupal\Core\Test\Comparator\MarkupInterfaceComparator.
+ *
+ * We need to test the class with a kernel test since casting MarkupInterface
+ * objects to strings can require an initialised container. We also test under
+ * the assumption of missing container by mocking MarkupInterfaceComparator;
+ * this way we cover the case of the comparator being used in a unit test.
+ *
+ * @group Test
+ *
+ * @coversDefaultClass \Drupal\Core\Test\Comparator\MarkupInterfaceComparator
+ */
+class MarkupInterfaceComparatorTest extends KernelTestBase {
+
+  /**
+   * @var \Drupal\Core\Test\Comparator\MarkupInterfaceComparator
+   */
+  protected $comparator;
+
+  /**
+   * @var \SebastianBergmann\Comparator\Factory
+   */
+  protected $factory;
+
+  /**
+   * Prepares the comparator.
+   */
+  protected function setUpComparator($mock = FALSE) {
+    if ($mock) {
+      $mock_builder = $this->getMockBuilder(MarkupInterfaceComparator::class);
+      $this->comparator = $mock_builder->setMethods(['containerExists'])->getMock();
+      $this->comparator->expects($this->any())
+        ->method('containerExists')
+        ->will($this->returnValue(FALSE));
+    }
+    else {
+      $this->comparator = new MarkupInterfaceComparator();
+    }
+
+    $this->factory = new Factory();
+    $this->comparator->setFactory($this->factory);
+  }
+
+  /**
+   * Provides test data for the comparator.
+   *
+   * @returns array
+   *   Each array entry has test expected, test actual values, a bool indicating
+   *   the expected return value of ::accepts, a value indicating the expected
+   *   result of ::assertEquals with a container initialised, and a value
+   *   indicating the expected result of ::assertEquals without a container
+   *   initialised.
+   */
+  public function dataSetProvider() {
+    return [
+      'FormattableMarkup vs FormattableMarkup, equal' => [
+        new FormattableMarkup('goldfinger', []),
+        new FormattableMarkup('goldfinger', []),
+        TRUE,
+        TRUE,
+        TRUE,
+      ],
+      'FormattableMarkup vs string, equal' => [
+        new FormattableMarkup('goldfinger', []),
+        'goldfinger',
+        TRUE,
+        TRUE,
+        TRUE,
+      ],
+      'string vs FormattableMarkup, equal' => [
+        'goldfinger',
+        new FormattableMarkup('goldfinger', []),
+        TRUE,
+        TRUE,
+        TRUE,
+      ],
+      'TranslatableMarkup vs FormattableMarkup, equal' => [
+        new TranslatableMarkup('goldfinger'),
+        new FormattableMarkup('goldfinger', []),
+        TRUE,
+        TRUE,
+        ComparisonFailure::class,
+      ],
+      'TranslatableMarkup vs int, equal' => [
+        new TranslatableMarkup('1234'),
+        1234,
+        TRUE,
+        TRUE,
+        ComparisonFailure::class,
+      ],
+      'int vs TranslatableMarkup, equal' => [
+        1234,
+        new TranslatableMarkup('1234'),
+        TRUE,
+        TRUE,
+        ComparisonFailure::class,
+      ],
+      'FormattableMarkup vs array' => [
+        new FormattableMarkup('goldfinger', []),
+        ['goldfinger'],
+        FALSE,
+        ComparisonFailure::class,
+        ComparisonFailure::class,
+      ],
+      'stdClass vs TranslatableMarkup' => [
+        (object) ['goldfinger'],
+        new TranslatableMarkup('goldfinger'),
+        FALSE,
+        ComparisonFailure::class,
+        ComparisonFailure::class,
+      ],
+      'string vs string, equal' => [
+        'goldfinger',
+        'goldfinger',
+        FALSE,
+        TRUE,
+        TRUE,
+      ],
+    ];
+  }
+
+  /**
+   * @covers ::accepts
+   * @dataProvider dataSetProvider
+   */
+  public function testAcceptsWithContainer($expected, $actual, $accepts_result, $equals_result_with_container, $equals_result_without_container) {
+    $this->setUpComparator();
+    if ($accepts_result) {
+      $this->assertTrue($this->comparator->accepts($expected, $actual));
+    }
+    else {
+      $this->assertFalse($this->comparator->accepts($expected, $actual));
+    }
+  }
+
+  /**
+   * @covers ::accepts
+   * @dataProvider dataSetProvider
+   */
+  public function testAcceptsWithoutContainer($expected, $actual, $accepts_result, $equals_result_with_container, $equals_result_without_container) {
+    $this->setUpComparator(TRUE);
+    $this->assertFalse($this->comparator->accepts($expected, $actual));
+  }
+
+  /**
+   * @covers ::assertEquals
+   * @dataProvider dataSetProvider
+   */
+  public function testAssertEqualsWithContainer($expected, $actual, $accepts_result, $equals_result_with_container, $equals_result_without_container) {
+    $this->setUpComparator();
+
+    if ($equals_result_with_container === ComparisonFailure::class) {
+      $this->expectException(ComparisonFailure::class);
+    }
+    $this->assertNull($this->comparator->assertEquals($expected, $actual));
+  }
+
+  /**
+   * @covers ::assertEquals
+   * @dataProvider dataSetProvider
+   */
+  public function testAssertEqualsWithoutContainer($expected, $actual, $accepts_result, $equals_result_with_container, $equals_result_without_container) {
+    $this->setUpComparator(TRUE);
+
+    if ($equals_result_without_container === ComparisonFailure::class) {
+      $this->expectException(ComparisonFailure::class);
+    }
+    $this->assertNull($this->comparator->assertEquals($expected, $actual));
+  }
+
+}
diff --git a/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit6/TestCompatibilityTrait.php b/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit6/TestCompatibilityTrait.php
index 92b1b9ebd7..e6d99e402a 100644
--- a/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit6/TestCompatibilityTrait.php
+++ b/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit6/TestCompatibilityTrait.php
@@ -39,18 +39,4 @@ public static function assertFalse($actual, $message = '') {
     }
   }
 
-  /**
-   * {@inheritdoc}
-   */
-  public static function assertEquals($expected, $actual, $message = '', $delta = 0, $maxDepth = 10, $canonicalize = FALSE, $ignoreCase = FALSE) {
-    // Cast objects implementing MarkupInterface to string instead of
-    // relying on PHP casting them to string depending on what they are being
-    // comparing with.
-    if (method_exists(self::class, 'castSafeStrings')) {
-      $expected = self::castSafeStrings($expected);
-      $actual = self::castSafeStrings($actual);
-    }
-    parent::assertEquals($expected, $actual, $message, $delta, $maxDepth, $canonicalize, $ignoreCase);
-  }
-
 }
diff --git a/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit7/TestCompatibilityTrait.php b/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit7/TestCompatibilityTrait.php
index 3d10e151a9..5db4beb372 100644
--- a/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit7/TestCompatibilityTrait.php
+++ b/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit7/TestCompatibilityTrait.php
@@ -39,18 +39,4 @@ public static function assertFalse($actual, string $message = ''): void {
     }
   }
 
-  /**
-   * {@inheritdoc}
-   */
-  public static function assertEquals($expected, $actual, string $message = '', float $delta = 0, int $maxDepth = 10, bool $canonicalize = FALSE, bool $ignoreCase = FALSE): void {
-    // Cast objects implementing MarkupInterface to string instead of
-    // relying on PHP casting them to string depending on what they are being
-    // comparing with.
-    if (method_exists(self::class, 'castSafeStrings')) {
-      $expected = self::castSafeStrings($expected);
-      $actual = self::castSafeStrings($actual);
-    }
-    parent::assertEquals($expected, $actual, $message, $delta, $maxDepth, $canonicalize, $ignoreCase);
-  }
-
 }
diff --git a/core/tests/bootstrap.php b/core/tests/bootstrap.php
index 467e6af6e6..11471c5edc 100644
--- a/core/tests/bootstrap.php
+++ b/core/tests/bootstrap.php
@@ -8,6 +8,7 @@
  */
 
 use Drupal\Component\Assertion\Handle;
+use Drupal\Core\Test\Comparator\MarkupInterfaceComparator;
 use PHPUnit\Framework\AssertionFailedError;
 use PHPUnit\Framework\Constraint\Count;
 use PHPUnit\Framework\Error\Error;
@@ -19,6 +20,7 @@
 use PHPUnit\Framework\TestCase;
 use PHPUnit\Util\Test;
 use PHPUnit\Util\Xml;
+use SebastianBergmann\Comparator\Factory;
 
 /**
  * Finds all valid extension directories recursively within a given directory.
@@ -163,6 +165,10 @@ function drupal_phpunit_populate_class_loader() {
 // Do class loader population.
 drupal_phpunit_populate_class_loader();
 
+// Register any additional Comparator with PHPUnit.
+$comparator_factory = Factory::getInstance();
+$comparator_factory->register(new MarkupInterfaceComparator());
+
 // Set sane locale settings, to ensure consistent string, dates, times and
 // numbers handling.
 // @see \Drupal\Core\DrupalKernel::bootEnvironment()
