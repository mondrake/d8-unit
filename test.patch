diff --git a/core/lib/Drupal/Core/Database/Driver/mysql/Schema.php b/core/lib/Drupal/Core/Database/Driver/mysql/Schema.php
index e05f10c86e..12523f00ac 100644
--- a/core/lib/Drupal/Core/Database/Driver/mysql/Schema.php
+++ b/core/lib/Drupal/Core/Database/Driver/mysql/Schema.php
@@ -109,7 +109,12 @@ protected function createTableSql($name, $table) {
 
     // Process keys & indexes.
     if (!empty($table['primary key']) && is_array($table['primary key'])) {
-      $this->ensureNotNullPrimaryKey($table['primary key'], $table['fields']);
+      $this->validatePrimaryKeySchema($table['primary key'], $table['fields']);
+    }
+    if (!empty($table['unique keys'])) {
+      foreach ($table['unique keys'] as $key => $key_fields) {
+        $this->validateUniqueKeySchema($key_fields, $table['fields']);
+      }
     }
     $keys = $this->createKeysSql($table);
     if (count($keys)) {
@@ -412,9 +417,15 @@ public function addField($table, $field, $spec, $keys_new = []) {
     }
 
     // Fields that are part of a PRIMARY KEY must be added as NOT NULL.
-    $is_primary_key = isset($keys_new['primary key']) && in_array($field, $keys_new['primary key'], TRUE);
+    $is_primary_key = isset($keys_new['primary key']) && in_array($field, $this->fieldNames($keys_new['primary key']), TRUE);
     if ($is_primary_key) {
-      $this->ensureNotNullPrimaryKey($keys_new['primary key'], [$field => $spec]);
+      $this->validatePrimaryKeySchema($keys_new['primary key'], [$field => $spec]);
+    }
+
+    if (!empty($keys_new['unique keys'])) {
+      foreach ($keys_new['unique keys'] as $key => $key_fields) {
+        $this->validateUniqueKeySchema($key_fields, [$field => $spec]);
+      }
     }
 
     $fixnull = FALSE;
@@ -497,6 +508,7 @@ public function indexExists($table, $name) {
    * {@inheritdoc}
    */
   public function addPrimaryKey($table, $fields) {
+    $this->validatePrimaryKeySchema($fields);
     if (!$this->tableExists($table)) {
       throw new SchemaObjectDoesNotExistException("Cannot add primary key to table '$table': table doesn't exist.");
     }
@@ -534,6 +546,7 @@ protected function findPrimaryKeyColumns($table) {
    * {@inheritdoc}
    */
   public function addUniqueKey($table, $name, $fields) {
+    $this->validateUniqueKeySchema($fields);
     if (!$this->tableExists($table)) {
       throw new SchemaObjectDoesNotExistException("Cannot add unique key '$name' to table '$table': table doesn't exist.");
     }
@@ -625,8 +638,13 @@ public function changeField($table, $field, $field_new, $spec, $keys_new = []) {
     if (($field != $field_new) && $this->fieldExists($table, $field_new)) {
       throw new SchemaObjectExistsException("Cannot rename field '$table.$field' to '$field_new': target field already exists.");
     }
-    if (isset($keys_new['primary key']) && in_array($field_new, $keys_new['primary key'], TRUE)) {
-      $this->ensureNotNullPrimaryKey($keys_new['primary key'], [$field_new => $spec]);
+    if (isset($keys_new['primary key']) && in_array($field_new, $this->fieldNames($keys_new['primary key']), TRUE)) {
+      $this->validatePrimaryKeySchema($keys_new['primary key'], [$field_new => $spec]);
+    }
+    if (!empty($keys_new['unique keys'])) {
+      foreach ($keys_new['unique keys'] as $key => $key_fields) {
+        $this->validateUniqueKeySchema($key_fields, [$field_new => $spec]);
+      }
     }
 
     $sql = 'ALTER TABLE {' . $table . '} CHANGE `' . $field . '` ' . $this->createFieldSql($field_new, $this->processField($spec));
diff --git a/core/lib/Drupal/Core/Database/Driver/sqlite/Schema.php b/core/lib/Drupal/Core/Database/Driver/sqlite/Schema.php
index 2c0f98dc03..a79447e1d9 100644
--- a/core/lib/Drupal/Core/Database/Driver/sqlite/Schema.php
+++ b/core/lib/Drupal/Core/Database/Driver/sqlite/Schema.php
@@ -54,7 +54,12 @@ public function fieldExists($table, $column) {
    */
   public function createTableSql($name, $table) {
     if (!empty($table['primary key']) && is_array($table['primary key'])) {
-      $this->ensureNotNullPrimaryKey($table['primary key'], $table['fields']);
+      $this->validatePrimaryKeySchema($table['primary key'], $table['fields']);
+    }
+    if (!empty($table['unique keys'])) {
+      foreach ($table['unique keys'] as $key => $key_fields) {
+        $this->validateUniqueKeySchema($key_fields, $table['fields']);
+      }
     }
 
     $sql = [];
@@ -321,8 +326,13 @@ public function addField($table, $field, $specification, $keys_new = []) {
     if ($this->fieldExists($table, $field)) {
       throw new SchemaObjectExistsException("Cannot add field '$table.$field': field already exists.");
     }
-    if (isset($keys_new['primary key']) && in_array($field, $keys_new['primary key'], TRUE)) {
-      $this->ensureNotNullPrimaryKey($keys_new['primary key'], [$field => $specification]);
+    if (isset($keys_new['primary key']) && in_array($field, $this->fieldNames($keys_new['primary key']), TRUE)) {
+      $this->validatePrimaryKeySchema($keys_new['primary key'], [$field => $specification]);
+    }
+    if (!empty($keys_new['unique keys'])) {
+      foreach ($keys_new['unique keys'] as $key => $key_fields) {
+        $this->validateUniqueKeySchema($key_fields, [$field => $specification]);
+      }
     }
 
     // SQLite doesn't have a full-featured ALTER TABLE statement. It only
@@ -593,8 +603,13 @@ public function changeField($table, $field, $field_new, $spec, $keys_new = []) {
     if (($field != $field_new) && $this->fieldExists($table, $field_new)) {
       throw new SchemaObjectExistsException("Cannot rename field '$table.$field' to '$field_new': target field already exists.");
     }
-    if (isset($keys_new['primary key']) && in_array($field_new, $keys_new['primary key'], TRUE)) {
-      $this->ensureNotNullPrimaryKey($keys_new['primary key'], [$field_new => $spec]);
+    if (isset($keys_new['primary key']) && in_array($field_new, $this->fieldNames($keys_new['primary key']), TRUE)) {
+      $this->validatePrimaryKeySchema($keys_new['primary key'], [$field_new => $spec]);
+    }
+    if (!empty($keys_new['unique keys'])) {
+      foreach ($keys_new['unique keys'] as $key => $key_fields) {
+        $this->validateUniqueKeySchema($key_fields, [$field_new => $spec]);
+      }
     }
 
     $old_schema = $this->introspectSchema($table);
@@ -701,6 +716,7 @@ public function dropIndex($table, $name) {
    * {@inheritdoc}
    */
   public function addUniqueKey($table, $name, $fields) {
+    $this->validateUniqueKeySchema($fields);
     if (!$this->tableExists($table)) {
       throw new SchemaObjectDoesNotExistException("Cannot add unique key '$name' to table '$table': table doesn't exist.");
     }
@@ -745,7 +761,7 @@ public function addPrimaryKey($table, $fields) {
     }
 
     $new_schema['primary key'] = $fields;
-    $this->ensureNotNullPrimaryKey($new_schema['primary key'], $new_schema['fields']);
+    $this->validatePrimaryKeySchema($new_schema['primary key'], $new_schema['fields']);
     $this->alterTable($table, $old_schema, $new_schema);
   }
 
diff --git a/core/lib/Drupal/Core/Database/Schema.php b/core/lib/Drupal/Core/Database/Schema.php
index 9083b27492..b165cf6e00 100644
--- a/core/lib/Drupal/Core/Database/Schema.php
+++ b/core/lib/Drupal/Core/Database/Schema.php
@@ -324,6 +324,8 @@ public function fieldExists($table, $column) {
    *   If the specified table doesn't exist.
    * @throws \Drupal\Core\Database\SchemaObjectExistsException
    *   If the specified table already has a field by that name.
+   * @throws \Drupal\Core\Database\SchemaException
+   *   If the specified keys fail validation.
    */
   abstract public function addField($table, $field, $spec, $keys_new = []);
 
@@ -360,15 +362,53 @@ public function fieldExists($table, $column) {
    * @param $table
    *   The table to be altered.
    * @param $fields
-   *   Fields for the primary key.
+   *   Fields for the primary key. Partial column length specifications are not
+   *   allowed.
    *
    * @throws \Drupal\Core\Database\SchemaObjectDoesNotExistException
    *   If the specified table doesn't exist.
    * @throws \Drupal\Core\Database\SchemaObjectExistsException
    *   If the specified table already has a primary key.
+   * @throws \Drupal\Core\Database\SchemaException
+   *   If the specified key fails validation.
    */
   abstract public function addPrimaryKey($table, $fields);
 
+  /**
+   * Validates a primary key schema definition.
+   *
+   * @param array $key_fields
+   *   An array containing the fields that will form the primary key.
+   * @param array $fields
+   *   (Optional) An array containing the field specifications of the table,
+   *   as per the schema data structure format.
+   *
+   * @throws \Drupal\Core\Database\SchemaException
+   *   If the specified fields fail validation.
+   */
+  protected function validatePrimaryKeySchema(array $key_fields, array $fields = []): void {
+    // Ensure no partial column length specified.
+    $fixed_key_fields = [];
+    foreach ($key_fields as $key_field) {
+      if (is_array($key_field)) {
+        @trigger_error('Specification of primary key with column length is deprecated in drupal:9.3.0 and is throwing a SchemaException from drupal:10.0.0. There is no replacement. See https://www.drupal.org/node/1234567', E_USER_DEPRECATED);
+        $fixed_key_fields[] = $key_field[0];
+      }
+      else {
+        $fixed_key_fields[] = $key_field;
+      }
+    }
+
+    // Ensure primary key is not null.
+    if (!empty($fields)) {
+      foreach (array_intersect($fixed_key_fields, array_keys($fields)) as $field_name) {
+        if (!isset($fields[$field_name]['not null']) || $fields[$field_name]['not null'] !== TRUE) {
+          throw new SchemaException("The '$field_name' field specification does not define 'not null' as TRUE.");
+        }
+      }
+    }
+  }
+
   /**
    * Drop the primary key.
    *
@@ -409,15 +449,38 @@ protected function findPrimaryKeyColumns($table) {
    * @param $name
    *   The name of the key.
    * @param $fields
-   *   An array of field names.
+   *   An array of field names. Partial column length specifications are not
+   *   allowed.
    *
    * @throws \Drupal\Core\Database\SchemaObjectDoesNotExistException
    *   If the specified table doesn't exist.
    * @throws \Drupal\Core\Database\SchemaObjectExistsException
    *   If the specified table already has a key by that name.
+   * @throws \Drupal\Core\Database\SchemaException
+   *   If the specified key fails validation.
    */
   abstract public function addUniqueKey($table, $name, $fields);
 
+  /**
+   * Validates a unique key schema definition.
+   *
+   * @param array $key_fields
+   *   An array containing the fields that will form the unique key.
+   * @param array $fields
+   *   (Optional) An array containing the field specifications of the table,
+   *   as per the schema data structure format.
+   *
+   * @throws \Drupal\Core\Database\SchemaException
+   *   If the specified key fails validation.
+   */
+  protected function validateUniqueKeySchema(array $key_fields, array $fields = []): void {
+    foreach ($key_fields as $key_field) {
+      if (is_array($key_field)) {
+        @trigger_error('Specification of unique keys with column length is deprecated in drupal:9.3.0 and is throwing a SchemaException from drupal:10.0.0. There is no replacement. See https://www.drupal.org/node/1234567', E_USER_DEPRECATED);
+      }
+    }
+  }
+
   /**
    * Drop a unique key.
    *
@@ -595,6 +658,8 @@ protected function introspectIndexSchema($table) {
    *   If the specified table or source field doesn't exist.
    * @throws \Drupal\Core\Database\SchemaObjectExistsException
    *   If the specified destination field already exists.
+   * @throws \Drupal\Core\Database\SchemaException
+   *   If the specified keys fail validation.
    */
   abstract public function changeField($table, $field, $field_new, $spec, $keys_new = []);
 
@@ -608,6 +673,8 @@ protected function introspectIndexSchema($table) {
    *
    * @throws \Drupal\Core\Database\SchemaObjectExistsException
    *   If the specified table already exists.
+   * @throws \Drupal\Core\Database\SchemaException
+   *   If the table definition fails validation.
    */
   public function createTable($name, $table) {
     if ($this->tableExists($name)) {
@@ -690,8 +757,14 @@ protected function escapeDefaultValue($value) {
    * @throws \Drupal\Core\Database\SchemaException
    *   Thrown if any primary key field specification does not exist or if they
    *   do not define 'not null' as TRUE.
+   *
+   * @deprecated in drupal:9.3.0 and is removed from drupal:10.0.0. Use
+   *   ::validatePrimaryKeySchema() instead.
+   *
+   * @see https://www.drupal.org/node/1234567
    */
   protected function ensureNotNullPrimaryKey(array $primary_key, array $fields) {
+    @trigger_error(__METHOD__ . ' is deprecated in drupal:9.3.0 and is removed from drupal:10.0.0. Use ::validatePrimaryKeySchema() instead. See https://www.drupal.org/node/1234567', E_USER_DEPRECATED);
     foreach (array_intersect($primary_key, array_keys($fields)) as $field_name) {
       if (!isset($fields[$field_name]['not null']) || $fields[$field_name]['not null'] !== TRUE) {
         throw new SchemaException("The '$field_name' field specification does not define 'not null' as TRUE.");
diff --git a/core/lib/Drupal/Core/Database/database.api.php b/core/lib/Drupal/Core/Database/database.api.php
index 890f36bd9a..706e4c0a73 100644
--- a/core/lib/Drupal/Core/Database/database.api.php
+++ b/core/lib/Drupal/Core/Database/database.api.php
@@ -309,10 +309,12 @@
  *     'numeric' columns must specify 'precision' and 'scale', and type
  *     'varchar' must specify the 'length' parameter.
  *  - 'primary key': An array of one or more key column specifiers (see below)
- *    that form the primary key.
+ *    that form the primary key. Primary keys do not allow partial column length
+ *    specifications.
  *  - 'unique keys': An associative array of unique keys ('keyname' =>
  *    specification). Each specification is an array of one or more
  *    key column specifiers (see below) that form a unique key on the table.
+ *    Unique keys do not allow partial column length specifications.
  *  - 'foreign keys': An associative array of relations ('my_relation' =>
  *    specification). Each specification is an array containing the name of
  *    the referenced table ('table'), and an array of column mappings
@@ -326,6 +328,7 @@
  *
  * A key column specifier is either a string naming a column or an array of two
  * elements, column name and length, specifying a prefix of the named column.
+ * Partial column length for a column can only be specified for indexes.
  *
  * As an example, this is the schema definition for the 'users_data' table. It
  * shows five fields ('uid', 'module', 'name', 'value', and 'serialized'), the
diff --git a/core/tests/Drupal/KernelTests/Core/Database/SchemaTest.php b/core/tests/Drupal/KernelTests/Core/Database/SchemaTest.php
index 0b163a2405..98cb892448 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/SchemaTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/SchemaTest.php
@@ -939,6 +939,168 @@ public function testInvalidPrimaryKeyAddition() {
     $this->schema->addField($table_name, 'new_test_field', ['type' => 'int'], ['primary key' => ['test_field', 'new_test_field']]);
   }
 
+  /**
+   * @covers ::validatePrimaryKeySchema
+   * @group legacy
+   */
+  public function testInvalidPrimaryKeyColumnsOnCreateTable(): void {
+    $this->expectDeprecation("Specification of primary key with column length is deprecated in drupal:9.3.0 and is throwing a SchemaException from drupal:10.0.0. There is no replacement. See https://www.drupal.org/node/1234567");
+    // Test with partial column length.
+    $this->schema->createTable('table_with_invalid_pk', [
+      'description' => 'Table with partial column length primary key.',
+      'fields' => [
+        'test_field_1'  => [
+          'type' => 'varchar',
+          'length' => 50,
+          'not null' => TRUE,
+        ],
+      ],
+      'primary key' => [['test_field_1', 10]],
+    ]);
+  }
+
+  /**
+   * @covers ::validatePrimaryKeySchema
+   * @group legacy
+   */
+  public function testInvalidPrimaryKeyColumnsOnAddPrimaryKey(): void {
+    $this->expectDeprecation("Specification of primary key with column length is deprecated in drupal:9.3.0 and is throwing a SchemaException from drupal:10.0.0. There is no replacement. See https://www.drupal.org/node/1234567");
+    // Test with partial column length.
+    $this->schema->createTable('table_with_invalid_pk', [
+      'description' => 'Table with partial column length primary key.',
+      'fields' => [
+        'test_field_1'  => [
+          'type' => 'varchar',
+          'length' => 50,
+          'not null' => TRUE,
+        ],
+      ],
+    ]);
+    $this->schema->addPrimaryKey('table_with_invalid_pk', [['test_field_1', 10]]);
+  }
+
+  /**
+   * @covers ::validatePrimaryKeySchema
+   * @group legacy
+   */
+  public function testInvalidPrimaryKeyColumnsOnAddField(): void {
+    $this->expectDeprecation("Specification of primary key with column length is deprecated in drupal:9.3.0 and is throwing a SchemaException from drupal:10.0.0. There is no replacement. See https://www.drupal.org/node/1234567");
+    // Test with partial column length.
+    $this->schema->createTable('table_with_invalid_pk', [
+      'description' => 'Table with partial column length primary key.',
+      'fields' => [
+        'test_field_1'  => [
+          'type' => 'varchar',
+          'length' => 50,
+          'not null' => TRUE,
+        ],
+      ],
+    ]);
+    $this->schema->addField('table_with_invalid_pk', 'new_test_field', [
+      'type' => 'varchar',
+      'length' => 50,
+      'not null' => TRUE,
+    ], [
+      'primary key' => [['new_test_field', 10]],
+    ]);
+  }
+
+  /**
+   * @covers ::validatePrimaryKeySchema
+   * @group legacy
+   */
+  public function testInvalidPrimaryKeyColumnsOnChangeField(): void {
+    $this->expectDeprecation("Specification of primary key with column length is deprecated in drupal:9.3.0 and is throwing a SchemaException from drupal:10.0.0. There is no replacement. See https://www.drupal.org/node/1234567");
+    // Test with partial column length.
+    $this->schema->createTable('table_with_invalid_pk', [
+      'description' => 'Table with partial column length primary key.',
+      'fields' => [
+        'test_field_1'  => [
+          'type' => 'varchar',
+          'length' => 50,
+          'not null' => TRUE,
+        ],
+      ],
+    ]);
+    $this->schema->changeField('table_with_invalid_pk', 'test_field_1', 'test_field_1', [
+      'type' => 'varchar',
+      'length' => 20,
+      'not null' => TRUE,
+    ], [
+      'primary key' => [['test_field_1', 10]],
+    ]);
+  }
+
+  /**
+   * @covers ::validateUniqueKeySchema
+   * @group legacy
+   */
+  public function testInvalidUniqueKeyColumnsOnCreateTable(): void {
+    $this->expectDeprecation("Specification of unique keys with column length is deprecated in drupal:9.3.0 and is throwing a SchemaException from drupal:10.0.0. There is no replacement. See https://www.drupal.org/node/1234567");
+    // Test with partial column length.
+    $this->schema->createTable('table_with_invalid_unique_key', [
+      'description' => 'Table with partial column length unique key.',
+      'fields' => [
+        'test_field_1'  => [
+          'type' => 'varchar',
+          'length' => 50,
+          'not null' => TRUE,
+        ],
+      ],
+      'unique keys' => [
+        'test_unique_key' => [['test_field_1', 10]],
+      ],
+    ]);
+  }
+
+  /**
+   * @covers ::validateUniqueKeySchema
+   * @group legacy
+   */
+  public function testInvalidUniqueKeyColumnsOnAddUniqueKey(): void {
+    $this->expectDeprecation("Specification of unique keys with column length is deprecated in drupal:9.3.0 and is throwing a SchemaException from drupal:10.0.0. There is no replacement. See https://www.drupal.org/node/1234567");
+    // Test with partial column length.
+    $this->schema->createTable('table_with_invalid_unique_key', [
+      'description' => 'Table with partial column length unique key.',
+      'fields' => [
+        'test_field_1'  => [
+          'type' => 'varchar',
+          'length' => 50,
+          'not null' => TRUE,
+        ],
+      ],
+    ]);
+    $this->schema->addUniqueKey('table_with_invalid_unique_key', 'test_unique_key', [['test_field_1', 10]]);
+  }
+
+  /**
+   * @covers ::validateUniqueKeySchema
+   * @group legacy
+   */
+  public function testInvalidUniqueKeyColumnsOnAddField(): void {
+    $this->expectDeprecation("Specification of unique keys with column length is deprecated in drupal:9.3.0 and is throwing a SchemaException from drupal:10.0.0. There is no replacement. See https://www.drupal.org/node/1234567");
+    // Test with partial column length.
+    $this->schema->createTable('table_with_invalid_unique_key', [
+      'description' => 'Table with partial column length unique key.',
+      'fields' => [
+        'test_field_1'  => [
+          'type' => 'varchar',
+          'length' => 50,
+          'not null' => TRUE,
+        ],
+      ],
+    ]);
+    $this->schema->addField('table_with_invalid_unique_key', 'new_test_field', [
+      'type' => 'varchar',
+      'length' => 50,
+      'not null' => TRUE,
+    ], [
+      'unique keys' => [
+        'test_unique_key' => [['new_test_field', 10]],
+      ],
+    ]);
+  }
+
   /**
    * Tests changing the primary key with an invalid field specification.
    */
