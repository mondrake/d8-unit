diff --git a/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php b/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php
index 9085e3e288..f3153acf6f 100644
--- a/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php
+++ b/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php
@@ -11,6 +11,7 @@
 use Drupal\Tests\StreamCapturer;
 use Drupal\Tests\Traits\Core\CronRunTrait;
 use Drupal\user\Entity\Role;
+use PHPUnit\Framework\AssertionFailedError;
 use PHPUnit\Framework\ExpectationFailedException;
 
 /**
@@ -220,7 +221,7 @@ public function testLinkExistsExact() {
    */
   public function testInvalidLinkExistsExact() {
     $this->drupalGet('test-pipe-char');
-    $this->expectException(ExpectationException::class);
+    $this->expectException(AssertionFailedError::class);
     $this->expectExceptionMessage('Link with label foo|bar found');
     $this->assertSession()->linkExistsExact('foo|bar');
   }
@@ -252,7 +253,7 @@ public function testResponseHeaderDoesNotExist() {
    */
   public function testInvalidLinkNotExistsExact() {
     $this->drupalGet('test-pipe-char');
-    $this->expectException(ExpectationException::class);
+    $this->expectException(AssertionFailedError::class);
     $this->expectExceptionMessage('Link with label foo|bar|baz not found');
     $this->assertSession()->linkNotExistsExact('foo|bar|baz');
   }
@@ -436,13 +437,10 @@ public function testFieldAssertsForButton() {
     $this->assertSession()->buttonExists('Duplicate button 2');
     $this->assertSession()->buttonNotExists('Rabbit');
 
-    try {
-      $this->assertSession()->buttonNotExists('Duplicate button 2');
-      $this->fail('The "duplicate_button" field with the value Duplicate button 2 was not found.');
-    }
-    catch (ExpectationException $e) {
-      // Expected exception; just continue testing.
-    }
+    // Verify that the "duplicate_button" field with the value
+    // "Duplicate button 2" is not present.
+    $this->expectException(AssertionFailedError::class);
+    $this->assertSession()->buttonNotExists('Duplicate button 2');
   }
 
   /**
diff --git a/core/tests/Drupal/FunctionalTests/WebAssertTest.php b/core/tests/Drupal/FunctionalTests/WebAssertTest.php
index 6b13dc3184..54c5ae17f4 100644
--- a/core/tests/Drupal/FunctionalTests/WebAssertTest.php
+++ b/core/tests/Drupal/FunctionalTests/WebAssertTest.php
@@ -2,10 +2,8 @@
 
 namespace Drupal\FunctionalTests;
 
-use Behat\Mink\Exception\ExpectationException;
 use Drupal\Core\Url;
 use Drupal\Tests\BrowserTestBase;
-use Behat\Mink\Exception\ResponseTextException;
 use PHPUnit\Framework\AssertionFailedError;
 
 /**
@@ -81,7 +79,7 @@ public function testPageTextContainsOnce() {
     $this->drupalGet('test-page');
     $this->assertSession()->pageTextContainsOnce('Test page text.');
 
-    $this->expectException(ResponseTextException::class);
+    $this->expectException(AssertionFailedError::class);
     $this->expectExceptionMessage("Failed asserting that the page matches the pattern '/does\\-not\\-exist/ui' 1 time(s), 0 found.");
     $this->assertSession()->pageTextContainsOnce('does-not-exist');
   }
@@ -118,7 +116,7 @@ public function testAddressEquals(): void {
     $this->assertSession()->addressNotEquals('other-page');
     $this->assertSession()->addressNotEquals('other-page?a=b&c=d');
 
-    $this->expectException(ExpectationException::class);
+    $this->expectException(AssertionFailedError::class);
     $this->expectExceptionMessage('Current page is "/test-page?a=b&c=d", but "/test-page?a=b&c=e" expected.');
     $this->assertSession()->addressEquals('test-page?a=b&c=e');
   }
@@ -128,7 +126,7 @@ public function testAddressEquals(): void {
    */
   public function testAddressNotEqualsException(): void {
     $this->drupalGet('test-page', ['query' => ['a' => 'b', 'c' => 'd']]);
-    $this->expectException(ExpectationException::class);
+    $this->expectException(AssertionFailedError::class);
     $this->expectExceptionMessage('Current page is "/test-page?a=b&c=d", but should not be.');
     $this->assertSession()->addressNotEquals('test-page?a=b&c=d');
   }
diff --git a/core/tests/Drupal/Tests/WebAssert.php b/core/tests/Drupal/Tests/WebAssert.php
index 8e887d2001..690fcf17d2 100644
--- a/core/tests/Drupal/Tests/WebAssert.php
+++ b/core/tests/Drupal/Tests/WebAssert.php
@@ -2,8 +2,8 @@
 
 namespace Drupal\Tests;
 
+use Behat\Mink\Exception\ElementNotFoundException;
 use Behat\Mink\Exception\ExpectationException;
-use Behat\Mink\Exception\ResponseTextException;
 use Behat\Mink\WebAssert as MinkWebAssert;
 use Behat\Mink\Element\ElementInterface;
 use Behat\Mink\Element\TraversableElement;
@@ -12,7 +12,6 @@
 use Drupal\Component\Utility\Html;
 use Drupal\Core\Url;
 use PHPUnit\Framework\Assert;
-use PHPUnit\Framework\AssertionFailedError;
 use PHPUnit\Framework\Constraint\ArrayHasKey;
 use PHPUnit\Framework\Constraint\IsIdentical;
 use PHPUnit\Framework\Constraint\IsEqual;
@@ -159,7 +158,7 @@ public function buttonExists($button, TraversableElement $container = NULL) {
    * @param \Behat\Mink\Element\TraversableElement $container
    *   (optional) The document to check against. Defaults to the current page.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws \PHPUnit\Framework\AssertionFailedError
    *   When the button exists.
    */
   public function buttonNotExists($button, TraversableElement $container = NULL) {
@@ -281,7 +280,9 @@ public function optionNotExists($select, $option, TraversableElement $container
    *   The string the page title should be.
    *
    * @throws \Behat\Mink\Exception\ExpectationException
-   *   Thrown when element doesn't exist, or the title is a different one.
+   *   Thrown when element doesn't exist.
+   * @throws \PHPUnit\Framework\AssertionFailedError
+   *   Thrown when the title is a different one.
    */
   public function titleEquals($expected_title) {
     if (func_num_args() > 1) {
@@ -309,7 +310,7 @@ public function titleEquals($expected_title) {
    *   messages: use strtr() to embed variables in the message text, not
    *   t(). If left blank, a default message will be displayed.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws \PHPUnit\Framework\AssertionFailedError
    *   Thrown when element doesn't exist, or the link label is a different one.
    */
   public function linkExists($label, $index = 0, $message = '') {
@@ -332,7 +333,7 @@ public function linkExists($label, $index = 0, $message = '') {
    *   messages: use strtr() to embed variables in the message text, not
    *   t(). If left blank, a default message will be displayed.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws \PHPUnit\Framework\AssertionFailedError
    *   Thrown when element doesn't exist, or the link label is a different one.
    */
   public function linkExistsExact($label, $index = 0, $message = '') {
@@ -353,7 +354,7 @@ public function linkExistsExact($label, $index = 0, $message = '') {
    *   messages: use strtr() to embed variables in the message text, not
    *   t(). If left blank, a default message will be displayed.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws \PHPUnit\Framework\AssertionFailedError
    *   Thrown when element doesn't exist, or the link label is a different one.
    */
   public function linkNotExists($label, $message = '') {
@@ -374,7 +375,7 @@ public function linkNotExists($label, $message = '') {
    *   messages: use strtr() to embed variables in the message text, not
    *   t(). If left blank, a default message will be displayed.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws \PHPUnit\Framework\AssertionFailedError
    *   Thrown when element doesn't exist, or the link label is a different one.
    */
   public function linkNotExistsExact($label, $message = '') {
@@ -396,7 +397,7 @@ public function linkNotExistsExact($label, $message = '') {
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws \PHPUnit\Framework\AssertionFailedError
    *   Thrown when element doesn't exist, or the link label is a different one.
    */
   public function linkByHrefExists($href, $index = 0, $message = '') {
@@ -417,7 +418,7 @@ public function linkByHrefExists($href, $index = 0, $message = '') {
    *   variables in the message text, not t(). If left blank, a default message
    *   will be displayed.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws \PHPUnit\Framework\AssertionFailedError
    *   Thrown when element doesn't exist, or the link label is a different one.
    */
   public function linkByHrefNotExists($href, $message = '') {
@@ -515,7 +516,7 @@ public function assertEscaped($raw) {
    * @param string|object $text
    *   Text value. Any non-string value will be cast to string.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws \PHPUnit\Framework\AssertionFailedError
    */
   public function responseContains($text) {
     if (func_num_args() > 1) {
@@ -530,7 +531,7 @@ public function responseContains($text) {
    * @param string|object $text
    *   Text value. Any non-string value will be cast to string.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws \PHPUnit\Framework\AssertionFailedError
    */
   public function responseNotContains($text) {
     if (func_num_args() > 1) {
@@ -548,16 +549,9 @@ public function responseNotContains($text) {
    *   The condition.
    * @param string $message
    *   The success message.
-   *
-   * @throws \Behat\Mink\Exception\ExpectationException
-   *   When the condition is not fulfilled.
    */
   public function assert($condition, $message) {
-    if ($condition) {
-      return;
-    }
-
-    throw new ExpectationException($message, $this->session->getDriver());
+    Assert::assertTrue((bool) $condition, $message);
   }
 
   /**
@@ -656,7 +650,7 @@ public function hiddenFieldExists($field, TraversableElement $container = NULL)
    * @param \Behat\Mink\Element\TraversableElement $container
    *   (optional) The document to check against. Defaults to the current page.
    *
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws \PHPUnit\Framework\AssertionFailedError
    */
   public function hiddenFieldNotExists($field, TraversableElement $container = NULL) {
     if (func_num_args() > 2) {
@@ -678,7 +672,7 @@ public function hiddenFieldNotExists($field, TraversableElement $container = NUL
    *   (optional) The document to check against. Defaults to the current page.
    *
    * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws \PHPUnit\Framework\AssertionFailedError
    */
   public function hiddenFieldValueEquals($field, $value, TraversableElement $container = NULL) {
     if (func_num_args() > 3) {
@@ -702,7 +696,7 @@ public function hiddenFieldValueEquals($field, $value, TraversableElement $conta
    *   (optional) The document to check against. Defaults to the current page.
    *
    * @throws \Behat\Mink\Exception\ElementNotFoundException
-   * @throws \Behat\Mink\Exception\ExpectationException
+   * @throws \PHPUnit\Framework\AssertionFailedError
    */
   public function hiddenFieldValueNotEquals($field, $value, TraversableElement $container = NULL) {
     if (func_num_args() > 3) {
@@ -728,12 +722,7 @@ public function pageTextContainsOnce($text) {
       @trigger_error('Calling ' . __METHOD__ . ' with more than one argument is deprecated in drupal:9.1.0 and will throw an \InvalidArgumentException in drupal:10.0.0. See https://www.drupal.org/node/3162537', E_USER_DEPRECATED);
     }
     $regex = '/' . preg_quote($text, '/') . '/ui';
-    try {
-      $this->pageTextMatchesCount(1, $regex);
-    }
-    catch (AssertionFailedError $e) {
-      throw new ResponseTextException($e->getMessage(), $this->session->getDriver());
-    }
+    $this->pageTextMatchesCount(1, $regex);
   }
 
   /**
@@ -965,7 +954,14 @@ public function elementExists($selectorType, $selector, ElementInterface $contai
     if (func_num_args() > 3) {
       @trigger_error('Calling ' . __METHOD__ . ' with more than three arguments is deprecated in drupal:9.1.0 and will throw an \InvalidArgumentException in drupal:10.0.0. See https://www.drupal.org/node/3162537', E_USER_DEPRECATED);
     }
-    return parent::elementExists($selectorType, $selector, $container);
+    try {
+      $element = parent::elementExists($selectorType, $selector, $container);
+    }
+    catch (ElementNotFoundException $e) {
+      Assert::fail($e->getMessage);
+    }
+
+    return $element;
   }
 
   /**
@@ -975,7 +971,12 @@ public function elementNotExists($selectorType, $selector, ElementInterface $con
     if (func_num_args() > 3) {
       @trigger_error('Calling ' . __METHOD__ . ' with more than three arguments is deprecated in drupal:9.1.0 and will throw an \InvalidArgumentException in drupal:10.0.0. See https://www.drupal.org/node/3162537', E_USER_DEPRECATED);
     }
-    return parent::elementNotExists($selectorType, $selector, $container);
+    try {
+      parent::elementNotExists($selectorType, $selector, $container);
+    }
+    catch (ExpectationException $e) {
+      Assert::fail($e->getMessage);
+    }
   }
 
   /**
@@ -1133,12 +1134,7 @@ public function checkboxNotChecked($field, TraversableElement $container = NULL)
    */
   public function statusMessageExists(string $type = NULL): void {
     $selector = $this->buildStatusMessageSelector(NULL, $type);
-    try {
-      $this->elementExists('xpath', $selector);
-    }
-    catch (ExpectationException $e) {
-      Assert::fail($e->getMessage());
-    }
+    $this->elementExists('xpath', $selector);
   }
 
   /**
@@ -1149,12 +1145,7 @@ public function statusMessageExists(string $type = NULL): void {
    */
   public function statusMessageNotExists(string $type = NULL): void {
     $selector = $this->buildStatusMessageSelector(NULL, $type);
-    try {
-      $this->elementNotExists('xpath', $selector);
-    }
-    catch (ExpectationException $e) {
-      Assert::fail($e->getMessage());
-    }
+    $this->elementNotExists('xpath', $selector);
   }
 
   /**
@@ -1167,12 +1158,7 @@ public function statusMessageNotExists(string $type = NULL): void {
    */
   public function statusMessageContains(string $message, string $type = NULL): void {
     $selector = $this->buildStatusMessageSelector($message, $type);
-    try {
-      $this->elementExists('xpath', $selector);
-    }
-    catch (ExpectationException $e) {
-      Assert::fail($e->getMessage());
-    }
+    $this->elementExists('xpath', $selector);
   }
 
   /**
@@ -1185,12 +1171,7 @@ public function statusMessageContains(string $message, string $type = NULL): voi
    */
   public function statusMessageNotContains(string $message, string $type = NULL): void {
     $selector = $this->buildStatusMessageSelector($message, $type);
-    try {
-      $this->elementNotExists('xpath', $selector);
-    }
-    catch (ExpectationException $e) {
-      Assert::fail($e->getMessage());
-    }
+    $this->elementNotExists('xpath', $selector);
   }
 
   /**
