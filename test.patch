diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index 67dc4a1a1a..fe1e10bda4 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -2085,6 +2085,7 @@ public function isEventEnabled(string $eventName): bool {
   public function enableEvents(array $eventNames): static {
     foreach ($eventNames as $eventName) {
       assert(class_exists($eventName), "Event class {$eventName} does not exist");
+      assert(is_a($eventName, DatabaseEvent::class, true), "Event class {$eventName} is not a valid database event class");
       $this->enabledEvents[$eventName] = TRUE;
     }
     return $this;
@@ -2101,6 +2102,7 @@ public function enableEvents(array $eventNames): static {
   public function disableEvents(array $eventNames): static {
     foreach ($eventNames as $eventName) {
       assert(class_exists($eventName), "Event class {$eventName} does not exist");
+      assert(is_a($eventName, DatabaseEvent::class, true), "Event class {$eventName} is not a valid database event class");
       $this->enabledEvents[$eventName] = FALSE;
     }
     return $this;
diff --git a/core/lib/Drupal/Core/Database/Event/TransactionBeginEvent.php b/core/lib/Drupal/Core/Database/Event/TransactionBeginEvent.php
new file mode 100644
index 0000000000..402ed8071b
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Event/TransactionBeginEvent.php
@@ -0,0 +1,33 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\Event;
+
+/**
+ * Represents the beginiing of a transaction.
+ */
+class TransactionBeginEvent extends DatabaseEvent {
+
+  /**
+   * Constructs a TransactionBeginEvent object.
+   *
+   * See 'Customizing database settings' in settings.php for an explanation of
+   * the $key and $target connection values.
+   *
+   * @param string $key
+   *   The database connection key.
+   * @param string $target
+   *   The database connection target.
+   * @param string $name
+   *   The name of the transaction.
+   */
+  public function __construct(
+    public readonly string $key,
+    public readonly string $target,
+    public readonly string $name,
+  ) {
+    parent::__construct();
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/Event/TransactionSavepointEvent.php b/core/lib/Drupal/Core/Database/Event/TransactionSavepointEvent.php
new file mode 100644
index 0000000000..cc1e0084e9
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Event/TransactionSavepointEvent.php
@@ -0,0 +1,36 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\Event;
+
+/**
+ * Represents the activation of a transaction savepoint.
+ */
+class TransactionSavepointEvent extends DatabaseEvent {
+
+  /**
+   * Constructs a TransactionSavepointEvent object.
+   *
+   * See 'Customizing database settings' in settings.php for an explanation of
+   * the $key and $target connection values.
+   *
+   * @param string $key
+   *   The database connection key.
+   * @param string $target
+   *   The database connection target.
+   * @param string $name
+   *   The name of the savepoint.
+   * @param string $parentName
+   *   The name of the parent transaction or savepoint.
+   */
+  public function __construct(
+    public readonly string $key,
+    public readonly string $target,
+    public readonly string $name,
+    public readonly string $parentName,
+  ) {
+    parent::__construct();
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/Transaction/TransactionManagerBase.php b/core/lib/Drupal/Core/Database/Transaction/TransactionManagerBase.php
index 112077b90e..c09e50b395 100644
--- a/core/lib/Drupal/Core/Database/Transaction/TransactionManagerBase.php
+++ b/core/lib/Drupal/Core/Database/Transaction/TransactionManagerBase.php
@@ -5,6 +5,8 @@
 namespace Drupal\Core\Database\Transaction;
 
 use Drupal\Core\Database\Connection;
+use Drupal\Core\Database\Event\TransactionBeginEvent;
+use Drupal\Core\Database\Event\TransactionSavepointEvent;
 use Drupal\Core\Database\Transaction;
 use Drupal\Core\Database\TransactionCommitFailedException;
 use Drupal\Core\Database\TransactionNameNonUniqueException;
@@ -59,6 +61,14 @@ abstract class TransactionManagerBase implements TransactionManagerInterface {
    */
   private ClientConnectionTransactionState $connectionTransactionState;
 
+  /**
+   * The list of transaction related events.
+   */
+  private array $transactionEvents = [
+    TransactionBeginEvent::class,
+    TransactionSavepointEvent::class,
+  ];
+
   /**
    * Constructor.
    *
@@ -136,6 +146,36 @@ protected function removeStackItem(string $name): void {
     unset($this->stack[$name]);
   }
 
+  /**
+   * Enables transaction events dispatching.
+   *
+   * @param string[] $eventNames
+   *   (Optional) A list of transaction events to be enabled. If left blank,
+   *   all transaction events will be enabled.
+   */
+  public function enableEvents(array $eventNames = []): void {
+    $events = $this->transactionEvents;
+    if (!empty($eventNames)) {
+      $events = array_intersect($events, $eventNames);
+    }
+    $this->connection->enableEvents($events);
+  }
+
+  /**
+   * Disables transaction events dispatching.
+   *
+   * @param string[] $eventNames
+   *   (Optional) A list of transaction events to be disabled. If left blank,
+   *   all transaction events will be disabled.
+   */
+  public function disableEvents(array $eventNames = []): void {
+    $events = $this->transactionEvents;
+    if (!empty($eventNames)) {
+      $events = array_intersect($events, $eventNames);
+    }
+    $this->connection->disableEvents($events);
+  }
+
   /**
    * {@inheritdoc}
    */
@@ -164,6 +204,13 @@ public function push(string $name = ''): Transaction {
 
     // Do the client-level processing.
     if ($this->stackDepth() === 0) {
+      if ($this->connection->isEventEnabled(TransactionBeginEvent::class)) {
+        $this->connection->dispatchEvent(new TransactionBeginEvent(
+          $this->connection->getKey(),
+          $this->connection->getTarget(),
+          $name,
+        ));
+      }
       $this->beginClientTransaction();
       $type = StackItemType::Root;
       $this->setConnectionTransactionState(ClientConnectionTransactionState::Active);
@@ -172,6 +219,14 @@ public function push(string $name = ''): Transaction {
       // If we're already in a Drupal transaction then we want to create a
       // database savepoint, rather than try to begin another database
       // transaction.
+      if ($this->connection->isEventEnabled(TransactionSavepointEvent::class)) {
+        $this->connection->dispatchEvent(new TransactionSavepointEvent(
+          $this->connection->getKey(),
+          $this->connection->getTarget(),
+          $name,
+          array_values($this->stack())[$this->stackDepth() - 1],
+        ));
+      }
       $this->addClientSavepoint($name);
       $type = StackItemType::Savepoint;
     }
diff --git a/core/modules/system/tests/modules/database_test/src/EventSubscriber/DatabaseEventSubscriber.php b/core/modules/system/tests/modules/database_test/src/EventSubscriber/DatabaseEventSubscriber.php
index e35d333fd2..3137411e22 100644
--- a/core/modules/system/tests/modules/database_test/src/EventSubscriber/DatabaseEventSubscriber.php
+++ b/core/modules/system/tests/modules/database_test/src/EventSubscriber/DatabaseEventSubscriber.php
@@ -4,6 +4,8 @@
 
 use Drupal\Core\Database\Event\StatementExecutionEndEvent;
 use Drupal\Core\Database\Event\StatementExecutionStartEvent;
+use Drupal\Core\Database\Event\TransactionBeginEvent;
+use Drupal\Core\Database\Event\TransactionSavepointEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 
 /**
@@ -33,6 +35,8 @@ public static function getSubscribedEvents(): array {
     return [
       StatementExecutionStartEvent::class => 'onStatementExecutionStart',
       StatementExecutionEndEvent::class => 'onStatementExecutionEnd',
+      TransactionBeginEvent::class => 'onTransactionBegin',
+      TransactionSavepointEvent::class => 'onTransactionSavepoint',
     ];
   }
 
@@ -58,4 +62,24 @@ public function onStatementExecutionEnd(StatementExecutionEndEvent $event): void
     $this->countStatementEnds++;
   }
 
+  /**
+   * Subscribes to a TransactionBeginEvent
+   *
+   * @param \Drupal\Core\Database\Event\TransactionBeginEvent $event
+   *   The transaction event.
+   */
+  public function onTransactionBegin(TransactionBeginEvent $event): void {
+    throw new \RuntimeException($event->key . ' ' . $event->target . ' ' . $event->name);
+  }
+
+  /**
+   * Subscribes to a TransactionSavepointEvent
+   *
+   * @param \Drupal\Core\Database\Event\TransactionSavepointEvent $event
+   *   The transaction event.
+   */
+  public function onTransactionSavepoint(TransactionSavepointEvent $event): void {
+    throw new \RuntimeException($event->key . ' ' . $event->target . ' ' . $event->name . ' ' . $event->parentName);
+  }
+
 }
diff --git a/core/tests/Drupal/KernelTests/Core/Database/TransactionEventTest.php b/core/tests/Drupal/KernelTests/Core/Database/TransactionEventTest.php
new file mode 100644
index 0000000000..182e74cb09
--- /dev/null
+++ b/core/tests/Drupal/KernelTests/Core/Database/TransactionEventTest.php
@@ -0,0 +1,42 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\KernelTests\Core\Database;
+
+use Drupal\Core\Database\Event\TransactionBeginEvent;
+
+/**
+ * Tests the Transaction events.
+ *
+ * @group Database
+ */
+class TransactionEventTest extends DatabaseTestBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp(): void {
+    parent::setUp();
+    $this->connection->transactionManager()->enableEvents();
+  }
+
+  /**
+   * Tests transaction beginning.
+   */
+  public function testTransactionBegin(): void {
+    $tx = $this->connection->startTransaction();
+  }
+
+  /**
+   * Tests adding a savepoint.
+   */
+  public function testTransactionSavepoint(): void {
+    $this->connection->transactionManager()->disableEvents([
+      TransactionBeginEvent::class,
+    ]);
+    $tx = $this->connection->startTransaction();
+    $savepoint = $this->connection->startTransaction();
+  }
+
+}
