diff --git a/core/modules/action/tests/src/Functional/ConfigurationTest.php b/core/modules/action/tests/src/Functional/ConfigurationTest.php
index c2f98725..4b8ee5c8 100644
--- a/core/modules/action/tests/src/Functional/ConfigurationTest.php
+++ b/core/modules/action/tests/src/Functional/ConfigurationTest.php
@@ -83,7 +83,7 @@ public function testActionConfiguration() {
     $this->assertSession()->statusCodeEquals(200);
 
     // Make sure that the action was actually deleted.
-    $this->assertRaw(t('The action %action has been deleted.', ['%action' => $new_action_label]));
+    $this->assertRaw("The action $new_action_label has been deleted.");
     $this->drupalGet('admin/config/system/actions');
     $this->assertSession()->statusCodeEquals(200);
     $this->assertNoText($new_action_label, "Make sure the action label does not appear on the overview page after we've deleted the action.");
diff --git a/core/modules/aggregator/tests/src/Functional/AddFeedTest.php b/core/modules/aggregator/tests/src/Functional/AddFeedTest.php
index fea18180..ddddf024 100644
--- a/core/modules/aggregator/tests/src/Functional/AddFeedTest.php
+++ b/core/modules/aggregator/tests/src/Functional/AddFeedTest.php
@@ -46,8 +46,8 @@ public function testAddFeed() {
       'refresh' => '900',
     ];
     $this->drupalPostForm('aggregator/sources/add', $edit, t('Save'));
-    $this->assertRaw(t('A feed named %feed already exists. Enter a unique title.', ['%feed' => $feed->label()]));
-    $this->assertRaw(t('A feed with this URL %url already exists. Enter a unique URL.', ['%url' => $feed->getUrl()]));
+    $this->assertRaw('A feed named ' .  $feed->label() . ' already exists. Enter a unique title.');
+    $this->assertRaw('A feed with this URL ' . $feed->getUrl() . ' already exists. Enter a unique URL.');
 
     // Delete feed.
     $this->deleteFeed($feed);
diff --git a/core/modules/aggregator/tests/src/Functional/AggregatorTestBase.php b/core/modules/aggregator/tests/src/Functional/AggregatorTestBase.php
index a21f1666..4e00c5d4 100644
--- a/core/modules/aggregator/tests/src/Functional/AggregatorTestBase.php
+++ b/core/modules/aggregator/tests/src/Functional/AggregatorTestBase.php
@@ -93,7 +93,7 @@ public function createFeed($feed_url = NULL, array $edit = []) {
    */
   public function deleteFeed(FeedInterface $feed) {
     $this->drupalPostForm('aggregator/sources/' . $feed->id() . '/delete', [], t('Delete'));
-    $this->assertRaw(t('The feed %title has been deleted.', ['%title' => $feed->label()]));
+    $this->assertRaw('The feed ' . $feed->label() . ' has been deleted.');
   }
 
   /**
@@ -213,7 +213,7 @@ public function updateFeedItems(FeedInterface $feed, $expected_count = NULL) {
    */
   public function deleteFeedItems(FeedInterface $feed) {
     $this->drupalPostForm('admin/config/services/aggregator/delete/' . $feed->id(), [], t('Delete items'));
-    $this->assertRaw(t('The news items from %title have been deleted.', ['%title' => $feed->label()]));
+    $this->assertRaw('The news items from ' . $feed->label() . ' have been deleted.');
   }
 
   /**
diff --git a/core/modules/aggregator/tests/src/Functional/FeedParserTest.php b/core/modules/aggregator/tests/src/Functional/FeedParserTest.php
index d945bf6e..2b0bf53a 100644
--- a/core/modules/aggregator/tests/src/Functional/FeedParserTest.php
+++ b/core/modules/aggregator/tests/src/Functional/FeedParserTest.php
@@ -113,7 +113,7 @@ public function testInvalidFeed() {
     // Update the feed. Use the UI to be able to check the message easily.
     $this->drupalGet('admin/config/services/aggregator');
     $this->clickLink(t('Update items'));
-    $this->assertRaw(t('The feed from %title seems to be broken because of error', ['%title' => $feed->label()]));
+    $this->assertRaw('The feed from . ' $feed->label() . ' seems to be broken because of error');
   }
 
 }
diff --git a/core/modules/aggregator/tests/src/Functional/ImportOpmlTest.php b/core/modules/aggregator/tests/src/Functional/ImportOpmlTest.php
index 37aafaa8..4c7db28b 100644
--- a/core/modules/aggregator/tests/src/Functional/ImportOpmlTest.php
+++ b/core/modules/aggregator/tests/src/Functional/ImportOpmlTest.php
@@ -62,7 +62,7 @@ public function validateImportFormFields() {
 
     $edit = [];
     $this->drupalPostForm('admin/config/services/aggregator/add/opml', $edit, t('Import'));
-    $this->assertRaw(t('<em>Either</em> upload a file or enter a URL.'));
+    $this->assertRaw('<em>Either</em> upload a file or enter a URL.');
 
     $path = $this->getEmptyOpml();
     $edit = [
@@ -70,7 +70,7 @@ public function validateImportFormFields() {
       'remote' => file_create_url($path),
     ];
     $this->drupalPostForm('admin/config/services/aggregator/add/opml', $edit, t('Import'));
-    $this->assertRaw(t('<em>Either</em> upload a file or enter a URL.'));
+    $this->assertRaw('<em>Either</em> upload a file or enter a URL.');
 
     $edit = ['remote' => 'invalidUrl://empty'];
     $this->drupalPostForm('admin/config/services/aggregator/add/opml', $edit, t('Import'));
@@ -111,9 +111,9 @@ protected function submitImportForm() {
     ];
     $this->drupalPostForm('admin/config/services/aggregator/add/opml', $edit, t('Import'));
     // Verify that a duplicate URL was identified.
-    $this->assertRaw(t('A feed with the URL %url already exists.', ['%url' => $feeds[0]['url[0][value]']]));
+    $this->assertRaw('A feed with the URL ' . $feeds[0]['url[0][value]'] . ' already exists.');
     // Verify that a duplicate title was identified.
-    $this->assertRaw(t('A feed named %title already exists.', ['%title' => $feeds[1]['title[0][value]']]));
+    $this->assertRaw('A feed named '. $feeds[1]['title[0][value]'] . ' already exists.');
 
     $after = $count_query->execute();
     $this->assertEqual($after, 2, 'Verifying that two distinct feeds were added.');
diff --git a/core/modules/ban/tests/src/Functional/IpAddressBlockingTest.php b/core/modules/ban/tests/src/Functional/IpAddressBlockingTest.php
index 04a9b756..9724ff1e 100644
--- a/core/modules/ban/tests/src/Functional/IpAddressBlockingTest.php
+++ b/core/modules/ban/tests/src/Functional/IpAddressBlockingTest.php
@@ -41,7 +41,7 @@ public function testIPAddressValidation() {
     $this->drupalPostForm('admin/config/people/ban', $edit, t('Add'));
     $ip = $connection->select('ban_ip', 'bi')->fields('bi', ['iid'])->condition('ip', $edit['ip'])->execute()->fetchField();
     $this->assertNotEmpty($ip, 'IP address found in database.');
-    $this->assertRaw(t('The IP address %ip has been banned.', ['%ip' => $edit['ip']]));
+    $this->assertRaw('The IP address 1.2.3.3 has been banned.');
 
     // Try to block an IP address that's already blocked.
     $edit = [];
@@ -72,7 +72,7 @@ public function testIPAddressValidation() {
     $this->drupalPostForm('admin/config/people/ban/' . $submit_ip, [], t('Add'));
     $ip = $connection->select('ban_ip', 'bi')->fields('bi', ['iid'])->condition('ip', $submit_ip)->execute()->fetchField();
     $this->assertNotEmpty($ip, 'IP address found in database');
-    $this->assertRaw(t('The IP address %ip has been banned.', ['%ip' => $submit_ip]));
+    $this->assertRaw("The IP address $submit_ip has been banned.");
 
     // Submit your own IP address. This fails, although it works when testing
     // manually.
diff --git a/core/modules/block/tests/src/Functional/BlockInvalidRegionTest.php b/core/modules/block/tests/src/Functional/BlockInvalidRegionTest.php
index 5a5a09d8..c939bbaf 100644
--- a/core/modules/block/tests/src/Functional/BlockInvalidRegionTest.php
+++ b/core/modules/block/tests/src/Functional/BlockInvalidRegionTest.php
@@ -45,7 +45,7 @@ public function testBlockInInvalidRegion() {
     \Drupal::configFactory()->getEditable('block.block.' . $block->id())->set('region', 'invalid_region')->save();
     $block = Block::load($block->id());
 
-    $warning_message = t('The block %info was assigned to the invalid region %region and has been disabled.', ['%info' => $block->id(), '%region' => 'invalid_region']);
+    $warning_message = 'The block ' . $block->id() . ' was assigned to the invalid region invalid_region and has been disabled.';
 
     // Clearing the cache should disable the test block placed in the invalid region.
     $this->drupalPostForm('admin/config/development/performance', [], 'Clear all caches');
diff --git a/core/modules/block/tests/src/Functional/BlockTest.php b/core/modules/block/tests/src/Functional/BlockTest.php
index a7ab47a4..9edd9dd3 100644
--- a/core/modules/block/tests/src/Functional/BlockTest.php
+++ b/core/modules/block/tests/src/Functional/BlockTest.php
@@ -229,17 +229,17 @@ public function testBlock() {
     // Test deleting the block from the edit form.
     $this->drupalGet('admin/structure/block/manage/' . $block['id']);
     $this->clickLink(t('Remove block'));
-    $this->assertRaw(t('Are you sure you want to remove the block @name?', ['@name' => $block['settings[label]']]));
+    $this->assertRaw('Are you sure you want to remove the block ' . $block['settings[label]'] . '?');
     $this->drupalPostForm(NULL, [], t('Remove'));
-    $this->assertRaw(t('The block %name has been removed.', ['%name' => $block['settings[label]']]));
+    $this->assertRaw('The block ' . $block['settings[label]'] . ' has been removed.');
 
     // Test deleting a block via "Configure block" link.
     $block = $this->drupalPlaceBlock('system_powered_by_block');
     $this->drupalGet('admin/structure/block/manage/' . $block->id(), ['query' => ['destination' => 'admin']]);
     $this->clickLink(t('Remove block'));
-    $this->assertRaw(t('Are you sure you want to remove the block @name?', ['@name' => $block->label()]));
+    $this->assertRaw('Are you sure you want to remove the block ' . $block->label() . '?');
     $this->drupalPostForm(NULL, [], t('Remove'));
-    $this->assertRaw(t('The block %name has been removed.', ['%name' => $block->label()]));
+    $this->assertRaw('The block ' . $block->label() . ' has been removed.');
     $this->assertSession()->addressEquals('admin');
     $this->assertNoRaw($block->id());
   }
diff --git a/core/modules/block_content/tests/src/Functional/BlockContentCreationTest.php b/core/modules/block_content/tests/src/Functional/BlockContentCreationTest.php
index 54dc07e3..280755c1 100644
--- a/core/modules/block_content/tests/src/Functional/BlockContentCreationTest.php
+++ b/core/modules/block_content/tests/src/Functional/BlockContentCreationTest.php
@@ -59,10 +59,7 @@ public function testBlockContentCreation() {
     $this->drupalPostForm('block/add/basic', $edit, t('Save'));
 
     // Check that the Basic block has been created.
-    $this->assertRaw(new FormattableMarkup('@block %name has been created.', [
-      '@block' => 'basic',
-      '%name' => $edit['info[0][value]'],
-    ]));
+    $this->assertRaw('basic ' . $edit['info[0][value]'] . ' has been created.');
 
     // Check that the view mode setting is hidden because only one exists.
     $this->assertNoFieldByXPath('//select[@name="settings[view_mode]"]', NULL, 'View mode setting hidden because only one exists');
@@ -79,9 +76,7 @@ public function testBlockContentCreation() {
     $this->drupalPostForm('block/add/basic', $edit, t('Save'));
 
     // Check that the Basic block has been created.
-    $this->assertRaw(new FormattableMarkup('A custom block with block description %value already exists.', [
-      '%value' => $edit['info[0][value]'],
-    ]));
+    $this->assertRaw('A custom block with block description ' . $edit['info[0][value]'] . ' already exists.');
     $this->assertSession()->statusCodeEquals(200);
   }
 
@@ -97,7 +92,7 @@ public function testBlockContentCreationMultipleViewModes() {
       'label' => 'Test View Mode',
     ];
     $this->drupalPostForm(NULL, $edit, t('Save'));
-    $this->assertRaw(t('Saved the %label view mode.', ['%label' => $edit['label']]));
+    $this->assertRaw('Saved the ' . $edit['label'] . ' view mode.');
 
     $this->drupalLogin($this->adminUser);
 
@@ -108,10 +103,7 @@ public function testBlockContentCreationMultipleViewModes() {
     $this->drupalPostForm('block/add/basic', $edit, t('Save'));
 
     // Check that the Basic block has been created.
-    $this->assertRaw(new FormattableMarkup('@block %name has been created.', [
-      '@block' => 'basic',
-      '%name' => $edit['info[0][value]'],
-    ]));
+    $this->assertRaw('basic ' . $edit['info[0][value]'] . ' has been created.');
 
     // Save our block permanently
     $this->drupalPostForm(NULL, ['region' => 'content'], t('Save block'));
@@ -163,9 +155,7 @@ public function testBlockContentCreationMultipleViewModes() {
     $this->drupalPostForm('block/add/basic', $edit, t('Save'));
 
     // Check that the Basic block has been created.
-    $this->assertRaw(new FormattableMarkup('A custom block with block description %value already exists.', [
-      '%value' => $edit['info[0][value]'],
-    ]));
+    $this->assertRaw('A custom block with block description ' . $edit['info[0][value]'] . ' already exists.');
     $this->assertSession()->statusCodeEquals(200);
   }
 
@@ -183,10 +173,7 @@ public function testDefaultBlockContentCreation() {
     $this->drupalPostForm('block/add', $edit, t('Save'));
 
     // Check that the block has been created and that it is a basic block.
-    $this->assertRaw(new FormattableMarkup('@block %name has been created.', [
-      '@block' => 'basic',
-      '%name' => $edit['info[0][value]'],
-    ]));
+    $this->assertRaw('basic ' . $edit['info[0][value]'] . ' has been created.');
 
     // Check that the block exists in the database.
     $blocks = \Drupal::entityTypeManager()
@@ -255,7 +242,7 @@ public function testBlockDelete() {
     $this->assertText(\Drupal::translation()->formatPlural(1, 'This will also remove 1 placed block instance.', 'This will also remove @count placed block instance.'));
 
     $this->drupalPostForm(NULL, [], 'Delete');
-    $this->assertRaw(t('The custom block %name has been deleted.', ['%name' => $edit['info[0][value]']]));
+    $this->assertRaw('The custom block ' . $edit['info[0][value]'] . ' has been deleted.');
 
     // Create another block and force the plugin cache to flush.
     $edit2 = [];
diff --git a/core/modules/block_content/tests/src/Functional/BlockContentPageViewTest.php b/core/modules/block_content/tests/src/Functional/BlockContentPageViewTest.php
index b2111370..76f5fb54 100644
--- a/core/modules/block_content/tests/src/Functional/BlockContentPageViewTest.php
+++ b/core/modules/block_content/tests/src/Functional/BlockContentPageViewTest.php
@@ -34,7 +34,7 @@ public function testPageEdit() {
     // Ensure user was able to view the block.
     $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet('<front>');
-    $this->assertRaw(t('This block is broken or missing. You may be missing content or you might need to enable the original module.'));
+    $this->assertRaw('This block is broken or missing. You may be missing content or you might need to enable the original module.');
   }
 
 }
diff --git a/core/modules/block_content/tests/src/Functional/BlockContentTranslationUITest.php b/core/modules/block_content/tests/src/Functional/BlockContentTranslationUITest.php
index 3d765ac9..69164750 100644
--- a/core/modules/block_content/tests/src/Functional/BlockContentTranslationUITest.php
+++ b/core/modules/block_content/tests/src/Functional/BlockContentTranslationUITest.php
@@ -151,7 +151,7 @@ protected function doTestTranslationEdit() {
           '@title' => $entity->getTranslation($langcode)->label(),
           '%language' => $languages[$langcode]->getName(),
         ]);
-        $this->assertRaw($title);
+        $this->assertRaw((string) $title);
       }
     }
   }
diff --git a/core/modules/block_content/tests/src/Functional/BlockContentTypeTest.php b/core/modules/block_content/tests/src/Functional/BlockContentTypeTest.php
index e064f7a8..5bb386ed 100644
--- a/core/modules/block_content/tests/src/Functional/BlockContentTypeTest.php
+++ b/core/modules/block_content/tests/src/Functional/BlockContentTypeTest.php
@@ -162,18 +162,14 @@ public function testBlockContentTypeDeletion() {
     $block = $this->createBlockContent(FALSE, 'foo');
     // Attempt to delete the block type, which should not be allowed.
     $this->drupalGet('admin/structure/block/block-content/manage/' . $type->id() . '/delete');
-    $this->assertRaw(
-      t('%label is used by 1 custom block on your site. You can not remove this block type until you have removed all of the %label blocks.', ['%label' => $type->label()])
-    );
+    $this->assertRaw($type->label() . ' is used by 1 custom block on your site. You can not remove this block type until you have removed all of the ' . $type->label() . ' blocks.');
     $this->assertNoText('This action cannot be undone.', 'The block type deletion confirmation form is not available.');
 
     // Delete the block.
     $block->delete();
     // Attempt to delete the block type, which should now be allowed.
     $this->drupalGet('admin/structure/block/block-content/manage/' . $type->id() . '/delete');
-    $this->assertRaw(
-      t('Are you sure you want to delete the custom block type %type?', ['%type' => $type->id()])
-    );
+    $this->assertRaw('Are you sure you want to delete the custom block type ' . $type->id() . '?');
     $this->assertText(t('This action cannot be undone.'), 'The custom block type deletion confirmation form is available.');
   }
 
diff --git a/core/tests/Drupal/FunctionalTests/AssertLegacyTrait.php b/core/tests/Drupal/FunctionalTests/AssertLegacyTrait.php
index 47911332..d55f3d15 100644
--- a/core/tests/Drupal/FunctionalTests/AssertLegacyTrait.php
+++ b/core/tests/Drupal/FunctionalTests/AssertLegacyTrait.php
@@ -367,6 +367,9 @@ protected function assertRaw($raw) {
     if (func_num_args() > 1) {
       @trigger_error('Calling AssertLegacyTrait::assertRaw() with more that one argument is deprecated in drupal:8.2.0 and the method is removed from drupal:10.0.0. Use $this->assertSession()->responseContains() instead. See https://www.drupal.org/node/3129738', E_USER_DEPRECATED);
     }
+    if (is_object($raw)) {
+      @trigger_error('Passing MarkupInterface objects to AssertLegacyTrait::assertRaw() is deprecated in drupal:9.1.0 and the method is removed from drupal:10.0.0. Use $this->assertSession()->responseContains() instead. See https://www.drupal.org/node/3129738', E_USER_DEPRECATED);
+    }
     $this->assertSession()->responseContains($raw);
   }
 
@@ -388,6 +391,9 @@ protected function assertNoRaw($raw) {
     if (func_num_args() > 1) {
       @trigger_error('Calling AssertLegacyTrait::assertNoRaw() with more that one argument is deprecated in drupal:8.2.0 and the method is removed from drupal:10.0.0. Use $this->assertSession()->responseContains() instead. See https://www.drupal.org/node/3129738', E_USER_DEPRECATED);
     }
+    if (is_object($raw)) {
+      @trigger_error('Passing MarkupInterface objects to AssertLegacyTrait::assertNoRaw() is deprecated in drupal:9.1.0 and the method is removed from drupal:10.0.0. Use $this->assertSession()->responseNotContains() instead. See https://www.drupal.org/node/3129738', E_USER_DEPRECATED);
+    }
     $this->assertSession()->responseNotContains($raw);
   }
 
