diff --git a/core/lib/Drupal/Core/Database/StatementWrapper.php b/core/lib/Drupal/Core/Database/StatementWrapper.php
index 8a3bc208c5..ed6b7513f0 100644
--- a/core/lib/Drupal/Core/Database/StatementWrapper.php
+++ b/core/lib/Drupal/Core/Database/StatementWrapper.php
@@ -7,7 +7,7 @@
 /**
  * Implementation of StatementInterface encapsulating PDOStatement.
  */
-class StatementWrapper implements \IteratorAggregate, StatementInterface {
+class StatementWrapper implements \Iterator, StatementInterface {
 
   /**
    * The Drupal database connection object.
@@ -32,6 +32,27 @@ class StatementWrapper implements \IteratorAggregate, StatementInterface {
    */
   protected $rowCountEnabled = FALSE;
 
+  /**
+   * Validity of the last execution of the statement.
+   *
+   * @var bool
+   */
+  protected bool $currentExecution = FALSE;
+
+  /**
+   * The current row, retrieved in the current fetch format.
+   *
+   * @var mixed
+   */
+  protected mixed $currentRow = NULL;
+
+  /**
+   * The key of the current row.
+   *
+   * @var int|null
+   */
+  protected ?int $currentKey = NULL;
+
   /**
    * Constructs a StatementWrapper object.
    *
@@ -76,6 +97,9 @@ public function getConnectionTarget(): string {
    * {@inheritdoc}
    */
   public function execute($args = [], $options = []) {
+    $this->currentRow = NULL;
+    $this->currentKey = NULL;
+
     if (isset($options['fetch'])) {
       if (is_string($options['fetch'])) {
         // \PDO::FETCH_PROPS_LATE tells __construct() to run before properties
@@ -92,14 +116,14 @@ public function execute($args = [], $options = []) {
       $query_start = microtime(TRUE);
     }
 
-    $return = $this->clientStatement->execute($args);
+    $this->currentExecution = $this->clientStatement->execute($args);
 
     if (!empty($logger)) {
       $query_end = microtime(TRUE);
       $logger->log($this, $args, $query_end - $query_start, $query_start);
     }
 
-    return $return;
+    return $this->currentExecution;
   }
 
   /**
@@ -154,15 +178,14 @@ public function fetchAllKeyed($key_index = 0, $value_index = 1) {
    * {@inheritdoc}
    */
   public function fetchField($index = 0) {
-    // Call \PDOStatement::fetchColumn to fetch the field.
-    return $this->clientStatement->fetchColumn($index);
+    $ret = $this->fetch(\PDO::FETCH_NUM);
+    return $ret === FALSE ? FALSE : ($ret[$index] ?? NULL);
   }
 
   /**
    * {@inheritdoc}
    */
   public function fetchAssoc() {
-    // Call \PDOStatement::fetch to fetch the row.
     return $this->fetch(\PDO::FETCH_ASSOC);
   }
 
@@ -170,10 +193,26 @@ public function fetchAssoc() {
    * {@inheritdoc}
    */
   public function fetchObject(string $class_name = NULL, array $constructor_arguments = NULL) {
+global $xxx;
     if ($class_name) {
-      return $this->clientStatement->fetchObject($class_name, $constructor_arguments);
+      $this->currentRow = $this->clientStatement->fetchObject($class_name, $constructor_arguments);
+if($xxx) dump(['class', $class_name, $constructor_arguments, $this->currentRow]);
     }
-    return $this->clientStatement->fetchObject();
+    else {
+      $this->currentRow = $this->clientStatement->fetchObject();
+if($xxx) dump(['no class', $class_name, $constructor_arguments, $this->currentRow]);
+    }
+
+    if ($this->currentRow) {
+      $this->currentKey = $this->currentKey === NULL ? 0 : $this->currentKey++;
+    }
+    else {
+      $this->currentExecution = FALSE;
+      $this->currentRow = NULL;
+      $this->currentKey = NULL;
+    }
+
+    return $this->currentRow;
   }
 
   /**
@@ -215,27 +254,46 @@ public function setFetchMode($mode, $a1 = NULL, $a2 = []) {
   public function fetch($mode = NULL, $cursor_orientation = NULL, $cursor_offset = NULL) {
     // Call \PDOStatement::fetchAll to fetch all rows.
     // \PDOStatement is picky about the number of arguments in some cases so we
-    // need to be pass the exact number of arguments we where given.
+    // need to pass the exact number of arguments we were given.
     switch (func_num_args()) {
       case 0:
-        return $this->clientStatement->fetch();
+        $this->currentRow = $this->clientStatement->fetch();
+        break;
 
       case 1:
-        return $this->clientStatement->fetch($mode);
+        $this->currentRow = $this->clientStatement->fetch($mode);
+        break;
 
       case 2:
-        return $this->clientStatement->fetch($mode, $cursor_orientation);
+        $this->currentRow = $this->clientStatement->fetch($mode, $cursor_orientation);
+        break;
 
       case 3:
       default:
-        return $this->clientStatement->fetch($mode, $cursor_orientation, $cursor_offset);
+        $this->currentRow = $this->clientStatement->fetch($mode, $cursor_orientation, $cursor_offset);
+        break;
     }
+
+    if ($this->currentRow) {
+      $this->currentKey = $this->currentKey === NULL ? 0 : $this->currentKey++;
+    }
+    else {
+      $this->currentExecution = FALSE;
+      $this->currentRow = NULL;
+      $this->currentKey = NULL;
+    }
+
+    return $this->currentRow;
   }
 
   /**
    * {@inheritdoc}
    */
   public function fetchAll($mode = NULL, $column_index = NULL, $constructor_arguments = NULL) {
+    $this->currentExecution = FALSE;
+    $this->currentRow = NULL;
+    $this->currentKey = NULL;
+
     // Call \PDOStatement::fetchAll to fetch all rows.
     // \PDOStatement is picky about the number of arguments in some cases so we
     // need to be pass the exact number of arguments we where given.
@@ -256,11 +314,62 @@ public function fetchAll($mode = NULL, $column_index = NULL, $constructor_argume
   }
 
   /**
-   * {@inheritdoc}
+   * @deprecated in drupal:9.4.0 and is removed from drupal:10.0.0. There is
+   *   no replacement.
+   *
+   * @see https://www.drupal.org/node/7654321
    */
-  #[\ReturnTypeWillChange]
   public function getIterator() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:9.4.0 and is removed from drupal:10.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     return new \ArrayIterator($this->fetchAll());
   }
 
+  /**
+   * {@inheritdoc}
+   *
+   * @internal This method should not be called directly.
+   */
+  public function current(): mixed {
+    if ($this->currentExecution && $this->currentKey === NULL) {
+      $this->fetch();
+    }
+    return $this->currentRow;
+  }
+
+  /**
+   * {@inheritdoc}
+   *
+   * @internal This method should not be called directly.
+   */
+  public function key(): mixed {
+    return $this->currentKey;
+  }
+
+  /**
+   * {@inheritdoc}
+   *
+   * @internal This method should not be called directly.
+   */
+  public function rewind(): void {
+    // Nothing to do: our DatabaseStatement can't be rewound.
+  }
+
+  /**
+   * {@inheritdoc}
+   *
+   * @internal This method should not be called directly.
+   */
+  public function next(): void {
+    $this->fetch();
+  }
+
+  /**
+   * {@inheritdoc}
+   *
+   * @internal This method should not be called directly.
+   */
+  public function valid(): bool {
+    return $this->currentExecution;
+  }
+
 }
diff --git a/core/tests/Drupal/KernelTests/Core/Database/FetchTest.php b/core/tests/Drupal/KernelTests/Core/Database/FetchTest.php
index c692fa56f5..1129cdf5d0 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/FetchTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/FetchTest.php
@@ -86,6 +86,7 @@ public function testQueryFetchClass() {
    * @see \Drupal\Core\Database\StatementPrefetch::fetchObject
    */
   public function testQueryFetchObjectClass() {
+global $xxx; $xxx=TRUE;
     $records = 0;
     $query = $this->connection->query('SELECT [name] FROM {test} WHERE [age] = :age', [':age' => 25]);
     while ($result = $query->fetchObject(FakeRecord::class, [1])) {
@@ -95,6 +96,7 @@ public function testQueryFetchObjectClass() {
       $this->assertSame(1, $result->fakeArg, 'The record has received an argument through its constructor.');
     }
     $this->assertSame(1, $records, 'There is only one record.');
+$xxx=FALSE;
   }
 
   /**
