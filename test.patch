diff --git a/composer.json b/composer.json
index 61c5d3735a..48a914793b 100644
--- a/composer.json
+++ b/composer.json
@@ -105,6 +105,11 @@
             "Drupal\\Composer\\": "composer"
         }
     },
+    "autoload-dev": {
+        "psr-4": {
+            "Drupal\\PHPStan\\": "core/tests/PHPStan"
+        }
+    },
     "scripts": {
         "pre-install-cmd": "Drupal\\Composer\\Composer::ensureComposerVersion",
         "pre-update-cmd": "Drupal\\Composer\\Composer::ensureComposerVersion",
diff --git a/core/lib/Drupal/Core/Config/Plugin/Validation/Constraint/LangcodeRequiredIfTranslatableValuesConstraintValidator.php b/core/lib/Drupal/Core/Config/Plugin/Validation/Constraint/LangcodeRequiredIfTranslatableValuesConstraintValidator.php
index 89a45e7b18..b6b3dbe9e0 100644
--- a/core/lib/Drupal/Core/Config/Plugin/Validation/Constraint/LangcodeRequiredIfTranslatableValuesConstraintValidator.php
+++ b/core/lib/Drupal/Core/Config/Plugin/Validation/Constraint/LangcodeRequiredIfTranslatableValuesConstraintValidator.php
@@ -17,7 +17,7 @@ final class LangcodeRequiredIfTranslatableValuesConstraintValidator extends Cons
   /**
    * {@inheritdoc}
    */
-  public function validate(mixed $value, Constraint $constraint): void {
+  public function validate(mixed $value, Constraint $constraint) {
     assert($constraint instanceof LangcodeRequiredIfTranslatableValuesConstraint);
 
     $mapping = $this->context->getObject();
diff --git a/core/misc/cspell/dictionary.txt b/core/misc/cspell/dictionary.txt
index 1a46815d4a..1289ee0829 100644
--- a/core/misc/cspell/dictionary.txt
+++ b/core/misc/cspell/dictionary.txt
@@ -10,6 +10,7 @@ ajaxing
 allwords
 alphadecimal
 ampm
+analyse
 anyall
 archiver
 archivers
diff --git a/core/modules/comment/tests/src/Functional/CommentStatisticsTest.php b/core/modules/comment/tests/src/Functional/CommentStatisticsTest.php
index 9a309f16e0..64ccf1d2b3 100644
--- a/core/modules/comment/tests/src/Functional/CommentStatisticsTest.php
+++ b/core/modules/comment/tests/src/Functional/CommentStatisticsTest.php
@@ -15,6 +15,14 @@
  */
 class CommentStatisticsTest extends CommentTestBase {
 
+  /**
+   * {@inheritdoc}
+   *
+   * @todo Remove and fix test to not rely on super user.
+   * @see https://www.drupal.org/project/drupal/issues/3437620
+   */
+  protected bool $usesSuperUserAccessPolicy = TRUE;
+
   /**
    * A secondary user for posting comments.
    *
@@ -33,17 +41,12 @@ class CommentStatisticsTest extends CommentTestBase {
   protected function setUp(): void {
     parent::setUp();
 
-    // Add more permissions the admin user.
-    $this->adminUser->addRole($this->drupalCreateRole([
-      'administer permissions',
-      'access administration pages',
-      'administer site configuration',
-    ]))->save();
     // Create a second user to post comments.
     $this->webUser2 = $this->drupalCreateUser([
       'post comments',
       'create article content',
       'edit own comments',
+      'post comments',
       'skip comment approval',
       'access comments',
       'access content',
@@ -85,8 +88,7 @@ public function testCommentNodeCommentStatistics() {
     // Prepare for anonymous comment submission (comment approval enabled).
     // Note we don't use user_role_change_permissions(), because that caused
     // random test failures.
-    $this->drupalLogin($this->adminUser);
-
+    $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin/people/permissions');
     $edit = [
       'anonymous[access comments]' => 1,
@@ -115,7 +117,7 @@ public function testCommentNodeCommentStatistics() {
     // Prepare for anonymous comment submission (no approval required).
     // Note we don't use user_role_change_permissions(), because that caused
     // random test failures.
-    $this->drupalLogin($this->adminUser);
+    $this->drupalLogin($this->rootUser);
     $this->drupalGet('admin/people/permissions');
     $edit = [
       'anonymous[skip comment approval]' => 1,
diff --git a/core/phpstan.neon.dist b/core/phpstan.neon.dist
index 17c3970c21..073baf8af6 100644
--- a/core/phpstan.neon.dist
+++ b/core/phpstan.neon.dist
@@ -44,3 +44,6 @@ parameters:
     - "#Drupal calls should be avoided in classes, use dependency injection instead#"
     - "#^Plugin definitions cannot be altered.#"
     - "#^Class .* extends @internal class#"
+
+rules:
+  - Drupal\PHPStan\Rules\ComponentTestDoesNotExtendCoreTest
diff --git a/core/tests/Drupal/Tests/Listeners/DrupalComponentTestListenerTrait.php b/core/tests/Drupal/Tests/Listeners/DrupalComponentTestListenerTrait.php
deleted file mode 100644
index 90a5638e2d..0000000000
--- a/core/tests/Drupal/Tests/Listeners/DrupalComponentTestListenerTrait.php
+++ /dev/null
@@ -1,37 +0,0 @@
-<?php
-
-declare(strict_types=1);
-
-namespace Drupal\Tests\Listeners;
-
-use Drupal\KernelTests\KernelTestBase;
-use Drupal\Tests\BrowserTestBase;
-use Drupal\Tests\UnitTestCase;
-use PHPUnit\Framework\AssertionFailedError;
-
-/**
- * Ensures that no component tests are extending a core test base class.
- *
- * @internal
- */
-trait DrupalComponentTestListenerTrait {
-
-  /**
-   * Reacts to the end of a test.
-   *
-   * @param \PHPUnit\Framework\Test $test
-   *   The test object that has ended its test run.
-   * @param float $time
-   *   The time the test took.
-   */
-  protected function componentEndTest($test, $time) {
-    /** @var \PHPUnit\Framework\Test $test */
-    if (str_starts_with($test->toString(), 'Drupal\Tests\Component')) {
-      if ($test instanceof BrowserTestBase || $test instanceof KernelTestBase || $test instanceof UnitTestCase) {
-        $error = new AssertionFailedError('Component tests should not extend a core test base class.');
-        $test->getTestResultObject()->addFailure($test, $error, $time);
-      }
-    }
-  }
-
-}
diff --git a/core/tests/Drupal/Tests/Listeners/DrupalListener.php b/core/tests/Drupal/Tests/Listeners/DrupalListener.php
index 182e4fe4e7..26fa1e5001 100644
--- a/core/tests/Drupal/Tests/Listeners/DrupalListener.php
+++ b/core/tests/Drupal/Tests/Listeners/DrupalListener.php
@@ -18,7 +18,6 @@
 class DrupalListener implements TestListener {
 
   use TestListenerDefaultImplementation;
-  use DrupalComponentTestListenerTrait;
 
   /**
    * The wrapped Symfony test listener.
@@ -60,7 +59,6 @@ public function startTest(Test $test): void {
    */
   public function endTest(Test $test, float $time): void {
     $this->symfonyListener->endTest($test, $time);
-    $this->componentEndTest($test, $time);
   }
 
 }
diff --git a/core/tests/Drupal/Tests/PHPStan/Rules/ComponentTestDoesNotExtendCoreTestTest.php b/core/tests/Drupal/Tests/PHPStan/Rules/ComponentTestDoesNotExtendCoreTestTest.php
new file mode 100644
index 0000000000..480acc1c9e
--- /dev/null
+++ b/core/tests/Drupal/Tests/PHPStan/Rules/ComponentTestDoesNotExtendCoreTestTest.php
@@ -0,0 +1,34 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Tests\PHPStan\Rules;
+
+use Drupal\PHPStan\Rules\ComponentTestDoesNotExtendCoreTest;
+use PHPStan\Rules\Rule;
+use PHPStan\Testing\RuleTestCase;
+
+/**
+ * Tests ComponentTestDoesNotExtendCoreTest rule.
+ *
+ * @group phpstan
+ */
+class ComponentTestDoesNotExtendCoreTestTest extends RuleTestCase {
+
+  protected function getRule(): Rule {
+    return new ComponentTestDoesNotExtendCoreTest();
+  }
+
+  public function testRule(): void {
+    $this->analyse(
+      [__DIR__ . '../../../../fixtures/PHPStan/component-tests.php'],
+      [
+        [
+          'Component tests should not extend a core test base class.',
+          16,
+        ],
+      ]
+    );
+  }
+
+}
diff --git a/core/tests/PHPStan/Rules/ComponentTestDoesNotExtendCoreTest.php b/core/tests/PHPStan/Rules/ComponentTestDoesNotExtendCoreTest.php
new file mode 100644
index 0000000000..e472d501be
--- /dev/null
+++ b/core/tests/PHPStan/Rules/ComponentTestDoesNotExtendCoreTest.php
@@ -0,0 +1,50 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\PHPStan\Rules;
+
+use PhpParser\Node;
+use PhpParser\Node\Stmt\Class_;
+use PHPStan\Analyser\Scope;
+use PHPStan\Rules\Rule;
+use PHPStan\Rules\RuleErrorBuilder;
+
+/**
+ * Ensures that no component tests are extending a core test base class.
+ *
+ * @implements Rule<\PhpParser\Node\Stmt\Class_>
+ *
+ * @internal
+ */
+final class ComponentTestDoesNotExtendCoreTest implements Rule {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getNodeType(): string {
+    return Class_::class;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function processNode(Node $node, Scope $scope): array {
+    if ($node->extends === NULL || $node->namespacedName === NULL) {
+      return [];
+    }
+    if (!str_starts_with($node->namespacedName->toString(), 'Drupal\Tests\Component')) {
+      return [];
+    }
+    if (str_starts_with($node->extends->toString(), 'Drupal\Tests\Core')) {
+      return [
+        RuleErrorBuilder::message('Component tests should not extend a core test base class.')
+          ->line($node->getStartLine())
+          ->build(),
+      ];
+    }
+
+    return [];
+  }
+
+}
diff --git a/core/tests/fixtures/PHPStan/component-tests.php b/core/tests/fixtures/PHPStan/component-tests.php
new file mode 100644
index 0000000000..4e5ca03cd1
--- /dev/null
+++ b/core/tests/fixtures/PHPStan/component-tests.php
@@ -0,0 +1,26 @@
+<?php
+
+// phpcs:ignoreFile
+
+declare(strict_types=1);
+
+namespace Drupal\Tests\Core\Foo;
+
+use PHPUnit\Framework\TestCase;
+
+abstract class FooTestBase extends TestCase {
+
+}
+
+namespace Drupal\Tests\Component\Foo;
+
+use Drupal\Example\Something\TestCase;
+use Drupal\Tests\Core\Foo\FooTestBase;
+
+final class FooTest extends FooTestBase {
+
+}
+
+final class BarTest extends TestCase {
+
+}
diff --git a/core/themes/claro/claro.info.yml b/core/themes/claro/claro.info.yml
index dc9b06eada..a6e78d5e9f 100644
--- a/core/themes/claro/claro.info.yml
+++ b/core/themes/claro/claro.info.yml
@@ -152,7 +152,6 @@ libraries-extend:
     - claro/drupal.node.preview
   views/views.module:
     - claro/views
-    - claro/views_ui
   media/media_embed_ckeditor_theme:
     - claro/classy.media_embed_ckeditor_theme
   media_library/ui:
diff --git a/core/themes/claro/claro.libraries.yml b/core/themes/claro/claro.libraries.yml
index a4eb33cc63..3a16437d1a 100644
--- a/core/themes/claro/claro.libraries.yml
+++ b/core/themes/claro/claro.libraries.yml
@@ -56,6 +56,7 @@ global-styling:
       css/components/system-status-counter.css: {}
       css/components/tableselect.css: {}
       css/components/tabs.css: {}
+      css/components/views-ui.css: {}
     theme:
       css/theme/colors.css: {}
     layout:
@@ -230,18 +231,6 @@ views:
     component:
       css/components/views-exposed-form.css: {}
 
-views_ui:
-  css:
-    component:
-      css/components/views-ui.css: {}
-  moved_files:
-    claro/global-styling:
-      deprecation_version: 10.3.0
-      removed_version: 11.0.0
-      deprecation_link: https://www.drupal.org/node/3432346
-      css:
-        component: 'css/components/views-ui.css'
-
 messages:
   js:
     js/messages.js: {}
diff --git a/core/themes/olivero/config/install/olivero.settings.yml b/core/themes/olivero/config/install/olivero.settings.yml
index a4248de13b..1e5d0344db 100644
--- a/core/themes/olivero/config/install/olivero.settings.yml
+++ b/core/themes/olivero/config/install/olivero.settings.yml
@@ -13,4 +13,3 @@ third_party_settings:
 mobile_menu_all_widths: 0
 site_branding_bg_color: default
 base_primary_color: '#1b9ae4'
-comment_form_position: 0
diff --git a/core/themes/olivero/config/schema/olivero.schema.yml b/core/themes/olivero/config/schema/olivero.schema.yml
index aa72e00ffe..0bd946db28 100644
--- a/core/themes/olivero/config/schema/olivero.schema.yml
+++ b/core/themes/olivero/config/schema/olivero.schema.yml
@@ -38,6 +38,3 @@ olivero.settings:
     base_primary_color:
       type: color_hex
       label: 'Base Primary Color'
-    comment_form_position:
-      type: integer
-      label: 'Comment form position'
diff --git a/core/themes/olivero/olivero.post_update.php b/core/themes/olivero/olivero.post_update.php
index a727226838..f033945e02 100644
--- a/core/themes/olivero/olivero.post_update.php
+++ b/core/themes/olivero/olivero.post_update.php
@@ -13,12 +13,3 @@ function olivero_post_update_add_olivero_primary_color() {
     ->set('base_primary_color', '#1b9ae4')
     ->save();
 }
-
-/**
- * Sets the `comment_form_position` value of Olivero's theme settings.
- */
-function olivero_post_update_add_comment_form_position() {
-  \Drupal::configFactory()->getEditable('olivero.settings')
-    ->set('comment_form_position', 0)
-    ->save(TRUE);
-}
diff --git a/core/themes/olivero/olivero.theme b/core/themes/olivero/olivero.theme
index c502d98c76..6d4aa96bb0 100644
--- a/core/themes/olivero/olivero.theme
+++ b/core/themes/olivero/olivero.theme
@@ -540,8 +540,6 @@ function olivero_preprocess_field__comment(&$variables) {
 
     $variables['#cache']['contexts'][] = 'user';
   }
-
-  $variables['comment_form_position'] = theme_get_setting('comment_form_position');
 }
 
 /**
diff --git a/core/themes/olivero/templates/field/field--comment.html.twig b/core/themes/olivero/templates/field/field--comment.html.twig
index 9a07538eee..c69553cea3 100644
--- a/core/themes/olivero/templates/field/field--comment.html.twig
+++ b/core/themes/olivero/templates/field/field--comment.html.twig
@@ -42,10 +42,6 @@
     {{ title_suffix }}
   {% endif %}
 
-  {% if comment_form_position %}
-    {{ comments }}
-  {% endif %}
-
   {% if comment_form %}
     <div class="add-comment">
       {% if user_picture %}
@@ -61,8 +57,6 @@
     </div>
   {% endif %}
 
-  {% if not comment_form_position %}
-    {{ comments }}
-  {% endif %}
+  {{ comments }}
 
 </section>
diff --git a/core/themes/olivero/theme-settings.php b/core/themes/olivero/theme-settings.php
index 805261e329..849df4c11d 100644
--- a/core/themes/olivero/theme-settings.php
+++ b/core/themes/olivero/theme-settings.php
@@ -117,14 +117,4 @@ function olivero_form_system_theme_settings_alter(&$form, FormStateInterface $fo
       ],
     ];
   }
-
-  $form['olivero_settings']['olivero_utilities']['comment_form_position'] = [
-    '#type' => 'radios',
-    '#title' => t('Comment form position'),
-    '#options' => [
-      0 => t('Before comments'),
-      1 => t('After comments'),
-    ],
-    '#default_value' => theme_get_setting('comment_form_position'),
-  ];
 }
