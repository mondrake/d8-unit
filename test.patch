diff --git a/core/lib/Drupal/Core/Database/Event/SchemaIndexDefinitionEvent.php b/core/lib/Drupal/Core/Database/Event/SchemaIndexDefinitionEvent.php
new file mode 100644
index 0000000000..a90f35acc0
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Event/SchemaIndexDefinitionEvent.php
@@ -0,0 +1,21 @@
+<?php
+
+namespace Drupal\Core\Database\Event;
+
+use Drupal\Core\Database\Schema\Index;
+
+/**
+ * @todo
+ */
+class SchemaIndexDefinitionEvent extends DatabaseEvent {
+
+  /**
+   * Constructor.
+   */
+  public function __construct(
+    public readonly Index $index,
+  ) {
+    parent::__construct();
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/Event/SchemaKeyColumnDefinitionEvent.php b/core/lib/Drupal/Core/Database/Event/SchemaKeyColumnDefinitionEvent.php
new file mode 100644
index 0000000000..fd23d0fa15
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Event/SchemaKeyColumnDefinitionEvent.php
@@ -0,0 +1,21 @@
+<?php
+
+namespace Drupal\Core\Database\Event;
+
+use Drupal\Core\Database\Schema\KeyColumn;
+
+/**
+ * @todo
+ */
+class SchemaKeyColumnDefinitionEvent extends DatabaseEvent {
+
+  /**
+   * Constructor.
+   */
+  public function __construct(
+    public readonly KeyColumn $keyColumn,
+  ) {
+    parent::__construct();
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/Event/SchemaPrimaryKeyDefinitionEvent.php b/core/lib/Drupal/Core/Database/Event/SchemaPrimaryKeyDefinitionEvent.php
new file mode 100644
index 0000000000..3b0046a3a9
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Event/SchemaPrimaryKeyDefinitionEvent.php
@@ -0,0 +1,21 @@
+<?php
+
+namespace Drupal\Core\Database\Event;
+
+use Drupal\Core\Database\Schema\PrimaryKey;
+
+/**
+ * @todo
+ */
+class SchemaPrimaryKeyDefinitionEvent extends DatabaseEvent {
+
+  /**
+   * Constructor.
+   */
+  public function __construct(
+    public readonly PrimaryKey $primaryKey,
+  ) {
+    parent::__construct();
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/Schema.php b/core/lib/Drupal/Core/Database/Schema.php
index 9530c8fbf8..415abba23c 100644
--- a/core/lib/Drupal/Core/Database/Schema.php
+++ b/core/lib/Drupal/Core/Database/Schema.php
@@ -2,13 +2,20 @@
 
 namespace Drupal\Core\Database;
 
+use Drupal\Core\Database\Event\SchemaKeyColumnDefinitionEvent;
+use Drupal\Core\Database\Event\SchemaIndexDefinitionEvent;
+use Drupal\Core\Database\Event\SchemaPrimaryKeyDefinitionEvent;
 use Drupal\Core\Database\Query\PlaceholderInterface;
+use Drupal\Core\Database\Schema\Table;
+use Drupal\Core\Database\SchemaDefinition\ConvertDefinitionTrait;
 
 /**
  * Provides a base implementation for Database Schema.
  */
 abstract class Schema implements PlaceholderInterface {
 
+  use ConvertDefinitionTrait;
+
   /**
    * The database connection.
    *
@@ -46,6 +53,11 @@ abstract class Schema implements PlaceholderInterface {
   public function __construct($connection) {
     $this->uniqueIdentifier = uniqid('', TRUE);
     $this->connection = $connection;
+    $this->connection->enableEvents([
+      SchemaKeyColumnDefinitionEvent::class,
+      SchemaIndexDefinitionEvent::class,
+      SchemaPrimaryKeyDefinitionEvent::class,
+    ]);
   }
 
   /**
@@ -614,7 +626,10 @@ public function createTable($name, $table) {
     if ($this->tableExists($name)) {
       throw new SchemaObjectExistsException("Table '$name' already exists.");
     }
+    $tableDefinition = $this->convertTableToSchemaDefinition($table);
+    $table = new Table($name, $tableDefinition);
     $statements = $this->createTableSql($name, $table);
+dump([__METHOD__, $statements]);
     foreach ($statements as $statement) {
       $this->connection->query($statement);
     }
@@ -627,7 +642,7 @@ public function createTable($name, $table) {
    *
    * @param string $name
    *   The name of the table to create.
-   * @param array $table
+   * @param array|\Drupal\Core\Database\Schema\Table $table
    *   A Schema API table definition array.
    *
    * @return array
diff --git a/core/lib/Drupal/Core/Database/Schema/Index.php b/core/lib/Drupal/Core/Database/Schema/Index.php
new file mode 100644
index 0000000000..5c523a82c9
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Schema/Index.php
@@ -0,0 +1,21 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\Schema;
+
+use Drupal\Core\Database\SchemaDefinition\Index as IndexDefinition;
+
+/**
+ * @todo
+ */
+class Index extends SchemaElementBase {
+
+  public string $name;
+  public array $columns = [];
+
+  public function getColumnNames(): array {
+    return array_map(fn(KeyColumn $column): string => $column->name, $this->columns);
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/Schema/KeyColumn.php b/core/lib/Drupal/Core/Database/Schema/KeyColumn.php
new file mode 100644
index 0000000000..42ee4f8a3b
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Schema/KeyColumn.php
@@ -0,0 +1,17 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\Schema;
+
+use Drupal\Core\Database\SchemaDefinition\KeyColumn as KeyColumnDefinition;
+
+/**
+ * @todo
+ */
+class KeyColumn extends SchemaElementBase {
+
+  public string $name;
+  public ?int $length;
+
+}
diff --git a/core/lib/Drupal/Core/Database/Schema/PrimaryKey.php b/core/lib/Drupal/Core/Database/Schema/PrimaryKey.php
new file mode 100644
index 0000000000..62e271f099
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Schema/PrimaryKey.php
@@ -0,0 +1,20 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\Schema;
+
+use Drupal\Core\Database\SchemaDefinition\PrimaryKey as PrimaryKeyDefinition;
+
+/**
+ * @todo
+ */
+class PrimaryKey extends SchemaElementBase {
+
+  public array $columns = [];
+
+  public function getColumnNames(): array {
+    return array_map(fn(KeyColumn $column): string => $column->name, $this->columns);
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/Schema/SchemaElementBase.php b/core/lib/Drupal/Core/Database/Schema/SchemaElementBase.php
new file mode 100644
index 0000000000..22a570d973
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Schema/SchemaElementBase.php
@@ -0,0 +1,19 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\Schema;
+
+use Drupal\Core\Database\SchemaDefinition\SchemaDefinitionInterface;
+
+/**
+ * @todo
+ */
+class SchemaElementBase implements SchemaElementInterface {
+
+  final public function __construct(
+    public readonly SchemaDefinitionInterface $definition,
+  ) {
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/Schema/SchemaElementInterface.php b/core/lib/Drupal/Core/Database/Schema/SchemaElementInterface.php
new file mode 100644
index 0000000000..383a2583f8
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Schema/SchemaElementInterface.php
@@ -0,0 +1,11 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\Schema;
+
+/**
+ * @todo
+ */
+interface SchemaElementInterface {
+}
diff --git a/core/lib/Drupal/Core/Database/Schema/Table.php b/core/lib/Drupal/Core/Database/Schema/Table.php
new file mode 100644
index 0000000000..ee1d37656a
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Schema/Table.php
@@ -0,0 +1,23 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\Schema;
+
+/**
+ * Temporary Table.
+ *
+ * @todo complete as a SchemaElementBase.
+ */
+class Table {
+
+  public PrimaryKey $primaryKey;
+  public array $indexes = [];
+
+  public function __construct(
+    public string $name,
+    public array $spec,
+  ) {
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/ConvertDefinitionTrait.php b/core/lib/Drupal/Core/Database/SchemaDefinition/ConvertDefinitionTrait.php
new file mode 100644
index 0000000000..11b7605d7d
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/ConvertDefinitionTrait.php
@@ -0,0 +1,34 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Interface for objects describing database elements.
+ */
+trait ConvertDefinitionTrait {
+
+  final protected function convertTableToSchemaDefinition(array $spec): array {
+    if (!empty($spec['primary key'])) {
+      $spec['primary key'] = $this->convertPrimaryKeyToSchemaDefinition($spec['primary key']);
+    }
+    if (!empty($spec['indexes'])) {
+      $spec['indexes'] = $this->convertIndexesToSchemaDefinition($spec['indexes']);
+    }
+    return $spec;
+  }
+
+  final protected function convertPrimaryKeyToSchemaDefinition(PrimaryKey|array $primaryKey): PrimaryKey {
+    return $primaryKey instanceof PrimaryKey ? $primaryKey : new PrimaryKey($primaryKey);
+  }
+
+  final protected function convertIndexesToSchemaDefinition(array $indexes): array {
+    return array_map(fn(int|string $key, Index|array $value): Index => $this->convertIndexToSchemaDefinition($key, $value), array_keys($indexes), $indexes);
+  }
+
+  final protected function convertIndexToSchemaDefinition(string|int $name, Index|array $index): Index {
+    return $index instanceof Index ? $index : new Index($name, $index);
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/Index.php b/core/lib/Drupal/Core/Database/SchemaDefinition/Index.php
new file mode 100644
index 0000000000..0a9e72dff1
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/Index.php
@@ -0,0 +1,22 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a database index.
+ */
+final class Index extends KeyBase {
+
+  /**
+   * Constructor.
+   */
+  public function __construct(
+    public readonly string $name,
+    array $columns,
+  ) {
+    parent::__construct($columns);
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/KeyBase.php b/core/lib/Drupal/Core/Database/SchemaDefinition/KeyBase.php
new file mode 100644
index 0000000000..ca9c743602
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/KeyBase.php
@@ -0,0 +1,33 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Base class for table keys (primary, unique, index).
+ */
+abstract class KeyBase implements SchemaDefinitionInterface {
+
+  public readonly array $columns;
+
+  /**
+   * Constructor.
+   */
+  public function __construct(array $columns) {
+    $cols = [];
+    foreach ($columns as $columnDefinition) {
+      if ($columnDefinition instanceof KeyColumn) {
+        $cols[] = $columnDefinition;
+      }
+      elseif (is_array($columnDefinition)) {
+        $cols[] = new KeyColumn($columnDefinition[0], $columnDefinition[1]);
+      }
+      else {
+        $cols[] = new KeyColumn($columnDefinition);
+      }
+    }
+    $this->columns = $cols;
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/KeyColumn.php b/core/lib/Drupal/Core/Database/SchemaDefinition/KeyColumn.php
new file mode 100644
index 0000000000..314a7c7e05
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/KeyColumn.php
@@ -0,0 +1,21 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a column of a database index or key.
+ */
+final class KeyColumn implements SchemaDefinitionInterface {
+
+  /**
+   * Constructor.
+   */
+  public function __construct(
+    public readonly string $name,
+    public readonly ?int $length = NULL,
+  ) {
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/PrimaryKey.php b/core/lib/Drupal/Core/Database/SchemaDefinition/PrimaryKey.php
new file mode 100644
index 0000000000..b0c78786e5
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/PrimaryKey.php
@@ -0,0 +1,19 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Describes a table's primary key.
+ */
+final class PrimaryKey extends KeyBase {
+
+  /**
+   * Constructor.
+   */
+  public function __construct(array $columns) {
+    parent::__construct($columns);
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/SchemaDefinition/SchemaDefinitionInterface.php b/core/lib/Drupal/Core/Database/SchemaDefinition/SchemaDefinitionInterface.php
new file mode 100644
index 0000000000..2d3489f872
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/SchemaDefinition/SchemaDefinitionInterface.php
@@ -0,0 +1,11 @@
+<?php
+
+declare(strict_types=1);
+
+namespace Drupal\Core\Database\SchemaDefinition;
+
+/**
+ * Interface for objects describing database elements.
+ */
+interface SchemaDefinitionInterface {
+}
diff --git a/core/modules/mysql/mysql.services.yml b/core/modules/mysql/mysql.services.yml
index c20d7f1833..f2cbede8aa 100644
--- a/core/modules/mysql/mysql.services.yml
+++ b/core/modules/mysql/mysql.services.yml
@@ -1,4 +1,8 @@
 services:
+  _defaults:
+    autoconfigure: true
+    autowire: true
   mysql.views.cast_sql:
     class: Drupal\mysql\Plugin\views\query\MysqlCastSql
     public: false
+  Drupal\mysql\EventSubscriber\SchemaDataDefinitionSubscriber: ~
diff --git a/core/modules/mysql/src/Driver/Database/mysql/Schema.php b/core/modules/mysql/src/Driver/Database/mysql/Schema.php
index 199acc9141..27eb89fd74 100644
--- a/core/modules/mysql/src/Driver/Database/mysql/Schema.php
+++ b/core/modules/mysql/src/Driver/Database/mysql/Schema.php
@@ -2,10 +2,18 @@
 
 namespace Drupal\mysql\Driver\Database\mysql;
 
+use Drupal\Core\Database\Event\SchemaIndexDefinitionEvent;
+use Drupal\Core\Database\Event\SchemaPrimaryKeyDefinitionEvent;
 use Drupal\Core\Database\SchemaException;
 use Drupal\Core\Database\SchemaObjectExistsException;
 use Drupal\Core\Database\SchemaObjectDoesNotExistException;
 use Drupal\Core\Database\Schema as DatabaseSchema;
+use Drupal\Core\Database\Schema\Index;
+use Drupal\Core\Database\Schema\KeyColumn;
+use Drupal\Core\Database\Schema\PrimaryKey;
+use Drupal\Core\Database\SchemaDefinition\Index as IndexDefinition;
+use Drupal\Core\Database\SchemaDefinition\KeyColumn as KeyColumnDefinition;
+use Drupal\Core\Database\SchemaDefinition\PrimaryKey as PrimaryKeyDefinition;
 use Drupal\Component\Utility\Unicode;
 
 /**
@@ -80,14 +88,31 @@ protected function buildTableNameCondition($table_name, $operator = '=', $add_pr
     return $condition;
   }
 
+  protected function initIndexElement(IndexDefinition $indexDefinition): Index {
+    $index = new Index($indexDefinition);
+    $this->connection->dispatchEvent(new SchemaIndexDefinitionEvent($index));
+    return $index;
+  }
+
   /**
    * {@inheritdoc}
    */
   protected function createTableSql($name, $table) {
+    // INIT START.
+    if (!empty($table->spec['primary key'])) {
+      $table->primaryKey = $this->connection->dispatchEvent(new SchemaPrimaryKeyDefinitionEvent(new PrimaryKey($table->spec['primary key'])))->primaryKey;
+    }
+    if (!empty($table->spec['indexes'])) {
+      foreach ($table->spec['indexes'] as $index) {
+        $table->indexes[] = $this->connection->dispatchEvent(new SchemaIndexDefinitionEvent(new Index($index)))->index;
+      }
+    }
+    // INIT END.
+
     $info = $this->connection->getConnectionOptions();
 
     // Provide defaults if needed.
-    $table += [
+    $table->spec += [
       'mysql_engine' => 'InnoDB',
       'mysql_character_set' => 'utf8mb4',
     ];
@@ -95,15 +120,15 @@ protected function createTableSql($name, $table) {
     $sql = "CREATE TABLE {" . $name . "} (\n";
 
     // Add the SQL statement for each field.
-    foreach ($table['fields'] as $field_name => $field) {
+    foreach ($table->spec['fields'] as $field_name => $field) {
       $sql .= $this->createFieldSql($field_name, $this->processField($field)) . ", \n";
     }
 
     // Process keys & indexes.
-    if (!empty($table['primary key']) && is_array($table['primary key'])) {
-      $this->ensureNotNullPrimaryKey($table['primary key'], $table['fields']);
+    if ($table->primaryKey) {
+      $this->ensureNotNullPrimaryKey($table->primaryKey->getColumnNames(), $table->spec['fields']);
     }
-    $keys = $this->createKeysSql($table);
+    $keys = $this->createKeysSql($table->spec, $table);
     if (count($keys)) {
       $sql .= implode(", \n", $keys) . ", \n";
     }
@@ -111,7 +136,7 @@ protected function createTableSql($name, $table) {
     // Remove the last comma and space.
     $sql = substr($sql, 0, -3) . "\n) ";
 
-    $sql .= 'ENGINE = ' . $table['mysql_engine'] . ' DEFAULT CHARACTER SET ' . $table['mysql_character_set'];
+    $sql .= 'ENGINE = ' . $table->spec['mysql_engine'] . ' DEFAULT CHARACTER SET ' . $table->spec['mysql_character_set'];
     // By default, MySQL uses the default collation for new tables, which is
     // 'utf8mb4_general_ci' (MySQL 5) or 'utf8mb4_0900_ai_ci' (MySQL 8) for
     // utf8mb4. If an alternate collation has been set, it needs to be
@@ -122,8 +147,8 @@ protected function createTableSql($name, $table) {
     }
 
     // Add table comment.
-    if (!empty($table['description'])) {
-      $sql .= ' COMMENT ' . $this->prepareComment($table['description'], self::COMMENT_MAX_TABLE);
+    if (!empty($table->spec['description'])) {
+      $sql .= ' COMMENT ' . $this->prepareComment($table->spec['description'], self::COMMENT_MAX_TABLE);
     }
 
     return [$sql];
@@ -268,21 +293,21 @@ public function getFieldTypeMap() {
     return $map;
   }
 
-  protected function createKeysSql($spec) {
+  protected function createKeysSql($spec, $table) {
     $keys = [];
 
-    if (!empty($spec['primary key'])) {
-      $keys[] = 'PRIMARY KEY (' . $this->createKeySql($spec['primary key']) . ')';
+    if ($table->primaryKey) {
+      $keys[] = 'PRIMARY KEY (' . $this->createKeySql($table->primaryKey->columns) . ')';
     }
     if (!empty($spec['unique keys'])) {
       foreach ($spec['unique keys'] as $key => $fields) {
         $keys[] = 'UNIQUE KEY [' . $key . '] (' . $this->createKeySql($fields) . ')';
       }
     }
-    if (!empty($spec['indexes'])) {
-      $indexes = $this->getNormalizedIndexes($spec);
-      foreach ($indexes as $index => $fields) {
-        $keys[] = 'INDEX [' . $index . '] (' . $this->createKeySql($fields) . ')';
+    if ($table->indexes) {
+      $table->indexes = $this->getNormalizedIndexes($spec, $table->indexes);
+      foreach ($table->indexes as $index) {
+        $keys[] = 'INDEX [' . $index->name . '] (' . $this->createKeySql($index->columns) . ')';
       }
     }
 
@@ -304,12 +329,11 @@ protected function createKeysSql($spec) {
    * @throws \Drupal\Core\Database\SchemaException
    *   Thrown if field specification is missing.
    */
-  protected function getNormalizedIndexes(array $spec) {
-    $indexes = $spec['indexes'] ?? [];
-    foreach ($indexes as $index_name => $index_fields) {
-      foreach ($index_fields as $index_key => $index_field) {
+  protected function getNormalizedIndexes(array $spec, array $indexes) {
+    foreach ($indexes as $index) {
+      foreach ($index->columns as $index_key => $index_field) {
         // Get the name of the field from the index specification.
-        $field_name = is_array($index_field) ? $index_field[0] : $index_field;
+        $field_name = $index_field->name;
         // Check whether the field is defined in the table specification.
         if (isset($spec['fields'][$field_name])) {
           // Get the MySQL type from the processed field.
@@ -318,7 +342,8 @@ protected function getNormalizedIndexes(array $spec) {
             // Check whether we need to shorten the index.
             if ((!isset($mysql_field['type']) || $mysql_field['type'] != 'varchar_ascii') && (!isset($mysql_field['length']) || $mysql_field['length'] > 191)) {
               // Limit the index length to 191 characters.
-              $this->shortenIndex($indexes[$index_name][$index_key]);
+              $length = $index->columns[$index_key]->length;
+              $index->columns[$index_key]->length = $length === NULL ? 191 : min($length, 191);
             }
           }
         }
@@ -355,7 +380,10 @@ protected function shortenIndex(&$index) {
   protected function createKeySql($fields) {
     $return = [];
     foreach ($fields as $field) {
-      if (is_array($field)) {
+      if ($field instanceof KeyColumn) {
+        $return[] = is_null($field->length) ? "[{$field->name}]" : "[{$field->name}] ({$field->length})";
+      }
+      elseif (is_array($field)) {
         $return[] = '[' . $field[0] . '] (' . $field[1] . ')';
       }
       else {
diff --git a/core/modules/mysql/src/EventSubscriber/SchemaDataDefinitionSubscriber.php b/core/modules/mysql/src/EventSubscriber/SchemaDataDefinitionSubscriber.php
new file mode 100644
index 0000000000..48dae58a18
--- /dev/null
+++ b/core/modules/mysql/src/EventSubscriber/SchemaDataDefinitionSubscriber.php
@@ -0,0 +1,75 @@
+<?php
+
+namespace Drupal\mysql\EventSubscriber;
+
+use Drupal\Core\Database\Event\SchemaIndexDefinitionEvent;
+use Drupal\Core\Database\Event\SchemaKeyColumnDefinitionEvent;
+use Drupal\Core\Database\Event\SchemaPrimaryKeyDefinitionEvent;
+use Drupal\Core\Database\Schema\KeyColumn;
+use Symfony\Component\EventDispatcher\EventSubscriberInterface;
+use Symfony\Contracts\EventDispatcher\EventDispatcherInterface;
+
+/**
+ * Response subscriber to schema data definition events.
+ */
+class SchemaDataDefinitionSubscriber implements EventSubscriberInterface {
+
+  /**
+   * Constructor.
+   *
+   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $eventDispatcher
+   *   The event dispatcher.
+   */
+  public function __construct(
+    public readonly EventDispatcherInterface $eventDispatcher,
+  ) {
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function getSubscribedEvents(): array {
+    return [
+      SchemaIndexDefinitionEvent::class => 'onIndexDefinition',
+      SchemaKeyColumnDefinitionEvent::class => 'onKeyColumnDefinition',
+      SchemaPrimaryKeyDefinitionEvent::class => 'onPrimaryKeyDefinition',
+    ];
+  }
+
+  /**
+   * Subscribes to a index definition event.
+   *
+   * @param \Drupal\Core\Database\Event\SchemaIndexDefinitionEvent $event
+   *   The database event.
+   */
+  public function onIndexDefinition(SchemaIndexDefinitionEvent $event): void {
+    $event->index->name = $event->index->definition->name;
+    foreach ($event->index->definition->columns as $column) {
+      $event->index->columns[] = $this->eventDispatcher->dispatch(new SchemaKeyColumnDefinitionEvent(new KeyColumn($column)))->column;
+    }
+  }
+
+  /**
+   * Subscribes to a key column definition event.
+   *
+   * @param \Drupal\Core\Database\Event\SchemaKeyColumnDefinitionEvent $event
+   *   The database event.
+   */
+  public function onKeyColumnDefinition(SchemaKeyColumnDefinitionEvent $event): void {
+    $event->keyColumn->name = $event->keyColumn->definition->name;
+    $event->keyColumn->length = $event->keyColumn->definition->length;
+  }
+
+  /**
+   * Subscribes to a primary key definition event.
+   *
+   * @param \Drupal\Core\Database\Event\SchemaPrimaryKeyDefinitionEvent $event
+   *   The database event.
+   */
+  public function onPrimaryKeyDefinition(SchemaPrimaryKeyDefinitionEvent $event): void {
+    foreach ($event->primaryKey->definition->columns as $column) {
+      $event->primaryKey->columns[] = $this->eventDispatcher->dispatch(new SchemaKeyColumnDefinitionEvent(new KeyColumn($column)))->column;
+    }
+  }
+
+}
diff --git a/core/modules/system/system.install b/core/modules/system/system.install
index 079fa6cbf7..305f5420b6 100644
--- a/core/modules/system/system.install
+++ b/core/modules/system/system.install
@@ -13,6 +13,9 @@
 use Drupal\Component\Utility\Unicode;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Database\Database;
+use Drupal\Core\Database\SchemaDefinition\Index;
+use Drupal\Core\Database\SchemaDefinition\KeyColumn;
+use Drupal\Core\Database\SchemaDefinition\PrimaryKey;
 use Drupal\Core\DrupalKernel;
 use Drupal\Core\Extension\ExtensionLifecycle;
 use Drupal\Core\Entity\EntityTypeInterface;
@@ -1665,12 +1668,16 @@ function system_schema() {
         'size' => 'big',
       ],
     ],
-    'primary key' => [
-      'sid',
-    ],
+    'primary key' => new PrimaryKey([
+      new KeyColumn('sid'),
+    ]),
     'indexes' => [
-      'timestamp' => ['timestamp'],
-      'uid' => ['uid'],
+      new Index('timestamp', [
+        new KeyColumn('timestamp'),
+      ]),
+      new Index('uid', [
+        new KeyColumn('uid'),
+      ]),
     ],
     'foreign keys' => [
       'session_user' => [
