diff --git a/core/lib/Drupal/Component/Diff/Diff.php b/core/lib/Drupal/Component/Diff/Diff.php
index 289bab5f0e..9b4a9e30d7 100644
--- a/core/lib/Drupal/Component/Diff/Diff.php
+++ b/core/lib/Drupal/Component/Diff/Diff.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\Component\Diff;
 
-use Drupal\Component\Diff\Engine\DiffEngine;
+use SebastianBergmann\Diff\Differ;
 
 /**
  * Class representing a 'diff' between two sequences of strings.
@@ -34,9 +34,9 @@ class Diff {
    *   An array of strings.
    */
   public function __construct($from_lines, $to_lines) {
-    $eng = new DiffEngine();
-    $this->edits = $eng->diff($from_lines, $to_lines);
-    //$this->_check($from_lines, $to_lines);
+    $diffOpBuilder = new DiffOpOutputBuilder();
+    $differ = new Differ($diffOpBuilder);
+    $this->edits = $diffOpBuilder->toOpsArray($differ->diffToArray($from_lines, $to_lines));
   }
 
   /**
@@ -48,8 +48,14 @@ public function __construct($from_lines, $to_lines) {
    *  $rev = $diff->reverse();
    * @return object
    *   A Diff object representing the inverse of the original diff.
+   *
+   * @deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no
+   *   replacement.
+   *
+   * @see https://www.drupal.org/node/7654321
    */
   public function reverse() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     $rev = $this;
     $rev->edits = [];
     foreach ($this->edits as $edit) {
@@ -62,8 +68,14 @@ public function reverse() {
    * Check for empty diff.
    *
    * @return bool True iff two sequences were identical.
+   *
+   * @deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no
+   *   replacement.
+   *
+   * @see https://www.drupal.org/node/7654321
    */
   public function isEmpty() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     foreach ($this->edits as $edit) {
       if ($edit->type != 'copy') {
         return FALSE;
@@ -78,8 +90,14 @@ public function isEmpty() {
    * This is mostly for diagnostic purposed.
    *
    * @return int The length of the LCS.
+   *
+   * @deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no
+   *   replacement.
+   *
+   * @see https://www.drupal.org/node/7654321
    */
   public function lcs() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     $lcs = 0;
     foreach ($this->edits as $edit) {
       if ($edit->type == 'copy') {
@@ -96,8 +114,14 @@ public function lcs() {
    * constructor.
    *
    * @return array The original sequence of strings.
+   *
+   * @deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no
+   *   replacement.
+   *
+   * @see https://www.drupal.org/node/7654321
    */
   public function orig() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     $lines = [];
 
     foreach ($this->edits as $edit) {
@@ -115,8 +139,14 @@ public function orig() {
    * constructor.
    *
    * @return array The sequence of strings.
+   *
+   * @deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no
+   *   replacement.
+   *
+   * @see https://www.drupal.org/node/7654321
    */
   public function closing() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     $lines = [];
 
     foreach ($this->edits as $edit) {
@@ -131,8 +161,14 @@ public function closing() {
    * Check a Diff for validity.
    *
    * This is here only for debugging purposes.
+   *
+   * @deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no
+   *   replacement.
+   *
+   * @see https://www.drupal.org/node/7654321
    */
   public function check($from_lines, $to_lines) {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     if (serialize($from_lines) != serialize($this->orig())) {
       trigger_error("Reconstructed original doesn't match", E_USER_ERROR);
     }
diff --git a/core/lib/Drupal/Component/Diff/DiffOpOutputBuilder.php b/core/lib/Drupal/Component/Diff/DiffOpOutputBuilder.php
new file mode 100644
index 0000000000..a929696006
--- /dev/null
+++ b/core/lib/Drupal/Component/Diff/DiffOpOutputBuilder.php
@@ -0,0 +1,139 @@
+<?php declare(strict_types=1);
+
+namespace Drupal\Component\Diff;
+
+use Drupal\Component\Diff\Engine\DiffOp;
+use Drupal\Component\Diff\Engine\DiffOpAdd;
+use Drupal\Component\Diff\Engine\DiffOpChange;
+use Drupal\Component\Diff\Engine\DiffOpCopy;
+use Drupal\Component\Diff\Engine\DiffOpDelete;
+use SebastianBergmann\Diff\Differ;
+use SebastianBergmann\Diff\Output\DiffOutputBuilderInterface;
+
+/**
+ * Returns a diff as an array of DiffOp operations.
+ */
+final class DiffOpOutputBuilder implements DiffOutputBuilderInterface {
+
+  /**
+   * A constant to manage removal+addition as a single operation.
+   */
+  private const CHANGED = 999;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getDiff(array $diff): string {
+    return serialize($this->toOpsArray($diff));
+  }
+
+  /**
+   * Converts the output of Differ to an array of DiffOp* value objects.
+   *
+   * @param array $diff
+   *   The array output of Differ::diffToArray().
+   *
+   * @return \Drupal\Component\Diff\Engine\DiffOp[]
+   *   An array of DiffOp* value objects.
+   */
+  public function toOpsArray(array $diff): array {
+    $ops = [];
+    $hunkMode = NULL;
+    $hunkSource = [];
+    $hunkTarget = [];
+
+    for ($i = 0; $i < count($diff); $i++) {
+
+      // Handle a sequence of removals + additions as a sequence of changes, and
+      // manages the tail if required.
+      if ($diff[$i][1] === Differ::REMOVED) {
+        if ($hunkMode !== NULL) {
+          $ops[] = $this->hunkOp($hunkMode, $hunkSource, $hunkTarget);
+          $hunkSource = [];
+          $hunkTarget = [];
+        }
+        for ($n = $i; $n < count($diff) && $diff[$n][1] === Differ::REMOVED; $n++) {
+          $hunkSource[] = $diff[$n][0];
+        }
+        for (; $n < count($diff) && $diff[$n][1] === Differ::ADDED; $n++) {
+          $hunkTarget[] = $diff[$n][0];
+        }
+        if (count($hunkTarget) === 0) {
+          $ops[] = $this->hunkOp(Differ::REMOVED, $hunkSource, $hunkTarget);
+        }
+        elseif (count($hunkSource) === count($hunkTarget)) {
+          $ops[] = $this->hunkOp(self::CHANGED, $hunkSource, $hunkTarget);
+        }
+        elseif (count($hunkSource) > count($hunkTarget)) {
+          $ops[] = $this->hunkOp(self::CHANGED, array_slice($hunkSource, 0, count($hunkTarget)), $hunkTarget);
+          $ops[] = $this->hunkOp(Differ::REMOVED, array_slice($hunkSource, count($hunkTarget)), []);
+        }
+        else {
+          $ops[] = $this->hunkOp(self::CHANGED, $hunkSource, array_slice($hunkTarget, 0, count($hunkSource)));
+          $ops[] = $this->hunkOp(Differ::ADDED, array_slice($hunkTarget, count($hunkSource)), []);
+        }
+        $hunkMode = NULL;
+        $hunkSource = [];
+        $hunkTarget = [];
+        $i = $n - 1;
+        continue;
+      }
+
+      // When here, we are adding or copying the item. Removing or changing is
+      // managed above.
+      if ($hunkMode === NULL) {
+        $hunkMode = $diff[$i][1];
+      }
+      elseif ($hunkMode !== $diff[$i][1]) {
+        $ops[] = $this->hunkOp($hunkMode, $hunkSource, $hunkTarget);
+        $hunkMode = $diff[$i][1];
+        $hunkSource = [];
+        $hunkTarget = [];
+      }
+
+      $hunkSource[] = $diff[$i][0];
+    }
+
+    if ($hunkMode !== NULL) {
+      $ops[] = $this->hunkOp($hunkMode, $hunkSource, $hunkTarget);
+    }
+
+    return $ops;
+  }
+
+  /**
+   * Returns the proper DiffOp object based on the hunk mode.
+   *
+   * @param int $mode
+   *   A Differ constant or self::CHANGED.
+   * @param string[] $source
+   *   An array of strings to be changed/added/removed/copied.
+   * @param string[] $source
+   *   The array of strings to be changed to when self::CHANGED is specified.
+   *
+   * @return \Drupal\Component\Diff\Engine\DiffOp
+   *   A DiffOp* value object.
+   */
+  private function hunkOp(int $mode, array $source, array $target): DiffOp {
+    switch ($mode) {
+      case Differ::OLD:
+        $op = new DiffOpCopy($source);
+        break;
+
+      case self::CHANGED:
+        $op = new DiffOpChange($source, $target);
+        break;
+
+      case Differ::ADDED:
+        $op = new DiffOpAdd($source);
+        break;
+
+      case Differ::REMOVED:
+        $op = new DiffOpDelete($source);
+        break;
+
+    }
+    return $op;
+  }
+
+}
diff --git a/core/lib/Drupal/Component/Diff/Engine/DiffEngine.php b/core/lib/Drupal/Component/Diff/Engine/DiffEngine.php
index f8ec05fbbb..17c68ea0a0 100644
--- a/core/lib/Drupal/Component/Diff/Engine/DiffEngine.php
+++ b/core/lib/Drupal/Component/Diff/Engine/DiffEngine.php
@@ -24,6 +24,11 @@
  * @author Geoffrey T. Dairiki, Tim Starling
  * @private
  * @subpackage DifferenceEngine
+ *
+ * @deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. Use
+ *   sebastianbergmann/diff instead.
+ *
+ * @see https://www.drupal.org/node/7654321
  */
 class DiffEngine {
 
@@ -31,6 +36,10 @@ class DiffEngine {
 
   const MAX_XREF_LENGTH = 10000;
 
+  public function __construct() {
+    @trigger_error('Drupal\Component\Diff\Engine\DiffEngine is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. Use sebastianbergmann/diff instead. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
+  }
+
   public function diff($from_lines, $to_lines) {
 
     $n_from = sizeof($from_lines);
diff --git a/core/lib/Drupal/Component/Diff/Engine/DiffOp.php b/core/lib/Drupal/Component/Diff/Engine/DiffOp.php
index 29d749dc7c..1706a19ea0 100644
--- a/core/lib/Drupal/Component/Diff/Engine/DiffOp.php
+++ b/core/lib/Drupal/Component/Diff/Engine/DiffOp.php
@@ -12,15 +12,36 @@ class DiffOp {
   public $orig;
   public $closing;
 
+  /**
+   * @deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no
+   *   replacement.
+   *
+   * @see https://www.drupal.org/node/7654321
+   */
   public function reverse() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     trigger_error('pure virtual', E_USER_ERROR);
   }
 
+  /**
+   * @deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no
+   *   replacement.
+   *
+   * @see https://www.drupal.org/node/7654321
+   */
   public function norig() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     return $this->orig ? sizeof($this->orig) : 0;
   }
 
+  /**
+   * @deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no
+   *   replacement.
+   *
+   * @see https://www.drupal.org/node/7654321
+   */
   public function nclosing() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     return $this->closing ? sizeof($this->closing) : 0;
   }
 
diff --git a/core/lib/Drupal/Component/Diff/Engine/DiffOpAdd.php b/core/lib/Drupal/Component/Diff/Engine/DiffOpAdd.php
index 14429c251d..ffe9f615b3 100644
--- a/core/lib/Drupal/Component/Diff/Engine/DiffOpAdd.php
+++ b/core/lib/Drupal/Component/Diff/Engine/DiffOpAdd.php
@@ -15,7 +15,14 @@ public function __construct($lines) {
     $this->orig = FALSE;
   }
 
+  /**
+   * @deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no
+   *   replacement.
+   *
+   * @see https://www.drupal.org/node/7654321
+   */
   public function reverse() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     return new DiffOpDelete($this->closing);
   }
 
diff --git a/core/lib/Drupal/Component/Diff/Engine/DiffOpChange.php b/core/lib/Drupal/Component/Diff/Engine/DiffOpChange.php
index 4abd6acc01..fc27160055 100644
--- a/core/lib/Drupal/Component/Diff/Engine/DiffOpChange.php
+++ b/core/lib/Drupal/Component/Diff/Engine/DiffOpChange.php
@@ -15,7 +15,14 @@ public function __construct($orig, $closing) {
     $this->closing = $closing;
   }
 
+  /**
+   * @deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no
+   *   replacement.
+   *
+   * @see https://www.drupal.org/node/7654321
+   */
   public function reverse() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     return new DiffOpChange($this->closing, $this->orig);
   }
 
diff --git a/core/lib/Drupal/Component/Diff/Engine/DiffOpCopy.php b/core/lib/Drupal/Component/Diff/Engine/DiffOpCopy.php
index 4128d57329..a407c68f98 100644
--- a/core/lib/Drupal/Component/Diff/Engine/DiffOpCopy.php
+++ b/core/lib/Drupal/Component/Diff/Engine/DiffOpCopy.php
@@ -18,7 +18,14 @@ public function __construct($orig, $closing = FALSE) {
     $this->closing = $closing;
   }
 
+  /**
+   * @deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no
+   *   replacement.
+   *
+   * @see https://www.drupal.org/node/7654321
+   */
   public function reverse() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     return new DiffOpCopy($this->closing, $this->orig);
   }
 
diff --git a/core/lib/Drupal/Component/Diff/Engine/DiffOpDelete.php b/core/lib/Drupal/Component/Diff/Engine/DiffOpDelete.php
index e402d66b61..0b367b9e61 100644
--- a/core/lib/Drupal/Component/Diff/Engine/DiffOpDelete.php
+++ b/core/lib/Drupal/Component/Diff/Engine/DiffOpDelete.php
@@ -15,7 +15,14 @@ public function __construct($lines) {
     $this->closing = FALSE;
   }
 
+  /**
+   * @deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no
+   *   replacement.
+   *
+   * @see https://www.drupal.org/node/7654321
+   */
   public function reverse() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     return new DiffOpAdd($this->orig);
   }
 
diff --git a/core/misc/cspell/dictionary.txt b/core/misc/cspell/dictionary.txt
index b141ad61b6..ef18cbcbf9 100644
--- a/core/misc/cspell/dictionary.txt
+++ b/core/misc/cspell/dictionary.txt
@@ -1163,6 +1163,7 @@ scriptable
 scrollbars
 searchdirs
 searchfield
+sebastianbergmann
 sebe
 secondcolumn
 seld
diff --git a/core/tests/Drupal/Tests/Component/Diff/DiffOpOutputBuilderTest.php b/core/tests/Drupal/Tests/Component/Diff/DiffOpOutputBuilderTest.php
new file mode 100644
index 0000000000..b26715f196
--- /dev/null
+++ b/core/tests/Drupal/Tests/Component/Diff/DiffOpOutputBuilderTest.php
@@ -0,0 +1,109 @@
+<?php
+
+namespace Drupal\Tests\Component\Diff;
+
+use Drupal\Component\Diff\DiffOpOutputBuilder;
+use Drupal\Component\Diff\Engine\DiffOpAdd;
+use Drupal\Component\Diff\Engine\DiffOpCopy;
+use Drupal\Component\Diff\Engine\DiffOpChange;
+use Drupal\Component\Diff\Engine\DiffOpDelete;
+use PHPUnit\Framework\TestCase;
+use SebastianBergmann\Diff\Differ;
+
+/**
+ * @coversDefaultClass \Drupal\Component\Diff\DiffOpOutputBuilder
+ *
+ * @group Diff
+ */
+class DiffOpOutputBuilderTest extends TestCase {
+
+  /**
+   * @return array
+   *   - Expected output in terms of return class. A list of class names
+   *     expected to be returned by DiffEngine::diff().
+   *   - An array of strings to change from.
+   *   - An array of strings to change to.
+   */
+  public function provideTestDiff() {
+    return [
+      'empty' => [[], [], []],
+      'add' => [[DiffOpAdd::class], [], ['a']],
+      'copy' => [[DiffOpCopy::class], ['a'], ['a']],
+      'change' => [[DiffOpChange::class], ['a'], ['b']],
+      'copy-and-change' => [
+        [
+          DiffOpCopy::class,
+          DiffOpChange::class,
+        ],
+        ['a', 'b'],
+        ['a', 'c'],
+      ],
+      'copy-change-copy' => [
+        [
+          DiffOpCopy::class,
+          DiffOpChange::class,
+          DiffOpCopy::class,
+        ],
+        ['a', 'b', 'd'],
+        ['a', 'c', 'd'],
+      ],
+      'copy-change-copy-add' => [
+        [
+          DiffOpCopy::class,
+          DiffOpChange::class,
+          DiffOpCopy::class,
+          DiffOpAdd::class,
+        ],
+        ['a', 'b', 'd'],
+        ['a', 'c', 'd', 'e'],
+      ],
+      'copy-delete' => [
+        [
+          DiffOpCopy::class,
+          DiffOpDelete::class,
+        ],
+        ['a', 'b', 'd'],
+        ['a'],
+      ],
+    ];
+  }
+
+  /**
+   * Tests whether op classes returned match expectations.
+   *
+   * @covers ::toOpsArray
+   * @dataProvider provideTestDiff
+   */
+  public function testDiff($expected, $from, $to) {
+    $diffOpBuilder = new DiffOpOutputBuilder();
+    $differ = new Differ($diffOpBuilder);
+    $diff = $differ->diffToArray($from, $to);
+    $diffOps = $diffOpBuilder->toOpsArray($diff);
+    // Make sure we have the same number of results as expected.
+    $this->assertSameSize($expected, $diffOps);
+    // Make sure the diff objects match our expectations.
+    foreach ($expected as $index => $op_class) {
+      $this->assertEquals($op_class, get_class($diffOps[$index]));
+    }
+  }
+
+  /**
+   * Tests that two files can be successfully diffed.
+   *
+   * @covers ::toOpsArray
+   */
+  public function testDiffInfiniteLoop() {
+    $from = explode("\n", file_get_contents(__DIR__ . '/Engine/fixtures/file1.txt'));
+    $to = explode("\n", file_get_contents(__DIR__ . '/Engine/fixtures/file2.txt'));
+    $diffOpBuilder = new DiffOpOutputBuilder();
+    $differ = new Differ($diffOpBuilder);
+    $diff = $differ->diffToArray($from, $to);
+    $diffOps = $diffOpBuilder->toOpsArray($diff);
+    $this->assertCount(4, $diffOps);
+    $this->assertEquals($diffOps[0], new DiffOpDelete(['    - image.style.max_650x650']));
+    $this->assertEquals($diffOps[1], new DiffOpCopy(['    - image.style.max_325x325']));
+    $this->assertEquals($diffOps[2], new DiffOpAdd(['    - image.style.max_650x650', '_core:', '  default_config_hash: 3mjM9p-kQ8syzH7N8T0L9OnCJDSPvHAZoi3q6jcXJKM']));
+    $this->assertEquals($diffOps[3], new DiffOpCopy(['fallback_image_style: max_325x325', '']));
+  }
+
+}
diff --git a/core/tests/Drupal/Tests/Component/Diff/Engine/DiffEngineTest.php b/core/tests/Drupal/Tests/Component/Diff/Engine/DiffEngineTest.php
index 895faebeb5..34a46ad7c3 100644
--- a/core/tests/Drupal/Tests/Component/Diff/Engine/DiffEngineTest.php
+++ b/core/tests/Drupal/Tests/Component/Diff/Engine/DiffEngineTest.php
@@ -8,6 +8,7 @@
 use Drupal\Component\Diff\Engine\DiffOpChange;
 use Drupal\Component\Diff\Engine\DiffOpDelete;
 use PHPUnit\Framework\TestCase;
+use Symfony\Bridge\PhpUnit\ExpectDeprecationTrait;
 
 /**
  * Test DiffEngine class.
@@ -15,9 +16,12 @@
  * @coversDefaultClass \Drupal\Component\Diff\Engine\DiffEngine
  *
  * @group Diff
+ * @group legacy
  */
 class DiffEngineTest extends TestCase {
 
+  use ExpectDeprecationTrait;
+
   /**
    * @return array
    *   - Expected output in terms of return class. A list of class names
@@ -76,6 +80,7 @@ public function provideTestDiff() {
    * @dataProvider provideTestDiff
    */
   public function testDiff($expected, $from, $to) {
+    $this->expectDeprecation('Drupal\Component\Diff\Engine\DiffEngine is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. Use sebastianbergmann/diff instead. See https://www.drupal.org/node/7654321');
     $diff_engine = new DiffEngine();
     $diff = $diff_engine->diff($from, $to);
     // Make sure we have the same number of results as expected.
@@ -92,6 +97,7 @@ public function testDiff($expected, $from, $to) {
    * @covers ::diff
    */
   public function testDiffInfiniteLoop() {
+    $this->expectDeprecation('Drupal\Component\Diff\Engine\DiffEngine is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. Use sebastianbergmann/diff instead. See https://www.drupal.org/node/7654321');
     $from = explode("\n", file_get_contents(__DIR__ . '/fixtures/file1.txt'));
     $to = explode("\n", file_get_contents(__DIR__ . '/fixtures/file2.txt'));
     $diff_engine = new DiffEngine();
diff --git a/core/tests/Drupal/Tests/Component/Diff/Engine/DiffOpTest.php b/core/tests/Drupal/Tests/Component/Diff/Engine/DiffOpTest.php
index 76f0064e7d..3f29c56ee8 100644
--- a/core/tests/Drupal/Tests/Component/Diff/Engine/DiffOpTest.php
+++ b/core/tests/Drupal/Tests/Component/Diff/Engine/DiffOpTest.php
@@ -15,6 +15,7 @@
  * @coversDefaultClass \Drupal\Component\Diff\Engine\DiffOp
  *
  * @group Diff
+ * @group legacy
  */
 class DiffOpTest extends TestCase {
 
@@ -24,6 +25,7 @@ class DiffOpTest extends TestCase {
    * @covers ::reverse
    */
   public function testReverse() {
+    $this->expectDeprecation('Drupal\Component\Diff\Engine\DiffOp::reverse() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321');
     $this->expectError();
     $op = new DiffOp();
     $result = $op->reverse();
