diff --git a/core/lib/Drupal/Component/Diff/Diff.php b/core/lib/Drupal/Component/Diff/Diff.php
index 289bab5f0e..1de4e5cc67 100644
--- a/core/lib/Drupal/Component/Diff/Diff.php
+++ b/core/lib/Drupal/Component/Diff/Diff.php
@@ -3,6 +3,13 @@
 namespace Drupal\Component\Diff;
 
 use Drupal\Component\Diff\Engine\DiffEngine;
+use Drupal\Component\Diff\Engine\DiffOp;
+use Drupal\Component\Diff\Engine\DiffOpAdd;
+use Drupal\Component\Diff\Engine\DiffOpChange;
+use Drupal\Component\Diff\Engine\DiffOpCopy;
+use Drupal\Component\Diff\Engine\DiffOpDelete;
+use SebastianBergmann\Diff\Differ;
+use SebastianBergmann\Diff\Output\UnifiedDiffOutputBuilder;
 
 /**
  * Class representing a 'diff' between two sequences of strings.
@@ -16,6 +23,8 @@
  */
 class Diff {
 
+  private const CHANGED = 999;
+
   /**
    * The list of differences as an array of diff operations.
    *
@@ -34,11 +43,99 @@ class Diff {
    *   An array of strings.
    */
   public function __construct($from_lines, $to_lines) {
-    $eng = new DiffEngine();
-    $this->edits = $eng->diff($from_lines, $to_lines);
+    $differ = new Differ(new UnifiedDiffOutputBuilder());
+    $this->edits = $this->toDiffOps($differ->diffToArray($from_lines, $to_lines));
+dump([$from_lines, $to_lines, $this->edits]);
     //$this->_check($from_lines, $to_lines);
   }
 
+  private function toDiffOps(array $diffArray): array {
+    $ops = [];
+    $hunkMode = NULL;
+    $hunkSource = [];
+    $hunkTarget = [];
+
+    for ($i = 0; $i < count($diffArray); $i++) {
+
+      // Handle a sequence of removals + additions as a sequence of changes, and
+      // manages the tail if required.
+      if ($diffArray[$i][1] === Differ::REMOVED) {
+        if ($hunkMode !== NULL) {
+          $ops[] = $this->hunkOp($hunkMode, $hunkSource, $hunkTarget);
+          $hunkSource = [];
+          $hunkTarget = [];
+        }
+        for ($n = $i; $diffArray[$n][1] === Differ::REMOVED; $n++) {
+          $hunkSource[] = $diffArray[$n][0];
+        }
+        for (; $diffArray[$n][1] === Differ::ADDED; $n++) {
+          $hunkTarget[] = $diffArray[$n][0];
+        }
+        if (count($hunkTarget) === 0) {
+          $ops[] = $this->hunkOp(Differ::REMOVED, $hunkSource, $hunkTarget);
+        }
+        elseif (count($hunkSource) === count($hunkTarget)) {
+          $ops[] = $this->hunkOp(self::CHANGED, $hunkSource, $hunkTarget);
+        }
+        elseif (count($hunkSource) > count($hunkTarget)) {
+          $ops[] = $this->hunkOp(self::CHANGED, array_slice($hunkSource, 0, count($hunkTarget)), $hunkTarget);
+          $ops[] = $this->hunkOp(Differ::REMOVED, array_slice($hunkSource, count($hunkTarget)), []);
+        }
+        else {
+          $ops[] = $this->hunkOp(self::CHANGED, $hunkSource, array_slice($hunkTarget, 0, count($hunkSource)));
+          $ops[] = $this->hunkOp(Differ::ADDED, array_slice($hunkTarget, count($hunkSource)), []);
+        }
+        $hunkMode = NULL;
+        $hunkSource = [];
+        $hunkTarget = [];
+        $i = $n;
+        continue;
+      }
+
+      // When here, we are adding or copying the item. Removing or changing is
+      // managed above.
+      if ($hunkMode === NULL) {
+        $hunkMode = $diffArray[$i][1];
+      }
+      elseif ($hunkMode !== $diffArray[$i][1]) {
+        $ops[] = $this->hunkOp($hunkMode, $hunkSource, $hunkTarget);
+        $hunkMode = $diffArray[$i][1];
+        $hunkSource = [];
+        $hunkTarget = [];
+      }
+
+      $hunkSource[] = $diffArray[$i][0];
+    }
+
+    if ($hunkMode !== NULL) {
+      $ops[] = $this->hunkOp($hunkMode, $hunkSource, $hunkTarget);
+    }
+
+    return $ops;
+  }
+
+  private function hunkOp(int $mode, array $source, array $target): DiffOp {
+    switch ($mode) {
+      case Differ::OLD:
+        $op = new DiffOpCopy($source);
+        break;
+
+      case self::CHANGED:
+        $op = new DiffOpChange($source, $target);
+        break;
+
+      case Differ::ADDED:
+        $op = new DiffOpAdd($source);
+        break;
+
+      case Differ::REMOVED:
+        $op = new DiffOpDelete($source);
+        break;
+
+    }
+    return $op;
+  }
+
   /**
    * Compute reversed Diff.
    *
@@ -50,6 +147,7 @@ public function __construct($from_lines, $to_lines) {
    *   A Diff object representing the inverse of the original diff.
    */
   public function reverse() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     $rev = $this;
     $rev->edits = [];
     foreach ($this->edits as $edit) {
@@ -64,6 +162,7 @@ public function reverse() {
    * @return bool True iff two sequences were identical.
    */
   public function isEmpty() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     foreach ($this->edits as $edit) {
       if ($edit->type != 'copy') {
         return FALSE;
@@ -80,6 +179,7 @@ public function isEmpty() {
    * @return int The length of the LCS.
    */
   public function lcs() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     $lcs = 0;
     foreach ($this->edits as $edit) {
       if ($edit->type == 'copy') {
@@ -98,6 +198,7 @@ public function lcs() {
    * @return array The original sequence of strings.
    */
   public function orig() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     $lines = [];
 
     foreach ($this->edits as $edit) {
@@ -117,6 +218,7 @@ public function orig() {
    * @return array The sequence of strings.
    */
   public function closing() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     $lines = [];
 
     foreach ($this->edits as $edit) {
@@ -133,6 +235,7 @@ public function closing() {
    * This is here only for debugging purposes.
    */
   public function check($from_lines, $to_lines) {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     if (serialize($from_lines) != serialize($this->orig())) {
       trigger_error("Reconstructed original doesn't match", E_USER_ERROR);
     }
diff --git a/core/lib/Drupal/Component/Diff/Engine/DiffEngine.php b/core/lib/Drupal/Component/Diff/Engine/DiffEngine.php
index f8ec05fbbb..76ac9be541 100644
--- a/core/lib/Drupal/Component/Diff/Engine/DiffEngine.php
+++ b/core/lib/Drupal/Component/Diff/Engine/DiffEngine.php
@@ -31,6 +31,10 @@ class DiffEngine {
 
   const MAX_XREF_LENGTH = 10000;
 
+  public function __construct() {
+    @trigger_error('Drupal\Component\Diff\Engine\DiffEngine is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. Use SebastianBergmann/diff instead. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
+  }
+
   public function diff($from_lines, $to_lines) {
 
     $n_from = sizeof($from_lines);
diff --git a/core/lib/Drupal/Component/Diff/Engine/DiffOp.php b/core/lib/Drupal/Component/Diff/Engine/DiffOp.php
index 29d749dc7c..a777ee9f0f 100644
--- a/core/lib/Drupal/Component/Diff/Engine/DiffOp.php
+++ b/core/lib/Drupal/Component/Diff/Engine/DiffOp.php
@@ -13,14 +13,17 @@ class DiffOp {
   public $closing;
 
   public function reverse() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     trigger_error('pure virtual', E_USER_ERROR);
   }
 
   public function norig() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     return $this->orig ? sizeof($this->orig) : 0;
   }
 
   public function nclosing() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     return $this->closing ? sizeof($this->closing) : 0;
   }
 
diff --git a/core/lib/Drupal/Component/Diff/Engine/DiffOpAdd.php b/core/lib/Drupal/Component/Diff/Engine/DiffOpAdd.php
index 14429c251d..506821bb4c 100644
--- a/core/lib/Drupal/Component/Diff/Engine/DiffOpAdd.php
+++ b/core/lib/Drupal/Component/Diff/Engine/DiffOpAdd.php
@@ -16,6 +16,7 @@ public function __construct($lines) {
   }
 
   public function reverse() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     return new DiffOpDelete($this->closing);
   }
 
diff --git a/core/lib/Drupal/Component/Diff/Engine/DiffOpChange.php b/core/lib/Drupal/Component/Diff/Engine/DiffOpChange.php
index 4abd6acc01..99e27e4ca4 100644
--- a/core/lib/Drupal/Component/Diff/Engine/DiffOpChange.php
+++ b/core/lib/Drupal/Component/Diff/Engine/DiffOpChange.php
@@ -16,6 +16,7 @@ public function __construct($orig, $closing) {
   }
 
   public function reverse() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     return new DiffOpChange($this->closing, $this->orig);
   }
 
diff --git a/core/lib/Drupal/Component/Diff/Engine/DiffOpCopy.php b/core/lib/Drupal/Component/Diff/Engine/DiffOpCopy.php
index 4128d57329..8498722e30 100644
--- a/core/lib/Drupal/Component/Diff/Engine/DiffOpCopy.php
+++ b/core/lib/Drupal/Component/Diff/Engine/DiffOpCopy.php
@@ -19,6 +19,7 @@ public function __construct($orig, $closing = FALSE) {
   }
 
   public function reverse() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     return new DiffOpCopy($this->closing, $this->orig);
   }
 
diff --git a/core/lib/Drupal/Component/Diff/Engine/DiffOpDelete.php b/core/lib/Drupal/Component/Diff/Engine/DiffOpDelete.php
index e402d66b61..10c6d9a1cc 100644
--- a/core/lib/Drupal/Component/Diff/Engine/DiffOpDelete.php
+++ b/core/lib/Drupal/Component/Diff/Engine/DiffOpDelete.php
@@ -16,6 +16,7 @@ public function __construct($lines) {
   }
 
   public function reverse() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321', E_USER_DEPRECATED);
     return new DiffOpAdd($this->orig);
   }
 
diff --git a/core/tests/Drupal/Tests/Component/Diff/Engine/DiffEngineTest.php b/core/tests/Drupal/Tests/Component/Diff/Engine/DiffEngineTest.php
index 895faebeb5..69451e8cce 100644
--- a/core/tests/Drupal/Tests/Component/Diff/Engine/DiffEngineTest.php
+++ b/core/tests/Drupal/Tests/Component/Diff/Engine/DiffEngineTest.php
@@ -15,6 +15,7 @@
  * @coversDefaultClass \Drupal\Component\Diff\Engine\DiffEngine
  *
  * @group Diff
+ * @group legacy
  */
 class DiffEngineTest extends TestCase {
 
@@ -76,6 +77,7 @@ public function provideTestDiff() {
    * @dataProvider provideTestDiff
    */
   public function testDiff($expected, $from, $to) {
+    $this->expectDeprecation('Drupal\Component\Diff\Engine\DiffEngine is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. Use SebastianBergmann/diff instead. See https://www.drupal.org/node/7654321');
     $diff_engine = new DiffEngine();
     $diff = $diff_engine->diff($from, $to);
     // Make sure we have the same number of results as expected.
@@ -92,6 +94,7 @@ public function testDiff($expected, $from, $to) {
    * @covers ::diff
    */
   public function testDiffInfiniteLoop() {
+    $this->expectDeprecation('Drupal\Component\Diff\Engine\DiffEngine is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. Use SebastianBergmann/diff instead. See https://www.drupal.org/node/7654321');
     $from = explode("\n", file_get_contents(__DIR__ . '/fixtures/file1.txt'));
     $to = explode("\n", file_get_contents(__DIR__ . '/fixtures/file2.txt'));
     $diff_engine = new DiffEngine();
diff --git a/core/tests/Drupal/Tests/Component/Diff/Engine/DiffOpTest.php b/core/tests/Drupal/Tests/Component/Diff/Engine/DiffOpTest.php
index 76f0064e7d..3f29c56ee8 100644
--- a/core/tests/Drupal/Tests/Component/Diff/Engine/DiffOpTest.php
+++ b/core/tests/Drupal/Tests/Component/Diff/Engine/DiffOpTest.php
@@ -15,6 +15,7 @@
  * @coversDefaultClass \Drupal\Component\Diff\Engine\DiffOp
  *
  * @group Diff
+ * @group legacy
  */
 class DiffOpTest extends TestCase {
 
@@ -24,6 +25,7 @@ class DiffOpTest extends TestCase {
    * @covers ::reverse
    */
   public function testReverse() {
+    $this->expectDeprecation('Drupal\Component\Diff\Engine\DiffOp::reverse() is deprecated in drupal:10.0.0 and is removed from drupal:11.0.0. There is no replacement. See https://www.drupal.org/node/7654321');
     $this->expectError();
     $op = new DiffOp();
     $result = $op->reverse();
