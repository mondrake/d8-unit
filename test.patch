diff --git a/core/drupalci.yml b/core/drupalci.yml
index 82edd46046..c0d6553d91 100644
--- a/core/drupalci.yml
+++ b/core/drupalci.yml
@@ -25,24 +25,24 @@ build:
         testgroups: '--all'
         suppress-deprecations: false
         halt-on-fail: false
-      run_tests.build:
-        # Limit concurrency due to disk space concerns.
-        concurrency: 15
-        types: 'PHPUnit-Build'
-        testgroups: '--all'
-        suppress-deprecations: false
-        halt-on-fail: false
-      run_tests.functional:
-        types: 'PHPUnit-Functional'
-        testgroups: '--all'
-        suppress-deprecations: false
-        halt-on-fail: false
-      run_tests.javascript:
-        concurrency: 15
-        types: 'PHPUnit-FunctionalJavascript'
-        testgroups: '--all'
-        suppress-deprecations: false
-        halt-on-fail: false
-      # Run nightwatch testing.
-      # @see https://www.drupal.org/project/drupal/issues/2869825
-      nightwatchjs:
+#      run_tests.build:
+#        # Limit concurrency due to disk space concerns.
+#        concurrency: 15
+#        types: 'PHPUnit-Build'
+#        testgroups: '--all'
+#        suppress-deprecations: false
+#        halt-on-fail: false
+#      run_tests.functional:
+#        types: 'PHPUnit-Functional'
+#        testgroups: '--all'
+#        suppress-deprecations: false
+#        halt-on-fail: false
+#      run_tests.javascript:
+#        concurrency: 15
+#        types: 'PHPUnit-FunctionalJavascript'
+#        testgroups: '--all'
+#        suppress-deprecations: false
+#        halt-on-fail: false
+#      # Run nightwatch testing.
+#      # @see https://www.drupal.org/project/drupal/issues/2869825
+#      nightwatchjs:
diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index 3f194e1aa0..b5ee5411ca 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -156,6 +156,11 @@
    */
   protected $unprefixedTablesMap = [];
 
+  /**
+   * @todo
+   */
+  protected $identifierHandler;
+
   /**
    * List of escaped database, table, and field names, keyed by unescaped names.
    *
@@ -173,6 +178,8 @@
    * List of escaped table names, keyed by unescaped names.
    *
    * @var array
+   *
+   * @todo deprecate
    */
   protected $escapedTables = [];
 
@@ -183,6 +190,8 @@
    * this case it should always return an empty string.
    *
    * @var array
+   *
+   * @todo deprecate
    */
   protected $escapedFields = ["" => ""];
 
@@ -190,6 +199,8 @@
    * List of escaped aliases names, keyed by unescaped aliases.
    *
    * @var array
+   *
+   * @todo deprecate
    */
   protected $escapedAliases = [];
 
@@ -208,6 +219,8 @@
    * quotation mark.
    *
    * @var string[]
+   *
+   * @todo deprecate
    */
   protected $identifierQuotes;
 
@@ -260,6 +273,10 @@ public function __construct(\PDO $connection, array $connection_options) {
 
     $this->connection = $connection;
     $this->connectionOptions = $connection_options;
+
+    // Initialize the identifier handler.
+    $identifier_handler_class = $this->getDriverClass('IdentifierHandler');
+    $this->identifierHandler = new $identifier_handler_class($this->identifierQuotes);
   }
 
   /**
@@ -524,6 +541,7 @@ public function getUnprefixedTablesMap() {
    * @return string
    */
   public function getFullQualifiedTableName($table) {
+//    @trigger_error(__METHOD__ . ' is deprecated in drupal:9.x.0 and is removed from drupal:10.0.0. @todo. See https://www.drupal.org/node/1234567', E_USER_DEPRECATED);
     $options = $this->getConnectionOptions();
     $prefix = $this->tablePrefix($table);
     return $options['database'] . '.' . $prefix . $table;
@@ -990,6 +1008,10 @@ public function getDriverClass($class) {
       }
       else {
         switch ($class) {
+          case 'IdentifierHandler':
+            $this->driverClasses[$class] = IdentifierHandler::class;
+            break;
+
           case 'Condition':
             $this->driverClasses[$class] = Condition::class;
             break;
@@ -1228,9 +1250,7 @@ public function condition($conjunction) {
    *   The sanitized database name.
    */
   public function escapeDatabase($database) {
-    $database = preg_replace('/[^A-Za-z0-9_]+/', '', $database);
-    [$start_quote, $end_quote] = $this->identifierQuotes;
-    return $start_quote . $database . $end_quote;
+    return $this->identifierHandler->getPlatformDatabaseName($database);
   }
 
   /**
@@ -1251,10 +1271,7 @@ public function escapeDatabase($database) {
    * @see \Drupal\Core\Database\Connection::setPrefix()
    */
   public function escapeTable($table) {
-    if (!isset($this->escapedTables[$table])) {
-      $this->escapedTables[$table] = preg_replace('/[^A-Za-z0-9_.]+/', '', $table);
-    }
-    return $this->escapedTables[$table];
+    return $this->identifierHandler->getPlatformTableName($table);
   }
 
   /**
@@ -1271,14 +1288,7 @@ public function escapeTable($table) {
    *   The sanitized field name.
    */
   public function escapeField($field) {
-    if (!isset($this->escapedFields[$field])) {
-      $escaped = preg_replace('/[^A-Za-z0-9_.]+/', '', $field);
-      [$start_quote, $end_quote] = $this->identifierQuotes;
-      // Sometimes fields have the format table_alias.field. In such cases
-      // both identifiers should be quoted, for example, "table_alias"."field".
-      $this->escapedFields[$field] = $start_quote . str_replace('.', $end_quote . '.' . $start_quote, $escaped) . $end_quote;
-    }
-    return $this->escapedFields[$field];
+    return $this->identifierHandler->getPlatformColumnName($field);
   }
 
   /**
@@ -1296,11 +1306,7 @@ public function escapeField($field) {
    *   The sanitized alias name.
    */
   public function escapeAlias($field) {
-    if (!isset($this->escapedAliases[$field])) {
-      [$start_quote, $end_quote] = $this->identifierQuotes;
-      $this->escapedAliases[$field] = $start_quote . preg_replace('/[^A-Za-z0-9_]+/', '', $field) . $end_quote;
-    }
-    return $this->escapedAliases[$field];
+    return $this->identifierHandler->getPlatformAliasName($field);
   }
 
   /**
diff --git a/core/lib/Drupal/Core/Database/IdentifierHandler.php b/core/lib/Drupal/Core/Database/IdentifierHandler.php
new file mode 100644
index 0000000000..4ee6944d1c
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/IdentifierHandler.php
@@ -0,0 +1,116 @@
+<?php
+
+namespace Drupal\Core\Database;
+
+/**
+ * @todo
+ */
+class IdentifierHandler {
+
+  const DATABASE = 0x4;
+  const TABLE = 0x7;
+  const COLUMN = 0x9;
+  const ALIAS = 0x10;
+
+  /**
+   * The identifier quote characters for the database type.
+   *
+   * An array containing the start and end identifier quote characters for the
+   * database type. The ANSI SQL standard identifier quote character is a double
+   * quotation mark.
+   *
+   * @var string[]
+   */
+  protected $identifierQuotes;
+
+  /**
+   * @todo
+   */
+  protected $identifiers;
+
+  /**
+   * Constructs a Connection object.
+   *
+   * @param string[] $identifier_quotes
+   *   The identifier quote characters. Defaults to an empty strings.
+   */
+  public function __construct(array $identifier_quotes) {
+    $this->identifierQuotes = $identifier_quotes;
+  }
+
+//  public function __destruct() {
+//    dump($this->identifiers);
+//  }
+
+  /**
+   * @todo
+   */
+  public function setIdentifier(string $identifier, string $db_identifier, int $type): void {
+    $is_alias = (bool) ($type & static::ALIAS);
+    $type = $type & 0xF;
+    if(!$is_alias) {
+      $this->identifiers['original'][$identifier][$type] = $db_identifier;
+      $this->identifiers['platform'][$db_identifier][$type] = $identifier;
+    }
+    else {
+      $this->identifiers['original'][$identifier][static::ALIAS][$type] = $db_identifier;
+      $this->identifiers['platform'][$db_identifier][static::ALIAS][$type] = $identifier;
+    }
+  }
+
+  /**
+   * @todo
+   */
+  public function getPlatformDatabaseName(string $original_name, bool $quoted = TRUE): string {
+    if (!isset($this->identifiers['original'][$original_name][static::DATABASE])) {
+      $this->setIdentifier($original_name, preg_replace('/[^A-Za-z0-9_]+/', '', $original_name), static::DATABASE);
+    }
+    [$start_quote, $end_quote] = $this->identifierQuotes;
+    return $quoted ?
+      $start_quote . $this->identifiers['original'][$original_name][static::DATABASE] . $end_quote :
+      $this->identifiers['original'][$original_name][static::DATABASE];
+  }
+
+  /**
+   * @todo
+   */
+  public function getPlatformTableName(string $original_name, bool $quoted = FALSE): string {
+    if (!isset($this->identifiers['original'][$original_name][static::TABLE])) {
+      $this->setIdentifier($original_name, preg_replace('/[^A-Za-z0-9_.]+/', '', $original_name), static::TABLE);
+    }
+    [$start_quote, $end_quote] = $this->identifierQuotes;
+    $table = $this->identifiers['original'][$original_name][static::TABLE];
+    return $quoted ? $start_quote . $table . $end_quote : $table;
+  }
+
+  /**
+   * @todo
+   */
+  public function getPlatformColumnName(string $original_name, bool $quoted = TRUE): string {
+    if ($original_name === '') {
+      return '';
+    }
+    if (!isset($this->identifiers['original'][$original_name][static::COLUMN])) {
+      $this->setIdentifier($original_name, preg_replace('/[^A-Za-z0-9_.]+/', '', $original_name), static::COLUMN);
+    }
+    // Sometimes fields have the format table_alias.field. In such cases
+    // both identifiers should be quoted, for example, "table_alias"."field".
+    [$start_quote, $end_quote] = $this->identifierQuotes;
+    return $quoted ?
+      $start_quote . str_replace(".", "$end_quote.$start_quote", $this->identifiers['original'][$original_name][static::COLUMN]) . $end_quote :
+      $this->identifiers['original'][$original_name][static::COLUMN];
+  }
+
+  /**
+   * @todo
+   */
+  public function getPlatformAliasName(string $original_name, int $type = 0, bool $quoted = TRUE): string {
+    if (!isset($this->identifiers['original'][$original_name][static::ALIAS])) {
+      $this->setIdentifier($original_name, preg_replace('/[^A-Za-z0-9_]+/', '', $original_name), $type | static::ALIAS);
+    }
+    [$start_quote, $end_quote] = $this->identifierQuotes;
+    $alias = $this->identifiers['original'][$original_name][static::ALIAS][$type] ?? $this->identifiers['original'][$original_name][static::ALIAS][0];
+    return $quoted ? $start_quote . $alias . $end_quote : $alias;
+  }
+
+}
