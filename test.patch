diff --git a/core/.phpstan-baseline.php b/core/.phpstan-baseline.php
index 1f1aae4f65..bc0371b547 100644
--- a/core/.phpstan-baseline.php
+++ b/core/.phpstan-baseline.php
@@ -2030,18 +2030,6 @@
 	'count' => 1,
 	'path' => __DIR__ . '/tests/Drupal/KernelTests/Core/Cache/ApcuBackendTest.php',
 ];
-$ignoreErrors[] = [
-	'message' => '#^Call to deprecated method expectWarning\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
-https\\://github\\.com/sebastianbergmann/phpunit/issues/5062$#',
-	'count' => 1,
-	'path' => __DIR__ . '/tests/Drupal/KernelTests/Core/Config/ConfigInstallTest.php',
-];
-$ignoreErrors[] = [
-	'message' => '#^Call to deprecated method expectWarningMessage\\(\\) of class PHPUnit\\\\Framework\\\\TestCase\\:
-https\\://github\\.com/sebastianbergmann/phpunit/issues/5062$#',
-	'count' => 1,
-	'path' => __DIR__ . '/tests/Drupal/KernelTests/Core/Config/ConfigInstallTest.php',
-];
 $ignoreErrors[] = [
 	'message' => '#^Variable \\$expected_driver might not be defined\\.$#',
 	'count' => 2,
diff --git a/core/core.services.yml b/core/core.services.yml
index 1f96371654..3a1213a949 100644
--- a/core/core.services.yml
+++ b/core/core.services.yml
@@ -371,7 +371,7 @@ services:
     class: Drupal\Core\Config\Importer\FinalMissingContentSubscriber
   config.installer:
     class: Drupal\Core\Config\ConfigInstaller
-    arguments: ['@config.factory', '@config.storage', '@config.typed', '@config.manager', '@event_dispatcher', '%install_profile%', '@extension.path.resolver']
+    autowire: true
     lazy: true
   Drupal\Core\Config\ConfigInstallerInterface: '@config.installer'
   config.storage:
diff --git a/core/lib/Drupal/Core/Config/ConfigInstaller.php b/core/lib/Drupal/Core/Config/ConfigInstaller.php
index ec94fb331c..c8376b5e61 100644
--- a/core/lib/Drupal/Core/Config/ConfigInstaller.php
+++ b/core/lib/Drupal/Core/Config/ConfigInstaller.php
@@ -7,8 +7,13 @@
 use Drupal\Core\Config\Entity\ConfigDependencyManager;
 use Drupal\Core\Extension\ExtensionPathResolver;
 use Drupal\Core\Installer\InstallerKernel;
+use Symfony\Component\DependencyInjection\Attribute\Autowire;
+use Symfony\Component\DependencyInjection\Attribute\AutowireServiceClosure;
 use Symfony\Contracts\EventDispatcher\EventDispatcherInterface;
 
+/**
+ * The configuration installer.
+ */
 class ConfigInstaller implements ConfigInstallerInterface {
 
   /**
@@ -74,25 +79,19 @@ class ConfigInstaller implements ConfigInstallerInterface {
    */
   protected $extensionPathResolver;
 
-  /**
-   * Constructs the configuration installer.
-   *
-   * @param \Drupal\Core\Config\ConfigFactoryInterface $config_factory
-   *   The configuration factory.
-   * @param \Drupal\Core\Config\StorageInterface $active_storage
-   *   The active configuration storage.
-   * @param \Drupal\Core\Config\TypedConfigManagerInterface $typed_config
-   *   The typed configuration manager.
-   * @param \Drupal\Core\Config\ConfigManagerInterface $config_manager
-   *   The configuration manager.
-   * @param \Symfony\Contracts\EventDispatcher\EventDispatcherInterface $event_dispatcher
-   *   The event dispatcher.
-   * @param string $install_profile
-   *   The name of the currently active installation profile.
-   * @param \Drupal\Core\Extension\ExtensionPathResolver $extension_path_resolver
-   *   The extension path resolver.
-   */
-  public function __construct(ConfigFactoryInterface $config_factory, StorageInterface $active_storage, TypedConfigManagerInterface $typed_config, ConfigManagerInterface $config_manager, EventDispatcherInterface $event_dispatcher, $install_profile, ExtensionPathResolver $extension_path_resolver) {
+  public function __construct(
+    ConfigFactoryInterface $config_factory,
+    #[Autowire(service: 'config.storage')]
+    StorageInterface $active_storage,
+    TypedConfigManagerInterface $typed_config,
+    ConfigManagerInterface $config_manager,
+    EventDispatcherInterface $event_dispatcher,
+    #[Autowire(param: 'install_profile')]
+    $install_profile,
+    ExtensionPathResolver $extension_path_resolver,
+    #[AutowireServiceClosure('logger.channel.php')]
+    protected \Closure $loggerClosure,
+  ) {
     $this->configFactory = $config_factory;
     $this->activeStorages[$active_storage->getCollectionName()] = $active_storage;
     $this->typedConfig = $typed_config;
@@ -326,6 +325,7 @@ protected function getConfigToCreate(StorageInterface $storage, $collection, $pr
    *   An array of configuration data to create, keyed by name.
    */
   protected function createConfiguration($collection, array $config_to_create) {
+dump([__METHOD__, $collection, $config_to_create]);
     // Order the configuration to install in the order of dependencies.
     if ($collection == StorageInterface::DEFAULT_COLLECTION) {
       $dependency_manager = new ConfigDependencyManager();
@@ -388,7 +388,12 @@ protected function createConfiguration($collection, array $config_to_create) {
         if ($entity->isInstallable()) {
           $entity->trustData()->save();
           if ($id !== $entity->id()) {
-            trigger_error(sprintf('The configuration name "%s" does not match the ID "%s"', $name, $entity->id()), E_USER_WARNING);
+            /** @var \Psr\Log\LoggerInterface $logger */
+            $logger = ($this->loggerClosure)();
+            $logger->warning('The configuration name "%name" does not match the ID "%id"', [
+              '%name' => $name,
+              '%id' => $entity->id(),
+            ]);
           }
         }
       }
diff --git a/core/tests/Drupal/KernelTests/Core/Config/ConfigInstallTest.php b/core/tests/Drupal/KernelTests/Core/Config/ConfigInstallTest.php
index 4655ae374e..b3c70000a3 100644
--- a/core/tests/Drupal/KernelTests/Core/Config/ConfigInstallTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Config/ConfigInstallTest.php
@@ -3,10 +3,12 @@
 namespace Drupal\KernelTests\Core\Config;
 
 use Drupal\Core\Config\ConfigCollectionEvents;
+use Drupal\Core\Config\ConfigInstaller;
 use Drupal\Core\Config\InstallStorage;
 use Drupal\Core\Config\PreExistingConfigException;
 use Drupal\Core\Config\UnmetDependenciesException;
 use Drupal\KernelTests\KernelTestBase;
+use Psr\Log\LoggerInterface;
 
 /**
  * Tests installation of configuration objects in installation functionality.
@@ -263,9 +265,28 @@ public function testLanguage() {
    * Tests installing configuration where the filename and ID do not match.
    */
   public function testIdMisMatch() {
-    $this->expectWarning();
-    $this->expectWarningMessage('The configuration name "config_test.dynamic.no_id_match" does not match the ID "does_not_match"');
-    $this->installModules(['config_test_id_mismatch']);
+    $loggerClosure = function (): LoggerInterface {
+      $logger = $this->prophesize(LoggerInterface::class);
+      $logger->warning('The configuration name "%name" does not match the ID "%id"', [
+        "%name" => "config_test.dynamic.no_id_match",
+        "%id" => "does_not_match",
+      ])->shouldBeCalledOnce();
+      return $logger->reveal();
+    };
+
+    // Create a config installer with the logger prophecy.
+    $configInstaller = new ConfigInstaller(
+      \Drupal::service('config.factory'),
+      \Drupal::service('config.storage'),
+      \Drupal::service('config.typed'),
+      \Drupal::service('config.manager'),
+      \Drupal::service('event_dispatcher'),
+      \Drupal::getContainer()->getParameter('install_profile'),
+      \Drupal::service('extension.path.resolver'),
+      $loggerClosure,
+    );
+
+    $configInstaller->installDefaultConfig('module', 'config_test_id_mismatch');
   }
 
   /**
