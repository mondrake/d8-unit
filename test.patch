diff --git a/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificTransactionTestBase.php b/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificTransactionTestBase.php
index 3911419ca77..ba2f8fd1ec2 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificTransactionTestBase.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificTransactionTestBase.php
@@ -444,6 +444,64 @@ public function testTransactionWithDdlStatement(): void {
     }
   }
 
+  /**
+   * Tests the compatibility of transactions with DDL statements.
+   */
+  public function testRollbackWithDdlStatement(): void {
+    // The behavior of a rollback depends on the type of database server.
+    if ($this->connection->supportsTransactionalDDL()) {
+      // For database servers that support transactional DDL, a rollback
+      // of a transaction including DDL statements should be possible.
+      $this->cleanUp();
+      $transaction = $this->createRootTransaction('', FALSE);
+      $this->insertRow('row');
+      $this->executeDDLStatement();
+      $transaction->rollBack();
+      unset($transaction);
+      $this->assertRowAbsent('row');
+
+      // Including with stacking.
+      $this->cleanUp();
+      $transaction = $this->createRootTransaction('', FALSE);
+      $transaction2 = $this->createFirstSavepointTransaction('', FALSE);
+      $this->executeDDLStatement();
+      unset($transaction2);
+      $transaction3 = $this->connection->startTransaction();
+      $this->insertRow('row');
+      unset($transaction3);
+      $transaction->rollBack();
+      unset($transaction);
+      $this->assertRowAbsent('row');
+    }
+    else {
+      // For database servers that do not support transactional DDL,
+      // the DDL statement should commit the transaction stack.
+      $this->cleanUp();
+      $transaction = $this->createRootTransaction('', FALSE);
+      $reflectionMethod = new \ReflectionMethod(get_class($this->connection->transactionManager()), 'getConnectionTransactionState');
+      $this->assertSame(1, $this->connection->transactionManager()->stackDepth());
+      $this->assertEquals(ClientConnectionTransactionState::Active, $reflectionMethod->invoke($this->connection->transactionManager()));
+      $this->insertRow('row');
+      $this->executeDDLStatement();
+
+      // Try to rollback the root transaction. Since the DDL already committed
+      // it, it should fail.
+      try {
+        $transaction->rollBack();
+        $this->fail('A TransactionOutOfOrderException was expected, but it was not thrown.');
+      }
+      catch (TransactionOutOfOrderException $e) {
+        $this->assertMatchesRegularExpression("/^Error attempting rollback of .*\\\\drupal_transaction\\. Active stack: .* empty/", $e->getMessage());
+        unset($transaction);
+        $manager = $this->connection->transactionManager();
+        $this->assertSame(0, $manager->stackDepth());
+        $reflectedTransactionState = new \ReflectionMethod($manager, 'getConnectionTransactionState');
+        $this->assertSame(ClientConnectionTransactionState::Voided, $reflectedTransactionState->invoke($manager));
+        $this->assertRowPresent('row');
+      }
+    }
+  }
+
   /**
    * Inserts a single row into the testing table.
    */
