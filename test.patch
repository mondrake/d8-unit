diff --git a/core/scripts/run-tests.sh b/core/scripts/run-tests.sh
index 9d3f3894eb..29b82f471c 100755
--- a/core/scripts/run-tests.sh
+++ b/core/scripts/run-tests.sh
@@ -11,17 +11,19 @@
 use Drupal\Component\Uuid\Php;
 use Drupal\Core\Asset\AttachedAssets;
 use Drupal\Core\Database\Database;
+use Drupal\Core\StreamWrapper\PublicStream;
 use Drupal\Core\File\Exception\FileException;
 use Drupal\Core\File\FileSystemInterface;
-use Drupal\Core\StreamWrapper\PublicStream;
 use Drupal\Core\Test\EnvironmentCleaner;
 use Drupal\Core\Test\PhpUnitTestRunner;
 use Drupal\Core\Test\RunTests\TestFileParser;
 use Drupal\Core\Test\TestDatabase;
 use Drupal\Core\Test\TestRunnerKernel;
-use Drupal\simpletest\Form\SimpletestResultsForm;
 use Drupal\Core\Test\TestDiscovery;
+use Drupal\simpletest\Form\SimpletestResultsForm;
 use PHPUnit\Framework\TestCase;
+use Symfony\Component\Console\Helper\Table;
+use Symfony\Component\Console\Helper\TableCell;
 use Symfony\Component\Console\Output\ConsoleOutput;
 use Symfony\Component\HttpFoundation\Request;
 
@@ -179,9 +181,10 @@
 // Display results before database is cleared.
 if ($args['browser']) {
   simpletest_script_open_browser();
+  trigger_error('The --browser option is deprecated in drupal:8.8.0 and is removed from drupal:9.0.0. Use --verbose instead. See https://www.drupal.org/node/3083549', E_USER_DEPRECATED);
 }
 else {
-  simpletest_script_reporter_display_results();
+  simpletest_script_reporter_display_results($args['table']);
 }
 
 if ($args['xml']) {
@@ -317,7 +320,7 @@ function simpletest_script_help() {
               test database and configuration directories. Use in combination
               with --repeat for debugging random test failures.
 
-  --browser   Opens the results in the browser. This enforces --keep-results and
+  --browser   Deprecated, use --verbose instead. This enforces --keep-results and
               if you want to also view any pages rendered in the simpletest
               browser you need to add --verbose to the command line.
 
@@ -399,6 +402,7 @@ function simpletest_script_parse_args() {
     'die-on-fail' => FALSE,
     'suppress-deprecations' => FALSE,
     'browser' => FALSE,
+    'table' => FALSE,
     // Used internally.
     'test-id' => 0,
     'execute-test' => '',
@@ -815,6 +819,9 @@ function simpletest_script_run_one_test($test_id, $test_class) {
   global $args;
 
   try {
+    // Default to status = success. This could mean that we didn't discover any
+    // tests and that none ran.
+    $status = SIMPLETEST_SCRIPT_EXIT_SUCCESS;
     if (strpos($test_class, '::') > 0) {
       list($class_name, $method) = explode('::', $test_class, 2);
       $methods = [$method];
@@ -831,7 +838,10 @@ function simpletest_script_run_one_test($test_id, $test_class) {
     if (is_subclass_of($test_class, TestCase::class)) {
       $status = simpletest_script_run_phpunit($test_id, $test_class);
     }
-    else {
+    // If we aren't running a PHPUnit-based test, then we might have a
+    // Simpletest-based one. Ensure that: 1) The simpletest framework exists,
+    // and 2) That our test belongs to that framework.
+    elseif (class_exists('\Drupal\simpletest\TestBase') && is_subclass_of($test_class, '\Drupal\simpletest\TestBase')) {
       $test->dieOnFail = (bool) $args['die-on-fail'];
       $test->verbose = (bool) $args['verbose'];
       $test->run($methods);
@@ -1316,20 +1326,63 @@ function simpletest_script_reporter_display_results() {
       echo (string) $e;
       exit(SIMPLETEST_SCRIPT_EXIT_EXCEPTION);
     }
-    $test_class = '';
-    foreach ($results as $result) {
+
+    // Get the first result.
+    $result = !empty($results) ? array_shift($results): NULL;
+    while ($result) {
       if (isset($results_map[$result->status])) {
-        if ($result->test_class != $test_class) {
-          // Display test class every time results are for new test class.
-          echo "\n\n---- $result->test_class ----\n\n\n";
-          $test_class = $result->test_class;
-
-          // Print table header.
-          echo "Status    Group      Filename          Line Function                            \n";
-          echo "--------------------------------------------------------------------------------\n";
+        $test_class = $result->test_class;
+        $messages = [];
+        $table = (new Table(new ConsoleOutput()))->setHeaders([
+          [new TableCell($result->test_class, ['colspan' => 5])],
+          ['Status', 'Group', 'Filename', 'Line', 'Function'],
+        ]);
+        while ($result && $test_class === $result->test_class) {
+          $row = [
+            $results_map[$result->status],
+            $result->message_group,
+            basename($result->file),
+            $result->line,
+            $result->function
+          ];
+          array_walk($row, function (&$value) use ($result) {
+            $value = "\033[" . simpletest_script_color_code($result->status) . "m" . $value . "\033[0m";
+          });
+          $table->addRow($row);
+
+          // Save any messages so they can be output after the table. This
+          // allows the full PHPUnit error output to be displayed.
+          if (!empty($result->message)) {
+            $message = trim(strip_tags($result->message));
+            if ($args['non-html']) {
+              $message = Html::decodeEntities($message, ENT_QUOTES, 'UTF-8');
+            }
+            // If we're dealing with PHPUnit save messages until after the table
+            // is rendered.
+            if (is_subclass_of($test_class, TestCase::class)) {
+              $messages[] = $message;
+            }
+            else {
+              $table->addRow([new TableCell('    ' . $message, ['colspan' => 5])]);
+            }
+          }
+          // Get the next result.
+          $result = !empty($results) ? array_shift($results) : NULL;
         }
+        $table->render();
 
-        simpletest_script_format_result($result);
+        // Render any messages left over.
+        foreach ($messages as $message) {
+          $lines = explode("\n", wordwrap($message), 76);
+          foreach ($lines as $line) {
+            echo $line . "\n";
+          }
+        }
+
+        if ($result) {
+          // Add some space before printing the next table.
+          echo "\n\n";
+        }
       }
     }
   }
@@ -1340,6 +1393,10 @@ function simpletest_script_reporter_display_results() {
  *
  * @param object $result
  *   The result object to format.
+ *
+ * @deprecated in drupal:8.8.0 and is removed from drupal:9.0.0.
+ *
+ * @see https://www.drupal.org/node/3083549
  */
 function simpletest_script_format_result($result) {
   global $args, $results_map, $color;
@@ -1494,6 +1551,14 @@ function simpletest_script_load_messages_by_test_id($test_ids) {
 
 /**
  * Display test results.
+ *
+ * @deprecated in drupal:8.8.0 and is removed from drupal:9.0.0. This function
+ *   supports the --browser option in this script. Use the --verbose option
+ *   instead.
+ *
+ * @see https://www.drupal.org/node/3083549
+ *
+ * @todo Remove this in https://www.drupal.org/project/drupal/issues/3075490.
  */
 function simpletest_script_open_browser() {
   global $test_ids;
