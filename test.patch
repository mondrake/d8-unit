diff --git a/core/lib/Drupal/Core/Database/Connection.php b/core/lib/Drupal/Core/Database/Connection.php
index 7e405e1b1b..bd9f501ee5 100644
--- a/core/lib/Drupal/Core/Database/Connection.php
+++ b/core/lib/Drupal/Core/Database/Connection.php
@@ -54,17 +54,6 @@ abstract class Connection {
    */
   protected $logger = NULL;
 
-  /**
-   * Tracks the number of "layers" of transactions currently active.
-   *
-   * On many databases transactions cannot nest.  Instead, we track
-   * nested calls to transactions and collapse them into a single
-   * transaction.
-   *
-   * @var array
-   */
-  protected $transactionLayers = [];
-
   /**
    * Index of what driver-specific class to use for various operations.
    *
@@ -226,6 +215,11 @@ abstract class Connection {
    */
   private array $enabledEvents = [];
 
+  /**
+   * The transaction manager.
+   */
+  private TransactionManager $transactionManager;
+
   /**
    * Constructs a Connection object.
    *
@@ -255,6 +249,16 @@ public function __construct(object $connection, array $connection_options) {
     $this->connectionOptions = $connection_options;
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function __get(string $name) {
+    if ($name === 'transactionLayers') {
+      @trigger_error('Accessing directly ' . __CLASS__ . '::$' . $name . 'is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
+      return $this->transactionManager()->nestingLayers();
+    }
+  }
+
   /**
    * Opens a client connection.
    *
@@ -1301,7 +1305,7 @@ public function escapeLike($string) {
    *   TRUE if we're currently in a transaction, FALSE otherwise.
    */
   public function inTransaction() {
-    return ($this->transactionDepth() > 0);
+    return $this->transactionManager()->inTransaction();
   }
 
   /**
@@ -1311,9 +1315,23 @@ public function inTransaction() {
    *   The current transaction depth.
    */
   public function transactionDepth() {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
     return count($this->transactionLayers);
   }
 
+  /**
+   * Returns the transaction manager.
+   *
+   * @return \Drupal\Core\Database\TransactionManager
+   *   The transaction manager.
+   */
+  public function transactionManager(): TransactionManager {
+    if (!isset($this->transactionManager)) {
+      $this->transactionManager = new TransactionManager($this);
+    }
+    return $this->transactionManager;
+  }
+
   /**
    * Returns a new DatabaseTransaction object on this connection.
    *
@@ -1326,8 +1344,19 @@ public function transactionDepth() {
    * @see \Drupal\Core\Database\Transaction
    */
   public function startTransaction($name = '') {
-    $class = $this->getDriverClass('Transaction');
-    return new $class($this, $name);
+    return $this->transactionManager()->startTransaction($name);
+  }
+
+  /**
+   * Begins a transaction on the client connection.
+   *
+   * @return bool
+   *   Returns TRUE on success or FALSE on failure.
+   *
+   * @internal
+   */
+  public function beginTransaction(): bool {
+    return $this->connection->beginTransaction();
   }
 
   /**
@@ -1350,7 +1379,7 @@ public function rollBack($savepoint_name = 'drupal_transaction') {
     }
     // A previous rollback to an earlier savepoint may mean that the savepoint
     // in question has already been accidentally committed.
-    if (!isset($this->transactionLayers[$savepoint_name])) {
+    if (!isset($this->transactionManager()->nestingLayers()[$savepoint_name])) {
       throw new TransactionNoActiveException();
     }
 
@@ -1358,12 +1387,19 @@ public function rollBack($savepoint_name = 'drupal_transaction') {
     // before are no longer needed. If we rolled back other active savepoints,
     // we need to throw an exception.
     $rolled_back_other_active_savepoints = FALSE;
-    while ($savepoint = array_pop($this->transactionLayers)) {
+    $XX = $this->transactionManager()->nestingLayers();
+    while ($savepoint = array_pop($XX)) {
+      //// TEMP
+      $tmp = $this->transactionManager()->nestingLayers();
+      $x = array_pop($tmp);
+      $this->transactionManager()->setNestingLayers($tmp);
+      $XX = $tmp;
+      //// TEMP
       if ($savepoint == $savepoint_name) {
         // If it is the last the transaction in the stack, then it is not a
         // savepoint, it is the transaction itself so we will need to roll back
         // the transaction rather than a savepoint.
-        if (empty($this->transactionLayers)) {
+        if ($this->transactionManager()->currentNestingDepth() === 0) {
           break;
         }
         $this->query('ROLLBACK TO SAVEPOINT ' . $savepoint);
@@ -1404,18 +1440,7 @@ public function rollBack($savepoint_name = 'drupal_transaction') {
    * @see \Drupal\Core\Database\Transaction
    */
   public function pushTransaction($name) {
-    if (isset($this->transactionLayers[$name])) {
-      throw new TransactionNameNonUniqueException($name . " is already in use.");
-    }
-    // If we're already in a transaction then we want to create a savepoint
-    // rather than try to create another transaction.
-    if ($this->inTransaction()) {
-      $this->query('SAVEPOINT ' . $name);
-    }
-    else {
-      $this->connection->beginTransaction();
-    }
-    $this->transactionLayers[$name] = $name;
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
   }
 
   /**
@@ -1438,12 +1463,17 @@ public function popTransaction($name) {
     // need to do. If this transaction was part of an earlier out-of-order
     // rollback, an exception would already have been thrown by
     // Database::rollBack().
-    if (!isset($this->transactionLayers[$name])) {
+    if (!isset($this->transactionManager()->nestingLayers()[$name])) {
       return;
     }
 
     // Mark this layer as committable.
-    $this->transactionLayers[$name] = FALSE;
+    //// TEMP
+    // $this->nestingLayers[$name] = FALSE;
+    $tmp = $this->transactionManager()->nestingLayers();
+    $tmp[$name] = FALSE;
+    $this->transactionManager()->setNestingLayers($tmp);
+    //// TEMP
     $this->popCommittableTransactions();
   }
 
@@ -1469,7 +1499,7 @@ public function popTransaction($name) {
    * @see \Drupal\Core\Database\Connection::doCommit()
    */
   public function addRootTransactionEndCallback(callable $callback) {
-    if (!$this->transactionLayers) {
+    if ($this->transactionManager()->currentNestingDepth() === 0) {
       throw new \LogicException('Root transaction end callbacks can only be added when there is an active transaction.');
     }
     $this->rootTransactionEndCallbacks[] = $callback;
@@ -1482,15 +1512,20 @@ public function addRootTransactionEndCallback(callable $callback) {
    */
   protected function popCommittableTransactions() {
     // Commit all the committable layers.
-    foreach (array_reverse($this->transactionLayers) as $name => $active) {
+    foreach (array_reverse($this->transactionManager()->nestingLayers()) as $name => $active) {
       // Stop once we found an active transaction.
       if ($active) {
         break;
       }
 
       // If there are no more layers left then we should commit.
-      unset($this->transactionLayers[$name]);
-      if (empty($this->transactionLayers)) {
+      //// TEMP
+      // unset($this->nestingLayers[$name]);;
+      $tmp = $this->transactionManager()->nestingLayers();
+      unset($tmp[$name]);
+      $this->transactionManager()->setNestingLayers($tmp);
+      //// TEMP
+      if ($this->transactionManager()->currentNestingDepth() === 0) {
         $this->doCommit();
       }
       else {
diff --git a/core/lib/Drupal/Core/Database/Exception/TransactionException.php b/core/lib/Drupal/Core/Database/Exception/TransactionException.php
new file mode 100644
index 0000000000..c1f042bcf7
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Exception/TransactionException.php
@@ -0,0 +1,10 @@
+<?php
+
+namespace Drupal\Core\Database\Exception;
+
+use Drupal\Core\Database\DatabaseException;
+
+/**
+ * Exception thrown by an error in a database transaction.
+ */
+class TransactionException extends \RuntimeException implements DatabaseException {}
diff --git a/core/lib/Drupal/Core/Database/Exception/TransactionNameNonUniqueException.php b/core/lib/Drupal/Core/Database/Exception/TransactionNameNonUniqueException.php
new file mode 100644
index 0000000000..c29666497b
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/Exception/TransactionNameNonUniqueException.php
@@ -0,0 +1,10 @@
+<?php
+
+namespace Drupal\Core\Database\Exception;
+
+use Drupal\Core\Database\DatabaseException;
+
+/**
+ * Exception thrown when a savepoint or transaction name occurs twice.
+ */
+class TransactionNameNonUniqueException extends TransactionException implements DatabaseException {}
diff --git a/core/lib/Drupal/Core/Database/Transaction.php b/core/lib/Drupal/Core/Database/Transaction.php
index 76d5fc8f5f..6def1b0168 100644
--- a/core/lib/Drupal/Core/Database/Transaction.php
+++ b/core/lib/Drupal/Core/Database/Transaction.php
@@ -47,22 +47,23 @@ class Transaction {
    */
   protected $name;
 
-  public function __construct(Connection $connection, $name = NULL) {
+  public function __construct(
+    Connection $connection,
+    $name = NULL,
+    protected readonly int $depth = 0,
+  ) {
     $this->connection = $connection;
-    // If there is no transaction depth, then no transaction has started. Name
-    // the transaction 'drupal_transaction'.
-    if (!$depth = $connection->transactionDepth()) {
-      $this->name = 'drupal_transaction';
-    }
-    // Within transactions, savepoints are used. Each savepoint requires a
-    // name. So if no name is present we need to create one.
-    elseif (!$name) {
-      $this->name = 'savepoint_' . $depth;
-    }
-    else {
-      $this->name = $name;
+    $this->name = $name;
+  }
+
+  public function initialize(): bool {
+    // If we're already in a Drupal transaction then we want to create a
+    // database savepoint rather than try to begin another database
+    // transaction.
+    if ($this->depth !== 0) {
+      return (bool) $this->connection->query('SAVEPOINT ' . $this->name);
     }
-    $this->connection->pushTransaction($this->name);
+    return $this->connection->beginTransaction();
   }
 
   public function __destruct() {
diff --git a/core/lib/Drupal/Core/Database/TransactionException.php b/core/lib/Drupal/Core/Database/TransactionException.php
index c0380da549..9b580308e1 100644
--- a/core/lib/Drupal/Core/Database/TransactionException.php
+++ b/core/lib/Drupal/Core/Database/TransactionException.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Core\Database;
 
+// @trigger_error('Drupal\\Core\\Database\\TransactionException is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
+
 /**
  * Exception thrown by an error in a database transaction.
  */
diff --git a/core/lib/Drupal/Core/Database/TransactionManager.php b/core/lib/Drupal/Core/Database/TransactionManager.php
new file mode 100644
index 0000000000..836d06cab9
--- /dev/null
+++ b/core/lib/Drupal/Core/Database/TransactionManager.php
@@ -0,0 +1,112 @@
+<?php
+
+namespace Drupal\Core\Database;
+
+use Drupal\Core\Database\Exception\TransactionNameNonUniqueException;
+
+/**
+ * @todo
+ */
+class TransactionManager {
+
+  /**
+   * Tracks the number of "layers" of transactions currently active.
+   *
+   * On many databases transactions cannot nest.  Instead, we track
+   * nested calls to transactions and collapse them into a single
+   * transaction.
+   *
+   * @var array
+   */
+  private array $nestingLayers = [];
+
+  /**
+   * @param Connection $connection
+   *   An object of the client class representing a database connection.
+   */
+  public function __construct(
+    protected readonly Connection $connection,
+  ) {
+  }
+
+  /**
+   * Determines if there is an active transaction open.
+   *
+   * @return bool
+   *   TRUE if we're currently in a transaction, FALSE otherwise.
+   */
+  public function inTransaction(): bool {
+    return $this->currentNestingDepth() > 0;
+  }
+
+  /**
+   * Returns a new Transaction object on the database connection.
+   *
+   * @param string $name
+   *   (optional) The name of the savepoint.
+   *
+   * @return \Drupal\Core\Database\Transaction
+   *   A Transaction object.
+   *
+   * @see \Drupal\Core\Database\Transaction
+   */
+  public function startTransaction(string $name = ''): Transaction {
+    // If there is no transaction depth, then no transaction has started. Name
+    // the transaction 'drupal_transaction'.
+    if ($this->currentNestingDepth() === 0) {
+      $name = 'drupal_transaction';
+    }
+    // Within transactions, savepoints are used. Each savepoint requires a
+    // name. So if no name is present we need to create one.
+    elseif (!$name) {
+      $name = 'savepoint_' . $this->currentNestingDepth();
+    }
+    $transaction = new Transaction($this->connection, $name, $this->currentNestingDepth());
+    $transaction->initialize();
+    $this->push($name);
+    return $transaction;
+  }
+
+  /**
+   * Returns the transaction nesting layers.
+   *
+   * @return int
+   *   The transaction nesting layers.
+   */
+  public function nestingLayers(): array {
+    return $this->nestingLayers;
+  }
+  public function setNestingLayers(array $layers): void {
+    $this->nestingLayers = $layers;
+  }
+
+  /**
+   * Returns the current depth of the transaction nesting.
+   *
+   * @return int
+   *   The current depth of the transaction nesting.
+   */
+  public function currentNestingDepth(): int {
+    return count($this->nestingLayers());
+  }
+
+  /**
+   * Pushes the transaction on the stack.
+   *
+   * This increases the depth of transaction nesting.
+   *
+   * @param string $name
+   *   The name of the transaction.
+   *
+   * @throws \Drupal\Core\Database\Exception\TransactionNameNonUniqueException
+   *
+   * @see \Drupal\Core\Database\Transaction
+   */
+  protected function push(string $name): void {
+    if (isset($this->nestingLayers()[$name])) {
+      throw new TransactionNameNonUniqueException($name . " is already in use.");
+    }
+    $this->nestingLayers[$name] = $name;
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Database/TransactionNameNonUniqueException.php b/core/lib/Drupal/Core/Database/TransactionNameNonUniqueException.php
index 8265620b25..e74039500a 100644
--- a/core/lib/Drupal/Core/Database/TransactionNameNonUniqueException.php
+++ b/core/lib/Drupal/Core/Database/TransactionNameNonUniqueException.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\Core\Database;
 
+@trigger_error('Drupal\\Core\\Database\\TransactionNameNonUniqueException is deprecated in drupal:10.2.0 and is removed from drupal:11.0.0. Instead, @todo. See https://www.drupal.org/node/5555555', E_USER_DEPRECATED);
+
 /**
  * Exception thrown when a savepoint or transaction name occurs twice.
  */
diff --git a/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificTransactionTestBase.php b/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificTransactionTestBase.php
index ebbf60826a..47e718c3df 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificTransactionTestBase.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/DriverSpecificTransactionTestBase.php
@@ -57,7 +57,7 @@ class DriverSpecificTransactionTestBase extends DriverSpecificDatabaseTestBase {
    *   Whether to execute a DDL statement during the inner transaction.
    */
   protected function transactionOuterLayer($suffix, $rollback = FALSE, $ddl_statement = FALSE) {
-    $depth = $this->connection->transactionDepth();
+    $depth = $this->connection->transactionManager()->currentNestingDepth();
     $txn = $this->connection->startTransaction();
 
     // Insert a single row into the testing table.
@@ -80,7 +80,7 @@ protected function transactionOuterLayer($suffix, $rollback = FALSE, $ddl_statem
       // Roll back the transaction, if requested.
       // This rollback should propagate to the last savepoint.
       $txn->rollBack();
-      $this->assertSame($depth, $this->connection->transactionDepth(), 'Transaction has rolled back to the last savepoint after calling rollBack().');
+      $this->assertSame($depth, $this->connection->transactionManager()->currentNestingDepth(), 'Transaction has rolled back to the last savepoint after calling rollBack().');
     }
   }
 
@@ -98,14 +98,14 @@ protected function transactionOuterLayer($suffix, $rollback = FALSE, $ddl_statem
    *   Whether to execute a DDL statement during the transaction.
    */
   protected function transactionInnerLayer($suffix, $rollback = FALSE, $ddl_statement = FALSE) {
-    $depth = $this->connection->transactionDepth();
+    $depth = $this->connection->transactionManager()->currentNestingDepth();
     // Start a transaction. If we're being called from ->transactionOuterLayer,
     // then we're already in a transaction. Normally, that would make starting
     // a transaction here dangerous, but the database API handles this problem
     // for us by tracking the nesting and avoiding the danger.
     $txn = $this->connection->startTransaction();
 
-    $depth2 = $this->connection->transactionDepth();
+    $depth2 = $this->connection->transactionManager()->currentNestingDepth();
     $this->assertGreaterThan($depth, $depth2, 'Transaction depth has increased with new transaction.');
 
     // Insert a single row into the testing table.
@@ -138,7 +138,7 @@ protected function transactionInnerLayer($suffix, $rollback = FALSE, $ddl_statem
       // Roll back the transaction, if requested.
       // This rollback should propagate to the last savepoint.
       $txn->rollBack();
-      $this->assertSame($depth, $this->connection->transactionDepth(), 'Transaction has rolled back to the last savepoint after calling rollBack().');
+      $this->assertSame($depth, $this->connection->transactionManager()->currentNestingDepth(), 'Transaction has rolled back to the last savepoint after calling rollBack().');
     }
   }
 
