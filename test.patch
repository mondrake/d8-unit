diff --git a/core/modules/views/src/Plugin/views/field/EntityField.php b/core/modules/views/src/Plugin/views/field/EntityField.php
index 2c1d76ce44..9e7a2fff4a 100644
--- a/core/modules/views/src/Plugin/views/field/EntityField.php
+++ b/core/modules/views/src/Plugin/views/field/EntityField.php
@@ -850,9 +850,11 @@ public function getItems(ResultRow $values) {
       // Optional relationships may not provide an entity at all. So we can't
       // use createEntityForGroupBy() for those rows.
       if ($entity = $this->getEntity($values)) {
+dump([__METHOD__, 'a - entity', $this->definition['field_name'], isset($entity->{$this->definition['field_name']}) ? get_class($entity->{$this->definition['field_name']}) : 'error!!']);
         $entity = $this->createEntityForGroupBy($entity, $values);
         // Some bundles might not have a specific field, in which case the faked
         // entity doesn't have it either.
+dump([__METHOD__, 'b - forgroupby', $this->definition['field_name'], isset($entity->{$this->definition['field_name']}) ? get_class($entity->{$this->definition['field_name']}) : 'error!!']);
         $build_list = isset($entity->{$this->definition['field_name']}) ? $entity->{$this->definition['field_name']}->view($display) : NULL;
       }
       else {
@@ -860,6 +862,8 @@ public function getItems(ResultRow $values) {
       }
     }
 
+dump([__METHOD__, 'd', $build_list]);
+
     if (!$build_list) {
       return [];
     }
diff --git a/core/modules/views/src/Plugin/views/field/FieldPluginBase.php b/core/modules/views/src/Plugin/views/field/FieldPluginBase.php
index e49be3139d..60edc7fb6c 100644
--- a/core/modules/views/src/Plugin/views/field/FieldPluginBase.php
+++ b/core/modules/views/src/Plugin/views/field/FieldPluginBase.php
@@ -1165,6 +1165,7 @@ public function advancedRender(ResultRow $values) {
     }
     if ($this->allowAdvancedRender() && $this instanceof MultiItemsFieldHandlerInterface) {
       $raw_items = $this->getItems($values);
+dump([__METHOD__, 'b - raw',  $raw_items]);
       // If there are no items, set the original value to NULL.
       if (empty($raw_items)) {
         $this->original_value = NULL;
@@ -1172,6 +1173,7 @@ public function advancedRender(ResultRow $values) {
     }
     else {
       $value = $this->render($values);
+dump([__METHOD__, 'c - render', $value]);
       if (is_array($value)) {
         $value = $this->getRenderer()->render($value);
       }
@@ -1210,6 +1212,7 @@ public function advancedRender(ResultRow $values) {
       $this->last_render = $value;
     }
 
+dump([__METHOD__, 'e ** value', $this->last_render]);
     // String cast is necessary to test emptiness of MarkupInterface
     // objects.
     if (empty((string) $this->last_render)) {
diff --git a/core/modules/views/src/Plugin/views/query/Sql.php b/core/modules/views/src/Plugin/views/query/Sql.php
index 14b335b63f..0f03b38254 100644
--- a/core/modules/views/src/Plugin/views/query/Sql.php
+++ b/core/modules/views/src/Plugin/views/query/Sql.php
@@ -1530,13 +1530,17 @@ public function execute(ViewExecutable $view) {
         }
 
         $result = $query->execute();
-        $result->setFetchMode(\PDO::FETCH_CLASS, 'Drupal\views\ResultRow');
+        $result->setFetchMode(\PDO::FETCH_OBJ);
 
         // Setup the result row objects.
-        $view->result = iterator_to_array($result);
-        array_walk($view->result, function (ResultRow $row, $index) {
-          $row->index = $index;
-        });
+        $i = 0;
+        $view->result = [];
+        foreach ($result as $rowObj) {
+          $view->result[] = new ResultRow([
+            'data' => $rowObj,
+            'index' => $i++,
+          ]);
+        }
 
         $view->pager->postExecute($view->result);
         $view->pager->updatePageInfo();
diff --git a/core/modules/views/src/Plugin/views/style/StylePluginBase.php b/core/modules/views/src/Plugin/views/style/StylePluginBase.php
index f9f77169af..79b732563d 100644
--- a/core/modules/views/src/Plugin/views/style/StylePluginBase.php
+++ b/core/modules/views/src/Plugin/views/style/StylePluginBase.php
@@ -759,6 +759,7 @@ public static function trustedCallbacks() {
   public function elementPreRenderRow(array $data) {
     // Render row fields.
     foreach ($this->view->field as $id => $field) {
+dump([__METHOD__, $id, get_class($field)]);
       $data[$id] = ['#markup' => $field->theme($data['#row'])];
     }
     return $data;
diff --git a/core/modules/views/src/ResultRow.php b/core/modules/views/src/ResultRow.php
index 2399f69983..81e504b2c3 100644
--- a/core/modules/views/src/ResultRow.php
+++ b/core/modules/views/src/ResultRow.php
@@ -5,9 +5,13 @@
 /**
  * A class representing a view result row.
  */
-#[\AllowDynamicProperties]
 class ResultRow {
 
+  /**
+   * Raw row data.
+   */
+  protected \stdClass $data;
+
   /**
    * The entity for this result.
    *
@@ -38,11 +42,25 @@ class ResultRow {
    *   (optional) An array of values to add as properties on the object.
    */
   public function __construct(array $values = []) {
+    if (!isset($values['data'])) {
+      $this->data = new \stdClass();
+    }
+    else {
+      $this->data = $values['data'];
+      unset($values['data']);
+    }
     foreach ($values as $key => $value) {
       $this->{$key} = $value;
     }
   }
 
+  /**
+   * Returns the raw row data.
+   */
+  public function getData(): \stdClass {
+    return $this->data;
+  }
+
   /**
    * Resets the _entity and _relationship_entities properties.
    */
@@ -51,4 +69,55 @@ public function resetEntityData() {
     $this->_relationship_entities = [];
   }
 
+  /**
+   * Implements the magic method for getting object properties.
+   *
+   * @param string $name
+   *   Property name.
+   *
+   * @return mixed
+   *   The value of the property.
+   */
+  public function __get(string $name): mixed {
+    if (property_exists($this->data, $name)) {
+      return $this->data->$name;
+    }
+    throw new \RuntimeException("Property {$name} does not exist");
+  }
+
+  /**
+   * Implements the magic method to determine whether a property is set.
+   *
+   * @param string $name
+   *   Property name.
+   *
+   * @return bool
+   *   True if property is set.
+   */
+  public function __isset(string $name): bool {
+    return isset($this->data->$name);
+  }
+
+  /**
+   * Implements the magic method to set a property.
+   *
+   * @param $name
+   *   Property name.
+   * @param mixed $value
+   *   The value of the property.
+   */
+  public function __set(string $name, mixed $value): void {
+    $this->data->$name = $value;
+  }
+
+  /**
+   * Implements the magic method to unset a property.
+   *
+   * @param $name
+   *   Property name.
+   */
+  public function __unset($name): void {
+    unset($this->data->$name);
+  }
+
 }
diff --git a/core/modules/views/src/Tests/ViewResultAssertionTrait.php b/core/modules/views/src/Tests/ViewResultAssertionTrait.php
index a98c18e647..16dd582afe 100644
--- a/core/modules/views/src/Tests/ViewResultAssertionTrait.php
+++ b/core/modules/views/src/Tests/ViewResultAssertionTrait.php
@@ -77,7 +77,7 @@ protected function assertIdenticalResultsetHelper($view, $expected_result, $colu
     foreach ($view->result as $key => $value) {
       $row = [];
       foreach ($column_map as $view_column => $expected_column) {
-        if (property_exists($value, $view_column)) {
+        if (property_exists($value, $view_column) || property_exists($value->getData(), $view_column)) {
           $row[$expected_column] = (string) $value->$view_column;
         }
         // For entity fields we don't have the raw value. Let's try to fetch it
diff --git a/core/modules/views/views.theme.inc b/core/modules/views/views.theme.inc
index 948f459065..4aabdab6d3 100644
--- a/core/modules/views/views.theme.inc
+++ b/core/modules/views/views.theme.inc
@@ -106,6 +106,7 @@ function template_preprocess_views_view_fields(&$variables) {
   $row = $variables['row'];
   foreach ($view->field as $id => $field) {
     // render this even if set to exclude so it can be used elsewhere.
+dump([__FUNCTION__, $id, $row]);
     $field_output = $view->style_plugin->getField($row->index, $id);
     $empty = $field->isValueEmpty($field_output, $field->options['empty_zero']);
     if (empty($field->options['exclude']) && (!$empty || (empty($field->options['hide_empty']) && empty($variables['options']['hide_empty'])))) {
@@ -236,6 +237,7 @@ function template_preprocess_views_view_grouping(&$variables) {
  */
 function template_preprocess_views_view_field(&$variables) {
   $variables['output'] = $variables['field']->advancedRender($variables['row']);
+dump([__FUNCTION__, get_class($variables['field']), $variables['output']]);
 }
 
 /**
