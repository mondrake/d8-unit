diff --git a/core/modules/action/tests/src/Functional/ConfigurationTest.php b/core/modules/action/tests/src/Functional/ConfigurationTest.php
index 3746426afe..48ebe638fb 100644
--- a/core/modules/action/tests/src/Functional/ConfigurationTest.php
+++ b/core/modules/action/tests/src/Functional/ConfigurationTest.php
@@ -69,7 +69,7 @@ public function testActionConfiguration() {
     // Make sure that the action updated properly.
     $this->assertSession()->pageTextContains('The action has been successfully saved.');
     // The old action label does NOT appear on the configuration page.
-    $this->assertNoText($action_label);
+    $this->assertSession()->pageTextNotContains($action_label);
     // The action label appears on the configuration page after we've updated
     // the complex action.
     $this->assertSession()->pageTextContains($new_action_label);
@@ -91,7 +91,7 @@ public function testActionConfiguration() {
     $this->drupalGet('admin/config/system/actions');
     $this->assertSession()->statusCodeEquals(200);
     // The action label does not appear on the overview page.
-    $this->assertNoText($new_action_label);
+    $this->assertSession()->pageTextNotContains($new_action_label);
 
     $action = Action::load($action_id);
     $this->assertNull($action, 'Make sure the action is gone after being deleted.');
diff --git a/core/modules/aggregator/tests/src/Functional/AggregatorRenderingTest.php b/core/modules/aggregator/tests/src/Functional/AggregatorRenderingTest.php
index ecf7e5e15b..f5bc4d7766 100644
--- a/core/modules/aggregator/tests/src/Functional/AggregatorRenderingTest.php
+++ b/core/modules/aggregator/tests/src/Functional/AggregatorRenderingTest.php
@@ -80,7 +80,7 @@ public function testBlockLinks() {
     $block->save();
     // Check that the block is no longer displayed.
     $this->drupalGet('test-page');
-    $this->assertNoText($block->label());
+    $this->assertSession()->pageTextNotContains($block->label());
   }
 
   /**
diff --git a/core/modules/aggregator/tests/src/Functional/FeedAdminDisplayTest.php b/core/modules/aggregator/tests/src/Functional/FeedAdminDisplayTest.php
index 6cb4a77473..91650bda2a 100644
--- a/core/modules/aggregator/tests/src/Functional/FeedAdminDisplayTest.php
+++ b/core/modules/aggregator/tests/src/Functional/FeedAdminDisplayTest.php
@@ -28,16 +28,16 @@ public function testFeedUpdateFields() {
     // scheduled.
     $this->assertSession()->pageTextContains('never');
     $this->assertSession()->pageTextContains('imminently');
-    $this->assertNoText('ago');
-    $this->assertNoText('left');
+    $this->assertSession()->pageTextNotContains('ago');
+    $this->assertSession()->pageTextNotContains('left');
 
     $this->updateFeedItems($scheduled_feed);
     $this->drupalGet('admin/config/services/aggregator');
 
     // After the update, an interval should be displayed on both last updated
     // and next update.
-    $this->assertNoText('never');
-    $this->assertNoText('imminently');
+    $this->assertSession()->pageTextNotContains('never');
+    $this->assertSession()->pageTextNotContains('imminently');
     $this->assertSession()->pageTextContains('ago');
     $this->assertSession()->pageTextContains('left');
 
@@ -50,9 +50,9 @@ public function testFeedUpdateFields() {
     $this->drupalGet('admin/config/services/aggregator');
     // The non scheduled feed shows that it has not been updated yet.
     $this->assertSession()->pageTextContains('never');
-    $this->assertNoText('imminently');
-    $this->assertNoText('ago');
-    $this->assertNoText('left');
+    $this->assertSession()->pageTextNotContains('imminently');
+    $this->assertSession()->pageTextNotContains('ago');
+    $this->assertSession()->pageTextNotContains('left');
 
     $this->updateFeedItems($non_scheduled_feed);
     $this->drupalGet('admin/config/services/aggregator');
@@ -60,9 +60,9 @@ public function testFeedUpdateFields() {
     // After the feed update, we still need to see "never" as next update label.
     // Last update will show an interval.
     $this->assertSession()->pageTextContains('never');
-    $this->assertNoText('imminently');
+    $this->assertSession()->pageTextNotContains('imminently');
     $this->assertSession()->pageTextContains('ago');
-    $this->assertNoText('left');
+    $this->assertSession()->pageTextNotContains('left');
   }
 
   /**
diff --git a/core/modules/basic_auth/tests/src/Functional/BasicAuthTest.php b/core/modules/basic_auth/tests/src/Functional/BasicAuthTest.php
index a4734aaf82..5748b3ac17 100644
--- a/core/modules/basic_auth/tests/src/Functional/BasicAuthTest.php
+++ b/core/modules/basic_auth/tests/src/Functional/BasicAuthTest.php
@@ -57,7 +57,7 @@ public function testBasicAuth() {
 
     // Ensure that invalid authentication details give access denied.
     $this->basicAuthGet($url, $account->getAccountName(), $this->randomMachineName());
-    $this->assertNoText($account->getAccountName());
+    $this->assertSession()->pageTextNotContains($account->getAccountName());
     $this->assertSession()->statusCodeEquals(403);
     $this->mink->resetSessions();
 
@@ -179,7 +179,7 @@ public function testUnauthorizedErrorMessage() {
     // unauthorized message is displayed.
     $this->drupalGet($url);
     $this->assertSession()->statusCodeEquals(401);
-    $this->assertNoText('Exception');
+    $this->assertSession()->pageTextNotContains('Exception');
     $this->assertSession()->pageTextContains('Please log in to access this page.');
 
     // Case when empty credentials are passed, a user friendly access denied
diff --git a/core/modules/block/tests/src/Functional/BlockCacheTest.php b/core/modules/block/tests/src/Functional/BlockCacheTest.php
index 8d01a18ae8..8ce85cd748 100644
--- a/core/modules/block/tests/src/Functional/BlockCacheTest.php
+++ b/core/modules/block/tests/src/Functional/BlockCacheTest.php
@@ -97,7 +97,7 @@ public function testCachePerRole() {
     // Clear the cache and verify that the stale data is no longer there.
     Cache::invalidateTags(['block_view']);
     $this->drupalGet('');
-    $this->assertNoText($old_content);
+    $this->assertSession()->pageTextNotContains($old_content);
     // Fresh block content is displayed after clearing the cache.
     $this->assertSession()->pageTextContains($current_content);
 
@@ -108,7 +108,7 @@ public function testCachePerRole() {
     $this->drupalLogout();
     $this->drupalGet('');
     // Anonymous user does not see content cached per-role for normal user.
-    $this->assertNoText($old_content);
+    $this->assertSession()->pageTextNotContains($old_content);
 
     // User with the same roles sees per-role cached content.
     $this->drupalLogin($this->normalUserAlt);
@@ -118,7 +118,7 @@ public function testCachePerRole() {
     // Admin user does not see content cached per-role for normal user.
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('');
-    $this->assertNoText($old_content);
+    $this->assertSession()->pageTextNotContains($old_content);
 
     // Block is served from the per-role cache.
     $this->drupalLogin($this->normalUser);
@@ -227,7 +227,7 @@ public function testCachePerPage() {
     $this->assertSession()->statusCodeEquals(200);
     // Verify that block content cached for the test page does not show up
     // for the user page.
-    $this->assertNoText($old_content);
+    $this->assertSession()->pageTextNotContains($old_content);
     $this->drupalGet('test-page');
     $this->assertSession()->statusCodeEquals(200);
     // Verify that the block content is cached for the test page.
diff --git a/core/modules/block/tests/src/Functional/BlockInstallTest.php b/core/modules/block/tests/src/Functional/BlockInstallTest.php
index ad79cb59fd..32b6855a1d 100644
--- a/core/modules/block/tests/src/Functional/BlockInstallTest.php
+++ b/core/modules/block/tests/src/Functional/BlockInstallTest.php
@@ -19,7 +19,7 @@ class BlockInstallTest extends BrowserTestBase {
   public function testCacheTagInvalidationUponInstallation() {
     // Warm the page cache.
     $this->drupalGet('');
-    $this->assertNoText('Powered by Drupal');
+    $this->assertSession()->pageTextNotContains('Powered by Drupal');
     $this->assertSession()->responseHeaderNotContains('X-Drupal-Cache-Tags', 'config:block_list');
 
     // Install the block module, and place the "Powered by Drupal" block.
diff --git a/core/modules/block/tests/src/Functional/BlockLanguageTest.php b/core/modules/block/tests/src/Functional/BlockLanguageTest.php
index 5e431f4d43..e569fcdf6c 100644
--- a/core/modules/block/tests/src/Functional/BlockLanguageTest.php
+++ b/core/modules/block/tests/src/Functional/BlockLanguageTest.php
@@ -81,7 +81,7 @@ public function testLanguageBlockVisibility() {
 
     // Check that a page doesn't has a block for the current language anymore.
     $this->drupalGet('fr');
-    $this->assertNoText('Powered by Drupal');
+    $this->assertSession()->pageTextNotContains('Powered by Drupal');
   }
 
   /**
@@ -156,7 +156,7 @@ public function testMultipleLanguageTypes() {
 
     // Interface negotiation depends on request arguments.
     $this->drupalGet('node', ['query' => ['language' => 'en']]);
-    $this->assertNoText('Powered by Drupal');
+    $this->assertSession()->pageTextNotContains('Powered by Drupal');
     $this->drupalGet('node', ['query' => ['language' => 'fr']]);
     $this->assertSession()->pageTextContains('Powered by Drupal');
 
@@ -168,9 +168,9 @@ public function testMultipleLanguageTypes() {
     // Content language does not depend on session/request arguments.
     // It will fall back on English (site default) and not display the block.
     $this->drupalGet('en');
-    $this->assertNoText('Powered by Drupal');
+    $this->assertSession()->pageTextNotContains('Powered by Drupal');
     $this->drupalGet('fr');
-    $this->assertNoText('Powered by Drupal');
+    $this->assertSession()->pageTextNotContains('Powered by Drupal');
 
     // Change visibility to now depend on content language for this block.
     $edit = [
@@ -181,13 +181,13 @@ public function testMultipleLanguageTypes() {
     // Content language negotiation does not depend on request arguments.
     // It will fall back on English (site default) and not display the block.
     $this->drupalGet('node', ['query' => ['language' => 'en']]);
-    $this->assertNoText('Powered by Drupal');
+    $this->assertSession()->pageTextNotContains('Powered by Drupal');
     $this->drupalGet('node', ['query' => ['language' => 'fr']]);
-    $this->assertNoText('Powered by Drupal');
+    $this->assertSession()->pageTextNotContains('Powered by Drupal');
 
     // Content language negotiation depends on path prefix.
     $this->drupalGet('en');
-    $this->assertNoText('Powered by Drupal');
+    $this->assertSession()->pageTextNotContains('Powered by Drupal');
     $this->drupalGet('fr');
     $this->assertSession()->pageTextContains('Powered by Drupal');
   }
diff --git a/core/modules/block/tests/src/Functional/BlockTest.php b/core/modules/block/tests/src/Functional/BlockTest.php
index 91e1a7f760..36330418dc 100644
--- a/core/modules/block/tests/src/Functional/BlockTest.php
+++ b/core/modules/block/tests/src/Functional/BlockTest.php
@@ -56,15 +56,15 @@ public function testBlockVisibility() {
     // Confirm that the block is not displayed according to block visibility
     // rules.
     $this->drupalGet('user');
-    $this->assertNoText($title);
+    $this->assertSession()->pageTextNotContains($title);
 
     // Confirm that the block is not displayed to anonymous users.
     $this->drupalLogout();
     $this->drupalGet('');
-    $this->assertNoText($title);
+    $this->assertSession()->pageTextNotContains($title);
 
     // Confirm that an empty block is not displayed.
-    $this->assertNoText('Powered by Drupal');
+    $this->assertSession()->pageTextNotContains('Powered by Drupal');
     $this->assertNoRaw('sidebar-first');
   }
 
@@ -127,17 +127,17 @@ public function testBlockVisibilityListedEmpty() {
     // Confirm that block was not displayed according to block visibility
     // rules.
     $this->drupalGet('user');
-    $this->assertNoText($title);
+    $this->assertSession()->pageTextNotContains($title);
 
     // Confirm that block was not displayed according to block visibility
     // rules regardless of path case.
     $this->drupalGet('USER');
-    $this->assertNoText($title);
+    $this->assertSession()->pageTextNotContains($title);
 
     // Confirm that the block is not displayed to anonymous users.
     $this->drupalLogout();
     $this->drupalGet('');
-    $this->assertNoText($title);
+    $this->assertSession()->pageTextNotContains($title);
   }
 
   /**
@@ -226,7 +226,7 @@ public function testBlock() {
 
     // Confirm that the block instance title and markup are not displayed.
     $this->drupalGet('node');
-    $this->assertNoText($block['settings[label]']);
+    $this->assertSession()->pageTextNotContains($block['settings[label]']);
     // Check for <div id="block-my-block-instance-name"> if the machine name
     // is my_block_instance_name.
     $xpath = $this->assertSession()->buildXPathQuery('//div[@id=:id]/*', [':id' => 'block-' . str_replace('_', '-', strtolower($block['id']))]);
@@ -313,7 +313,7 @@ public function testHideBlockTitle() {
 
     // Confirm that the block is not displayed by default.
     $this->drupalGet('user');
-    $this->assertNoText($title);
+    $this->assertSession()->pageTextNotContains($title);
 
     $edit = [
       'settings[label_display]' => TRUE,
@@ -519,7 +519,7 @@ public function testBlockAccess() {
     $this->drupalPlaceBlock('test_access', ['region' => 'help']);
 
     $this->drupalGet('<front>');
-    $this->assertNoText('Hello test world');
+    $this->assertSession()->pageTextNotContains('Hello test world');
 
     \Drupal::state()->set('test_block_access', TRUE);
     $this->drupalGet('<front>');
diff --git a/core/modules/block/tests/src/Functional/BlockUiTest.php b/core/modules/block/tests/src/Functional/BlockUiTest.php
index 30c961ef6e..66ebb623b1 100644
--- a/core/modules/block/tests/src/Functional/BlockUiTest.php
+++ b/core/modules/block/tests/src/Functional/BlockUiTest.php
@@ -215,7 +215,7 @@ public function testContextAwareUnsatisfiedBlocks() {
   public function testContextAwareBlocks() {
     $expected_text = '<div id="test_context_aware--username">' . \Drupal::currentUser()->getAccountName() . '</div>';
     $this->drupalGet('');
-    $this->assertNoText('Test context-aware block');
+    $this->assertSession()->pageTextNotContains('Test context-aware block');
     $this->assertNoRaw($expected_text);
 
     $block_url = 'admin/structure/block/add/test_context_aware/classy';
@@ -258,7 +258,7 @@ public function testContextAwareBlocks() {
     $this->submitForm($edit, 'Save block');
     $this->drupalGet('');
     $this->assertSession()->pageTextContains('No context mapping selected.');
-    $this->assertNoText('User context found.');
+    $this->assertSession()->pageTextNotContains('User context found.');
 
     // Tests that conditions with missing context are not displayed.
     $this->drupalGet('admin/structure/block/manage/testcontextawareblock');
diff --git a/core/modules/block_content/tests/src/Functional/BlockContentCreationTest.php b/core/modules/block_content/tests/src/Functional/BlockContentCreationTest.php
index 4cb0596645..0ae4da9fca 100644
--- a/core/modules/block_content/tests/src/Functional/BlockContentCreationTest.php
+++ b/core/modules/block_content/tests/src/Functional/BlockContentCreationTest.php
@@ -276,7 +276,7 @@ public function testBlockDelete() {
 
     // Show the delete confirm form.
     $this->drupalGet('block/3/delete');
-    $this->assertNoText('This will also remove');
+    $this->assertSession()->pageTextNotContains('This will also remove');
   }
 
   /**
diff --git a/core/modules/block_content/tests/src/Functional/BlockContentRevisionsTest.php b/core/modules/block_content/tests/src/Functional/BlockContentRevisionsTest.php
index 7762fc1e4c..59c556ca5b 100644
--- a/core/modules/block_content/tests/src/Functional/BlockContentRevisionsTest.php
+++ b/core/modules/block_content/tests/src/Functional/BlockContentRevisionsTest.php
@@ -98,7 +98,7 @@ public function testRevisions() {
     // Confirm that revision body text is not present on default version of
     // block.
     $this->drupalGet('block/' . $loaded->id());
-    $this->assertNoText($loaded->body->value);
+    $this->assertSession()->pageTextNotContains($loaded->body->value);
 
     // Verify that the non-default revision id is greater than the default
     // revision id.
diff --git a/core/modules/block_content/tests/src/Functional/BlockContentTypeTest.php b/core/modules/block_content/tests/src/Functional/BlockContentTypeTest.php
index e01e4951e9..20c982fb20 100644
--- a/core/modules/block_content/tests/src/Functional/BlockContentTypeTest.php
+++ b/core/modules/block_content/tests/src/Functional/BlockContentTypeTest.php
@@ -176,7 +176,7 @@ public function testBlockContentTypeDeletion() {
     $this->assertRaw(
       t('%label is used by 1 custom block on your site. You can not remove this block type until you have removed all of the %label blocks.', ['%label' => $type->label()])
     );
-    $this->assertNoText('This action cannot be undone.');
+    $this->assertSession()->pageTextNotContains('This action cannot be undone.');
 
     // Delete the block.
     $block->delete();
diff --git a/core/modules/book/tests/src/Functional/BookTest.php b/core/modules/book/tests/src/Functional/BookTest.php
index f2a7a7a070..b846df2218 100644
--- a/core/modules/book/tests/src/Functional/BookTest.php
+++ b/core/modules/book/tests/src/Functional/BookTest.php
@@ -307,7 +307,7 @@ public function testBookNavigationBlock() {
     // Link to book root.
     $this->assertSession()->pageTextContains($this->book->label());
     // No links to individual book pages.
-    $this->assertNoText($nodes[0]->label());
+    $this->assertSession()->pageTextNotContains($nodes[0]->label());
 
     // Ensure that an unpublished node does not appear in the navigation for a
     // user without access. By unpublishing a parent page, child pages should
@@ -415,7 +415,7 @@ public function testNavigationBlockOnAccessModuleInstalled() {
 
     // Test the 'book pages' block_mode setting.
     $this->drupalGet('<front>');
-    $this->assertNoText($block->label());
+    $this->assertSession()->pageTextNotContains($block->label());
   }
 
   /**
diff --git a/core/modules/comment/tests/src/Functional/CommentAdminTest.php b/core/modules/comment/tests/src/Functional/CommentAdminTest.php
index efef5f8de3..e0bcb7ca64 100644
--- a/core/modules/comment/tests/src/Functional/CommentAdminTest.php
+++ b/core/modules/comment/tests/src/Functional/CommentAdminTest.php
@@ -116,7 +116,7 @@ public function testApprovalAdminInterface() {
     $this->assertSession()->pageTextContains(Html::escape($this->node->label()));
     $this->node->setUnpublished()->save();
     $this->drupalGet('admin/content/comment');
-    $this->assertNoText(Html::escape($this->node->label()));
+    $this->assertSession()->pageTextNotContains(Html::escape($this->node->label()));
   }
 
   /**
diff --git a/core/modules/comment/tests/src/Functional/CommentBlockTest.php b/core/modules/comment/tests/src/Functional/CommentBlockTest.php
index 29ebe8f9c8..1392b0556e 100644
--- a/core/modules/comment/tests/src/Functional/CommentBlockTest.php
+++ b/core/modules/comment/tests/src/Functional/CommentBlockTest.php
@@ -60,7 +60,7 @@ public function testRecentCommentBlock() {
     $this->drupalLogout();
     user_role_revoke_permissions(RoleInterface::ANONYMOUS_ID, ['access comments']);
     $this->drupalGet('');
-    $this->assertNoText('Recent comments');
+    $this->assertSession()->pageTextNotContains('Recent comments');
     user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, ['access comments']);
 
     // Test that a user with the 'access comments' permission can see the
@@ -70,7 +70,7 @@ public function testRecentCommentBlock() {
     $this->assertSession()->pageTextContains('Recent comments');
 
     // Test the only the 10 latest comments are shown and in the proper order.
-    $this->assertNoText($comments[10]->getSubject());
+    $this->assertSession()->pageTextNotContains($comments[10]->getSubject());
     for ($i = 0; $i < 10; $i++) {
       $this->assertSession()->pageTextContains($comments[$i]->getSubject());
       if ($i > 1) {
diff --git a/core/modules/comment/tests/src/Functional/CommentBookTest.php b/core/modules/comment/tests/src/Functional/CommentBookTest.php
index b9be39d688..cb66313edd 100644
--- a/core/modules/comment/tests/src/Functional/CommentBookTest.php
+++ b/core/modules/comment/tests/src/Functional/CommentBookTest.php
@@ -81,7 +81,7 @@ public function testBookCommentPrint() {
     $this->assertSession()->pageTextContains($comment_subject);
     $this->assertSession()->pageTextContains($comment_body);
 
-    $this->assertNoText('Add new comment');
+    $this->assertSession()->pageTextNotContains('Add new comment');
     // Verify that the comment form subject field is not found.
     $this->assertSession()->fieldNotExists('subject[0][value]');
   }
diff --git a/core/modules/comment/tests/src/Functional/CommentFieldsTest.php b/core/modules/comment/tests/src/Functional/CommentFieldsTest.php
index 511138a6b3..06012e6d88 100644
--- a/core/modules/comment/tests/src/Functional/CommentFieldsTest.php
+++ b/core/modules/comment/tests/src/Functional/CommentFieldsTest.php
@@ -180,7 +180,7 @@ public function testCommentFieldCreate() {
     ];
     $this->drupalPostForm('admin/config/people/accounts/fields/user.user.field_user_comment/storage', $edit, 'Save field settings');
     // We shouldn't get an error message.
-    $this->assertNoText('An illegal choice has been detected. Please contact the site administrator.');
+    $this->assertSession()->pageTextNotContains('An illegal choice has been detected. Please contact the site administrator.');
   }
 
   /**
diff --git a/core/modules/comment/tests/src/Functional/CommentInterfaceTest.php b/core/modules/comment/tests/src/Functional/CommentInterfaceTest.php
index 1ecf188ea7..8506f07ba3 100644
--- a/core/modules/comment/tests/src/Functional/CommentInterfaceTest.php
+++ b/core/modules/comment/tests/src/Functional/CommentInterfaceTest.php
@@ -198,7 +198,7 @@ public function testCommentInterface() {
     $this->node = $this->drupalCreateNode(['type' => 'article', 'promote' => 1, 'comment' => [['status' => CommentItemInterface::OPEN]]]);
     $this->assertNotNull($this->node, 'Article node created.');
     $this->drupalGet('comment/reply/node/' . $this->node->id() . '/comment');
-    $this->assertNoText('This discussion is closed');
+    $this->assertSession()->pageTextNotContains('This discussion is closed');
     // Ensure that the comment body field exists.
     $this->assertSession()->fieldExists('edit-comment-body-0-value');
 
diff --git a/core/modules/comment/tests/src/Functional/CommentNonNodeTest.php b/core/modules/comment/tests/src/Functional/CommentNonNodeTest.php
index d3584e46a1..d5d11afa32 100644
--- a/core/modules/comment/tests/src/Functional/CommentNonNodeTest.php
+++ b/core/modules/comment/tests/src/Functional/CommentNonNodeTest.php
@@ -340,7 +340,7 @@ public function testCommentFunctionality() {
     ]);
     $this->drupalLogin($limited_user);
     $this->drupalGet('admin/content/comment');
-    $this->assertNoText($this->entity->label());
+    $this->assertSession()->pageTextNotContains($this->entity->label());
 
     $this->drupalLogout();
 
@@ -395,7 +395,7 @@ public function testCommentFunctionality() {
 
     $this->drupalGet('comment/reply/entity_test/' . $this->entity->id() . '/comment/' . $comment1->id());
     $this->assertSession()->statusCodeEquals(403);
-    $this->assertNoText($comment1->getSubject());
+    $this->assertSession()->pageTextNotContains($comment1->getSubject());
 
     // Test comment field widget changes.
     $limited_user = $this->drupalCreateUser([
diff --git a/core/modules/comment/tests/src/Functional/CommentPagerTest.php b/core/modules/comment/tests/src/Functional/CommentPagerTest.php
index 51e6ab1d81..857eb92c0e 100644
--- a/core/modules/comment/tests/src/Functional/CommentPagerTest.php
+++ b/core/modules/comment/tests/src/Functional/CommentPagerTest.php
@@ -344,7 +344,7 @@ public function testTwoPagers() {
     $this->drupalLogin($account);
     $this->drupalGet('admin/structure/types/manage/article/display');
     // No summary for standard pager.
-    $this->assertNoText('Pager ID: 0');
+    $this->assertSession()->pageTextNotContains('Pager ID: 0');
     $this->assertSession()->pageTextContains('Pager ID: 1');
     $this->submitForm([], 'comment_settings_edit');
     // Change default pager to 2.
@@ -354,7 +354,7 @@ public function testTwoPagers() {
     $this->submitForm([], 'comment_settings_edit');
     $this->submitForm(['fields[comment][settings_edit_form][settings][pager_id]' => 0], 'Save');
     // No summary for standard pager.
-    $this->assertNoText('Pager ID: 0');
+    $this->assertSession()->pageTextNotContains('Pager ID: 0');
 
     $this->drupalLogin($this->adminUser);
 
diff --git a/core/modules/comment/tests/src/Functional/CommentTypeTest.php b/core/modules/comment/tests/src/Functional/CommentTypeTest.php
index a0279747f9..74ad50d549 100644
--- a/core/modules/comment/tests/src/Functional/CommentTypeTest.php
+++ b/core/modules/comment/tests/src/Functional/CommentTypeTest.php
@@ -166,7 +166,7 @@ public function testCommentTypeDeletion() {
         '%field' => 'node.foo',
       ])
     );
-    $this->assertNoText('This action cannot be undone.');
+    $this->assertSession()->pageTextNotContains('This action cannot be undone.');
 
     // Delete the comment and the field.
     $comment->delete();
diff --git a/core/modules/comment/tests/src/Functional/Views/CommentAdminTest.php b/core/modules/comment/tests/src/Functional/Views/CommentAdminTest.php
index 938f247095..7605ec6f7b 100644
--- a/core/modules/comment/tests/src/Functional/Views/CommentAdminTest.php
+++ b/core/modules/comment/tests/src/Functional/Views/CommentAdminTest.php
@@ -167,7 +167,7 @@ public function testApprovalAdminInterface() {
     $this->assertFalse($this->node->isPublished(), 'Node is unpublished now.');
     $this->drupalGet('admin/content/comment');
     // Verify that comment admin cannot see the title of an unpublished node.
-    $this->assertNoText(Html::escape($this->node->label()));
+    $this->assertSession()->pageTextNotContains(Html::escape($this->node->label()));
     $this->drupalLogout();
     $node_access_user = $this->drupalCreateUser([
       'administer comments',
diff --git a/core/modules/comment/tests/src/Functional/Views/CommentRestExportTest.php b/core/modules/comment/tests/src/Functional/Views/CommentRestExportTest.php
index 2695f1bdec..29bcb702f9 100644
--- a/core/modules/comment/tests/src/Functional/Views/CommentRestExportTest.php
+++ b/core/modules/comment/tests/src/Functional/Views/CommentRestExportTest.php
@@ -70,8 +70,8 @@ public function testCommentRestExport() {
 
     // Ensure field-level access is respected - user shouldn't be able to see
     // mail or hostname fields.
-    $this->assertNoText('someone@example.com');
-    $this->assertNoText('public.example.com');
+    $this->assertSession()->responseNotContains('someone@example.com');
+    $this->assertSession()->responseNotContains('public.example.com');
   }
 
 }
diff --git a/core/modules/config/tests/src/Functional/CacheabilityMetadataConfigOverrideIntegrationTest.php b/core/modules/config/tests/src/Functional/CacheabilityMetadataConfigOverrideIntegrationTest.php
index e3aa2b7215..81a70d1b2d 100644
--- a/core/modules/config/tests/src/Functional/CacheabilityMetadataConfigOverrideIntegrationTest.php
+++ b/core/modules/config/tests/src/Functional/CacheabilityMetadataConfigOverrideIntegrationTest.php
@@ -48,7 +48,7 @@ public function testConfigOverride() {
     // Check the default (disabled) state of the cache context. The block label
     // should not be overridden.
     $this->drupalGet('<front>');
-    $this->assertNoText('Overridden block label');
+    $this->assertSession()->pageTextNotContains('Overridden block label');
 
     // Both the cache context and tag should be present.
     $this->assertCacheContext('config_override_integration_test');
diff --git a/core/modules/config/tests/src/Functional/ConfigDependencyWebTest.php b/core/modules/config/tests/src/Functional/ConfigDependencyWebTest.php
index f857c16b7b..f195456933 100644
--- a/core/modules/config/tests/src/Functional/ConfigDependencyWebTest.php
+++ b/core/modules/config/tests/src/Functional/ConfigDependencyWebTest.php
@@ -66,10 +66,10 @@ public function testConfigDependencyDeleteFormTrait() {
     $entity2->save();
 
     $this->drupalGet($entity2->toUrl('delete-form'));
-    $this->assertNoText('Configuration updates');
-    $this->assertNoText('Configuration deletions');
+    $this->assertSession()->pageTextNotContains('Configuration updates');
+    $this->assertSession()->pageTextNotContains('Configuration deletions');
     $this->drupalGet($entity1->toUrl('delete-form'));
-    $this->assertNoText('Configuration updates');
+    $this->assertSession()->pageTextNotContains('Configuration updates');
     $this->assertSession()->pageTextContains('Configuration deletions');
     $this->assertSession()->pageTextContains($entity2->id());
     $this->drupalPostForm($entity1->toUrl('delete-form'), [], 'Delete');
@@ -118,10 +118,10 @@ public function testConfigDependencyDeleteFormTrait() {
 
     $this->drupalGet($entity1->toUrl('delete-form'));
     $this->assertSession()->pageTextContains('Configuration updates');
-    $this->assertNoText('Configuration deletions');
-    $this->assertNoText($entity2->id());
+    $this->assertSession()->pageTextNotContains('Configuration deletions');
+    $this->assertSession()->pageTextNotContains($entity2->id());
     $this->assertSession()->pageTextContains($entity2->label());
-    $this->assertNoText($entity3->id());
+    $this->assertSession()->pageTextNotContains($entity3->id());
     $this->drupalPostForm($entity1->toUrl('delete-form'), [], 'Delete');
     $storage->resetCache();
     $this->assertNull($storage->load('entity1'), 'Test entity 1 deleted');
diff --git a/core/modules/config/tests/src/Functional/ConfigEntityFormOverrideTest.php b/core/modules/config/tests/src/Functional/ConfigEntityFormOverrideTest.php
index a363649a49..bd2fcdece8 100644
--- a/core/modules/config/tests/src/Functional/ConfigEntityFormOverrideTest.php
+++ b/core/modules/config/tests/src/Functional/ConfigEntityFormOverrideTest.php
@@ -48,12 +48,12 @@ public function testFormsWithOverrides() {
     // Test that the original label on the listing page is intact.
     $this->drupalGet('admin/structure/config_test');
     $this->assertSession()->pageTextContains($original_label);
-    $this->assertNoText($overridden_label);
+    $this->assertSession()->pageTextNotContains($overridden_label);
 
     // Test that the original label on the editing page is intact.
     $this->drupalGet('admin/structure/config_test/manage/dotted.default');
     $this->assertSession()->fieldValueEquals('label', $original_label);
-    $this->assertNoText($overridden_label);
+    $this->assertSession()->pageTextNotContains($overridden_label);
 
     // Change to a new label and test that the listing now has the edited label.
     $edit = [
@@ -61,7 +61,7 @@ public function testFormsWithOverrides() {
     ];
     $this->submitForm($edit, 'Save');
     $this->drupalGet('admin/structure/config_test');
-    $this->assertNoText($overridden_label);
+    $this->assertSession()->pageTextNotContains($overridden_label);
     $this->assertSession()->pageTextContains($edited_label);
 
     // Test that the editing page now has the edited label.
diff --git a/core/modules/config/tests/src/Functional/ConfigEntityTest.php b/core/modules/config/tests/src/Functional/ConfigEntityTest.php
index 4c911f6355..c4a8d800b4 100644
--- a/core/modules/config/tests/src/Functional/ConfigEntityTest.php
+++ b/core/modules/config/tests/src/Functional/ConfigEntityTest.php
@@ -271,7 +271,7 @@ public function testCRUDUI() {
     $this->assertSession()->statusCodeEquals(200);
     $this->assertNoRaw($message_update);
     $this->assertRaw($message_delete);
-    $this->assertNoText($label1);
+    $this->assertSession()->pageTextNotContains($label1);
     $this->assertSession()->linkByHrefNotExists("admin/structure/config_test/manage/$id");
 
     // Re-create a configuration entity.
@@ -293,8 +293,8 @@ public function testCRUDUI() {
     $this->drupalPostForm("admin/structure/config_test/manage/$id", $edit, 'Save');
     $this->assertSession()->addressEquals('admin/structure/config_test');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertNoText($label1);
-    $this->assertNoText($label2);
+    $this->assertSession()->pageTextNotContains($label1);
+    $this->assertSession()->pageTextNotContains($label2);
     $this->assertSession()->pageTextContains($label3);
     $this->assertSession()->linkByHrefNotExists("admin/structure/config_test/manage/$id");
     $id = $edit['id'];
diff --git a/core/modules/config/tests/src/Functional/ConfigExportImportUITest.php b/core/modules/config/tests/src/Functional/ConfigExportImportUITest.php
index 56ae073421..f70f6f05ff 100644
--- a/core/modules/config/tests/src/Functional/ConfigExportImportUITest.php
+++ b/core/modules/config/tests/src/Functional/ConfigExportImportUITest.php
@@ -91,7 +91,7 @@ protected function setUp(): void {
   public function testExportImport() {
     // After installation there is no snapshot and nothing to import.
     $this->drupalGet('admin/config/development/configuration');
-    $this->assertNoText('Warning message');
+    $this->assertSession()->pageTextNotContains('Warning message');
     $this->assertSession()->pageTextContains('There are no configuration changes to import.');
 
     $this->originalSlogan = $this->config('system.site')->get('slogan');
@@ -168,13 +168,13 @@ public function testExportImport() {
     file_put_contents($filename, $this->tarball);
     $this->drupalPostForm('admin/config/development/configuration/full/import', ['files[import_tarball]' => $filename], 'Upload');
     // There is no snapshot yet because an import has never run.
-    $this->assertNoText('Warning message');
-    $this->assertNoText('There are no configuration changes to import.');
+    $this->assertSession()->pageTextNotContains('Warning message');
+    $this->assertSession()->pageTextNotContains('There are no configuration changes to import.');
     $this->assertSession()->pageTextContains($this->contentType->label());
 
     $this->submitForm([], 'Import all');
     // After importing the snapshot has been updated and there are no warnings.
-    $this->assertNoText('Warning message');
+    $this->assertSession()->pageTextNotContains('Warning message');
     $this->assertSession()->pageTextContains('There are no configuration changes to import.');
 
     $this->assertEquals($this->newSlogan, $this->config('system.site')->get('slogan'));
@@ -195,8 +195,8 @@ public function testExportImport() {
     // active and snapshot should no longer exist.
     \Drupal::service('config.storage.sync')->deleteAll();
     $this->drupalGet('admin/config/development/configuration');
-    $this->assertNoText('Warning message');
-    $this->assertNoText('The following items in your active configuration have changes since the last import that may be lost on the next import.');
+    $this->assertSession()->pageTextNotContains('Warning message');
+    $this->assertSession()->pageTextNotContains('The following items in your active configuration have changes since the last import that may be lost on the next import.');
     $this->assertSession()->pageTextContains('There are no configuration changes to import.');
     // Write a file to sync. The warning about differences between the active
     // and snapshot should now exist.
@@ -278,7 +278,7 @@ public function testExportImportCollections() {
     $this->drupalPostForm('admin/config/development/configuration/full/import', ['files[import_tarball]' => $filename], 'Upload');
     // Verify that there are configuration differences to import.
     $this->drupalGet('admin/config/development/configuration');
-    $this->assertNoText('There are no configuration changes to import.');
+    $this->assertSession()->pageTextNotContains('There are no configuration changes to import.');
     $this->assertSession()->pageTextContains('collection.test1 configuration collection');
     $this->assertSession()->pageTextContains('collection.test2 configuration collection');
     $this->assertSession()->pageTextContains('config_test.create');
diff --git a/core/modules/config/tests/src/Functional/ConfigImportUITest.php b/core/modules/config/tests/src/Functional/ConfigImportUITest.php
index 3318afaa4c..34edc3498b 100644
--- a/core/modules/config/tests/src/Functional/ConfigImportUITest.php
+++ b/core/modules/config/tests/src/Functional/ConfigImportUITest.php
@@ -236,7 +236,7 @@ public function testImportLock() {
 
     // Verify that there are configuration differences to import.
     $this->drupalGet('admin/config/development/configuration');
-    $this->assertNoText('There are no configuration changes to import.');
+    $this->assertSession()->pageTextNotContains('There are no configuration changes to import.');
 
     // Acquire a fake-lock on the import mechanism.
     $config_importer = $this->configImporter();
@@ -360,7 +360,7 @@ public function testImportValidation() {
     $this->prepareSiteNameUpdate($new_site_name);
 
     $this->drupalGet('admin/config/development/configuration');
-    $this->assertNoText('There are no configuration changes to import.');
+    $this->assertSession()->pageTextNotContains('There are no configuration changes to import.');
     $this->submitForm([], 'Import all');
 
     // Verify that the validation messages appear.
@@ -437,13 +437,13 @@ public function testImportErrorLog() {
     $sync->write($name_secondary, $values_secondary);
     // Verify that there are configuration differences to import.
     $this->drupalGet('admin/config/development/configuration');
-    $this->assertNoText('There are no configuration changes to import.');
+    $this->assertSession()->pageTextNotContains('There are no configuration changes to import.');
 
     // Attempt to import configuration and verify that an error message appears.
     $this->submitForm([], 'Import all');
     $this->assertSession()->pageTextContains('Deleted and replaced configuration entity "' . $name_secondary . '"');
     $this->assertSession()->pageTextContains('The configuration was imported with errors.');
-    $this->assertNoText('The configuration was imported successfully.');
+    $this->assertSession()->pageTextNotContains('The configuration was imported successfully.');
     $this->assertSession()->pageTextContains('There are no configuration changes to import.');
   }
 
@@ -484,11 +484,11 @@ public function testEntityBundleDelete() {
     $this->submitForm([], 'Import all');
     $this->assertNoRaw($validation_message);
     $this->assertSession()->pageTextContains('There are no configuration changes to import.');
-    $this->assertNoText('node.type.' . $node_type->id());
-    $this->assertNoText('field.field.node.' . $node_type->id() . '.body');
-    $this->assertNoText('core.entity_view_display.node.' . $node_type->id() . '.teaser');
-    $this->assertNoText('core.entity_view_display.node.' . $node_type->id() . '.default');
-    $this->assertNoText('core.entity_form_display.node.' . $node_type->id() . '.default');
+    $this->assertSession()->pageTextNotContains('node.type.' . $node_type->id());
+    $this->assertSession()->pageTextNotContains('field.field.node.' . $node_type->id() . '.body');
+    $this->assertSession()->pageTextNotContains('core.entity_view_display.node.' . $node_type->id() . '.teaser');
+    $this->assertSession()->pageTextNotContains('core.entity_view_display.node.' . $node_type->id() . '.default');
+    $this->assertSession()->pageTextNotContains('core.entity_form_display.node.' . $node_type->id() . '.default');
   }
 
   /**
diff --git a/core/modules/config/tests/src/Functional/ConfigLanguageOverrideWebTest.php b/core/modules/config/tests/src/Functional/ConfigLanguageOverrideWebTest.php
index 2c3882deea..3a49d27425 100644
--- a/core/modules/config/tests/src/Functional/ConfigLanguageOverrideWebTest.php
+++ b/core/modules/config/tests/src/Functional/ConfigLanguageOverrideWebTest.php
@@ -68,7 +68,7 @@ public function testSiteNameTranslation() {
 
     // The home page in English should not have the override.
     $this->drupalGet('');
-    $this->assertNoText('XX site name');
+    $this->assertSession()->pageTextNotContains('XX site name');
 
     // During path resolution the system.site configuration object is used to
     // determine the front page. This occurs before language negotiation causing
diff --git a/core/modules/config/tests/src/Functional/TransformedConfigExportImportUITest.php b/core/modules/config/tests/src/Functional/TransformedConfigExportImportUITest.php
index 625bf44839..96380ca549 100644
--- a/core/modules/config/tests/src/Functional/TransformedConfigExportImportUITest.php
+++ b/core/modules/config/tests/src/Functional/TransformedConfigExportImportUITest.php
@@ -48,8 +48,8 @@ protected function setUp(): void {
   public function testTransformedExportImport() {
     // After installation there is no snapshot but a new site name.
     $this->drupalGet('admin/config/development/configuration');
-    $this->assertNoText('Warning message');
-    $this->assertNoText('There are no configuration changes to import.');
+    $this->assertSession()->pageTextNotContains('Warning message');
+    $this->assertSession()->pageTextNotContains('There are no configuration changes to import.');
 
     // Tests changes of system.site.
     $this->drupalGet('admin/config/development/configuration/sync/diff/system.site');
diff --git a/core/modules/config_translation/tests/src/Functional/ConfigTranslationOverviewTest.php b/core/modules/config_translation/tests/src/Functional/ConfigTranslationOverviewTest.php
index 0a8dc7959e..535f7e4e33 100644
--- a/core/modules/config_translation/tests/src/Functional/ConfigTranslationOverviewTest.php
+++ b/core/modules/config_translation/tests/src/Functional/ConfigTranslationOverviewTest.php
@@ -173,7 +173,7 @@ public function testListingPageWithOverrides() {
     // Test that the original label on the listing page is intact.
     $this->drupalGet('admin/config/regional/config-translation/config_test');
     $this->assertSession()->pageTextContains($original_label);
-    $this->assertNoText($overridden_label);
+    $this->assertSession()->pageTextNotContains($overridden_label);
   }
 
   /**
diff --git a/core/modules/config_translation/tests/src/Functional/ConfigTranslationUiTest.php b/core/modules/config_translation/tests/src/Functional/ConfigTranslationUiTest.php
index ec995c60c4..58a145149e 100644
--- a/core/modules/config_translation/tests/src/Functional/ConfigTranslationUiTest.php
+++ b/core/modules/config_translation/tests/src/Functional/ConfigTranslationUiTest.php
@@ -214,18 +214,18 @@ public function testSiteInformationTranslationUi() {
     // Ensure that the label is in French (and not in English).
     $this->drupalGet("fr/$translation_base_url/fr/edit");
     $this->assertSession()->pageTextContains($fr_site_name_label);
-    $this->assertNoText($site_name_label);
+    $this->assertSession()->pageTextNotContains($site_name_label);
 
     // Ensure that the label is also in French (and not in English)
     // when editing another language with the interface in French.
     $this->drupalGet("fr/$translation_base_url/ta/edit");
     $this->assertSession()->pageTextContains($fr_site_name_label);
-    $this->assertNoText($site_name_label);
+    $this->assertSession()->pageTextNotContains($site_name_label);
 
     // Ensure that the label is not translated when the interface is in English.
     $this->drupalGet("$translation_base_url/fr/edit");
     $this->assertSession()->pageTextContains($site_name_label);
-    $this->assertNoText($fr_site_name_label);
+    $this->assertSession()->pageTextNotContains($fr_site_name_label);
   }
 
   /**
@@ -263,8 +263,8 @@ public function testSourceValueDuplicateSave() {
     $this->drupalGet("$translation_base_url/fr/edit");
     // Assert that the language configuration does not leak outside of the
     // translation form into the actual site name and slogan.
-    $this->assertNoText('FR ' . $site_name);
-    $this->assertNoText('FR ' . $site_slogan);
+    $this->assertSession()->pageTextNotContains('FR ' . $site_name);
+    $this->assertSession()->pageTextNotContains('FR ' . $site_slogan);
     $edit = [
       'translation[config_names][system.site][name]' => $site_name,
       'translation[config_names][system.site][slogan]' => 'FR ' . $site_slogan,
@@ -279,7 +279,7 @@ public function testSourceValueDuplicateSave() {
 
     // Case 3: Keep default value for site name and slogan.
     $this->drupalGet("$translation_base_url/fr/edit");
-    $this->assertNoText('FR ' . $site_slogan);
+    $this->assertSession()->pageTextNotContains('FR ' . $site_slogan);
     $edit = [
       'translation[config_names][system.site][name]' => $site_name,
       'translation[config_names][system.site][slogan]' => $site_slogan,
@@ -891,8 +891,8 @@ public function testAlterInfo() {
     // Check if the translation page does not have the altered out settings.
     $this->drupalGet('admin/config/people/accounts/translate/fr/add');
     $this->assertSession()->pageTextContains('Name');
-    $this->assertNoText('Account cancellation confirmation');
-    $this->assertNoText('Password recovery');
+    $this->assertSession()->pageTextNotContains('Account cancellation confirmation');
+    $this->assertSession()->pageTextNotContains('Password recovery');
   }
 
   /**
diff --git a/core/modules/contact/tests/src/Functional/ContactPersonalTest.php b/core/modules/contact/tests/src/Functional/ContactPersonalTest.php
index 09951b0faa..d28c97cec4 100644
--- a/core/modules/contact/tests/src/Functional/ContactPersonalTest.php
+++ b/core/modules/contact/tests/src/Functional/ContactPersonalTest.php
@@ -276,7 +276,7 @@ public function testPersonalContactFlood() {
     // Test that the admin user can still access the contact form even though
     // the flood limit was reached.
     $this->drupalLogin($this->adminUser);
-    $this->assertNoText('Try again later.');
+    $this->assertSession()->pageTextNotContains('Try again later.');
   }
 
   /**
diff --git a/core/modules/contact/tests/src/Functional/ContactSitewideTest.php b/core/modules/contact/tests/src/Functional/ContactSitewideTest.php
index abbe71420c..a8faa104c1 100644
--- a/core/modules/contact/tests/src/Functional/ContactSitewideTest.php
+++ b/core/modules/contact/tests/src/Functional/ContactSitewideTest.php
@@ -213,7 +213,8 @@ public function testSiteWideContact() {
     $this->drupalLogout();
     $this->drupalGet('contact');
     $this->assertSession()->pageTextContains('Your email address');
-    $this->assertNoText('Form');
+dump($this->getSession()->getPage()->getText());
+    $this->assertSession()->pageTextNotContains('Form');
     $this->drupalLogin($admin_user);
 
     // Add more forms.
@@ -225,7 +226,7 @@ public function testSiteWideContact() {
 
     // Try adding a form that already exists.
     $this->addContactForm($name, $label, '', '', FALSE);
-    $this->assertNoText("Contact form $label has been added.");
+    $this->assertSession()->pageTextNotContains("Contact form $label has been added.");
     $this->assertRaw(t('The machine-readable name is already in use. It must be unique.'));
 
     $this->drupalLogout();
@@ -484,7 +485,7 @@ public function testAutoReply() {
       ->removeComponent('mail')
       ->save();
     $this->submitContact($this->randomMachineName(16), $email, $this->randomString(64), 'foo', $this->randomString(128));
-    $this->assertNoText('Unable to send email. Contact the site administrator if the problem persists.');
+    $this->assertSession()->pageTextNotContains('Unable to send email. Contact the site administrator if the problem persists.');
     $captured_emails = $this->getMails(['id' => 'contact_page_autoreply', 'to' => $email]);
     $this->assertCount(0, $captured_emails);
     $this->drupalLogin($admin_user);
diff --git a/core/modules/contact/tests/src/Functional/ContactStorageTest.php b/core/modules/contact/tests/src/Functional/ContactStorageTest.php
index a2671caf15..ae67387b77 100644
--- a/core/modules/contact/tests/src/Functional/ContactStorageTest.php
+++ b/core/modules/contact/tests/src/Functional/ContactStorageTest.php
@@ -61,7 +61,7 @@ public function testContactStorage() {
     $this->drupalLogout();
     $this->drupalGet('contact');
     $this->assertSession()->pageTextContains('Your email address');
-    $this->assertNoText('Form');
+    $this->assertSession()->pageTextNotContains('Form');
     $this->submitContact($name = $this->randomMachineName(16), $mail, $subject = $this->randomMachineName(16), $id, $message = $this->randomMachineName(64));
     $this->assertSession()->pageTextContains('Your message has been sent.');
 
diff --git a/core/modules/content_moderation/tests/src/Functional/ModerationFormTest.php b/core/modules/content_moderation/tests/src/Functional/ModerationFormTest.php
index 3c668bc233..668b5991d1 100644
--- a/core/modules/content_moderation/tests/src/Functional/ModerationFormTest.php
+++ b/core/modules/content_moderation/tests/src/Functional/ModerationFormTest.php
@@ -209,7 +209,7 @@ public function testNonBundleModerationForm() {
     // default revision.
     $this->drupalGet('entity_test_mulrevpub/manage/1');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertNoText('Status');
+    $this->assertSession()->pageTextNotContains('Status');
 
     // The latest version page should not show, because there is still no
     // pending revision.
@@ -223,7 +223,7 @@ public function testNonBundleModerationForm() {
     // default revision.
     $this->drupalGet('entity_test_mulrevpub/manage/1');
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertNoText('Status');
+    $this->assertSession()->pageTextNotContains('Status');
 
     // The latest version page should show the moderation form and have "Draft"
     // status, because the pending revision is in "Draft".
diff --git a/core/modules/content_moderation/tests/src/Functional/ModerationStateNodeTest.php b/core/modules/content_moderation/tests/src/Functional/ModerationStateNodeTest.php
index 5b4ec6cea7..ed184bf047 100644
--- a/core/modules/content_moderation/tests/src/Functional/ModerationStateNodeTest.php
+++ b/core/modules/content_moderation/tests/src/Functional/ModerationStateNodeTest.php
@@ -53,7 +53,7 @@ public function testCreatingContent() {
     $this->assertEquals('published', $node->moderation_state->value);
 
     // Verify that the state field is not shown.
-    $this->assertNoText('Published');
+    $this->assertSession()->pageTextNotContains('Published');
 
     // Delete the node.
     $this->drupalPostForm('node/' . $node->id() . '/delete', [], 'Delete');
diff --git a/core/modules/content_moderation/tests/src/Functional/WorkspaceContentModerationIntegrationTest.php b/core/modules/content_moderation/tests/src/Functional/WorkspaceContentModerationIntegrationTest.php
index dcaaf7ef88..5c874b1a99 100644
--- a/core/modules/content_moderation/tests/src/Functional/WorkspaceContentModerationIntegrationTest.php
+++ b/core/modules/content_moderation/tests/src/Functional/WorkspaceContentModerationIntegrationTest.php
@@ -65,8 +65,8 @@ public function testModerationInWorkspace() {
     // Check that neither of them are visible in Live.
     $this->switchToLive();
     $this->drupalGet('<front>');
-    $this->assertNoText('First article');
-    $this->assertNoText('Second article');
+    $this->assertSession()->pageTextNotContains('First article');
+    $this->assertSession()->pageTextNotContains('Second article');
 
     // Switch back to Stage.
     $this->switchToWorkspace($stage);
diff --git a/core/modules/content_translation/tests/src/Functional/ContentTranslationSettingsTest.php b/core/modules/content_translation/tests/src/Functional/ContentTranslationSettingsTest.php
index d79d96ee5d..83320f047b 100644
--- a/core/modules/content_translation/tests/src/Functional/ContentTranslationSettingsTest.php
+++ b/core/modules/content_translation/tests/src/Functional/ContentTranslationSettingsTest.php
@@ -299,7 +299,7 @@ public function testFieldTranslatableSettingsUI() {
     $this->drupalGet($path);
     $this->assertSession()->fieldEnabled('edit-translatable');
     $this->assertSession()->checkboxChecked('edit-translatable');
-    $this->assertNoText('To enable translation of this field, enable language support for this type.');
+    $this->assertSession()->pageTextNotContains('To enable translation of this field, enable language support for this type.');
   }
 
   /**
diff --git a/core/modules/content_translation/tests/src/Functional/ContentTranslationUITestBase.php b/core/modules/content_translation/tests/src/Functional/ContentTranslationUITestBase.php
index 4546d51435..ebd5316ee3 100644
--- a/core/modules/content_translation/tests/src/Functional/ContentTranslationUITestBase.php
+++ b/core/modules/content_translation/tests/src/Functional/ContentTranslationUITestBase.php
@@ -90,7 +90,7 @@ protected function doTestBasicTranslation() {
     $this->assertCacheContexts($this->defaultCacheContexts);
 
     $this->drupalGet($entity->toUrl('drupal:content-translation-overview'));
-    $this->assertNoText('Source language');
+    $this->assertSession()->pageTextNotContains('Source language');
 
     $translation = $this->getTranslation($entity, $default_langcode);
     foreach ($values[$default_langcode] as $property => $value) {
@@ -163,7 +163,7 @@ protected function doTestBasicTranslation() {
     $storage->resetCache([$this->entityId]);
     $entity = $storage->load($this->entityId);
     $this->drupalGet($entity->toUrl('drupal:content-translation-overview'));
-    $this->assertNoText('Source language');
+    $this->assertSession()->pageTextNotContains('Source language');
 
     // Switch the source language.
     $langcode = 'fr';
diff --git a/core/modules/field/tests/src/Functional/Boolean/BooleanFieldTest.php b/core/modules/field/tests/src/Functional/Boolean/BooleanFieldTest.php
index 69abdc30c0..589ce8af38 100644
--- a/core/modules/field/tests/src/Functional/Boolean/BooleanFieldTest.php
+++ b/core/modules/field/tests/src/Functional/Boolean/BooleanFieldTest.php
@@ -137,7 +137,7 @@ public function testBooleanField() {
     $this->drupalGet('entity_test/add');
     $this->assertSession()->fieldValueEquals("{$field_name}[value]", '');
     $this->assertRaw($on);
-    $this->assertNoText($this->field->label());
+    $this->assertSession()->pageTextNotContains($this->field->label());
 
     // Test if we can change the on label.
     $on = $this->randomMachineName();
diff --git a/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceFieldTranslatedReferenceViewTest.php b/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceFieldTranslatedReferenceViewTest.php
index 2e0286c5ea..230deeffb0 100644
--- a/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceFieldTranslatedReferenceViewTest.php
+++ b/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceFieldTranslatedReferenceViewTest.php
@@ -182,10 +182,10 @@ protected function assertEntityReferenceDisplay() {
     $this->drupalGet($url);
     $this->assertSession()->pageTextContains($this->labelOfNotTranslatedReference);
     $this->assertSession()->pageTextContains($this->originalLabel);
-    $this->assertNoText($this->translatedLabel);
+    $this->assertSession()->pageTextNotContains($this->translatedLabel);
     $this->drupalGet($translation_url);
     $this->assertSession()->pageTextContains($this->labelOfNotTranslatedReference);
-    $this->assertNoText($this->originalLabel);
+    $this->assertSession()->pageTextNotContains($this->originalLabel);
     $this->assertSession()->pageTextContains($this->translatedLabel);
   }
 
diff --git a/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceXSSTest.php b/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceXSSTest.php
index 2f00103603..e45a903dad 100644
--- a/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceXSSTest.php
+++ b/core/modules/field/tests/src/Functional/EntityReference/EntityReferenceXSSTest.php
@@ -77,7 +77,7 @@ public function testEntityReferenceXSS() {
     $this->drupalGet('node/add/article');
     $this->assertSession()->assertEscaped($referenced_node->getTitle());
     // options_buttons does not support optgroups.
-    $this->assertNoText('bundle with markup');
+    $this->assertSession()->pageTextNotContains('bundle with markup');
   }
 
 }
diff --git a/core/modules/field/tests/src/Functional/FieldAccessTest.php b/core/modules/field/tests/src/Functional/FieldAccessTest.php
index d28dd2734e..46594e9618 100644
--- a/core/modules/field/tests/src/Functional/FieldAccessTest.php
+++ b/core/modules/field/tests/src/Functional/FieldAccessTest.php
@@ -92,7 +92,7 @@ public function testFieldAccess() {
     // specifically target the 'test_view_field' field.
     $this->drupalLogout();
     $this->drupalGet('node/' . $this->node->id());
-    $this->assertNoText($this->testViewFieldValue);
+    $this->assertSession()->pageTextNotContains($this->testViewFieldValue);
   }
 
 }
diff --git a/core/modules/field/tests/src/Functional/FieldImportDeleteUninstallUiTest.php b/core/modules/field/tests/src/Functional/FieldImportDeleteUninstallUiTest.php
index c2f9a51ba2..38ed9b0d7f 100644
--- a/core/modules/field/tests/src/Functional/FieldImportDeleteUninstallUiTest.php
+++ b/core/modules/field/tests/src/Functional/FieldImportDeleteUninstallUiTest.php
@@ -117,7 +117,7 @@ public function testImportDeleteUninstall() {
     // This will purge all the data, delete the field and uninstall the
     // Telephone and Text modules.
     $this->submitForm([], 'Import all');
-    $this->assertNoText('Field data will be deleted by this synchronization.');
+    $this->assertSession()->pageTextNotContains('Field data will be deleted by this synchronization.');
     $this->rebuildContainer();
     $this->assertFalse(\Drupal::moduleHandler()->moduleExists('telephone'));
     $this->assertNull(\Drupal::service('entity.repository')->loadEntityByUuid('field_storage_config', $field_storage->uuid()), 'The telephone field has been deleted by the configuration synchronization');
diff --git a/core/modules/field/tests/src/Functional/FormTest.php b/core/modules/field/tests/src/Functional/FormTest.php
index 15f91e9fa0..36f5396e18 100644
--- a/core/modules/field/tests/src/Functional/FormTest.php
+++ b/core/modules/field/tests/src/Functional/FormTest.php
@@ -128,10 +128,10 @@ public function testFieldFormSingle() {
 
     // Check that hook_field_widget_single_element_form_alter() does not believe
     // this is the default value form.
-    $this->assertNoText('From hook_field_widget_single_element_form_alter(): Default form is true.');
+    $this->assertSession()->pageTextNotContains('From hook_field_widget_single_element_form_alter(): Default form is true.');
     // Check that hook_field_widget_single_element_form_alter() does not believe
     // this is the default value form.
-    $this->assertNoText('From hook_field_widget_complete_form_alter(): Default form is true.');
+    $this->assertSession()->pageTextNotContains('From hook_field_widget_complete_form_alter(): Default form is true.');
 
     // Submit with invalid value (field-level validation).
     $edit = [
diff --git a/core/modules/field/tests/src/Functional/ReEnableModuleFieldTest.php b/core/modules/field/tests/src/Functional/ReEnableModuleFieldTest.php
index efb517c098..ce6f0eaa26 100644
--- a/core/modules/field/tests/src/Functional/ReEnableModuleFieldTest.php
+++ b/core/modules/field/tests/src/Functional/ReEnableModuleFieldTest.php
@@ -129,8 +129,8 @@ public function testReEnabledField() {
     $this->drupalGet('admin/modules/uninstall');
     $this->assertSession()->pageTextContains('Fields pending deletion');
     $this->cronRun();
-    $this->assertNoText("The Telephone number field type is used in the following field: node.field_telephone");
-    $this->assertNoText('Fields pending deletion');
+    $this->assertSession()->pageTextNotContains("The Telephone number field type is used in the following field: node.field_telephone");
+    $this->assertSession()->pageTextNotContains('Fields pending deletion');
   }
 
 }
diff --git a/core/modules/field_ui/tests/src/Functional/FieldUIDeleteTest.php b/core/modules/field_ui/tests/src/Functional/FieldUIDeleteTest.php
index 1feba73713..dcbf5803e8 100644
--- a/core/modules/field_ui/tests/src/Functional/FieldUIDeleteTest.php
+++ b/core/modules/field_ui/tests/src/Functional/FieldUIDeleteTest.php
@@ -107,9 +107,9 @@ public function testDeleteField() {
     // Check the config dependencies of the first field, the field storage must
     // not be shown as being deleted yet.
     $this->drupalGet("$bundle_path1/fields/node.$type_name1.$field_name/delete");
-    $this->assertNoText('The listed configuration will be deleted.');
-    $this->assertNoText('View');
-    $this->assertNoText('test_view_field_delete');
+    $this->assertSession()->pageTextNotContains('The listed configuration will be deleted.');
+    $this->assertSession()->pageTextNotContains('View');
+    $this->assertSession()->pageTextNotContains('test_view_field_delete');
 
     // Delete the first field.
     $this->fieldUIDeleteField($bundle_path1, "node.$type_name1.$field_name", $field_label, $type_name1);
diff --git a/core/modules/field_ui/tests/src/Functional/ManageDisplayTest.php b/core/modules/field_ui/tests/src/Functional/ManageDisplayTest.php
index 8bdd6a83f8..c34443850c 100644
--- a/core/modules/field_ui/tests/src/Functional/ManageDisplayTest.php
+++ b/core/modules/field_ui/tests/src/Functional/ManageDisplayTest.php
@@ -188,7 +188,7 @@ public function testNonInitializedFields() {
    */
   public function testSingleViewMode() {
     $this->drupalGet('admin/structure/taxonomy/manage/' . $this->vocabulary . '/display');
-    $this->assertNoText('Use custom display settings for the following view modes');
+    $this->assertSession()->pageTextNotContains('Use custom display settings for the following view modes');
 
     // This may not trigger a notice when 'view_modes_custom' isn't available.
     $this->drupalPostForm('admin/structure/taxonomy/manage/' . $this->vocabulary . '/overview/display', [], 'Save');
diff --git a/core/modules/file/tests/src/Functional/FileFieldAnonymousSubmissionTest.php b/core/modules/file/tests/src/Functional/FileFieldAnonymousSubmissionTest.php
index af12289bbc..3fada0cc8d 100644
--- a/core/modules/file/tests/src/Functional/FileFieldAnonymousSubmissionTest.php
+++ b/core/modules/file/tests/src/Functional/FileFieldAnonymousSubmissionTest.php
@@ -148,7 +148,7 @@ protected function doTestNodeWithFileWithoutTitle() {
     $this->submitForm($edit, $label);
     $this->assertSession()->statusCodeEquals(200);
     $t_args = ['@type' => $bundle_label, '%title' => $node_title];
-    $this->assertNoText(strip_tags(t('@type %title has been created.', $t_args)));
+    $this->assertSession()->pageTextNotContains(strip_tags(t('@type %title has been created.', $t_args)));
     $this->assertSession()->pageTextContains('Title field is required.');
 
     // Submit the form again but this time with the missing title field. This
diff --git a/core/modules/file/tests/src/Functional/FileFieldDisplayTest.php b/core/modules/file/tests/src/Functional/FileFieldDisplayTest.php
index 3ec5a4f2a8..324c69e297 100644
--- a/core/modules/file/tests/src/Functional/FileFieldDisplayTest.php
+++ b/core/modules/file/tests/src/Functional/FileFieldDisplayTest.php
@@ -56,7 +56,7 @@ public function testNodeDisplay() {
       $this->drupalPostForm("admin/structure/types/manage/$type_name/display", $edit, 'Save');
       $this->drupalGet('node/' . $node->id());
       // Verify that the field label is hidden when no file is attached.
-      $this->assertNoText($field_name);
+      $this->assertSession()->pageTextNotContains($field_name);
     }
 
     $this->generateFile('escaped-&-text', 64, 10, 'text');
diff --git a/core/modules/file/tests/src/Functional/FileFieldValidateTest.php b/core/modules/file/tests/src/Functional/FileFieldValidateTest.php
index 46909cec0c..94098523ac 100644
--- a/core/modules/file/tests/src/Functional/FileFieldValidateTest.php
+++ b/core/modules/file/tests/src/Functional/FileFieldValidateTest.php
@@ -189,7 +189,7 @@ public function testFileRemoval() {
 
     // Check that the file can still be removed.
     $this->removeNodeFile($nid);
-    $this->assertNoText('Only files with the following extensions are allowed: txt.');
+    $this->assertSession()->pageTextNotContains('Only files with the following extensions are allowed: txt.');
     $this->assertSession()->pageTextContains('Article ' . $node->getTitle() . ' has been updated.');
   }
 
diff --git a/core/modules/file/tests/src/Functional/FileManagedFileElementTest.php b/core/modules/file/tests/src/Functional/FileManagedFileElementTest.php
index 93b9a7e70d..f67326cfe4 100644
--- a/core/modules/file/tests/src/Functional/FileManagedFileElementTest.php
+++ b/core/modules/file/tests/src/Functional/FileManagedFileElementTest.php
@@ -212,7 +212,7 @@ public function testUnusedPermanentFileValidation() {
     // allowed to reference an unused file.
     $this->drupalGet('file/test/1/0/1/' . $file->id());
     $this->submitForm([], 'Save');
-    $this->assertNoText('The file used in the Managed file &amp; butter field may not be referenced.');
+    $this->assertSession()->pageTextNotContains('The file used in the Managed file & butter field may not be referenced.');
     $this->assertSession()->pageTextContains('The file ids are ' . $file->id());
 
     // Enable marking unused files as temporary, unused permanent files must not
@@ -223,7 +223,7 @@ public function testUnusedPermanentFileValidation() {
     $this->drupalGet('file/test/1/0/1/' . $file->id());
     $this->submitForm([], 'Save');
     $this->assertSession()->pageTextContains('The file used in the Managed file & butter field may not be referenced.');
-    $this->assertNoText('The file ids are ' . $file->id());
+    $this->assertSession()->pageTextNotContains('The file ids are ' . $file->id());
 
     // Make the file temporary, now using it is allowed.
     $file->setTemporary();
@@ -231,7 +231,7 @@ public function testUnusedPermanentFileValidation() {
 
     $this->drupalGet('file/test/1/0/1/' . $file->id());
     $this->submitForm([], 'Save');
-    $this->assertNoText('The file used in the Managed file &amp; butter field may not be referenced.');
+    $this->assertSession()->pageTextNotContains('The file used in the Managed file & butter field may not be referenced.');
     $this->assertSession()->pageTextContains('The file ids are ' . $file->id());
 
     // Make the file permanent again and add a usage from itself, referencing is
@@ -245,7 +245,7 @@ public function testUnusedPermanentFileValidation() {
 
     $this->drupalGet('file/test/1/0/1/' . $file->id());
     $this->submitForm([], 'Save');
-    $this->assertNoText('The file used in the Managed file &amp; butter field may not be referenced.');
+    $this->assertSession()->pageTextNotContains('The file used in the Managed file & butter field may not be referenced.');
     $this->assertSession()->pageTextContains('The file ids are ' . $file->id());
   }
 
diff --git a/core/modules/file/tests/src/Functional/SaveUploadFormTest.php b/core/modules/file/tests/src/Functional/SaveUploadFormTest.php
index 934ba58b73..b3de87aa5f 100644
--- a/core/modules/file/tests/src/Functional/SaveUploadFormTest.php
+++ b/core/modules/file/tests/src/Functional/SaveUploadFormTest.php
@@ -515,7 +515,7 @@ public function testErrorMessagesAreNotChanged() {
 
     // Ensure the error message is not present and the counts before and after
     // calling _file_save_upload_from_form() are correct.
-    $this->assertNoText($error);
+    $this->assertSession()->pageTextNotContains($error);
     $this->assertRaw('Number of error messages before _file_save_upload_from_form(): 0');
     $this->assertRaw('Number of error messages after _file_save_upload_from_form(): 0');
   }
diff --git a/core/modules/filter/tests/src/Functional/FilterAdminTest.php b/core/modules/filter/tests/src/Functional/FilterAdminTest.php
index 156eecd52a..a5f4782626 100644
--- a/core/modules/filter/tests/src/Functional/FilterAdminTest.php
+++ b/core/modules/filter/tests/src/Functional/FilterAdminTest.php
@@ -436,7 +436,7 @@ public function testDisabledFormat() {
     $this->drupalGet($node->toUrl());
 
     // The format is not used anymore.
-    $this->assertNoText('filtered text');
+    $this->assertSession()->pageTextNotContains('filtered text');
     // The text is not displayed unfiltered or escaped.
     $this->assertNoRaw($body_value);
     $this->assertSession()->assertNoEscaped($body_value);
diff --git a/core/modules/filter/tests/src/Functional/FilterFormatAccessTest.php b/core/modules/filter/tests/src/Functional/FilterFormatAccessTest.php
index f85b768b2e..2b6c107364 100644
--- a/core/modules/filter/tests/src/Functional/FilterFormatAccessTest.php
+++ b/core/modules/filter/tests/src/Functional/FilterFormatAccessTest.php
@@ -238,7 +238,7 @@ public function testFormatWidgetPermissions() {
 
     // Save and verify that only the title was changed.
     $this->drupalPostForm('node/' . $node->id() . '/edit', $new_edit, 'Save');
-    $this->assertNoText($edit['title[0][value]']);
+    $this->assertSession()->pageTextNotContains($edit['title[0][value]']);
     $this->assertSession()->pageTextContains($new_edit['title[0][value]']);
     $this->assertSession()->pageTextContains($edit[$body_value_key]);
 
@@ -281,14 +281,14 @@ public function testFormatWidgetPermissions() {
     $this->assertSession()->pageTextContains('Text format field is required.');
     $this->drupalGet('node/' . $node->id());
     $this->assertSession()->pageTextContains($old_title);
-    $this->assertNoText($new_title);
+    $this->assertSession()->pageTextNotContains($new_title);
 
     // Now select a new text format and make sure the node can be saved.
     $edit[$body_format_key] = filter_fallback_format();
     $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
     $this->assertSession()->addressEquals('node/' . $node->id());
     $this->assertSession()->pageTextContains($new_title);
-    $this->assertNoText($old_title);
+    $this->assertSession()->pageTextNotContains($old_title);
 
     // Switch the text format to a new one, then disable that format and all
     // other formats on the site (leaving only the fallback format).
@@ -316,12 +316,12 @@ public function testFormatWidgetPermissions() {
     $this->assertSession()->pageTextContains('Text format field is required.');
     $this->drupalGet('node/' . $node->id());
     $this->assertSession()->pageTextContains($old_title);
-    $this->assertNoText($new_title);
+    $this->assertSession()->pageTextNotContains($new_title);
     $edit[$body_format_key] = filter_fallback_format();
     $this->drupalPostForm('node/' . $node->id() . '/edit', $edit, 'Save');
     $this->assertSession()->addressEquals('node/' . $node->id());
     $this->assertSession()->pageTextContains($new_title);
-    $this->assertNoText($old_title);
+    $this->assertSession()->pageTextNotContains($old_title);
   }
 
   /**
diff --git a/core/modules/filter/tests/src/Functional/FilterSecurityTest.php b/core/modules/filter/tests/src/Functional/FilterSecurityTest.php
index 210c322f34..4770412b60 100644
--- a/core/modules/filter/tests/src/Functional/FilterSecurityTest.php
+++ b/core/modules/filter/tests/src/Functional/FilterSecurityTest.php
@@ -76,7 +76,7 @@ public function testDisableFilterModule() {
 
     // Verify that filter_test_replace filter replaced the content.
     $this->drupalGet('node/' . $node->id());
-    $this->assertNoText($body_raw);
+    $this->assertSession()->pageTextNotContains($body_raw);
     $this->assertSession()->pageTextContains('Filter: Testing filter');
 
     // Disable the text format entirely.
@@ -84,7 +84,7 @@ public function testDisableFilterModule() {
 
     // Verify that the content is empty, because the text format does not exist.
     $this->drupalGet('node/' . $node->id());
-    $this->assertNoText($body_raw);
+    $this->assertSession()->pageTextNotContains($body_raw);
   }
 
   /**
diff --git a/core/modules/forum/tests/src/Functional/ForumBlockTest.php b/core/modules/forum/tests/src/Functional/ForumBlockTest.php
index 14f6e4ffda..6fee306734 100644
--- a/core/modules/forum/tests/src/Functional/ForumBlockTest.php
+++ b/core/modules/forum/tests/src/Functional/ForumBlockTest.php
@@ -78,7 +78,7 @@ public function testNewForumTopicsBlock() {
         $this->assertSession()->linkExists($topics[$index], 0, new FormattableMarkup('Forum topic @topic found in the "New forum topics" block.', ['@topic' => $topics[$index]]));
       }
       else {
-        $this->assertNoText($topics[$index]);
+        $this->assertSession()->pageTextNotContains($topics[$index]);
       }
     }
   }
@@ -124,7 +124,7 @@ public function testActiveForumTopicsBlock() {
         $this->assertSession()->linkExists($topics[$index], 0, new FormattableMarkup('Forum topic @topic found in the "Active forum topics" block.', ['@topic' => $topics[$index]]));
       }
       else {
-        $this->assertNoText($topics[$index]);
+        $this->assertSession()->pageTextNotContains($topics[$index]);
       }
     }
 
@@ -141,7 +141,7 @@ public function testActiveForumTopicsBlock() {
         $this->assertSession()->linkExists($topics[$index], 0, 'Forum topic found in the "Active forum topics" block.');
       }
       else {
-        $this->assertNoText($topics[$index]);
+        $this->assertSession()->pageTextNotContains($topics[$index]);
       }
     }
   }
diff --git a/core/modules/forum/tests/src/Functional/ForumIndexTest.php b/core/modules/forum/tests/src/Functional/ForumIndexTest.php
index 159a490043..34ec753622 100644
--- a/core/modules/forum/tests/src/Functional/ForumIndexTest.php
+++ b/core/modules/forum/tests/src/Functional/ForumIndexTest.php
@@ -90,7 +90,7 @@ public function testForumIndexStatus() {
 
     // Verify that the node no longer appears on the index.
     $this->drupalGet('forum/' . $tid);
-    $this->assertNoText($title);
+    $this->assertSession()->pageTextNotContains($title);
   }
 
 }
diff --git a/core/modules/forum/tests/src/Functional/ForumNodeAccessTest.php b/core/modules/forum/tests/src/Functional/ForumNodeAccessTest.php
index 80569a51ae..c43e89e1df 100644
--- a/core/modules/forum/tests/src/Functional/ForumNodeAccessTest.php
+++ b/core/modules/forum/tests/src/Functional/ForumNodeAccessTest.php
@@ -96,7 +96,7 @@ public function testForumNodeAccess() {
     $this->drupalGet('');
 
     // Ensure private node is not found but public is found.
-    $this->assertNoText($private_node->getTitle());
+    $this->assertSession()->pageTextNotContains($private_node->getTitle());
     $this->assertSession()->pageTextContains($public_node->getTitle());
   }
 
diff --git a/core/modules/forum/tests/src/Functional/ForumTest.php b/core/modules/forum/tests/src/Functional/ForumTest.php
index 36aff485f1..af538fdb63 100644
--- a/core/modules/forum/tests/src/Functional/ForumTest.php
+++ b/core/modules/forum/tests/src/Functional/ForumTest.php
@@ -483,8 +483,8 @@ public function deleteForum($tid) {
     $this->drupalGet('admin/structure/forum/edit/forum/' . $tid);
     $this->clickLink(t('Delete'));
     $this->assertSession()->pageTextContains('Are you sure you want to delete the forum');
-    $this->assertNoText('Add forum');
-    $this->assertNoText('Add forum container');
+    $this->assertSession()->pageTextNotContains('Add forum');
+    $this->assertSession()->pageTextNotContains('Add forum container');
     $this->submitForm([], 'Delete');
 
     // Assert that the forum no longer exists.
@@ -575,7 +575,7 @@ public function createForumTopic($forum, $container = FALSE) {
 
     $type = t('Forum topic');
     if ($container) {
-      $this->assertNoText("$type $title has been created.");
+      $this->assertSession()->pageTextNotContains("$type $title has been created.");
       $this->assertRaw(t('The item %title is a forum container, not a forum.', ['%title' => $forum['name']]));
       return;
     }
diff --git a/core/modules/help/tests/src/Functional/ExperimentalHelpTest.php b/core/modules/help/tests/src/Functional/ExperimentalHelpTest.php
index 502557bb73..b451ae62f5 100644
--- a/core/modules/help/tests/src/Functional/ExperimentalHelpTest.php
+++ b/core/modules/help/tests/src/Functional/ExperimentalHelpTest.php
@@ -55,7 +55,7 @@ public function testExperimentalHelp() {
 
     // Regular modules should not display the message.
     $this->drupalGet('admin/help/help_page_test');
-    $this->assertNoText('This module is experimental.');
+    $this->assertSession()->pageTextNotContains('This module is experimental.');
 
     // Ensure the actual help page is displayed to avoid a false positive.
     $this->assertSession()->statusCodeEquals(200);
diff --git a/core/modules/help/tests/src/Functional/HelpBlockTest.php b/core/modules/help/tests/src/Functional/HelpBlockTest.php
index 4e56e40f62..590d45cccb 100644
--- a/core/modules/help/tests/src/Functional/HelpBlockTest.php
+++ b/core/modules/help/tests/src/Functional/HelpBlockTest.php
@@ -48,7 +48,7 @@ public function testHelp() {
 
     $this->drupalGet('help_page_test/no_help');
     // The help block should not appear when there is no help.
-    $this->assertNoText($this->helpBlock->label());
+    $this->assertSession()->pageTextNotContains($this->helpBlock->label());
 
     // Ensure that if two hook_help() implementations both return a render array
     // the output is as expected.
diff --git a/core/modules/help/tests/src/Functional/HelpTest.php b/core/modules/help/tests/src/Functional/HelpTest.php
index 05eac02580..9e0e14c96a 100644
--- a/core/modules/help/tests/src/Functional/HelpTest.php
+++ b/core/modules/help/tests/src/Functional/HelpTest.php
@@ -123,7 +123,7 @@ protected function verifyHelp($response = 200) {
       $this->assertSession()->pageTextContains('This page shows you all available administration tasks for each module.');
     }
     else {
-      $this->assertNoText('This page shows you all available administration tasks for each module.');
+      $this->assertSession()->pageTextNotContains('This page shows you all available administration tasks for each module.');
     }
 
     foreach ($this->getModuleList() as $module => $name) {
diff --git a/core/modules/help/tests/src/Functional/NoHelpTest.php b/core/modules/help/tests/src/Functional/NoHelpTest.php
index 1201f47435..8d343f096d 100644
--- a/core/modules/help/tests/src/Functional/NoHelpTest.php
+++ b/core/modules/help/tests/src/Functional/NoHelpTest.php
@@ -47,7 +47,7 @@ public function testMainPageNoHelp() {
     $this->assertFalse(\Drupal::moduleHandler()->implementsHook('menu_test', 'help'), 'The menu_test module does not implement hook_help');
     // Make sure the test module menu_test does not display a help link on
     // admin/help.
-    $this->assertNoText(\Drupal::moduleHandler()->getName('menu_test'));
+    $this->assertSession()->pageTextNotContains(\Drupal::moduleHandler()->getName('menu_test'));
 
     // Ensure that the module overview help page for a module that does not
     // implement hook_help() results in a 404.
diff --git a/core/modules/image/tests/src/Functional/ImageAdminStylesTest.php b/core/modules/image/tests/src/Functional/ImageAdminStylesTest.php
index 26ac0160cf..4b56b5db3d 100644
--- a/core/modules/image/tests/src/Functional/ImageAdminStylesTest.php
+++ b/core/modules/image/tests/src/Functional/ImageAdminStylesTest.php
@@ -386,7 +386,7 @@ public function testEditEffect() {
     $this->assertSession()->pageTextContains('Scale and crop 360×240');
 
     // Check that the previous effect is replaced.
-    $this->assertNoText('Scale and crop 300×200');
+    $this->assertSession()->pageTextNotContains('Scale and crop 300×200');
 
     // Add another scale effect.
     $this->drupalGet('admin/config/media/image-styles/add');
diff --git a/core/modules/image/tests/src/Functional/ImageFieldValidateTest.php b/core/modules/image/tests/src/Functional/ImageFieldValidateTest.php
index d5fc366383..5941786b4f 100644
--- a/core/modules/image/tests/src/Functional/ImageFieldValidateTest.php
+++ b/core/modules/image/tests/src/Functional/ImageFieldValidateTest.php
@@ -198,8 +198,8 @@ public function testRequiredAttributes() {
     ];
     $this->drupalPostForm('node/add/article', $edit, 'Save');
 
-    $this->assertNoText('Alternative text field is required.');
-    $this->assertNoText('Title field is required.');
+    $this->assertSession()->pageTextNotContains('Alternative text field is required.');
+    $this->assertSession()->pageTextNotContains('Title field is required.');
 
     $instance->setSetting('required', 0);
     $instance->setSetting('alt_field_required', 1);
@@ -211,8 +211,8 @@ public function testRequiredAttributes() {
     ];
     $this->drupalPostForm('node/add/article', $edit, 'Save');
 
-    $this->assertNoText('Alternative text field is required.');
-    $this->assertNoText('Title field is required.');
+    $this->assertSession()->pageTextNotContains('Alternative text field is required.');
+    $this->assertSession()->pageTextNotContains('Title field is required.');
   }
 
   /**
diff --git a/core/modules/image/tests/src/Functional/ImageFieldWidgetTest.php b/core/modules/image/tests/src/Functional/ImageFieldWidgetTest.php
index b60b1d4c11..fb25470433 100644
--- a/core/modules/image/tests/src/Functional/ImageFieldWidgetTest.php
+++ b/core/modules/image/tests/src/Functional/ImageFieldWidgetTest.php
@@ -35,7 +35,7 @@ public function testWidgetElement() {
     $this->assertSession()->elementExists('xpath', '//div[contains(@class, "field--widget-image-image")]');
     // Verify that the image field widget limits accepted files.
     $this->assertSession()->elementExists('xpath', '//input[contains(@accept, "image/*")]');
-    $this->assertNoText('Image test on [site:name]');
+    $this->assertSession()->pageTextNotContains('Image test on [site:name]');
 
     // Check for allowed image file extensions - default.
     $this->assertSession()->pageTextContains('Allowed types: png gif jpg jpeg.');
diff --git a/core/modules/language/tests/src/Functional/LanguageConfigurationTest.php b/core/modules/language/tests/src/Functional/LanguageConfigurationTest.php
index 131afcd755..f9f3cf2472 100644
--- a/core/modules/language/tests/src/Functional/LanguageConfigurationTest.php
+++ b/core/modules/language/tests/src/Functional/LanguageConfigurationTest.php
@@ -101,7 +101,7 @@ public function testLanguageConfiguration() {
       'prefix[fr]' => '',
     ];
     $this->submitForm($edit, 'Save configuration');
-    $this->assertNoText('The prefix may only be left blank for the selected detection fallback language.');
+    $this->assertSession()->pageTextNotContains('The prefix may only be left blank for the selected detection fallback language.');
 
     // Change default negotiation language.
     $this->config('language.negotiation')->set('selected_langcode', 'fr')->save();
diff --git a/core/modules/link/tests/src/Functional/LinkFieldTest.php b/core/modules/link/tests/src/Functional/LinkFieldTest.php
index d2da5ce4aa..b3abd851d5 100644
--- a/core/modules/link/tests/src/Functional/LinkFieldTest.php
+++ b/core/modules/link/tests/src/Functional/LinkFieldTest.php
@@ -325,7 +325,7 @@ public function testLinkTitle() {
             "{$field_name}[0][uri]" => '',
           ];
           $this->submitForm($edit, 'Save');
-          $this->assertNoText('Link text field is required.');
+          $this->assertSession()->pageTextNotContains('Link text field is required.');
 
           // Verify that a URL and link text meets requirements.
           $this->drupalGet('entity_test/add');
@@ -334,7 +334,7 @@ public function testLinkTitle() {
             "{$field_name}[0][title]" => 'Example',
           ];
           $this->submitForm($edit, 'Save');
-          $this->assertNoText('Link text field is required.');
+          $this->assertSession()->pageTextNotContains('Link text field is required.');
         }
       }
     }
diff --git a/core/modules/locale/tests/src/Functional/LocaleImportFunctionalTest.php b/core/modules/locale/tests/src/Functional/LocaleImportFunctionalTest.php
index 7152b16160..40db86074c 100644
--- a/core/modules/locale/tests/src/Functional/LocaleImportFunctionalTest.php
+++ b/core/modules/locale/tests/src/Functional/LocaleImportFunctionalTest.php
@@ -185,7 +185,7 @@ public function testStandalonePoFile() {
       'translation' => 'translated',
     ];
     $this->drupalPostForm('admin/config/regional/translate', $search, 'Filter');
-    $this->assertNoText('No strings available.');
+    $this->assertSession()->pageTextNotContains('No strings available.');
     // This import should have changed number of plural forms.
     $locale_plurals = \Drupal::service('locale.plural.formula')->reset()->getNumberOfPlurals('fr');
     $this->assertEquals(3, $locale_plurals, 'Plural numbers changed.');
@@ -244,7 +244,7 @@ public function testStandalonePoFile() {
       'translation' => 'translated',
     ];
     $this->drupalPostForm('admin/config/regional/translate', $search, 'Filter');
-    $this->assertNoText('No strings available.');
+    $this->assertSession()->pageTextNotContains('No strings available.');
 
   }
 
diff --git a/core/modules/locale/tests/src/Functional/LocalePluralFormatTest.php b/core/modules/locale/tests/src/Functional/LocalePluralFormatTest.php
index 9a67e2cb7e..30a5e2920e 100644
--- a/core/modules/locale/tests/src/Functional/LocalePluralFormatTest.php
+++ b/core/modules/locale/tests/src/Functional/LocalePluralFormatTest.php
@@ -278,7 +278,7 @@ public function testPluralEditExport() {
     $this->assertSession()->pageTextContains('Singular form');
     $this->assertSession()->pageTextContains('First plural form');
     $this->assertSession()->pageTextContains('2. plural form');
-    $this->assertNoText('3. plural form');
+    $this->assertSession()->pageTextNotContains('3. plural form');
 
     // Plural values for langcode hr.
     $this->assertSession()->pageTextContains('@count sat');
@@ -305,7 +305,7 @@ public function testPluralEditExport() {
     // Plural values for the langcode fr.
     $this->assertSession()->pageTextContains('@count heure');
     $this->assertSession()->pageTextContains('@count heures');
-    $this->assertNoText('2. plural form');
+    $this->assertSession()->pageTextNotContains('2. plural form');
 
     // Edit langcode fr translations and see if that took effect.
     $edit = [
diff --git a/core/modules/locale/tests/src/Functional/LocaleTranslationUiTest.php b/core/modules/locale/tests/src/Functional/LocaleTranslationUiTest.php
index 0125829451..58a9561251 100644
--- a/core/modules/locale/tests/src/Functional/LocaleTranslationUiTest.php
+++ b/core/modules/locale/tests/src/Functional/LocaleTranslationUiTest.php
@@ -226,7 +226,7 @@ public function testStringTranslation() {
       'translation' => 'untranslated',
     ];
     $this->drupalPostForm('admin/config/regional/translate', $search, 'Filter');
-    $this->assertNoText('No strings available.');
+    $this->assertSession()->pageTextNotContains('No strings available.');
   }
 
   /**
@@ -350,7 +350,7 @@ public function testStringValidation() {
       // Check for a form error on the textarea, which means the string was
       // rejected as unsafe.
       $this->assertSession()->elementAttributeContains('xpath', '//form[@id="locale-translate-edit-form"]//textarea', 'class', 'error');
-      $this->assertNoText('The string has been saved.');
+      $this->assertSession()->pageTextNotContains('The string has been saved.');
     }
   }
 
@@ -408,9 +408,9 @@ public function testStringSearch() {
       'translation' => 'all',
     ];
     $this->drupalPostForm('admin/config/regional/translate', $search, 'Filter');
-    // assertText() seems to remove the input field where $name always could be
-    // found, so this is not a false assert. See how assertNoText succeeds
-    // later.
+    // pageTextContains() seems to remove the input field where $name always
+    // could be found, so this is not a false assert. See how
+    // pageTextNotContains succeeds later.
     $this->assertSession()->pageTextContains($name);
 
     // Ensure untranslated string doesn't appear if searching on 'only
@@ -431,7 +431,7 @@ public function testStringSearch() {
       'translation' => 'untranslated',
     ];
     $this->drupalPostForm('admin/config/regional/translate', $search, 'Filter');
-    $this->assertNoText('No strings available.');
+    $this->assertSession()->pageTextNotContains('No strings available.');
 
     // Add translation.
     // Assume this is the only result, given the random name.
@@ -451,7 +451,7 @@ public function testStringSearch() {
       'translation' => 'translated',
     ];
     $this->drupalPostForm('admin/config/regional/translate', $search, 'Filter');
-    $this->assertNoText('No strings available.');
+    $this->assertSession()->pageTextNotContains('No strings available.');
 
     // Ensure translated source string doesn't appear if searching on 'only
     // untranslated strings'.
@@ -480,7 +480,7 @@ public function testStringSearch() {
       'translation' => 'all',
     ];
     $this->drupalPostForm('admin/config/regional/translate', $search, 'Filter');
-    $this->assertNoText('No strings available.');
+    $this->assertSession()->pageTextNotContains('No strings available.');
 
     // Ensure translated string doesn't appear if searching in System (English).
     $search = [
diff --git a/core/modules/locale/tests/src/Functional/LocaleUpdateInterfaceTest.php b/core/modules/locale/tests/src/Functional/LocaleUpdateInterfaceTest.php
index 1df2655a79..cebe7b445b 100644
--- a/core/modules/locale/tests/src/Functional/LocaleUpdateInterfaceTest.php
+++ b/core/modules/locale/tests/src/Functional/LocaleUpdateInterfaceTest.php
@@ -49,7 +49,7 @@ public function testInterface() {
     // No language added.
     // Check status page and Available translation updates page.
     $this->drupalGet('admin/reports/status');
-    $this->assertNoText('Translation update status');
+    $this->assertSession()->pageTextNotContains('Translation update status');
 
     $this->drupalGet('admin/reports/translations');
     $this->assertRaw(t('No translatable languages available. <a href=":add_language">Add a language</a> first.', [':add_language' => Url::fromRoute('entity.configurable_language.collection')->toString()]));
diff --git a/core/modules/locale/tests/src/Functional/LocaleUpdateTest.php b/core/modules/locale/tests/src/Functional/LocaleUpdateTest.php
index 920168ae03..0a48665d00 100644
--- a/core/modules/locale/tests/src/Functional/LocaleUpdateTest.php
+++ b/core/modules/locale/tests/src/Functional/LocaleUpdateTest.php
@@ -436,7 +436,7 @@ public function testEnableCustomLanguage() {
       'translation' => 'translated',
     ];
     $this->drupalPostForm('admin/config/regional/translate', $search, 'Filter');
-    $this->assertNoText('No strings available.');
+    $this->assertSession()->pageTextNotContains('No strings available.');
 
     // Ensure the multiline string was imported.
     $search = [
@@ -457,7 +457,7 @@ public function testEnableCustomLanguage() {
     ];
     $this->drupalPostForm('admin/config/regional/translate', $search, 'Filter');
     $this->assertSession()->pageTextContains('Allowed HTML source string');
-    $this->assertNoText('Another allowed HTML source string');
+    $this->assertSession()->pageTextNotContains('Another allowed HTML source string');
   }
 
 }
diff --git a/core/modules/menu_ui/tests/src/Functional/MenuUiNodeTest.php b/core/modules/menu_ui/tests/src/Functional/MenuUiNodeTest.php
index 4b8e256b9a..0747a7a8a9 100644
--- a/core/modules/menu_ui/tests/src/Functional/MenuUiNodeTest.php
+++ b/core/modules/menu_ui/tests/src/Functional/MenuUiNodeTest.php
@@ -94,7 +94,7 @@ public function testMenuNodeFormWidget() {
     // Verify that no menu settings are displayed and nodes can be created.
     $this->drupalGet('node/add/page');
     $this->assertSession()->pageTextContains('Create Basic page');
-    $this->assertNoText('Menu settings');
+    $this->assertSession()->pageTextNotContains('Menu settings');
     $node_title = $this->randomMachineName();
     $edit = [
       'title[0][value]' => $node_title,
diff --git a/core/modules/menu_ui/tests/src/Functional/MenuUiTest.php b/core/modules/menu_ui/tests/src/Functional/MenuUiTest.php
index ca14d09c99..dde6088103 100644
--- a/core/modules/menu_ui/tests/src/Functional/MenuUiTest.php
+++ b/core/modules/menu_ui/tests/src/Functional/MenuUiTest.php
@@ -607,7 +607,7 @@ public function testUnpublishedNodeMenuItem() {
     $this->drupalLogout();
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('admin/structure/menu/manage/' . $item->getMenuName());
-    $this->assertNoText($item->getTitle());
+    $this->assertSession()->pageTextNotContains($item->getTitle());
     // The cache contexts associated with the (in)accessible menu links are
     // bubbled. See DefaultMenuLinkTreeManipulators::menuLinkCheckAccess().
     $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Contexts', 'user.permissions');
@@ -836,7 +836,7 @@ public function deleteMenuLink(MenuLinkContent $item) {
 
     // Verify deletion.
     $this->drupalGet('');
-    $this->assertNoText($title);
+    $this->assertSession()->pageTextNotContains($title);
   }
 
   /**
@@ -850,7 +850,7 @@ public function toggleMenuLink(MenuLinkContent $item) {
 
     // Verify menu link is absent.
     $this->drupalGet('');
-    $this->assertNoText($item->getTitle());
+    $this->assertSession()->pageTextNotContains($item->getTitle());
     $this->enableMenuLink($item);
 
     // Verify menu link is displayed.
diff --git a/core/modules/migrate_drupal_ui/tests/src/Functional/MigrateAccessTest.php b/core/modules/migrate_drupal_ui/tests/src/Functional/MigrateAccessTest.php
index edb64265cb..25be88e921 100644
--- a/core/modules/migrate_drupal_ui/tests/src/Functional/MigrateAccessTest.php
+++ b/core/modules/migrate_drupal_ui/tests/src/Functional/MigrateAccessTest.php
@@ -36,7 +36,7 @@ public function testAccess() {
     $this->drupalLogin($user);
     $this->drupalGet('upgrade');
     $this->assertSession()->statusCodeEquals(403);
-    $this->assertNoText('Upgrade');
+    $this->assertSession()->pageTextNotContains('Upgrade');
   }
 
 }
diff --git a/core/modules/node/tests/src/Functional/NodeActionsConfigurationTest.php b/core/modules/node/tests/src/Functional/NodeActionsConfigurationTest.php
index e2cd8bb90c..302fc32a5e 100644
--- a/core/modules/node/tests/src/Functional/NodeActionsConfigurationTest.php
+++ b/core/modules/node/tests/src/Functional/NodeActionsConfigurationTest.php
@@ -70,7 +70,7 @@ public function testAssignOwnerNodeActionConfiguration() {
     $this->assertSession()->pageTextContains('The action has been successfully saved.');
     // Check that the old label for the node_assign_owner_action action does not
     // appear on the actions administration page after updating.
-    $this->assertNoText($action_label);
+    $this->assertSession()->pageTextNotContains($action_label);
     // Check that the new label for the node_assign_owner_action action appears
     // on the actions administration page after updating.
     $this->assertSession()->pageTextContains($new_action_label);
@@ -89,7 +89,7 @@ public function testAssignOwnerNodeActionConfiguration() {
     $this->assertSession()->statusCodeEquals(200);
     // Check that the label for the node_assign_owner_action action does not
     // appear on the actions administration page after deleting.
-    $this->assertNoText($new_action_label);
+    $this->assertSession()->pageTextNotContains($new_action_label);
 
     $action = Action::load($action_id);
     $this->assertNull($action, 'The node_assign_owner_action action is not available after being deleted.');
diff --git a/core/modules/node/tests/src/Functional/NodeBlockFunctionalTest.php b/core/modules/node/tests/src/Functional/NodeBlockFunctionalTest.php
index 24e442f8f1..38a78cba0e 100644
--- a/core/modules/node/tests/src/Functional/NodeBlockFunctionalTest.php
+++ b/core/modules/node/tests/src/Functional/NodeBlockFunctionalTest.php
@@ -110,11 +110,11 @@ public function testRecentNodeBlock() {
     // see the block.
     $this->drupalLogout();
     $this->drupalGet('');
-    $this->assertNoText($block->label());
+    $this->assertSession()->pageTextNotContains($block->label());
 
     // Test that only the 2 latest nodes are shown.
     $this->drupalLogin($this->webUser);
-    $this->assertNoText($node1->label());
+    $this->assertSession()->pageTextNotContains($node1->label());
     $this->assertSession()->pageTextContains($node2->label());
     $this->assertSession()->pageTextContains($node3->label());
 
@@ -163,7 +163,7 @@ public function testRecentNodeBlock() {
     $this->drupalGet('');
     $label = $block->label();
     // Check that block is not displayed on the front page.
-    $this->assertNoText($label);
+    $this->assertSession()->pageTextNotContains($label);
     $this->assertCacheContexts(['languages:language_content', 'languages:language_interface', 'theme', 'url.query_args:' . MainContentViewSubscriber::WRAPPER_FORMAT, 'user', 'route']);
 
     // Ensure that a page that does not have a node context can still be cached,
@@ -191,7 +191,7 @@ public function testRecentNodeBlock() {
     $this->drupalGet('node/' . $node5->id());
     // Check that block is not displayed on the node page when node is of type
     // 'page'.
-    $this->assertNoText($label);
+    $this->assertSession()->pageTextNotContains($label);
     $this->assertCacheContexts(['languages:language_content', 'languages:language_interface', 'theme', 'url.query_args:' . MainContentViewSubscriber::WRAPPER_FORMAT, 'url.site', 'user', 'route', 'timezone']);
     $this->assertSession()->responseHeaderEquals('X-Drupal-Dynamic-Cache', 'MISS');
     $this->drupalGet('node/' . $node5->id());
diff --git a/core/modules/node/tests/src/Functional/NodeCreationTest.php b/core/modules/node/tests/src/Functional/NodeCreationTest.php
index 60f2addeeb..391dae1e68 100644
--- a/core/modules/node/tests/src/Functional/NodeCreationTest.php
+++ b/core/modules/node/tests/src/Functional/NodeCreationTest.php
@@ -86,8 +86,8 @@ public function testNodeCreation() {
 
     // Verify that pages do not show submitted information by default.
     $this->drupalGet('node/' . $node->id());
-    $this->assertNoText($node->getOwner()->getAccountName());
-    $this->assertNoText($this->container->get('date.formatter')->format($node->getCreatedTime()));
+    $this->assertSession()->pageTextNotContains($node->getOwner()->getAccountName());
+    $this->assertSession()->pageTextNotContains($this->container->get('date.formatter')->format($node->getCreatedTime()));
 
     // Change the node type setting to show submitted by information.
     /** @var \Drupal\node\NodeTypeInterface $node_type */
diff --git a/core/modules/node/tests/src/Functional/NodeEditFormTest.php b/core/modules/node/tests/src/Functional/NodeEditFormTest.php
index 5391a3cb3e..ddfdd92238 100644
--- a/core/modules/node/tests/src/Functional/NodeEditFormTest.php
+++ b/core/modules/node/tests/src/Functional/NodeEditFormTest.php
@@ -221,7 +221,7 @@ public function testNodeMetaInformation() {
     // can not see the meta information.
     $this->drupalLogin($this->webUser);
     $this->drupalGet('node/add/page');
-    $this->assertNoText('Not saved yet');
+    $this->assertSession()->pageTextNotContains('Not saved yet');
 
     // Create node to edit.
     $edit['title[0][value]'] = $this->randomMachineName(8);
@@ -230,8 +230,8 @@ public function testNodeMetaInformation() {
 
     $node = $this->drupalGetNodeByTitle($edit['title[0][value]']);
     $this->drupalGet("node/" . $node->id() . "/edit");
-    $this->assertNoText('Published');
-    $this->assertNoText($this->container->get('date.formatter')->format($node->getChangedTime(), 'short'));
+    $this->assertSession()->pageTextNotContains('Published');
+    $this->assertSession()->pageTextNotContains($this->container->get('date.formatter')->format($node->getChangedTime(), 'short'));
 
     // Check that users with the 'administer nodes' permission can see the meta
     // information.
diff --git a/core/modules/node/tests/src/Functional/NodeEntityViewModeAlterTest.php b/core/modules/node/tests/src/Functional/NodeEntityViewModeAlterTest.php
index e2071338bc..6b56f21602 100644
--- a/core/modules/node/tests/src/Functional/NodeEntityViewModeAlterTest.php
+++ b/core/modules/node/tests/src/Functional/NodeEntityViewModeAlterTest.php
@@ -51,7 +51,7 @@ public function testNodeViewModeChange() {
     // Check that teaser mode is viewed.
     $this->assertSession()->pageTextContains('Extra data that should appear only in the teaser for the node.');
     // Make sure body text is not present.
-    $this->assertNoText('Data that should appear only in the body for the node.');
+    $this->assertSession()->pageTextNotContains('Data that should appear only in the body for the node.');
 
     // Test that the correct build mode has been set.
     $build = $this->buildEntityView($node);
diff --git a/core/modules/node/tests/src/Functional/NodeRSSContentTest.php b/core/modules/node/tests/src/Functional/NodeRSSContentTest.php
index c9a363f568..1bc6e20c83 100644
--- a/core/modules/node/tests/src/Functional/NodeRSSContentTest.php
+++ b/core/modules/node/tests/src/Functional/NodeRSSContentTest.php
@@ -57,7 +57,7 @@ public function testNodeRSSContent() {
     // Check that content added in view modes other than 'rss' doesn't
     // appear in RSS feed.
     $non_rss_content = 'Extra data that should appear everywhere except the RSS feed for node ' . $node->id() . '.';
-    $this->assertNoText($non_rss_content);
+    $this->assertSession()->responseNotContains($non_rss_content);
 
     // Check that extra RSS elements and namespaces are added to RSS feed.
     $test_element = '<testElement>' . t('Value of testElement RSS element for node @nid.', ['@nid' => $node->id()]) . '</testElement>';
@@ -68,7 +68,7 @@ public function testNodeRSSContent() {
     // Check that content added in 'rss' view mode doesn't appear when
     // viewing node.
     $this->drupalGet('node/' . $node->id());
-    $this->assertNoText($rss_only_content);
+    $this->assertSession()->responseNotContains($rss_only_content);
   }
 
   /**
diff --git a/core/modules/node/tests/src/Functional/NodeRevisionsTest.php b/core/modules/node/tests/src/Functional/NodeRevisionsTest.php
index ac610d23c0..5240e5aa9b 100644
--- a/core/modules/node/tests/src/Functional/NodeRevisionsTest.php
+++ b/core/modules/node/tests/src/Functional/NodeRevisionsTest.php
@@ -233,7 +233,7 @@ public function testRevisions() {
 
     // Verify that revision body text is not present on default version of node.
     $this->drupalGet('node/' . $node->id());
-    $this->assertNoText($new_body);
+    $this->assertSession()->pageTextNotContains($new_body);
 
     // Verify that the new body text is present on the revision.
     $this->drupalGet("node/" . $node->id() . "/revisions/" . $new_node_revision->getRevisionId() . "/view");
@@ -305,17 +305,17 @@ public function testRevisions() {
     // View the revision UI in 'IT', only the original node revision is shown.
     $this->drupalGet("it/node/" . $node->id() . "/revisions");
     $this->assertSession()->pageTextContains('Simple revision message (EN)');
-    $this->assertNoText('New revision message (DE)');
+    $this->assertSession()->pageTextNotContains('New revision message (DE)');
 
     // View the revision UI in 'DE', only the translated node revision is shown.
     $this->drupalGet("de/node/" . $node->id() . "/revisions");
-    $this->assertNoText('Simple revision message (EN)');
+    $this->assertSession()->pageTextNotContains('Simple revision message (EN)');
     $this->assertSession()->pageTextContains('New revision message (DE)');
 
     // View the revision UI in 'EN', only the original node revision is shown.
     $this->drupalGet("node/" . $node->id() . "/revisions");
     $this->assertSession()->pageTextContains('Simple revision message (EN)');
-    $this->assertNoText('New revision message (DE)');
+    $this->assertSession()->pageTextNotContains('New revision message (DE)');
   }
 
   /**
diff --git a/core/modules/node/tests/src/Functional/NodeTranslationUITest.php b/core/modules/node/tests/src/Functional/NodeTranslationUITest.php
index 033f347004..f16c5f1436 100644
--- a/core/modules/node/tests/src/Functional/NodeTranslationUITest.php
+++ b/core/modules/node/tests/src/Functional/NodeTranslationUITest.php
@@ -527,7 +527,7 @@ public function testRevisionTranslationRendering() {
 
     // Contents should be in English, of correct revision.
     $this->assertSession()->pageTextContains('First rev en title');
-    $this->assertNoText('First rev fr title');
+    $this->assertSession()->pageTextNotContains('First rev fr title');
 
     // Get a French view.
     $url_fr = $original_revision->getTranslation('fr')->toUrl('revision')->toString();
@@ -540,7 +540,7 @@ public function testRevisionTranslationRendering() {
 
     // Contents should be in French, of correct revision.
     $this->assertSession()->pageTextContains('First rev fr title');
-    $this->assertNoText('First rev en title');
+    $this->assertSession()->pageTextNotContains('First rev en title');
   }
 
   /**
diff --git a/core/modules/node/tests/src/Functional/NodeTypeTest.php b/core/modules/node/tests/src/Functional/NodeTypeTest.php
index 1a7ba87a02..42e3a291ac 100644
--- a/core/modules/node/tests/src/Functional/NodeTypeTest.php
+++ b/core/modules/node/tests/src/Functional/NodeTypeTest.php
@@ -188,7 +188,7 @@ public function testNodeTypeDeletion() {
     $this->assertRaw(
      t('%type is used by 1 piece of content on your site. You can not remove this content type until you have removed all of the %type content.', ['%type' => $type->label()])
     );
-    $this->assertNoText('This action cannot be undone.');
+    $this->assertSession()->pageTextNotContains('This action cannot be undone.');
 
     // Delete the node.
     $node->delete();
diff --git a/core/modules/node/tests/src/Functional/PagePreviewTest.php b/core/modules/node/tests/src/Functional/PagePreviewTest.php
index 3334f260d8..0de802a3e2 100644
--- a/core/modules/node/tests/src/Functional/PagePreviewTest.php
+++ b/core/modules/node/tests/src/Functional/PagePreviewTest.php
@@ -229,7 +229,7 @@ public function testPagePreview() {
     $view_mode_edit = ['view_mode' => 'teaser'];
     $this->drupalPostForm('node/preview/' . $uuid . '/full', $view_mode_edit, 'Switch');
     $this->assertRaw('view-mode-teaser');
-    $this->assertNoText($edit[$body_key]);
+    $this->assertSession()->pageTextNotContains($edit[$body_key]);
 
     // Check that the title, body and term fields are displayed with the
     // values after going back to the content edit page.
@@ -294,7 +294,7 @@ public function testPagePreview() {
     $this->assertRaw('>' . $newterm1 . '<');
     $this->assertRaw('>' . $newterm2 . '<');
     $this->assertRaw('>' . $newterm3 . '<');
-    $this->assertNoText($this->term->getName());
+    $this->assertSession()->pageTextNotContains($this->term->getName());
     $this->assertSession()->linkExists($newterm1);
     $this->assertSession()->linkExists($newterm2);
     $this->assertSession()->linkNotExists($newterm3);
diff --git a/core/modules/node/tests/src/Functional/Views/BulkFormTest.php b/core/modules/node/tests/src/Functional/Views/BulkFormTest.php
index f8de141767..c7c5e8574a 100644
--- a/core/modules/node/tests/src/Functional/Views/BulkFormTest.php
+++ b/core/modules/node/tests/src/Functional/Views/BulkFormTest.php
@@ -259,10 +259,10 @@ public function testBulkDeletion() {
     $this->assertSession()->pageTextContains("$label (Original translation) - The following content item translations will be deleted:");
     $label = $this->loadNode(3)->getTranslation('en')->label();
     $this->assertSession()->pageTextContains($label);
-    $this->assertNoText("$label (Original translation) - The following content item translations will be deleted:");
+    $this->assertSession()->pageTextNotContains("$label (Original translation) - The following content item translations will be deleted:");
     $label = $this->loadNode(4)->label();
     $this->assertSession()->pageTextContains($label);
-    $this->assertNoText("$label (Original translation) - The following content item translations will be deleted:");
+    $this->assertSession()->pageTextNotContains("$label (Original translation) - The following content item translations will be deleted:");
 
     $this->submitForm([], 'Delete');
 
diff --git a/core/modules/node/tests/src/Functional/Views/FilterNodeAccessTest.php b/core/modules/node/tests/src/Functional/Views/FilterNodeAccessTest.php
index 399ba9e05a..a7b8b7f378 100644
--- a/core/modules/node/tests/src/Functional/Views/FilterNodeAccessTest.php
+++ b/core/modules/node/tests/src/Functional/Views/FilterNodeAccessTest.php
@@ -89,7 +89,7 @@ public function testFilterNodeAccess() {
     // Test that the private node of the current user is shown.
     $this->assertSession()->pageTextContains('Private Article created by ' . $this->users[0]->getAccountName());
     // Test that the private node of the other use isn't shown.
-    $this->assertNoText('Private Article created by ' . $this->users[1]->getAccountName());
+    $this->assertSession()->pageTextNotContains('Private Article created by ' . $this->users[1]->getAccountName());
     // Test that both public nodes are shown.
     $this->assertSession()->pageTextContains('Public Article created by ' . $this->users[0]->getAccountName());
     $this->assertSession()->pageTextContains('Public Article created by ' . $this->users[1]->getAccountName());
@@ -100,7 +100,7 @@ public function testFilterNodeAccess() {
     // Test that the private node of the current user is shown.
     $this->assertSession()->pageTextContains('Private Article created by ' . $this->users[1]->getAccountName());
     // Test that the private node of the other use isn't shown.
-    $this->assertNoText('Private Article created by ' . $this->users[0]->getAccountName());
+    $this->assertSession()->pageTextNotContains('Private Article created by ' . $this->users[0]->getAccountName());
 
     // Test that a user with administer nodes permission can't see all nodes.
     $administer_nodes_user = $this->drupalCreateUser([
@@ -109,8 +109,8 @@ public function testFilterNodeAccess() {
     ]);
     $this->drupalLogin($administer_nodes_user);
     $this->drupalGet('test_filter_node_access');
-    $this->assertNoText('Private Article created by ' . $this->users[0]->getAccountName());
-    $this->assertNoText('Private Article created by ' . $this->users[1]->getAccountName());
+    $this->assertSession()->pageTextNotContains('Private Article created by ' . $this->users[0]->getAccountName());
+    $this->assertSession()->pageTextNotContains('Private Article created by ' . $this->users[1]->getAccountName());
     $this->assertSession()->pageTextContains('Public Article created by ' . $this->users[0]->getAccountName());
     $this->assertSession()->pageTextContains('Public Article created by ' . $this->users[1]->getAccountName());
 
diff --git a/core/modules/node/tests/src/Functional/Views/NodeLanguageTest.php b/core/modules/node/tests/src/Functional/Views/NodeLanguageTest.php
index 029ab634e9..986f59cbc0 100644
--- a/core/modules/node/tests/src/Functional/Views/NodeLanguageTest.php
+++ b/core/modules/node/tests/src/Functional/Views/NodeLanguageTest.php
@@ -121,7 +121,7 @@ public function testLanguages() {
     foreach ($this->nodeTitles as $langcode => $list) {
       foreach ($list as $title) {
         if ($langcode == 'en') {
-          $this->assertNoText($title);
+          $this->assertSession()->pageTextNotContains($title);
         }
         else {
           $this->assertSession()->pageTextContains($title);
@@ -130,7 +130,7 @@ public function testLanguages() {
     }
 
     // Test that the language field value is shown.
-    $this->assertNoText('English');
+    $this->assertSession()->pageTextNotContains('English');
     $this->assertSession()->pageTextContains('French');
     $this->assertSession()->pageTextContains('Spanish');
 
@@ -151,8 +151,8 @@ public function testLanguages() {
     $this->drupalGet('test-language/es');
     // This time, test just the language field.
     $message = 'Spanish argument page';
-    $this->assertNoText('English');
-    $this->assertNoText('French');
+    $this->assertSession()->pageTextNotContains('English');
+    $this->assertSession()->pageTextNotContains('French');
     $this->assertSession()->pageTextContains('Spanish');
 
     // Test the front page view filter. Only node titles in the current language
@@ -169,7 +169,7 @@ public function testLanguages() {
       foreach ($this->nodeTitles as $control_langcode => $control_titles) {
         if ($langcode != $control_langcode) {
           foreach ($control_titles as $title) {
-            $this->assertNoText($title);
+            $this->assertSession()->pageTextNotContains($title);
           }
         }
       }
@@ -191,7 +191,7 @@ public function testLanguages() {
       foreach ($this->nodeTitles as $control_langcode => $control_titles) {
         if ($langcode != $control_langcode) {
           foreach ($control_titles as $title) {
-            $this->assertNoText($title);
+            $this->assertSession()->pageTextNotContains($title);
           }
         }
       }
@@ -214,7 +214,7 @@ public function testLanguages() {
             $this->assertSession()->pageTextContains($title);
           }
           else {
-            $this->assertNoText($title);
+            $this->assertSession()->pageTextNotContains($title);
           }
         }
       }
@@ -242,7 +242,7 @@ public function testLanguages() {
           $this->assertSession()->pageTextContains($title);
         }
         else {
-          $this->assertNoText($title);
+          $this->assertSession()->pageTextNotContains($title);
         }
       }
     }
@@ -287,12 +287,12 @@ protected function assertLanguageNames($native = FALSE) {
     if ($native) {
       $this->assertSession()->pageTextContains('Français');
       $this->assertSession()->pageTextContains('Español');
-      $this->assertNoText('French');
-      $this->assertNoText('Spanish');
+      $this->assertSession()->pageTextNotContains('French');
+      $this->assertSession()->pageTextNotContains('Spanish');
     }
     else {
-      $this->assertNoText('Français');
-      $this->assertNoText('Español');
+      $this->assertSession()->pageTextNotContains('Français');
+      $this->assertSession()->pageTextNotContains('Español');
       $this->assertSession()->pageTextContains('French');
       $this->assertSession()->pageTextContains('Spanish');
     }
diff --git a/core/modules/node/tests/src/Functional/Views/StatusExtraTest.php b/core/modules/node/tests/src/Functional/Views/StatusExtraTest.php
index 2c9a54c0a9..6580dd42a8 100644
--- a/core/modules/node/tests/src/Functional/Views/StatusExtraTest.php
+++ b/core/modules/node/tests/src/Functional/Views/StatusExtraTest.php
@@ -70,26 +70,26 @@ public function testStatusExtra() {
     $this->drupalLogin($node_author);
     $this->drupalGet('test_status_extra');
     $this->assertSession()->pageTextContains($node_published->label());
-    $this->assertNoText($node_unpublished->label());
+    $this->assertSession()->pageTextNotContains($node_unpublished->label());
     $this->assertSession()->pageTextContains($node_unpublished2->label());
-    $this->assertNoText($node_unpublished3->label());
+    $this->assertSession()->pageTextNotContains($node_unpublished3->label());
 
     // The normal user should just see the published node.
     $this->drupalLogin($normal_user);
     $this->drupalGet('test_status_extra');
     $this->assertSession()->pageTextContains($node_published->label());
-    $this->assertNoText($node_unpublished->label());
-    $this->assertNoText($node_unpublished2->label());
-    $this->assertNoText($node_unpublished3->label());
+    $this->assertSession()->pageTextNotContains($node_unpublished->label());
+    $this->assertSession()->pageTextNotContains($node_unpublished2->label());
+    $this->assertSession()->pageTextNotContains($node_unpublished3->label());
 
     // The author without the permission to see their own unpublished node should
     // just see the published node.
     $this->drupalLogin($node_author_not_unpublished);
     $this->drupalGet('test_status_extra');
     $this->assertSession()->pageTextContains($node_published->label());
-    $this->assertNoText($node_unpublished->label());
-    $this->assertNoText($node_unpublished2->label());
-    $this->assertNoText($node_unpublished3->label());
+    $this->assertSession()->pageTextNotContains($node_unpublished->label());
+    $this->assertSession()->pageTextNotContains($node_unpublished2->label());
+    $this->assertSession()->pageTextNotContains($node_unpublished3->label());
   }
 
 }
diff --git a/core/modules/path/tests/src/Functional/PathAliasTest.php b/core/modules/path/tests/src/Functional/PathAliasTest.php
index d9f3c78ff3..f599a2a4d4 100644
--- a/core/modules/path/tests/src/Functional/PathAliasTest.php
+++ b/core/modules/path/tests/src/Functional/PathAliasTest.php
@@ -132,7 +132,7 @@ public function testAdminAlias() {
     $this->container->get('path_alias.manager')->cacheClear();
     // Confirm that previous alias no longer works.
     $this->drupalGet($previous);
-    $this->assertNoText($node1->label());
+    $this->assertSession()->pageTextNotContains($node1->label());
     $this->assertSession()->statusCodeEquals(404);
 
     // Create second test node.
@@ -162,7 +162,7 @@ public function testAdminAlias() {
 
     // Confirm that the alias no longer works.
     $this->drupalGet($edit['alias[0][value]']);
-    $this->assertNoText($node1->label());
+    $this->assertSession()->pageTextNotContains($node1->label());
     $this->assertSession()->statusCodeEquals(404);
 
     // Create a really long alias.
@@ -174,7 +174,7 @@ public function testAdminAlias() {
     $truncated_alias = substr($alias, 0, 47);
     $this->drupalPostForm('admin/config/search/path/add', $edit, 'Save');
     // The untruncated alias should not be found.
-    $this->assertNoText($alias);
+    $this->assertSession()->pageTextNotContains($alias);
     // The 'truncated' alias will always be found.
     $this->assertSession()->pageTextContains($truncated_alias);
 
@@ -199,7 +199,7 @@ public function testAdminAlias() {
     $this->drupalPostForm('admin/config/search/path/add', $edit, 'Save');
 
     // Confirm that the alias with trailing slash is not found.
-    $this->assertNoText($edit['alias[0][value]']);
+    $this->assertSession()->pageTextNotContains($edit['alias[0][value]']);
     // The alias without trailing flash is found.
     $this->assertSession()->pageTextContains(trim($edit['alias[0][value]'], '/'));
 
@@ -212,7 +212,7 @@ public function testAdminAlias() {
     $this->assertSession()->pageTextContains('The alias has been saved.');
     $this->drupalGet($edit['alias[0][value]']);
     // Previous alias should no longer work.
-    $this->assertNoText($node4->label());
+    $this->assertSession()->pageTextNotContains($node4->label());
     // Alias should work.
     $this->assertSession()->pageTextContains($node2->label());
     $this->assertSession()->statusCodeEquals(200);
@@ -290,7 +290,7 @@ public function testNodeAlias() {
 
     // Make sure that previous alias no longer works.
     $this->drupalGet($previous);
-    $this->assertNoText($node1->label());
+    $this->assertSession()->pageTextNotContains($node1->label());
     $this->assertSession()->statusCodeEquals(404);
 
     // Create second test node.
@@ -308,7 +308,7 @@ public function testNodeAlias() {
 
     // Confirm that the alias no longer works.
     $this->drupalGet($edit['path[0][alias]']);
-    $this->assertNoText($node1->label());
+    $this->assertSession()->pageTextNotContains($node1->label());
     $this->assertSession()->statusCodeEquals(404);
 
     // Create third test node.
diff --git a/core/modules/path/tests/src/Functional/PathTaxonomyTermTest.php b/core/modules/path/tests/src/Functional/PathTaxonomyTermTest.php
index bcddbc4c69..f4c1d5c756 100644
--- a/core/modules/path/tests/src/Functional/PathTaxonomyTermTest.php
+++ b/core/modules/path/tests/src/Functional/PathTaxonomyTermTest.php
@@ -83,7 +83,7 @@ public function testTermAlias() {
 
     // Confirm that the old alias no longer works.
     $this->drupalGet(trim($edit['path[0][alias]'], '/'));
-    $this->assertNoText($description);
+    $this->assertSession()->pageTextNotContains($description);
     $this->assertSession()->statusCodeEquals(404);
 
     // Remove the term's URL alias.
@@ -93,7 +93,7 @@ public function testTermAlias() {
 
     // Confirm that the alias no longer works.
     $this->drupalGet(trim($edit2['path[0][alias]'], '/'));
-    $this->assertNoText($description);
+    $this->assertSession()->pageTextNotContains($description);
     $this->assertSession()->statusCodeEquals(404);
   }
 
diff --git a/core/modules/responsive_image/tests/src/Functional/ResponsiveImageAdminUITest.php b/core/modules/responsive_image/tests/src/Functional/ResponsiveImageAdminUITest.php
index a5d79d7b2e..8f585ca799 100644
--- a/core/modules/responsive_image/tests/src/Functional/ResponsiveImageAdminUITest.php
+++ b/core/modules/responsive_image/tests/src/Functional/ResponsiveImageAdminUITest.php
@@ -63,7 +63,7 @@ public function testResponsiveImageAdmin() {
     // Check if the new group is created.
     $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet('admin/config/media/responsive-image-style');
-    $this->assertNoText('There are no responsive image styles yet.');
+    $this->assertSession()->pageTextNotContains('There are no responsive image styles yet.');
     $this->assertSession()->pageTextContains('Style One');
 
     // Edit the group.
diff --git a/core/modules/rest/tests/src/Functional/Views/StyleSerializerTest.php b/core/modules/rest/tests/src/Functional/Views/StyleSerializerTest.php
index 86080f5bf9..6748637e77 100644
--- a/core/modules/rest/tests/src/Functional/Views/StyleSerializerTest.php
+++ b/core/modules/rest/tests/src/Functional/Views/StyleSerializerTest.php
@@ -579,7 +579,7 @@ public function testFieldRawOutput() {
     }
     // Test that the excluded field is not shown in the row options.
     $this->drupalGet('admin/structure/views/nojs/display/test_serializer_display_field/rest_export_1/row_options');
-    $this->assertNoText('created');
+    $this->assertSession()->pageTextNotContains('created');
   }
 
   /**
diff --git a/core/modules/search/tests/src/Functional/SearchAdvancedSearchFormTest.php b/core/modules/search/tests/src/Functional/SearchAdvancedSearchFormTest.php
index 838a3a8c70..ce4e0a0608 100644
--- a/core/modules/search/tests/src/Functional/SearchAdvancedSearchFormTest.php
+++ b/core/modules/search/tests/src/Functional/SearchAdvancedSearchFormTest.php
@@ -61,7 +61,7 @@ public function testNodeType() {
 
     // Search for the dummy title with a GET query.
     $this->drupalGet('search/node', ['query' => ['keys' => $dummy_title]]);
-    $this->assertNoText($this->node->label());
+    $this->assertSession()->pageTextNotContains($this->node->label());
 
     // Search for the title of the node with a GET query.
     $this->drupalGet('search/node', ['query' => ['keys' => $this->node->label()]]);
diff --git a/core/modules/search/tests/src/Functional/SearchBlockTest.php b/core/modules/search/tests/src/Functional/SearchBlockTest.php
index 509f8f7fa0..244833b03c 100644
--- a/core/modules/search/tests/src/Functional/SearchBlockTest.php
+++ b/core/modules/search/tests/src/Functional/SearchBlockTest.php
@@ -115,15 +115,15 @@ public function testSearchFormBlock() {
     // search again with a longer keyword. First test using the block form.
     $this->drupalPostForm('node', ['keys' => $this->randomMachineName(1)], 'Search');
     $this->assertSession()->pageTextContains('You must include at least one keyword to match in the content');
-    $this->assertNoText('Please enter some keywords');
+    $this->assertSession()->pageTextNotContains('Please enter some keywords');
     $this->submitForm(['keys' => $this->randomMachineName()], 'Search', 'search-block-form');
-    $this->assertNoText('You must include at least one keyword to match in the content');
+    $this->assertSession()->pageTextNotContains('You must include at least one keyword to match in the content');
 
     // Same test again, using the search page form for the second search this
     // time.
     $this->drupalPostForm('node', ['keys' => $this->randomMachineName(1)], 'Search');
     $this->submitForm(['keys' => $this->randomMachineName()], 'Search', 'search-form');
-    $this->assertNoText('You must include at least one keyword to match in the content');
+    $this->assertSession()->pageTextNotContains('You must include at least one keyword to match in the content');
 
     // Edit the block configuration so that it searches users instead of nodes,
     // and test.
diff --git a/core/modules/search/tests/src/Functional/SearchCommentCountToggleTest.php b/core/modules/search/tests/src/Functional/SearchCommentCountToggleTest.php
index 55a24a54e2..d4b51db0f9 100644
--- a/core/modules/search/tests/src/Functional/SearchCommentCountToggleTest.php
+++ b/core/modules/search/tests/src/Functional/SearchCommentCountToggleTest.php
@@ -105,7 +105,7 @@ public function testSearchCommentCountToggle() {
     $this->searchableNodes['1 comment']->save();
 
     $this->submitForm($edit, 'Search');
-    $this->assertNoText('0 comments');
+    $this->assertSession()->pageTextNotContains('0 comments');
     $this->assertSession()->pageTextContains('1 comment');
 
     // Test comment count display for nodes with comment status set to Hidden
@@ -115,8 +115,8 @@ public function testSearchCommentCountToggle() {
     $this->searchableNodes['1 comment']->save();
 
     $this->submitForm($edit, 'Search');
-    $this->assertNoText('0 comments');
-    $this->assertNoText('1 comment');
+    $this->assertSession()->pageTextNotContains('0 comments');
+    $this->assertSession()->pageTextNotContains('1 comment');
   }
 
 }
diff --git a/core/modules/search/tests/src/Functional/SearchCommentTest.php b/core/modules/search/tests/src/Functional/SearchCommentTest.php
index 7f522e4f5f..7a374ff8cd 100644
--- a/core/modules/search/tests/src/Functional/SearchCommentTest.php
+++ b/core/modules/search/tests/src/Functional/SearchCommentTest.php
@@ -362,7 +362,7 @@ public function testAddNewComment() {
     // not be part of the search snippet.
     $this->drupalPostForm('search/node', ['keys' => 'short'], 'Search');
     $this->assertSession()->pageTextContains($node->label());
-    $this->assertNoText('Add new comment');
+    $this->assertSession()->pageTextNotContains('Add new comment');
   }
 
 }
diff --git a/core/modules/search/tests/src/Functional/SearchConfigSettingsFormTest.php b/core/modules/search/tests/src/Functional/SearchConfigSettingsFormTest.php
index 0abe5ed7a7..e8fda20550 100644
--- a/core/modules/search/tests/src/Functional/SearchConfigSettingsFormTest.php
+++ b/core/modules/search/tests/src/Functional/SearchConfigSettingsFormTest.php
@@ -106,7 +106,7 @@ public function testSearchSettingsPage() {
       'minimum_word_size' => $this->randomMachineName(3),
     ];
     $this->drupalPostForm('admin/config/search/pages', $edit, 'Save configuration');
-    $this->assertNoText('The configuration options have been saved.');
+    $this->assertSession()->pageTextNotContains('The configuration options have been saved.');
 
     // Test logging setting. It should be off by default.
     $text = $this->randomMachineName(5);
@@ -182,14 +182,14 @@ public function testSearchModuleDisabling() {
       $info = $plugin_info[$entity_id];
       $this->drupalGet('search/' . $entity->getPath(), ['query' => ['keys' => $info['keys']]]);
       $this->assertSession()->statusCodeEquals(200);
-      $this->assertNoText('no results');
+      $this->assertSession()->pageTextNotContains('no results');
       $this->assertSession()->pageTextContains($info['text']);
 
       // Verify that other plugin search tab labels are not visible.
       foreach ($plugins as $other) {
         if ($other != $entity_id) {
           $label = $entities[$other]->label();
-          $this->assertNoText($label);
+          $this->assertSession()->pageTextNotContains($label);
         }
       }
 
diff --git a/core/modules/search/tests/src/Functional/SearchEmbedFormTest.php b/core/modules/search/tests/src/Functional/SearchEmbedFormTest.php
index 5f4b4e0642..d4acd505f9 100644
--- a/core/modules/search/tests/src/Functional/SearchEmbedFormTest.php
+++ b/core/modules/search/tests/src/Functional/SearchEmbedFormTest.php
@@ -80,7 +80,7 @@ public function testEmbeddedForm() {
     // Now verify that if we submit the search form, it doesn't count as
     // our form being submitted.
     $this->drupalPostForm('search', ['keys' => 'foo'], 'Search');
-    $this->assertNoText('Test form was submitted');
+    $this->assertSession()->pageTextNotContains('Test form was submitted');
     $count = \Drupal::state()->get('search_embedded_form.submit_count');
     $this->assertEquals($this->submitCount, $count, 'Form submission count is correct');
     $this->submitCount = $count;
diff --git a/core/modules/search/tests/src/Functional/SearchExactTest.php b/core/modules/search/tests/src/Functional/SearchExactTest.php
index 54d60078fa..63569f2893 100644
--- a/core/modules/search/tests/src/Functional/SearchExactTest.php
+++ b/core/modules/search/tests/src/Functional/SearchExactTest.php
@@ -85,8 +85,8 @@ public function testExactQuery() {
     $node_type_config->save();
     $edit = ['keys' => 'Druplicon'];
     $this->drupalPostForm('search/node', $edit, 'Search');
-    $this->assertNoText($user->getAccountName());
-    $this->assertNoText($this->container->get('date.formatter')->format($node->getChangedTime(), 'short'));
+    $this->assertSession()->pageTextNotContains($user->getAccountName());
+    $this->assertSession()->pageTextNotContains($this->container->get('date.formatter')->format($node->getChangedTime(), 'short'));
 
   }
 
diff --git a/core/modules/search/tests/src/Functional/SearchKeywordsConditionsTest.php b/core/modules/search/tests/src/Functional/SearchKeywordsConditionsTest.php
index 563fcedf65..dbc42e2d3e 100644
--- a/core/modules/search/tests/src/Functional/SearchKeywordsConditionsTest.php
+++ b/core/modules/search/tests/src/Functional/SearchKeywordsConditionsTest.php
@@ -58,7 +58,7 @@ protected function setUp(): void {
   public function testSearchKeywordsConditions() {
     // No keys, not conditions - no results.
     $this->drupalGet('search/dummy_path');
-    $this->assertNoText('Dummy search snippet to display');
+    $this->assertSession()->pageTextNotContains('Dummy search snippet to display');
     // With keys - get results.
     $keys = 'bike shed ' . $this->randomMachineName();
     $this->drupalGet("search/dummy_path", ['query' => ['keys' => $keys]]);
diff --git a/core/modules/search/tests/src/Functional/SearchNodeUpdateAndDeletionTest.php b/core/modules/search/tests/src/Functional/SearchNodeUpdateAndDeletionTest.php
index 719faccc8f..ff793326db 100644
--- a/core/modules/search/tests/src/Functional/SearchNodeUpdateAndDeletionTest.php
+++ b/core/modules/search/tests/src/Functional/SearchNodeUpdateAndDeletionTest.php
@@ -122,7 +122,7 @@ public function testSearchIndexUpdateOnNodeDeletion() {
 
     // Search again to verify the node doesn't appear anymore.
     $this->drupalPostForm('search/node', $edit, 'Search');
-    $this->assertNoText($node->label());
+    $this->assertSession()->pageTextNotContains($node->label());
   }
 
 }
diff --git a/core/modules/search/tests/src/Functional/SearchNumberMatchingTest.php b/core/modules/search/tests/src/Functional/SearchNumberMatchingTest.php
index 82ce2db7e7..ce6c2621ca 100644
--- a/core/modules/search/tests/src/Functional/SearchNumberMatchingTest.php
+++ b/core/modules/search/tests/src/Functional/SearchNumberMatchingTest.php
@@ -97,7 +97,7 @@ public function testNumberSearching() {
       // Verify that the node title does not appear on the search page
       // with a dummy search.
       $this->drupalPostForm('search/node', ['keys' => 'foo'], 'Search');
-      $this->assertNoText($node->label());
+      $this->assertSession()->pageTextNotContains($node->label());
 
       // Now verify that we can find node i by searching for any of the
       // numbers.
diff --git a/core/modules/search/tests/src/Functional/SearchNumbersTest.php b/core/modules/search/tests/src/Functional/SearchNumbersTest.php
index 1af4c350a6..e46b9b4239 100644
--- a/core/modules/search/tests/src/Functional/SearchNumbersTest.php
+++ b/core/modules/search/tests/src/Functional/SearchNumbersTest.php
@@ -110,7 +110,7 @@ public function testNumberSearching() {
       // Verify that the node title does not appear on the search page
       // with a dummy search.
       $this->drupalPostForm('search/node', ['keys' => 'foo'], 'Search');
-      $this->assertNoText($node->label());
+      $this->assertSession()->pageTextNotContains($node->label());
 
       // Verify that the node title does appear as a link on the search page
       // when searching for the number.
diff --git a/core/modules/search/tests/src/Functional/SearchPageTextTest.php b/core/modules/search/tests/src/Functional/SearchPageTextTest.php
index 501cd5fb55..855e7e714f 100644
--- a/core/modules/search/tests/src/Functional/SearchPageTextTest.php
+++ b/core/modules/search/tests/src/Functional/SearchPageTextTest.php
@@ -82,8 +82,8 @@ public function testSearchText() {
     $this->assertSession()->pageTextContains('Search');
     $title_source = 'Search for @keywords | Drupal';
     $this->assertSession()->titleEquals('Search for ' . Unicode::truncate($search_terms, 60, TRUE, TRUE) . ' | Drupal');
-    $this->assertNoText('Node');
-    $this->assertNoText('Node');
+    $this->assertSession()->pageTextNotContains('Node');
+    $this->assertSession()->pageTextNotContains('Node');
     $this->assertSession()->pageTextContains('Content');
 
     $this->clickLink('About searching');
@@ -144,18 +144,18 @@ public function testSearchText() {
     // Make sure the "Please enter some keywords" message is NOT displayed if
     // you use "or" words or phrases in Advanced Search.
     $this->drupalPostForm('search/node', ['or' => $this->randomMachineName() . ' ' . $this->randomMachineName()], 'edit-submit--2');
-    $this->assertNoText('Please enter some keywords');
+    $this->assertSession()->pageTextNotContains('Please enter some keywords');
     $this->drupalPostForm('search/node', ['phrase' => '"' . $this->randomMachineName() . '" "' . $this->randomMachineName() . '"'], 'edit-submit--2');
-    $this->assertNoText('Please enter some keywords');
+    $this->assertSession()->pageTextNotContains('Please enter some keywords');
 
     // Verify that if you search for a too-short keyword, you get the right
     // message, and that if after that you search for a longer keyword, you
     // do not still see the message.
     $this->drupalPostForm('search/node', ['keys' => $this->randomMachineName(1)], 'Search');
     $this->assertSession()->pageTextContains('You must include at least one keyword');
-    $this->assertNoText('Please enter some keywords');
+    $this->assertSession()->pageTextNotContains('Please enter some keywords');
     $this->submitForm(['keys' => $this->randomMachineName()], 'Search');
-    $this->assertNoText('You must include at least one keyword');
+    $this->assertSession()->pageTextNotContains('You must include at least one keyword');
 
     // Test that if you search for a URL with .. in it, you still end up at
     // the search page. See issue https://www.drupal.org/node/890058.
diff --git a/core/modules/search/tests/src/Functional/SearchQueryAlterTest.php b/core/modules/search/tests/src/Functional/SearchQueryAlterTest.php
index 6587cc3d11..b8b136fbc9 100644
--- a/core/modules/search/tests/src/Functional/SearchQueryAlterTest.php
+++ b/core/modules/search/tests/src/Functional/SearchQueryAlterTest.php
@@ -54,7 +54,7 @@ public function testQueryAlter() {
     $this->drupalPostForm('search/node', ['keys' => 'pizza'], 'Search');
     // The article should be there but not the page.
     $this->assertSession()->pageTextContains('article');
-    $this->assertNoText('page');
+    $this->assertSession()->pageTextNotContains('page');
   }
 
 }
diff --git a/core/modules/statistics/tests/src/Functional/StatisticsAdminTest.php b/core/modules/statistics/tests/src/Functional/StatisticsAdminTest.php
index 0bbbda8230..88ab83a0e4 100644
--- a/core/modules/statistics/tests/src/Functional/StatisticsAdminTest.php
+++ b/core/modules/statistics/tests/src/Functional/StatisticsAdminTest.php
@@ -173,7 +173,7 @@ public function testExpiredLogs() {
 
     // Verify that no hit URL is found.
     $this->drupalGet('admin/reports/pages');
-    $this->assertNoText('node/' . $this->testNode->id());
+    $this->assertSession()->pageTextNotContains('node/' . $this->testNode->id());
 
     $result = Database::getConnection()->select('node_counter', 'nc')
       ->fields('nc', ['daycount'])
diff --git a/core/modules/system/tests/src/Functional/Bootstrap/DrupalMessengerServiceTest.php b/core/modules/system/tests/src/Functional/Bootstrap/DrupalMessengerServiceTest.php
index 193680b97f..8ad6019120 100644
--- a/core/modules/system/tests/src/Functional/Bootstrap/DrupalMessengerServiceTest.php
+++ b/core/modules/system/tests/src/Functional/Bootstrap/DrupalMessengerServiceTest.php
@@ -31,7 +31,7 @@ public function testDrupalMessengerService() {
     // The page at system_test.messenger_service route sets two messages and
     // then removes the first before it is displayed.
     $this->drupalGet(Url::fromRoute('system_test.messenger_service'));
-    $this->assertNoText('First message (removed).');
+    $this->assertSession()->pageTextNotContains('First message (removed).');
     $this->assertRaw(t('Second message with <em>markup!</em> (not removed).'));
 
     // Ensure duplicate messages are handled as expected.
diff --git a/core/modules/system/tests/src/Functional/DrupalKernel/ContentNegotiationTest.php b/core/modules/system/tests/src/Functional/DrupalKernel/ContentNegotiationTest.php
index acea9d9bac..f500f78b53 100644
--- a/core/modules/system/tests/src/Functional/DrupalKernel/ContentNegotiationTest.php
+++ b/core/modules/system/tests/src/Functional/DrupalKernel/ContentNegotiationTest.php
@@ -42,7 +42,7 @@ public function testBogusAcceptHeader() {
     ];
     foreach ($tests as $case => $header) {
       $this->drupalGet('', [], ['Accept: ' . $header]);
-      $this->assertNoText('Unsupported Media Type');
+      $this->assertSession()->pageTextNotContains('Unsupported Media Type');
       $this->assertSession()->pageTextContains('Log in');
     }
   }
diff --git a/core/modules/system/tests/src/Functional/Entity/EntityRevisionsTest.php b/core/modules/system/tests/src/Functional/Entity/EntityRevisionsTest.php
index 9e0d26f57a..ed0e74d31f 100644
--- a/core/modules/system/tests/src/Functional/Entity/EntityRevisionsTest.php
+++ b/core/modules/system/tests/src/Functional/Entity/EntityRevisionsTest.php
@@ -212,11 +212,11 @@ public function testEntityRevisionParamConverter() {
 
     $this->drupalGet($revision_url);
     $this->assertSession()->pageTextContains('pending revision - en');
-    $this->assertNoText('pending revision - de');
+    $this->assertSession()->pageTextNotContains('pending revision - de');
 
     $this->drupalGet('de/' . $revision_url);
     $this->assertSession()->pageTextContains('pending revision - de');
-    $this->assertNoText('pending revision - en');
+    $this->assertSession()->pageTextNotContains('pending revision - en');
   }
 
   /**
diff --git a/core/modules/system/tests/src/Functional/File/ConfigTest.php b/core/modules/system/tests/src/Functional/File/ConfigTest.php
index 313a118d70..3fb94889f0 100644
--- a/core/modules/system/tests/src/Functional/File/ConfigTest.php
+++ b/core/modules/system/tests/src/Functional/File/ConfigTest.php
@@ -57,7 +57,7 @@ public function testFileConfigurationPage() {
 
     $this->drupalGet('admin/config/media/file-system');
     $this->assertSession()->pageTextContains('Public local files served by the webserver.');
-    $this->assertNoText('Private local files served by Drupal.');
+    $this->assertSession()->pageTextNotContains('Private local files served by Drupal.');
   }
 
 }
diff --git a/core/modules/system/tests/src/Functional/Form/ElementsAccessTest.php b/core/modules/system/tests/src/Functional/Form/ElementsAccessTest.php
index 6bb0d2ca40..c6263d6be9 100644
--- a/core/modules/system/tests/src/Functional/Form/ElementsAccessTest.php
+++ b/core/modules/system/tests/src/Functional/Form/ElementsAccessTest.php
@@ -28,12 +28,12 @@ class ElementsAccessTest extends BrowserTestBase {
    */
   public function testAccessFalse() {
     $this->drupalPostForm('form_test/vertical-tabs-access', [], 'Submit');
-    $this->assertNoText('This checkbox inside a vertical tab does not have its default value.');
-    $this->assertNoText('This textfield inside a vertical tab does not have its default value.');
-    $this->assertNoText('This checkbox inside a fieldset does not have its default value.');
-    $this->assertNoText('This checkbox inside a container does not have its default value.');
-    $this->assertNoText('This checkbox inside a nested container does not have its default value.');
-    $this->assertNoText('This checkbox inside a vertical tab whose fieldset access is allowed does not have its default value.');
+    $this->assertSession()->pageTextNotContains('This checkbox inside a vertical tab does not have its default value.');
+    $this->assertSession()->pageTextNotContains('This textfield inside a vertical tab does not have its default value.');
+    $this->assertSession()->pageTextNotContains('This checkbox inside a fieldset does not have its default value.');
+    $this->assertSession()->pageTextNotContains('This checkbox inside a container does not have its default value.');
+    $this->assertSession()->pageTextNotContains('This checkbox inside a nested container does not have its default value.');
+    $this->assertSession()->pageTextNotContains('This checkbox inside a vertical tab whose fieldset access is allowed does not have its default value.');
     $this->assertSession()->pageTextContains('The form submitted correctly.');
   }
 
diff --git a/core/modules/system/tests/src/Functional/Form/FormStoragePageCacheTest.php b/core/modules/system/tests/src/Functional/Form/FormStoragePageCacheTest.php
index 6bdefd2682..629dbec687 100644
--- a/core/modules/system/tests/src/Functional/Form/FormStoragePageCacheTest.php
+++ b/core/modules/system/tests/src/Functional/Form/FormStoragePageCacheTest.php
@@ -103,8 +103,8 @@ public function testRebuildFormStorageOnCachedPage() {
     // that initial build ID.
     $edit = ['title' => 'something'];
     $this->submitForm($edit, 'Rebuild');
-    $this->assertNoText('No old build id');
-    $this->assertNoText($build_id_initial);
+    $this->assertSession()->pageTextNotContains('No old build id');
+    $this->assertSession()->pageTextNotContains($build_id_initial);
     $build_id_first_rebuild = $this->getFormBuildId();
     $this->assertNotEquals($build_id_initial, $build_id_first_rebuild, 'Build id changes on first rebuild.');
 
diff --git a/core/modules/system/tests/src/Functional/Form/FormTest.php b/core/modules/system/tests/src/Functional/Form/FormTest.php
index 450aed3885..ee3822fa9d 100644
--- a/core/modules/system/tests/src/Functional/Form/FormTest.php
+++ b/core/modules/system/tests/src/Functional/Form/FormTest.php
@@ -425,7 +425,7 @@ public function testSelect() {
         'multiple_no_default',
     ];
     foreach ($no_errors as $key) {
-      $this->assertNoText($form[$key]['#title'] . ' field is required.');
+      $this->assertSession()->pageTextNotContains($form[$key]['#title'] . ' field is required.');
     }
 
     $expected_errors = [
diff --git a/core/modules/system/tests/src/Functional/Form/ModulesListFormWebTest.php b/core/modules/system/tests/src/Functional/Form/ModulesListFormWebTest.php
index f9e8382037..4b662988f3 100644
--- a/core/modules/system/tests/src/Functional/Form/ModulesListFormWebTest.php
+++ b/core/modules/system/tests/src/Functional/Form/ModulesListFormWebTest.php
@@ -161,7 +161,7 @@ public function testInstalledIncompatibleModule() {
 
       file_put_contents($file_path, Yaml::encode($compatible_info));
       $this->drupalGet('admin/modules');
-      $this->assertNoText($incompatible_modules_message);
+      $this->assertSession()->pageTextNotContains($incompatible_modules_message);
     }
     // Uninstall the module and ensure that incompatible modules message is not
     // displayed for modules that are not installed.
@@ -173,7 +173,7 @@ public function testInstalledIncompatibleModule() {
       $incompatible_info = $info + $incompatible_update;
       file_put_contents($file_path, Yaml::encode($incompatible_info));
       $this->drupalGet('admin/modules');
-      $this->assertNoText($incompatible_modules_message);
+      $this->assertSession()->pageTextNotContains($incompatible_modules_message);
     }
   }
 
diff --git a/core/modules/system/tests/src/Functional/Form/ValidationTest.php b/core/modules/system/tests/src/Functional/Form/ValidationTest.php
index 0ab5d7c2ee..671593b8aa 100644
--- a/core/modules/system/tests/src/Functional/Form/ValidationTest.php
+++ b/core/modules/system/tests/src/Functional/Form/ValidationTest.php
@@ -72,7 +72,7 @@ public function testValidate() {
       ->setValue('invalid_token');
     $this->submitForm(['name' => 'validate'], 'Save');
     $this->assertSession()->fieldValueNotEquals('name', '#value changed by #validate');
-    $this->assertNoText('Name value: value changed by setValueForElement() in #validate');
+    $this->assertSession()->pageTextNotContains('Name value: value changed by setValueForElement() in #validate');
     $this->assertSession()->pageTextContains('The form has become outdated.');
   }
 
@@ -113,19 +113,19 @@ public function testValidateLimitErrors() {
     // validated, but the #element_validate handler for the 'test' field
     // is triggered.
     $this->drupalPostForm($path, $edit, 'Partial validate');
-    $this->assertNoText('Title field is required.');
+    $this->assertSession()->pageTextNotContains('Title field is required.');
     $this->assertSession()->pageTextContains('Test element is invalid');
 
     // Edge case of #limit_validation_errors containing numeric indexes: same
     // thing with the 'Partial validate (numeric index)' button and the
     // 'test_numeric_index' field.
     $this->drupalPostForm($path, $edit, 'Partial validate (numeric index)');
-    $this->assertNoText('Title field is required.');
+    $this->assertSession()->pageTextNotContains('Title field is required.');
     $this->assertSession()->pageTextContains('Test (numeric index) element is invalid');
 
     // Ensure something like 'foobar' isn't considered "inside" 'foo'.
     $this->drupalPostForm($path, $edit, 'Partial validate (substring)');
-    $this->assertNoText('Title field is required.');
+    $this->assertSession()->pageTextNotContains('Title field is required.');
     $this->assertSession()->pageTextContains('Test (substring) foo element is invalid');
 
     // Ensure not validated values are not available to submit handlers.
@@ -212,15 +212,15 @@ public function testCustomRequiredError() {
 
     foreach (Element::children($form) as $key) {
       if (isset($form[$key]['#required_error'])) {
-        $this->assertNoText($form[$key]['#title'] . ' field is required.');
+        $this->assertSession()->pageTextNotContains($form[$key]['#title'] . ' field is required.');
         $this->assertSession()->pageTextContains((string) $form[$key]['#required_error']);
       }
       elseif (isset($form[$key]['#form_test_required_error'])) {
-        $this->assertNoText($form[$key]['#title'] . ' field is required.');
+        $this->assertSession()->pageTextNotContains($form[$key]['#title'] . ' field is required.');
         $this->assertSession()->pageTextContains((string) $form[$key]['#form_test_required_error']);
       }
     }
-    $this->assertNoText('An illegal choice has been detected. Please contact the site administrator.');
+    $this->assertSession()->pageTextNotContains('An illegal choice has been detected. Please contact the site administrator.');
 
     // Verify that no custom validation error appears with valid values.
     $edit = [
@@ -232,15 +232,15 @@ public function testCustomRequiredError() {
 
     foreach (Element::children($form) as $key) {
       if (isset($form[$key]['#required_error'])) {
-        $this->assertNoText($form[$key]['#title'] . ' field is required.');
-        $this->assertNoText((string) $form[$key]['#required_error']);
+        $this->assertSession()->pageTextNotContains($form[$key]['#title'] . ' field is required.');
+        $this->assertSession()->pageTextNotContains((string) $form[$key]['#required_error']);
       }
       elseif (isset($form[$key]['#form_test_required_error'])) {
-        $this->assertNoText($form[$key]['#title'] . ' field is required.');
-        $this->assertNoText((string) $form[$key]['#form_test_required_error']);
+        $this->assertSession()->pageTextNotContains($form[$key]['#title'] . ' field is required.');
+        $this->assertSession()->pageTextNotContains((string) $form[$key]['#form_test_required_error']);
       }
     }
-    $this->assertNoText('An illegal choice has been detected. Please contact the site administrator.');
+    $this->assertSession()->pageTextNotContains('An illegal choice has been detected. Please contact the site administrator.');
   }
 
 }
diff --git a/core/modules/system/tests/src/Functional/Menu/MenuRouterTest.php b/core/modules/system/tests/src/Functional/Menu/MenuRouterTest.php
index c5eb2b53b7..ec20cce741 100644
--- a/core/modules/system/tests/src/Functional/Menu/MenuRouterTest.php
+++ b/core/modules/system/tests/src/Functional/Menu/MenuRouterTest.php
@@ -80,7 +80,7 @@ protected function doTestHookMenuIntegration() {
   protected function doTestTitleCallbackFalse() {
     $this->drupalGet('test-page');
     $this->assertSession()->pageTextContains('A title with @placeholder', 'Raw text found on the page');
-    $this->assertNoText('A title with some other text', 'Text with placeholder substitutions not found.');
+    $this->assertSession()->pageTextNotContains('A title with some other text', 'Text with placeholder substitutions not found.');
   }
 
   /**
@@ -89,7 +89,7 @@ protected function doTestTitleCallbackFalse() {
   protected function doTestTitleMenuCallback() {
     // Verify that the menu router item title is not visible.
     $this->drupalGet('');
-    $this->assertNoText('Menu Callback Title');
+    $this->assertSession()->pageTextNotContains('Menu Callback Title');
     // Verify that the menu router item title is output as page title.
     $this->drupalGet('menu_callback_title');
     $this->assertSession()->pageTextContains('Menu Callback Title');
@@ -200,7 +200,7 @@ protected function doTestExoticPath() {
       "éøïвβ中國書۞";
     $this->drupalGet($path);
     $this->assertRaw('This is the menuTestCallback content.');
-    $this->assertNoText('The website encountered an unexpected error. Please try again later.');
+    $this->assertSession()->pageTextNotContains('The website encountered an unexpected error. Please try again later.');
   }
 
   /**
diff --git a/core/modules/system/tests/src/Functional/Module/ClassLoaderTest.php b/core/modules/system/tests/src/Functional/Module/ClassLoaderTest.php
index c4baf155b1..988f8ba6d4 100644
--- a/core/modules/system/tests/src/Functional/Module/ClassLoaderTest.php
+++ b/core/modules/system/tests/src/Functional/Module/ClassLoaderTest.php
@@ -59,7 +59,7 @@ public function testClassLoadingNotInstalledModules() {
     for ($i = 0; $i < 2; $i++) {
       $this->drupalGet('module-test/class-loading');
       $this->assertSession()->statusCodeEquals(200);
-      $this->assertNoText($this->expected);
+      $this->assertSession()->pageTextNotContains($this->expected);
     }
   }
 
@@ -79,7 +79,7 @@ public function testClassLoadingDisabledModules() {
     for ($i = 0; $i < 2; $i++) {
       $this->drupalGet('module-test/class-loading');
       $this->assertSession()->statusCodeEquals(200);
-      $this->assertNoText($this->expected);
+      $this->assertSession()->pageTextNotContains($this->expected);
     }
   }
 
diff --git a/core/modules/system/tests/src/Functional/Module/ExperimentalModuleTest.php b/core/modules/system/tests/src/Functional/Module/ExperimentalModuleTest.php
index 59f017aa61..f778002c13 100644
--- a/core/modules/system/tests/src/Functional/Module/ExperimentalModuleTest.php
+++ b/core/modules/system/tests/src/Functional/Module/ExperimentalModuleTest.php
@@ -47,7 +47,7 @@ public function testExperimentalConfirmForm() {
     $edit["modules[test_page_test][enable]"] = TRUE;
     $this->drupalPostForm('admin/modules', $edit, 'Install');
     $this->assertSession()->pageTextContains('Module Test page has been enabled.');
-    $this->assertNoText('Experimental modules are provided for testing purposes only.');
+    $this->assertSession()->pageTextNotContains('Experimental modules are provided for testing purposes only.');
 
     // Uninstall the module.
     \Drupal::service('module_installer')->uninstall(['test_page_test']);
@@ -61,12 +61,12 @@ public function testExperimentalConfirmForm() {
 
     // The module should not be enabled and there should be a warning and a
     // list of the experimental modules with only this one.
-    $this->assertNoText('Experimental Test has been enabled.');
+    $this->assertSession()->pageTextNotContains('Experimental Test has been enabled.');
     $this->assertSession()->pageTextContains('Experimental modules are provided for testing purposes only.');
     $this->assertSession()->pageTextContains('The following modules are experimental: Experimental Test');
 
     // There should be no message about enabling dependencies.
-    $this->assertNoText('You must enable');
+    $this->assertSession()->pageTextNotContains('You must enable');
 
     // Enable the module and confirm that it worked.
     $this->submitForm([], 'Continue');
@@ -83,14 +83,14 @@ public function testExperimentalConfirmForm() {
 
     // The module should not be enabled and there should be a warning and a
     // list of the experimental modules with only this one.
-    $this->assertNoText('2 modules have been enabled: Experimental Dependency Test, Experimental Test');
+    $this->assertSession()->pageTextNotContains('2 modules have been enabled: Experimental Dependency Test, Experimental Test');
     $this->assertSession()->pageTextContains('Experimental modules are provided for testing purposes only.');
 
     $this->assertSession()->pageTextContains('The following modules are experimental: Experimental Test');
 
     // Ensure the non-experimental module is not listed as experimental.
-    $this->assertNoText('The following modules are experimental: Experimental Test, Experimental Dependency Test');
-    $this->assertNoText('The following modules are experimental: Experimental Dependency Test');
+    $this->assertSession()->pageTextNotContains('The following modules are experimental: Experimental Test, Experimental Dependency Test');
+    $this->assertSession()->pageTextNotContains('The following modules are experimental: Experimental Dependency Test');
 
     // There should be a message about enabling dependencies.
     $this->assertSession()->pageTextContains('You must enable the Experimental Test module to install Experimental Dependency Test');
@@ -112,17 +112,17 @@ public function testExperimentalConfirmForm() {
 
     // The module should not be enabled and there should be a warning and a
     // list of the experimental modules with only this one.
-    $this->assertNoText('2 modules have been enabled: Experimental Dependency Test, Experimental Test');
+    $this->assertSession()->pageTextNotContains('2 modules have been enabled: Experimental Dependency Test, Experimental Test');
     $this->assertSession()->pageTextContains('Experimental modules are provided for testing purposes only.');
 
     $this->assertSession()->pageTextContains('The following modules are experimental: Experimental Test');
 
     // Ensure the non-experimental module is not listed as experimental.
-    $this->assertNoText('The following modules are experimental: Experimental Dependency Test, Experimental Test');
-    $this->assertNoText('The following modules are experimental: Experimental Dependency Test');
+    $this->assertSession()->pageTextNotContains('The following modules are experimental: Experimental Dependency Test, Experimental Test');
+    $this->assertSession()->pageTextNotContains('The following modules are experimental: Experimental Dependency Test');
 
     // There should be no message about enabling dependencies.
-    $this->assertNoText('You must enable');
+    $this->assertSession()->pageTextNotContains('You must enable');
 
     // Enable the module and confirm that it worked.
     $this->submitForm([], 'Continue');
diff --git a/core/modules/system/tests/src/Functional/Module/PrepareUninstallTest.php b/core/modules/system/tests/src/Functional/Module/PrepareUninstallTest.php
index 28f1155954..d0dbae71eb 100644
--- a/core/modules/system/tests/src/Functional/Module/PrepareUninstallTest.php
+++ b/core/modules/system/tests/src/Functional/Module/PrepareUninstallTest.php
@@ -108,7 +108,7 @@ public function testUninstall() {
     $this->drupalPostForm('admin/modules/uninstall', ['uninstall[taxonomy]' => TRUE], 'Uninstall');
     $this->submitForm([], 'Uninstall');
     $this->assertSession()->pageTextContains('The selected modules have been uninstalled.');
-    $this->assertNoText('Enables the categorization of content.');
+    $this->assertSession()->pageTextNotContains('Enables the categorization of content.');
 
     // Check Node cannot be uninstalled yet, there is content to be removed.
     $this->drupalGet('admin/modules/uninstall');
@@ -135,7 +135,7 @@ public function testUninstall() {
     }
 
     // Ensures there is no more count when not necessary.
-    $this->assertNoText('And 0 more content');
+    $this->assertSession()->pageTextNotContains('And 0 more content');
     $this->assertSession()->pageTextContains('This action cannot be undone.');
     $this->assertSession()->pageTextContains('Make a backup of your database if you want to be able to restore these items.');
 
@@ -168,7 +168,7 @@ public function testUninstall() {
     $this->drupalPostForm('admin/modules/uninstall', ['uninstall[node]' => TRUE], 'Uninstall');
     $this->submitForm([], 'Uninstall');
     $this->assertSession()->pageTextContains('The selected modules have been uninstalled.');
-    $this->assertNoText('Allows content to be submitted to the site and displayed on pages.');
+    $this->assertSession()->pageTextNotContains('Allows content to be submitted to the site and displayed on pages.');
 
     // Ensure a 404 is returned when accessing a non-existent entity type.
     $this->drupalGet('admin/modules/uninstall/entity/node');
diff --git a/core/modules/system/tests/src/Functional/Module/UninstallTest.php b/core/modules/system/tests/src/Functional/Module/UninstallTest.php
index 7b245cf81e..0532644a58 100644
--- a/core/modules/system/tests/src/Functional/Module/UninstallTest.php
+++ b/core/modules/system/tests/src/Functional/Module/UninstallTest.php
@@ -86,7 +86,7 @@ public function testUninstallPage() {
     $edit = [];
     $edit['uninstall[module_test]'] = TRUE;
     $this->drupalPostForm('admin/modules/uninstall', $edit, 'Uninstall');
-    $this->assertNoText('Configuration deletions');
+    $this->assertSession()->pageTextNotContains('Configuration deletions');
     $this->assertSession()->pageTextContains('Configuration updates');
     $this->assertSession()->pageTextContains($node_type->label());
     $this->submitForm([], 'Uninstall');
@@ -99,7 +99,7 @@ public function testUninstallPage() {
     $edit['uninstall[node]'] = TRUE;
     $this->drupalPostForm('admin/modules/uninstall', $edit, 'Uninstall');
     $this->assertSession()->pageTextContains('Configuration deletions');
-    $this->assertNoText('Configuration updates');
+    $this->assertSession()->pageTextNotContains('Configuration updates');
 
     $entity_types = [];
     foreach ($node_dependencies as $entity) {
@@ -169,7 +169,7 @@ public function testFailedInstallStatus() {
     $this->drupalPostForm('admin/modules/uninstall', $edit, 'Uninstall');
     $this->submitForm([], 'Uninstall');
     $this->assertSession()->pageTextContains('The selected modules have been uninstalled.');
-    $this->assertNoText('Module installer config test');
+    $this->assertSession()->pageTextNotContains('Module installer config test');
   }
 
 }
diff --git a/core/modules/system/tests/src/Functional/Session/SessionHttpsTest.php b/core/modules/system/tests/src/Functional/Session/SessionHttpsTest.php
index 4657df6c37..65c7124c71 100644
--- a/core/modules/system/tests/src/Functional/Session/SessionHttpsTest.php
+++ b/core/modules/system/tests/src/Functional/Session/SessionHttpsTest.php
@@ -92,7 +92,7 @@ public function testHttpsSession() {
 
     // Verify that user is not logged in on non-secure URL.
     $this->drupalGet($this->httpUrl('admin/config'));
-    $this->assertNoText('Configuration');
+    $this->assertSession()->pageTextNotContains('Configuration');
     $this->assertSession()->statusCodeEquals(403);
 
     // Verify that empty SID cannot be used on the non-secure site.
diff --git a/core/modules/system/tests/src/Functional/Session/SessionTest.php b/core/modules/system/tests/src/Functional/Session/SessionTest.php
index 6bc87f73e2..32307d69a4 100644
--- a/core/modules/system/tests/src/Functional/Session/SessionTest.php
+++ b/core/modules/system/tests/src/Functional/Session/SessionTest.php
@@ -130,7 +130,7 @@ public function testDataPersistence() {
     $this->sessionReset();
     // Verify that after logout, previous user's session data is not available.
     $this->drupalGet('session-test/get');
-    $this->assertNoText($value_1);
+    $this->assertSession()->pageTextNotContains($value_1);
 
     // Now try to store some data as an anonymous user.
     $value_3 = $this->randomMachineName();
@@ -157,7 +157,7 @@ public function testDataPersistence() {
     // Verify that the session persists for an authenticated user after
     // logging out and then back in.
     $this->drupalGet('session-test/get');
-    $this->assertNoText($value_1);
+    $this->assertSession()->pageTextNotContains($value_1);
 
     // Change session and create another user.
     $user2 = $this->drupalCreateUser([]);
@@ -225,7 +225,7 @@ public function testEmptyAnonymousSession() {
     $this->assertSessionCookie(FALSE);
     // @todo Reinstate when REQUEST and RESPONSE events fire for cached pages.
     // $this->assertSessionEmpty(TRUE);
-    $this->assertNoText('This is a dummy message.');
+    $this->assertSession()->pageTextNotContains('This is a dummy message.');
     $this->assertSession()->responseHeaderEquals('X-Drupal-Cache', 'HIT');
     $this->assertSession()->responseHeaderDoesNotExist('Set-Cookie');
 
@@ -239,7 +239,7 @@ public function testEmptyAnonymousSession() {
     $this->assertSessionCookie(FALSE);
     // @todo Reinstate when REQUEST and RESPONSE events fire for cached pages.
     // $this->assertSessionEmpty(TRUE);
-    $this->assertNoText('This is a dummy message.');
+    $this->assertSession()->pageTextNotContains('This is a dummy message.');
   }
 
   /**
diff --git a/core/modules/system/tests/src/Functional/System/AccessDeniedTest.php b/core/modules/system/tests/src/Functional/System/AccessDeniedTest.php
index 098207f1aa..2964dc78c3 100644
--- a/core/modules/system/tests/src/Functional/System/AccessDeniedTest.php
+++ b/core/modules/system/tests/src/Functional/System/AccessDeniedTest.php
@@ -127,7 +127,7 @@ public function testAccessDeniedCustomPageWithAccessDenied() {
     $this->config('system.site')->set('page.403', '/system-test/custom-4xx')->save();
 
     $this->drupalGet('/system-test/always-denied');
-    $this->assertNoText('Admin-only 4xx response');
+    $this->assertSession()->pageTextNotContains('Admin-only 4xx response');
     $this->assertSession()->pageTextContains('You are not authorized to access this page.');
     $this->assertSession()->statusCodeEquals(403);
     // Verify the access cacheability metadata for custom 403 is bubbled.
diff --git a/core/modules/system/tests/src/Functional/System/CronRunTest.php b/core/modules/system/tests/src/Functional/System/CronRunTest.php
index cd9e98252c..9537131b35 100644
--- a/core/modules/system/tests/src/Functional/System/CronRunTest.php
+++ b/core/modules/system/tests/src/Functional/System/CronRunTest.php
@@ -116,7 +116,7 @@ public function testCronUI() {
     // Don't use REQUEST to calculate the exact time, because that will
     // fail randomly. Look for the word 'years', because without a timestamp,
     // the time will start at 1 January 1970.
-    $this->assertNoText('years');
+    $this->assertSession()->pageTextNotContains('years');
 
     $cron_last = time() - 200;
     \Drupal::state()->set('system.cron_last', $cron_last);
diff --git a/core/modules/system/tests/src/Functional/System/DateFormatsLockedTest.php b/core/modules/system/tests/src/Functional/System/DateFormatsLockedTest.php
index 1ee4c6fcb7..7158254ddf 100644
--- a/core/modules/system/tests/src/Functional/System/DateFormatsLockedTest.php
+++ b/core/modules/system/tests/src/Functional/System/DateFormatsLockedTest.php
@@ -29,7 +29,7 @@ public function testDateLocking() {
     $this->assertSession()->linkByHrefExists('admin/config/regional/date-time/formats/manage/short');
     $this->assertSession()->linkByHrefNotExists('admin/config/regional/date-time/formats/manage/html_date');
     $this->assertSession()->pageTextContains('Fallback date format');
-    $this->assertNoText('short (locked)');
+    $this->assertSession()->pageTextNotContains('short (locked)');
 
     // Locked date formats are not editable.
     $this->drupalGet('admin/config/regional/date-time/formats/manage/short');
diff --git a/core/modules/system/tests/src/Functional/System/DateTimeTest.php b/core/modules/system/tests/src/Functional/System/DateTimeTest.php
index fb65b91696..f4301aac07 100644
--- a/core/modules/system/tests/src/Functional/System/DateTimeTest.php
+++ b/core/modules/system/tests/src/Functional/System/DateTimeTest.php
@@ -253,7 +253,7 @@ public function testEnteringDateTimeViaSelectors() {
 
     $edit['field_dt[0][value][day]'] = '29';
     $this->drupalPostForm('node/add/page_with_date', $edit, 'Save');
-    $this->assertNoText('Selected combination of day and month is not valid.');
+    $this->assertSession()->pageTextNotContains('Selected combination of day and month is not valid.');
 
     $this->drupalGet('node/1');
     $this->assertSession()->pageTextContains('Mon, 02/29/2016 - 01:30');
diff --git a/core/modules/system/tests/src/Functional/System/FrontPageTest.php b/core/modules/system/tests/src/Functional/System/FrontPageTest.php
index a42f27b3ac..8274f9497e 100644
--- a/core/modules/system/tests/src/Functional/System/FrontPageTest.php
+++ b/core/modules/system/tests/src/Functional/System/FrontPageTest.php
@@ -66,7 +66,7 @@ public function testDrupalFrontPage() {
     $this->drupalGet('node');
     $this->assertSession()->pageTextContains('On front page.');
     $this->drupalGet($this->nodePath);
-    $this->assertNoText('On front page.');
+    $this->assertSession()->pageTextNotContains('On front page.');
 
     // Change the front page to an invalid path.
     $edit = ['site_frontpage' => '/kittens'];
@@ -87,7 +87,7 @@ public function testDrupalFrontPage() {
     $this->drupalGet('');
     $this->assertSession()->pageTextContains('On front page.');
     $this->drupalGet('node');
-    $this->assertNoText('On front page.');
+    $this->assertSession()->pageTextNotContains('On front page.');
     $this->drupalGet($this->nodePath);
     $this->assertSession()->pageTextContains('On front page.');
   }
diff --git a/core/modules/system/tests/src/Functional/System/PageNotFoundTest.php b/core/modules/system/tests/src/Functional/System/PageNotFoundTest.php
index ef99dbdeb1..e0c7a54704 100644
--- a/core/modules/system/tests/src/Functional/System/PageNotFoundTest.php
+++ b/core/modules/system/tests/src/Functional/System/PageNotFoundTest.php
@@ -75,7 +75,7 @@ public function testPageNotFoundCustomPageWithAccessDenied() {
     $this->config('system.site')->set('page.404', '/system-test/custom-4xx')->save();
 
     $this->drupalGet('/this-path-does-not-exist');
-    $this->assertNoText('Admin-only 4xx response');
+    $this->assertSession()->pageTextNotContains('Admin-only 4xx response');
     $this->assertSession()->pageTextContains('The requested page could not be found.');
     $this->assertSession()->statusCodeEquals(404);
     // Verify the access cacheability metadata for custom 404 is bubbled.
@@ -84,7 +84,7 @@ public function testPageNotFoundCustomPageWithAccessDenied() {
     $this->drupalLogin($this->adminUser);
     $this->drupalGet('/this-path-does-not-exist');
     $this->assertSession()->pageTextContains('Admin-only 4xx response');
-    $this->assertNoText('The requested page could not be found.');
+    $this->assertSession()->pageTextNotContains('The requested page could not be found.');
     $this->assertSession()->statusCodeEquals(404);
     // Verify the access cacheability metadata for custom 404 is bubbled.
     $this->assertCacheContext('user.roles');
diff --git a/core/modules/system/tests/src/Functional/System/SiteMaintenanceTest.php b/core/modules/system/tests/src/Functional/System/SiteMaintenanceTest.php
index d463396670..35cb53aca8 100644
--- a/core/modules/system/tests/src/Functional/System/SiteMaintenanceTest.php
+++ b/core/modules/system/tests/src/Functional/System/SiteMaintenanceTest.php
@@ -95,9 +95,9 @@ public function testSiteMaintenance() {
 
     // Verify that user is able to log in.
     $this->drupalGet('user');
-    $this->assertNoText($offline_message);
+    $this->assertSession()->pageTextNotContains($offline_message);
     $this->drupalGet('user/login');
-    $this->assertNoText($offline_message);
+    $this->assertSession()->pageTextNotContains($offline_message);
 
     // Log in user and verify that maintenance mode message is displayed
     // directly after login.
diff --git a/core/modules/system/tests/src/Functional/System/StatusTest.php b/core/modules/system/tests/src/Functional/System/StatusTest.php
index cab94ed7cc..81cee2da74 100644
--- a/core/modules/system/tests/src/Functional/System/StatusTest.php
+++ b/core/modules/system/tests/src/Functional/System/StatusTest.php
@@ -60,7 +60,7 @@ public function testStatusPage() {
     }
 
     // If a module is fully installed no pending updates exists.
-    $this->assertNoText('Out of date');
+    $this->assertSession()->pageTextNotContains('Out of date');
 
     // The setting config_sync_directory is not properly formed.
     $this->assertRaw(t("Your %file file must define the %setting setting", ['%file' => $this->siteDirectory . '/settings.php', '%setting' => "\$settings['config_sync_directory']"]));
diff --git a/core/modules/system/tests/src/Functional/System/SystemAuthorizeTest.php b/core/modules/system/tests/src/Functional/System/SystemAuthorizeTest.php
index 2dec1ab4a4..8f42feb75a 100644
--- a/core/modules/system/tests/src/Functional/System/SystemAuthorizeTest.php
+++ b/core/modules/system/tests/src/Functional/System/SystemAuthorizeTest.php
@@ -54,7 +54,7 @@ public function testFileTransferHooks() {
     $page_title = $this->randomMachineName(16);
     $this->drupalGetAuthorizePHP($page_title);
     $this->assertSession()->titleEquals("$page_title | Drupal");
-    $this->assertNoText('It appears you have reached this page in error.');
+    $this->assertSession()->pageTextNotContains('It appears you have reached this page in error.');
     $this->assertSession()->pageTextContains('To continue, provide your server connection details');
     // Make sure we see the new connection method added by system_test.
     $this->assertRaw('System Test FileTransfer');
diff --git a/core/modules/system/tests/src/Functional/System/ThemeTest.php b/core/modules/system/tests/src/Functional/System/ThemeTest.php
index 89012faf45..6604ede9ba 100644
--- a/core/modules/system/tests/src/Functional/System/ThemeTest.php
+++ b/core/modules/system/tests/src/Functional/System/ThemeTest.php
@@ -108,7 +108,7 @@ public function testThemeSettings() {
         'logo_path' => $input,
       ];
       $this->drupalPostForm('admin/appearance/settings', $edit, 'Save configuration');
-      $this->assertNoText('The custom logo path is invalid.');
+      $this->assertSession()->pageTextNotContains('The custom logo path is invalid.');
       $this->assertSession()->fieldValueEquals('logo_path', $expected['form']);
 
       // Verify logo path examples.
@@ -226,8 +226,8 @@ public function testThemeSettings() {
       'favicon_path' => 'public://whatever.ico',
     ];
     $this->drupalPostForm('admin/appearance/settings', $edit, 'Save configuration');
-    $this->assertNoText('The custom logo path is invalid.');
-    $this->assertNoText('The custom favicon path is invalid.');
+    $this->assertSession()->pageTextNotContains('The custom logo path is invalid.');
+    $this->assertSession()->pageTextNotContains('The custom favicon path is invalid.');
   }
 
   /**
@@ -249,8 +249,8 @@ public function testThemeSettingsLogo() {
     // module is not enabled.
     \Drupal::service('module_installer')->uninstall(['file']);
     $this->drupalGet('admin/appearance/settings');
-    $this->assertNoText('Logo image settings');
-    $this->assertNoText('Shortcut icon settings');
+    $this->assertSession()->pageTextNotContains('Logo image settings');
+    $this->assertSession()->pageTextNotContains('Shortcut icon settings');
   }
 
   /**
@@ -471,7 +471,7 @@ public function testInstallAndSetAsDefault() {
       $this->assertEquals($theme_machine_name, $this->config('system.theme')->get('default'));
 
       // This checks for a regression. See https://www.drupal.org/node/2498691.
-      $this->assertNoText("The $theme_machine_name theme was not found.");
+      $this->assertSession()->pageTextNotContains("The $theme_machine_name theme was not found.");
 
       $themes = \Drupal::service('theme_handler')->rebuildThemeData();
       $version = $themes[$theme_machine_name]->info['version'];
diff --git a/core/modules/system/tests/src/Functional/Theme/ExperimentalThemeTest.php b/core/modules/system/tests/src/Functional/Theme/ExperimentalThemeTest.php
index 7cd097684d..58a6e3933e 100644
--- a/core/modules/system/tests/src/Functional/Theme/ExperimentalThemeTest.php
+++ b/core/modules/system/tests/src/Functional/Theme/ExperimentalThemeTest.php
@@ -49,7 +49,7 @@ public function testExperimentalConfirmForm() {
     $this->drupalGet('admin/appearance');
     $this->cssSelect('a[title="Install <strong>Test theme</strong> theme"]')[0]->click();
     $this->assertSession()->pageTextContains('The <strong>Test theme</strong> theme has been installed.');
-    $this->assertNoText('Experimental modules are provided for testing purposes only.');
+    $this->assertSession()->pageTextNotContains('Experimental modules are provided for testing purposes only.');
 
     // Next, test installing an experimental theme with no dependencies.
     // There should be a confirmation form with an experimental warning, but no
@@ -60,11 +60,11 @@ public function testExperimentalConfirmForm() {
 
     // The module should not be enabled and there should be a warning and a
     // list of the experimental modules with only this one.
-    $this->assertNoText('The Experimental Test theme has been installed.');
+    $this->assertSession()->pageTextNotContains('The Experimental Test theme has been installed.');
     $this->assertSession()->pageTextContains('Experimental themes are provided for testing purposes only.');
 
     // There should be no message about enabling dependencies.
-    $this->assertNoText('You must enable');
+    $this->assertSession()->pageTextNotContains('You must enable');
 
     // Enable the theme and confirm that it worked.
     $this->submitForm([], 'Continue');
@@ -72,9 +72,9 @@ public function testExperimentalConfirmForm() {
 
     // Setting it as the default should not ask for another confirmation.
     $this->cssSelect('a[title="Set Experimental test as default theme"]')[0]->click();
-    $this->assertNoText('Experimental themes are provided for testing purposes only. Use at your own risk.');
+    $this->assertSession()->pageTextNotContains('Experimental themes are provided for testing purposes only. Use at your own risk.');
     $this->assertSession()->pageTextContains('Experimental test is now the default theme.');
-    $this->assertNoText(sprintf('Experimental test %s                (experimental theme)', \Drupal::VERSION));
+    $this->assertSession()->pageTextNotContains(sprintf('Experimental test %s                (experimental theme)', \Drupal::VERSION));
     $this->assertSession()->responseContains(sprintf('Experimental test %s                (default theme, administration theme, experimental theme)', \Drupal::VERSION));
 
     // Uninstall the theme.
@@ -96,13 +96,13 @@ public function testExperimentalConfirmForm() {
 
     // The theme should not be enabled and there should be a warning and a
     // list of the experimental modules with only this one.
-    $this->assertNoText('The Experimental dependency test theme has been installed.');
+    $this->assertSession()->pageTextNotContains('The Experimental dependency test theme has been installed.');
     $this->assertSession()->pageTextContains('Experimental themes are provided for testing purposes only. Use at your own risk.');
     $this->assertSession()->pageTextContains('The following themes are experimental: Experimental test');
 
     // Ensure the non-experimental theme is not listed as experimental.
-    $this->assertNoText('The following themes are experimental: Experimental test, Experimental dependency test');
-    $this->assertNoText('The following themes are experimental: Experimental dependency test');
+    $this->assertSession()->pageTextNotContains('The following themes are experimental: Experimental test, Experimental dependency test');
+    $this->assertSession()->pageTextNotContains('The following themes are experimental: Experimental dependency test');
 
     // There should be a message about enabling dependencies.
     $this->assertSession()->pageTextContains('You must enable the Experimental test theme to install Experimental dependency test');
@@ -115,7 +115,7 @@ public function testExperimentalConfirmForm() {
 
     // Setting it as the default should not ask for another confirmation.
     $this->cssSelect('a[title="Set Experimental dependency test as default theme"]')[0]->click();
-    $this->assertNoText('Experimental themes are provided for testing purposes only. Use at your own risk.');
+    $this->assertSession()->pageTextNotContains('Experimental themes are provided for testing purposes only. Use at your own risk.');
     $this->assertSession()->pageTextContains('Experimental dependency test is now the default theme.');
     $this->assertSession()->responseContains(sprintf('Experimental test %s                (experimental theme)', \Drupal::VERSION));
     $this->assertSession()->responseContains(sprintf('Experimental dependency test %s                (default theme, administration theme)', \Drupal::VERSION));
diff --git a/core/modules/system/tests/src/Functional/Theme/FastTest.php b/core/modules/system/tests/src/Functional/Theme/FastTest.php
index 95888c2821..ec6f3a9d38 100644
--- a/core/modules/system/tests/src/Functional/Theme/FastTest.php
+++ b/core/modules/system/tests/src/Functional/Theme/FastTest.php
@@ -35,7 +35,7 @@ public function testUserAutocomplete() {
     $this->drupalLogin($this->account);
     $this->drupalGet('user/autocomplete', ['query' => ['q' => $this->account->getAccountName()]]);
     $this->assertRaw($this->account->getAccountName());
-    $this->assertNoText('registry initialized');
+    $this->assertSession()->pageTextNotContains('registry initialized');
   }
 
 }
diff --git a/core/modules/system/tests/src/Functional/Theme/ThemeTest.php b/core/modules/system/tests/src/Functional/Theme/ThemeTest.php
index 66e07ef12e..5c5eeec729 100644
--- a/core/modules/system/tests/src/Functional/Theme/ThemeTest.php
+++ b/core/modules/system/tests/src/Functional/Theme/ThemeTest.php
@@ -56,7 +56,7 @@ public function testNegotiatorPriorities() {
     $this->drupalGet('theme-test/priority');
 
     // Ensure that the custom theme negotiator was not able to set the theme.
-    $this->assertNoText('Theme hook implementor=theme-test--suggestion.html.twig. Foo=template_preprocess_theme_test');
+    $this->assertSession()->pageTextNotContains('Theme hook implementor=theme-test--suggestion.html.twig. Foo=template_preprocess_theme_test');
   }
 
   /**
diff --git a/core/modules/system/tests/src/Functional/Theme/ThemeUiTest.php b/core/modules/system/tests/src/Functional/Theme/ThemeUiTest.php
index 346c61c5ff..b788cc46f1 100644
--- a/core/modules/system/tests/src/Functional/Theme/ThemeUiTest.php
+++ b/core/modules/system/tests/src/Functional/Theme/ThemeUiTest.php
@@ -340,7 +340,7 @@ public function testInstalledIncompatibleTheme() {
 
     file_put_contents($file_path, Yaml::encode($compatible_info));
     $this->drupalGet('admin/appearance');
-    $this->assertNoText($incompatible_themes_message);
+    $this->assertSession()->pageTextNotContains($incompatible_themes_message);
     $page->clickLink("Install $theme_name theme");
     $assert_session->addressEquals('admin/appearance');
     $assert_session->pageTextContains("The $theme_name theme has been installed");
@@ -361,7 +361,7 @@ public function testInstalledIncompatibleTheme() {
 
       file_put_contents($file_path, Yaml::encode($compatible_info));
       $this->drupalGet('admin/appearance');
-      $this->assertNoText($incompatible_themes_message);
+      $this->assertSession()->pageTextNotContains($incompatible_themes_message);
     }
     // Uninstall the theme and ensure that incompatible themes message is not
     // displayed for themes that are not installed.
@@ -370,7 +370,7 @@ public function testInstalledIncompatibleTheme() {
       $incompatible_info = $info + $incompatible_update;
       file_put_contents($file_path, Yaml::encode($incompatible_info));
       $this->drupalGet('admin/appearance');
-      $this->assertNoText($incompatible_themes_message);
+      $this->assertSession()->pageTextNotContains($incompatible_themes_message);
     }
   }
 
diff --git a/core/modules/system/tests/src/Functional/Theme/TwigExtensionTest.php b/core/modules/system/tests/src/Functional/Theme/TwigExtensionTest.php
index f55db4c9c7..45de8f1efe 100644
--- a/core/modules/system/tests/src/Functional/Theme/TwigExtensionTest.php
+++ b/core/modules/system/tests/src/Functional/Theme/TwigExtensionTest.php
@@ -63,7 +63,7 @@ public function testTwigExtensionFunction() {
     $this->drupalGet('twig-extension-test/function');
     $this->assertSession()->pageTextContains('THE QUICK BROWN BOX JUMPS OVER THE LAZY DOG 123.');
     $this->assertSession()->pageTextContains('the quick brown box jumps over the lazy dog 123.');
-    $this->assertNoText('The Quick Brown Fox Jumps Over The Lazy Dog 123.');
+    $this->assertSession()->pageTextNotContains('The Quick Brown Fox Jumps Over The Lazy Dog 123.');
   }
 
   /**
diff --git a/core/modules/system/tests/src/Functional/Theme/TwigTransTest.php b/core/modules/system/tests/src/Functional/Theme/TwigTransTest.php
index c24bc5703d..0c9fa01ade 100644
--- a/core/modules/system/tests/src/Functional/Theme/TwigTransTest.php
+++ b/core/modules/system/tests/src/Functional/Theme/TwigTransTest.php
@@ -177,7 +177,7 @@ protected function assertTwigTransTags() {
     // Makes sure https://www.drupal.org/node/2489024 doesn't happen without
     // twig debug.
     // Ensure that running php code inside a Twig trans is not possible.
-    $this->assertNoText(pi());
+    $this->assertSession()->pageTextNotContains(pi());
   }
 
   /**
diff --git a/core/modules/system/tests/src/Functional/UpdateSystem/UpdatePathTestBaseFilledTest.php b/core/modules/system/tests/src/Functional/UpdateSystem/UpdatePathTestBaseFilledTest.php
index 0f87ff0ccc..e813c52d46 100644
--- a/core/modules/system/tests/src/Functional/UpdateSystem/UpdatePathTestBaseFilledTest.php
+++ b/core/modules/system/tests/src/Functional/UpdateSystem/UpdatePathTestBaseFilledTest.php
@@ -76,7 +76,7 @@ public function testUpdatedSite() {
     $this->assertSession()->pageTextContains('Hola');
     $this->assertSession()->pageTextContains('Hello');
     // The user entity reference field is access restricted.
-    $this->assertNoText('Test 12');
+    $this->assertSession()->pageTextNotContains('Test 12');
     // Make sure all other field labels are there.
     for ($i = 1; $i <= 23; $i++) {
       if ($i != 12) {
@@ -139,7 +139,7 @@ public function testUpdatedSite() {
 
     // Make sure the user is translated.
     $this->drupalGet('user/3/translations');
-    $this->assertNoText('Not translated');
+    $this->assertSession()->pageTextNotContains('Not translated');
 
     // Make sure the custom field on the user is still there.
     $this->drupalGet('admin/config/people/accounts/fields');
diff --git a/core/modules/system/tests/src/Functional/UpdateSystem/UpdateScriptTest.php b/core/modules/system/tests/src/Functional/UpdateSystem/UpdateScriptTest.php
index 1e74055893..325322da52 100644
--- a/core/modules/system/tests/src/Functional/UpdateSystem/UpdateScriptTest.php
+++ b/core/modules/system/tests/src/Functional/UpdateSystem/UpdateScriptTest.php
@@ -146,7 +146,7 @@ public function testRequirements() {
     $this->drupalGet($this->updateUrl, ['external' => TRUE]);
     $this->assertSession()->pageTextContains('This is a requirements warning provided by the update_script_test module.');
     $this->clickLink('try again');
-    $this->assertNoText('This is a requirements warning provided by the update_script_test module.');
+    $this->assertSession()->pageTextNotContains('This is a requirements warning provided by the update_script_test module.');
     $this->clickLink(t('Continue'));
     $this->clickLink(t('Apply pending updates'));
     $this->checkForMetaRefresh();
@@ -158,7 +158,7 @@ public function testRequirements() {
     $this->drupalGet($this->updateUrl, ['external' => TRUE]);
     $this->assertSession()->pageTextContains('This is a requirements warning provided by the update_script_test module.');
     $this->clickLink('try again');
-    $this->assertNoText('This is a requirements warning provided by the update_script_test module.');
+    $this->assertSession()->pageTextNotContains('This is a requirements warning provided by the update_script_test module.');
     $this->clickLink(t('Continue'));
     $this->assertSession()->pageTextContains('No pending updates.');
     // Confirm that all caches were cleared.
@@ -685,7 +685,7 @@ protected function runUpdates($maintenance_mode) {
       $this->assertSession()->pageTextContains('Operating in maintenance mode.');
     }
     else {
-      $this->assertNoText('Operating in maintenance mode.');
+      $this->assertSession()->pageTextNotContains('Operating in maintenance mode.');
     }
     $this->drupalGet($this->updateUrl, ['external' => TRUE]);
     $this->updateRequirementsProblem();
@@ -699,8 +699,8 @@ protected function runUpdates($maintenance_mode) {
     $this->assertSession()->pageTextContains('The update_script_test_update_8001() update was executed successfully.');
 
     // Verify that no 7.x updates were run.
-    $this->assertNoText('The update_script_test_update_7200() update was executed successfully.');
-    $this->assertNoText('The update_script_test_update_7201() update was executed successfully.');
+    $this->assertSession()->pageTextNotContains('The update_script_test_update_7200() update was executed successfully.');
+    $this->assertSession()->pageTextNotContains('The update_script_test_update_7201() update was executed successfully.');
 
     // Verify that there are no links to different parts of the workflow.
     $this->assertSession()->linkNotExists('Administration pages');
diff --git a/core/modules/taxonomy/tests/src/Functional/TermTest.php b/core/modules/taxonomy/tests/src/Functional/TermTest.php
index 7bb083173e..198bb202ae 100644
--- a/core/modules/taxonomy/tests/src/Functional/TermTest.php
+++ b/core/modules/taxonomy/tests/src/Functional/TermTest.php
@@ -176,9 +176,9 @@ public function testTaxonomyTermChildTerms() {
     // Get Page 3. No parent term and no terms <18 are displayed. Terms 18-25
     // are displayed.
     $this->drupalGet('admin/structure/taxonomy/manage/' . $this->vocabulary->id() . '/overview', ['query' => ['page' => 2]]);
-    $this->assertNoText($term1->getName());
+    $this->assertSession()->pageTextNotContains($term1->getName());
     for ($x = 1; $x <= 17; $x++) {
-      $this->assertNoText($terms_array[$x]->getName());
+      $this->assertSession()->pageTextNotContains($terms_array[$x]->getName());
     }
     for ($x = 18; $x <= 25; $x++) {
       $this->assertSession()->pageTextContains($terms_array[$x]->getName());
@@ -318,8 +318,8 @@ public function testNodeTermCreationAndDeletion() {
     foreach ($term_names as $term_name) {
       $this->assertSession()->pageTextContains($term_name);
     }
-    $this->assertNoText($term_objects['term1']->getName());
-    $this->assertNoText($term_objects['term2']->getName());
+    $this->assertSession()->pageTextNotContains($term_objects['term1']->getName());
+    $this->assertSession()->pageTextNotContains($term_objects['term2']->getName());
   }
 
   /**
diff --git a/core/modules/taxonomy/tests/src/Functional/TermTranslationFieldViewTest.php b/core/modules/taxonomy/tests/src/Functional/TermTranslationFieldViewTest.php
index 08bce7b6a2..a710b0c685 100644
--- a/core/modules/taxonomy/tests/src/Functional/TermTranslationFieldViewTest.php
+++ b/core/modules/taxonomy/tests/src/Functional/TermTranslationFieldViewTest.php
@@ -64,11 +64,11 @@ public function testTranslatedTaxonomyTermReferenceDisplay() {
     $translation_path = $this->translateToLangcode . '/' . $path;
 
     $this->drupalGet($path);
-    $this->assertNoText($this->translatedTagName);
+    $this->assertSession()->pageTextNotContains($this->translatedTagName);
     $this->assertSession()->pageTextContains($this->baseTagName);
     $this->drupalGet($translation_path);
     $this->assertSession()->pageTextContains($this->translatedTagName);
-    $this->assertNoText($this->baseTagName);
+    $this->assertSession()->pageTextNotContains($this->baseTagName);
   }
 
   /**
diff --git a/core/modules/taxonomy/tests/src/Functional/Views/TaxonomyParentUITest.php b/core/modules/taxonomy/tests/src/Functional/Views/TaxonomyParentUITest.php
index 32d15e7208..6599e7cbd7 100644
--- a/core/modules/taxonomy/tests/src/Functional/Views/TaxonomyParentUITest.php
+++ b/core/modules/taxonomy/tests/src/Functional/Views/TaxonomyParentUITest.php
@@ -46,7 +46,7 @@ protected function setUp($import_test_views = TRUE): void {
    */
   public function testTaxonomyParentUI() {
     $this->drupalGet('admin/structure/views/nojs/handler/test_taxonomy_parent/default/relationship/parent');
-    $this->assertNoText('The handler for this item is broken or missing.');
+    $this->assertSession()->pageTextNotContains('The handler for this item is broken or missing.');
   }
 
 }
diff --git a/core/modules/taxonomy/tests/src/Functional/Views/TaxonomyTermViewTest.php b/core/modules/taxonomy/tests/src/Functional/Views/TaxonomyTermViewTest.php
index 4f67f321a9..7a373b3260 100644
--- a/core/modules/taxonomy/tests/src/Functional/Views/TaxonomyTermViewTest.php
+++ b/core/modules/taxonomy/tests/src/Functional/Views/TaxonomyTermViewTest.php
@@ -118,11 +118,11 @@ public function testTaxonomyTermView() {
     $this->drupalGet('taxonomy/term/' . $term->id());
     $this->assertSession()->pageTextContains($term->label());
     $this->assertSession()->pageTextContains($original_title);
-    $this->assertNoText($translated_title);
+    $this->assertSession()->pageTextNotContains($translated_title);
 
     $this->drupalGet('ur/taxonomy/term/' . $term->id());
     $this->assertSession()->pageTextContains($term->label());
-    $this->assertNoText($original_title);
+    $this->assertSession()->pageTextNotContains($original_title);
     $this->assertSession()->pageTextContains($translated_title);
 
     // Uninstall language module and ensure that the language is not part of the
diff --git a/core/modules/taxonomy/tests/src/Functional/Views/TaxonomyVocabularyArgumentTest.php b/core/modules/taxonomy/tests/src/Functional/Views/TaxonomyVocabularyArgumentTest.php
index 841ab102fc..6415390dc1 100644
--- a/core/modules/taxonomy/tests/src/Functional/Views/TaxonomyVocabularyArgumentTest.php
+++ b/core/modules/taxonomy/tests/src/Functional/Views/TaxonomyVocabularyArgumentTest.php
@@ -75,7 +75,7 @@ public function testTermWithVocabularyArgument() {
     // First term should be present.
     $this->assertSession()->pageTextContains($this->terms[0]->label());
     // Second term should not be present.
-    $this->assertNoText($this->terms[1]->label());
+    $this->assertSession()->pageTextNotContains($this->terms[1]->label());
   }
 
 }
diff --git a/core/modules/toolbar/tests/src/Functional/ToolbarAdminMenuTest.php b/core/modules/toolbar/tests/src/Functional/ToolbarAdminMenuTest.php
index 15b6adb4a6..3117a3fd67 100644
--- a/core/modules/toolbar/tests/src/Functional/ToolbarAdminMenuTest.php
+++ b/core/modules/toolbar/tests/src/Functional/ToolbarAdminMenuTest.php
@@ -311,7 +311,7 @@ public function testLocaleTranslationSubtreesHashCacheClear() {
       'translation' => 'untranslated',
     ];
     $this->drupalPostForm('admin/config/regional/translate', $search, 'Filter');
-    $this->assertNoText('No strings available');
+    $this->assertSession()->pageTextNotContains('No strings available');
     // Verify that search found the string as untranslated.
     $this->assertSession()->pageTextContains($name);
 
diff --git a/core/modules/toolbar/tests/src/Functional/ToolbarMenuTranslationTest.php b/core/modules/toolbar/tests/src/Functional/ToolbarMenuTranslationTest.php
index 35d36602f1..2e5ac6e56d 100644
--- a/core/modules/toolbar/tests/src/Functional/ToolbarMenuTranslationTest.php
+++ b/core/modules/toolbar/tests/src/Functional/ToolbarMenuTranslationTest.php
@@ -72,7 +72,7 @@ public function testToolbarClasses() {
     ];
     $this->drupalPostForm('admin/config/regional/translate', $search, 'Filter');
     // Make sure will be able to translate the menu item.
-    $this->assertNoText('No strings available.');
+    $this->assertSession()->pageTextNotContains('No strings available.');
 
     // Check that the class is on the item before we translate it.
     $xpath = $this->xpath('//a[contains(@class, "icon-system-admin-structure")]');
diff --git a/core/modules/tour/tests/src/Functional/TourHelpPageTest.php b/core/modules/tour/tests/src/Functional/TourHelpPageTest.php
index 2a97a0f271..c03b86940a 100644
--- a/core/modules/tour/tests/src/Functional/TourHelpPageTest.php
+++ b/core/modules/tour/tests/src/Functional/TourHelpPageTest.php
@@ -87,7 +87,7 @@ protected function verifyHelp($tours_ok = TRUE) {
       $this->assertSession()->pageTextContains('Tours guide you through workflows');
     }
     else {
-      $this->assertNoText('Tours guide you through workflows');
+      $this->assertSession()->pageTextNotContains('Tours guide you through workflows');
     }
 
     $titles = $this->getTourList();
@@ -115,7 +115,7 @@ protected function verifyHelp($tours_ok = TRUE) {
         $this->assertSession()->linkNotExistsExact($title);
       }
       else {
-        $this->assertNoText($title);
+        $this->assertSession()->pageTextNotContains($title);
         // Just test the first item in the list of text that should not
         // be there, because the second matches part of the name of a module
         // that is in the Module overviews section, so the text will be there
diff --git a/core/modules/tracker/tests/src/Functional/TrackerNodeAccessTest.php b/core/modules/tracker/tests/src/Functional/TrackerNodeAccessTest.php
index 7e5da4f46e..e3921eb030 100644
--- a/core/modules/tracker/tests/src/Functional/TrackerNodeAccessTest.php
+++ b/core/modules/tracker/tests/src/Functional/TrackerNodeAccessTest.php
@@ -104,10 +104,10 @@ public function testTrackerNodeAccess() {
     // User without access should not see private node.
     $this->drupalLogin($no_access_user);
     $this->drupalGet('activity');
-    $this->assertNoText($private_node->getTitle());
+    $this->assertSession()->pageTextNotContains($private_node->getTitle());
     $this->assertSession()->pageTextContains($public_node->getTitle());
     $this->drupalGet('user/' . $access_user->id() . '/activity');
-    $this->assertNoText($private_node->getTitle());
+    $this->assertSession()->pageTextNotContains($private_node->getTitle());
     $this->assertSession()->pageTextContains($public_node->getTitle());
   }
 
diff --git a/core/modules/tracker/tests/src/Functional/TrackerTest.php b/core/modules/tracker/tests/src/Functional/TrackerTest.php
index 941ed589f7..a16d2c6e8a 100644
--- a/core/modules/tracker/tests/src/Functional/TrackerTest.php
+++ b/core/modules/tracker/tests/src/Functional/TrackerTest.php
@@ -88,7 +88,7 @@ public function testTrackerAll() {
     ]);
 
     $this->drupalGet('activity');
-    $this->assertNoText($unpublished->label());
+    $this->assertSession()->pageTextNotContains($unpublished->label());
     $this->assertSession()->pageTextContains($published->label());
     $this->assertSession()->linkExists('My recent content', 0, 'User tab shows up on the global tracker page.');
 
@@ -121,7 +121,7 @@ public function testTrackerAll() {
     // Delete a node and ensure it no longer appears on the tracker.
     $published->delete();
     $this->drupalGet('activity');
-    $this->assertNoText($published->label());
+    $this->assertSession()->pageTextNotContains($published->label());
 
     // Test proper display of time on activity page when comments are disabled.
     // Disable comments.
@@ -172,9 +172,9 @@ public function testTrackerUser() {
     $this->drupalPostForm('comment/reply/node/' . $other_published_my_comment->id() . '/comment', $comment, 'Save');
 
     $this->drupalGet('user/' . $this->user->id() . '/activity');
-    $this->assertNoText($unpublished->label());
+    $this->assertSession()->pageTextNotContains($unpublished->label());
     $this->assertSession()->pageTextContains($my_published->label());
-    $this->assertNoText($other_published_no_comment->label());
+    $this->assertSession()->pageTextNotContains($other_published_no_comment->label());
     $this->assertSession()->pageTextContains($other_published_my_comment->label());
 
     // Assert cache contexts.
@@ -222,7 +222,7 @@ public function testTrackerUser() {
     $this->drupalLogin($admin_user);
     $this->drupalPostForm('comment/1/edit', ['status' => CommentInterface::NOT_PUBLISHED], 'Save');
     $this->drupalGet('user/' . $this->user->id() . '/activity');
-    $this->assertNoText($other_published_my_comment->label());
+    $this->assertSession()->pageTextNotContains($other_published_my_comment->label());
 
     // Test escaping of title on user's tracker tab.
     \Drupal::service('module_installer')->install(['user_hooks_test']);
diff --git a/core/modules/update/tests/src/Functional/FileTransferAuthorizeFormTest.php b/core/modules/update/tests/src/Functional/FileTransferAuthorizeFormTest.php
index 3519671226..89c8110d46 100644
--- a/core/modules/update/tests/src/Functional/FileTransferAuthorizeFormTest.php
+++ b/core/modules/update/tests/src/Functional/FileTransferAuthorizeFormTest.php
@@ -52,7 +52,7 @@ public function testViaAuthorize($url) {
 
     // Ensure the module does not already exist.
     $this->drupalGet('admin/modules');
-    $this->assertNoText('Update test new module');
+    $this->assertSession()->pageTextNotContains('Update test new module');
 
     $edit = [
       'project_url' => $url,
diff --git a/core/modules/update/tests/src/Functional/UpdateContribTest.php b/core/modules/update/tests/src/Functional/UpdateContribTest.php
index 0d24aa22a6..610f82321e 100644
--- a/core/modules/update/tests/src/Functional/UpdateContribTest.php
+++ b/core/modules/update/tests/src/Functional/UpdateContribTest.php
@@ -72,7 +72,7 @@ public function testNoReleasesAvailable() {
     $this->assertRaw(Link::fromTextAndUrl(t('Drupal'), Url::fromUri('http://example.com/project/drupal'))->toString());
     $this->assertSession()->pageTextContains('Up to date');
     $this->assertSession()->responseContains('<h3>Modules</h3>');
-    $this->assertNoText('Update available');
+    $this->assertSession()->pageTextNotContains('Update available');
     $this->assertSession()->pageTextContains('No available releases found');
     $this->assertNoRaw(Link::fromTextAndUrl(t('AAA Update test'), Url::fromUri('http://example.com/project/aaa_update_test'))->toString());
 
@@ -105,7 +105,7 @@ public function testUpdateContribBasic() {
     $this->standardTests();
     $this->assertSession()->pageTextContains('Up to date');
     $this->assertSession()->responseContains('<h3>Modules</h3>');
-    $this->assertNoText('Update available');
+    $this->assertSession()->pageTextNotContains('Update available');
     $this->assertRaw($project_link);
 
     // Since aaa_update_test is installed the fact it is hidden and in the
@@ -182,7 +182,7 @@ public function testUpdateContribOrder() {
     $this->standardTests();
     // We're expecting the report to say all projects are up to date.
     $this->assertSession()->pageTextContains('Up to date');
-    $this->assertNoText('Update available');
+    $this->assertSession()->pageTextNotContains('Update available');
     // We want to see all 3 module names listed, since they'll show up either
     // as project names or as modules under the "Includes" listing.
     $this->assertSession()->pageTextContains('AAA Update test');
@@ -395,14 +395,14 @@ public function testUpdateShowDisabledThemes() {
       $this->refreshUpdateStatus($xml_mapping);
       // In neither case should we see the "Themes" heading for installed
       // themes.
-      $this->assertNoText('Themes');
+      $this->assertSession()->pageTextNotContains('Themes');
       if ($check_disabled) {
         $this->assertSession()->pageTextContains('Uninstalled themes');
         $this->assertRaw($base_theme_project_link);
         $this->assertRaw($sub_theme_project_link);
       }
       else {
-        $this->assertNoText('Uninstalled themes');
+        $this->assertSession()->pageTextNotContains('Uninstalled themes');
         $this->assertNoRaw($base_theme_project_link);
         $this->assertNoRaw($sub_theme_project_link);
       }
@@ -482,7 +482,7 @@ public function testUpdateBrokenFetchURL() {
     // hope that 'Up to date' is not unique.
     $this->assertSession()->pageTextMatchesCount(3, '/Up to date/');
     // It should say we failed to get data, not that we're missing an update.
-    $this->assertNoText('Update available');
+    $this->assertSession()->pageTextNotContains('Update available');
 
     // We need to check that this string is found as part of a project row, not
     // just in the "Failed to get available update data" message at the top of
@@ -548,7 +548,7 @@ public function testHookUpdateStatusAlter() {
     $update_test_config->set('update_status', [])->save();
     $this->drupalGet('admin/reports/updates');
     $this->assertSession()->responseContains('<h3>Modules</h3>');
-    $this->assertNoText('Security update required!');
+    $this->assertSession()->pageTextNotContains('Security update required!');
     $this->assertRaw(Link::fromTextAndUrl(t('AAA Update test'), Url::fromUri('http://example.com/project/aaa_update_test'))->toString());
 
     // Turn the altering back on and visit the Update manager UI.
@@ -559,7 +559,7 @@ public function testHookUpdateStatusAlter() {
     // Turn the altering back off and visit the Update manager UI.
     $update_test_config->set('update_status', [])->save();
     $this->drupalGet('admin/modules/update');
-    $this->assertNoText('Security update');
+    $this->assertSession()->pageTextNotContains('Security update');
   }
 
   /**
diff --git a/core/modules/update/tests/src/Functional/UpdateSemverCoreTest.php b/core/modules/update/tests/src/Functional/UpdateSemverCoreTest.php
index 19a2546dc0..2fe9b1fd03 100644
--- a/core/modules/update/tests/src/Functional/UpdateSemverCoreTest.php
+++ b/core/modules/update/tests/src/Functional/UpdateSemverCoreTest.php
@@ -278,10 +278,10 @@ public function testDatestampMismatch() {
     ];
     $this->config('update_test.settings')->set('system_info', $system_info)->save();
     $this->refreshUpdateStatus(['drupal' => 'dev']);
-    $this->assertNoText('2001-Sep-');
+    $this->assertSession()->pageTextNotContains('2001-Sep-');
     $this->assertSession()->pageTextContains('Up to date');
-    $this->assertNoText('Update available');
-    $this->assertNoText('Security update required!');
+    $this->assertSession()->pageTextNotContains('Update available');
+    $this->assertSession()->pageTextNotContains('Security update required!');
   }
 
   /**
@@ -298,7 +298,7 @@ public function testModulePageRunCron() {
 
     $this->cronRun();
     $this->drupalGet('admin/modules');
-    $this->assertNoText('No update information available.');
+    $this->assertSession()->pageTextNotContains('No update information available.');
   }
 
   /**
@@ -336,8 +336,8 @@ public function testModulePageUpToDate() {
     $this->checkForMetaRefresh();
     $this->assertSession()->pageTextContains('Checked available update data for one project.');
     $this->drupalGet('admin/modules');
-    $this->assertNoText('There are updates available for your version of Drupal.');
-    $this->assertNoText('There is a security update available for your version of Drupal.');
+    $this->assertSession()->pageTextNotContains('There are updates available for your version of Drupal.');
+    $this->assertSession()->pageTextNotContains('There is a security update available for your version of Drupal.');
   }
 
   /**
@@ -359,7 +359,7 @@ public function testModulePageRegularUpdate() {
     $this->assertSession()->pageTextContains('Checked available update data for one project.');
     $this->drupalGet('admin/modules');
     $this->assertSession()->pageTextContains('There are updates available for your version of Drupal.');
-    $this->assertNoText('There is a security update available for your version of Drupal.');
+    $this->assertSession()->pageTextNotContains('There is a security update available for your version of Drupal.');
   }
 
   /**
@@ -380,12 +380,12 @@ public function testModulePageSecurityUpdate() {
     $this->checkForMetaRefresh();
     $this->assertSession()->pageTextContains('Checked available update data for one project.');
     $this->drupalGet('admin/modules');
-    $this->assertNoText('There are updates available for your version of Drupal.');
+    $this->assertSession()->pageTextNotContains('There are updates available for your version of Drupal.');
     $this->assertSession()->pageTextContains('There is a security update available for your version of Drupal.');
 
     // Make sure admin/appearance warns you you're missing a security update.
     $this->drupalGet('admin/appearance');
-    $this->assertNoText('There are updates available for your version of Drupal.');
+    $this->assertSession()->pageTextNotContains('There are updates available for your version of Drupal.');
     $this->assertSession()->pageTextContains('There is a security update available for your version of Drupal.');
 
     // Make sure duplicate messages don't appear on Update status pages.
@@ -393,10 +393,10 @@ public function testModulePageSecurityUpdate() {
     $this->assertSession()->pageTextContainsOnce('There is a security update available for your version of Drupal.');
 
     $this->drupalGet('admin/reports/updates');
-    $this->assertNoText('There is a security update available for your version of Drupal.');
+    $this->assertSession()->pageTextNotContains('There is a security update available for your version of Drupal.');
 
     $this->drupalGet('admin/reports/updates/settings');
-    $this->assertNoText('There is a security update available for your version of Drupal.');
+    $this->assertSession()->pageTextNotContains('There is a security update available for your version of Drupal.');
   }
 
   /**
@@ -405,7 +405,7 @@ public function testModulePageSecurityUpdate() {
   public function testServiceUnavailable() {
     $this->refreshUpdateStatus([], '503-error');
     // Ensure that no "Warning: SimpleXMLElement..." parse errors are found.
-    $this->assertNoText('SimpleXMLElement');
+    $this->assertSession()->pageTextNotContains('SimpleXMLElement');
     $this->assertSession()->pageTextContainsOnce('Failed to get available update data for one project.');
   }
 
diff --git a/core/modules/update/tests/src/Functional/UpdateTestBase.php b/core/modules/update/tests/src/Functional/UpdateTestBase.php
index a1fde0dcad..21124e6d9e 100644
--- a/core/modules/update/tests/src/Functional/UpdateTestBase.php
+++ b/core/modules/update/tests/src/Functional/UpdateTestBase.php
@@ -109,7 +109,7 @@ protected function standardTests() {
     $this->assertSession()->responseContains('<h3>Drupal core</h3>');
     // Verify that the link to the Drupal project appears.
     $this->assertRaw(Link::fromTextAndUrl(t('Drupal'), Url::fromUri('http://example.com/project/drupal'))->toString());
-    $this->assertNoText('No available releases found');
+    $this->assertSession()->pageTextNotContains('No available releases found');
   }
 
   /**
diff --git a/core/modules/update/tests/src/Functional/UpdateUploadTest.php b/core/modules/update/tests/src/Functional/UpdateUploadTest.php
index 086adb23dd..b6650b4eb4 100644
--- a/core/modules/update/tests/src/Functional/UpdateUploadTest.php
+++ b/core/modules/update/tests/src/Functional/UpdateUploadTest.php
@@ -175,25 +175,25 @@ public function testUpdateManagerCoreSecurityUpdateMessages() {
     // about core missing a security update.
 
     $this->drupalGet('admin/modules/install');
-    $this->assertNoText('There is a security update available for your version of Drupal.');
+    $this->assertSession()->pageTextNotContains('There is a security update available for your version of Drupal.');
 
     $this->drupalGet('admin/modules/update');
-    $this->assertNoText('There is a security update available for your version of Drupal.');
+    $this->assertSession()->pageTextNotContains('There is a security update available for your version of Drupal.');
 
     $this->drupalGet('admin/appearance/install');
-    $this->assertNoText('There is a security update available for your version of Drupal.');
+    $this->assertSession()->pageTextNotContains('There is a security update available for your version of Drupal.');
 
     $this->drupalGet('admin/appearance/update');
-    $this->assertNoText('There is a security update available for your version of Drupal.');
+    $this->assertSession()->pageTextNotContains('There is a security update available for your version of Drupal.');
 
     $this->drupalGet('admin/reports/updates/install');
-    $this->assertNoText('There is a security update available for your version of Drupal.');
+    $this->assertSession()->pageTextNotContains('There is a security update available for your version of Drupal.');
 
     $this->drupalGet('admin/reports/updates/update');
-    $this->assertNoText('There is a security update available for your version of Drupal.');
+    $this->assertSession()->pageTextNotContains('There is a security update available for your version of Drupal.');
 
     $this->drupalGet('admin/update/ready');
-    $this->assertNoText('There is a security update available for your version of Drupal.');
+    $this->assertSession()->pageTextNotContains('There is a security update available for your version of Drupal.');
   }
 
   /**
diff --git a/core/modules/user/tests/src/Functional/UserAdminTest.php b/core/modules/user/tests/src/Functional/UserAdminTest.php
index b4ac139281..30cd54632d 100644
--- a/core/modules/user/tests/src/Functional/UserAdminTest.php
+++ b/core/modules/user/tests/src/Functional/UserAdminTest.php
@@ -88,7 +88,7 @@ public function testUserAdmin() {
     $this->drupalGet('admin/people', ['query' => ['permission' => 'administer taxonomy']]);
 
     // Check if the correct users show up.
-    $this->assertNoText($user_a->getAccountName());
+    $this->assertSession()->pageTextNotContains($user_a->getAccountName());
     $this->assertSession()->pageTextContains($user_b->getAccountName());
     $this->assertSession()->pageTextContains($user_c->getAccountName());
 
@@ -98,8 +98,8 @@ public function testUserAdmin() {
     $this->drupalGet('admin/people', ['query' => ['role' => reset($roles)]]);
 
     // Check if the correct users show up when filtered by role.
-    $this->assertNoText($user_a->getAccountName());
-    $this->assertNoText($user_b->getAccountName());
+    $this->assertSession()->pageTextNotContains($user_a->getAccountName());
+    $this->assertSession()->pageTextNotContains($user_b->getAccountName());
     $this->assertSession()->pageTextContains($user_c->getAccountName());
 
     // Test blocking of a user.
@@ -124,8 +124,8 @@ public function testUserAdmin() {
 
     // Test filtering on admin page for blocked users
     $this->drupalGet('admin/people', ['query' => ['status' => 2]]);
-    $this->assertNoText($user_a->getAccountName());
-    $this->assertNoText($user_b->getAccountName());
+    $this->assertSession()->pageTextNotContains($user_a->getAccountName());
+    $this->assertSession()->pageTextNotContains($user_b->getAccountName());
     $this->assertSession()->pageTextContains($user_c->getAccountName());
 
     // Test unblocking of a user from /admin/people page and sending of activation mail
diff --git a/core/modules/user/tests/src/Functional/UserBlocksTest.php b/core/modules/user/tests/src/Functional/UserBlocksTest.php
index fa5589be7f..b8383c9bbb 100644
--- a/core/modules/user/tests/src/Functional/UserBlocksTest.php
+++ b/core/modules/user/tests/src/Functional/UserBlocksTest.php
@@ -76,7 +76,7 @@ public function testUserLoginBlock() {
     $edit['name'] = $user->getAccountName();
     $edit['pass'] = $user->passRaw;
     $this->drupalPostForm('admin/people/permissions', $edit, 'Log in');
-    $this->assertNoText('User login');
+    $this->assertSession()->pageTextNotContains('User login');
 
     // Check that we are still on the same page.
     $this->assertSession()->addressEquals(Url::fromRoute('user.admin_permissions'));
@@ -86,7 +86,7 @@ public function testUserLoginBlock() {
     $this->drupalGet('filter/tips');
     $this->assertSession()->responseHeaderEquals(DynamicPageCacheSubscriber::HEADER, 'MISS');
     $this->submitForm($edit, 'Log in');
-    $this->assertNoText('User login');
+    $this->assertSession()->pageTextNotContains('User login');
     // Verify that we are still on the same page after login for allowed page.
     $this->assertSession()->responseMatches('!<title.*?Compose tips.*?</title>!');
 
@@ -95,7 +95,7 @@ public function testUserLoginBlock() {
     $this->drupalGet('filter/tips', ['query' => ['foo' => 'bar']]);
     $this->assertSession()->responseHeaderEquals(DynamicPageCacheSubscriber::HEADER, 'HIT');
     $this->submitForm($edit, 'Log in');
-    $this->assertNoText('User login');
+    $this->assertSession()->pageTextNotContains('User login');
     // Verify that we are still on the same page after login for allowed page.
     $this->assertSession()->responseMatches('!<title.*?Compose tips.*?</title>!');
     $this->assertStringContainsString('/filter/tips?foo=bar', $this->getUrl(), 'Correct query arguments are displayed after login');
@@ -105,7 +105,7 @@ public function testUserLoginBlock() {
     $this->drupalGet('filter/tips', ['query' => ['foo' => 'baz']]);
     $this->assertSession()->responseHeaderEquals(DynamicPageCacheSubscriber::HEADER, 'HIT');
     $this->submitForm($edit, 'Log in');
-    $this->assertNoText('User login');
+    $this->assertSession()->pageTextNotContains('User login');
     // Verify that we are still on the same page after login for allowed page.
     $this->assertSession()->responseMatches('!<title.*?Compose tips.*?</title>!');
     $this->assertStringContainsString('/filter/tips?foo=baz', $this->getUrl(), 'Correct query arguments are displayed after login');
@@ -126,7 +126,7 @@ public function testUserLoginBlock() {
     $this->drupalPostForm('filter/tips', $edit, 'Log in');
     $this->assertSession()->pageTextContains('Unrecognized username or password. Forgot your password?');
     $this->drupalGet('filter/tips');
-    $this->assertNoText('Unrecognized username or password. Forgot your password?');
+    $this->assertSession()->pageTextNotContains('Unrecognized username or password. Forgot your password?');
   }
 
 }
diff --git a/core/modules/user/tests/src/Functional/UserCancelTest.php b/core/modules/user/tests/src/Functional/UserCancelTest.php
index 43ef05e99d..6595265555 100644
--- a/core/modules/user/tests/src/Functional/UserCancelTest.php
+++ b/core/modules/user/tests/src/Functional/UserCancelTest.php
@@ -190,7 +190,7 @@ public function testUserBlock() {
     $this->submitForm([], 'Cancel account');
     $this->assertSession()->pageTextContains('Are you sure you want to cancel your account?');
     $this->assertSession()->pageTextContains('Your account will be blocked and you will no longer be able to log in. All of your content will remain attributed to your username.');
-    $this->assertNoText('Select the method to cancel the account above.');
+    $this->assertSession()->pageTextNotContains('Select the method to cancel the account above.');
 
     // Confirm account cancellation.
     $timestamp = time();
diff --git a/core/modules/user/tests/src/Functional/UserCreateFailMailTest.php b/core/modules/user/tests/src/Functional/UserCreateFailMailTest.php
index c2d633acbc..be1f3dfffa 100644
--- a/core/modules/user/tests/src/Functional/UserCreateFailMailTest.php
+++ b/core/modules/user/tests/src/Functional/UserCreateFailMailTest.php
@@ -44,7 +44,7 @@ public function testUserAdd() {
     $this->drupalPostForm('admin/people/create', $edit, 'Create new account');
 
     $this->assertSession()->pageTextContains('Unable to send email. Contact the site administrator if the problem persists.');
-    $this->assertNoText('A welcome message with further instructions has been emailed to the new user ' . $edit['name'] . '.');
+    $this->assertSession()->pageTextNotContains('A welcome message with further instructions has been emailed to the new user ' . $edit['name'] . '.');
   }
 
 }
diff --git a/core/modules/user/tests/src/Functional/UserCreateTest.php b/core/modules/user/tests/src/Functional/UserCreateTest.php
index de8958bb6c..7ec187d005 100644
--- a/core/modules/user/tests/src/Functional/UserCreateTest.php
+++ b/core/modules/user/tests/src/Functional/UserCreateTest.php
@@ -134,7 +134,7 @@ public function testUserAdd() {
     ];
     $this->drupalPostForm('admin/people/create', $edit, 'Create new account');
     $this->assertSession()->pageTextContains("Created a new user account for $name. No email has been sent");
-    $this->assertNoText('Password field is required');
+    $this->assertSession()->pageTextNotContains('Password field is required');
   }
 
 }
diff --git a/core/modules/user/tests/src/Functional/UserPasswordResetTest.php b/core/modules/user/tests/src/Functional/UserPasswordResetTest.php
index a53b6f35c7..92ef715954 100644
--- a/core/modules/user/tests/src/Functional/UserPasswordResetTest.php
+++ b/core/modules/user/tests/src/Functional/UserPasswordResetTest.php
@@ -170,7 +170,7 @@ public function testUserPasswordReset() {
     $this->drupalGet($resetURL);
     $this->submitForm([], 'Log in');
     $this->drupalGet('user/' . $this->account->id() . '/edit');
-    $this->assertNoText('Expected user_string to be a string, NULL given');
+    $this->assertSession()->pageTextNotContains('Expected user_string to be a string, NULL given');
     $this->drupalLogout();
 
     // Create a password reset link as if the request time was 60 seconds older than the allowed limit.
@@ -517,7 +517,7 @@ public function assertPasswordIpFlood() {
    * Makes assertions about a password reset not triggering IP flood control.
    */
   public function assertNoPasswordIpFlood() {
-    $this->assertNoText('Too many password recovery requests from your IP address. It is temporarily blocked. Try again later or contact the site administrator.');
+    $this->assertSession()->pageTextNotContains('Too many password recovery requests from your IP address. It is temporarily blocked. Try again later or contact the site administrator.');
   }
 
   /**
@@ -556,7 +556,7 @@ public function testResetImpersonation() {
     $this->drupalGet($attack_reset_url);
     $this->submitForm([], 'Log in');
     // Verify that the invalid password reset page does not show the user name.
-    $this->assertNoText($user2->getAccountName());
+    $this->assertSession()->pageTextNotContains($user2->getAccountName());
     $this->assertSession()->addressEquals('user/password');
     $this->assertSession()->pageTextContains('You have tried to use a one-time login link that has either been used or is no longer valid. Please request a new one using the form below.');
   }
diff --git a/core/modules/user/tests/src/Functional/UserRegistrationTest.php b/core/modules/user/tests/src/Functional/UserRegistrationTest.php
index 64e5d5d6d5..dbbd3e1098 100644
--- a/core/modules/user/tests/src/Functional/UserRegistrationTest.php
+++ b/core/modules/user/tests/src/Functional/UserRegistrationTest.php
@@ -318,7 +318,7 @@ public function testRegistrationWithUserFields() {
 
     // Check that the field does not appear on the registration form.
     $this->drupalGet('user/register');
-    $this->assertNoText($field->label());
+    $this->assertSession()->pageTextNotContains($field->label());
     $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:core.entity_form_display.user.user.register');
     $this->assertSession()->responseHeaderContains('X-Drupal-Cache-Tags', 'config:user.settings');
 
diff --git a/core/modules/user/tests/src/Functional/UserRoleAdminTest.php b/core/modules/user/tests/src/Functional/UserRoleAdminTest.php
index 0630c73477..696ed759c5 100644
--- a/core/modules/user/tests/src/Functional/UserRoleAdminTest.php
+++ b/core/modules/user/tests/src/Functional/UserRoleAdminTest.php
@@ -97,10 +97,10 @@ public function testRoleAdministration() {
     // interface.
     $this->drupalGet('admin/people/roles/manage/' . RoleInterface::ANONYMOUS_ID);
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertNoText('Delete role');
+    $this->assertSession()->pageTextNotContains('Delete role');
     $this->drupalGet('admin/people/roles/manage/' . RoleInterface::AUTHENTICATED_ID);
     $this->assertSession()->statusCodeEquals(200);
-    $this->assertNoText('Delete role');
+    $this->assertSession()->pageTextNotContains('Delete role');
   }
 
   /**
diff --git a/core/modules/user/tests/src/Functional/Views/FilterPermissionUiTest.php b/core/modules/user/tests/src/Functional/Views/FilterPermissionUiTest.php
index 374bd9bce2..10e4a61498 100644
--- a/core/modules/user/tests/src/Functional/Views/FilterPermissionUiTest.php
+++ b/core/modules/user/tests/src/Functional/Views/FilterPermissionUiTest.php
@@ -54,7 +54,7 @@ public function testHandlerUI() {
     $this->assertSession()->linkExists('User: Permission (= View user information)');
     $this->submitForm([], 'Save');
     // Verify that we can save the view.
-    $this->assertNoText('No valid values found on filter: User: Permission.');
+    $this->assertSession()->pageTextNotContains('No valid values found on filter: User: Permission.');
     $this->assertSession()->pageTextContains('The view test_filter_permission has been saved.');
 
     // Verify that the handler summary is also correct when multiple values are
@@ -69,7 +69,7 @@ public function testHandlerUI() {
     $this->assertSession()->linkExists('User: Permission (or View us…)');
     $this->submitForm([], 'Save');
     // Verify that we can save the view.
-    $this->assertNoText('No valid values found on filter: User: Permission.');
+    $this->assertSession()->pageTextNotContains('No valid values found on filter: User: Permission.');
     $this->assertSession()->pageTextContains('The view test_filter_permission has been saved.');
   }
 
diff --git a/core/modules/user/tests/src/Functional/Views/HandlerFieldRoleTest.php b/core/modules/user/tests/src/Functional/Views/HandlerFieldRoleTest.php
index f9e610a58a..3f68c071a6 100644
--- a/core/modules/user/tests/src/Functional/Views/HandlerFieldRoleTest.php
+++ b/core/modules/user/tests/src/Functional/Views/HandlerFieldRoleTest.php
@@ -49,7 +49,7 @@ public function testRole() {
     $this->assertSession()->responseContains($rolename_b . Html::escape('<em>' . $rolename_a . '</em>'));
     // Verify that the view test_views_handler_field_role does not render a role
     // not assigned to a user.
-    $this->assertNoText($rolename_not_assigned);
+    $this->assertSession()->pageTextNotContains($rolename_not_assigned);
   }
 
 }
diff --git a/core/modules/user/tests/src/Functional/Views/UserFieldsAccessChangeTest.php b/core/modules/user/tests/src/Functional/Views/UserFieldsAccessChangeTest.php
index 40df001dc7..8c222f02b2 100644
--- a/core/modules/user/tests/src/Functional/Views/UserFieldsAccessChangeTest.php
+++ b/core/modules/user/tests/src/Functional/Views/UserFieldsAccessChangeTest.php
@@ -39,9 +39,9 @@ public function testUserFieldAccess() {
     $this->assertSession()->pageTextContains('Created');
 
     // User does not by default have access to init, mail and status.
-    $this->assertNoText('Init');
-    $this->assertNoText('Email');
-    $this->assertNoText('Status');
+    $this->assertSession()->pageTextNotContains('Init');
+    $this->assertSession()->pageTextNotContains('Email');
+    $this->assertSession()->pageTextNotContains('Status');
 
     // Assign sub-admin role to grant extra access.
     $user = $this->drupalCreateUser(['sub-admin']);
diff --git a/core/modules/views/tests/src/Functional/Entity/BaseFieldAccessTest.php b/core/modules/views/tests/src/Functional/Entity/BaseFieldAccessTest.php
index e06d418598..fcaa5188bc 100644
--- a/core/modules/views/tests/src/Functional/Entity/BaseFieldAccessTest.php
+++ b/core/modules/views/tests/src/Functional/Entity/BaseFieldAccessTest.php
@@ -67,7 +67,7 @@ protected function setUp($import_test_views = TRUE): void {
   public function testProtectedField() {
     $this->drupalGet('test-entity-protected-access');
     $this->assertSession()->pageTextContains('ok to see this one');
-    $this->assertNoText('no access value');
+    $this->assertSession()->pageTextNotContains('no access value');
   }
 
 }
diff --git a/core/modules/views/tests/src/Functional/Plugin/DisplayTest.php b/core/modules/views/tests/src/Functional/Plugin/DisplayTest.php
index 81edfd35c0..9162e93357 100644
--- a/core/modules/views/tests/src/Functional/Plugin/DisplayTest.php
+++ b/core/modules/views/tests/src/Functional/Plugin/DisplayTest.php
@@ -445,17 +445,17 @@ protected function checkTranslationSetting($expected_node_translatability = FALS
 
     $this->drupalGet('admin/structure/views/nojs/display/content/page_1/rendering_language');
     if ($expected_node_translatability) {
-      $this->assertNoText($not_supported_text);
+      $this->assertSession()->pageTextNotContains($not_supported_text);
       $this->assertSession()->pageTextContains($supported_text);
     }
     else {
       $this->assertSession()->pageTextContains($not_supported_text);
-      $this->assertNoText($supported_text);
+      $this->assertSession()->pageTextNotContains($supported_text);
     }
 
     $this->drupalGet('admin/structure/views/nojs/display/files/page_1/rendering_language');
     $this->assertSession()->pageTextContains($not_supported_text);
-    $this->assertNoText($supported_text);
+    $this->assertSession()->pageTextNotContains($supported_text);
   }
 
 }
diff --git a/core/modules/views/tests/src/Functional/Plugin/ExposedFormCheckboxesTest.php b/core/modules/views/tests/src/Functional/Plugin/ExposedFormCheckboxesTest.php
index 3cb893936f..fb626b4ba3 100644
--- a/core/modules/views/tests/src/Functional/Plugin/ExposedFormCheckboxesTest.php
+++ b/core/modules/views/tests/src/Functional/Plugin/ExposedFormCheckboxesTest.php
@@ -109,7 +109,7 @@ public function testExposedFormRenderCheckboxes() {
     // checked.
     $this->clickLink('Page 2');
     $this->assertSession()->elementsCount('xpath', "//div[contains(@class, 'views-row')]", 1);
-    $this->assertNoText('An illegal choice has been detected. Please contact the site administrator.');
+    $this->assertSession()->pageTextNotContains('An illegal choice has been detected. Please contact the site administrator.');
   }
 
   /**
@@ -158,14 +158,14 @@ public function testExposedIsAllOfFilter() {
     // All rows are displayed by default on the first page when no options are
     // checked.
     $this->assertSession()->elementsCount('xpath', "//div[contains(@class, 'views-row')]", 8);
-    $this->assertNoText('An illegal choice has been detected. Please contact the site administrator.');
+    $this->assertSession()->pageTextNotContains('An illegal choice has been detected. Please contact the site administrator.');
 
     // Select one option and ensure we still have results.
     $tid = $this->terms[0]->id();
     $this->submitForm(["tid[$tid]" => $tid], 'Apply');
     // Ensure only nodes tagged with $tid are displayed.
     $this->assertSession()->elementsCount('xpath', "//div[contains(@class, 'views-row')]", 2);
-    $this->assertNoText('An illegal choice has been detected. Please contact the site administrator.');
+    $this->assertSession()->pageTextNotContains('An illegal choice has been detected. Please contact the site administrator.');
   }
 
 }
diff --git a/core/modules/views/tests/src/Functional/Plugin/ExposedFormTest.php b/core/modules/views/tests/src/Functional/Plugin/ExposedFormTest.php
index c42e0d4521..900faec1c2 100644
--- a/core/modules/views/tests/src/Functional/Plugin/ExposedFormTest.php
+++ b/core/modules/views/tests/src/Functional/Plugin/ExposedFormTest.php
@@ -228,7 +228,7 @@ public function testExposedBlock() {
     // Test that the label is removed.
     $this->drupalGet('test_exposed_block');
     $this->assertNoRaw('<strong>Custom</strong> titlealert("hacked!");');
-    $this->assertNoText($view->getTitle());
+    $this->assertSession()->pageTextNotContains($view->getTitle());
 
     // Test there is an exposed form in a block.
     $xpath = $this->assertSession()->buildXPathQuery('//div[@id=:id]/form/@id', [':id' => Html::getUniqueId('block-' . $block->id())]);
@@ -300,7 +300,7 @@ public function testTextInputRequired() {
     // Ensure that the "on demand text" is not displayed when an exposed filter
     // is applied.
     $this->drupalGet('test_exposed_form_buttons', ['query' => ['type' => 'article']]);
-    $this->assertNoText($on_demand_text);
+    $this->assertSession()->pageTextNotContains($on_demand_text);
   }
 
   /**
diff --git a/core/modules/views/tests/src/Functional/Plugin/FilterTest.php b/core/modules/views/tests/src/Functional/Plugin/FilterTest.php
index 955cdc63d7..f9ccc74193 100644
--- a/core/modules/views/tests/src/Functional/Plugin/FilterTest.php
+++ b/core/modules/views/tests/src/Functional/Plugin/FilterTest.php
@@ -166,7 +166,7 @@ public function testInOperatorSelectAllOptions() {
     $this->drupalPostForm('admin/structure/views/nojs/handler/test_filter_in_operator_ui/default/filter/type', $edit, 'Apply');
     $this->drupalPostForm('admin/structure/views/view/test_filter_in_operator_ui/edit/default', [], 'Save');
     $this->submitForm([], 'Update preview');
-    $this->assertNoText('An illegal choice has been detected.');
+    $this->assertSession()->pageTextNotContains('An illegal choice has been detected.');
   }
 
   /**
diff --git a/core/modules/views/tests/src/Functional/Plugin/MenuLinkTest.php b/core/modules/views/tests/src/Functional/Plugin/MenuLinkTest.php
index bc48565a7e..b62e293e1c 100644
--- a/core/modules/views/tests/src/Functional/Plugin/MenuLinkTest.php
+++ b/core/modules/views/tests/src/Functional/Plugin/MenuLinkTest.php
@@ -101,7 +101,7 @@ public function testHierarchicalMenuLinkVisibility() {
     // Test if the primary menu item (node) is visible, and the secondary menu
     // item (view) is hidden.
     $this->assertSession()->pageTextContains('Primary level node');
-    $this->assertNoText('Secondary level view page');
+    $this->assertSession()->pageTextNotContains('Secondary level view page');
 
     // Go to the node page and ensure that both the first and second level items
     // are visible.
diff --git a/core/modules/views/tests/src/Functional/Plugin/MiniPagerTest.php b/core/modules/views/tests/src/Functional/Plugin/MiniPagerTest.php
index bb72ff81c7..7c6c54c85f 100644
--- a/core/modules/views/tests/src/Functional/Plugin/MiniPagerTest.php
+++ b/core/modules/views/tests/src/Functional/Plugin/MiniPagerTest.php
@@ -58,7 +58,7 @@ public function testMiniPagerRender() {
     $this->drupalGet('test_mini_pager');
     $this->assertSession()->pageTextContains('›› test');
     $this->assertSession()->pageTextContains('Page 1');
-    $this->assertNoText('‹‹ test');
+    $this->assertSession()->pageTextNotContains('‹‹ test');
     $this->assertSession()->pageTextContains($this->nodes[0]->label());
     $this->assertSession()->pageTextContains($this->nodes[1]->label());
     $this->assertSession()->pageTextContains($this->nodes[2]->label());
@@ -75,7 +75,7 @@ public function testMiniPagerRender() {
     // On last page, current page and previous page link appear, next page link
     // does not.
     $this->drupalGet('test_mini_pager', ['query' => ['page' => 6]]);
-    $this->assertNoText('›› test');
+    $this->assertSession()->pageTextNotContains('›› test');
     $this->assertSession()->pageTextContains('Page 7');
     $this->assertSession()->pageTextContains('‹‹ test');
     $this->assertSession()->pageTextContains($this->nodes[18]->label());
@@ -106,16 +106,16 @@ public function testMiniPagerRender() {
     $this->assertSession()->pageTextContains($this->nodes[1]->label());
 
     $this->drupalGet('test_mini_pager_one', ['query' => ['page' => 19]]);
-    $this->assertNoText('››');
+    $this->assertSession()->pageTextNotContains('››');
     $this->assertSession()->pageTextContains('Page 20');
     $this->assertSession()->pageTextContains('‹‹');
     $this->assertSession()->pageTextContains($this->nodes[19]->label());
 
     // Test a mini pager with all items on the page. No pager should display.
     $this->drupalGet('test_mini_pager_all');
-    $this->assertNoText('‹‹ test');
-    $this->assertNoText('Page 1');
-    $this->assertNoText('test ››');
+    $this->assertSession()->pageTextNotContains('‹‹ test');
+    $this->assertSession()->pageTextNotContains('Page 1');
+    $this->assertSession()->pageTextNotContains('test ››');
     // Verify that all rows appear on the page.
     $this->assertSession()->elementsCount('xpath', "//div[contains(@class, 'views-row')]", count($this->nodes));
 
@@ -125,9 +125,9 @@ public function testMiniPagerRender() {
     }
 
     $this->drupalGet('test_mini_pager');
-    $this->assertNoText('‹‹ test');
-    $this->assertNoText('Page 1');
-    $this->assertNoText('‹‹ test');
+    $this->assertSession()->pageTextNotContains('‹‹ test');
+    $this->assertSession()->pageTextNotContains('Page 1');
+    $this->assertSession()->pageTextNotContains('‹‹ test');
     $this->assertSession()->pageTextContains($this->nodes[19]->label());
 
     $view = Views::getView('test_mini_pager');
@@ -138,9 +138,9 @@ public function testMiniPagerRender() {
     // Remove the last node as well and ensure that no "Page 1" is shown.
     $this->nodes[19]->delete();
     $this->drupalGet('test_mini_pager');
-    $this->assertNoText('‹‹ test');
-    $this->assertNoText('Page 1');
-    $this->assertNoText('‹‹ test');
+    $this->assertSession()->pageTextNotContains('‹‹ test');
+    $this->assertSession()->pageTextNotContains('Page 1');
+    $this->assertSession()->pageTextNotContains('‹‹ test');
   }
 
 }
diff --git a/core/modules/views/tests/src/Functional/Plugin/ViewsBulkTest.php b/core/modules/views/tests/src/Functional/Plugin/ViewsBulkTest.php
index 15aa090a30..edabcb0166 100644
--- a/core/modules/views/tests/src/Functional/Plugin/ViewsBulkTest.php
+++ b/core/modules/views/tests/src/Functional/Plugin/ViewsBulkTest.php
@@ -65,7 +65,7 @@ public function testBulkSelection() {
     // on the confirm form.
     $this->submitForm(['node_bulk_form[0]' => TRUE], 'Apply to selected items');
     $this->assertSession()->pageTextContains($node_1->getTitle());
-    $this->assertNoText($node_2->getTitle());
+    $this->assertSession()->pageTextNotContains($node_2->getTitle());
 
     // Change the pager limit to 2.
     $this->config('views.view.content')->set('display.default.display_options.pager.options.items_per_page', 2)->save();
@@ -83,7 +83,7 @@ public function testBulkSelection() {
     // selected on the confirm form.
     $this->submitForm(['node_bulk_form[1]' => TRUE], 'Apply to selected items');
     $this->assertSession()->pageTextContains($node_1->getTitle());
-    $this->assertNoText($node_3->getTitle());
+    $this->assertSession()->pageTextNotContains($node_3->getTitle());
   }
 
 }
diff --git a/core/modules/views/tests/src/Functional/Wizard/BasicTest.php b/core/modules/views/tests/src/Functional/Wizard/BasicTest.php
index 9766d08739..dd4c72c26f 100644
--- a/core/modules/views/tests/src/Functional/Wizard/BasicTest.php
+++ b/core/modules/views/tests/src/Functional/Wizard/BasicTest.php
@@ -49,11 +49,11 @@ public function testViewsWizardAndListing() {
     $this->assertSession()->linkByHrefExists(Url::fromRoute('entity.view.duplicate_form', ['view' => $view1['id']])->toString());
 
     // The view should not have a REST export display.
-    $this->assertNoText('REST export');
+    $this->assertSession()->pageTextNotContains('REST export');
 
     // This view should not have a block.
     $this->drupalGet('admin/structure/block');
-    $this->assertNoText($view1['label']);
+    $this->assertSession()->pageTextNotContains($view1['label']);
 
     // Create two nodes.
     $node1 = $this->drupalCreateNode(['type' => 'page']);
@@ -102,11 +102,11 @@ public function testViewsWizardAndListing() {
     $this->assertSession()->linkByHrefExists(Url::fromRoute('view.' . $view2['id'] . '.page_1')->toString());
 
     // The view should not have a REST export display.
-    $this->assertNoText('REST export');
+    $this->assertSession()->pageTextNotContains('REST export');
 
     // This view should not have a block.
     $this->drupalGet('admin/structure/block');
-    $this->assertNoText('View: ' . $view2['label']);
+    $this->assertSession()->pageTextNotContains('View: ' . $view2['label']);
 
     // Create a view with a page and a block, and filter the listing.
     $view3 = [];
@@ -128,7 +128,7 @@ public function testViewsWizardAndListing() {
     $this->assertSession()->addressEquals($view3['page[path]']);
     $this->assertSession()->pageTextContains($view3['page[title]']);
     $this->assertSession()->pageTextContains($node1->label());
-    $this->assertNoText($node2->label());
+    $this->assertSession()->pageTextNotContains($node2->label());
 
     // Go back to the views page and check if this view is there.
     $this->drupalGet('admin/structure/views');
@@ -137,7 +137,7 @@ public function testViewsWizardAndListing() {
     $this->assertSession()->linkByHrefExists(Url::fromRoute('view.' . $view3['id'] . '.page_1')->toString());
 
     // The view should not have a REST export display.
-    $this->assertNoText('REST export');
+    $this->assertSession()->pageTextNotContains('REST export');
 
     // Confirm that the block is available in the block administration UI.
     $this->drupalGet('admin/structure/block/list/' . $this->config('system.theme')->get('default'));
@@ -151,10 +151,10 @@ public function testViewsWizardAndListing() {
     // for the expected node title in the block.
     $this->drupalGet('user');
     $this->assertSession()->pageTextContains($node1->label());
-    $this->assertNoText($node2->label());
+    $this->assertSession()->pageTextNotContains($node2->label());
 
     // Make sure the listing page doesn't show disabled default views.
-    $this->assertNoText('tracker');
+    $this->assertSession()->pageTextNotContains('tracker');
 
     // Create a view with only a REST export.
     $view4 = [];
diff --git a/core/modules/views/tests/src/Functional/Wizard/ItemsPerPageTest.php b/core/modules/views/tests/src/Functional/Wizard/ItemsPerPageTest.php
index 53c059c098..dd9ae48efe 100644
--- a/core/modules/views/tests/src/Functional/Wizard/ItemsPerPageTest.php
+++ b/core/modules/views/tests/src/Functional/Wizard/ItemsPerPageTest.php
@@ -87,8 +87,8 @@ public function testItemsPerPage() {
     $this->assertSession()->pageTextContains($node4->label());
     $this->assertSession()->pageTextContains($node3->label());
     $this->assertSession()->pageTextContains($node2->label());
-    $this->assertNoText($node1->label());
-    $this->assertNoText($page_node->label());
+    $this->assertSession()->pageTextNotContains($node1->label());
+    $this->assertSession()->pageTextNotContains($page_node->label());
     $pos5 = strpos($content, $node5->label());
     $pos4 = strpos($content, $node4->label());
     $pos3 = strpos($content, $node3->label());
@@ -111,9 +111,9 @@ public function testItemsPerPage() {
     $this->assertSession()->pageTextContains($node5->label());
     $this->assertSession()->pageTextContains($node4->label());
     $this->assertSession()->pageTextContains($node3->label());
-    $this->assertNoText($node2->label());
-    $this->assertNoText($node1->label());
-    $this->assertNoText($page_node->label());
+    $this->assertSession()->pageTextNotContains($node2->label());
+    $this->assertSession()->pageTextNotContains($node1->label());
+    $this->assertSession()->pageTextNotContains($page_node->label());
     $pos5 = strpos($content, $node5->label());
     $pos4 = strpos($content, $node4->label());
     $pos3 = strpos($content, $node3->label());
diff --git a/core/modules/views/tests/src/Functional/Wizard/TaggedWithTest.php b/core/modules/views/tests/src/Functional/Wizard/TaggedWithTest.php
index bccb30beca..6451e35d16 100644
--- a/core/modules/views/tests/src/Functional/Wizard/TaggedWithTest.php
+++ b/core/modules/views/tests/src/Functional/Wizard/TaggedWithTest.php
@@ -162,7 +162,7 @@ public function testTaggedWith() {
     $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->pageTextContains($node_tag1_title);
     $this->assertSession()->pageTextContains($node_tag1_tag2_title);
-    $this->assertNoText($node_no_tags_title);
+    $this->assertSession()->pageTextNotContains($node_no_tags_title);
 
     // Create a view that filters by taxonomy term "tag2". It should show only
     // the one node from above that is tagged with "tag2".
@@ -180,9 +180,9 @@ public function testTaggedWith() {
     $this->submitForm($view2, 'Save and edit');
     $this->assertSession()->statusCodeEquals(200);
     $this->drupalGet($view2['page[path]']);
-    $this->assertNoText($node_tag1_title);
+    $this->assertSession()->pageTextNotContains($node_tag1_title);
     $this->assertSession()->pageTextContains($node_tag1_tag2_title);
-    $this->assertNoText($node_no_tags_title);
+    $this->assertSession()->pageTextNotContains($node_no_tags_title);
   }
 
   /**
diff --git a/core/modules/views_ui/tests/src/Functional/DefaultViewsTest.php b/core/modules/views_ui/tests/src/Functional/DefaultViewsTest.php
index 1a8f12995a..2a88f3ed40 100644
--- a/core/modules/views_ui/tests/src/Functional/DefaultViewsTest.php
+++ b/core/modules/views_ui/tests/src/Functional/DefaultViewsTest.php
@@ -85,7 +85,7 @@ public function testDefaultViews() {
     // $this->assertSession()->linkByHrefExists($revert_href);
     // $this->drupalPostForm($revert_href, array(), 'Revert');
     // $this->drupalGet('glossary');
-    // $this->assertNoText($new_title);
+    // $this->assertSession()->pageTextNotContains($new_title);
 
     // Duplicate the view and check that the normal schema of duplicated views is used.
     $this->drupalGet('admin/structure/views');
diff --git a/core/modules/views_ui/tests/src/Functional/DisplayAttachmentTest.php b/core/modules/views_ui/tests/src/Functional/DisplayAttachmentTest.php
index 4a5852d1d8..8014cacb00 100644
--- a/core/modules/views_ui/tests/src/Functional/DisplayAttachmentTest.php
+++ b/core/modules/views_ui/tests/src/Functional/DisplayAttachmentTest.php
@@ -91,7 +91,7 @@ public function testRemoveAttachedDisplay() {
     $this->submitForm([], 'Save');
 
     // Check that there is no warning for the removed page display.
-    $this->assertNoText("Plugin ID &#039;page_1&#039; was not found.");
+    $this->assertSession()->pageTextNotContains("Plugin ID 'page_1' was not found.");
 
     // Check that the attachment is no longer linked to the removed display.
     $this->assertSession()->pageTextContains('Not defined');
diff --git a/core/modules/views_ui/tests/src/Functional/DisplayCRUDTest.php b/core/modules/views_ui/tests/src/Functional/DisplayCRUDTest.php
index d17d473eac..b20dd0f062 100644
--- a/core/modules/views_ui/tests/src/Functional/DisplayCRUDTest.php
+++ b/core/modules/views_ui/tests/src/Functional/DisplayCRUDTest.php
@@ -133,7 +133,7 @@ public function testDuplicateDisplay() {
     $this->assertSession()->linkByHrefExists($path_prefix . '/block_1', 0, 'Make sure after duplicating the new display appears in the UI');
     $this->assertSession()->addressEquals($path_prefix . '/block_1');
     $this->assertSession()->pageTextContains('Block settings');
-    $this->assertNoText('Page settings');
+    $this->assertSession()->pageTextNotContains('Page settings');
 
     $this->submitForm([], 'Save');
     $view = Views::getView($view['id']);
diff --git a/core/modules/views_ui/tests/src/Functional/DisplayTest.php b/core/modules/views_ui/tests/src/Functional/DisplayTest.php
index 197bd3d0e5..399ce28b9e 100644
--- a/core/modules/views_ui/tests/src/Functional/DisplayTest.php
+++ b/core/modules/views_ui/tests/src/Functional/DisplayTest.php
@@ -36,12 +36,12 @@ class DisplayTest extends UITestBase {
    */
   public function testAddDisplay() {
     $view = $this->randomView();
-    $this->assertNoText('Block');
-    $this->assertNoText('Block 2');
+    $this->assertSession()->pageTextNotContains('Block');
+    $this->assertSession()->pageTextNotContains('Block 2');
 
     $this->submitForm([], 'Add Block');
     $this->assertSession()->pageTextContains('Block');
-    $this->assertNoText('Block 2');
+    $this->assertSession()->pageTextNotContains('Block 2');
   }
 
   /**
@@ -278,7 +278,7 @@ public function testHideDisplayOverride() {
     $this->submitForm([], 'Save');
 
     $this->drupalGet('admin/structure/views/nojs/handler/test_display/page_1/field/title');
-    $this->assertNoText('All displays');
+    $this->assertSession()->pageTextNotContains('All displays');
 
     // Test that the override option is shown when default display is on.
     \Drupal::configFactory()->getEditable('views.settings')->set('ui.show.default_display', TRUE)->save();
diff --git a/core/modules/views_ui/tests/src/Functional/FilterNumericWebTest.php b/core/modules/views_ui/tests/src/Functional/FilterNumericWebTest.php
index 80b58d52b0..61b0cd367d 100644
--- a/core/modules/views_ui/tests/src/Functional/FilterNumericWebTest.php
+++ b/core/modules/views_ui/tests/src/Functional/FilterNumericWebTest.php
@@ -72,9 +72,9 @@ public function testFilterNumericUI() {
     $this->submitForm(['age' => '2'], 'Apply');
     $this->assertSession()->pageTextContains('John');
     $this->assertSession()->pageTextContains('Paul');
-    $this->assertNoText('Ringo');
+    $this->assertSession()->pageTextNotContains('Ringo');
     $this->assertSession()->pageTextContains('George');
-    $this->assertNoText('Meredith');
+    $this->assertSession()->pageTextNotContains('Meredith');
 
     // Change the filter to a single filter to test the schema when the operator
     // is not exposed.
@@ -88,16 +88,16 @@ public function testFilterNumericUI() {
     // Test that the filter works as expected.
     $this->drupalGet('test_view-path');
     $this->assertSession()->pageTextContains('John');
-    $this->assertNoText('Paul');
-    $this->assertNoText('Ringo');
-    $this->assertNoText('George');
-    $this->assertNoText('Meredith');
+    $this->assertSession()->pageTextNotContains('Paul');
+    $this->assertSession()->pageTextNotContains('Ringo');
+    $this->assertSession()->pageTextNotContains('George');
+    $this->assertSession()->pageTextNotContains('Meredith');
     $this->submitForm(['age' => '26'], 'Apply');
-    $this->assertNoText('John');
+    $this->assertSession()->pageTextNotContains('John');
     $this->assertSession()->pageTextContains('Paul');
-    $this->assertNoText('Ringo');
-    $this->assertNoText('George');
-    $this->assertNoText('Meredith');
+    $this->assertSession()->pageTextNotContains('Ringo');
+    $this->assertSession()->pageTextNotContains('George');
+    $this->assertSession()->pageTextNotContains('Meredith');
 
     // Change the filter to a 'between' filter to test if the label and
     // description are set for the 'minimum' filter element.
diff --git a/core/modules/views_ui/tests/src/Functional/HandlerTest.php b/core/modules/views_ui/tests/src/Functional/HandlerTest.php
index 36b1bc3cc8..f533919fe9 100644
--- a/core/modules/views_ui/tests/src/Functional/HandlerTest.php
+++ b/core/modules/views_ui/tests/src/Functional/HandlerTest.php
@@ -268,12 +268,12 @@ public function testErrorMissingHelp() {
     // Test that the error message is not shown for entity fields but an empty
     // description field is shown instead.
     $this->drupalGet('admin/structure/views/nojs/add-handler/test_node_view/default/field');
-    $this->assertNoText('Error: missing help');
+    $this->assertSession()->pageTextNotContains('Error: missing help');
     $this->assertRaw('<td class="description"></td>');
 
     // Test that no error message is shown for other fields.
     $this->drupalGet('admin/structure/views/nojs/add-handler/test_view_empty/default/field');
-    $this->assertNoText('Error: missing help');
+    $this->assertSession()->pageTextNotContains('Error: missing help');
   }
 
   /**
diff --git a/core/modules/views_ui/tests/src/Functional/OverrideDisplaysTest.php b/core/modules/views_ui/tests/src/Functional/OverrideDisplaysTest.php
index 55c45d9dc3..cacad4b80f 100644
--- a/core/modules/views_ui/tests/src/Functional/OverrideDisplaysTest.php
+++ b/core/modules/views_ui/tests/src/Functional/OverrideDisplaysTest.php
@@ -108,11 +108,11 @@ public function testWizardMixedDefaultOverriddenDisplays() {
     $this->drupalGet($view['page[path]']);
     $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->pageTextContains($view['page[title]']);
-    $this->assertNoText($view['block[title]']);
+    $this->assertSession()->pageTextNotContains($view['block[title]']);
     $this->drupalGet($view['page[feed_properties][path]']);
     $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->responseContains($view['page[title]']);
-    $this->assertNoText($view['block[title]']);
+    $this->assertSession()->responseNotContains($view['block[title]']);
 
     // Confirm that the block is available in the block administration UI.
     $this->drupalGet('admin/structure/block/list/' . $this->config('system.theme')->get('default'));
@@ -133,7 +133,7 @@ public function testWizardMixedDefaultOverriddenDisplays() {
 
     $this->drupalGet('');
     $this->assertSession()->pageTextContains($view['block[title]']);
-    $this->assertNoText($view['page[title]']);
+    $this->assertSession()->pageTextNotContains($view['page[title]']);
 
     // Edit the page and change the title. This should automatically change
     // the feed's title also, but not the block.
@@ -144,16 +144,16 @@ public function testWizardMixedDefaultOverriddenDisplays() {
     $this->drupalGet($view['page[path]']);
     $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->pageTextContains($new_default_title);
-    $this->assertNoText($view['page[title]']);
-    $this->assertNoText($view['block[title]']);
+    $this->assertSession()->pageTextNotContains($view['page[title]']);
+    $this->assertSession()->pageTextNotContains($view['block[title]']);
     $this->drupalGet($view['page[feed_properties][path]']);
     $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->responseContains($new_default_title);
-    $this->assertNoText($view['page[title]']);
-    $this->assertNoText($view['block[title]']);
+    $this->assertSession()->responseNotContains($view['page[title]']);
+    $this->assertSession()->responseNotContains($view['block[title]']);
     $this->drupalGet('');
-    $this->assertNoText($new_default_title);
-    $this->assertNoText($view['page[title]']);
+    $this->assertSession()->pageTextNotContains($new_default_title);
+    $this->assertSession()->pageTextNotContains($view['page[title]']);
     $this->assertSession()->pageTextContains($view['block[title]']);
 
     // Edit the block and change the title. This should automatically change
@@ -168,10 +168,10 @@ public function testWizardMixedDefaultOverriddenDisplays() {
     $this->drupalGet($view['page[feed_properties][path]']);
     $this->assertSession()->statusCodeEquals(200);
     $this->assertSession()->responseContains($new_default_title);
-    $this->assertNoText($new_block_title);
+    $this->assertSession()->responseNotContains($new_block_title);
     $this->drupalGet('');
     $this->assertSession()->pageTextContains($new_block_title);
-    $this->assertNoText($view['block[title]']);
+    $this->assertSession()->pageTextNotContains($view['block[title]']);
   }
 
   /**
diff --git a/core/modules/views_ui/tests/src/Functional/StyleUITest.php b/core/modules/views_ui/tests/src/Functional/StyleUITest.php
index 02b139b1dd..2f543d06e6 100644
--- a/core/modules/views_ui/tests/src/Functional/StyleUITest.php
+++ b/core/modules/views_ui/tests/src/Functional/StyleUITest.php
@@ -64,7 +64,7 @@ public function testStyleUI() {
     $this->drupalPostForm("admin/structure/views/view/$view_name/edit", [], 'Add Page');
     $this->drupalPostForm("admin/structure/views/nojs/display/$view_name/page_1/row", ['row[type]' => 'fields'], 'Apply');
     // If fields are being used this text will not be shown.
-    $this->assertNoText('The selected style or row format does not use fields.');
+    $this->assertSession()->pageTextNotContains('The selected style or row format does not use fields.');
   }
 
 }
diff --git a/core/modules/views_ui/tests/src/Functional/TranslatedViewTest.php b/core/modules/views_ui/tests/src/Functional/TranslatedViewTest.php
index 7638c8fe7b..0a1ea69bd6 100644
--- a/core/modules/views_ui/tests/src/Functional/TranslatedViewTest.php
+++ b/core/modules/views_ui/tests/src/Functional/TranslatedViewTest.php
@@ -82,7 +82,7 @@ public function testTranslatedStrings() {
     // Check if the label is translated.
     $this->drupalGet($edit_url, ['language' => \Drupal::languageManager()->getLanguage('fr')]);
     $this->assertSession()->titleEquals('Files (File) | Drupal');
-    $this->assertNoText('Fichiers');
+    $this->assertSession()->pageTextNotContains('Fichiers');
   }
 
 }
diff --git a/core/profiles/standard/tests/src/Functional/StandardTest.php b/core/profiles/standard/tests/src/Functional/StandardTest.php
index 0f071645b5..29f5252b34 100644
--- a/core/profiles/standard/tests/src/Functional/StandardTest.php
+++ b/core/profiles/standard/tests/src/Functional/StandardTest.php
@@ -91,7 +91,7 @@ public function testStandard() {
     // Fetch the feed.
     $this->drupalGet('rss.xml');
     $this->assertSession()->responseContains('Foobar');
-    $this->assertNoText('Then she picked out two somebodies, Sally and me');
+    $this->assertSession()->responseNotContains('Then she picked out two somebodies, Sally and me');
 
     // Ensure block body exists.
     $this->drupalGet('block/add');
@@ -155,10 +155,10 @@ public function testStandard() {
 
     // Make sure the optional image styles are not installed.
     $this->drupalGet('admin/config/media/image-styles');
-    $this->assertNoText('Max 325x325');
-    $this->assertNoText('Max 650x650');
-    $this->assertNoText('Max 1300x1300');
-    $this->assertNoText('Max 2600x2600');
+    $this->assertSession()->pageTextNotContains('Max 325x325');
+    $this->assertSession()->pageTextNotContains('Max 650x650');
+    $this->assertSession()->pageTextNotContains('Max 1300x1300');
+    $this->assertSession()->pageTextNotContains('Max 2600x2600');
 
     // Make sure the optional image styles are installed after enabling
     // the responsive_image module.
diff --git a/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php b/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php
index bfb5f1da47..267cf50915 100644
--- a/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php
+++ b/core/tests/Drupal/FunctionalTests/BrowserTestBaseTest.php
@@ -296,7 +296,7 @@ public function testTextAsserts() {
     $this->drupalGet('test-encoded');
     $dangerous = 'Bad html <script>alert(123);</script>';
     $sanitized = Html::escape($dangerous);
-    $this->assertNoText($dangerous);
+    $this->assertSession()->responseNotContains($dangerous);
     $this->assertSession()->responseContains($sanitized);
   }
 
@@ -330,6 +330,7 @@ public function testAssertText() {
    * @group legacy
    */
   public function testAssertNoText() {
+    $this->expectDeprecation('AssertLegacyTrait::assertNoText() is deprecated in drupal:8.2.0 and is removed from drupal:10.0.0. Use $this->assertSession()->responseNotContains() or $this->assertSession()->pageTextNotContains() instead. See https://www.drupal.org/node/3129738');
     $this->expectDeprecation('Calling AssertLegacyTrait::assertNoText() with more than one argument is deprecated in drupal:8.2.0 and the method is removed from drupal:10.0.0. Use $this->assertSession()->responseNotContains() or $this->assertSession()->pageTextNotContains() instead. See https://www.drupal.org/node/3129738');
     $this->drupalGet('test-encoded');
     $dangerous = 'Bad html <script>alert(123);</script>';
diff --git a/core/tests/Drupal/FunctionalTests/Installer/DistributionProfileExistingSettingsTest.php b/core/tests/Drupal/FunctionalTests/Installer/DistributionProfileExistingSettingsTest.php
index 41721e87b3..fe2ece56b1 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/DistributionProfileExistingSettingsTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/DistributionProfileExistingSettingsTest.php
@@ -90,7 +90,7 @@ protected function setUpLanguage() {
     // Verify that the requested theme is used.
     $this->assertRaw($this->info['distribution']['install']['theme']);
     // Verify that the "Choose profile" step does not appear.
-    $this->assertNoText('profile');
+    $this->assertSession()->pageTextNotContains('profile');
 
     parent::setUpLanguage();
   }
diff --git a/core/tests/Drupal/FunctionalTests/Installer/DistributionProfileTest.php b/core/tests/Drupal/FunctionalTests/Installer/DistributionProfileTest.php
index 5bd8d6d796..a5388abc08 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/DistributionProfileTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/DistributionProfileTest.php
@@ -55,7 +55,7 @@ protected function setUpLanguage() {
     // Verify that the requested theme is used.
     $this->assertRaw($this->info['distribution']['install']['theme']);
     // Verify that the "Choose profile" step does not appear.
-    $this->assertNoText('profile');
+    $this->assertSession()->pageTextNotContains('profile');
 
     parent::setUpLanguage();
   }
diff --git a/core/tests/Drupal/FunctionalTests/Installer/DistributionProfileTranslationQueryTest.php b/core/tests/Drupal/FunctionalTests/Installer/DistributionProfileTranslationQueryTest.php
index 2ca5c9ea50..ebc9b62b61 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/DistributionProfileTranslationQueryTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/DistributionProfileTranslationQueryTest.php
@@ -101,7 +101,7 @@ protected function setUpSettings() {
     // Verify that the requested theme is used.
     $this->assertRaw($this->info['distribution']['install']['theme']);
     // Verify that the "Choose profile" step does not appear.
-    $this->assertNoText('profile');
+    $this->assertSession()->pageTextNotContains('profile');
 
     parent::setUpSettings();
   }
@@ -119,7 +119,7 @@ public function testInstalled() {
     // Verify German was configured but not English.
     $this->drupalGet('admin/config/regional/language');
     $this->assertSession()->pageTextContains('German');
-    $this->assertNoText('English');
+    $this->assertSession()->pageTextNotContains('English');
   }
 
   /**
diff --git a/core/tests/Drupal/FunctionalTests/Installer/DistributionProfileTranslationTest.php b/core/tests/Drupal/FunctionalTests/Installer/DistributionProfileTranslationTest.php
index 6a4712adab..e43d7b3921 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/DistributionProfileTranslationTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/DistributionProfileTranslationTest.php
@@ -92,7 +92,7 @@ protected function setUpSettings() {
     // Verify that the requested theme is used.
     $this->assertRaw($this->info['distribution']['install']['theme']);
     // Verify that the "Choose profile" step does not appear.
-    $this->assertNoText('profile');
+    $this->assertSession()->pageTextNotContains('profile');
 
     parent::setUpSettings();
   }
@@ -110,7 +110,7 @@ public function testInstalled() {
     // Verify German was configured but not English.
     $this->drupalGet('admin/config/regional/language');
     $this->assertSession()->pageTextContains('German');
-    $this->assertNoText('English');
+    $this->assertSession()->pageTextNotContains('English');
   }
 
   /**
diff --git a/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingConfigNoConfigTest.php b/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingConfigNoConfigTest.php
index acdb6b22de..ddc256a457 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingConfigNoConfigTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingConfigNoConfigTest.php
@@ -39,7 +39,7 @@ public function testConfigSync() {
     $this->assertSession()->pageTextContains('This import is empty and if applied would delete all of your configuration, so has been rejected.');
 
     // Ensure there is no continuation button.
-    $this->assertNoText('Save and continue');
+    $this->assertSession()->pageTextNotContains('Save and continue');
     $this->assertSession()->buttonNotExists('edit-submit');
   }
 
diff --git a/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingConfigNoSystemSiteTest.php b/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingConfigNoSystemSiteTest.php
index bc1483da61..96499dc336 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingConfigNoSystemSiteTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingConfigNoSystemSiteTest.php
@@ -35,7 +35,7 @@ public function testConfigSync() {
     $this->assertSession()->pageTextContains('This import does not contain system.site configuration, so has been rejected.');
 
     // Ensure there is no continuation button.
-    $this->assertNoText('Save and continue');
+    $this->assertSession()->pageTextNotContains('Save and continue');
     $this->assertSession()->buttonNotExists('edit-submit');
   }
 
diff --git a/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingConfigSyncDriectoryProfileMismatchTest.php b/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingConfigSyncDriectoryProfileMismatchTest.php
index 3af5296066..bee5418af3 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingConfigSyncDriectoryProfileMismatchTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingConfigSyncDriectoryProfileMismatchTest.php
@@ -54,7 +54,7 @@ public function testConfigSync() {
     $this->assertSession()->pageTextContains('The selected installation profile minimal does not match the profile stored in configuration testing_config_install_multilingual.');
 
     // Ensure there is no continuation button.
-    $this->assertNoText('Save and continue');
+    $this->assertSession()->pageTextNotContains('Save and continue');
     $this->assertSession()->buttonNotExists('edit-submit');
   }
 
diff --git a/core/tests/Drupal/FunctionalTests/Installer/InstallerTranslationMultipleLanguageTest.php b/core/tests/Drupal/FunctionalTests/Installer/InstallerTranslationMultipleLanguageTest.php
index adea0f09a9..8fec1f9ac9 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/InstallerTranslationMultipleLanguageTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/InstallerTranslationMultipleLanguageTest.php
@@ -89,7 +89,7 @@ public function testTranslationsLoaded() {
       $this->assertSession()->pageTextContains('English');
     }
     else {
-      $this->assertNoText('English');
+      $this->assertSession()->pageTextNotContains('English');
     }
 
     // Verify the strings from the translation files were imported.
diff --git a/core/tests/Drupal/FunctionalTests/Installer/InstallerTranslationQueryTest.php b/core/tests/Drupal/FunctionalTests/Installer/InstallerTranslationQueryTest.php
index 6c20e5426a..be24236ede 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/InstallerTranslationQueryTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/InstallerTranslationQueryTest.php
@@ -63,7 +63,7 @@ public function testInstaller() {
     // Verify German was configured but not English.
     $this->drupalGet('admin/config/regional/language');
     $this->assertSession()->pageTextContains('German');
-    $this->assertNoText('English');
+    $this->assertSession()->pageTextNotContains('English');
   }
 
   /**
diff --git a/core/tests/Drupal/FunctionalTests/Installer/InstallerTranslationTest.php b/core/tests/Drupal/FunctionalTests/Installer/InstallerTranslationTest.php
index 7c82459f12..5b498926d0 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/InstallerTranslationTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/InstallerTranslationTest.php
@@ -86,7 +86,7 @@ public function testInstaller() {
     // Verify German was configured but not English.
     $this->drupalGet('admin/config/regional/language');
     $this->assertSession()->pageTextContains('German');
-    $this->assertNoText('English');
+    $this->assertSession()->pageTextNotContains('English');
 
     // The current container still has the english as current language, rebuild.
     $this->rebuildContainer();
diff --git a/core/tests/Drupal/FunctionalTests/Installer/MultipleDistributionsProfileTest.php b/core/tests/Drupal/FunctionalTests/Installer/MultipleDistributionsProfileTest.php
index 1cf2aa589d..1c03b84049 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/MultipleDistributionsProfileTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/MultipleDistributionsProfileTest.php
@@ -59,7 +59,7 @@ protected function setUpLanguage() {
     // Verify that the requested theme is used.
     $this->assertRaw('bartik');
     // Verify that the "Choose profile" step does not appear.
-    $this->assertNoText('profile');
+    $this->assertSession()->pageTextNotContains('profile');
 
     parent::setUpLanguage();
   }
diff --git a/core/tests/Drupal/Tests/Listeners/DeprecationListenerTrait.php b/core/tests/Drupal/Tests/Listeners/DeprecationListenerTrait.php
index 8d495121e7..6feb60d524 100644
--- a/core/tests/Drupal/Tests/Listeners/DeprecationListenerTrait.php
+++ b/core/tests/Drupal/Tests/Listeners/DeprecationListenerTrait.php
@@ -121,7 +121,6 @@ public static function getSkippedDeprecations() {
       "The \"PHPUnit\Framework\TestSuite\" class is considered internal This class is not covered by the backward compatibility promise for PHPUnit. It may change without further notice. You should not use it from \"Drupal\Tests\TestSuites\TestSuiteBase\".",
       // Simpletest's legacy assertion methods.
       'UiHelperTrait::drupalPostForm() is deprecated in drupal:9.1.0 and is removed from drupal:10.0.0. Use $this->submitForm() instead. See https://www.drupal.org/node/3168858',
-      'AssertLegacyTrait::assertNoText() is deprecated in drupal:8.2.0 and is removed from drupal:10.0.0. Use $this->assertSession()->responseNotContains() or $this->assertSession()->pageTextNotContains() instead. See https://www.drupal.org/node/3129738',
       'AssertLegacyTrait::assertRaw() is deprecated in drupal:8.2.0 and is removed from drupal:10.0.0. Use $this->assertSession()->responseContains() instead. See https://www.drupal.org/node/3129738',
       'AssertLegacyTrait::assertNoRaw() is deprecated in drupal:8.2.0 and is removed from drupal:10.0.0. Use $this->assertSession()->responseNotContains() instead. See https://www.drupal.org/node/3129738',
       // PHPUnit 9.
diff --git a/core/tests/Drupal/Tests/RequirementsPageTrait.php b/core/tests/Drupal/Tests/RequirementsPageTrait.php
index 0c2cc2a114..0c0871c85d 100644
--- a/core/tests/Drupal/Tests/RequirementsPageTrait.php
+++ b/core/tests/Drupal/Tests/RequirementsPageTrait.php
@@ -14,7 +14,7 @@ protected function updateRequirementsProblem() {
     // Assert a warning is shown on older test environments.
     $links = $this->getSession()->getPage()->findAll('named', ['link', 'try again']);
     if ($links && version_compare(phpversion(), \Drupal::MINIMUM_SUPPORTED_PHP) < 0) {
-      $this->assertNoText('Errors found');
+      $this->assertSession()->pageTextNotContains('Errors found');
       $this->assertWarningSummaries(['PHP']);
       $this->clickLink('try again');
       $this->checkForMetaRefresh();
@@ -36,7 +36,7 @@ protected function updateRequirementsProblem() {
    *   a warning not in the list is present, a fail is raised.
    */
   protected function continueOnExpectedWarnings($expected_warnings = []) {
-    $this->assertNoText('Errors found');
+    $this->assertSession()->pageTextNotContains('Errors found');
     $this->assertWarningSummaries($expected_warnings);
     $this->clickLink('continue anyway');
     $this->checkForMetaRefresh();
