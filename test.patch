diff --git a/composer.lock b/composer.lock
index e156578026..f32c2babbf 100644
--- a/composer.lock
+++ b/composer.lock
@@ -528,7 +528,7 @@
             "dist": {
                 "type": "path",
                 "url": "core",
-                "reference": "30eda55b110e77f197ac7b4564502f37b2391f15"
+                "reference": "fa3fb10b7a0bc08d6b8cedced099ea1a0b63e791"
             },
             "require": {
                 "asm89/stack-cors": "^1.1",
@@ -743,9 +743,6 @@
                     "lib/Drupal/Core/Cache/DatabaseCacheTagsChecksum.php",
                     "lib/Drupal/Core/Database/Connection.php",
                     "lib/Drupal/Core/Database/Database.php",
-                    "lib/Drupal/Core/Database/Driver/mysql/Connection.php",
-                    "lib/Drupal/Core/Database/Driver/pgsql/Connection.php",
-                    "lib/Drupal/Core/Database/Driver/sqlite/Connection.php",
                     "lib/Drupal/Core/Database/Statement.php",
                     "lib/Drupal/Core/Database/StatementInterface.php",
                     "lib/Drupal/Core/DependencyInjection/Container.php",
diff --git a/core/assets/scaffold/files/default.settings.php b/core/assets/scaffold/files/default.settings.php
index 0bb18b0da8..ab253b6c24 100644
--- a/core/assets/scaffold/files/default.settings.php
+++ b/core/assets/scaffold/files/default.settings.php
@@ -203,9 +203,9 @@
  * information on these defaults and the potential issues.
  *
  * More details can be found in the constructor methods for each driver:
- * - \Drupal\Core\Database\Driver\mysql\Connection::__construct()
- * - \Drupal\Core\Database\Driver\pgsql\Connection::__construct()
- * - \Drupal\Core\Database\Driver\sqlite\Connection::__construct()
+ * - \Drupal\mysql\Driver\Database\mysql\Connection::__construct()
+ * - \Drupal\pgsql\Driver\Database\pgsql\Connection::__construct()
+ * - \Drupal\sqlite\Driver\Database\sqlite\Connection::__construct()
  *
  * Sample Database configuration format for PostgreSQL (pgsql):
  * @code
diff --git a/core/composer.json b/core/composer.json
index 5bbabf5b1b..0aa9390b4f 100644
--- a/core/composer.json
+++ b/core/composer.json
@@ -131,12 +131,14 @@
         "drupal/migrate_drupal": "self.version",
         "drupal/migrate_drupal_multilingual": "self.version",
         "drupal/migrate_drupal_ui": "self.version",
+        "drupal/mysql": "self.version",
         "drupal/node": "self.version",
         "drupal/olivero": "self.version",
         "drupal/options": "self.version",
         "drupal/page_cache": "self.version",
         "drupal/path": "self.version",
         "drupal/path_alias": "self.version",
+        "drupal/pgsql": "self.version",
         "drupal/quickedit": "self.version",
         "drupal/rdf": "self.version",
         "drupal/responsive_image": "self.version",
@@ -146,6 +148,7 @@
         "drupal/settings_tray": "self.version",
         "drupal/seven": "self.version",
         "drupal/shortcut": "self.version",
+        "drupal/sqlite": "self.version",
         "drupal/standard": "self.version",
         "drupal/stark": "self.version",
         "drupal/statistics": "self.version",
@@ -188,9 +191,6 @@
             "lib/Drupal/Core/Cache/DatabaseCacheTagsChecksum.php",
             "lib/Drupal/Core/Database/Connection.php",
             "lib/Drupal/Core/Database/Database.php",
-            "lib/Drupal/Core/Database/Driver/mysql/Connection.php",
-            "lib/Drupal/Core/Database/Driver/pgsql/Connection.php",
-            "lib/Drupal/Core/Database/Driver/sqlite/Connection.php",
             "lib/Drupal/Core/Database/Statement.php",
             "lib/Drupal/Core/Database/StatementInterface.php",
             "lib/Drupal/Core/DependencyInjection/Container.php",
diff --git a/core/includes/install.inc b/core/includes/install.inc
index 3983773e81..f338b836ea 100644
--- a/core/includes/install.inc
+++ b/core/includes/install.inc
@@ -171,12 +171,13 @@ function drupal_get_database_types() {
   // The internal database driver name is any valid PHP identifier.
   $mask = ExtensionDiscovery::PHP_FUNCTION_PATTERN;
 
-  // Find drivers in the Drupal\Core and Drupal\Driver namespaces.
+  // Find drivers in the Drupal\Driver namespace.
+  // @todo remove discovering in the Drupal\Driver namespace in D10.
   /** @var \Drupal\Core\File\FileSystemInterface $file_system */
   $file_system = \Drupal::service('file_system');
-  $files = $file_system->scanDirectory(DRUPAL_ROOT . '/core/lib/Drupal/Core/Database/Driver', $mask, ['recurse' => FALSE]);
+  $files = [];
   if (is_dir(DRUPAL_ROOT . '/drivers/lib/Drupal/Driver/Database')) {
-    $files += $file_system->scanDirectory(DRUPAL_ROOT . '/drivers/lib/Drupal/Driver/Database/', $mask, ['recurse' => FALSE]);
+    $files = $file_system->scanDirectory(DRUPAL_ROOT . '/drivers/lib/Drupal/Driver/Database/', $mask, ['recurse' => FALSE]);
   }
   foreach ($files as $file) {
     if (file_exists($file->uri . '/Install/Tasks.php')) {
diff --git a/core/lib/Drupal/Core/Command/DbDumpCommand.php b/core/lib/Drupal/Core/Command/DbDumpCommand.php
index 8a36b3541e..b6634fe0b6 100644
--- a/core/lib/Drupal/Core/Command/DbDumpCommand.php
+++ b/core/lib/Drupal/Core/Command/DbDumpCommand.php
@@ -269,7 +269,7 @@ protected function getTableIndexes(Connection $connection, $table, &$definition)
    */
   protected function getTableCollation(Connection $connection, $table, &$definition) {
     // Remove identifier quotes from the table name. See
-    // \Drupal\Core\Database\Driver\mysql\Connection::$identifierQuotes.
+    // \Drupal\mysql\Driver\Database\mysql\Connection::$identifierQuotes.
     $table = trim($connection->prefixTables('{' . $table . '}'), '"');
     $query = $connection->query("SHOW TABLE STATUS WHERE NAME = :table_name", [':table_name' => $table]);
     $data = $query->fetchAssoc();
diff --git a/core/lib/Drupal/Core/Database/Database.php b/core/lib/Drupal/Core/Database/Database.php
index f2d5f9c2bd..8a56e22b81 100644
--- a/core/lib/Drupal/Core/Database/Database.php
+++ b/core/lib/Drupal/Core/Database/Database.php
@@ -229,11 +229,6 @@ abstract class Database {
       ];
     }
 
-    // Fallback for Drupal 7 settings.php if namespace is not provided.
-    if (empty($info['namespace'])) {
-      $info['namespace'] = 'Drupal\\Core\\Database\\Driver\\' . $info['driver'];
-    }
-
     return $info;
   }
 
@@ -458,38 +453,42 @@ public static function convertDbUrlToConnectionInfo($url, $root) {
     $driver = $matches[1];
 
     // Determine if the database driver is provided by a module.
+    // @todo refactor in D10, when all database drivers will be provided by
+    //   modules.
     $module = NULL;
     $connection_class = NULL;
     $url_components = parse_url($url);
-    if (isset($url_components['query'])) {
-      parse_str($url_components['query'], $query);
-      if (isset($query['module']) && $query['module']) {
-        $module = $query['module'];
-        // Set up an additional autoloader. We don't use the main autoloader as
-        // this method can be called before Drupal is installed and is never
-        // called during regular runtime.
-        $namespace = "Drupal\\$module\\Driver\\Database\\$driver";
-        $psr4_base_directory = Database::findDriverAutoloadDirectory($namespace, $root, TRUE);
-        $additional_class_loader = new ClassLoader();
-        $additional_class_loader->addPsr4($namespace . '\\', $psr4_base_directory);
-        $additional_class_loader->register(TRUE);
-        $connection_class = $custom_connection_class = $namespace . '\\Connection';
-      }
+    $url_components['query'] = $url_components['query'] ?? '';
+    parse_str($url_components['query'], $query);
+
+    // Add the module key for core database drivers when the module key is not
+    // set.
+    if (!isset($query['module']) && in_array($driver, ['mysql', 'pgsql', 'sqlite'], TRUE)) {
+      $query['module'] = $driver;
+    }
+
+    if (isset($query['module']) && $query['module']) {
+      $module = $query['module'];
+      // Set up an additional autoloader. We don't use the main autoloader as
+      // this method can be called before Drupal is installed and is never
+      // called during regular runtime.
+      $namespace = "Drupal\\$module\\Driver\\Database\\$driver";
+      $psr4_base_directory = Database::findDriverAutoloadDirectory($namespace, $root, TRUE);
+      $additional_class_loader = new ClassLoader();
+      $additional_class_loader->addPsr4($namespace . '\\', $psr4_base_directory);
+      $additional_class_loader->register(TRUE);
+      $connection_class = $namespace . '\\Connection';
     }
 
     if (!$module) {
       // Determine the connection class to use. Discover if the URL has a valid
-      // driver scheme. Try with Drupal 8 style custom drivers first, since
-      // those can override/extend the core ones.
-      $connection_class = $custom_connection_class = "Drupal\\Driver\\Database\\{$driver}\\Connection";
-      if (!class_exists($connection_class)) {
-        // If the URL is not relative to a custom driver, try with core ones.
-        $connection_class = "Drupal\\Core\\Database\\Driver\\{$driver}\\Connection";
-      }
+      // driver scheme for a Drupal 8 style custom driver.
+      // @todo Remove this in Drupal 10.
+      $connection_class = "Drupal\\Driver\\Database\\{$driver}\\Connection";
     }
 
     if (!class_exists($connection_class)) {
-      throw new \InvalidArgumentException("Can not convert '$url' to a database connection, class '$custom_connection_class' does not exist");
+      throw new \InvalidArgumentException("Can not convert '$url' to a database connection, class '$connection_class' does not exist");
     }
 
     $options = $connection_class::createConnectionOptionsFromUrl($url, $root);
@@ -634,8 +633,8 @@ protected static function getDatabaseDriverNamespace(array $connection_info) {
     if (isset($connection_info['namespace'])) {
       return $connection_info['namespace'];
     }
-    // Fallback for Drupal 7 settings.php.
-    return 'Drupal\\Core\\Database\\Driver\\' . $connection_info['driver'];
+    // Fallback for when the namespace is not provided in settings.php.
+    return 'Drupal\\' . $connection_info['driver'] . '\\Driver\\Database\\' . $connection_info['driver'];
   }
 
   /**
diff --git a/core/lib/Drupal/Core/Database/StatementInterface.php b/core/lib/Drupal/Core/Database/StatementInterface.php
index 917eb8b9bf..08c67578ab 100644
--- a/core/lib/Drupal/Core/Database/StatementInterface.php
+++ b/core/lib/Drupal/Core/Database/StatementInterface.php
@@ -2,18 +2,20 @@
 
 namespace Drupal\Core\Database;
 
+// cSpell:ignore mydriver
+
 /**
  * Represents a prepared statement.
  *
- * Child implementations should either extend PDOStatement:
+ * Child implementations should either extend StatementWrapper:
  * @code
- * class Drupal\Core\Database\Driver\oracle\Statement extends PDOStatement implements Drupal\Core\Database\StatementInterface {}
+ * class Drupal\mymodule\Driver\Database\mydriver\Statement extends Drupal\Core\Database\StatementWrapper {}
  * @endcode
  * or define their own class. If defining their own class, they will also have
  * to implement either the Iterator or IteratorAggregate interface before
  * Drupal\Core\Database\StatementInterface:
  * @code
- * class Drupal\Core\Database\Driver\oracle\Statement implements Iterator, Drupal\Core\Database\StatementInterface {}
+ * class Drupal\mymodule\Driver\Database\mydriver\Statement implements Iterator, Drupal\Core\Database\StatementInterface {}
  * @endcode
  *
  * @ingroup database
diff --git a/core/lib/Drupal/Core/Database/StatementPrefetch.php b/core/lib/Drupal/Core/Database/StatementPrefetch.php
index 3f6efdf364..b37b674dfe 100644
--- a/core/lib/Drupal/Core/Database/StatementPrefetch.php
+++ b/core/lib/Drupal/Core/Database/StatementPrefetch.php
@@ -172,7 +172,7 @@ public function execute($args = [], $options = []) {
     // as soon as possible.
     $this->data = $statement->fetchAll(\PDO::FETCH_ASSOC);
     // Destroy the statement as soon as possible. See the documentation of
-    // \Drupal\Core\Database\Driver\sqlite\Statement for an explanation.
+    // \Drupal\sqlite\Driver\Database\sqlite\Statement for an explanation.
     unset($statement);
 
     $this->resultRowCount = count($this->data);
diff --git a/core/lib/Drupal/Core/Site/Settings.php b/core/lib/Drupal/Core/Site/Settings.php
index bcc0e4eba4..264911e84e 100644
--- a/core/lib/Drupal/Core/Site/Settings.php
+++ b/core/lib/Drupal/Core/Site/Settings.php
@@ -162,6 +162,43 @@ public static function initialize($app_root, $site_path, &$class_loader) {
     // Initialize databases.
     foreach ($databases as $key => $targets) {
       foreach ($targets as $target => $info) {
+        // Backwards compatibility layer for Drupal 8 style database connection
+        // array's. Those do not have the 'autoload' key set for core database
+        // drivers.
+        if (empty($info['autoload'])) {
+          switch (strtolower($info['driver'])) {
+            case 'mysql':
+              $info['autoload'] = 'core/modules/mysql/src/Driver/Database/mysql/';
+              break;
+
+            case 'pgsql':
+              $info['autoload'] = 'core/modules/pgsql/src/Driver/Database/pgsql/';
+              break;
+
+            case 'sqlite':
+              $info['autoload'] = 'core/modules/sqlite/src/Driver/Database/sqlite/';
+              break;
+          }
+        }
+        // Backwards compatibility layer for Drupal 8 style database connection
+        // array's. Those have the wrong 'namespace' key set, or not set at all
+        // for core supported database drivers.
+        if (empty($info['namespace']) || (strpos($info['namespace'], 'Drupal\\Core\\Database\\Driver\\') === 0)) {
+          switch (strtolower($info['driver'])) {
+            case 'mysql':
+              $info['namespace'] = 'Drupal\\mysql\\Driver\\Database\\mysql';
+              break;
+
+            case 'pgsql':
+              $info['namespace'] = 'Drupal\\pgsql\\Driver\\Database\\pgsql';
+              break;
+
+            case 'sqlite':
+              $info['namespace'] = 'Drupal\\sqlite\\Driver\\Database\\sqlite';
+              break;
+          }
+        }
+
         Database::addConnectionInfo($key, $target, $info);
         // If the database driver is provided by a module, then its code may
         // need to be instantiated prior to when the module's root namespace
diff --git a/core/lib/Drupal/Core/Test/FunctionalTestSetupTrait.php b/core/lib/Drupal/Core/Test/FunctionalTestSetupTrait.php
index cd89d586a6..80eeb9cb3a 100644
--- a/core/lib/Drupal/Core/Test/FunctionalTestSetupTrait.php
+++ b/core/lib/Drupal/Core/Test/FunctionalTestSetupTrait.php
@@ -506,6 +506,7 @@ protected function installParameters() {
     $connection_info['default']['prefix'] = $connection_info['default']['prefix']['default'];
     unset($connection_info['default']['driver']);
     unset($connection_info['default']['namespace']);
+    unset($connection_info['default']['autoload']);
     unset($connection_info['default']['pdo']);
     unset($connection_info['default']['init_commands']);
     // Remove database connection info that is not used by SQLite.
diff --git a/core/modules/comment/tests/src/Unit/CommentStatisticsUnitTest.php b/core/modules/comment/tests/src/Unit/CommentStatisticsUnitTest.php
index 068d77bb41..12483889dc 100644
--- a/core/modules/comment/tests/src/Unit/CommentStatisticsUnitTest.php
+++ b/core/modules/comment/tests/src/Unit/CommentStatisticsUnitTest.php
@@ -51,7 +51,7 @@ class CommentStatisticsUnitTest extends UnitTestCase {
    * Sets up required mocks and the CommentStatistics service under test.
    */
   protected function setUp(): void {
-    $this->statement = $this->getMockBuilder('Drupal\Core\Database\Driver\sqlite\Statement')
+    $this->statement = $this->getMockBuilder('Drupal\sqlite\Driver\Database\sqlite\Statement')
       ->disableOriginalConstructor()
       ->getMock();
 
diff --git a/core/modules/config/tests/src/Functional/ConfigImportAllTest.php b/core/modules/config/tests/src/Functional/ConfigImportAllTest.php
index a746173b47..076f43ad47 100644
--- a/core/modules/config/tests/src/Functional/ConfigImportAllTest.php
+++ b/core/modules/config/tests/src/Functional/ConfigImportAllTest.php
@@ -87,10 +87,13 @@ public function testInstallUninstall() {
     field_purge_batch(1000);
 
     $all_modules = \Drupal::service('extension.list.module')->getList();
+    $database_module = \Drupal::service('database')->getProvider();
+    $expected_modules = ['path_alias', 'system', 'user', 'standard', $database_module];
 
     // Ensure that only core required modules and the install profile can not be uninstalled.
     $validation_reasons = \Drupal::service('module_installer')->validateUninstall(array_keys($all_modules));
-    $this->assertEquals(['path_alias', 'system', 'user', 'standard'], array_keys($validation_reasons));
+    $validation_modules = array_keys($validation_reasons);
+    $this->assertEqualsCanonicalizing($expected_modules, $validation_modules);
 
     $modules_to_uninstall = array_filter($all_modules, function ($module) use ($validation_reasons) {
       // Filter required and not enabled modules.
@@ -103,6 +106,9 @@ public function testInstallUninstall() {
     // Can not uninstall config and use admin/config/development/configuration!
     unset($modules_to_uninstall['config']);
 
+    // Can not uninstall the database module.
+    unset($modules_to_uninstall[$database_module]);
+
     $this->assertTrue(isset($modules_to_uninstall['comment']), 'The comment module will be disabled');
     $this->assertTrue(isset($modules_to_uninstall['file']), 'The File module will be disabled');
     $this->assertTrue(isset($modules_to_uninstall['editor']), 'The Editor module will be disabled');
diff --git a/core/modules/migrate/tests/src/Kernel/MigrateSqlSourceTestBase.php b/core/modules/migrate/tests/src/Kernel/MigrateSqlSourceTestBase.php
index d7058b1a7d..fe59d8a2de 100644
--- a/core/modules/migrate/tests/src/Kernel/MigrateSqlSourceTestBase.php
+++ b/core/modules/migrate/tests/src/Kernel/MigrateSqlSourceTestBase.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\Tests\migrate\Kernel;
 
-use Drupal\Core\Database\Driver\sqlite\Connection;
+use Drupal\sqlite\Driver\Database\sqlite\Connection;
 
 /**
  * Base class for tests of Migrate source plugins that use a database.
@@ -16,7 +16,7 @@ abstract class MigrateSqlSourceTestBase extends MigrateSourceTestBase {
    *   The source data, keyed by table name. Each table is an array containing
    *   the rows in that table.
    *
-   * @return \Drupal\Core\Database\Driver\sqlite\Connection
+   * @return \Drupal\sqlite\Driver\Database\sqlite\Connection
    *   The SQLite database connection.
    */
   protected function getDatabase(array $source_data) {
diff --git a/core/modules/migrate/tests/src/Kernel/MigrateTestBase.php b/core/modules/migrate/tests/src/Kernel/MigrateTestBase.php
index 38e290819c..c9718aa938 100644
--- a/core/modules/migrate/tests/src/Kernel/MigrateTestBase.php
+++ b/core/modules/migrate/tests/src/Kernel/MigrateTestBase.php
@@ -96,7 +96,7 @@ private function createMigrationConnection() {
       $connection_info[$target]['prefix']['default'] = $prefix . '0';
 
       // Add the original simpletest prefix so SQLite can attach its database.
-      // @see \Drupal\Core\Database\Driver\sqlite\Connection::init()
+      // @see \Drupal\sqlite\Driver\Database\sqlite\Connection::init()
       $connection_info[$target]['prefix'][$value['prefix']['default']] = $value['prefix']['default'];
     }
     Database::addConnectionInfo('migrate', 'default', $connection_info['default']);
diff --git a/core/modules/migrate/tests/src/Kernel/Plugin/MigrationPluginListTest.php b/core/modules/migrate/tests/src/Kernel/Plugin/MigrationPluginListTest.php
index 51d8a3eb61..961cadf146 100644
--- a/core/modules/migrate/tests/src/Kernel/Plugin/MigrationPluginListTest.php
+++ b/core/modules/migrate/tests/src/Kernel/Plugin/MigrationPluginListTest.php
@@ -141,7 +141,7 @@ public function testGetDefinitions() {
       $connection_info[$target]['prefix']['default'] = $prefix . '0';
 
       // Add the original simpletest prefix so SQLite can attach its database.
-      // @see \Drupal\Core\Database\Driver\sqlite\Connection::init()
+      // @see \Drupal\sqlite\Driver\Database\sqlite\Connection::init()
       $connection_info[$target]['prefix'][$value['prefix']['default']] = $value['prefix']['default'];
     }
     Database::addConnectionInfo('migrate', 'default', $connection_info['default']);
diff --git a/core/modules/migrate/tests/src/Kernel/QueryBatchTest.php b/core/modules/migrate/tests/src/Kernel/QueryBatchTest.php
index 86dd2059dc..8255c7c15c 100644
--- a/core/modules/migrate/tests/src/Kernel/QueryBatchTest.php
+++ b/core/modules/migrate/tests/src/Kernel/QueryBatchTest.php
@@ -6,7 +6,7 @@
 use Drupal\migrate\MigrateException;
 use Drupal\migrate\Plugin\MigrateIdMapInterface;
 use Drupal\migrate\Plugin\MigrationInterface;
-use Drupal\Core\Database\Driver\sqlite\Connection;
+use Drupal\sqlite\Driver\Database\sqlite\Connection;
 
 /**
  * Tests query batching.
@@ -224,7 +224,7 @@ protected function getPlugin($configuration) {
    *   The source data, keyed by table name. Each table is an array containing
    *   the rows in that table.
    *
-   * @return \Drupal\Core\Database\Driver\sqlite\Connection
+   * @return \Drupal\sqlite\Driver\Database\sqlite\Connection
    *   The SQLite database connection.
    */
   protected function getDatabase(array $source_data) {
diff --git a/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapTest.php b/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapTest.php
index cd27e10597..1ab86536a8 100644
--- a/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapTest.php
+++ b/core/modules/migrate/tests/src/Unit/MigrateSqlIdMapTest.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\Tests\migrate\Unit;
 
-use Drupal\Core\Database\Driver\sqlite\Connection;
+use Drupal\sqlite\Driver\Database\sqlite\Connection;
 use Drupal\migrate\Plugin\MigrationInterface;
 use Drupal\migrate\MigrateException;
 use Drupal\migrate\Plugin\MigrateIdMapInterface;
@@ -962,7 +962,7 @@ public function testGetQualifiedMapTablePrefix() {
     $qualified_map_table = $this->getIdMap()->getQualifiedMapTableName();
     // The SQLite driver is a special flower. It will prefix tables with
     // PREFIX.TABLE, instead of the standard PREFIXTABLE.
-    // @see \Drupal\Core\Database\Driver\sqlite\Connection::__construct()
+    // @see \Drupal\sqlite\Driver\Database\sqlite\Connection::__construct()
     $this->assertEquals('prefix.migrate_map_sql_idmap_test', $qualified_map_table);
   }
 
diff --git a/core/modules/migrate/tests/src/Unit/MigrateTestCase.php b/core/modules/migrate/tests/src/Unit/MigrateTestCase.php
index 6425ff5392..6f12f272ac 100644
--- a/core/modules/migrate/tests/src/Unit/MigrateTestCase.php
+++ b/core/modules/migrate/tests/src/Unit/MigrateTestCase.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\Tests\migrate\Unit;
 
-use Drupal\Core\Database\Driver\sqlite\Connection;
+use Drupal\sqlite\Driver\Database\sqlite\Connection;
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\migrate\Plugin\MigrationInterface;
 use Drupal\Tests\UnitTestCase;
@@ -99,7 +99,7 @@ protected function getMigration() {
    *   (optional) Options for the database connection. Defaults to an empty
    *   array.
    *
-   * @return \Drupal\Core\Database\Driver\sqlite\Connection
+   * @return \Drupal\sqlite\Driver\Database\sqlite\Connection
    *   The database connection.
    */
   protected function getDatabase(array $database_contents, $connection_options = []) {
diff --git a/core/modules/mysql/mysql.info.yml b/core/modules/mysql/mysql.info.yml
new file mode 100644
index 0000000000..3a85112110
--- /dev/null
+++ b/core/modules/mysql/mysql.info.yml
@@ -0,0 +1,5 @@
+name: MySQL
+type: module
+description: 'Database driver for MySQL.'
+package: Core
+version: VERSION
diff --git a/core/modules/mysql/mysql.module b/core/modules/mysql/mysql.module
new file mode 100644
index 0000000000..a8572bf865
--- /dev/null
+++ b/core/modules/mysql/mysql.module
@@ -0,0 +1,22 @@
+<?php
+
+/**
+ * @file
+ * The MySQL module provides the connection between Drupal and a MySQL, MariaDB or equivalent database.
+ */
+
+use Drupal\Core\Routing\RouteMatchInterface;
+
+/**
+ * Implements hook_help().
+ */
+function mysql_help($route_name, RouteMatchInterface $route_match) {
+  switch ($route_name) {
+    case 'help.page.mysql':
+      $output = '';
+      $output .= '<h3>' . t('About') . '</h3>';
+      $output .= '<p>' . t('The MySQL module provides the connection between Drupal and a MySQL, MariaDB or equivalent database. For more information, see the <a href=":mysql">online documentation for the MySQL module</a>.', [':mysql' => 'https://www.drupal.org/documentation/modules/mysql']) . '</p>';
+      return $output;
+
+  }
+}
diff --git a/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php b/core/modules/mysql/src/Driver/Database/mysql/Connection.php
similarity index 98%
rename from core/lib/Drupal/Core/Database/Driver/mysql/Connection.php
rename to core/modules/mysql/src/Driver/Database/mysql/Connection.php
index fe281cb3d9..9e32a01a2f 100644
--- a/core/lib/Drupal/Core/Database/Driver/mysql/Connection.php
+++ b/core/modules/mysql/src/Driver/Database/mysql/Connection.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\mysql;
+namespace Drupal\mysql\Driver\Database\mysql;
 
 use Drupal\Core\Database\DatabaseAccessDeniedException;
 use Drupal\Core\Database\IntegrityConstraintViolationException;
@@ -70,7 +70,7 @@ class Connection extends DatabaseConnection {
    *
    * @var string
    *
-   * @see \Drupal\Core\Database\Driver\mysql\Connection::version
+   * @see \Drupal\mysql\Driver\Database\mysql\Connection::version
    */
   private $serverVersion;
 
@@ -481,6 +481,15 @@ protected function doCommit() {
     return $success;
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public static function createConnectionOptionsFromUrl($url, $root) {
+    $database = parent::createConnectionOptionsFromUrl($url, $root);
+    $database['module'] = 'mysql';
+    return $database;
+  }
+
 }
 
 
diff --git a/core/lib/Drupal/Core/Database/Driver/mysql/Insert.php b/core/modules/mysql/src/Driver/Database/mysql/Insert.php
similarity index 97%
rename from core/lib/Drupal/Core/Database/Driver/mysql/Insert.php
rename to core/modules/mysql/src/Driver/Database/mysql/Insert.php
index c65642aed0..6169852103 100644
--- a/core/lib/Drupal/Core/Database/Driver/mysql/Insert.php
+++ b/core/modules/mysql/src/Driver/Database/mysql/Insert.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\mysql;
+namespace Drupal\mysql\Driver\Database\mysql;
 
 use Drupal\Core\Database\Query\Insert as QueryInsert;
 
diff --git a/core/lib/Drupal/Core/Database/Driver/mysql/Install/Tasks.php b/core/modules/mysql/src/Driver/Database/mysql/Install/Tasks.php
similarity index 97%
rename from core/lib/Drupal/Core/Database/Driver/mysql/Install/Tasks.php
rename to core/modules/mysql/src/Driver/Database/mysql/Install/Tasks.php
index dfac0158b7..a6ad642425 100644
--- a/core/lib/Drupal/Core/Database/Driver/mysql/Install/Tasks.php
+++ b/core/modules/mysql/src/Driver/Database/mysql/Install/Tasks.php
@@ -1,11 +1,11 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\mysql\Install;
+namespace Drupal\mysql\Driver\Database\mysql\Install;
 
 use Drupal\Core\Database\ConnectionNotDefinedException;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Database\Install\Tasks as InstallTasks;
-use Drupal\Core\Database\Driver\mysql\Connection;
+use Drupal\mysql\Driver\Database\mysql\Connection;
 use Drupal\Core\Database\DatabaseNotFoundException;
 
 /**
@@ -47,7 +47,7 @@ class Tasks extends InstallTasks {
   protected $pdoDriver = 'mysql';
 
   /**
-   * Constructs a \Drupal\Core\Database\Driver\mysql\Install\Tasks object.
+   * Constructs a \Drupal\mysql\Driver\Database\mysql\Install\Tasks object.
    */
   public function __construct() {
     $this->tasks[] = [
diff --git a/core/lib/Drupal/Core/Database/Driver/mysql/Schema.php b/core/modules/mysql/src/Driver/Database/mysql/Schema.php
similarity index 98%
rename from core/lib/Drupal/Core/Database/Driver/mysql/Schema.php
rename to core/modules/mysql/src/Driver/Database/mysql/Schema.php
index e05f10c86e..15752cbef0 100644
--- a/core/lib/Drupal/Core/Database/Driver/mysql/Schema.php
+++ b/core/modules/mysql/src/Driver/Database/mysql/Schema.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\mysql;
+namespace Drupal\mysql\Driver\Database\mysql;
 
 use Drupal\Core\Database\SchemaException;
 use Drupal\Core\Database\SchemaObjectExistsException;
@@ -124,7 +124,7 @@ protected function createTableSql($name, $table) {
     // 'utf8mb4_general_ci' (MySQL 5) or 'utf8mb4_0900_ai_ci' (MySQL 8) for
     // utf8mb4. If an alternate collation has been set, it needs to be
     // explicitly specified.
-    // @see \Drupal\Core\Database\Driver\mysql\Schema
+    // @see \Drupal\mysql\Driver\Database\mysql\Schema
     if (!empty($info['collation'])) {
       $sql .= ' COLLATE ' . $info['collation'];
     }
@@ -346,8 +346,8 @@ protected function getNormalizedIndexes(array $spec) {
    * @param array $index
    *   The index array to be used in createKeySql.
    *
-   * @see Drupal\Core\Database\Driver\mysql\Schema::createKeySql()
-   * @see Drupal\Core\Database\Driver\mysql\Schema::normalizeIndexes()
+   * @see Drupal\mysql\Driver\Database\mysql\Schema::createKeySql()
+   * @see Drupal\mysql\Driver\Database\mysql\Schema::normalizeIndexes()
    */
   protected function shortenIndex(&$index) {
     if (is_array($index)) {
diff --git a/core/lib/Drupal/Core/Database/Driver/mysql/Upsert.php b/core/modules/mysql/src/Driver/Database/mysql/Upsert.php
similarity index 96%
rename from core/lib/Drupal/Core/Database/Driver/mysql/Upsert.php
rename to core/modules/mysql/src/Driver/Database/mysql/Upsert.php
index 8eda775c0a..0e5f7d3b50 100644
--- a/core/lib/Drupal/Core/Database/Driver/mysql/Upsert.php
+++ b/core/modules/mysql/src/Driver/Database/mysql/Upsert.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\mysql;
+namespace Drupal\mysql\Driver\Database\mysql;
 
 use Drupal\Core\Database\Query\Upsert as QueryUpsert;
 
diff --git a/core/modules/pgsql/pgsql.info.yml b/core/modules/pgsql/pgsql.info.yml
new file mode 100644
index 0000000000..93ad5d8e1f
--- /dev/null
+++ b/core/modules/pgsql/pgsql.info.yml
@@ -0,0 +1,5 @@
+name: PostgreSQL
+type: module
+description: 'Database driver for PostgreSQL.'
+package: Core
+version: VERSION
diff --git a/core/modules/pgsql/pgsql.module b/core/modules/pgsql/pgsql.module
new file mode 100644
index 0000000000..4d9027bc43
--- /dev/null
+++ b/core/modules/pgsql/pgsql.module
@@ -0,0 +1,22 @@
+<?php
+
+/**
+ * @file
+ * The PostgreSQL module provides the connection between Drupal and a PostgreSQL database.
+ */
+
+use Drupal\Core\Routing\RouteMatchInterface;
+
+/**
+ * Implements hook_help().
+ */
+function pgsql_help($route_name, RouteMatchInterface $route_match) {
+  switch ($route_name) {
+    case 'help.page.pgsql':
+      $output = '';
+      $output .= '<h3>' . t('About') . '</h3>';
+      $output .= '<p>' . t('The PostgreSQL module provides the connection between Drupal and a PostgreSQL database. For more information, see the <a href=":pgsql">online documentation for the PostgreSQL module</a>.', [':pgsql' => 'https://www.drupal.org/documentation/modules/pgsql']) . '</p>';
+      return $output;
+
+  }
+}
diff --git a/core/lib/Drupal/Core/Database/Driver/pgsql/Connection.php b/core/modules/pgsql/src/Driver/Database/pgsql/Connection.php
similarity index 97%
rename from core/lib/Drupal/Core/Database/Driver/pgsql/Connection.php
rename to core/modules/pgsql/src/Driver/Database/pgsql/Connection.php
index b996735aab..546499045c 100644
--- a/core/lib/Drupal/Core/Database/Driver/pgsql/Connection.php
+++ b/core/modules/pgsql/src/Driver/Database/pgsql/Connection.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\pgsql;
+namespace Drupal\pgsql\Driver\Database\pgsql;
 
 use Drupal\Core\Database\Database;
 use Drupal\Core\Database\Connection as DatabaseConnection;
@@ -364,6 +364,15 @@ public function rollbackSavepoint($savepoint_name = 'mimic_implicit_commit') {
     }
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public static function createConnectionOptionsFromUrl($url, $root) {
+    $database = parent::createConnectionOptionsFromUrl($url, $root);
+    $database['module'] = 'pgsql';
+    return $database;
+  }
+
 }
 
 /**
diff --git a/core/lib/Drupal/Core/Database/Driver/pgsql/Delete.php b/core/modules/pgsql/src/Driver/Database/pgsql/Delete.php
similarity index 91%
rename from core/lib/Drupal/Core/Database/Driver/pgsql/Delete.php
rename to core/modules/pgsql/src/Driver/Database/pgsql/Delete.php
index 2cf178e7b2..9585a9c4bc 100644
--- a/core/lib/Drupal/Core/Database/Driver/pgsql/Delete.php
+++ b/core/modules/pgsql/src/Driver/Database/pgsql/Delete.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\pgsql;
+namespace Drupal\pgsql\Driver\Database\pgsql;
 
 use Drupal\Core\Database\Query\Delete as QueryDelete;
 
diff --git a/core/lib/Drupal/Core/Database/Driver/pgsql/Insert.php b/core/modules/pgsql/src/Driver/Database/pgsql/Insert.php
similarity index 99%
rename from core/lib/Drupal/Core/Database/Driver/pgsql/Insert.php
rename to core/modules/pgsql/src/Driver/Database/pgsql/Insert.php
index c6642afdbe..6989da66c1 100644
--- a/core/lib/Drupal/Core/Database/Driver/pgsql/Insert.php
+++ b/core/modules/pgsql/src/Driver/Database/pgsql/Insert.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\pgsql;
+namespace Drupal\pgsql\Driver\Database\pgsql;
 
 use Drupal\Core\Database\DatabaseExceptionWrapper;
 use Drupal\Core\Database\IntegrityConstraintViolationException;
diff --git a/core/lib/Drupal/Core/Database/Driver/pgsql/Install/Tasks.php b/core/modules/pgsql/src/Driver/Database/pgsql/Install/Tasks.php
similarity index 98%
rename from core/lib/Drupal/Core/Database/Driver/pgsql/Install/Tasks.php
rename to core/modules/pgsql/src/Driver/Database/pgsql/Install/Tasks.php
index 1c07dfaf38..a58a0fa62e 100644
--- a/core/lib/Drupal/Core/Database/Driver/pgsql/Install/Tasks.php
+++ b/core/modules/pgsql/src/Driver/Database/pgsql/Install/Tasks.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\pgsql\Install;
+namespace Drupal\pgsql\Driver\Database\pgsql\Install;
 
 use Drupal\Core\Database\Database;
 use Drupal\Core\Database\Install\Tasks as InstallTasks;
@@ -26,7 +26,7 @@ class Tasks extends InstallTasks {
   protected $pdoDriver = 'pgsql';
 
   /**
-   * Constructs a \Drupal\Core\Database\Driver\pgsql\Install\Tasks object.
+   * Constructs a \Drupal\pgsql\Driver\Database\pgsql\Install\Tasks object.
    */
   public function __construct() {
     $this->tasks[] = [
diff --git a/core/lib/Drupal/Core/Database/Driver/pgsql/Schema.php b/core/modules/pgsql/src/Driver/Database/pgsql/Schema.php
similarity index 99%
rename from core/lib/Drupal/Core/Database/Driver/pgsql/Schema.php
rename to core/modules/pgsql/src/Driver/Database/pgsql/Schema.php
index 1e7c4b6dca..7cd0eb37d0 100644
--- a/core/lib/Drupal/Core/Database/Driver/pgsql/Schema.php
+++ b/core/modules/pgsql/src/Driver/Database/pgsql/Schema.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\pgsql;
+namespace Drupal\pgsql\Driver\Database\pgsql;
 
 use Drupal\Core\Database\SchemaObjectExistsException;
 use Drupal\Core\Database\SchemaObjectDoesNotExistException;
@@ -28,7 +28,7 @@ class Schema extends DatabaseSchema {
    * This is collected by Schema::queryTableInformation(), by introspecting the
    * database.
    *
-   * @see \Drupal\Core\Database\Driver\pgsql\Schema::queryTableInformation()
+   * @see \Drupal\pgsql\Driver\Database\pgsql\Schema::queryTableInformation()
    * @var array
    */
   protected $tableInformation = [];
diff --git a/core/lib/Drupal/Core/Database/Driver/pgsql/Select.php b/core/modules/pgsql/src/Driver/Database/pgsql/Select.php
similarity index 99%
rename from core/lib/Drupal/Core/Database/Driver/pgsql/Select.php
rename to core/modules/pgsql/src/Driver/Database/pgsql/Select.php
index b5d22d42c9..1f12b3d4b9 100644
--- a/core/lib/Drupal/Core/Database/Driver/pgsql/Select.php
+++ b/core/modules/pgsql/src/Driver/Database/pgsql/Select.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\pgsql;
+namespace Drupal\pgsql\Driver\Database\pgsql;
 
 use Drupal\Core\Database\Query\Select as QuerySelect;
 
diff --git a/core/lib/Drupal/Core/Database/Driver/pgsql/Truncate.php b/core/modules/pgsql/src/Driver/Database/pgsql/Truncate.php
similarity index 91%
rename from core/lib/Drupal/Core/Database/Driver/pgsql/Truncate.php
rename to core/modules/pgsql/src/Driver/Database/pgsql/Truncate.php
index 0d9947b96f..18115e0a7d 100644
--- a/core/lib/Drupal/Core/Database/Driver/pgsql/Truncate.php
+++ b/core/modules/pgsql/src/Driver/Database/pgsql/Truncate.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\pgsql;
+namespace Drupal\pgsql\Driver\Database\pgsql;
 
 use Drupal\Core\Database\Query\Truncate as QueryTruncate;
 
diff --git a/core/lib/Drupal/Core/Database/Driver/pgsql/Update.php b/core/modules/pgsql/src/Driver/Database/pgsql/Update.php
similarity index 98%
rename from core/lib/Drupal/Core/Database/Driver/pgsql/Update.php
rename to core/modules/pgsql/src/Driver/Database/pgsql/Update.php
index 8a3d918c90..a856c4afa9 100644
--- a/core/lib/Drupal/Core/Database/Driver/pgsql/Update.php
+++ b/core/modules/pgsql/src/Driver/Database/pgsql/Update.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\pgsql;
+namespace Drupal\pgsql\Driver\Database\pgsql;
 
 use Drupal\Core\Database\Database;
 use Drupal\Core\Database\Query\Update as QueryUpdate;
diff --git a/core/lib/Drupal/Core/Database/Driver/pgsql/Upsert.php b/core/modules/pgsql/src/Driver/Database/pgsql/Upsert.php
similarity index 99%
rename from core/lib/Drupal/Core/Database/Driver/pgsql/Upsert.php
rename to core/modules/pgsql/src/Driver/Database/pgsql/Upsert.php
index 055e06b2da..01bb23146b 100644
--- a/core/lib/Drupal/Core/Database/Driver/pgsql/Upsert.php
+++ b/core/modules/pgsql/src/Driver/Database/pgsql/Upsert.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\pgsql;
+namespace Drupal\pgsql\Driver\Database\pgsql;
 
 use Drupal\Core\Database\Query\Upsert as QueryUpsert;
 
diff --git a/core/modules/sqlite/sqlite.info.yml b/core/modules/sqlite/sqlite.info.yml
new file mode 100644
index 0000000000..a5f55f4e53
--- /dev/null
+++ b/core/modules/sqlite/sqlite.info.yml
@@ -0,0 +1,5 @@
+name: SQLite
+type: module
+description: 'Database driver for SQLite.'
+package: Core
+version: VERSION
diff --git a/core/modules/sqlite/sqlite.module b/core/modules/sqlite/sqlite.module
new file mode 100644
index 0000000000..4cfb9923aa
--- /dev/null
+++ b/core/modules/sqlite/sqlite.module
@@ -0,0 +1,22 @@
+<?php
+
+/**
+ * @file
+ * The SQLite module provides the connection between Drupal and a SQLite database.
+ */
+
+use Drupal\Core\Routing\RouteMatchInterface;
+
+/**
+ * Implements hook_help().
+ */
+function sqlite_help($route_name, RouteMatchInterface $route_match) {
+  switch ($route_name) {
+    case 'help.page.sqlite':
+      $output = '';
+      $output .= '<h3>' . t('About') . '</h3>';
+      $output .= '<p>' . t('The SQLite module provides the connection between Drupal and a SQLite database. For more information, see the <a href=":sqlite">online documentation for the SQLite module</a>.', [':sqlite' => 'https://www.drupal.org/documentation/modules/sqlite']) . '</p>';
+      return $output;
+
+  }
+}
diff --git a/core/lib/Drupal/Core/Database/Driver/sqlite/Connection.php b/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php
similarity index 98%
rename from core/lib/Drupal/Core/Database/Driver/sqlite/Connection.php
rename to core/modules/sqlite/src/Driver/Database/sqlite/Connection.php
index 64957038d2..2a7f76ffa1 100644
--- a/core/lib/Drupal/Core/Database/Driver/sqlite/Connection.php
+++ b/core/modules/sqlite/src/Driver/Database/sqlite/Connection.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\sqlite;
+namespace Drupal\sqlite\Driver\Database\sqlite;
 
 use Drupal\Core\Database\Database;
 use Drupal\Core\Database\DatabaseNotFoundException;
@@ -80,7 +80,7 @@ class Connection extends DatabaseConnection {
   protected $identifierQuotes = ['"', '"'];
 
   /**
-   * Constructs a \Drupal\Core\Database\Driver\sqlite\Connection object.
+   * Constructs a \Drupal\sqlite\Driver\Database\sqlite\Connection object.
    */
   public function __construct(\PDO $connection, array $connection_options) {
     parent::__construct($connection, $connection_options);
@@ -218,7 +218,7 @@ public function __destruct() {
    * @return array
    *   An array of attached database names.
    *
-   * @see \Drupal\Core\Database\Driver\sqlite\Connection::__construct()
+   * @see \Drupal\sqlite\Driver\Database\sqlite\Connection::__construct()
    */
   public function getAttachedDatabases() {
     return $this->attachedDatabases;
@@ -472,6 +472,7 @@ public function getFullQualifiedTableName($table) {
    */
   public static function createConnectionOptionsFromUrl($url, $root) {
     $database = parent::createConnectionOptionsFromUrl($url, $root);
+    $database['module'] = 'sqlite';
 
     // A SQLite database path with two leading slashes indicates a system path.
     // Otherwise the path is relative to the Drupal root.
@@ -504,7 +505,7 @@ public static function createUrlFromConnectionOptions(array $connection_options)
       throw new \InvalidArgumentException("As a minimum, the connection options array must contain at least the 'driver' and 'database' keys");
     }
 
-    $db_url = 'sqlite://localhost/' . $connection_options['database'];
+    $db_url = 'sqlite://localhost/' . $connection_options['database'] . '?module=sqlite';
 
     if (isset($connection_options['prefix']['default']) && $connection_options['prefix']['default'] !== NULL && $connection_options['prefix']['default'] !== '') {
       $db_url .= '#' . $connection_options['prefix']['default'];
diff --git a/core/lib/Drupal/Core/Database/Driver/sqlite/Insert.php b/core/modules/sqlite/src/Driver/Database/sqlite/Insert.php
similarity index 97%
rename from core/lib/Drupal/Core/Database/Driver/sqlite/Insert.php
rename to core/modules/sqlite/src/Driver/Database/sqlite/Insert.php
index 4273dd6536..d1cc245e27 100644
--- a/core/lib/Drupal/Core/Database/Driver/sqlite/Insert.php
+++ b/core/modules/sqlite/src/Driver/Database/sqlite/Insert.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\sqlite;
+namespace Drupal\sqlite\Driver\Database\sqlite;
 
 use Drupal\Core\Database\Query\Insert as QueryInsert;
 
diff --git a/core/lib/Drupal/Core/Database/Driver/sqlite/Install/Tasks.php b/core/modules/sqlite/src/Driver/Database/sqlite/Install/Tasks.php
similarity index 97%
rename from core/lib/Drupal/Core/Database/Driver/sqlite/Install/Tasks.php
rename to core/modules/sqlite/src/Driver/Database/sqlite/Install/Tasks.php
index aecaa6925b..4d262a5ac4 100644
--- a/core/lib/Drupal/Core/Database/Driver/sqlite/Install/Tasks.php
+++ b/core/modules/sqlite/src/Driver/Database/sqlite/Install/Tasks.php
@@ -1,9 +1,9 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\sqlite\Install;
+namespace Drupal\sqlite\Driver\Database\sqlite\Install;
 
 use Drupal\Core\Database\Database;
-use Drupal\Core\Database\Driver\sqlite\Connection;
+use Drupal\sqlite\Driver\Database\sqlite\Connection;
 use Drupal\Core\Database\DatabaseNotFoundException;
 use Drupal\Core\Database\Install\Tasks as InstallTasks;
 
diff --git a/core/lib/Drupal/Core/Database/Driver/sqlite/Schema.php b/core/modules/sqlite/src/Driver/Database/sqlite/Schema.php
similarity index 99%
rename from core/lib/Drupal/Core/Database/Driver/sqlite/Schema.php
rename to core/modules/sqlite/src/Driver/Database/sqlite/Schema.php
index 2c0f98dc03..fff39df00d 100644
--- a/core/lib/Drupal/Core/Database/Driver/sqlite/Schema.php
+++ b/core/modules/sqlite/src/Driver/Database/sqlite/Schema.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\sqlite;
+namespace Drupal\sqlite\Driver\Database\sqlite;
 
 use Drupal\Core\Database\SchemaObjectExistsException;
 use Drupal\Core\Database\SchemaObjectDoesNotExistException;
@@ -562,7 +562,7 @@ public function dropField($table, $field) {
 
     // Drop the primary key if the field to drop is part of it. This is
     // consistent with the behavior on PostgreSQL.
-    // @see \Drupal\Core\Database\Driver\mysql\Schema::dropField()
+    // @see \Drupal\mysql\Driver\Database\mysql\Schema::dropField()
     if (isset($new_schema['primary key']) && in_array($field, $new_schema['primary key'], TRUE)) {
       unset($new_schema['primary key']);
     }
diff --git a/core/lib/Drupal/Core/Database/Driver/sqlite/Select.php b/core/modules/sqlite/src/Driver/Database/sqlite/Select.php
similarity index 86%
rename from core/lib/Drupal/Core/Database/Driver/sqlite/Select.php
rename to core/modules/sqlite/src/Driver/Database/sqlite/Select.php
index 5eaa5157d8..5ee521af8b 100644
--- a/core/lib/Drupal/Core/Database/Driver/sqlite/Select.php
+++ b/core/modules/sqlite/src/Driver/Database/sqlite/Select.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\sqlite;
+namespace Drupal\sqlite\Driver\Database\sqlite;
 
 use Drupal\Core\Database\Query\Select as QuerySelect;
 
diff --git a/core/lib/Drupal/Core/Database/Driver/sqlite/Statement.php b/core/modules/sqlite/src/Driver/Database/sqlite/Statement.php
similarity index 99%
rename from core/lib/Drupal/Core/Database/Driver/sqlite/Statement.php
rename to core/modules/sqlite/src/Driver/Database/sqlite/Statement.php
index d9b422b584..475ea690c7 100644
--- a/core/lib/Drupal/Core/Database/Driver/sqlite/Statement.php
+++ b/core/modules/sqlite/src/Driver/Database/sqlite/Statement.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\sqlite;
+namespace Drupal\sqlite\Driver\Database\sqlite;
 
 use Drupal\Core\Database\StatementPrefetch;
 use Drupal\Core\Database\StatementInterface;
diff --git a/core/lib/Drupal/Core/Database/Driver/sqlite/Truncate.php b/core/modules/sqlite/src/Driver/Database/sqlite/Truncate.php
similarity index 92%
rename from core/lib/Drupal/Core/Database/Driver/sqlite/Truncate.php
rename to core/modules/sqlite/src/Driver/Database/sqlite/Truncate.php
index 386912f878..f1535fb019 100644
--- a/core/lib/Drupal/Core/Database/Driver/sqlite/Truncate.php
+++ b/core/modules/sqlite/src/Driver/Database/sqlite/Truncate.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\sqlite;
+namespace Drupal\sqlite\Driver\Database\sqlite;
 
 use Drupal\Core\Database\Query\Truncate as QueryTruncate;
 
diff --git a/core/lib/Drupal/Core/Database/Driver/sqlite/Upsert.php b/core/modules/sqlite/src/Driver/Database/sqlite/Upsert.php
similarity index 96%
rename from core/lib/Drupal/Core/Database/Driver/sqlite/Upsert.php
rename to core/modules/sqlite/src/Driver/Database/sqlite/Upsert.php
index f97f6c8d8b..5997427253 100644
--- a/core/lib/Drupal/Core/Database/Driver/sqlite/Upsert.php
+++ b/core/modules/sqlite/src/Driver/Database/sqlite/Upsert.php
@@ -1,6 +1,6 @@
 <?php
 
-namespace Drupal\Core\Database\Driver\sqlite;
+namespace Drupal\sqlite\Driver\Database\sqlite;
 
 use Drupal\Core\Database\Query\Upsert as QueryUpsert;
 
diff --git a/core/modules/system/system.install b/core/modules/system/system.install
index 2b1a2a59b3..b4565acb2e 100644
--- a/core/modules/system/system.install
+++ b/core/modules/system/system.install
@@ -1134,11 +1134,23 @@ function system_requirements($phase) {
     if ($provider !== 'core' && !\Drupal::moduleHandler()->moduleExists($provider)) {
       $autoload = $connection->getConnectionOptions()['autoload'] ?? '';
       if (($pos = strpos($autoload, 'src/Driver/Database/')) !== FALSE) {
+        // The default severity level.
+        $severity = REQUIREMENT_ERROR;
+        $post_update_registry = \Drupal::service('update.post_update_registry');
+        $pending_updates = $post_update_registry->getPendingUpdateInformation();
+        if (isset($pending_updates['system']['pending']) && in_array('enable_provider_database_driver', array_keys($pending_updates['system']['pending']), TRUE)) {
+          // Change the severity of the requirement when the post update
+          // function for enabling the module that is providing the current
+          // database driver has not run. Setting the severity to error level
+          // will block the execution of that same post update function.
+          $severity = REQUIREMENT_INFO;
+        }
+
         $requirements['database_driver_provided_by_module'] = [
           'title' => t('Database driver provided by module'),
           'value' => t('Not enabled'),
           'description' => t('The current database driver is provided by the module: %module. The module is currently not enabled. You should immediately <a href=":enable">enable</a> the module.', ['%module' => $provider, ':enable' => Url::fromRoute('system.modules_list')->toString()]),
-          'severity' => REQUIREMENT_ERROR,
+          'severity' => $severity,
         ];
       }
     }
diff --git a/core/modules/system/system.post_update.php b/core/modules/system/system.post_update.php
index 14391c15e9..bf3ec55bfa 100644
--- a/core/modules/system/system.post_update.php
+++ b/core/modules/system/system.post_update.php
@@ -6,6 +6,7 @@
  */
 
 use Drupal\Core\Config\Entity\ConfigEntityUpdater;
+use Drupal\Core\Database\Database;
 use Drupal\Core\Entity\Display\EntityDisplayInterface;
 use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
 use Drupal\Core\Entity\ContentEntityType;
@@ -179,3 +180,17 @@ function system_post_update_delete_rss_settings() {
     ->clear('langcode')
     ->save();
 }
+
+/**
+ * Enabled the module that is providing the current database driver.
+ */
+function system_post_update_enable_provider_database_driver() {
+  $connection = Database::getConnection();
+  $provider = $connection->getProvider();
+  if ($provider !== 'core' && !\Drupal::moduleHandler()->moduleExists($provider)) {
+    $autoload = $connection->getConnectionOptions()['autoload'] ?? '';
+    if (($pos = strpos($autoload, 'src/Driver/Database/')) !== FALSE) {
+      \Drupal::service('module_installer')->install([$provider]);
+    }
+  }
+}
diff --git a/core/modules/system/tests/modules/database_statement_monitoring_test/src/mysql/Connection.php b/core/modules/system/tests/modules/database_statement_monitoring_test/src/mysql/Connection.php
index dc5dab25ac..caa9694009 100644
--- a/core/modules/system/tests/modules/database_statement_monitoring_test/src/mysql/Connection.php
+++ b/core/modules/system/tests/modules/database_statement_monitoring_test/src/mysql/Connection.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\database_statement_monitoring_test\mysql;
 
-use Drupal\Core\Database\Driver\mysql\Connection as BaseConnection;
+use Drupal\mysql\Driver\Database\mysql\Connection as BaseConnection;
 use Drupal\database_statement_monitoring_test\LoggedStatementsTrait;
 
 /**
diff --git a/core/modules/system/tests/modules/database_statement_monitoring_test/src/mysql/Install/Tasks.php b/core/modules/system/tests/modules/database_statement_monitoring_test/src/mysql/Install/Tasks.php
index 443072d474..338e136cd5 100644
--- a/core/modules/system/tests/modules/database_statement_monitoring_test/src/mysql/Install/Tasks.php
+++ b/core/modules/system/tests/modules/database_statement_monitoring_test/src/mysql/Install/Tasks.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\database_statement_monitoring_test\mysql\Install;
 
-use Drupal\Core\Database\Driver\mysql\Install\Tasks as BaseTasks;
+use Drupal\mysql\Driver\Database\mysql\Install\Tasks as BaseTasks;
 
 class Tasks extends BaseTasks {
 }
diff --git a/core/modules/system/tests/modules/database_statement_monitoring_test/src/pgsql/Connection.php b/core/modules/system/tests/modules/database_statement_monitoring_test/src/pgsql/Connection.php
index 86f004e916..43995d325a 100644
--- a/core/modules/system/tests/modules/database_statement_monitoring_test/src/pgsql/Connection.php
+++ b/core/modules/system/tests/modules/database_statement_monitoring_test/src/pgsql/Connection.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\database_statement_monitoring_test\pgsql;
 
-use Drupal\Core\Database\Driver\pgsql\Connection as BaseConnection;
+use Drupal\pgsql\Driver\Database\pgsql\Connection as BaseConnection;
 use Drupal\database_statement_monitoring_test\LoggedStatementsTrait;
 
 /**
diff --git a/core/modules/system/tests/modules/database_statement_monitoring_test/src/pgsql/Install/Tasks.php b/core/modules/system/tests/modules/database_statement_monitoring_test/src/pgsql/Install/Tasks.php
index c51bb2541a..0b95ddf53d 100644
--- a/core/modules/system/tests/modules/database_statement_monitoring_test/src/pgsql/Install/Tasks.php
+++ b/core/modules/system/tests/modules/database_statement_monitoring_test/src/pgsql/Install/Tasks.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\database_statement_monitoring_test\pgsql\Install;
 
-use Drupal\Core\Database\Driver\pgsql\Install\Tasks as BaseTasks;
+use Drupal\pgsql\Driver\Database\pgsql\Install\Tasks as BaseTasks;
 
 class Tasks extends BaseTasks {
 }
diff --git a/core/modules/system/tests/modules/database_statement_monitoring_test/src/sqlite/Connection.php b/core/modules/system/tests/modules/database_statement_monitoring_test/src/sqlite/Connection.php
index fea32d6798..2b4201a976 100644
--- a/core/modules/system/tests/modules/database_statement_monitoring_test/src/sqlite/Connection.php
+++ b/core/modules/system/tests/modules/database_statement_monitoring_test/src/sqlite/Connection.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\database_statement_monitoring_test\sqlite;
 
-use Drupal\Core\Database\Driver\sqlite\Connection as BaseConnection;
+use Drupal\sqlite\Driver\Database\sqlite\Connection as BaseConnection;
 use Drupal\database_statement_monitoring_test\LoggedStatementsTrait;
 
 /**
diff --git a/core/modules/system/tests/modules/database_statement_monitoring_test/src/sqlite/Install/Tasks.php b/core/modules/system/tests/modules/database_statement_monitoring_test/src/sqlite/Install/Tasks.php
index 41d5962fef..4827f8c18b 100644
--- a/core/modules/system/tests/modules/database_statement_monitoring_test/src/sqlite/Install/Tasks.php
+++ b/core/modules/system/tests/modules/database_statement_monitoring_test/src/sqlite/Install/Tasks.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\database_statement_monitoring_test\sqlite\Install;
 
-use Drupal\Core\Database\Driver\sqlite\Install\Tasks as BaseTasks;
+use Drupal\sqlite\Driver\Database\sqlite\Install\Tasks as BaseTasks;
 
 class Tasks extends BaseTasks {
 }
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Connection.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Connection.php
index 9138084acf..b53677fee4 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Connection.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Connection.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
 
-use Drupal\Core\Database\Driver\mysql\Connection as CoreConnection;
+include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Connection.php';
+
+use Drupal\mysql\Driver\Database\mysql\Connection as CoreConnection;
 
 /**
  * MySQL test implementation of \Drupal\Core\Database\Connection.
@@ -16,4 +18,13 @@ public function driver() {
     return 'DrivertestMysql';
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public static function createConnectionOptionsFromUrl($url, $root) {
+    $database = parent::createConnectionOptionsFromUrl($url, $root);
+    $database['module'] = 'driver_test';
+    return $database;
+  }
+
 }
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Insert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Insert.php
index a9545d77c0..8c15b608fe 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Insert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Insert.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
 
-use Drupal\Core\Database\Driver\mysql\Insert as CoreInsert;
+include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Insert.php';
+
+use Drupal\mysql\Driver\Database\mysql\Insert as CoreInsert;
 
 /**
  * MySQL test implementation of \Drupal\Core\Database\Query\Insert.
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Install/Tasks.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Install/Tasks.php
index 5c10c2c6be..2b20ba147f 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Install/Tasks.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Install/Tasks.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysql\Install;
 
-use Drupal\Core\Database\Driver\mysql\Install\Tasks as CoreTasks;
+include_once dirname(__DIR__, 9) . '/mysql/src/Driver/Database/mysql/Install/Tasks.php';
+
+use Drupal\mysql\Driver\Database\mysql\Install\Tasks as CoreTasks;
 
 /**
  * Specifies installation tasks for MySQL test databases.
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Schema.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Schema.php
index 69277a1391..b3a2dc01fe 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Schema.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Schema.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
 
-use Drupal\Core\Database\Driver\mysql\Schema as CoreSchema;
+include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Schema.php';
+
+use Drupal\mysql\Driver\Database\mysql\Schema as CoreSchema;
 
 /**
  * MySQL test implementation of \Drupal\Core\Database\Schema.
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Upsert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Upsert.php
index 8b4bb48258..dd2d71af8c 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Upsert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Upsert.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
 
-use Drupal\Core\Database\Driver\mysql\Upsert as CoreUpsert;
+include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Upsert.php';
+
+use Drupal\mysql\Driver\Database\mysql\Upsert as CoreUpsert;
 
 /**
  * MySQL test implementation of \Drupal\Core\Database\Query\Upsert.
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Connection.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Connection.php
index c7ec0fed72..2c1a9684bd 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Connection.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Connection.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
 
-use Drupal\Core\Database\Driver\mysql\Connection as CoreConnection;
+include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Connection.php';
+
+use Drupal\mysql\Driver\Database\mysql\Connection as CoreConnection;
 
 /**
  * MySQL test implementation of \Drupal\Core\Database\Connection.
@@ -46,4 +48,13 @@ protected function getServerVersion(): string {
     return $this->databaseVersion;
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public static function createConnectionOptionsFromUrl($url, $root) {
+    $database = parent::createConnectionOptionsFromUrl($url, $root);
+    $database['module'] = 'driver_test';
+    return $database;
+  }
+
 }
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Insert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Insert.php
index 86affc1a34..f1a54e3cac 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Insert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Insert.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
 
-use Drupal\Core\Database\Driver\mysql\Insert as CoreInsert;
+include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Insert.php';
+
+use Drupal\mysql\Driver\Database\mysql\Insert as CoreInsert;
 
 /**
  * MySQL test implementation of \Drupal\Core\Database\Query\Insert.
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Install/Tasks.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Install/Tasks.php
index c768de5721..647268c7b8 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Install/Tasks.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Install/Tasks.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion\Install;
 
-use Drupal\Core\Database\Driver\mysql\Install\Tasks as CoreTasks;
+include_once dirname(__DIR__, 9) . '/mysql/src/Driver/Database/mysql/Install/Tasks.php';
+
+use Drupal\mysql\Driver\Database\mysql\Install\Tasks as CoreTasks;
 
 /**
  * Specifies installation tasks for MySQL test databases.
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Schema.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Schema.php
index fef11ed4de..4e73921584 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Schema.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Schema.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
 
-use Drupal\Core\Database\Driver\mysql\Schema as CoreSchema;
+include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Schema.php';
+
+use Drupal\mysql\Driver\Database\mysql\Schema as CoreSchema;
 
 /**
  * MySQL test implementation of \Drupal\Core\Database\Schema.
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Upsert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Upsert.php
index 78ee82d34d..2513c7357b 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Upsert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Upsert.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
 
-use Drupal\Core\Database\Driver\mysql\Upsert as CoreUpsert;
+include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Upsert.php';
+
+use Drupal\mysql\Driver\Database\mysql\Upsert as CoreUpsert;
 
 /**
  * MySQL test implementation of \Drupal\Core\Database\Query\Upsert.
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Connection.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Connection.php
index 87dcf7dd4a..39e2dfea96 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Connection.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Connection.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-use Drupal\Core\Database\Driver\pgsql\Connection as CoreConnection;
+include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Connection.php';
+
+use Drupal\pgsql\Driver\Database\pgsql\Connection as CoreConnection;
 
 /**
  * PostgreSQL implementation of \Drupal\Core\Database\Connection.
@@ -16,4 +18,13 @@ public function driver() {
     return 'DrivertestPgsql';
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public static function createConnectionOptionsFromUrl($url, $root) {
+    $database = parent::createConnectionOptionsFromUrl($url, $root);
+    $database['module'] = 'driver_test';
+    return $database;
+  }
+
 }
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Delete.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Delete.php
index 5340c8afb0..92081533cb 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Delete.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Delete.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-use Drupal\Core\Database\Driver\pgsql\Delete as CoreDelete;
+include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Delete.php';
+
+use Drupal\pgsql\Driver\Database\pgsql\Delete as CoreDelete;
 
 /**
  * PostgreSQL implementation of \Drupal\Core\Database\Query\Delete.
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Insert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Insert.php
index a2f6f0791a..957373ffc3 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Insert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Insert.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-use Drupal\Core\Database\Driver\pgsql\Insert as CoreInsert;
+include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Insert.php';
+
+use Drupal\pgsql\Driver\Database\pgsql\Insert as CoreInsert;
 
 /**
  * PostgreSQL implementation of \Drupal\Core\Database\Query\Insert.
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Install/Tasks.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Install/Tasks.php
index 55705d832a..a8c096438f 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Install/Tasks.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Install/Tasks.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql\Install;
 
-use Drupal\Core\Database\Driver\pgsql\Install\Tasks as CoreTasks;
+include_once dirname(__DIR__, 9) . '/pgsql/src/Driver/Database/pgsql/Install/Tasks.php';
+
+use Drupal\pgsql\Driver\Database\pgsql\Install\Tasks as CoreTasks;
 
 /**
  * Specifies installation tasks for PostgreSQL databases.
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Schema.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Schema.php
index 8cfa969126..df0c45c222 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Schema.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Schema.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-use Drupal\Core\Database\Driver\pgsql\Schema as CoreSchema;
+include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Schema.php';
+
+use Drupal\pgsql\Driver\Database\pgsql\Schema as CoreSchema;
 
 /**
  * PostgreSQL implementation of \Drupal\Core\Database\Schema.
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Select.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Select.php
index f0faf65ca6..b11fbefe11 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Select.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Select.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-use Drupal\Core\Database\Driver\pgsql\Select as CoreSelect;
+include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Select.php';
+
+use Drupal\pgsql\Driver\Database\pgsql\Select as CoreSelect;
 
 /**
  * PostgreSQL implementation of \Drupal\Core\Database\Query\Select.
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Truncate.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Truncate.php
index c1b4322d5b..61b58711ff 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Truncate.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Truncate.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-use Drupal\Core\Database\Driver\pgsql\Truncate as CoreTruncate;
+include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Truncate.php';
+
+use Drupal\pgsql\Driver\Database\pgsql\Truncate as CoreTruncate;
 
 /**
  * PostgreSQL implementation of \Drupal\Core\Database\Query\Truncate.
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Update.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Update.php
index d5ed1ed5f0..e30ace4bc8 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Update.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Update.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-use Drupal\Core\Database\Driver\pgsql\Update as CoreUpdate;
+include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Update.php';
+
+use Drupal\pgsql\Driver\Database\pgsql\Update as CoreUpdate;
 
 /**
  * PostgreSQL implementation of \Drupal\Core\Database\Query\Update.
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Upsert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Upsert.php
index 2237a755cf..b36b039bf9 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Upsert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Upsert.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-use Drupal\Core\Database\Driver\pgsql\Upsert as CoreUpsert;
+include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Upsert.php';
+
+use Drupal\pgsql\Driver\Database\pgsql\Upsert as CoreUpsert;
 
 /**
  * PostgreSQL implementation of \Drupal\Core\Database\Query\Upsert.
diff --git a/core/modules/system/tests/src/Functional/Update/UpdateEnableProviderDatabaseDriverTest.php b/core/modules/system/tests/src/Functional/Update/UpdateEnableProviderDatabaseDriverTest.php
new file mode 100644
index 0000000000..849148fd68
--- /dev/null
+++ b/core/modules/system/tests/src/Functional/Update/UpdateEnableProviderDatabaseDriverTest.php
@@ -0,0 +1,49 @@
+<?php
+
+namespace Drupal\Tests\system\Functional\Update;
+
+use Drupal\Core\Database\Database;
+use Drupal\FunctionalTests\Update\UpdatePathTestBase;
+
+/**
+ * Tests that update hooks are enabling the database driver providing module.
+ *
+ * @group Update
+ */
+class UpdateEnableProviderDatabaseDriverTest extends UpdatePathTestBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $defaultTheme = 'stark';
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setDatabaseDumpFiles() {
+    $this->databaseDumpFiles = [
+      __DIR__ . '/../../../fixtures/update/drupal-8.8.0.bare.standard.php.gz',
+    ];
+  }
+
+  /**
+   * Tests that post update hooks are properly run.
+   */
+  public function testPostUpdateEnableProviderDatabaseDriverHook() {
+    $connection = Database::getConnection();
+    $provider = $connection->getProvider();
+    $driver = $connection->driver();
+    if (!in_array($driver, ['mysql', 'pgsql', 'sqlite'])) {
+      $this->markTestSkipped("This test does not support the {$driver} database driver.");
+    }
+
+    $this->assertFalse(\Drupal::moduleHandler()->moduleExists($provider));
+
+    // Running the updates enables the module that is providing the database
+    // driver.
+    $this->runUpdates();
+
+    $this->assertTrue(\Drupal::moduleHandler()->moduleExists($provider));
+  }
+
+}
diff --git a/core/modules/system/tests/src/Kernel/Extension/ModuleHandlerTest.php b/core/modules/system/tests/src/Kernel/Extension/ModuleHandlerTest.php
index 115ba80215..799686ba9d 100644
--- a/core/modules/system/tests/src/Kernel/Extension/ModuleHandlerTest.php
+++ b/core/modules/system/tests/src/Kernel/Extension/ModuleHandlerTest.php
@@ -3,6 +3,7 @@
 namespace Drupal\Tests\system\Kernel\Extension;
 
 use Drupal\Component\Render\FormattableMarkup;
+use Drupal\Core\Database\Database;
 use Drupal\Core\Extension\MissingDependencyException;
 use Drupal\Core\Extension\ModuleUninstallValidatorException;
 use Drupal\entity_test\Entity\EntityTest;
@@ -24,7 +25,8 @@ class ModuleHandlerTest extends KernelTestBase {
    * The basic functionality of retrieving enabled modules.
    */
   public function testModuleList() {
-    $module_list = ['system'];
+    $database_module = Database::getConnection()->getProvider();
+    $module_list = [$database_module, 'system'];
 
     $this->assertModuleList($module_list, 'Initial');
 
diff --git a/core/modules/system/tests/src/Kernel/Scripts/DbImportCommandTest.php b/core/modules/system/tests/src/Kernel/Scripts/DbImportCommandTest.php
index c56095b08f..d4a81cd7c8 100644
--- a/core/modules/system/tests/src/Kernel/Scripts/DbImportCommandTest.php
+++ b/core/modules/system/tests/src/Kernel/Scripts/DbImportCommandTest.php
@@ -62,6 +62,8 @@ class DbImportCommandTest extends KernelTestBase {
   public function testDbImportCommand() {
     $connection_info = [
       'driver' => 'sqlite',
+      'module' => 'sqlite',
+      'namespace' => 'Drupal\\sqlite\\Driver\\Database\\sqlite',
       'database' => ':memory:',
     ];
     Database::addConnectionInfo($this->databasePrefix, 'default', $connection_info);
diff --git a/core/modules/views/src/Plugin/views/argument/StringArgument.php b/core/modules/views/src/Plugin/views/argument/StringArgument.php
index be47b69592..ef85b80e63 100644
--- a/core/modules/views/src/Plugin/views/argument/StringArgument.php
+++ b/core/modules/views/src/Plugin/views/argument/StringArgument.php
@@ -178,7 +178,7 @@ public function getFormula() {
     if ($this->options['case'] != 'none') {
       // Support case-insensitive substring comparisons for SQLite by using the
       // 'NOCASE_UTF8' collation.
-      // @see Drupal\Core\Database\Driver\sqlite\Connection::open()
+      // @see Drupal\sqlite\Driver\Database\sqlite\Connection::open()
       if (Database::getConnection()->databaseType() == 'sqlite') {
         $formula .= ' COLLATE NOCASE_UTF8';
       }
diff --git a/core/modules/views/src/Plugin/views/query/SqliteDateSql.php b/core/modules/views/src/Plugin/views/query/SqliteDateSql.php
index d6006ac71f..5ee488689c 100644
--- a/core/modules/views/src/Plugin/views/query/SqliteDateSql.php
+++ b/core/modules/views/src/Plugin/views/query/SqliteDateSql.php
@@ -97,7 +97,7 @@ public function getDateFormat($field, $format) {
     // case the comparison value is a float, integer, or numeric. All of the
     // above SQLite format tokens only produce integers. However, the given
     // $format may contain 'Y-m-d', which results in a string.
-    // @see \Drupal\Core\Database\Driver\sqlite\Connection::expandArguments()
+    // @see \Drupal\sqlite\Driver\Database\sqlite\Connection::expandArguments()
     // @see http://www.sqlite.org/lang_datefunc.html
     // @see http://www.sqlite.org/lang_expr.html#castexpr
     if (preg_match('/^(?:%\w)+$/', $format)) {
diff --git a/core/scripts/run-tests.sh b/core/scripts/run-tests.sh
index dfafe4be63..ee5bf27755 100755
--- a/core/scripts/run-tests.sh
+++ b/core/scripts/run-tests.sh
@@ -643,6 +643,8 @@ function simpletest_script_setup_database($new = FALSE) {
     }
     $databases['test-runner']['default'] = [
       'driver' => 'sqlite',
+      'module' => 'sqlite',
+      'namespace' => 'Drupal\\sqlite\\Driver\\Database\\sqlite',
       'database' => $sqlite,
       'prefix' => [
         'default' => '',
diff --git a/core/tests/Drupal/BuildTests/Framework/Tests/HtRouterTest.php b/core/tests/Drupal/BuildTests/Framework/Tests/HtRouterTest.php
index c96a0f1947..721766587f 100644
--- a/core/tests/Drupal/BuildTests/Framework/Tests/HtRouterTest.php
+++ b/core/tests/Drupal/BuildTests/Framework/Tests/HtRouterTest.php
@@ -3,7 +3,7 @@
 namespace Drupal\BuildTests\Framework\Tests;
 
 use Drupal\BuildTests\QuickStart\QuickStartTestBase;
-use Drupal\Core\Database\Driver\sqlite\Install\Tasks;
+use Drupal\sqlite\Driver\Database\sqlite\Install\Tasks;
 
 /**
  * @coversDefaultClass \Drupal\BuildTests\Framework\BuildTestBase
diff --git a/core/tests/Drupal/FunctionalTests/ExistingDrupal8StyleDatabaseConnectionInSettingsPhpTest.php b/core/tests/Drupal/FunctionalTests/ExistingDrupal8StyleDatabaseConnectionInSettingsPhpTest.php
new file mode 100644
index 0000000000..4a7b91b315
--- /dev/null
+++ b/core/tests/Drupal/FunctionalTests/ExistingDrupal8StyleDatabaseConnectionInSettingsPhpTest.php
@@ -0,0 +1,55 @@
+<?php
+
+namespace Drupal\FunctionalTests;
+
+use Drupal\Core\Database\Database;
+use Drupal\Tests\BrowserTestBase;
+
+/**
+ * @group Database
+ */
+class ExistingDrupal8StyleDatabaseConnectionInSettingsPhpTest extends BrowserTestBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $defaultTheme = 'stark';
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp(): void {
+    parent::setUp();
+
+    $filename = $this->siteDirectory . '/settings.php';
+    chmod($filename, 0777);
+    $contents = file_get_contents($filename);
+
+    $driver = Database::getConnection()->driver();
+    $autoload = "'autoload' => 'core/modules/$driver/src/Driver/Database/$driver/',";
+    $contents = str_replace($autoload, '', $contents);
+    $namespace_search = "'namespace' => 'Drupal\\\\$driver\\\\Driver\\\\Database\\\\$driver',";
+    $namespace_replace = "'namespace' => 'Drupal\\\\Core\\\\Database\\\\Driver\\\\$driver',";
+    $contents = str_replace($namespace_search, $namespace_replace, $contents);
+    file_put_contents($filename, $contents);
+  }
+
+  /**
+   * Confirms that the site works with Drupal 8 style database connection array.
+   */
+  public function testExistingDrupal8StyleDatabaseConnectionInSettingsPhp() {
+    $this->drupalLogin($this->drupalCreateUser());
+    $this->assertSession()->addressEquals('user/2');
+    $this->assertSession()->statusCodeEquals(200);
+
+    // Make sure that we are have tested with the Drupal 8 style database
+    // connection array.
+    $filename = $this->siteDirectory . '/settings.php';
+    $contents = file_get_contents($filename);
+    $driver = Database::getConnection()->driver();
+    $this->assertStringContainsString("'namespace' => 'Drupal\\\\Core\\\\Database\\\\Driver\\\\$driver',", $contents);
+    $this->assertStringContainsString("'driver' => '$driver',", $contents);
+    $this->assertStringNotContainsString("'autoload' => 'core/modules/$driver/src/Driver/Database/$driver/", $contents);
+  }
+
+}
diff --git a/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingConfigTestBase.php b/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingConfigTestBase.php
index c724747770..9208954b9c 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingConfigTestBase.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingConfigTestBase.php
@@ -4,6 +4,7 @@
 
 use Drupal\Component\Serialization\Yaml;
 use Drupal\Core\Archiver\ArchiveTar;
+use Drupal\Core\Database\Database;
 use Drupal\Core\Installer\Form\SelectProfileForm;
 
 /**
@@ -69,6 +70,15 @@ protected function prepareEnvironment() {
       }
       $archiver->extractList($files, $config_sync_directory);
     }
+
+    // Add the module that is providing the database driver to the list of
+    // modules that can not be uninstalled in the core.extension configuration.
+    if (file_exists($config_sync_directory . '/core.extension.yml')) {
+      $core_extension = Yaml::decode(file_get_contents($config_sync_directory . '/core.extension.yml'));
+      $module = Database::getConnection()->getProvider();
+      $core_extension['module'][$module] = 0;
+      file_put_contents($config_sync_directory . '/core.extension.yml', Yaml::encode($core_extension));
+    }
   }
 
   /**
@@ -105,9 +115,11 @@ public function testConfigSync() {
     $change_list = $this->configImporter()->getStorageComparer()->getChangelist();
     $expected = [
       'create' => [],
+      // The core.extension is changed configuration because the module that is
+      // providing the database driver can not be uninstalled.
       // The system.mail is changed configuration because the test system
       // changes it to ensure that mails are not sent.
-      'update' => ['system.mail'],
+      'update' => ['core.extension', 'system.mail'],
       'delete' => [],
       'rename' => [],
     ];
diff --git a/core/tests/Drupal/FunctionalTests/Installer/InstallerTest.php b/core/tests/Drupal/FunctionalTests/Installer/InstallerTest.php
index f1e7587d2e..5040cf04d8 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/InstallerTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/InstallerTest.php
@@ -2,8 +2,11 @@
 
 namespace Drupal\FunctionalTests\Installer;
 
+use Drupal\Core\Database\Database;
+use Drupal\Core\Extension\Extension;
 use Drupal\Core\Routing\RoutingEvents;
 use Drupal\Core\Test\PerformanceTestRecorder;
+use Drupal\Core\Extension\ModuleUninstallValidatorException;
 
 /**
  * Tests the interactive installer.
@@ -120,4 +123,32 @@ protected function visitInstaller() {
     $this->assertSession()->titleEquals('Choose language | Drupal');
   }
 
+  /**
+   * Confirms that the installation succeeded.
+   */
+  public function testInstalled() {
+    $this->assertSession()->addressEquals('user/1');
+    $this->assertSession()->statusCodeEquals(200);
+
+    $database = Database::getConnection();
+    $module = $database->getProvider();
+    $module_handler = \Drupal::service('module_handler');
+
+    // Assert that the module that is providing the database driver has been
+    // installed.
+    $expected_extension = new Extension($this->root, 'module', "core/modules/$module/$module.info.yml", "$module.module");
+    $this->assertEquals($expected_extension, $module_handler->getModule($module));
+
+    // The module that is providing the database driver should be uninstallable.
+    try {
+      $this->container->get('module_installer')->uninstall([$module]);
+      $this->fail("Uninstalled $module module.");
+    }
+    catch (ModuleUninstallValidatorException $e) {
+      $module_name = $module_handler->getName($module);
+      $driver = $database->driver();
+      $this->assertStringContainsString("The module '$module_name' is providing the database driver '$driver'.", $e->getMessage());
+    }
+  }
+
 }
diff --git a/core/tests/Drupal/FunctionalTests/Installer/InstallerTestBase.php b/core/tests/Drupal/FunctionalTests/Installer/InstallerTestBase.php
index a925fc468f..23c54ab81b 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/InstallerTestBase.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/InstallerTestBase.php
@@ -239,8 +239,22 @@ protected function setUpProfile() {
    * Installer step: Configure settings.
    */
   protected function setUpSettings() {
-    $edit = $this->translatePostValues($this->parameters['forms']['install_settings_form']);
-    $this->submitForm($edit, $this->translations['Save and continue']);
+    $form_values_to_submit = $this->translatePostValues($this->parameters['forms']['install_settings_form']);
+
+    // Ensure that the fields to be edited actually exist on the form.
+    $assert_session = $this->assertSession();
+    $form_values = [];
+    foreach ($form_values_to_submit as $name => $value) {
+      try {
+        $field = $assert_session->fieldExists($name);
+        $form_values[$name] = $value;
+      }
+      catch (ElementNotFoundException $e) {
+        continue;
+      }
+    }
+
+    $this->submitForm($form_values, $this->translations['Save and continue']);
   }
 
   /**
diff --git a/core/tests/Drupal/KernelTests/Core/Asset/ResolvedLibraryDefinitionsFilesMatchTest.php b/core/tests/Drupal/KernelTests/Core/Asset/ResolvedLibraryDefinitionsFilesMatchTest.php
index 00fde59aa9..bde911d119 100644
--- a/core/tests/Drupal/KernelTests/Core/Asset/ResolvedLibraryDefinitionsFilesMatchTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Asset/ResolvedLibraryDefinitionsFilesMatchTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\KernelTests\Core\Asset;
 
+use Drupal\Core\Database\Database;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -125,6 +126,7 @@ protected function setUp(): void {
     $this->allModules[] = 'system';
     $this->allModules[] = 'user';
     $this->allModules[] = 'path_alias';
+    $this->allModules[] = Database::getConnection()->getProvider();
     sort($this->allModules);
     $this->container->get('module_installer')->install($this->allModules);
 
diff --git a/core/tests/Drupal/KernelTests/Core/Common/DrupalFlushAllCachesTest.php b/core/tests/Drupal/KernelTests/Core/Common/DrupalFlushAllCachesTest.php
index 0953c05a4c..2029abcc28 100644
--- a/core/tests/Drupal/KernelTests/Core/Common/DrupalFlushAllCachesTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Common/DrupalFlushAllCachesTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\KernelTests\Core\Common;
 
+use Drupal\Core\Database\Database;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -23,10 +24,11 @@ public function testDrupalFlushAllCachesModuleList() {
     $module = $core_extension->get('module');
     $module['system_test'] = -10;
     $core_extension->set('module', module_config_sort($module))->save();
+    $database_module = Database::getConnection()->getProvider();
 
     drupal_flush_all_caches();
 
-    $this->assertSame(['system_test', 'system'], array_keys($this->container->getParameter('container.modules')));
+    $this->assertSame(['system_test', $database_module, 'system'], array_keys($this->container->getParameter('container.modules')));
   }
 
 }
diff --git a/core/tests/Drupal/KernelTests/Core/Database/NextIdTest.php b/core/tests/Drupal/KernelTests/Core/Database/NextIdTest.php
index d7ff7874d9..620c730ea6 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/NextIdTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/NextIdTest.php
@@ -43,7 +43,7 @@ public function testDbNextId() {
   /**
    * Tests that sequences table clear up works when a connection is closed.
    *
-   * @see \Drupal\Core\Database\Driver\mysql\Connection::__destruct()
+   * @see \Drupal\mysql\Driver\Database\mysql\Connection::__destruct()
    */
   public function testDbNextIdClosedConnection() {
     // Only run this test for the 'mysql' driver.
@@ -67,7 +67,7 @@ public function testDbNextIdClosedConnection() {
     // Close the connection.
     Database::closeConnection('next_id');
 
-    // Test that \Drupal\Core\Database\Driver\mysql\Connection::__destruct()
+    // Test that \Drupal\mysql\Driver\Database\mysql\Connection::__destruct()
     // successfully trims the sequences table if the connection is closed.
     $count = $this->connection->select('sequences')->countQuery()->execute()->fetchField();
     $this->assertEquals(1, $count);
diff --git a/core/tests/Drupal/KernelTests/Core/Database/PrefixInfoTest.php b/core/tests/Drupal/KernelTests/Core/Database/PrefixInfoTest.php
index efa0c53ed8..2afec6de82 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/PrefixInfoTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/PrefixInfoTest.php
@@ -15,7 +15,7 @@ class PrefixInfoTest extends DatabaseTestBase {
    * Tests that DatabaseSchema::getPrefixInfo() returns the right database.
    *
    * We are testing if the return array of the method
-   * \Drupal\Core\Database\Driver\mysql\Schema::getPrefixInfo(). This return
+   * \Drupal\mysql\Driver\Database\mysql\Schema::getPrefixInfo(). This return
    * array is a keyed array with info about amongst other things the database.
    * The other two by Drupal core supported databases do not have this variable
    * set in the return array.
diff --git a/core/tests/Drupal/KernelTests/Core/Database/QueryTest.php b/core/tests/Drupal/KernelTests/Core/Database/QueryTest.php
index a51a2dd5a4..97106bed43 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/QueryTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/QueryTest.php
@@ -138,7 +138,7 @@ public function testConditionOperatorArgumentsSQLInjection() {
   /**
    * Tests numeric query parameter expansion in expressions.
    *
-   * @see \Drupal\Core\Database\Driver\sqlite\Statement::getStatement()
+   * @see \Drupal\sqlite\Driver\Database\sqlite\Statement::getStatement()
    * @see http://bugs.php.net/bug.php?id=45259
    */
   public function testNumericExpressionSubstitution() {
diff --git a/core/tests/Drupal/KernelTests/Core/Database/SchemaTest.php b/core/tests/Drupal/KernelTests/Core/Database/SchemaTest.php
index 78ab1b38a1..e4e460d29b 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/SchemaTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/SchemaTest.php
@@ -276,9 +276,9 @@ public function testSchema() {
   }
 
   /**
-   * @covers \Drupal\Core\Database\Driver\mysql\Schema::introspectIndexSchema
-   * @covers \Drupal\Core\Database\Driver\pgsql\Schema::introspectIndexSchema
-   * @covers \Drupal\Core\Database\Driver\sqlite\Schema::introspectIndexSchema
+   * @covers \Drupal\mysql\Driver\Database\mysql\Schema::introspectIndexSchema
+   * @covers \Drupal\pgsql\Driver\Database\pgsql\Schema::introspectIndexSchema
+   * @covers \Drupal\sqlite\Driver\Database\sqlite\Schema::introspectIndexSchema
    */
   public function testIntrospectIndexSchema() {
     $table_specification = [
@@ -355,7 +355,7 @@ public function testIntrospectIndexSchema() {
   /**
    * Tests that indexes on string fields are limited to 191 characters on MySQL.
    *
-   * @see \Drupal\Core\Database\Driver\mysql\Schema::getNormalizedIndexes()
+   * @see \Drupal\mysql\Driver\Database\mysql\Schema::getNormalizedIndexes()
    */
   public function testIndexLength() {
     if ($this->connection->databaseType() !== 'mysql') {
diff --git a/core/tests/Drupal/KernelTests/Core/Database/SelectComplexTest.php b/core/tests/Drupal/KernelTests/Core/Database/SelectComplexTest.php
index 65396fe68d..ec88107ecd 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/SelectComplexTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/SelectComplexTest.php
@@ -238,7 +238,7 @@ public function testCountQueryRemovals() {
     // Check that the ordering clause is handled properly.
     $orderby = $query->getOrderBy();
     // The orderby string is different for PostgreSQL.
-    // @see Drupal\Core\Database\Driver\pgsql\Select::orderBy()
+    // @see Drupal\pgsql\Driver\Database\pgsql\Select::orderBy()
     $db_type = Database::getConnection()->databaseType();
     $this->assertEqual($db_type == 'pgsql' ? 'ASC NULLS FIRST' : 'ASC', $orderby['name'], 'Query correctly sets ordering clause.');
     $orderby = $count->getOrderBy();
diff --git a/core/tests/Drupal/KernelTests/Core/Database/TransactionTest.php b/core/tests/Drupal/KernelTests/Core/Database/TransactionTest.php
index 95421a138d..dc5336c91e 100644
--- a/core/tests/Drupal/KernelTests/Core/Database/TransactionTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Database/TransactionTest.php
@@ -263,7 +263,7 @@ public function testTransactionWithDdlStatement() {
       try {
         // Rollback the outer transaction.
         $transaction->rollBack();
-        // @see \Drupal\Core\Database\Driver\mysql\Connection::rollBack()
+        // @see \Drupal\mysql\Driver\Database\mysql\Connection::rollBack()
         if (PHP_VERSION_ID >= 80000) {
           $this->fail('Rolling back a transaction containing DDL should produce a warning.');
         }
diff --git a/core/tests/Drupal/KernelTests/Core/Theme/Stable9LibraryOverrideTest.php b/core/tests/Drupal/KernelTests/Core/Theme/Stable9LibraryOverrideTest.php
index 073e0f41dc..fcff365c05 100644
--- a/core/tests/Drupal/KernelTests/Core/Theme/Stable9LibraryOverrideTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Theme/Stable9LibraryOverrideTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\KernelTests\Core\Theme;
 
+use Drupal\Core\Database\Database;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -73,6 +74,7 @@ protected function setUp(): void {
     $this->allModules[] = 'system';
     $this->allModules[] = 'user';
     $this->allModules[] = 'path_alias';
+    $this->allModules[] = Database::getConnection()->getProvider();
     sort($this->allModules);
     $this->container->get('module_installer')->install($this->allModules);
 
diff --git a/core/tests/Drupal/KernelTests/Core/Theme/StableLibraryOverrideTest.php b/core/tests/Drupal/KernelTests/Core/Theme/StableLibraryOverrideTest.php
index e291cbe44f..6b6803837e 100644
--- a/core/tests/Drupal/KernelTests/Core/Theme/StableLibraryOverrideTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Theme/StableLibraryOverrideTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\KernelTests\Core\Theme;
 
+use Drupal\Core\Database\Database;
 use Drupal\KernelTests\KernelTestBase;
 
 /**
@@ -73,6 +74,7 @@ protected function setUp(): void {
     $this->allModules[] = 'system';
     $this->allModules[] = 'user';
     $this->allModules[] = 'path_alias';
+    $this->allModules[] = Database::getConnection()->getProvider();
     sort($this->allModules);
     $this->container->get('module_installer')->install($this->allModules);
 
diff --git a/core/tests/Drupal/KernelTests/KernelTestBaseTest.php b/core/tests/Drupal/KernelTests/KernelTestBaseTest.php
index 4613296b58..5995816ce6 100644
--- a/core/tests/Drupal/KernelTests/KernelTestBaseTest.php
+++ b/core/tests/Drupal/KernelTests/KernelTestBaseTest.php
@@ -380,4 +380,14 @@ public function testKernelTestBaseInstallSchema() {
     $this->assertFalse(Database::getConnection()->schema()->tableExists('key_value'));
   }
 
+  /**
+   * @covers ::bootEnvironment
+   */
+  public function testDatabaseDriverModuleEnabled() {
+    $module = Database::getConnection()->getProvider();
+
+    // Test that the module that is providing the database driver is enabled.
+    $this->assertSame(1, \Drupal::service('extension.list.module')->get($module)->status);
+  }
+
 }
diff --git a/core/tests/Drupal/TestSite/Commands/TestSiteTearDownCommand.php b/core/tests/Drupal/TestSite/Commands/TestSiteTearDownCommand.php
index 7a5ed59072..4167229bb8 100644
--- a/core/tests/Drupal/TestSite/Commands/TestSiteTearDownCommand.php
+++ b/core/tests/Drupal/TestSite/Commands/TestSiteTearDownCommand.php
@@ -80,6 +80,7 @@ protected function execute(InputInterface $input, OutputInterface $output) {
   protected function tearDown(TestDatabase $test_database, $db_url): void {
     // Connect to the test database.
     $root = dirname(__DIR__, 5);
+    require_once $root . '/core/includes/bootstrap.inc';
     $database = Database::convertDbUrlToConnectionInfo($db_url, $root);
     $database['prefix'] = ['default' => $test_database->getDatabasePrefix()];
     Database::addConnectionInfo(__CLASS__, 'default', $database);
diff --git a/core/tests/Drupal/Tests/Core/Command/QuickStartTest.php b/core/tests/Drupal/Tests/Core/Command/QuickStartTest.php
index ecd2a1a636..9da1c86b54 100644
--- a/core/tests/Drupal/Tests/Core/Command/QuickStartTest.php
+++ b/core/tests/Drupal/Tests/Core/Command/QuickStartTest.php
@@ -2,7 +2,7 @@
 
 namespace Drupal\Tests\Core\Command;
 
-use Drupal\Core\Database\Driver\sqlite\Install\Tasks;
+use Drupal\sqlite\Driver\Database\sqlite\Install\Tasks;
 use Drupal\Core\Test\TestDatabase;
 use Drupal\Tests\BrowserTestBase;
 use GuzzleHttp\Client;
diff --git a/core/tests/Drupal/Tests/Core/Database/DatabaseTest.php b/core/tests/Drupal/Tests/Core/Database/DatabaseTest.php
index 7c7dcd2575..1eb469399f 100644
--- a/core/tests/Drupal/Tests/Core/Database/DatabaseTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/DatabaseTest.php
@@ -70,7 +70,7 @@ public function testFindDriverAutoloadDirectory($expected, $namespace) {
    */
   public function providerFindDriverAutoloadDirectory() {
     return [
-      'core mysql' => [FALSE, 'Drupal\Core\Database\Driver\mysql'],
+      'core mysql' => ['core/modules/mysql/src/Driver/Database/mysql/', 'Drupal\mysql\Driver\Database\mysql'],
       'D8 custom fake' => [FALSE, 'Drupal\Driver\Database\corefake'],
       'module mysql' => ['core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/', 'Drupal\driver_test\Driver\Database\DrivertestMysql'],
     ];
diff --git a/core/tests/Drupal/Tests/Core/Database/Driver/mysql/ConnectionTest.php b/core/tests/Drupal/Tests/Core/Database/Driver/mysql/ConnectionTest.php
index 0b13da66f1..78d57d1578 100644
--- a/core/tests/Drupal/Tests/Core/Database/Driver/mysql/ConnectionTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/Driver/mysql/ConnectionTest.php
@@ -2,13 +2,13 @@
 
 namespace Drupal\Tests\Core\Database\Driver\mysql;
 
-use Drupal\Core\Database\Driver\mysql\Connection;
+use Drupal\mysql\Driver\Database\mysql\Connection;
 use Drupal\Tests\UnitTestCase;
 
 /**
  * Tests MySQL database connections.
  *
- * @coversDefaultClass \Drupal\Core\Database\Driver\mysql\Connection
+ * @coversDefaultClass \Drupal\mysql\Driver\Database\mysql\Connection
  * @group Database
  */
 class ConnectionTest extends UnitTestCase {
@@ -38,7 +38,7 @@ public function setUp(): void {
   /**
    * Creates a Connection object for testing.
    *
-   * @return \Drupal\Core\Database\Driver\mysql\Connection
+   * @return \Drupal\mysql\Driver\Database\mysql\Connection
    */
   private function createConnection(): Connection {
     /** @var \PDO $pdo_connection */
diff --git a/core/tests/Drupal/Tests/Core/Database/Driver/mysql/install/TasksTest.php b/core/tests/Drupal/Tests/Core/Database/Driver/mysql/install/TasksTest.php
index ab64e21a4e..b26a3ee779 100644
--- a/core/tests/Drupal/Tests/Core/Database/Driver/mysql/install/TasksTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/Driver/mysql/install/TasksTest.php
@@ -2,14 +2,14 @@
 
 namespace Drupal\Tests\Core\Database\Driver\mysql\install;
 
-use Drupal\Core\Database\Driver\mysql\Connection;
-use Drupal\Core\Database\Driver\mysql\Install\Tasks;
+use Drupal\mysql\Driver\Database\mysql\Connection;
+use Drupal\mysql\Driver\Database\mysql\Install\Tasks;
 use Drupal\Tests\UnitTestCase;
 
 /**
  * Tests the MySQL install tasks.
  *
- * @coversDefaultClass \Drupal\Core\Database\Driver\mysql\Install\Tasks
+ * @coversDefaultClass \Drupal\mysql\Driver\Database\mysql\Install\Tasks
  * @group Database
  */
 class TasksTest extends UnitTestCase {
@@ -17,7 +17,7 @@ class TasksTest extends UnitTestCase {
   /**
    * A connection object prophecy.
    *
-   * @var \Drupal\Core\Database\Driver\mysql\Connection|\Prophecy\Prophecy\ObjectProphecy
+   * @var \Drupal\mysql\Driver\Database\mysql\Connection|\Prophecy\Prophecy\ObjectProphecy
    */
   private $connection;
 
@@ -31,10 +31,10 @@ public function setUp(): void {
   /**
    * Creates a Tasks object for testing.
    *
-   * @return \Drupal\Core\Database\Driver\mysql\Install\Tasks
+   * @return \Drupal\mysql\Driver\Database\mysql\Install\Tasks
    */
   private function createTasks(): Tasks {
-    /** @var \Drupal\Core\Database\Driver\mysql\Connection $connection */
+    /** @var \Drupal\mysql\Driver\Database\mysql\Connection $connection */
     $connection = $this->connection->reveal();
 
     return new class($connection) extends Tasks {
@@ -63,7 +63,7 @@ protected function t($string, array $args = [], array $options = []) {
   /**
    * Creates a Tasks object for testing, without connection.
    *
-   * @return \Drupal\Core\Database\Driver\mysql\Install\Tasks
+   * @return \Drupal\mysql\Driver\Database\mysql\Install\Tasks
    */
   private function createTasksNoConnection(): Tasks {
     return new class() extends Tasks {
diff --git a/core/tests/Drupal/Tests/Core/Database/Driver/pgsql/PostgresqlSchemaTest.php b/core/tests/Drupal/Tests/Core/Database/Driver/pgsql/PostgresqlSchemaTest.php
index 48c835da08..4218ab7a41 100644
--- a/core/tests/Drupal/Tests/Core/Database/Driver/pgsql/PostgresqlSchemaTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/Driver/pgsql/PostgresqlSchemaTest.php
@@ -2,13 +2,13 @@
 
 namespace Drupal\Tests\Core\Database\Driver\pgsql;
 
-use Drupal\Core\Database\Driver\pgsql\Schema;
+use Drupal\pgsql\Driver\Database\pgsql\Schema;
 use Drupal\Tests\UnitTestCase;
 
 // cSpell:ignore conname
 
 /**
- * @coversDefaultClass \Drupal\Core\Database\Driver\pgsql\Schema
+ * @coversDefaultClass \Drupal\pgsql\Driver\Database\pgsql\Schema
  * @group Database
  */
 class PostgresqlSchemaTest extends UnitTestCase {
@@ -16,7 +16,7 @@ class PostgresqlSchemaTest extends UnitTestCase {
   /**
    * The PostgreSql DB connection.
    *
-   * @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\Core\Database\Driver\pgsql\Connection
+   * @var \PHPUnit\Framework\MockObject\MockObject|\Drupal\pgsql\Driver\Database\pgsql\Connection
    */
   protected $connection;
 
@@ -26,7 +26,7 @@ class PostgresqlSchemaTest extends UnitTestCase {
   protected function setUp(): void {
     parent::setUp();
 
-    $this->connection = $this->getMockBuilder('\Drupal\Core\Database\Driver\pgsql\Connection')
+    $this->connection = $this->getMockBuilder('\Drupal\pgsql\Driver\Database\pgsql\Connection')
       ->disableOriginalConstructor()
       ->getMock();
   }
diff --git a/core/tests/Drupal/Tests/Core/Database/Driver/sqlite/ConnectionTest.php b/core/tests/Drupal/Tests/Core/Database/Driver/sqlite/ConnectionTest.php
index 3d872ceb77..3e52d6aecc 100644
--- a/core/tests/Drupal/Tests/Core/Database/Driver/sqlite/ConnectionTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/Driver/sqlite/ConnectionTest.php
@@ -2,12 +2,12 @@
 
 namespace Drupal\Tests\Core\Database\Driver\sqlite;
 
-use Drupal\Core\Database\Driver\sqlite\Connection;
+use Drupal\sqlite\Driver\Database\sqlite\Connection;
 use Drupal\Tests\Core\Database\Stub\StubPDO;
 use Drupal\Tests\UnitTestCase;
 
 /**
- * @coversDefaultClass \Drupal\Core\Database\Driver\sqlite\Connection
+ * @coversDefaultClass \Drupal\sqlite\Driver\Database\sqlite\Connection
  * @group Database
  */
 class ConnectionTest extends UnitTestCase {
diff --git a/core/tests/Drupal/Tests/Core/Database/InstallerObjectTest.php b/core/tests/Drupal/Tests/Core/Database/InstallerObjectTest.php
index 15f823a688..278ace0bec 100644
--- a/core/tests/Drupal/Tests/Core/Database/InstallerObjectTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/InstallerObjectTest.php
@@ -3,7 +3,7 @@
 namespace Drupal\Tests\Core\Database;
 
 use Composer\Autoload\ClassLoader;
-use Drupal\Core\Database\Driver\mysql\Install\Tasks as MysqlInstallTasks;
+use Drupal\mysql\Driver\Database\mysql\Install\Tasks as MysqlInstallTasks;
 use Drupal\Driver\Database\fake\Install\Tasks as FakeInstallTasks;
 use Drupal\Driver\Database\corefake\Install\Tasks as CustomCoreFakeInstallTasks;
 use Drupal\driver_test\Driver\Database\DrivertestMysql\Install\Tasks as DriverTestMysqlInstallTasks;
@@ -58,7 +58,7 @@ public function testDbInstallerObject($driver, $namespace, $expected_class_name)
   public function providerDbInstallerObject() {
     return [
       // A driver only in the core namespace.
-      ['mysql', NULL, MysqlInstallTasks::class],
+      ['mysql', "Drupal\\mysql\\Driver\\Database\\mysql", MysqlInstallTasks::class],
 
       // A driver only in the custom namespace.
       ['fake', "Drupal\\Driver\\Database\\fake", FakeInstallTasks::class],
diff --git a/core/tests/Drupal/Tests/Core/Database/UrlConversionTest.php b/core/tests/Drupal/Tests/Core/Database/UrlConversionTest.php
index 59d9b0f902..c5fc027308 100644
--- a/core/tests/Drupal/Tests/Core/Database/UrlConversionTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/UrlConversionTest.php
@@ -48,8 +48,8 @@ protected function setUp(): void {
    *
    * @dataProvider providerConvertDbUrlToConnectionInfo
    */
-  public function testDbUrlToConnectionConversion($root, $url, $database_array) {
-    $result = Database::convertDbUrlToConnectionInfo($url, $root ?: $this->root);
+  public function testDbUrlToConnectionConversion($url, $database_array) {
+    $result = Database::convertDbUrlToConnectionInfo($url, $this->root);
     $this->assertEquals($database_array, $result);
   }
 
@@ -58,40 +58,42 @@ public function testDbUrlToConnectionConversion($root, $url, $database_array) {
    *
    * @return array
    *   Array of arrays with the following elements:
-   *   - root: The baseroot string, only used with sqlite drivers.
    *   - url: The full URL string to be tested.
    *   - database_array: An array containing the expected results.
    */
   public function providerConvertDbUrlToConnectionInfo() {
+    $root = dirname(__FILE__, 7);
     return [
       'MySql without prefix' => [
-        '',
         'mysql://test_user:test_pass@test_host:3306/test_database',
         [
           'driver' => 'mysql',
+          'module' => 'mysql',
           'username' => 'test_user',
           'password' => 'test_pass',
           'host' => 'test_host',
           'database' => 'test_database',
           'port' => 3306,
-          'namespace' => 'Drupal\Core\Database\Driver\mysql',
+          'namespace' => 'Drupal\mysql\Driver\Database\mysql',
+          'autoload' => 'core/modules/mysql/src/Driver/Database/mysql/',
         ],
       ],
       'SQLite, relative to root, without prefix' => [
-        '/var/www/d8',
         'sqlite://localhost/test_database',
         [
           'driver' => 'sqlite',
+          'module' => 'sqlite',
           'host' => 'localhost',
-          'database' => '/var/www/d8/test_database',
-          'namespace' => 'Drupal\Core\Database\Driver\sqlite',
+          'database' => $root . '/test_database',
+          'namespace' => 'Drupal\sqlite\Driver\Database\sqlite',
+          'autoload' => 'core/modules/sqlite/src/Driver/Database/sqlite/',
         ],
       ],
       'MySql with prefix' => [
-        '',
         'mysql://test_user:test_pass@test_host:3306/test_database#bar',
         [
           'driver' => 'mysql',
+          'module' => 'mysql',
           'username' => 'test_user',
           'password' => 'test_pass',
           'host' => 'test_host',
@@ -100,37 +102,40 @@ public function providerConvertDbUrlToConnectionInfo() {
             'default' => 'bar',
           ],
           'port' => 3306,
-          'namespace' => 'Drupal\Core\Database\Driver\mysql',
+          'namespace' => 'Drupal\mysql\Driver\Database\mysql',
+          'autoload' => 'core/modules/mysql/src/Driver/Database/mysql/',
         ],
       ],
       'SQLite, relative to root, with prefix' => [
-        '/var/www/d8',
         'sqlite://localhost/test_database#foo',
         [
           'driver' => 'sqlite',
+          'module' => 'sqlite',
           'host' => 'localhost',
-          'database' => '/var/www/d8/test_database',
+          'database' => $root . '/test_database',
           'prefix' => [
             'default' => 'foo',
           ],
-          'namespace' => 'Drupal\Core\Database\Driver\sqlite',
+          'namespace' => 'Drupal\sqlite\Driver\Database\sqlite',
+          'autoload' => 'core/modules/sqlite/src/Driver/Database/sqlite/',
         ],
       ],
       'SQLite, absolute path, without prefix' => [
-        '/var/www/d8',
         'sqlite://localhost//baz/test_database',
         [
           'driver' => 'sqlite',
+          'module' => 'sqlite',
           'host' => 'localhost',
           'database' => '/baz/test_database',
-          'namespace' => 'Drupal\Core\Database\Driver\sqlite',
+          'namespace' => 'Drupal\sqlite\Driver\Database\sqlite',
+          'autoload' => 'core/modules/sqlite/src/Driver/Database/sqlite/',
         ],
       ],
       'MySQL contrib test driver without prefix' => [
-        '',
         'DrivertestMysql://test_user:test_pass@test_host:3306/test_database?module=driver_test',
         [
           'driver' => 'DrivertestMysql',
+          'module' => 'driver_test',
           'username' => 'test_user',
           'password' => 'test_pass',
           'host' => 'test_host',
@@ -141,10 +146,10 @@ public function providerConvertDbUrlToConnectionInfo() {
         ],
       ],
       'MySQL contrib test driver with prefix' => [
-        '',
         'DrivertestMysql://test_user:test_pass@test_host:3306/test_database?module=driver_test#bar',
         [
           'driver' => 'DrivertestMysql',
+          'module' => 'driver_test',
           'username' => 'test_user',
           'password' => 'test_pass',
           'host' => 'test_host',
@@ -158,10 +163,10 @@ public function providerConvertDbUrlToConnectionInfo() {
         ],
       ],
       'PostgreSQL contrib test driver without prefix' => [
-        '',
         'DrivertestPgsql://test_user:test_pass@test_host:5432/test_database?module=driver_test',
         [
           'driver' => 'DrivertestPgsql',
+          'module' => 'driver_test',
           'username' => 'test_user',
           'password' => 'test_pass',
           'host' => 'test_host',
@@ -172,10 +177,10 @@ public function providerConvertDbUrlToConnectionInfo() {
         ],
       ],
       'PostgreSQL contrib test driver with prefix' => [
-        '',
         'DrivertestPgsql://test_user:test_pass@test_host:5432/test_database?module=driver_test#bar',
         [
           'driver' => 'DrivertestPgsql',
+          'module' => 'driver_test',
           'username' => 'test_user',
           'password' => 'test_pass',
           'host' => 'test_host',
@@ -189,16 +194,68 @@ public function providerConvertDbUrlToConnectionInfo() {
         ],
       ],
       'MySql with a custom query parameter' => [
-        '',
         'mysql://test_user:test_pass@test_host:3306/test_database?extra=value',
         [
           'driver' => 'mysql',
+          'module' => 'mysql',
           'username' => 'test_user',
           'password' => 'test_pass',
           'host' => 'test_host',
           'database' => 'test_database',
           'port' => 3306,
-          'namespace' => 'Drupal\Core\Database\Driver\mysql',
+          'namespace' => 'Drupal\mysql\Driver\Database\mysql',
+          'autoload' => 'core/modules/mysql/src/Driver/Database/mysql/',
+        ],
+      ],
+      'MySql with the module name mysql' => [
+        'mysql://test_user:test_pass@test_host:3306/test_database?module=mysql',
+        [
+          'driver' => 'mysql',
+          'module' => 'mysql',
+          'username' => 'test_user',
+          'password' => 'test_pass',
+          'host' => 'test_host',
+          'database' => 'test_database',
+          'port' => 3306,
+          'namespace' => 'Drupal\mysql\Driver\Database\mysql',
+          'autoload' => 'core/modules/mysql/src/Driver/Database/mysql/',
+        ],
+      ],
+      'PostgreSql without the module name set' => [
+        'pgsql://test_user:test_pass@test_host/test_database',
+        [
+          'driver' => 'pgsql',
+          'module' => 'pgsql',
+          'username' => 'test_user',
+          'password' => 'test_pass',
+          'host' => 'test_host',
+          'database' => 'test_database',
+          'namespace' => 'Drupal\pgsql\Driver\Database\pgsql',
+          'autoload' => 'core/modules/pgsql/src/Driver/Database/pgsql/',
+        ],
+      ],
+      'PostgreSql with the module name pgsql' => [
+        'pgsql://test_user:test_pass@test_host/test_database?module=pgsql',
+        [
+          'driver' => 'pgsql',
+          'module' => 'pgsql',
+          'username' => 'test_user',
+          'password' => 'test_pass',
+          'host' => 'test_host',
+          'database' => 'test_database',
+          'namespace' => 'Drupal\pgsql\Driver\Database\pgsql',
+          'autoload' => 'core/modules/pgsql/src/Driver/Database/pgsql/',
+        ],
+      ],
+      'SQLite, relative to root, without prefix and with the module name sqlite' => [
+        'sqlite://localhost/test_database?module=sqlite',
+        [
+          'driver' => 'sqlite',
+          'module' => 'sqlite',
+          'host' => 'localhost',
+          'database' => $root . '/test_database',
+          'namespace' => 'Drupal\sqlite\Driver\Database\sqlite',
+          'autoload' => 'core/modules/sqlite/src/Driver/Database/sqlite/',
         ],
       ],
     ];
@@ -265,8 +322,10 @@ public function providerGetConnectionInfoAsUrl() {
       'host' => 'test_host',
       'port' => '3306',
       'driver' => 'mysql',
+      'module' => 'mysql',
+      'namespace' => 'Drupal\\mysql\\Driver\\Database\\mysql',
     ];
-    $expected_url1 = 'mysql://test_user:test_pass@test_host:3306/test_database';
+    $expected_url1 = 'mysql://test_user:test_pass@test_host:3306/test_database?module=mysql';
 
     $info2 = [
       'database' => 'test_database',
@@ -276,21 +335,27 @@ public function providerGetConnectionInfoAsUrl() {
       'host' => 'test_host',
       'port' => '3306',
       'driver' => 'mysql',
+      'module' => 'mysql',
+      'namespace' => 'Drupal\\mysql\\Driver\\Database\\mysql',
     ];
-    $expected_url2 = 'mysql://test_user:test_pass@test_host:3306/test_database#pre';
+    $expected_url2 = 'mysql://test_user:test_pass@test_host:3306/test_database?module=mysql#pre';
 
     $info3 = [
       'database' => 'test_database',
       'driver' => 'sqlite',
+      'module' => 'sqlite',
+      'namespace' => 'Drupal\\sqlite\\Driver\\Database\\sqlite',
     ];
-    $expected_url3 = 'sqlite://localhost/test_database';
+    $expected_url3 = 'sqlite://localhost/test_database?module=sqlite';
 
     $info4 = [
       'database' => 'test_database',
       'driver' => 'sqlite',
       'prefix' => 'pre',
+      'module' => 'sqlite',
+      'namespace' => 'Drupal\\sqlite\\Driver\\Database\\sqlite',
     ];
-    $expected_url4 = 'sqlite://localhost/test_database#pre';
+    $expected_url4 = 'sqlite://localhost/test_database?module=sqlite#pre';
 
     $info5 = [
       'database' => 'test_database',
@@ -390,7 +455,7 @@ public function providerInvalidArgumentGetConnectionInfoAsUrl() {
         [
           'driver' => 'sqlite',
           'host' => 'localhost',
-          'namespace' => 'Drupal\Core\Database\Driver\sqlite',
+          'namespace' => 'Drupal\sqlite\Driver\Database\sqlite',
         ],
         "As a minimum, the connection options array must contain at least the 'driver' and 'database' keys",
       ],
diff --git a/core/tests/Drupal/Tests/Core/DependencyInjection/Compiler/BackendCompilerPassTest.php b/core/tests/Drupal/Tests/Core/DependencyInjection/Compiler/BackendCompilerPassTest.php
index 7ca410f120..22d8870737 100644
--- a/core/tests/Drupal/Tests/Core/DependencyInjection/Compiler/BackendCompilerPassTest.php
+++ b/core/tests/Drupal/Tests/Core/DependencyInjection/Compiler/BackendCompilerPassTest.php
@@ -123,7 +123,7 @@ protected function getSqliteContainer($service) {
     $container = new ContainerBuilder();
     $container->setDefinition('service', $service);
     $container->setDefinition('sqlite.service', new Definition(__NAMESPACE__ . '\\ServiceClassSqlite'));
-    $mock = $this->getMockBuilder('Drupal\Core\Database\Driver\sqlite\Connection')->setMethods(NULL)->disableOriginalConstructor()->getMock();
+    $mock = $this->getMockBuilder('Drupal\sqlite\Driver\Database\sqlite\Connection')->setMethods(NULL)->disableOriginalConstructor()->getMock();
     $container->set('database', $mock);
     return $container;
   }
diff --git a/core/tests/Drupal/Tests/Core/Test/TestSetupTraitTest.php b/core/tests/Drupal/Tests/Core/Test/TestSetupTraitTest.php
index d0b8283566..d8d4d760bb 100644
--- a/core/tests/Drupal/Tests/Core/Test/TestSetupTraitTest.php
+++ b/core/tests/Drupal/Tests/Core/Test/TestSetupTraitTest.php
@@ -25,8 +25,10 @@ class TestSetupTraitTest extends UnitTestCase {
    * @covers ::changeDatabasePrefix
    */
   public function testChangeDatabasePrefix() {
+    $root = dirname(__FILE__, 7);
+    require_once $root . '/core/includes/bootstrap.inc';
     putenv('SIMPLETEST_DB=pgsql://user:pass@127.0.0.1/db');
-    $connection_info = Database::convertDbUrlToConnectionInfo('mysql://user:pass@localhost/db', '');
+    $connection_info = Database::convertDbUrlToConnectionInfo('mysql://user:pass@localhost/db', $root);
     Database::addConnectionInfo('default', 'default', $connection_info);
     $this->assertEquals('mysql', Database::getConnectionInfo()['default']['driver']);
     $this->assertEquals('localhost', Database::getConnectionInfo()['default']['host']);
@@ -35,7 +37,7 @@ public function testChangeDatabasePrefix() {
     // used to avoid unnecessary set up.
     $test_setup = $this->getMockForTrait(TestSetupTrait::class);
     $test_setup->databasePrefix = 'testDbPrefix';
-    $test_setup->root = '';
+    $test_setup->root = $root;
 
     $method = new \ReflectionMethod(get_class($test_setup), 'changeDatabasePrefix');
     $method->setAccessible(TRUE);
diff --git a/core/tests/Drupal/Tests/Scripts/TestSiteApplicationTest.php b/core/tests/Drupal/Tests/Scripts/TestSiteApplicationTest.php
index 5b70e5f4ba..5650e38f1a 100644
--- a/core/tests/Drupal/Tests/Scripts/TestSiteApplicationTest.php
+++ b/core/tests/Drupal/Tests/Scripts/TestSiteApplicationTest.php
@@ -43,6 +43,7 @@ protected function setUp(): void {
     $php_executable_finder = new PhpExecutableFinder();
     $this->php = $php_executable_finder->find();
     $this->root = dirname(substr(__DIR__, 0, -strlen(__NAMESPACE__)), 2);
+    require_once $this->root . '/core/includes/bootstrap.inc';
   }
 
   /**
diff --git a/sites/default/default.settings.php b/sites/default/default.settings.php
index 0bb18b0da8..ab253b6c24 100644
--- a/sites/default/default.settings.php
+++ b/sites/default/default.settings.php
@@ -203,9 +203,9 @@
  * information on these defaults and the potential issues.
  *
  * More details can be found in the constructor methods for each driver:
- * - \Drupal\Core\Database\Driver\mysql\Connection::__construct()
- * - \Drupal\Core\Database\Driver\pgsql\Connection::__construct()
- * - \Drupal\Core\Database\Driver\sqlite\Connection::__construct()
+ * - \Drupal\mysql\Driver\Database\mysql\Connection::__construct()
+ * - \Drupal\pgsql\Driver\Database\pgsql\Connection::__construct()
+ * - \Drupal\sqlite\Driver\Database\sqlite\Connection::__construct()
  *
  * Sample Database configuration format for PostgreSQL (pgsql):
  * @code
