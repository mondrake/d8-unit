diff --git a/core/modules/system/src/Plugin/ImageToolkit/GDToolkit.php b/core/modules/system/src/Plugin/ImageToolkit/GDToolkit.php
index 2d5e1678ac..b07876d8aa 100644
--- a/core/modules/system/src/Plugin/ImageToolkit/GDToolkit.php
+++ b/core/modules/system/src/Plugin/ImageToolkit/GDToolkit.php
@@ -28,7 +28,7 @@ class GDToolkit extends ImageToolkitBase {
   /**
    * A GD image resource.
    *
-   * @var resource|null
+   * @var resource|\GdImage|null
    */
   protected $resource = NULL;
 
@@ -100,7 +100,9 @@ public function __construct(array $configuration, $plugin_id, array $plugin_defi
    * Frees memory associated with a GD image resource.
    */
   public function __destruct() {
-    if (is_resource($this->resource)) {
+    // Since PHP 8 and the introduction of \GdImage, imagedestroy is no longer
+    // needed.
+    if (!($this->resource instanceof \GdImage) && is_resource($this->resource)) {
       imagedestroy($this->resource);
     }
   }
@@ -124,15 +126,17 @@ public static function create(ContainerInterface $container, array $configuratio
   /**
    * Sets the GD image resource.
    *
-   * @param resource $resource
+   * @param resource|\GdImage $resource
    *   The GD image resource.
    *
    * @return $this
    *   An instance of the current toolkit object.
    */
   public function setResource($resource) {
-    if (!is_resource($resource) || get_resource_type($resource) != 'gd') {
-      throw new \InvalidArgumentException('Invalid resource argument');
+    if (!($resource instanceof \GdImage)) {
+      if (!is_resource($resource) || get_resource_type($resource) != 'gd') {
+        throw new \InvalidArgumentException('Invalid resource argument');
+      }
     }
     $this->preLoadInfo = NULL;
     $this->resource = $resource;
@@ -142,11 +146,11 @@ public function setResource($resource) {
   /**
    * Retrieves the GD image resource.
    *
-   * @return resource|null
+   * @return resource|\GdImage|null
    *   The GD image resource, or NULL if not available.
    */
   public function getResource() {
-    if (!is_resource($this->resource)) {
+    if (!(is_resource($this->resource) || $this->resource instanceof \GdImage)) {
       $this->load();
     }
     return $this->resource;
diff --git a/core/tests/Drupal/KernelTests/Core/Image/ToolkitGdTest.php b/core/tests/Drupal/KernelTests/Core/Image/ToolkitGdTest.php
index cbc62397b5..6afb4fb882 100644
--- a/core/tests/Drupal/KernelTests/Core/Image/ToolkitGdTest.php
+++ b/core/tests/Drupal/KernelTests/Core/Image/ToolkitGdTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\KernelTests\Core\Image;
 
+use Drupal\Component\Utility\Bytes;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Image\ImageInterface;
 use Drupal\Component\Render\FormattableMarkup;
@@ -427,31 +428,58 @@ public function testManipulations() {
   }
 
   /**
-   * Tests that GD resources are freed from memory.
+   * Tests that GD images are freed from memory.
    */
-  public function testResourceDestruction() {
-    // Test that an Image object going out of scope releases its GD resource.
-    $image = $this->imageFactory->get('core/tests/fixtures/files/image-test.png');
+  public function testImageDestruction() {
+    // Build and save to disk a large image.
+    $directory = Settings::get('file_public_path') . '/imagetest';
+    \Drupal::service('file_system')->prepareDirectory($directory, FileSystemInterface::CREATE_DIRECTORY);
+    $test_image_path = $directory . '/' . 'large-image.png';
+    $image = $this->imageFactory->get('core/tests/fixtures/files/image-1.png');
+    $image->apply('resize', ['width' => 7200, 'height' => 4800]);
+    $image->save($test_image_path);
+    $image = NULL;
+
+    // Test that an Image object going out of scope releases its memory
+    // occupation.
+    $preload_memory_usage = memory_get_usage(TRUE);
+    $image = $this->imageFactory->get($test_image_path);
     $res = $image->getToolkit()->getResource();
-    $this->assertIsResource($res);
+    $postload_memory_usage = memory_get_usage(TRUE);
+    $this->assertGreaterThan($preload_memory_usage + Bytes::toInt('100 MB'), $postload_memory_usage);
+    if (PHP_VERSION_ID < 80000) {
+      $this->assertIsResource($res);
+    }
     $image = NULL;
-    // @todo In https://www.drupal.org/node/3133236 convert this to
-    //   $this->assertIsNotResource($res).
-    $this->assertFalse(is_resource($res), 'Image resource was destroyed after losing scope.');
+    $postdestroy_memory_usage = memory_get_usage(TRUE);
+    $this->assertLessThan($preload_memory_usage + Bytes::toInt('1 MB'), $postdestroy_memory_usage);
+    if (PHP_VERSION_ID < 80000) {
+      // @todo In https://www.drupal.org/node/3133236 convert this to
+      //   $this->assertIsNotResource($res).
+      $this->assertFalse(is_resource($res), 'Image resource was destroyed after losing scope.');
+    }
 
-    // Test that 'create_new' operation does not leave orphaned GD resources.
-    $image = $this->imageFactory->get('core/tests/fixtures/files/image-test.png');
+    // Test that 'create_new' operation does not leave orphaned memory
+    // allocation.
+    $image = $this->imageFactory->get($test_image_path);
     $old_res = $image->getToolkit()->getResource();
-    // Check if resource has been created successfully.
-    $this->assertIsResource($old_res);
+    $postload_memory_usage = memory_get_usage(TRUE);
+    if (PHP_VERSION_ID < 80000) {
+      // Check if resource has been created successfully.
+      $this->assertIsResource($old_res);
+    }
     $image->createNew(20, 20);
     $new_res = $image->getToolkit()->getResource();
-    // Check if the original resource has been destroyed.
-    // @todo In https://www.drupal.org/node/3133236 convert this to
-    //   $this->assertIsNotResource($old_res).
-    $this->assertFalse(is_resource($old_res));
-    // Check if a new resource has been created successfully.
-    $this->assertIsResource($new_res);
+    $postcreatenew_memory_usage = memory_get_usage(TRUE);
+    $this->assertLessThan($postload_memory_usage - Bytes::toInt('100 MB'), $postcreatenew_memory_usage);
+    if (PHP_VERSION_ID < 80000) {
+      // Check if the original resource has been destroyed.
+      // @todo In https://www.drupal.org/node/3133236 convert this to
+      //   $this->assertIsNotResource($old_res).
+      $this->assertFalse(is_resource($old_res));
+      // Check if a new resource has been created successfully.
+      $this->assertIsResource($new_res);
+    }
   }
 
   /**
