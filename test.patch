diff --git a/core/modules/content_translation/tests/src/Functional/ContentTranslationLinkTagTest.php b/core/modules/content_translation/tests/src/Functional/ContentTranslationLinkTagTest.php
index e617bcbc..59ed97c1 100644
--- a/core/modules/content_translation/tests/src/Functional/ContentTranslationLinkTagTest.php
+++ b/core/modules/content_translation/tests/src/Functional/ContentTranslationLinkTagTest.php
@@ -117,9 +117,9 @@ function ($langcode) use ($url_base, $languageManager) {
       $this->drupalGet($url);
       foreach ($urls as $langcode_alternate => $url_alternate) {
         $args = [':href' => $url_alternate->toString(), ':hreflang' => $langcode_alternate];
-        $links = $this->xpath('head/link[@rel = "alternate" and @href = :href and @hreflang = :hreflang]', $args);
-        $message = sprintf('The "%s" translation has the correct alternate hreflang link for "%s": %s.', $langcode, $langcode_alternate, $url->toString());
-        $this->assertTrue(isset($links[0]), $message);
+        // Verify that the translation has the correct alternate hreflang link.
+        $links = $this->assertSession()->buildXPathQuery('head/link[@rel = "alternate" and @href = :href and @hreflang = :hreflang]', $args);
+        $this->assertSession()->elementExists('xpath', $links);
       }
     }
 
@@ -139,8 +139,8 @@ function ($langcode) use ($url_base, $languageManager) {
           ':href' => $frontpage_path,
           ':hreflang' => $language->getId(),
         ];
-        $links = $this->xpath('head/link[@rel = "alternate" and @href = :href and @hreflang = :hreflang]', $args);
-        $this->assertArrayHasKey(0, $links);
+        $links = $this->assertSession()->buildXPathQuery('head/link[@rel = "alternate" and @href = :href and @hreflang = :hreflang]', $args);
+        $this->assertSession()->elementExists('xpath', $links);
       }
     }
   }
@@ -162,8 +162,8 @@ public function testCanonicalAlternateTagsMissing() {
     $this->drupalGet($entity->toUrl('edit-form'));
 
     $this->assertSession()->statusCodeEquals(200);
-    $result = $this->xpath('//link[@rel="alternate" and @hreflang]');
-    $this->assertEmpty($result, 'No alternate link tag found.');
+    // No alternate link tag should be found.
+    $this->assertSession()->elementNotExists('xpath', '//link[@rel="alternate" and @hreflang]');
   }
 
 }
diff --git a/core/modules/content_translation/tests/src/Functional/ContentTranslationSettingsTest.php b/core/modules/content_translation/tests/src/Functional/ContentTranslationSettingsTest.php
index 3ee7c289..a5b81338 100644
--- a/core/modules/content_translation/tests/src/Functional/ContentTranslationSettingsTest.php
+++ b/core/modules/content_translation/tests/src/Functional/ContentTranslationSettingsTest.php
@@ -98,8 +98,8 @@ public function testSettingsUI() {
       'settings[comment][comment_article][fields][uid]' => FALSE,
     ];
     $this->assertSettings('comment', 'comment_article', FALSE, $edit);
-    $xpath_err = '//div[contains(@class, "error")]';
-    $this->assertNotEmpty($this->xpath($xpath_err), 'Enabling translation only for entity bundles generates a form error.');
+    // Enabling translation only for entity bundles generates a form error.
+    $this->assertSession()->elementExists('xpath', '//div[contains(@class, "error")]');
 
     // Test that the translation settings are not stored if a non-configurable
     // language is set as default and the language selector is hidden.
@@ -111,7 +111,9 @@ public function testSettingsUI() {
       'settings[comment][comment_article][fields][comment_body]' => TRUE,
     ];
     $this->assertSettings('comment', 'comment_article', FALSE, $edit);
-    $this->assertNotEmpty($this->xpath($xpath_err), 'Enabling translation with a fixed non-configurable language generates a form error.');
+    // Enabling translation with a fixed non-configurable language generates a
+    // form error.
+    $this->assertSession()->elementExists('xpath', '//div[contains(@class, "error")]');
 
     // Test that a field shared among different bundles can be enabled without
     // needing to make all the related bundles translatable.
diff --git a/core/modules/content_translation/tests/src/Functional/ContentTranslationSyncImageTest.php b/core/modules/content_translation/tests/src/Functional/ContentTranslationSyncImageTest.php
index 14c72d3e..593b1bf6 100644
--- a/core/modules/content_translation/tests/src/Functional/ContentTranslationSyncImageTest.php
+++ b/core/modules/content_translation/tests/src/Functional/ContentTranslationSyncImageTest.php
@@ -122,8 +122,7 @@ public function testImageFieldSync() {
       'settings[entity_test_mul][entity_test_mul][columns][field_test_et_ui_image][title]' => TRUE,
     ];
     $this->drupalPostForm('admin/config/regional/content-language', $edit, t('Save configuration'));
-    $errors = $this->xpath('//div[contains(@class, "messages--error")]');
-    $this->assertEmpty($errors, 'Settings correctly stored.');
+    $this->assertSession()->elementNotExists('xpath', '//div[contains(@class, "messages--error")]');
     $this->assertSession()->checkboxChecked('edit-settings-entity-test-mul-entity-test-mul-columns-field-test-et-ui-image-alt');
     $this->assertSession()->checkboxChecked('edit-settings-entity-test-mul-entity-test-mul-columns-field-test-et-ui-image-title');
     $this->drupalLogin($this->translator);
diff --git a/core/modules/content_translation/tests/src/Functional/ContentTranslationUITestBase.php b/core/modules/content_translation/tests/src/Functional/ContentTranslationUITestBase.php
index 162c5d1f..04693cbd 100644
--- a/core/modules/content_translation/tests/src/Functional/ContentTranslationUITestBase.php
+++ b/core/modules/content_translation/tests/src/Functional/ContentTranslationUITestBase.php
@@ -223,11 +223,11 @@ protected function doTestTranslationOverview() {
       if ($entity->hasTranslation($langcode)) {
         $language = new Language(['id' => $langcode]);
         $view_url = $entity->toUrl('canonical', ['language' => $language])->toString();
-        $elements = $this->xpath('//table//a[@href=:href]', [':href' => $view_url]);
-        $this->assertEqual($elements[0]->getText(), $entity->getTranslation($langcode)->label(), new FormattableMarkup('Label correctly shown for %language translation.', ['%language' => $langcode]));
+        $link = $this->assertSession()->elementExists('xpath', "//table//a[@href=\"$view_url\"]");
+        $this->assertEquals($entity->getTranslation($langcode)->label(), $link->getText(), "Label correctly shown for $langcode translation.");
         $edit_path = $entity->toUrl('edit-form', ['language' => $language])->toString();
-        $elements = $this->xpath('//table//ul[@class="dropbutton"]/li/a[@href=:href]', [':href' => $edit_path]);
-        $this->assertEqual($elements[0]->getText(), t('Edit'), new FormattableMarkup('Edit link correct for %language translation.', ['%language' => $langcode]));
+        $link = $this->assertSession()->elementExists('xpath', "//table//ul[@class=\"dropbutton\"]/li/a[@href=\"$edit_path\"]");
+        $this->assertEquals(t('Edit'), $link->getText(), "Edit link correct for $langcode translation.");
       }
     }
   }
@@ -257,11 +257,14 @@ protected function doTestOutdatedStatus() {
       $this->drupalGet($url);
       if ($added_langcode == $langcode) {
         $this->assertFieldByXPath('//input[@name="content_translation[retranslate]"]', FALSE, 'The retranslate flag is not checked by default.');
-        $this->assertEmpty($this->xpath('//details[@id="edit-content-translation" and @open="open"]'), 'The translation tab should be collapsed by default.');
+        // Verify that the translation tab is collapsed by default.
+        $this->assertSession()->elementNotExists('xpath', '//details[@id="edit-content-translation" and @open="open"]');
       }
       else {
         $this->assertFieldByXPath('//input[@name="content_translation[outdated]"]', TRUE, 'The translate flag is checked by default.');
-        $this->assertNotEmpty($this->xpath('//details[@id="edit-content-translation" and @open="open"]'), 'The translation tab is correctly expanded when the translation is outdated.');
+        // Verify that the translation tab is correctly expanded when the
+        // translation is outdated.
+        $this->assertSession()->elementExists('xpath', '//details[@id="edit-content-translation" and @open="open"]');
         $edit = ['content_translation[outdated]' => FALSE];
         $this->drupalPostForm($url, $edit, $this->getFormSubmitAction($entity, $added_langcode));
         $this->drupalGet($url);
@@ -346,7 +349,8 @@ protected function doTestAuthoringInfo() {
       'content_translation[created]' => '19/11/1978',
     ];
     $this->drupalPostForm($entity->toUrl('edit-form'), $edit, $this->getFormSubmitAction($entity, $langcode));
-    $this->assertNotEmpty($this->xpath('//div[contains(@class, "error")]//ul'), 'Invalid values generate a list of form errors.');
+    // Verify that a list of form errors is present.
+    $this->assertSession()->elementExists('xpath', '//div[contains(@class, "error")]//ul');
     $metadata = $this->manager->getTranslationMetadata($entity->getTranslation($langcode));
     $this->assertEqual($metadata->getAuthor()->id(), $values[$langcode]['uid'], 'Translation author correctly kept.');
     $this->assertEqual($metadata->getCreatedTime(), $values[$langcode]['created'], 'Translation date correctly kept.');
diff --git a/core/modules/content_translation/tests/src/Functional/ContentTranslationUntranslatableFieldsTest.php b/core/modules/content_translation/tests/src/Functional/ContentTranslationUntranslatableFieldsTest.php
index deb27f96..8bc30dbb 100644
--- a/core/modules/content_translation/tests/src/Functional/ContentTranslationUntranslatableFieldsTest.php
+++ b/core/modules/content_translation/tests/src/Functional/ContentTranslationUntranslatableFieldsTest.php
@@ -86,10 +86,10 @@ public function testHiddenWidgets() {
     // and no translatability clue is displayed yet.
     $en_edit_url = $entity->toUrl('edit-form');
     $this->drupalGet($en_edit_url);
-    $field_xpath = '//input[@name="' . $this->fieldName . '[0][value]"]';
-    $this->assertNotEmpty($this->xpath($field_xpath));
+    $field_name = "{$this->fieldName}[0][value]";
+    $this->assertSession()->fieldExists($field_name);
     $clue_xpath = '//label[@for="edit-' . strtr($this->fieldName, '_', '-') . '-0-value"]/span[text()="(all languages)"]';
-    $this->assertEmpty($this->xpath($clue_xpath));
+    $this->assertSession()->elementNotExists('xpath', $clue_xpath);
     $this->assertSession()->pageTextContains('Untranslatable-but-visible test field');
 
     // Add a translation and check that the untranslatable field widget is
@@ -101,20 +101,20 @@ public function testHiddenWidgets() {
       'target' => 'it',
     ]);
     $this->drupalGet($add_url);
-    $this->assertNotEmpty($this->xpath($field_xpath));
-    $this->assertNotEmpty($this->xpath($clue_xpath));
+    $this->assertSession()->fieldExists($field_name);
+    $this->assertSession()->elementExists('xpath', $clue_xpath);
     $this->assertSession()->pageTextContains('Untranslatable-but-visible test field');
     $this->drupalPostForm(NULL, [], 'Save');
 
     // Check that the widget is displayed along with its clue in the edit form
     // for both languages.
     $this->drupalGet($en_edit_url);
-    $this->assertNotEmpty($this->xpath($field_xpath));
-    $this->assertNotEmpty($this->xpath($clue_xpath));
+    $this->assertSession()->fieldExists($field_name);
+    $this->assertSession()->elementExists('xpath', $clue_xpath);
     $it_edit_url = $entity->toUrl('edit-form', ['language' => ConfigurableLanguage::load('it')]);
     $this->drupalGet($it_edit_url);
-    $this->assertNotEmpty($this->xpath($field_xpath));
-    $this->assertNotEmpty($this->xpath($clue_xpath));
+    $this->assertSession()->fieldExists($field_name);
+    $this->assertSession()->elementExists('xpath', $clue_xpath);
 
     // Configure untranslatable field widgets to be hidden on non-default
     // language edit forms.
@@ -125,23 +125,24 @@ public function testHiddenWidgets() {
     // Verify that the widget is displayed in the default language edit form,
     // but no clue is displayed.
     $this->drupalGet($en_edit_url);
-    $field_xpath = '//input[@name="' . $this->fieldName . '[0][value]"]';
-    $this->assertNotEmpty($this->xpath($field_xpath));
-    $this->assertEmpty($this->xpath($clue_xpath));
+    $field_name = "{$this->fieldName}[0][value]";
+    $this->assertSession()->fieldExists($field_name);
+    $this->assertSession()->elementNotExists('xpath', $clue_xpath);
     $this->assertSession()->pageTextContains('Untranslatable-but-visible test field');
 
     // Verify no widget is displayed on the non-default language edit form.
     $this->drupalGet($it_edit_url);
-    $this->assertEmpty($this->xpath($field_xpath));
-    $this->assertEmpty($this->xpath($clue_xpath));
+    $this->assertSession()->fieldNotExists($field_name);
+    $this->assertSession()->elementNotExists('xpath', $clue_xpath);
     $this->assertSession()->pageTextContains('Untranslatable-but-visible test field');
 
     // Verify a warning is displayed.
     $this->assertSession()->pageTextContains('Fields that apply to all languages are hidden to avoid conflicting changes.');
     $edit_path = $entity->toUrl('edit-form')->toString();
     $link_xpath = '//a[@href=:edit_path and text()="Edit them on the original language form"]';
-    $elements = $this->xpath($link_xpath, [':edit_path' => $edit_path]);
-    $this->assertNotEmpty($elements);
+    $this->assertSession()->elementExists('xpath', $this->assertSession()->buildXPathQuery($link_xpath, [
+      ':edit_path' => $edit_path,
+    ]));
 
     // Configure untranslatable field widgets to be displayed on non-default
     // language edit forms.
@@ -150,33 +151,34 @@ public function testHiddenWidgets() {
     // Check that the widget is displayed along with its clue in the edit form
     // for both languages.
     $this->drupalGet($en_edit_url);
-    $this->assertNotEmpty($this->xpath($field_xpath));
-    $this->assertNotEmpty($this->xpath($clue_xpath));
+    $this->assertSession()->fieldExists($field_name);
+    $this->assertSession()->elementExists('xpath', $clue_xpath);
     $this->drupalGet($it_edit_url);
-    $this->assertNotEmpty($this->xpath($field_xpath));
-    $this->assertNotEmpty($this->xpath($clue_xpath));
+    $this->assertSession()->fieldExists($field_name);
+    $this->assertSession()->elementExists('xpath', $clue_xpath);
 
     // Enable content moderation and verify that widgets are hidden despite them
     // being configured to be displayed.
     $this->enableContentModeration();
     $this->drupalGet($it_edit_url);
-    $this->assertEmpty($this->xpath($field_xpath));
-    $this->assertEmpty($this->xpath($clue_xpath));
+    $this->assertSession()->fieldNotExists($field_name);
+    $this->assertSession()->elementNotExists('xpath', $clue_xpath);
 
     // Verify a warning is displayed.
     $this->assertSession()->pageTextContains('Fields that apply to all languages are hidden to avoid conflicting changes.');
-    $elements = $this->xpath($link_xpath, [':edit_path' => $edit_path]);
-    $this->assertNotEmpty($elements);
+    $this->assertSession()->elementExists('xpath', $this->assertSession()->buildXPathQuery($link_xpath, [
+      ':edit_path' => $edit_path,
+    ]));
 
     // Verify that checkboxes on the language content settings page are checked
     // and disabled for moderated bundles.
     $this->drupalGet($settings_url);
-    $input_xpath = '//input[@name="settings[' . $this->entityTypeId . '][' . $this->bundle . '][settings][content_translation][untranslatable_fields_hide]" and @value=1 and @disabled="disabled"]';
-    $elements = $this->xpath($input_xpath);
-    $this->assertNotEmpty($elements);
+    $field_name = "settings[{$this->entityTypeId }][{$this->bundle}][settings][content_translation][untranslatable_fields_hide]";
+    $this->assertSession()->fieldValueEquals($field_name, 1);
+    $this->assertSession()->fieldDisabled($field_name);
     $this->drupalPostForm(NULL, [$settings_key => 0], 'Save configuration');
-    $elements = $this->xpath($input_xpath);
-    $this->assertNotEmpty($elements);
+    $this->assertSession()->fieldValueEquals($field_name, 1);
+    $this->assertSession()->fieldDisabled($field_name);
   }
 
 }
