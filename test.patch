diff --git a/core/lib/Drupal/Core/Test/Comparator/MarkupInterfaceComparator.php b/core/lib/Drupal/Core/Test/Comparator/MarkupInterfaceComparator.php
new file mode 100644
index 0000000000..4007277aa2
--- /dev/null
+++ b/core/lib/Drupal/Core/Test/Comparator/MarkupInterfaceComparator.php
@@ -0,0 +1,34 @@
+<?php
+
+namespace Drupal\Core\Test\Comparator;
+
+use Drupal\Component\Render\MarkupInterface;
+use SebastianBergmann\Comparator\Comparator;
+
+/**
+ * Compares MarkupInterface objects for equality.
+ */
+class MarkupInterfaceComparator extends Comparator {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function accepts($expected, $actual) {
+    // If at least one argument is a MarkupInterface object, we take over and
+    // convert to strings before comparing.
+    return ($expected instanceof MarkupInterface && $actual instanceof MarkupInterface) ||
+      ($expected instanceof MarkupInterface && is_scalar($actual)) ||
+      (is_scalar($expected) && $actual instanceof MarkupInterface);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function assertEquals($expected, $actual, $delta = 0.0, $canonicalize = FALSE, $ignoreCase = FALSE) {
+    $expected_safe = (string) $expected;
+    $actual_safe = (string) $actual;
+    $comparator = $this->factory->getComparatorFor($expected_safe, $actual_safe);
+    $comparator->assertEquals($expected_safe, $actual_safe, $delta, $canonicalize, $ignoreCase);
+  }
+
+}
diff --git a/core/tests/Drupal/KernelTests/Core/Test/Comparator/MarkupInterfaceComparatorTest.php b/core/tests/Drupal/KernelTests/Core/Test/Comparator/MarkupInterfaceComparatorTest.php
new file mode 100644
index 0000000000..4857b3ce44
--- /dev/null
+++ b/core/tests/Drupal/KernelTests/Core/Test/Comparator/MarkupInterfaceComparatorTest.php
@@ -0,0 +1,146 @@
+<?php
+
+namespace Drupal\KernelTests\Core\Test\Comparator;
+
+use Drupal\Component\Render\FormattableMarkup;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\Core\Test\Comparator\MarkupInterfaceComparator;
+use Drupal\KernelTests\KernelTestBase;
+use SebastianBergmann\Comparator\Factory;
+use SebastianBergmann\Comparator\ComparisonFailure;
+
+/**
+ * Tests \Drupal\Core\Test\Comparator\MarkupInterfaceComparator.
+ *
+ * We need to test the class with a kernel test since casting MarkupInterface
+ * objects to strings can require an initialised container.
+ *
+ * @group Test
+ *
+ * @coversDefaultClass \Drupal\Core\Test\Comparator\MarkupInterfaceComparator
+ */
+class MarkupInterfaceComparatorTest extends KernelTestBase {
+
+  /**
+   * @var \Drupal\Core\Test\Comparator\MarkupInterfaceComparator
+   */
+  protected $comparator;
+
+  /**
+   * @var \SebastianBergmann\Comparator\Factory
+   */
+  protected $factory;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp() {
+    parent::setUp();
+    $this->factory = new Factory();
+    $this->comparator = new MarkupInterfaceComparator();
+    $this->comparator->setFactory($this->factory);
+  }
+
+  /**
+   * Provides test data for the comparator.
+   *
+   * @return array
+   *   Each array entry has test expected value, test actual value, a bool
+   *   indicating the expected return value of ::accepts, and a value
+   *   indicating the expected result of ::assertEquals.
+   */
+  public function dataSetProvider() {
+    return [
+      'FormattableMarkup vs FormattableMarkup, equal' => [
+        new FormattableMarkup('goldfinger', []),
+        new FormattableMarkup('goldfinger', []),
+        TRUE,
+        TRUE,
+      ],
+      'FormattableMarkup vs FormattableMarkup, not equal' => [
+        new FormattableMarkup('goldfinger', []),
+        new FormattableMarkup('moonraker', []),
+        TRUE,
+        ComparisonFailure::class,
+      ],
+      'FormattableMarkup vs string, equal' => [
+        new FormattableMarkup('goldfinger', []),
+        'goldfinger',
+        TRUE,
+        TRUE,
+      ],
+      'string vs FormattableMarkup, equal' => [
+        'goldfinger',
+        new FormattableMarkup('goldfinger', []),
+        TRUE,
+        TRUE,
+      ],
+      'TranslatableMarkup vs FormattableMarkup, equal' => [
+        new TranslatableMarkup('goldfinger'),
+        new FormattableMarkup('goldfinger', []),
+        TRUE,
+        TRUE,
+      ],
+      'TranslatableMarkup vs int, equal' => [
+        new TranslatableMarkup('1234'),
+        1234,
+        TRUE,
+        TRUE,
+      ],
+      'int vs TranslatableMarkup, equal' => [
+        1234,
+        new TranslatableMarkup('1234'),
+        TRUE,
+        TRUE,
+      ],
+      'FormattableMarkup vs array' => [
+        new FormattableMarkup('goldfinger', []),
+        ['goldfinger'],
+        FALSE,
+        FALSE,
+      ],
+      'stdClass vs TranslatableMarkup' => [
+        (object) ['goldfinger'],
+        new TranslatableMarkup('goldfinger'),
+        FALSE,
+        FALSE,
+      ],
+      'string vs string, equal' => [
+        'goldfinger',
+        'goldfinger',
+        FALSE,
+        TRUE,
+      ],
+    ];
+  }
+
+  /**
+   * @covers ::accepts
+   * @dataProvider dataSetProvider
+   */
+  public function testAccepts($expected, $actual, $accepts_result, $equals_result) {
+    if ($accepts_result) {
+      $this->assertTrue($this->comparator->accepts($expected, $actual));
+    }
+    else {
+      $this->assertFalse($this->comparator->accepts($expected, $actual));
+    }
+  }
+
+  /**
+   * @covers ::assertEquals
+   * @dataProvider dataSetProvider
+   */
+  public function testAssertEquals($expected, $actual, $accepts_result, $equals_result) {
+    try {
+      if ($equals_result === ComparisonFailure::class) {
+        $this->expectException($equals_result);
+      }
+      $this->assertNull($this->comparator->assertEquals($expected, $actual));
+    }
+    catch (\Error $e) {
+      $this->assertFalse($equals_result);
+    }
+  }
+
+}
diff --git a/core/tests/Drupal/KernelTests/KernelTestBase.php b/core/tests/Drupal/KernelTests/KernelTestBase.php
index 957ed79582..4f59401650 100644
--- a/core/tests/Drupal/KernelTests/KernelTestBase.php
+++ b/core/tests/Drupal/KernelTests/KernelTestBase.php
@@ -16,6 +16,7 @@
 use Drupal\Core\Extension\ExtensionDiscovery;
 use Drupal\Core\Language\Language;
 use Drupal\Core\Site\Settings;
+use Drupal\Core\Test\Comparator\MarkupInterfaceComparator;
 use Drupal\Core\Test\TestDatabase;
 use Drupal\Tests\AssertHelperTrait;
 use Drupal\Tests\ConfigTestTrait;
@@ -237,6 +238,9 @@ public static function setUpBeforeClass() {
   protected function setUp() {
     parent::setUp();
 
+    // Allow tests to compare MarkupInterface objects via assertEquals().
+    $this->registerComparator(new MarkupInterfaceComparator());
+
     $this->root = static::getDrupalRoot();
     $this->initFileCache();
     $this->bootEnvironment();
diff --git a/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit6/TestCompatibilityTrait.php b/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit6/TestCompatibilityTrait.php
index 92b1b9ebd7..e6d99e402a 100644
--- a/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit6/TestCompatibilityTrait.php
+++ b/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit6/TestCompatibilityTrait.php
@@ -39,18 +39,4 @@ public static function assertFalse($actual, $message = '') {
     }
   }
 
-  /**
-   * {@inheritdoc}
-   */
-  public static function assertEquals($expected, $actual, $message = '', $delta = 0, $maxDepth = 10, $canonicalize = FALSE, $ignoreCase = FALSE) {
-    // Cast objects implementing MarkupInterface to string instead of
-    // relying on PHP casting them to string depending on what they are being
-    // comparing with.
-    if (method_exists(self::class, 'castSafeStrings')) {
-      $expected = self::castSafeStrings($expected);
-      $actual = self::castSafeStrings($actual);
-    }
-    parent::assertEquals($expected, $actual, $message, $delta, $maxDepth, $canonicalize, $ignoreCase);
-  }
-
 }
diff --git a/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit7/TestCompatibilityTrait.php b/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit7/TestCompatibilityTrait.php
index 3d10e151a9..5db4beb372 100644
--- a/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit7/TestCompatibilityTrait.php
+++ b/core/tests/Drupal/TestTools/PhpUnitCompatibility/PhpUnit7/TestCompatibilityTrait.php
@@ -39,18 +39,4 @@ public static function assertFalse($actual, string $message = ''): void {
     }
   }
 
-  /**
-   * {@inheritdoc}
-   */
-  public static function assertEquals($expected, $actual, string $message = '', float $delta = 0, int $maxDepth = 10, bool $canonicalize = FALSE, bool $ignoreCase = FALSE): void {
-    // Cast objects implementing MarkupInterface to string instead of
-    // relying on PHP casting them to string depending on what they are being
-    // comparing with.
-    if (method_exists(self::class, 'castSafeStrings')) {
-      $expected = self::castSafeStrings($expected);
-      $actual = self::castSafeStrings($actual);
-    }
-    parent::assertEquals($expected, $actual, $message, $delta, $maxDepth, $canonicalize, $ignoreCase);
-  }
-
 }
diff --git a/core/tests/Drupal/Tests/BrowserTestBase.php b/core/tests/Drupal/Tests/BrowserTestBase.php
index 96657a93e7..1ffbb821be 100644
--- a/core/tests/Drupal/Tests/BrowserTestBase.php
+++ b/core/tests/Drupal/Tests/BrowserTestBase.php
@@ -9,6 +9,7 @@
 use Behat\Mink\Session;
 use Drupal\Component\Serialization\Json;
 use Drupal\Core\Database\Database;
+use Drupal\Core\Test\Comparator\MarkupInterfaceComparator;
 use Drupal\Core\Test\FunctionalTestSetupTrait;
 use Drupal\Core\Test\TestSetupTrait;
 use Drupal\Core\Utility\Error;
@@ -391,6 +392,9 @@ protected function registerSessions() {}
   protected function setUp() {
     parent::setUp();
 
+    // Allow tests to compare MarkupInterface objects via assertEquals().
+    $this->registerComparator(new MarkupInterfaceComparator());
+
     $this->setupBaseUrl();
 
     // Install Drupal test site.
