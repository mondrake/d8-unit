diff --git a/core/modules/user/tests/src/Unit/Plugin/Validation/Constraint/ProtectedUserFieldConstraintValidatorTest.php b/core/modules/user/tests/src/Unit/Plugin/Validation/Constraint/ProtectedUserFieldConstraintValidatorTest.php
index 6a6e9f0ec3..10c0ca0656 100644
--- a/core/modules/user/tests/src/Unit/Plugin/Validation/Constraint/ProtectedUserFieldConstraintValidatorTest.php
+++ b/core/modules/user/tests/src/Unit/Plugin/Validation/Constraint/ProtectedUserFieldConstraintValidatorTest.php
@@ -2,10 +2,15 @@

 namespace Drupal\Tests\user\Unit\Plugin\Validation\Constraint;

+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Tests\UnitTestCase;
 use Drupal\user\Entity\User;
 use Drupal\user\Plugin\Validation\Constraint\ProtectedUserFieldConstraint;
 use Drupal\user\Plugin\Validation\Constraint\ProtectedUserFieldConstraintValidator;
+use Drupal\user\UserInterface;
+use Prophecy\Argument;
+use Prophecy\Prophet;
 use Symfony\Component\Validator\Context\ExecutionContextInterface;

 /**
@@ -70,34 +75,28 @@ public function testValidate($items, $expected_violation, $name = FALSE) {
    * Data provider for ::testValidate().
    */
   public function providerTestValidate() {
+    $prophet = new Prophet();
+
     $cases = [];

     // Case 1: Validation context should not be touched if no items are passed.
     $cases[] = [NULL, FALSE];

     // Case 2: Empty user should be ignored.
-    $field_definition = $this->createMock('Drupal\Core\Field\FieldDefinitionInterface');
-    $items = $this->createMock('Drupal\Core\Field\FieldItemListInterface');
-    $items->expects($this->once())
-      ->method('getFieldDefinition')
-      ->willReturn($field_definition);
-    $items->expects($this->once())
-      ->method('getEntity')
-      ->willReturn(NULL);
-    $cases[] = [$items, FALSE];
+    $field_definition = $prophet->prophesize(FieldDefinitionInterface::class);
+    $items = $prophet->prophesize(FieldItemListInterface::class);
+    $items->getFieldDefinition()->shouldBeCalledOnce()->willReturn($field_definition->reveal());
+    $items->getEntity()->shouldBeCalledOnce()->willReturn(NULL);
+    $cases[] = [$items->reveal(), FALSE];

     // Case 3: Account flagged to skip protected user should be ignored.
-    $field_definition = $this->createMock('Drupal\Core\Field\FieldDefinitionInterface');
-    $account = $this->createMock(User::class);
+    $field_definition = $prophet->prophesize(FieldDefinitionInterface::class);
+    $account = $prophet->prophesize(User::class)->reveal();
     $account->_skipProtectedUserFieldConstraint = TRUE;
-    $items = $this->createMock('Drupal\Core\Field\FieldItemListInterface');
-    $items->expects($this->once())
-      ->method('getFieldDefinition')
-      ->willReturn($field_definition);
-    $items->expects($this->once())
-      ->method('getEntity')
-      ->willReturn($account);
-    $cases[] = [$items, FALSE];
+    $items = $prophet->prophesize(FieldItemListInterface::class);
+    $items->getFieldDefinition()->shouldBeCalledOnce()->willReturn($field_definition->reveal());
+    $items->getEntity()->shouldBeCalledOnce()->willReturn($account);
+    $cases[] = [$items->reveal(), FALSE];

     // Case 4: New user should be ignored.
     $field_definition = $this->createMock('Drupal\Core\Field\FieldDefinitionInterface');

