diff --git a/core/assets/scaffold/files/default.settings.php b/core/assets/scaffold/files/default.settings.php
index 5615be3dc0bb9d8737c3e9d4267fca31046c045b..87217820f077f2331b866d0349fb76c115642448 100644
--- a/core/assets/scaffold/files/default.settings.php
+++ b/core/assets/scaffold/files/default.settings.php
@@ -222,6 +222,27 @@
  *     'prefix' => '',
  *   ];
  * @endcode
+ *
+ * Sample Database configuration format for a driver that is extending another
+ * database driver.
+ * @code
+ *   $databases['default']['default'] = [
+ *     'driver' => 'my_driver',
+ *     'namespace' => 'Drupal\my_module\Driver\Database\my_driver',
+ *     'autoload' => 'modules/my_module/src/Driver/Database/my_driver/',
+ *     'database' => 'databasename',
+ *     'username' => 'sqlusername',
+ *     'password' => 'sqlpassword',
+ *     'host' => 'localhost',
+ *     'prefix' => '',
+ *     'dependencies' => [
+ *       'parent_module' => [
+ *         'namespace' => 'Drupal\parent_module',
+ *         'autoload' => 'core/modules/parent_module/src/',
+ *       ],
+ *     ],
+ *   ];
+ * @endcode
  */
 
 /**
diff --git a/core/core.services.yml b/core/core.services.yml
index 6655001af193f49ce7afbfe81da537d0a3b407cf..afb144e7487981bdd59c652ce494e9687589a5c2 100644
--- a/core/core.services.yml
+++ b/core/core.services.yml
@@ -599,6 +599,10 @@ services:
     class: Drupal\Core\Extension\ThemeEngineExtensionList
     arguments: ['%app.root%', 'theme_engine', '@cache.default', '@info_parser', '@module_handler', '@state', '%install_profile%']
   Drupal\Core\Extension\ThemeEngineExtensionList: '@extension.list.theme_engine'
+  extension.list.database_driver:
+    class: Drupal\Core\Extension\DatabaseDriverList
+    arguments: ['%app.root%', 'database_driver', '@cache.default']
+  Drupal\Core\Extension\DatabaseDriverList: '@extension.list.database_driver'
   extension.path.resolver:
     class: Drupal\Core\Extension\ExtensionPathResolver
     arguments: ['@extension.list.module', '@extension.list.profile', '@extension.list.theme', '@extension.list.theme_engine']
diff --git a/core/includes/install.core.inc b/core/includes/install.core.inc
index 8f8ba759f44abe81394af75a9d1ca67512092663..d614c272f01c26dbf0409ea6aeae66cfecda5d0f 100644
--- a/core/includes/install.core.inc
+++ b/core/includes/install.core.inc
@@ -7,6 +7,7 @@
 
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Batch\BatchBuilder;
+use Drupal\Core\Cache\NullBackend;
 use Drupal\Core\Config\ConfigImporter;
 use Drupal\Core\Config\ConfigImporterException;
 use Drupal\Core\Config\Importer\ConfigImporterBatch;
@@ -15,6 +16,7 @@
 use Drupal\Core\DrupalKernel;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Database\DatabaseExceptionWrapper;
+use Drupal\Core\Extension\Exception\UnknownExtensionException;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Form\FormState;
 use Drupal\Core\Installer\Exception\AlreadyInstalledException;
@@ -368,9 +370,16 @@ function install_begin_request($class_loader, &$install_state) {
     ->addArgument(Settings::getInstance())
     ->addArgument((new LoggerChannelFactory())->get('file'));
 
+  // Register the database driver extension list provider.
+  $container
+    ->register('extension.list.database_driver', 'Drupal\Core\Extension\DatabaseDriverList')
+    ->addArgument(dirname(__DIR__, 2))
+    ->addArgument('database_driver')
+    ->addArgument(new NullBackend('database_driver'));
+
   // Register the class loader so contrib and custom database drivers can be
   // autoloaded.
-  // @see drupal_get_database_types()
+  // @see \Drupal\Core\Extension\DatabaseDriverList
   $container->set('class_loader', $class_loader);
 
   \Drupal::setContainer($container);
@@ -960,7 +969,17 @@ function install_get_form($form_id, array &$install_state) {
     // values taken from the installation state.
     $install_form_id = $form_builder->getFormId($form_id, $form_state);
     if (!empty($install_state['forms'][$install_form_id])) {
-      $form_state->setValues($install_state['forms'][$install_form_id]);
+      $values = $install_state['forms'][$install_form_id];
+      if ($install_form_id === 'install_settings_form' && !str_contains($values['driver'], "\\")) {
+        @trigger_error("Passing a database driver name '{$values['driver']}' to " . __FUNCTION__ . '() is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Pass a database driver extension name in the format \'module\\driver\' instead. See https://www.drupal.org/node/3258175', E_USER_DEPRECATED);
+        $databaseDriverList = \Drupal::service('extension.list.database_driver');
+        $driverExtension = $databaseDriverList->getFromDriverName($values['driver']);
+        $tmp = [];
+        $tmp['driver'] = $driverExtension->getName();
+        $tmp[$driverExtension->getName()] = $values[$values['driver']];
+        $values = $tmp;
+      }
+      $form_state->setValues($values);
     }
     $form_builder->submitForm($form_id, $form_state);
 
@@ -1192,15 +1211,10 @@ function install_verify_database_ready() {
 function install_database_errors($database, $settings_file) {
   $errors = [];
 
-  // Check database type.
-  $database_types = drupal_get_database_types();
-  $driver = $database['driver'];
-  if (!isset($database_types[$driver])) {
-    $errors['driver'] = t("In your %settings_file file you have configured @drupal to use a %driver server, however your PHP installation currently does not support this database type.", ['%settings_file' => $settings_file, '@drupal' => drupal_install_profile_distribution_name(), '%driver' => $driver]);
-  }
-  else {
+  try {
+    $driver = Database::getDriverList()->get($database['driver']);
     // Run driver specific validation
-    $errors += $database_types[$driver]->validateDatabaseSettings($database);
+    $errors = $driver->getInstallTasks()->validateDatabaseSettings($database);
     if (!empty($errors)) {
       // No point to try further.
       return $errors;
@@ -1208,8 +1222,10 @@ function install_database_errors($database, $settings_file) {
     // Run tasks associated with the database type. Any errors are caught in the
     // calling function.
     Database::addConnectionInfo('default', 'default', $database);
-    $installer_class = $database['namespace'] . "\\Install\\Tasks";
-    $errors = (new $installer_class())->runTasks();
+    $errors = $driver->getInstallTasks()->runTasks();
+  }
+  catch (UnknownExtensionException $e) {
+    $errors['driver'] = t("In your %settings_file file you have configured @drupal to use a %driver server, however your PHP installation currently does not support this database type.", ['%settings_file' => $settings_file, '@drupal' => drupal_install_profile_distribution_name(), '%driver' => $database['driver']]);
   }
   return $errors;
 }
diff --git a/core/includes/install.inc b/core/includes/install.inc
index c8dd224cab5e7cbd31715b070c7db893a5b7dfdc..3c800061f211e14412f57890f7e1aa4c976fcf90 100644
--- a/core/includes/install.inc
+++ b/core/includes/install.inc
@@ -147,8 +147,14 @@ function drupal_install_profile_distribution_version() {
  *
  * @return array
  *   An array of database types compiled into PHP.
+ *
+ * @deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use
+ *   DatabaseDriverList::getList() instead.
+ *
+ * @see https://www.drupal.org/node/3258175
  */
 function drupal_detect_database_types() {
+  @trigger_error('drupal_detect_database_types() is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use DatabaseDriverList::getList() instead. See https://www.drupal.org/node/3258175', E_USER_DEPRECATED);
   $databases = drupal_get_database_types();
 
   foreach ($databases as $driver => $installer) {
@@ -163,8 +169,14 @@ function drupal_detect_database_types() {
  *
  * @return \Drupal\Core\Database\Install\Tasks[]
  *   An array of available database driver installer objects.
+ *
+ * @deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use
+ *   DatabaseDriverList::getList() instead.
+ *
+ * @see https://www.drupal.org/node/3258175
  */
 function drupal_get_database_types() {
+  @trigger_error('drupal_get_database_types() is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use DatabaseDriverList::getList() instead. See https://www.drupal.org/node/3258175', E_USER_DEPRECATED);
   $databases = [];
   $drivers = [];
 
diff --git a/core/lib/Drupal/Core/Database/Database.php b/core/lib/Drupal/Core/Database/Database.php
index 9b5364942b8afbd3cba0cfd482081923a5a5d878..de5fdf947f5451ff753e710b4b95e649397eb4d1 100644
--- a/core/lib/Drupal/Core/Database/Database.php
+++ b/core/lib/Drupal/Core/Database/Database.php
@@ -3,7 +3,9 @@
 namespace Drupal\Core\Database;
 
 use Composer\Autoload\ClassLoader;
+use Drupal\Core\Extension\DatabaseDriverList;
 use Drupal\Core\Extension\ExtensionDiscovery;
+use Drupal\Core\Cache\NullBackend;
 
 /**
  * Primary front-controller for the database system.
@@ -320,6 +322,18 @@ final public static function addConnectionInfo($key, $target, array $info, $clas
       // for the driver.
       if (isset($info['autoload']) && $class_loader && $app_root) {
         $class_loader->addPsr4($info['namespace'] . '\\', $app_root . '/' . $info['autoload']);
+
+        // When the database driver is extending from other database drivers,
+        // then add autoload directory for the parent database driver modules
+        // as well.
+        if (!empty($info['dependencies'])) {
+          assert(is_array($info['dependencies']));
+          foreach ($info['dependencies'] as $dependency) {
+            if (isset($dependency['namespace']) && isset($dependency['autoload'])) {
+              $class_loader->addPsr4($dependency['namespace'] . '\\', $app_root . '/' . $dependency['autoload']);
+            }
+          }
+        }
       }
     }
   }
@@ -524,12 +538,11 @@ public static function convertDbUrlToConnectionInfo($url, $root, ?bool $include_
     if (preg_match('/^(.*):\/\//', $url, $matches) !== 1) {
       throw new \InvalidArgumentException("Missing scheme in URL '$url'");
     }
-    $driver = $matches[1];
+    $driverName = $matches[1];
 
     // Determine if the database driver is provided by a module.
     // @todo https://www.drupal.org/project/drupal/issues/3250999. Refactor when
     // all database drivers are provided by modules.
-    $module = NULL;
     $connection_class = NULL;
     $url_components = parse_url($url);
     $url_component_query = $url_components['query'] ?? '';
@@ -537,46 +550,66 @@ public static function convertDbUrlToConnectionInfo($url, $root, ?bool $include_
 
     // Add the module key for core database drivers when the module key is not
     // set.
-    if (!isset($query['module']) && in_array($driver, ['mysql', 'pgsql', 'sqlite'], TRUE)) {
-      $query['module'] = $driver;
+    if (!isset($query['module']) && in_array($driverName, ['mysql', 'pgsql', 'sqlite'], TRUE)) {
+      $query['module'] = $driverName;
     }
-
-    if (isset($query['module']) && $query['module']) {
-      $module = $query['module'];
-      // Set up an additional autoloader. We don't use the main autoloader as
-      // this method can be called before Drupal is installed and is never
-      // called during regular runtime.
-      $namespace = "Drupal\\$module\\Driver\\Database\\$driver";
-      $psr4_base_directory = Database::findDriverAutoloadDirectory($namespace, $root, $include_test_drivers);
-      $additional_class_loader = new ClassLoader();
-      $additional_class_loader->addPsr4($namespace . '\\', $psr4_base_directory);
-      $additional_class_loader->register(TRUE);
-      $connection_class = $namespace . '\\Connection';
+    if (!isset($query['module'])) {
+      throw new \InvalidArgumentException("Can not convert '$url' to a database connection, the module providing the driver '{$driverName}' is not specified");
     }
 
-    if (!$module) {
-      // Determine the connection class to use. Discover if the URL has a valid
-      // driver scheme for a Drupal 8 style custom driver.
-      // @todo Remove this in Drupal 10.
-      $connection_class = "Drupal\\Driver\\Database\\{$driver}\\Connection";
-    }
+    /** @var \Drupal\Core\Extension\DatabaseDriver $driver */
+    $driver = self::getDriverList()
+      ->includeTestDrivers($include_test_drivers ?? FALSE)
+      ->get($query['module'] . "\\" . $driverName);
 
+    // Set up an additional autoloader. We don't use the main autoloader as
+    // this method can be called before Drupal is installed and is never
+    // called during regular runtime.
+    $additional_class_loader = new ClassLoader();
+    $additional_class_loader->addPsr4($driver->getNamespace() . '\\', $driver->getPath());
+    $connection_class = $driver->getNamespace() . '\\Connection';
     if (!class_exists($connection_class)) {
       throw new \InvalidArgumentException("Can not convert '$url' to a database connection, class '$connection_class' does not exist");
     }
 
+    // When the database driver is extending another database driver, then
+    // add autoload info for the parent database driver as well.
+    $autoloadInfo = $driver->getAutoloadInfo();
+    if (isset($autoloadInfo['dependencies'])) {
+      foreach ($autoloadInfo['dependencies'] as $dependency) {
+        $additional_class_loader->addPsr4($dependency['namespace'] . '\\', $dependency['autoload']);
+      }
+    }
+
+    $additional_class_loader->register(TRUE);
+
     $options = $connection_class::createConnectionOptionsFromUrl($url, $root);
 
-    // If the driver is provided by a module add the necessary information to
-    // autoload the code.
+    // Add the necessary information to autoload code.
     // @see \Drupal\Core\Site\Settings::initialize()
-    if (isset($psr4_base_directory)) {
-      $options['autoload'] = $psr4_base_directory;
+    $options['autoload'] = $driver->getPath() . DIRECTORY_SEPARATOR;
+    if (isset($autoloadInfo['dependencies'])) {
+      $options['dependencies'] = $autoloadInfo['dependencies'];
     }
 
     return $options;
   }
 
+  /**
+   * Returns the list provider for available database drivers.
+   *
+   * @return \Drupal\Core\Extension\DatabaseDriverList
+   *   The list provider for available database drivers.
+   */
+  public static function getDriverList(): DatabaseDriverList {
+    if (\Drupal::hasContainer() && \Drupal::hasService('extension.list.database_driver')) {
+      return \Drupal::service('extension.list.database_driver');
+    }
+    else {
+      return new DatabaseDriverList(DRUPAL_ROOT, 'database_driver', new NullBackend('database_driver'));
+    }
+  }
+
   /**
    * Finds the directory to add to the autoloader for the driver's namespace.
    *
@@ -631,8 +664,14 @@ public static function convertDbUrlToConnectionInfo($url, $root, ?bool $include_
    *
    * @throws \RuntimeException
    *   Exception thrown when a module provided database driver does not exist.
+   *
+   * @deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use
+   *   DatabaseDriverList::getList() instead.
+   *
+   * @see https://www.drupal.org/node/3258175
    */
   public static function findDriverAutoloadDirectory($namespace, $root, ?bool $include_test_drivers = NULL) {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use DatabaseDriverList::getList() instead. See https://www.drupal.org/node/3258175', E_USER_DEPRECATED);
     // As explained by this method's documentation, return FALSE if the
     // namespace is not a sub-namespace of a Drupal module.
     if (!static::isWithinModuleNamespace($namespace)) {
@@ -703,9 +742,9 @@ public static function getConnectionInfoAsUrl($key = 'default') {
    *   TRUE if the passed in namespace is a sub-namespace of a Drupal module's
    *   namespace.
    *
-   * @todo https://www.drupal.org/project/drupal/issues/3125476 Remove if we
-   *   add this to the extension API or if
-   *   \Drupal\Core\Database\Database::getConnectionInfoAsUrl() is removed.
+   * @todo remove in Drupal 11.
+   *
+   * @see https://www.drupal.org/node/3256524
    */
   private static function isWithinModuleNamespace(string $namespace) {
     [$first, $second] = explode('\\', $namespace, 3);
diff --git a/core/lib/Drupal/Core/Extension/DatabaseDriver.php b/core/lib/Drupal/Core/Extension/DatabaseDriver.php
new file mode 100644
index 0000000000000000000000000000000000000000..c362d3b85c4f24714f7c1285e0752c22587d29d4
--- /dev/null
+++ b/core/lib/Drupal/Core/Extension/DatabaseDriver.php
@@ -0,0 +1,242 @@
+<?php
+
+namespace Drupal\Core\Extension;
+
+use Composer\Autoload\ClassLoader;
+use Drupal\Core\Database\Install\Tasks;
+
+/**
+ * Defines a database driver extension object.
+ */
+class DatabaseDriver extends Extension {
+
+  /**
+   * The container class loader.
+   */
+  private ClassLoader $classLoader;
+
+  /**
+   * The install tasks object instance of the database driver.
+   */
+  private Tasks $installTasks;
+
+  /**
+   * Constructs a new DatabaseDriver object.
+   *
+   * @param string $root
+   *   The app root.
+   * @param \Drupal\Core\Extension\Extension $module
+   *   The module containing the database driver.
+   * @param string $driverName
+   *   The database driver name.
+   * @param \Drupal\Core\Extension\Extension[] $discoveredModules
+   *   The modules discovered in the installation.
+   */
+  public function __construct(
+    string $root,
+    protected Extension $module,
+    protected string $driverName,
+    protected array $discoveredModules) {
+    $this->root = $root;
+    $this->type = 'database_driver';
+  }
+
+  /**
+   * Returns the Extension object of the module containing the database driver.
+   *
+   * @return \Drupal\Core\Extension\Extension
+   *   The Extension object of the module containing the database driver.
+   */
+  public function getModule(): Extension {
+    return $this->module;
+  }
+
+  /**
+   * Returns the name of the database driver.
+   *
+   * @return string
+   *   The name of the database driver.
+   */
+  public function getDriverName(): string {
+    return $this->driverName;
+  }
+
+  /**
+   * Returns the PHP namespace of the database driver.
+   *
+   * @return string
+   *   The PHP namespace of the database driver.
+   */
+  public function getNamespace(): string {
+    return "Drupal\\" . $this->getModule()->getName() . "\\Driver\\Database\\" . $this->getDriverName();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getName() {
+    return $this->getModule()->getName() . "\\" . $this->getDriverName();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getPath() {
+    return $this->getModule()->getPath() . DIRECTORY_SEPARATOR . 'src' . DIRECTORY_SEPARATOR . 'Driver' . DIRECTORY_SEPARATOR . 'Database' . DIRECTORY_SEPARATOR . $this->getDriverName();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function load() {
+    if (!isset($this->classLoader)) {
+      $this->classLoader = \Drupal::service('class_loader');
+      $this->classLoader->addPsr4($this->getNamespace() . '\\', $this->getPath());
+      foreach (($this->getAutoloadInfo()['dependencies'] ?? []) as $dependency) {
+        $this->classLoader->addPsr4($dependency['namespace'] . '\\', $dependency['autoload']);
+      }
+    }
+    return TRUE;
+  }
+
+  /**
+   * Returns the install tasks object instance of this database driver.
+   *
+   * @return \Drupal\Core\Database\Install\Tasks
+   *   The install tasks object instance.
+   */
+  public function getInstallTasks(): Tasks {
+    if (!isset($this->installTasks)) {
+      $this->load();
+      $installTasksClass = $this->getNamespace() . "\\Install\\Tasks";
+      $this->installTasks = new $installTasksClass();
+    }
+    return $this->installTasks;
+  }
+
+  // phpcs:disable
+  /**
+   * Returns an array with the driver's autoload information.
+   *
+   * The module that provides the database driver should add the driver's
+   * namespace to Composer's autoloader. However, since the database connection
+   * must be established before Drupal adds the module's entire namespace to the
+   * autoloader, the database connection info array includes an "autoload" key
+   * containing the autoload directory for the driver's namespace. For requests
+   * that connect to the database via a connection info array, the value of the
+   * "autoload" key is automatically added to the autoloader.
+   *
+   * This method can be called to find the default value of that key when the
+   * database connection info array isn't available. This includes:
+   * - Console commands and test runners that connect to a database specified
+   *   by a database URL rather than a connection info array.
+   * - During installation, prior to the connection info array being written to
+   *   settings.php.
+   *
+   * This method returns an array with the driver's namespace and autoload
+   * directory that must be added to the autoloader, as well as those of any
+   * dependency specified in the driver's module.info.yml file, in the format
+   * @code
+   * [
+   *   'autoload' => 'path_to_modules/module_a/src/Driver/Database/driver_1/',
+   *   'namespace' => 'Drupal\\module_a\\Driver\\Database\\driver_1',
+   *   'dependencies' => [
+   *     'module_x' => [
+   *       'autoload' => 'path_to_modules/module_x/src/',
+   *       'namespace' => 'Drupal\\module_x',
+   *     ],
+   *   ],
+   * ]
+   * @endcode
+   *
+   * @return array{
+   *     'autoload': string,
+   *     'namespace': string,
+   *     'dependencies': array<string, array{'autoload': string, 'namespace': string}>,
+   *   }
+   */
+  // phpcs:enable
+  public function getAutoloadInfo(): array {
+    $this->getModuleInfo();
+
+    $autoloadInfo = [
+      'namespace' => $this->getNamespace(),
+      'autoload' => $this->getPath() . DIRECTORY_SEPARATOR,
+    ];
+
+    foreach (($this->info['dependencies'] ?? []) as $dependency) {
+      $dependencyData = Dependency::createFromString($dependency);
+      $dependencyName = $dependencyData->getName();
+      if (empty($this->discoveredModules[$dependencyName])) {
+        throw new \RuntimeException(sprintf("Cannot find the module '%s' that is required by module '%s'", $dependencyName, $this->getModule()->getName()));
+      }
+      $autoloadInfo['dependencies'][$dependencyName] = [
+        'namespace' => "Drupal\\{$dependencyName}",
+        'autoload' => $this->discoveredModules[$dependencyName]->getPath() . '/src/',
+      ];
+    }
+
+    return $autoloadInfo;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function isExperimental(): bool {
+    $this->getModuleInfo();
+    return parent::isExperimental();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function isObsolete(): bool {
+    $this->getModuleInfo();
+    return parent::isObsolete();
+  }
+
+  /**
+   * Gets the content of the info.yml file of the driver's module, as an array.
+   *
+   * The info array is saved in the $info property.
+   *
+   * @throws \Drupal\Core\Extension\InfoParserException
+   *   Exception thrown if there is a parsing error or the .info.yml file does
+   *   not contain a required key.
+   */
+  private function getModuleInfo(): void {
+    if (!isset($this->info)) {
+      $infoParser = new InfoParser($this->root);
+      $this->info = $infoParser->parse($this->root . DIRECTORY_SEPARATOR . $this->getModule()->getPathname());
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getPathname() {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getFilename() {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getExtensionPathname() {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getExtensionFilename() {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Extension/DatabaseDriverList.php b/core/lib/Drupal/Core/Extension/DatabaseDriverList.php
new file mode 100644
index 0000000000000000000000000000000000000000..2732a186727499f2069c30dd19ecc7fd4fe06bbe
--- /dev/null
+++ b/core/lib/Drupal/Core/Extension/DatabaseDriverList.php
@@ -0,0 +1,251 @@
+<?php
+
+namespace Drupal\Core\Extension;
+
+use Drupal\Core\Cache\CacheBackendInterface;
+use Drupal\Core\Extension\Exception\UnknownExtensionException;
+
+/**
+ * Provides a list of available database drivers.
+ *
+ * @internal
+ *   This class is not yet stable and therefore there are no guarantees that the
+ *   internal implementations including constructor signature and protected
+ *   properties / methods will not change over time. This will be reviewed after
+ *   https://www.drupal.org/project/drupal/issues/2940481
+ */
+class DatabaseDriverList extends ExtensionList {
+
+  /**
+   * Determines whether test drivers shall be included in the discovery.
+   */
+  private bool $includeTestDrivers = FALSE;
+
+  /**
+   * Constructs a new instance.
+   *
+   * @param string $root
+   *   The app root.
+   * @param string $type
+   *   The extension type.
+   * @param \Drupal\Core\Cache\CacheBackendInterface $cache
+   *   The cache.
+   */
+  public function __construct($root, $type, CacheBackendInterface $cache) {
+    $this->root = $root;
+    $this->type = $type;
+    $this->cache = $cache;
+  }
+
+  /**
+   * Determines whether test drivers shall be included in the discovery.
+   *
+   * @param bool $includeTestDrivers
+   *   Toggle whether test drivers shall be included in the discovery.
+   *
+   * @return $this
+   */
+  public function includeTestDrivers(bool $includeTestDrivers): static {
+    $this->includeTestDrivers = $includeTestDrivers;
+    return $this;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getExtensionDiscovery() {
+    return new ExtensionDiscovery($this->root, FALSE);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function doScanExtensions() {
+    return $this->getExtensionDiscovery()->scan('module', $this->includeTestDrivers);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function doList(): array {
+    // Determine the modules that contain at least one installable database
+    // driver.
+    $discoveredModules = $this->doScanExtensions();
+    $drivers = [];
+    foreach ($discoveredModules as $module) {
+      $moduleDriverDirectory = $this->root . DIRECTORY_SEPARATOR . $module->getPath() . DIRECTORY_SEPARATOR . 'src' . DIRECTORY_SEPARATOR . 'Driver' . DIRECTORY_SEPARATOR . 'Database';
+      if (is_dir($moduleDriverDirectory)) {
+        // Use directory iterator to avoid services.
+        $directoryIterator = new \DirectoryIterator($moduleDriverDirectory);
+        foreach ($directoryIterator as $fileInfo) {
+          if ($fileInfo->isDir() && !$fileInfo->isDot() && file_exists($moduleDriverDirectory . DIRECTORY_SEPARATOR . $fileInfo->getFilename() . DIRECTORY_SEPARATOR . 'Install' . DIRECTORY_SEPARATOR . 'Tasks.php')) {
+            $databaseDriver = new DatabaseDriver($this->root, $module, $fileInfo->getFilename(), $discoveredModules);
+            $drivers[$databaseDriver->getName()] = $databaseDriver;
+          }
+        }
+      }
+    }
+    return $drivers;
+  }
+
+  /**
+   * Returns the list of installable database drivers.
+   *
+   * @return \Drupal\Core\Extension\DatabaseDriver[]
+   *   An array of installable database driver extension objects.
+   */
+  public function getInstallableList(): array {
+    $installableDrivers = [];
+    foreach ($this->getList() as $name => $driver) {
+      if ($driver->getInstallTasks()->installable()) {
+        $installableDrivers[$name] = $driver;
+      }
+    }
+    // Usability: unconditionally put the MySQL driver on top.
+    if (isset($installableDrivers['mysql\\mysql'])) {
+      $mysqlDriver = $installableDrivers['mysql\\mysql'];
+      unset($installableDrivers['mysql\\mysql']);
+      $installableDrivers = ['mysql\\mysql' => $mysqlDriver] + $installableDrivers;
+    }
+    return $installableDrivers;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getName($extension_name) {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function get($extension_name) {
+    if (!str_contains($extension_name, "\\")) {
+      @trigger_error("Passing a database driver name '{$extension_name}' to " . __METHOD__ . '() is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Pass a database driver extension name in the format \'module\\driver\' instead. See https://www.drupal.org/node/3258175', E_USER_DEPRECATED);
+      return $this->getFromDriverName($extension_name);
+    }
+    return parent::get($extension_name);
+  }
+
+  /**
+   * Returns the first available driver extension by the driver name.
+   *
+   * @param string $driverName
+   *   The database driver name.
+   *
+   * @return \Drupal\Core\Extension\DatabaseDriver
+   *   The driver extension.
+   *
+   * @throws \Drupal\Core\Extension\Exception\UnknownExtensionException
+   *   When no matching driver extension can be found.
+   *
+   * @deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use
+   *   DatabaseDriverList::get() instead, passing a database driver extension
+   *   name in the format 'module\driver\'.
+   *
+   * @see https://www.drupal.org/node/3258175
+   */
+  public function getFromDriverName(string $driverName): DatabaseDriver {
+    @trigger_error(__METHOD__ . '() is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use DatabaseDriverList::get() instead, passing a database driver extension name in the format \'module\\driver\'. See https://www.drupal.org/node/3258175', E_USER_DEPRECATED);
+    foreach ($this->getList() as $extensionName => $driver) {
+      [, $extensionDriverName] = explode('\\', $extensionName);
+      if ($extensionDriverName === $driverName) {
+        return parent::get($extensionName);
+      }
+    }
+    throw new UnknownExtensionException("Could not find a database driver named {$driverName} in any module");
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getExtensionInfo($extension_name) {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getAllAvailableInfo() {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getInstalledExtensionNames() {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getAllInstalledInfo() {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function recalculateInfo() {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getPathnames() {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function recalculatePathnames() {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setPathname($extension_name, $pathname) {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getPathname($extension_name) {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getPath($extension_name) {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function createExtensionInfo(Extension $extension) {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function checkIncompatibility($name) {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function sortByName(Extension $a, Extension $b): int {
+    throw new \LogicException(__METHOD__ . '() is not implemented');
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Extension/ExtensionDiscovery.php b/core/lib/Drupal/Core/Extension/ExtensionDiscovery.php
index ce6ecbddfa5f35c259c164ba2cdd6f916ed90baa..f5edcb0c60aed2cfffec49274770f87d37442a9f 100644
--- a/core/lib/Drupal/Core/Extension/ExtensionDiscovery.php
+++ b/core/lib/Drupal/Core/Extension/ExtensionDiscovery.php
@@ -228,6 +228,12 @@ public function scan($type, $include_tests = NULL) {
    */
   public function setProfileDirectoriesFromSettings() {
     $this->profileDirectories = [];
+    // This method may be called by the database system early in bootstrap
+    // before the container in initialized. In that case, the parameter is not
+    // accessible yet, hence return.
+    if (!\Drupal::hasContainer() || !\Drupal::getContainer()->hasParameter('install_profile')) {
+      return $this;
+    }
     if ($profile = \Drupal::installProfile()) {
       $this->profileDirectories[] = \Drupal::service('extension.list.profile')->getPath($profile);
     }
diff --git a/core/lib/Drupal/Core/Extension/ExtensionList.php b/core/lib/Drupal/Core/Extension/ExtensionList.php
index 6f9e95bbbe3c90a3b4848b488fb9e85882bed0f2..f12c9a61f830f136645de3bc36f002325566bec8 100644
--- a/core/lib/Drupal/Core/Extension/ExtensionList.php
+++ b/core/lib/Drupal/Core/Extension/ExtensionList.php
@@ -21,7 +21,9 @@
 abstract class ExtensionList {
 
   /**
-   * The type of the extension: "module", "theme" or "profile".
+   * The type of the extension.
+   *
+   * Possible values: "module", "theme", "profile" or "database_driver".
    *
    * @var string
    */
diff --git a/core/lib/Drupal/Core/Installer/Form/SiteSettingsForm.php b/core/lib/Drupal/Core/Installer/Form/SiteSettingsForm.php
index dc265471222a8b58796ec5f086bc0e4573c930e4..744636cdde7773f639c11230b44f6ec40e8ac67a 100644
--- a/core/lib/Drupal/Core/Installer/Form/SiteSettingsForm.php
+++ b/core/lib/Drupal/Core/Installer/Form/SiteSettingsForm.php
@@ -4,6 +4,7 @@
 
 use Drupal\Component\Utility\Crypt;
 use Drupal\Core\Database\Database;
+use Drupal\Core\Extension\DatabaseDriverList;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Core\Form\FormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -18,31 +19,20 @@
  */
 class SiteSettingsForm extends FormBase {
 
-  /**
-   * The site path.
-   *
-   * @var string
-   */
-  protected $sitePath;
-
-  /**
-   * The renderer.
-   *
-   * @var \Drupal\Core\Render\RendererInterface
-   */
-  protected $renderer;
-
   /**
    * Constructs a new SiteSettingsForm.
    *
-   * @param string $site_path
+   * @param string $sitePath
    *   The site path.
    * @param \Drupal\Core\Render\RendererInterface $renderer
    *   The renderer.
+   * @param \Drupal\Core\Extension\DatabaseDriverList $databaseDriverList
+   *   The list provider of database drivers.
    */
-  public function __construct($site_path, RendererInterface $renderer) {
-    $this->sitePath = $site_path;
-    $this->renderer = $renderer;
+  public function __construct(
+    protected string $sitePath,
+    protected RendererInterface $renderer,
+    protected DatabaseDriverList $databaseDriverList) {
   }
 
   /**
@@ -51,7 +41,8 @@ public function __construct($site_path, RendererInterface $renderer) {
   public static function create(ContainerInterface $container) {
     return new static(
       $container->getParameter('site.path'),
-      $container->get('renderer')
+      $container->get('renderer'),
+      $container->get('extension.list.database_driver')
     );
   }
 
@@ -70,7 +61,7 @@ public function buildForm(array $form, FormStateInterface $form_state) {
 
     $form['#title'] = $this->t('Database configuration');
 
-    $drivers = drupal_get_database_types();
+    $drivers = $this->databaseDriverList->getInstallableList();
     $drivers_keys = array_keys($drivers);
 
     // Unless there is input for this form (for a non-interactive installation,
@@ -88,6 +79,9 @@ public function buildForm(array $form, FormStateInterface $form_state) {
 
     if (isset($input['driver'])) {
       $default_driver = $input['driver'];
+      if (!str_contains($default_driver, "\\")) {
+        throw new \Exception("Invalid driver '{$default_driver}' passed to " . __METHOD__);
+      }
       // In case of database connection info from settings.php, as well as for a
       // programmed form submission (non-interactive installer), the table prefix
       // information is usually normalized into an array already, but the form
@@ -118,10 +112,9 @@ public function buildForm(array $form, FormStateInterface $form_state) {
 
     // Add driver specific configuration options.
     foreach ($drivers as $key => $driver) {
-      $form['driver']['#options'][$key] = $driver->name();
-
-      $form['settings'][$key] = $driver->getFormOptions($default_options);
-      $form['settings'][$key]['#prefix'] = '<h2 class="js-hide">' . $this->t('@driver_name settings', ['@driver_name' => $driver->name()]) . '</h2>';
+      $form['driver']['#options'][$key] = $driver->getInstallTasks()->name();
+      $form['settings'][$key] = $driver->getInstallTasks()->getFormOptions($default_options);
+      $form['settings'][$key]['#prefix'] = '<h2 class="js-hide">' . $this->t('@driver_name settings', ['@driver_name' => $driver->getInstallTasks()->name()]) . '</h2>';
       $form['settings'][$key]['#type'] = 'container';
       $form['settings'][$key]['#tree'] = TRUE;
       $form['settings'][$key]['advanced_options']['#parents'] = [$key];
@@ -156,18 +149,12 @@ public function buildForm(array $form, FormStateInterface $form_state) {
   public function validateForm(array &$form, FormStateInterface $form_state) {
     $driver = $form_state->getValue('driver');
     $database = $form_state->getValue($driver);
-    $drivers = drupal_get_database_types();
-    $reflection = new \ReflectionClass($drivers[$driver]);
-    $install_namespace = $reflection->getNamespaceName();
-    // Cut the trailing \Install from namespace.
-    $database['namespace'] = substr($install_namespace, 0, strrpos($install_namespace, '\\'));
+
     $database['driver'] = $driver;
-    // See default.settings.php for an explanation of the 'autoload' key.
-    if ($autoload = Database::findDriverAutoloadDirectory($database['namespace'], DRUPAL_ROOT)) {
-      $database['autoload'] = $autoload;
-    }
+    $database = array_merge($database, $this->databaseDriverList->get($driver)->getAutoloadInfo());
 
     $form_state->set('database', $database);
+
     foreach ($this->getDatabaseErrors($database, $form_state->getValue('settings_file')) as $name => $message) {
       $form_state->setErrorByName($name, $message);
     }
@@ -237,11 +224,17 @@ public function submitForm(array &$form, FormStateInterface $form_state) {
 
     // Update global settings array and save.
     $settings = [];
+
+    // For BC, just save the database driver name, not the database driver
+    // extension name which has a format 'module\driver'.
     $database = $form_state->get('database');
+    [, $driverName] = explode('\\', $database['driver']);
+    $database['driver'] = $driverName;
     $settings['databases']['default']['default'] = (object) [
       'value'    => $database,
       'required' => TRUE,
     ];
+
     $settings['settings']['hash_salt'] = (object) [
       'value'    => Crypt::randomBytesBase64(55),
       'required' => TRUE,
diff --git a/core/lib/Drupal/Core/Test/FunctionalTestSetupTrait.php b/core/lib/Drupal/Core/Test/FunctionalTestSetupTrait.php
index 5d37d5c8adbb202b1393af7dc6912e4fc8c8b969..5dd0d6ac42ec9cbeb8fcd08a6c28a3494fdb6432 100644
--- a/core/lib/Drupal/Core/Test/FunctionalTestSetupTrait.php
+++ b/core/lib/Drupal/Core/Test/FunctionalTestSetupTrait.php
@@ -514,18 +514,22 @@ protected function rebuildAll() {
   protected function installParameters() {
     $connection_info = Database::getConnectionInfo();
     $driver = $connection_info['default']['driver'];
+    [, $module] = explode('\\', $connection_info['default']['namespace'], 3);
+    $driverExtensionName = $module . "\\" . $driver;
+
     unset($connection_info['default']['driver']);
     unset($connection_info['default']['namespace']);
     unset($connection_info['default']['autoload']);
     unset($connection_info['default']['pdo']);
     unset($connection_info['default']['init_commands']);
     // Remove database connection info that is not used by SQLite.
-    if ($driver === 'sqlite') {
+    if ($driverExtensionName === "sqlite\\sqlite") {
       unset($connection_info['default']['username']);
       unset($connection_info['default']['password']);
       unset($connection_info['default']['host']);
       unset($connection_info['default']['port']);
     }
+
     $parameters = [
       'interactive' => FALSE,
       'parameters' => [
@@ -534,8 +538,8 @@ protected function installParameters() {
       ],
       'forms' => [
         'install_settings_form' => [
-          'driver' => $driver,
-          $driver => $connection_info['default'],
+          'driver' => $driverExtensionName,
+          $driverExtensionName => $connection_info['default'],
         ],
         'install_configure_form' => [
           'site_name' => 'Drupal',
@@ -558,7 +562,6 @@ protected function installParameters() {
     ];
 
     // If we only have one db driver available, we cannot set the driver.
-    include_once DRUPAL_ROOT . '/core/includes/install.inc';
     if (count($this->getDatabaseTypes()) == 1) {
       unset($parameters['forms']['install_settings_form']['driver']);
     }
@@ -695,7 +698,8 @@ protected function prepareEnvironment() {
   /**
    * Returns all supported database driver installer objects.
    *
-   * This wraps drupal_get_database_types() for use without a current container.
+   * This wraps DatabaseDriverList::getInstallableList() for use without a
+   * current container.
    *
    * @return \Drupal\Core\Database\Install\Tasks[]
    *   An array of available database driver installer objects.
@@ -704,7 +708,10 @@ protected function getDatabaseTypes() {
     if (isset($this->originalContainer) && $this->originalContainer) {
       \Drupal::setContainer($this->originalContainer);
     }
-    $database_types = drupal_get_database_types();
+    $database_types = [];
+    foreach (Database::getDriverList()->getInstallableList() as $name => $driver) {
+      $database_types[$name] = $driver->getInstallTasks();
+    }
     if (isset($this->originalContainer) && $this->originalContainer) {
       \Drupal::unsetContainer();
     }
diff --git a/core/modules/migrate_drupal_ui/src/Form/CredentialForm.php b/core/modules/migrate_drupal_ui/src/Form/CredentialForm.php
index 87e57604bb86f34b0dddd11a2254ad8467b2dccd..27d3520cec0d11dcf4d954ea23156d62c36a7c87 100644
--- a/core/modules/migrate_drupal_ui/src/Form/CredentialForm.php
+++ b/core/modules/migrate_drupal_ui/src/Form/CredentialForm.php
@@ -172,7 +172,7 @@ public function buildForm(array $form, FormStateInterface $form_state) {
           ':input[name=driver]' => ['value' => $key],
         ],
       ];
-      if ($key != 'sqlite') {
+      if ($key != 'sqlite\\sqlite') {
         $form['database']['settings'][$key]['username']['#states'] = [
           'required' => [
             ':input[name=source_connection]' => ['value' => ''],
@@ -395,7 +395,12 @@ public function getConfirmText() {
   protected function getDatabaseTypes() {
     // Make sure the install API is available.
     include_once DRUPAL_ROOT . '/core/includes/install.inc';
-    return drupal_get_database_types();
+    $database_types = [];
+    foreach (Database::getDriverList()->getInstallableList() as $name => $driver) {
+      $database_types[$name] = $driver->getInstallTasks();
+    }
+
+    return $database_types;
   }
 
   /**
diff --git a/core/modules/migrate_drupal_ui/tests/src/Functional/CredentialFormTest.php b/core/modules/migrate_drupal_ui/tests/src/Functional/CredentialFormTest.php
index f0183917f1abb190762fc855c6a4391d59cb393f..b0757d3e103ee023c60ddd5c9a09a45efea162f5 100644
--- a/core/modules/migrate_drupal_ui/tests/src/Functional/CredentialFormTest.php
+++ b/core/modules/migrate_drupal_ui/tests/src/Functional/CredentialFormTest.php
@@ -4,6 +4,8 @@
 
 use Drupal\Tests\migrate_drupal\Traits\CreateTestContentEntitiesTrait;
 
+// cspell:ignore mysqlmysql
+
 /**
  * Test the credential form for both Drupal 6 and Drupal 7 sources.
  *
@@ -40,7 +42,7 @@ public function testCredentialFrom($path_to_database) {
 
     $this->submitForm([], 'Continue');
     $session->pageTextContains('Provide credentials for the database of the Drupal site you want to upgrade.');
-    $session->fieldExists('mysql[host]');
+    $session->fieldExists('edit-mysqlmysql-host');
 
     // Ensure submitting the form with invalid database credentials gives us a
     // nice warning.
diff --git a/core/modules/migrate_drupal_ui/tests/src/Functional/MigrateUpgradeTestBase.php b/core/modules/migrate_drupal_ui/tests/src/Functional/MigrateUpgradeTestBase.php
index df5f4230edcd839aebd238bfdf55baa29ca3abbc..6de637e29a991174f79ebdb6b50ace4deade49f8 100644
--- a/core/modules/migrate_drupal_ui/tests/src/Functional/MigrateUpgradeTestBase.php
+++ b/core/modules/migrate_drupal_ui/tests/src/Functional/MigrateUpgradeTestBase.php
@@ -298,8 +298,8 @@ protected function getCredentials() {
 
     // Use the driver connection form to get the correct options out of the
     // database settings. This supports all of the databases we test against.
-    $drivers = drupal_get_database_types();
-    $form = $drivers[$driver]->getFormOptions($connection_options);
+    $drivers = Database::getDriverList()->getInstallableList();
+    $form = $drivers[$driver]->getInstallTasks()->getFormOptions($connection_options);
     $connection_options = array_intersect_key($connection_options, $form + $form['advanced_options']);
     $edit = [
       $driver => $connection_options,
diff --git a/core/modules/migrate_drupal_ui/tests/src/Functional/d7/FilePathTest.php b/core/modules/migrate_drupal_ui/tests/src/Functional/d7/FilePathTest.php
index 6ccb1f97ff0cebc558d29b0b35a8a9374ff4b835..80c2ed9252f3b18e25a42eb0cae4698d76fb772e 100644
--- a/core/modules/migrate_drupal_ui/tests/src/Functional/d7/FilePathTest.php
+++ b/core/modules/migrate_drupal_ui/tests/src/Functional/d7/FilePathTest.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Tests\migrate_drupal_ui\Functional\d7;
 
+use Drupal\Core\Database\Database;
 use Drupal\Core\File\FileSystemInterface;
 use Drupal\Tests\ExtensionListTestTrait;
 use Drupal\Tests\migrate_drupal_ui\Functional\MigrateUpgradeTestBase;
@@ -124,8 +125,8 @@ public function testFilePath(string $file_private_path, string $file_public_path
 
     // Use the driver connection form to get the correct options out of the
     // database settings. This supports all of the databases we test against.
-    $drivers = drupal_get_database_types();
-    $form = $drivers[$driver]->getFormOptions($connection_options);
+    $drivers = Database::getDriverList()->getInstallableList();
+    $form = $drivers[$driver]->getInstallTasks()->getFormOptions($connection_options);
     $connection_options = array_intersect_key($connection_options, $form + $form['advanced_options']);
     $edit = [
       $driver => $connection_options,
diff --git a/core/modules/migrate_drupal_ui/tests/src/FunctionalJavascript/SettingsTest.php b/core/modules/migrate_drupal_ui/tests/src/FunctionalJavascript/SettingsTest.php
index 776f115f7a6e367a979824fdf3967b052e06cb85..1a317785e78385d95a80fed0d7b20910cf7fb6be 100644
--- a/core/modules/migrate_drupal_ui/tests/src/FunctionalJavascript/SettingsTest.php
+++ b/core/modules/migrate_drupal_ui/tests/src/FunctionalJavascript/SettingsTest.php
@@ -4,6 +4,8 @@
 
 use Drupal\FunctionalJavascriptTests\WebDriverTestBase;
 
+// cspell:ignore mysqlmysql
+
 /**
  * Tests migrate upgrade credential form with settings in settings.php.
  *
@@ -86,7 +88,7 @@ public function testCredentialForm($source_connection, $version, array $manual,
     // Enter the values manually if provided.
     if (!empty($manual)) {
       $edit = [];
-      $driver = 'mysql';
+      $driver = 'mysql\\mysql';
       $edit[$driver]['host'] = $manual['host'];
       $edit[$driver]['database'] = $manual['database'];
       $edit[$driver]['username'] = $manual['username'];
@@ -123,9 +125,9 @@ public function testCredentialForm($source_connection, $version, array $manual,
       $session->fieldValueEquals('source_connection', $expected_source_connection);
     }
     else {
-      $session->fieldValueEquals('mysql[host]', $manual['host']);
-      $session->fieldValueEquals('mysql[database]', $manual['database']);
-      $session->fieldValueEquals('mysql[username]', $manual['username']);
+      $session->fieldValueEquals('edit-mysqlmysql-host', $manual['host']);
+      $session->fieldValueEquals('edit-mysqlmysql-database', $manual['database']);
+      $session->fieldValueEquals('edit-mysqlmysql-username', $manual['username']);
     }
 
     // Confirm the file paths are correct.
@@ -164,7 +166,7 @@ public function providerTestCredentialForm() {
               'prefix' => 'test',
               'host' => '172.18.0.3',
               'port' => '3307',
-              'namespace' => 'Drupal\\Core\\Database\\Driver\\mysql',
+              'namespace' => 'Drupal\\mysql\\Driver\\Database\\mysql',
               'driver' => 'mysql',
             ],
           ],
@@ -184,7 +186,7 @@ public function providerTestCredentialForm() {
               'prefix' => 'test',
               'host' => '172.18.0.3',
               'port' => '3307',
-              'namespace' => 'Drupal\\Core\\Database\\Driver\\mysql',
+              'namespace' => 'Drupal\\mysql\\Driver\\Database\\mysql',
               'driver' => 'mysql',
             ],
           ],
@@ -204,7 +206,7 @@ public function providerTestCredentialForm() {
               'prefix' => 'test',
               'host' => '172.18.0.6',
               'port' => '3307',
-              'namespace' => 'Drupal\\Core\\Database\\Driver\\mysql',
+              'namespace' => 'Drupal\\mysql\\Driver\\Database\\mysql',
               'driver' => 'mysql',
             ],
           ],
@@ -224,7 +226,7 @@ public function providerTestCredentialForm() {
               'prefix' => 'test',
               'host' => '172.18.0.3',
               'port' => '3307',
-              'namespace' => 'Drupal\\Core\\Database\\Driver\\mysql',
+              'namespace' => 'Drupal\\mysql\\Driver\\Database\\mysql',
               'driver' => 'mysql',
             ],
           ],
@@ -236,7 +238,7 @@ public function providerTestCredentialForm() {
               'prefix' => 'test',
               'host' => '172.18.0.2',
               'port' => '3307',
-              'namespace' => 'Drupal\\Core\\Database\\Driver\\mysql',
+              'namespace' => 'Drupal\\mysql\\Driver\\Database\\mysql',
               'driver' => 'mysql',
             ],
           ],
@@ -261,7 +263,7 @@ public function providerTestCredentialForm() {
               'prefix' => 'test',
               'host' => '172.18.0.2',
               'port' => '3307',
-              'namespace' => 'Drupal\\Core\\Database\\Driver\\mysql',
+              'namespace' => 'Drupal\\mysql\\Driver\\Database\\mysql',
               'driver' => 'mysql',
             ],
           ],
diff --git a/core/modules/system/system.install b/core/modules/system/system.install
index 2fd5cc4e61ccc6acc38e0ed3247aa2a4feec3110..d7e36245a7073d359e79cc6c1273db2ffec7ac68 100644
--- a/core/modules/system/system.install
+++ b/core/modules/system/system.install
@@ -507,8 +507,7 @@ function system_requirements($phase) {
     }
     else {
       // Make sure at least one supported database driver exists.
-      $drivers = drupal_detect_database_types();
-      if (empty($drivers)) {
+      if (empty(Database::getDriverList()->getInstallableList())) {
         $database_ok = FALSE;
         $pdo_message = t('Your web server does not appear to support any common PDO database extensions. Check with your hosting provider to see if they support PDO (PHP Data Objects) and offer any databases that <a href=":drupal-databases">Drupal supports</a>.', [
           ':drupal-databases' => 'https://www.drupal.org/docs/system-requirements/database-server-requirements',
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Connection.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Connection.php
index a87a0d386951d2a3d7f3fa209cd10ddc1897421b..9de6eda72cb3278ce4694a7a679e951501754f8c 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Connection.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Connection.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Connection.php';
-
 use Drupal\mysql\Driver\Database\mysql\Connection as CoreConnection;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Insert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Insert.php
index 8c15b608fe4660f9c79719b15bdab314646a251a..5c253174bc05dbe8aa4dde451adc7736a56de0ec 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Insert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Insert.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Insert.php';
-
 use Drupal\mysql\Driver\Database\mysql\Insert as CoreInsert;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Install/Tasks.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Install/Tasks.php
index 2b20ba147f96f5a375e57e2eb29211dd4207fe01..4a6f247bb9a1a782a88fa8986451e29f9fb91ed8 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Install/Tasks.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Install/Tasks.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysql\Install;
 
-include_once dirname(__DIR__, 9) . '/mysql/src/Driver/Database/mysql/Install/Tasks.php';
-
 use Drupal\mysql\Driver\Database\mysql\Install\Tasks as CoreTasks;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Schema.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Schema.php
index b3a2dc01fef5879d20f2d46da7241c1ecc6772dd..bc1bf9eec25f73c27697c2b59ad8800e553f5017 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Schema.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Schema.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Schema.php';
-
 use Drupal\mysql\Driver\Database\mysql\Schema as CoreSchema;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Upsert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Upsert.php
index dd2d71af8c7769dc1a4f82b140e19aedd8f6af78..d2bd76e6ead248567900123503c939e44c7e33b1 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Upsert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/Upsert.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysql;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Upsert.php';
-
 use Drupal\mysql\Driver\Database\mysql\Upsert as CoreUpsert;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Connection.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Connection.php
index 6ef463cb157784a41724f5c9df7ede946a8e9f05..447c3acd481deb6947d12d4a5227cce7ebe4ad7a 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Connection.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Connection.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Connection.php';
-
 use Drupal\mysql\Driver\Database\mysql\Connection as CoreConnection;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Insert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Insert.php
index f1a54e3cacc4771c3c644cddf8572f833b0fb1da..f29049d5af176b520ec563548c20f0a69578e871 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Insert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Insert.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Insert.php';
-
 use Drupal\mysql\Driver\Database\mysql\Insert as CoreInsert;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Install/Tasks.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Install/Tasks.php
index 647268c7b81b6cdf8dfae0537800a1560e67020b..42a7c52d7e29151c37718c377b55c16bfdd5abd9 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Install/Tasks.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Install/Tasks.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion\Install;
 
-include_once dirname(__DIR__, 9) . '/mysql/src/Driver/Database/mysql/Install/Tasks.php';
-
 use Drupal\mysql\Driver\Database\mysql\Install\Tasks as CoreTasks;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Schema.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Schema.php
index 4e739215848e85802122b5662e400ef73e7f3134..0b608b4baf4e128a37675e9d8cf44a8dc3b2a611 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Schema.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Schema.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Schema.php';
-
 use Drupal\mysql\Driver\Database\mysql\Schema as CoreSchema;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Upsert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Upsert.php
index 2513c7357b4054c7c8849f9829d05133f9d91f3c..58a792b6446cede2383648d15694bd027c37d8e0 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Upsert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysqlDeprecatedVersion/Upsert.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion;
 
-include_once dirname(__DIR__, 8) . '/mysql/src/Driver/Database/mysql/Upsert.php';
-
 use Drupal\mysql\Driver\Database\mysql\Upsert as CoreUpsert;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Connection.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Connection.php
index e45d48ade944ee3d65c9d3567c024cc77dba820a..f9f15f091d312aefe8795a18047fb5cf30c84866 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Connection.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Connection.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Connection.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Connection as CoreConnection;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Delete.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Delete.php
index 92081533cbaa4d77d234e98d591c48b342bf0f86..29840d0dfa813d6b4d8ce257e4e1b1552b52b1e3 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Delete.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Delete.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Delete.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Delete as CoreDelete;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Insert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Insert.php
index 957373ffc38f6c4c58c3b0e9700bd124dbb2b165..a35e74d445b1bdb1ce65be95774ca7b1d45bccf4 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Insert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Insert.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Insert.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Insert as CoreInsert;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Install/Tasks.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Install/Tasks.php
index a8c096438f23780e2f33158856ef15f419380156..51fcd2796721b09336b874903c6fde4934a830ec 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Install/Tasks.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Install/Tasks.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql\Install;
 
-include_once dirname(__DIR__, 9) . '/pgsql/src/Driver/Database/pgsql/Install/Tasks.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Install\Tasks as CoreTasks;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Schema.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Schema.php
index df0c45c2220005f3abbe6c2196204b703039b035..522311cdc2c14ef816ce1ea25bddbccd0cc74f06 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Schema.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Schema.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Schema.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Schema as CoreSchema;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Select.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Select.php
index b11fbefe1148c80c3158c6a581f763d33b914a1f..12fe909b2e1297e0b0d1042c73ce1317b0caa6cd 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Select.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Select.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Select.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Select as CoreSelect;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Truncate.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Truncate.php
index 61b58711ff970c5ab690905713f1c11395efc6cb..416c082563d23177810ad50447c5102431740690 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Truncate.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Truncate.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Truncate.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Truncate as CoreTruncate;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Update.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Update.php
index e30ace4bc8ecbfa1aac40632bb0c52862f140c1d..48d3f0380ef44582eef2933b73a2d4b024c3bfed 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Update.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Update.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Update.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Update as CoreUpdate;
 
 /**
diff --git a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Upsert.php b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Upsert.php
index b36b039bf9ba4f1ed042c684322c5d1ef5144890..93e51d1ae0753f82a87186db156bb68287d03623 100644
--- a/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Upsert.php
+++ b/core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/Upsert.php
@@ -2,8 +2,6 @@
 
 namespace Drupal\driver_test\Driver\Database\DrivertestPgsql;
 
-include_once dirname(__DIR__, 8) . '/pgsql/src/Driver/Database/pgsql/Upsert.php';
-
 use Drupal\pgsql\Driver\Database\pgsql\Upsert as CoreUpsert;
 
 /**
diff --git a/core/modules/system/tests/src/Functional/System/DatabaseDriverProvidedByModuleTest.php b/core/modules/system/tests/src/Functional/System/DatabaseDriverProvidedByModuleTest.php
index e81ced70d3032dfdc50fe5b0c2c9bf5c5565c360..450651c171c3a460224774b726e2624281b683b2 100644
--- a/core/modules/system/tests/src/Functional/System/DatabaseDriverProvidedByModuleTest.php
+++ b/core/modules/system/tests/src/Functional/System/DatabaseDriverProvidedByModuleTest.php
@@ -50,6 +50,12 @@ public function testDatabaseDriverIsProvidedByModuleButTheModuleIsNotEnabled():
       'driver' => 'Drivertest' . ucfirst($driver),
       'namespace' => 'Drupal\\driver_test\\Driver\\Database\\Drivertest' . ucfirst($driver),
       'autoload' => 'core/modules/system/tests/modules/driver_test/src/Driver/Database/Drivertest' . ucfirst($driver),
+      'dependencies' => [
+        $driver => [
+          'namespace' => "Drupal\\{$driver}",
+          'autoload' => "core/modules/$driver/src/",
+        ],
+      ],
     ];
     if (isset($connection_info['default']['port'])) {
       $database['port'] = $connection_info['default']['port'];
diff --git a/core/modules/system/tests/src/Functional/Update/DatabaseVersionCheckUpdateTest.php b/core/modules/system/tests/src/Functional/Update/DatabaseVersionCheckUpdateTest.php
index 2202dc000b2919499a5baafe437121d3f15f5a7c..d188d2e883e835a48c3218f8b854f8860331ab25 100644
--- a/core/modules/system/tests/src/Functional/Update/DatabaseVersionCheckUpdateTest.php
+++ b/core/modules/system/tests/src/Functional/Update/DatabaseVersionCheckUpdateTest.php
@@ -39,7 +39,7 @@ public function testUpdate() {
     // Use a database driver that reports a fake database version that does
     // not meet requirements. Only change the necessary settings in the database
     // settings array so that run-tests.sh continues to work.
-    $autoload = Database::findDriverAutoloadDirectory('Drupal\driver_test\Driver\Database\DrivertestMysqlDeprecatedVersion', \Drupal::root());
+    $autoloading = \Drupal::service('extension.list.database_driver')->get('driver_test\\DrivertestMysqlDeprecatedVersion')->getAutoloadInfo();
     $settings['databases']['default']['default']['driver'] = (object) [
       'value' => 'DrivertestMysqlDeprecatedVersion',
       'required' => TRUE,
@@ -49,7 +49,11 @@ public function testUpdate() {
       'required' => TRUE,
     ];
     $settings['databases']['default']['default']['autoload'] = (object) [
-      'value' => $autoload,
+      'value' => $autoloading['autoload'],
+      'required' => TRUE,
+    ];
+    $settings['databases']['default']['default']['dependencies'] = (object) [
+      'value' => $autoloading['dependencies'],
       'required' => TRUE,
     ];
     $settings['settings'] = [
diff --git a/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingBrokenDatabaseSettingsTest.php b/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingBrokenDatabaseSettingsTest.php
index 3a42b319c1c314457a516681319bc07f0d564556..6c198a3a59ee486972df0c6f544b535be14d0ae1 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingBrokenDatabaseSettingsTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingBrokenDatabaseSettingsTest.php
@@ -30,15 +30,15 @@ protected function prepareEnvironment() {
 
     // Use a database driver that reports a fake database version that does
     // not meet requirements.
-    unset($connection_info['default']['pdo']);
-    unset($connection_info['default']['init_commands']);
-    $connection_info['default']['driver'] = 'DrivertestMysqlDeprecatedVersion';
-    $namespace = 'Drupal\\driver_test\\Driver\\Database\\DrivertestMysqlDeprecatedVersion';
-    $connection_info['default']['namespace'] = $namespace;
-    $connection_info['default']['autoload'] = Database::findDriverAutoloadDirectory($namespace, \Drupal::root());
+    $form_input = $connection_info;
+    $test_driver = 'driver_test\\DrivertestMysqlDeprecatedVersion';
+    $form_input['default']['driver'] = $test_driver;
+    $form_input['default']['namespace'] = 'Drupal\\driver_test\\Driver\\Database\\DrivertestMysqlDeprecatedVersion';
+    $form_input['default']['autoload'] = \Drupal::service('extension.list.database_driver')->get($test_driver)->getAutoloadInfo()['autoload'];
+    unset($form_input['default']['pdo'], $form_input['default']['init_commands']);
 
     $this->settings['databases']['default'] = (object) [
-      'value' => $connection_info,
+      'value' => $form_input,
       'required' => TRUE,
     ];
   }
diff --git a/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingDatabaseSettingsTest.php b/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingDatabaseSettingsTest.php
index ee6caea944fc6d3275671cbb9949bf20bebb757b..20b6d89d4726a433908ab1042811cc21749fbdc9 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingDatabaseSettingsTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/InstallerExistingDatabaseSettingsTest.php
@@ -24,11 +24,15 @@ protected function prepareEnvironment() {
     parent::prepareEnvironment();
     // Pre-configure database credentials in settings.php.
     $connection_info = Database::getConnectionInfo();
-    unset($connection_info['default']['pdo']);
-    unset($connection_info['default']['init_commands']);
+
+    $form_input = $connection_info;
+    [, $module] = explode('\\', $connection_info['default']['namespace'], 3);
+    $test_driver = $module . "\\" . $connection_info['default']['driver'];
+    $form_input['default']['driver'] = $test_driver;
+    unset($form_input['default']['pdo'], $form_input['default']['init_commands']);
 
     $this->settings['databases']['default'] = (object) [
-      'value' => $connection_info,
+      'value' => $form_input,
       'required' => TRUE,
     ];
   }
diff --git a/core/tests/Drupal/FunctionalTests/Installer/InstallerNonDefaultDatabaseDriverTest.php b/core/tests/Drupal/FunctionalTests/Installer/InstallerNonDefaultDatabaseDriverTest.php
index c7e4dff8b83263c909f512bd48f62f970109afd7..a300d61a12759fb6db4c465fda6f252477015196 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/InstallerNonDefaultDatabaseDriverTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/InstallerNonDefaultDatabaseDriverTest.php
@@ -6,6 +6,8 @@
 use Drupal\Core\Extension\Extension;
 use Drupal\Core\Extension\ModuleUninstallValidatorException;
 
+// cspell:ignore testdrivertestmysql testdrivertestpgsql
+
 /**
  * Tests the interactive installer.
  *
@@ -28,21 +30,23 @@ class InstallerNonDefaultDatabaseDriverTest extends InstallerTestBase {
    * {@inheritdoc}
    */
   protected function setUpSettings() {
-    $driver = Database::getConnection()->driver();
-    if (!in_array($driver, ['mysql', 'pgsql'])) {
-      $this->markTestSkipped("This test does not support the {$driver} database driver.");
+    $driverName = Database::getConnection()->driver();
+    $driverExtensionName = Database::getConnection()->getProvider() . "\\" . $driverName;
+    if (!in_array($driverName, ['mysql', 'pgsql'])) {
+      $this->markTestSkipped("This test does not support the {$driverName} database driver.");
     }
-    $this->testDriverName = 'Drivertest' . ucfirst($driver);
+    $this->testDriverName = 'Drivertest' . ucfirst($driverName);
+    $testDriverExtensionName = 'driver_test\\' . $this->testDriverName;
 
     // Assert that we are using the database drivers from the driver_test module.
-    $this->assertSession()->elementTextEquals('xpath', '//label[@for="edit-driver-drivertestmysql"]', 'MySQL by the driver_test module');
-    $this->assertSession()->elementTextEquals('xpath', '//label[@for="edit-driver-drivertestpgsql"]', 'PostgreSQL by the driver_test module');
+    $this->assertSession()->elementTextEquals('xpath', '//label[@for="edit-driver-driver-testdrivertestmysql"]', 'MySQL by the driver_test module');
+    $this->assertSession()->elementTextEquals('xpath', '//label[@for="edit-driver-driver-testdrivertestpgsql"]', 'PostgreSQL by the driver_test module');
 
     $settings = $this->parameters['forms']['install_settings_form'];
 
-    $settings['driver'] = $this->testDriverName;
-    $settings[$this->testDriverName] = $settings[$driver];
-    unset($settings[$driver]);
+    $settings['driver'] = $testDriverExtensionName;
+    $settings[$testDriverExtensionName] = $settings[$driverExtensionName];
+    unset($settings[$driverExtensionName]);
     $edit = $this->translatePostValues($settings);
     $this->submitForm($edit, $this->translations['Save and continue']);
   }
@@ -61,6 +65,21 @@ public function testInstalled() {
     $this->assertStringContainsString("'driver' => '{$this->testDriverName}',", $contents);
     $this->assertStringContainsString("'autoload' => 'core/modules/system/tests/modules/driver_test/src/Driver/Database/{$this->testDriverName}/',", $contents);
 
+    $dependencies = "'dependencies' => " . PHP_EOL .
+      "  array (" . PHP_EOL .
+      "    'mysql' => " . PHP_EOL .
+      "    array (" . PHP_EOL .
+      "      'namespace' => 'Drupal\\\\mysql'," . PHP_EOL .
+      "      'autoload' => 'core/modules/mysql/src/'," . PHP_EOL .
+      "    )," . PHP_EOL .
+      "    'pgsql' => " . PHP_EOL .
+      "    array (" . PHP_EOL .
+      "      'namespace' => 'Drupal\\\\pgsql'," . PHP_EOL .
+      "      'autoload' => 'core/modules/pgsql/src/'," . PHP_EOL .
+      "    )," . PHP_EOL .
+      "  )," . PHP_EOL;
+    $this->assertStringContainsString($dependencies, $contents);
+
     // Assert that the module "driver_test" has been installed.
     $this->assertEquals(\Drupal::service('module_handler')->getModule('driver_test'), new Extension($this->root, 'module', 'core/modules/system/tests/modules/driver_test/driver_test.info.yml'));
 
diff --git a/core/tests/Drupal/FunctionalTests/Installer/InstallerTest.php b/core/tests/Drupal/FunctionalTests/Installer/InstallerTest.php
index 12a2f0ddcf163bbe737a6cb60cf4a5f0c10ec751..2efb9059af047666acd23507ae3cd5c18a5f54b5 100644
--- a/core/tests/Drupal/FunctionalTests/Installer/InstallerTest.php
+++ b/core/tests/Drupal/FunctionalTests/Installer/InstallerTest.php
@@ -7,6 +7,8 @@
 use Drupal\Core\Test\PerformanceTestRecorder;
 use Drupal\Core\Extension\ModuleUninstallValidatorException;
 
+// cspell:ignore mysqlmysql pgsqlpgsql
+
 /**
  * Tests the interactive installer.
  *
@@ -88,8 +90,8 @@ protected function setUpSettings() {
 
     // Assert that we use the by core supported database drivers by default and
     // not the ones from the driver_test module.
-    $this->assertSession()->elementTextEquals('xpath', '//label[@for="edit-driver-mysql"]', 'MySQL, MariaDB, Percona Server, or equivalent');
-    $this->assertSession()->elementTextEquals('xpath', '//label[@for="edit-driver-pgsql"]', 'PostgreSQL');
+    $this->assertSession()->elementTextEquals('xpath', '//label[@for="edit-driver-mysqlmysql"]', 'MySQL, MariaDB, Percona Server, or equivalent');
+    $this->assertSession()->elementTextEquals('xpath', '//label[@for="edit-driver-pgsqlpgsql"]', 'PostgreSQL');
 
     parent::setUpSettings();
   }
diff --git a/core/tests/Drupal/KernelTests/Core/Database/DatabaseLegacyTest.php b/core/tests/Drupal/KernelTests/Core/Database/DatabaseLegacyTest.php
new file mode 100644
index 0000000000000000000000000000000000000000..d0de6c7e38c37f7632f2aa780dd14f60ae2881fa
--- /dev/null
+++ b/core/tests/Drupal/KernelTests/Core/Database/DatabaseLegacyTest.php
@@ -0,0 +1,29 @@
+<?php
+
+namespace Drupal\KernelTests\Core\Database;
+
+use Drupal\Core\Database\Database;
+
+/**
+ * Legacy database tests.
+ *
+ * @group Database
+ * @group legacy
+ */
+class DatabaseLegacyTest extends DatabaseTestBase {
+
+  /**
+   * Tests deprecation of install.inc database driver functions.
+   */
+  public function testDeprecatedInstallFunctions() {
+    include_once $this->root . '/core/includes/install.inc';
+    $this->expectDeprecation('drupal_detect_database_types() is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use DatabaseDriverList::getList() instead. See https://www.drupal.org/node/3258175');
+    $this->expectDeprecation('drupal_get_database_types() is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use DatabaseDriverList::getList() instead. See https://www.drupal.org/node/3258175');
+    $installableDriverNames = [];
+    foreach (Database::getDriverList()->getInstallableList() as $driver => $driverExtension) {
+      $installableDriverNames[$driverExtension->getDriverName()] = $driverExtension->getInstallTasks()->name();
+    }
+    $this->assertEquals($installableDriverNames, drupal_detect_database_types());
+  }
+
+}
diff --git a/core/tests/Drupal/Tests/Core/Database/DatabaseTest.php b/core/tests/Drupal/Tests/Core/Database/DatabaseTest.php
index bf61c2467c3ed31d991aeb1e544328c82a34e5e9..f8998a72492bed3094081acb201b9d87e8ebe1e7 100644
--- a/core/tests/Drupal/Tests/Core/Database/DatabaseTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/DatabaseTest.php
@@ -55,8 +55,11 @@ protected function setUp(): void {
   /**
    * @covers ::findDriverAutoloadDirectory
    * @dataProvider providerFindDriverAutoloadDirectory
+   * @group legacy
    */
   public function testFindDriverAutoloadDirectory($expected, $namespace, $include_test_drivers) {
+    $this->expectDeprecation('Drupal\Core\Database\Database::findDriverAutoloadDirectory() is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use DatabaseDriverList::getList() instead. See https://www.drupal.org/node/3258175');
+    // The only module that provides a driver in core is a test module.
     $this->assertSame($expected, Database::findDriverAutoloadDirectory($namespace, $this->root, $include_test_drivers));
   }
 
@@ -76,8 +79,10 @@ public function providerFindDriverAutoloadDirectory() {
   /**
    * @covers ::findDriverAutoloadDirectory
    * @dataProvider providerFindDriverAutoloadDirectoryException
+   * @group legacy
    */
   public function testFindDriverAutoloadDirectoryException($expected_message, $namespace, $include_tests) {
+    $this->expectDeprecation('Drupal\Core\Database\Database::findDriverAutoloadDirectory() is deprecated in drupal:10.1.0 and is removed from drupal:11.0.0. Use DatabaseDriverList::getList() instead. See https://www.drupal.org/node/3258175');
     $this->expectException(\RuntimeException::class);
     $this->expectExceptionMessage($expected_message);
     Database::findDriverAutoloadDirectory($namespace, $this->root, $include_tests);
diff --git a/core/tests/Drupal/Tests/Core/Database/DriverModuleMissingDependenciesTest.php b/core/tests/Drupal/Tests/Core/Database/DriverModuleMissingDependenciesTest.php
new file mode 100644
index 0000000000000000000000000000000000000000..41f110a4445e57922d8ec8e48916d0f606204cc3
--- /dev/null
+++ b/core/tests/Drupal/Tests/Core/Database/DriverModuleMissingDependenciesTest.php
@@ -0,0 +1,61 @@
+<?php
+
+namespace Drupal\Tests\Core\Database;
+
+use Drupal\Core\Cache\NullBackend;
+use Drupal\Core\Extension\DatabaseDriverList;
+use Drupal\Core\Extension\Exception\UnknownExtensionException;
+use Drupal\Tests\UnitTestCase;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * Tests for database driver module with missing dependency.
+ *
+ * These tests run in isolation since we don't want the database static to
+ * affect other tests. We also use a fake root directory to avoid the failing
+ * module to get into normal extensions discovery.
+ *
+ * @coversDefaultClass \Drupal\Core\Database\Database
+ *
+ * @runTestsInSeparateProcesses
+ * @preserveGlobalState disabled
+ *
+ * @group Database
+ */
+class DriverModuleMissingDependenciesTest extends UnitTestCase {
+
+  /**
+   * @covers ::discoverDriversAutoloadInfo
+   */
+  public function testDetermineDriversAutoloadingFailingOnMissingDependency(): void {
+    $root = realpath(dirname(__FILE__) . '/fixtures');
+
+    // Mock the container so we don't need to mock drupal_valid_test_ua().
+    // @see \Drupal\Core\Extension\ExtensionDiscovery::scan()
+    $container = $this->createMock(ContainerInterface::class);
+    $container->expects($this->any())
+      ->method('has')
+      ->with('kernel')
+      ->willReturn(TRUE);
+    $container->expects($this->any())
+      ->method('getParameter')
+      ->with()
+      ->willReturnMap([
+          ['install_profile', ''],
+          ['site.path', ''],
+      ]);
+    $container->expects($this->any())
+      ->method('get')
+      ->with('extension.list.database_driver')
+      ->willReturn(new DatabaseDriverList($root, 'database_driver', new NullBackend('database_driver')));
+    \Drupal::setContainer($container);
+
+    $this->expectException(UnknownExtensionException::class);
+    $this->expectExceptionMessage("The database_driver a_really_missing_module\dependent_driver does not exist.");
+    $container->get('extension.list.database_driver')
+      ->includeTestDrivers(TRUE)
+      ->get('a_really_missing_module\\dependent_driver')
+      ->getAutoloadInfo();
+  }
+
+}
diff --git a/core/tests/Drupal/Tests/Core/Database/UrlConversionTest.php b/core/tests/Drupal/Tests/Core/Database/UrlConversionTest.php
index 2e836da87c36fa8d2a3fe8b416c3da06c91da3ef..f57fcf04f79870981ad0d98248f2309e35a28c86 100644
--- a/core/tests/Drupal/Tests/Core/Database/UrlConversionTest.php
+++ b/core/tests/Drupal/Tests/Core/Database/UrlConversionTest.php
@@ -3,6 +3,7 @@
 namespace Drupal\Tests\Core\Database;
 
 use Drupal\Core\Database\Database;
+use Drupal\Core\Extension\Exception\UnknownExtensionException;
 use Drupal\Tests\UnitTestCase;
 
 /**
@@ -26,18 +27,6 @@ class UrlConversionTest extends UnitTestCase {
   protected function setUp(): void {
     parent::setUp();
     $this->root = dirname(__FILE__, 7);
-    // Mock the container so we don't need to mock drupal_valid_test_ua().
-    // @see \Drupal\Core\Extension\ExtensionDiscovery::scan()
-    $container = $this->createMock('Symfony\Component\DependencyInjection\ContainerInterface');
-    $container->expects($this->any())
-      ->method('has')
-      ->with('kernel')
-      ->willReturn(TRUE);
-    $container->expects($this->any())
-      ->method('getParameter')
-      ->with('site.path')
-      ->willReturn('');
-    \Drupal::setContainer($container);
   }
 
   /**
@@ -135,6 +124,16 @@ public function providerConvertDbUrlToConnectionInfo() {
           'port' => 3306,
           'namespace' => 'Drupal\driver_test\Driver\Database\DrivertestMysql',
           'autoload' => 'core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/',
+          'dependencies' => [
+            'mysql' => [
+              'namespace' => 'Drupal\mysql',
+              'autoload' => 'core/modules/mysql/src/',
+            ],
+            'pgsql' => [
+              'namespace' => 'Drupal\pgsql',
+              'autoload' => 'core/modules/pgsql/src/',
+            ],
+          ],
         ],
         TRUE,
       ],
@@ -150,6 +149,16 @@ public function providerConvertDbUrlToConnectionInfo() {
           'port' => 3306,
           'namespace' => 'Drupal\driver_test\Driver\Database\DrivertestMysql',
           'autoload' => 'core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/',
+          'dependencies' => [
+            'mysql' => [
+              'namespace' => 'Drupal\mysql',
+              'autoload' => 'core/modules/mysql/src/',
+            ],
+            'pgsql' => [
+              'namespace' => 'Drupal\pgsql',
+              'autoload' => 'core/modules/pgsql/src/',
+            ],
+          ],
         ],
         TRUE,
       ],
@@ -164,6 +173,16 @@ public function providerConvertDbUrlToConnectionInfo() {
           'port' => 5432,
           'namespace' => 'Drupal\driver_test\Driver\Database\DrivertestPgsql',
           'autoload' => 'core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/',
+          'dependencies' => [
+            'mysql' => [
+              'namespace' => 'Drupal\mysql',
+              'autoload' => 'core/modules/mysql/src/',
+            ],
+            'pgsql' => [
+              'namespace' => 'Drupal\pgsql',
+              'autoload' => 'core/modules/pgsql/src/',
+            ],
+          ],
         ],
         TRUE,
       ],
@@ -179,6 +198,16 @@ public function providerConvertDbUrlToConnectionInfo() {
           'port' => 5432,
           'namespace' => 'Drupal\driver_test\Driver\Database\DrivertestPgsql',
           'autoload' => 'core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestPgsql/',
+          'dependencies' => [
+            'mysql' => [
+              'namespace' => 'Drupal\mysql',
+              'autoload' => 'core/modules/mysql/src/',
+            ],
+            'pgsql' => [
+              'namespace' => 'Drupal\pgsql',
+              'autoload' => 'core/modules/pgsql/src/',
+            ],
+          ],
         ],
         TRUE,
       ],
@@ -274,11 +303,11 @@ public function providerInvalidArgumentsUrlConversion() {
     return [
       ['foo', '', "Missing scheme in URL 'foo'"],
       ['foo', 'bar', "Missing scheme in URL 'foo'"],
-      ['foo://', 'bar', "Can not convert 'foo://' to a database connection, class 'Drupal\\Driver\\Database\\foo\\Connection' does not exist"],
-      ['foo://bar', 'baz', "Can not convert 'foo://bar' to a database connection, class 'Drupal\\Driver\\Database\\foo\\Connection' does not exist"],
-      ['foo://bar:port', 'baz', "Can not convert 'foo://bar:port' to a database connection, class 'Drupal\\Driver\\Database\\foo\\Connection' does not exist"],
+      ['foo://', 'bar', "Can not convert 'foo://' to a database connection, the module providing the driver 'foo' is not specified"],
+      ['foo://bar', 'baz', "Can not convert 'foo://bar' to a database connection, the module providing the driver 'foo' is not specified"],
+      ['foo://bar:port', 'baz', "Can not convert 'foo://bar:port' to a database connection, the module providing the driver 'foo' is not specified"],
       ['foo/bar/baz', 'bar2', "Missing scheme in URL 'foo/bar/baz'"],
-      ['foo://bar:baz@test1', 'test2', "Can not convert 'foo://bar:baz@test1' to a database connection, class 'Drupal\\Driver\\Database\\foo\\Connection' does not exist"],
+      ['foo://bar:baz@test1', 'test2', "Can not convert 'foo://bar:baz@test1' to a database connection, the module providing the driver 'foo' is not specified"],
     ];
   }
 
@@ -390,6 +419,29 @@ public function providerGetConnectionInfoAsUrl() {
     ];
     $expected_url8 = 'DrivertestPgsql://test_user:test_pass@test_host:5432/test_database?module=driver_test#pre';
 
+    $info9 = [
+      'database' => 'test_database',
+      'username' => 'test_user',
+      'password' => 'test_pass',
+      'prefix' => '',
+      'host' => 'test_host',
+      'port' => '3306',
+      'driver' => 'DrivertestMysql',
+      'namespace' => 'Drupal\\driver_test\\Driver\\Database\\DrivertestMysql',
+      'autoload' => 'core/modules/system/tests/modules/driver_test/src/Driver/Database/DrivertestMysql/',
+      'dependencies' => [
+        'mysql' => [
+          'namespace' => 'Drupal\mysql',
+          'autoload' => 'core/modules/mysql/src/',
+        ],
+        'pgsql' => [
+          'namespace' => 'Drupal\pgsql',
+          'autoload' => 'core/modules/pgsql/src/',
+        ],
+      ],
+    ];
+    $expected_url9 = 'DrivertestMysql://test_user:test_pass@test_host:3306/test_database?module=driver_test';
+
     return [
       [$info1, $expected_url1],
       [$info2, $expected_url2],
@@ -399,6 +451,7 @@ public function providerGetConnectionInfoAsUrl() {
       [$info6, $expected_url6],
       [$info7, $expected_url7],
       [$info8, $expected_url8],
+      [$info9, $expected_url9],
     ];
   }
 
@@ -447,9 +500,9 @@ public function providerInvalidArgumentGetConnectionInfoAsUrl() {
    * @covers ::convertDbUrlToConnectionInfo
    */
   public function testDriverModuleDoesNotExist() {
-    $url = 'mysql://test_user:test_pass@test_host:3306/test_database?module=does_not_exist';
-    $this->expectException(\RuntimeException::class);
-    $this->expectExceptionMessage("Cannot find the module 'does_not_exist' for the database driver namespace 'Drupal\does_not_exist\Driver\Database\mysql'");
+    $url = 'foo_bar_mysql://test_user:test_pass@test_host:3306/test_database?module=foo_bar';
+    $this->expectException(UnknownExtensionException::class);
+    $this->expectExceptionMessage("The database_driver foo_bar\\foo_bar_mysql does not exist.");
     Database::convertDbUrlToConnectionInfo($url, $this->root, TRUE);
   }
 
@@ -457,9 +510,9 @@ public function testDriverModuleDoesNotExist() {
    * @covers ::convertDbUrlToConnectionInfo
    */
   public function testModuleDriverDoesNotExist() {
-    $url = 'mysql://test_user:test_pass@test_host:3306/test_database?module=driver_test';
-    $this->expectException(\RuntimeException::class);
-    $this->expectExceptionMessage("Cannot find the database driver namespace 'Drupal\driver_test\Driver\Database\mysql' in module 'driver_test'");
+    $url = 'driver_test_mysql://test_user:test_pass@test_host:3306/test_database?module=driver_test';
+    $this->expectException(UnknownExtensionException::class);
+    $this->expectExceptionMessage("The database_driver driver_test\\driver_test_mysql does not exist.");
     Database::convertDbUrlToConnectionInfo($url, $this->root, TRUE);
   }
 
diff --git a/core/tests/Drupal/Tests/Core/Database/fixtures/core/modules/driver_missing_dependency_test/driver_missing_dependency_test.info.yml b/core/tests/Drupal/Tests/Core/Database/fixtures/core/modules/driver_missing_dependency_test/driver_missing_dependency_test.info.yml
new file mode 100644
index 0000000000000000000000000000000000000000..165db40f3667648736a7f1f5815c7215427e7bfb
--- /dev/null
+++ b/core/tests/Drupal/Tests/Core/Database/fixtures/core/modules/driver_missing_dependency_test/driver_missing_dependency_test.info.yml
@@ -0,0 +1,7 @@
+name: 'Contrib database driver test with a missing dependency'
+type: module
+description: 'Support database contrib driver testing.'
+package: Testing
+version: VERSION
+dependencies:
+  - drupal:a_really_missing_module
diff --git a/core/tests/Drupal/Tests/Core/Database/fixtures/core/modules/driver_missing_dependency_test/src/Driver/Database/MissingDependency/Install/Tasks.php b/core/tests/Drupal/Tests/Core/Database/fixtures/core/modules/driver_missing_dependency_test/src/Driver/Database/MissingDependency/Install/Tasks.php
new file mode 100644
index 0000000000000000000000000000000000000000..43eeee5fa4b6ff20453868b4f8784ce1eb4e4ea6
--- /dev/null
+++ b/core/tests/Drupal/Tests/Core/Database/fixtures/core/modules/driver_missing_dependency_test/src/Driver/Database/MissingDependency/Install/Tasks.php
@@ -0,0 +1,19 @@
+<?php
+
+namespace Drupal\driver_missing_dependency_test\Driver\Database\MissingDependency\Install;
+
+use Drupal\Core\Database\Install\Tasks as CoreTasks;
+
+/**
+ * Specifies fake installation tasks for test.
+ */
+class Tasks extends CoreTasks {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function name() {
+    return t('Fake driver by the driver_missing_dependency_test module');
+  }
+
+}
diff --git a/sites/default/default.settings.php b/sites/default/default.settings.php
index 5615be3dc0bb9d8737c3e9d4267fca31046c045b..87217820f077f2331b866d0349fb76c115642448 100644
--- a/sites/default/default.settings.php
+++ b/sites/default/default.settings.php
@@ -222,6 +222,27 @@
  *     'prefix' => '',
  *   ];
  * @endcode
+ *
+ * Sample Database configuration format for a driver that is extending another
+ * database driver.
+ * @code
+ *   $databases['default']['default'] = [
+ *     'driver' => 'my_driver',
+ *     'namespace' => 'Drupal\my_module\Driver\Database\my_driver',
+ *     'autoload' => 'modules/my_module/src/Driver/Database/my_driver/',
+ *     'database' => 'databasename',
+ *     'username' => 'sqlusername',
+ *     'password' => 'sqlpassword',
+ *     'host' => 'localhost',
+ *     'prefix' => '',
+ *     'dependencies' => [
+ *       'parent_module' => [
+ *         'namespace' => 'Drupal\parent_module',
+ *         'autoload' => 'core/modules/parent_module/src/',
+ *       ],
+ *     ],
+ *   ];
+ * @endcode
  */
 
 /**
