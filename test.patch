diff --git a/composer.lock b/composer.lock
index d2336b3a20..4b7be58a65 100644
--- a/composer.lock
+++ b/composer.lock
@@ -443,7 +443,7 @@
             "dist": {
                 "type": "path",
                 "url": "core",
-                "reference": "45af6bc17ff7c322fa09d94cc1e534c31098e275"
+                "reference": "d1f833211574c6257ed02f76cd6673da2b8a9edd"
             },
             "require": {
                 "asm89/stack-cors": "^2.1",
@@ -492,6 +492,7 @@
             "replace": {
                 "drupal/core-annotation": "self.version",
                 "drupal/core-assertion": "self.version",
+                "drupal/core-php-attribute": "self.version",
                 "drupal/core-class-finder": "self.version",
                 "drupal/core-datetime": "self.version",
                 "drupal/core-dependency-injection": "self.version",
diff --git a/core/.deprecation-ignore.txt b/core/.deprecation-ignore.txt
index a293efe4d0..7908ebf815 100644
--- a/core/.deprecation-ignore.txt
+++ b/core/.deprecation-ignore.txt
@@ -10,6 +10,7 @@
 
 # Skip DebugClassLoader false positives.
 %Method "[^"]+" might add "[^"]+" as a native return type declaration in the future. Do the same in (child class|implementation) "(?!Drupal\\)[^"]+" now to avoid errors or add an explicit @return annotation to suppress this message%
+%Method "[^"]+" might add "[^"]+" as a native return type declaration in the future. Do the same in (child class|implementation) "Drupal\\[^"]+" now to avoid errors or add an explicit @return annotation to suppress this message%
 %The "Drupal\\[^"]+" method will require a new "[^"]+" argument in the next major version of its interface "Drupal\\[^"]+", not defining it is deprecated%
 
 # The following deprecation is listed for Twig 2 compatibility when unit
diff --git a/core/composer.json b/core/composer.json
index bac261a265..5da6d214b1 100644
--- a/core/composer.json
+++ b/core/composer.json
@@ -50,6 +50,7 @@
     "replace": {
         "drupal/core-annotation": "self.version",
         "drupal/core-assertion": "self.version",
+        "drupal/core-php-attribute": "self.version",
         "drupal/core-class-finder": "self.version",
         "drupal/core-datetime": "self.version",
         "drupal/core-dependency-injection": "self.version",
diff --git a/core/lib/Drupal/Component/PhpAttribute/LICENSE.txt b/core/lib/Drupal/Component/PhpAttribute/LICENSE.txt
new file mode 100644
index 0000000000..94fb84639c
--- /dev/null
+++ b/core/lib/Drupal/Component/PhpAttribute/LICENSE.txt
@@ -0,0 +1,339 @@
+        GNU GENERAL PUBLIC LICENSE
+           Version 2, June 1991
+
+ Copyright (C) 1989, 1991 Free Software Foundation, Inc.,
+ 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+          Preamble
+
+  The licenses for most software are designed to take away your
+freedom to share and change it.  By contrast, the GNU General Public
+License is intended to guarantee your freedom to share and change free
+software--to make sure the software is free for all its users.  This
+General Public License applies to most of the Free Software
+Foundation's software and to any other program whose authors commit to
+using it.  (Some other Free Software Foundation software is covered by
+the GNU Lesser General Public License instead.)  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+this service if you wish), that you receive source code or can get it
+if you want it, that you can change the software or use pieces of it
+in new free programs; and that you know you can do these things.
+
+  To protect your rights, we need to make restrictions that forbid
+anyone to deny you these rights or to ask you to surrender the rights.
+These restrictions translate to certain responsibilities for you if you
+distribute copies of the software, or if you modify it.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must give the recipients all the rights that
+you have.  You must make sure that they, too, receive or can get the
+source code.  And you must show them these terms so they know their
+rights.
+
+  We protect your rights with two steps: (1) copyright the software, and
+(2) offer you this license which gives you legal permission to copy,
+distribute and/or modify the software.
+
+  Also, for each author's protection and ours, we want to make certain
+that everyone understands that there is no warranty for this free
+software.  If the software is modified by someone else and passed on, we
+want its recipients to know that what they have is not the original, so
+that any problems introduced by others will not reflect on the original
+authors' reputations.
+
+  Finally, any free program is threatened constantly by software
+patents.  We wish to avoid the danger that redistributors of a free
+program will individually obtain patent licenses, in effect making the
+program proprietary.  To prevent this, we have made it clear that any
+patent must be licensed for everyone's free use or not licensed at all.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+        GNU GENERAL PUBLIC LICENSE
+   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
+
+  0. This License applies to any program or other work which contains
+a notice placed by the copyright holder saying it may be distributed
+under the terms of this General Public License.  The "Program", below,
+refers to any such program or work, and a "work based on the Program"
+means either the Program or any derivative work under copyright law:
+that is to say, a work containing the Program or a portion of it,
+either verbatim or with modifications and/or translated into another
+language.  (Hereinafter, translation is included without limitation in
+the term "modification".)  Each licensee is addressed as "you".
+
+Activities other than copying, distribution and modification are not
+covered by this License; they are outside its scope.  The act of
+running the Program is not restricted, and the output from the Program
+is covered only if its contents constitute a work based on the
+Program (independent of having been made by running the Program).
+Whether that is true depends on what the Program does.
+
+  1. You may copy and distribute verbatim copies of the Program's
+source code as you receive it, in any medium, provided that you
+conspicuously and appropriately publish on each copy an appropriate
+copyright notice and disclaimer of warranty; keep intact all the
+notices that refer to this License and to the absence of any warranty;
+and give any other recipients of the Program a copy of this License
+along with the Program.
+
+You may charge a fee for the physical act of transferring a copy, and
+you may at your option offer warranty protection in exchange for a fee.
+
+  2. You may modify your copy or copies of the Program or any portion
+of it, thus forming a work based on the Program, and copy and
+distribute such modifications or work under the terms of Section 1
+above, provided that you also meet all of these conditions:
+
+    a) You must cause the modified files to carry prominent notices
+    stating that you changed the files and the date of any change.
+
+    b) You must cause any work that you distribute or publish, that in
+    whole or in part contains or is derived from the Program or any
+    part thereof, to be licensed as a whole at no charge to all third
+    parties under the terms of this License.
+
+    c) If the modified program normally reads commands interactively
+    when run, you must cause it, when started running for such
+    interactive use in the most ordinary way, to print or display an
+    announcement including an appropriate copyright notice and a
+    notice that there is no warranty (or else, saying that you provide
+    a warranty) and that users may redistribute the program under
+    these conditions, and telling the user how to view a copy of this
+    License.  (Exception: if the Program itself is interactive but
+    does not normally print such an announcement, your work based on
+    the Program is not required to print an announcement.)
+
+These requirements apply to the modified work as a whole.  If
+identifiable sections of that work are not derived from the Program,
+and can be reasonably considered independent and separate works in
+themselves, then this License, and its terms, do not apply to those
+sections when you distribute them as separate works.  But when you
+distribute the same sections as part of a whole which is a work based
+on the Program, the distribution of the whole must be on the terms of
+this License, whose permissions for other licensees extend to the
+entire whole, and thus to each and every part regardless of who wrote it.
+
+Thus, it is not the intent of this section to claim rights or contest
+your rights to work written entirely by you; rather, the intent is to
+exercise the right to control the distribution of derivative or
+collective works based on the Program.
+
+In addition, mere aggregation of another work not based on the Program
+with the Program (or with a work based on the Program) on a volume of
+a storage or distribution medium does not bring the other work under
+the scope of this License.
+
+  3. You may copy and distribute the Program (or a work based on it,
+under Section 2) in object code or executable form under the terms of
+Sections 1 and 2 above provided that you also do one of the following:
+
+    a) Accompany it with the complete corresponding machine-readable
+    source code, which must be distributed under the terms of Sections
+    1 and 2 above on a medium customarily used for software interchange; or,
+
+    b) Accompany it with a written offer, valid for at least three
+    years, to give any third party, for a charge no more than your
+    cost of physically performing source distribution, a complete
+    machine-readable copy of the corresponding source code, to be
+    distributed under the terms of Sections 1 and 2 above on a medium
+    customarily used for software interchange; or,
+
+    c) Accompany it with the information you received as to the offer
+    to distribute corresponding source code.  (This alternative is
+    allowed only for noncommercial distribution and only if you
+    received the program in object code or executable form with such
+    an offer, in accord with Subsection b above.)
+
+The source code for a work means the preferred form of the work for
+making modifications to it.  For an executable work, complete source
+code means all the source code for all modules it contains, plus any
+associated interface definition files, plus the scripts used to
+control compilation and installation of the executable.  However, as a
+special exception, the source code distributed need not include
+anything that is normally distributed (in either source or binary
+form) with the major components (compiler, kernel, and so on) of the
+operating system on which the executable runs, unless that component
+itself accompanies the executable.
+
+If distribution of executable or object code is made by offering
+access to copy from a designated place, then offering equivalent
+access to copy the source code from the same place counts as
+distribution of the source code, even though third parties are not
+compelled to copy the source along with the object code.
+
+  4. You may not copy, modify, sublicense, or distribute the Program
+except as expressly provided under this License.  Any attempt
+otherwise to copy, modify, sublicense or distribute the Program is
+void, and will automatically terminate your rights under this License.
+However, parties who have received copies, or rights, from you under
+this License will not have their licenses terminated so long as such
+parties remain in full compliance.
+
+  5. You are not required to accept this License, since you have not
+signed it.  However, nothing else grants you permission to modify or
+distribute the Program or its derivative works.  These actions are
+prohibited by law if you do not accept this License.  Therefore, by
+modifying or distributing the Program (or any work based on the
+Program), you indicate your acceptance of this License to do so, and
+all its terms and conditions for copying, distributing or modifying
+the Program or works based on it.
+
+  6. Each time you redistribute the Program (or any work based on the
+Program), the recipient automatically receives a license from the
+original licensor to copy, distribute or modify the Program subject to
+these terms and conditions.  You may not impose any further
+restrictions on the recipients' exercise of the rights granted herein.
+You are not responsible for enforcing compliance by third parties to
+this License.
+
+  7. If, as a consequence of a court judgment or allegation of patent
+infringement or for any other reason (not limited to patent issues),
+conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot
+distribute so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you
+may not distribute the Program at all.  For example, if a patent
+license would not permit royalty-free redistribution of the Program by
+all those who receive copies directly or indirectly through you, then
+the only way you could satisfy both it and this License would be to
+refrain entirely from distribution of the Program.
+
+If any portion of this section is held invalid or unenforceable under
+any particular circumstance, the balance of the section is intended to
+apply and the section as a whole is intended to apply in other
+circumstances.
+
+It is not the purpose of this section to induce you to infringe any
+patents or other property right claims or to contest validity of any
+such claims; this section has the sole purpose of protecting the
+integrity of the free software distribution system, which is
+implemented by public license practices.  Many people have made
+generous contributions to the wide range of software distributed
+through that system in reliance on consistent application of that
+system; it is up to the author/donor to decide if he or she is willing
+to distribute software through any other system and a licensee cannot
+impose that choice.
+
+This section is intended to make thoroughly clear what is believed to
+be a consequence of the rest of this License.
+
+  8. If the distribution and/or use of the Program is restricted in
+certain countries either by patents or by copyrighted interfaces, the
+original copyright holder who places the Program under this License
+may add an explicit geographical distribution limitation excluding
+those countries, so that distribution is permitted only in or among
+countries not thus excluded.  In such case, this License incorporates
+the limitation as if written in the body of this License.
+
+  9. The Free Software Foundation may publish revised and/or new versions
+of the General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+Each version is given a distinguishing version number.  If the Program
+specifies a version number of this License which applies to it and "any
+later version", you have the option of following the terms and conditions
+either of that version or of any later version published by the Free
+Software Foundation.  If the Program does not specify a version number of
+this License, you may choose any version ever published by the Free Software
+Foundation.
+
+  10. If you wish to incorporate parts of the Program into other free
+programs whose distribution conditions are different, write to the author
+to ask for permission.  For software which is copyrighted by the Free
+Software Foundation, write to the Free Software Foundation; we sometimes
+make exceptions for this.  Our decision will be guided by the two goals
+of preserving the free status of all derivatives of our free software and
+of promoting the sharing and reuse of software generally.
+
+          NO WARRANTY
+
+  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
+FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
+OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
+PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
+OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
+TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
+PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
+REPAIR OR CORRECTION.
+
+  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
+REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
+INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
+OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
+TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
+YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
+PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGES.
+
+         END OF TERMS AND CONDITIONS
+
+      How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+convey the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 2 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License along
+    with this program; if not, write to the Free Software Foundation, Inc.,
+    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+
+Also add information on how to contact you by electronic and paper mail.
+
+If the program is interactive, make it output a short notice like this
+when it starts in an interactive mode:
+
+    Gnomovision version 69, Copyright (C) year name of author
+    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, the commands you use may
+be called something other than `show w' and `show c'; they could even be
+mouse-clicks or menu items--whatever suits your program.
+
+You should also get your employer (if you work as a programmer) or your
+school, if any, to sign a "copyright disclaimer" for the program, if
+necessary.  Here is a sample; alter the names:
+
+  Yoyodyne, Inc., hereby disclaims all copyright interest in the program
+  `Gnomovision' (which makes passes at compilers) written by James Hacker.
+
+  <signature of Ty Coon>, 1 April 1989
+  Ty Coon, President of Vice
+
+This General Public License does not permit incorporating your program into
+proprietary programs.  If your program is a subroutine library, you may
+consider it more useful to permit linking proprietary applications with the
+library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.
diff --git a/core/lib/Drupal/Component/PhpAttribute/PhpAttributeBase.php b/core/lib/Drupal/Component/PhpAttribute/PhpAttributeBase.php
new file mode 100644
index 0000000000..904fd53b51
--- /dev/null
+++ b/core/lib/Drupal/Component/PhpAttribute/PhpAttributeBase.php
@@ -0,0 +1,80 @@
+<?php
+
+namespace Drupal\Component\PhpAttribute;
+
+/**
+ * Provides a base class for classed attributes.
+ */
+abstract class PhpAttributeBase implements PhpAttributeInterface {
+
+  /**
+   * The class used for this attribute class.
+   */
+  protected string $class;
+
+  /**
+   * The provider of the attribute class.
+   */
+  protected string $provider;
+
+  /**
+   * @param string $id
+   *   The attribute class ID.
+   */
+  public function __construct(
+    protected readonly string $id
+  ) {}
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getProvider(): string {
+    return $this->provider;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function hasProvider(): bool {
+    return isset($this->provider);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setProvider(string $provider): void {
+    $this->provider = $provider;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getId(): string {
+    return $this->id;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getClass(): string {
+    return $this->class;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function setClass(string $class): void {
+    $this->class = $class;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function get(): array {
+    return get_object_vars($this) + [
+      'class' => $this->getClass(),
+      'provider' => $this->getProvider(),
+    ];
+  }
+
+}
diff --git a/core/lib/Drupal/Component/PhpAttribute/PhpAttributeInterface.php b/core/lib/Drupal/Component/PhpAttribute/PhpAttributeInterface.php
new file mode 100644
index 0000000000..7c1c396cfb
--- /dev/null
+++ b/core/lib/Drupal/Component/PhpAttribute/PhpAttributeInterface.php
@@ -0,0 +1,59 @@
+<?php
+
+namespace Drupal\Component\PhpAttribute;
+
+/**
+ * Defines a common interface for classed attributes.
+ */
+interface PhpAttributeInterface {
+
+  /**
+   * Gets the value of an attribute.
+   */
+  public function get(): mixed;
+
+  /**
+   * Gets the name of the provider of the attribute class.
+   *
+   * @return string
+   */
+  public function getProvider(): string;
+
+  /**
+   * Determines if the provider has been set.
+   *
+   * @return bool
+   */
+  public function hasProvider(): bool;
+
+  /**
+   * Sets the name of the provider of the attribute class.
+   *
+   * @param string $provider
+   *   The provider of the annotated class.
+   */
+  public function setProvider(string $provider): void;
+
+  /**
+   * Gets the unique ID for this attribute class.
+   *
+   * @return string
+   */
+  public function getId(): string;
+
+  /**
+   * Gets the class of the attribute class.
+   *
+   * @return string
+   */
+  public function getClass(): string;
+
+  /**
+   * Sets the class of the attributed class.
+   *
+   * @param string $class
+   *   The class of the attributed class.
+   */
+  public function setClass(string $class): void;
+
+}
diff --git a/core/lib/Drupal/Component/PhpAttribute/Plugin.php b/core/lib/Drupal/Component/PhpAttribute/Plugin.php
new file mode 100644
index 0000000000..7e853371fd
--- /dev/null
+++ b/core/lib/Drupal/Component/PhpAttribute/Plugin.php
@@ -0,0 +1,31 @@
+<?php
+
+namespace Drupal\Component\PhpAttribute;
+
+/**
+ * Defines a Plugin attribute object.
+ *
+ * Attributes in plugin classes can use this class in order to pass various
+ * metadata about the plugin through the parser to
+ * DiscoveryInterface::getDefinitions() calls. This allows the metadata
+ * of a class to be located with the class itself, rather than in module-based
+ * info hooks.
+ *
+ * @ingroup plugin_api
+ */
+abstract class Plugin extends PhpAttributeBase {
+
+  /**
+   * Constructs a plugin attribute object.
+   *
+   * @param string $id
+   *   The attribute class ID.
+   * @param string|null $deriver
+   *   (optional) The deriver class.
+   */
+  public function __construct(
+    public readonly string $id,
+    public readonly ?string $deriver = NULL
+  ) {}
+
+}
diff --git a/core/lib/Drupal/Component/PhpAttribute/Plugin/Discovery/PhpAttributeBridgeDecorator.php b/core/lib/Drupal/Component/PhpAttribute/Plugin/Discovery/PhpAttributeBridgeDecorator.php
new file mode 100644
index 0000000000..f06c7b3836
--- /dev/null
+++ b/core/lib/Drupal/Component/PhpAttribute/Plugin/Discovery/PhpAttributeBridgeDecorator.php
@@ -0,0 +1,61 @@
+<?php
+
+namespace Drupal\Component\PhpAttribute\Plugin\Discovery;
+
+use Drupal\Component\Plugin\Discovery\DiscoveryInterface;
+use Drupal\Component\Plugin\Discovery\DiscoveryTrait;
+
+/**
+ * Ensures that all definitions are run through the attribute process.
+ */
+class PhpAttributeBridgeDecorator implements DiscoveryInterface {
+
+  use DiscoveryTrait;
+
+  /**
+   * ObjectDefinitionDiscoveryDecorator constructor.
+   *
+   * @param \Drupal\Component\Plugin\Discovery\DiscoveryInterface $decorated
+   *   The discovery object that is being decorated.
+   * @param string $pluginDefinitionAttributeName
+   *   The name of the attribute that contains the plugin definition. The class
+   *   corresponding to this name must implement
+   *   \Drupal\Component\PhpAttribute\PhpAttributeInterface.
+   */
+  public function __construct(
+    protected DiscoveryInterface $decorated,
+    protected string $pluginDefinitionAttributeName
+  ) {}
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getDefinitions() {
+    $definitions = $this->decorated->getDefinitions();
+    foreach ($definitions as $id => $definition) {
+      // Attribute constructors expect an array of values. If the definition is
+      // not an array, it usually means it has been processed already and can be
+      // ignored.
+      if (is_array($definition)) {
+        $definitions[$id] = (new $this->pluginDefinitionAttributeName($definition))->get();
+      }
+    }
+    return $definitions;
+  }
+
+  /**
+   * Passes through all unknown calls onto the decorated object.
+   *
+   * @param string $method
+   *   The method to call on the decorated plugin discovery.
+   * @param array $args
+   *   The arguments to send to the method.
+   *
+   * @return mixed
+   *   The method result.
+   */
+  public function __call($method, $args) {
+    return call_user_func_array([$this->decorated, $method], $args);
+  }
+
+}
diff --git a/core/lib/Drupal/Component/PhpAttribute/Plugin/Discovery/PhpAttributeClassDiscovery.php b/core/lib/Drupal/Component/PhpAttribute/Plugin/Discovery/PhpAttributeClassDiscovery.php
new file mode 100644
index 0000000000..c8b6e6aac4
--- /dev/null
+++ b/core/lib/Drupal/Component/PhpAttribute/Plugin/Discovery/PhpAttributeClassDiscovery.php
@@ -0,0 +1,169 @@
+<?php
+
+namespace Drupal\Component\PhpAttribute\Plugin\Discovery;
+
+use Drupal\Component\PhpAttribute\PhpAttributeInterface;
+use Drupal\Component\PhpAttribute\Plugin;
+use Drupal\Component\FileCache\FileCacheFactory;
+use Drupal\Component\FileCache\FileCacheInterface;
+use Drupal\Component\Plugin\Discovery\DiscoveryInterface;
+use Drupal\Component\Plugin\Discovery\DiscoveryTrait;
+use Drupal\Component\Utility\Crypt;
+
+/**
+ * Defines a discovery mechanism to find plugins with attributes.
+ */
+class PhpAttributeClassDiscovery implements DiscoveryInterface {
+
+  use DiscoveryTrait;
+
+  /**
+   * The file cache object.
+   */
+  protected FileCacheInterface $fileCache;
+
+  /**
+   * Constructs a new instance.
+   *
+   * @param string[] $pluginNamespaces
+   *   (optional) An array of namespace that may contain plugin implementations.
+   *   Defaults to an empty array.
+   * @param string $pluginDefinitionAttributeName
+   *   (optional) The name of the attribute that contains the plugin definition.
+   *   Defaults to 'Drupal\Component\Attribute\Plugin'.
+   * @param string[] $additionalNamespaces
+   *   (optional) Additional namespaces to be scanned for attribute classes.
+   */
+  public function __construct(
+    protected array $pluginNamespaces = [],
+    protected string $pluginDefinitionAttributeName = Plugin::class,
+    protected array $additionalNamespaces = []
+  ) {
+    $file_cache_suffix = str_replace('\\', '_', $this->pluginDefinitionAttributeName);
+    $file_cache_suffix .= ':' . Crypt::hashBase64(serialize($this->additionalNamespaces));
+    $this->fileCache = FileCacheFactory::get('attribute_discovery:' . $this->getFileCacheSuffix($file_cache_suffix));
+  }
+
+  /**
+   * Gets the file cache suffix.
+   *
+   * This method allows classes that extend this class to add additional
+   * information to the file cache collection name.
+   *
+   * @param string $default_suffix
+   *   The default file cache suffix.
+   *
+   * @return string
+   *   The file cache suffix.
+   */
+  protected function getFileCacheSuffix(string $default_suffix): string {
+    return $default_suffix;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getDefinitions() {
+    $definitions = [];
+
+    // Search for classes within all PSR-4 namespace locations.
+    foreach ($this->getPluginNamespaces() as $namespace => $dirs) {
+      foreach ($dirs as $dir) {
+        if (file_exists($dir)) {
+          $iterator = new \RecursiveIteratorIterator(
+            new \RecursiveDirectoryIterator($dir, \RecursiveDirectoryIterator::SKIP_DOTS)
+          );
+          foreach ($iterator as $fileinfo) {
+            if ($fileinfo->getExtension() == 'php') {
+              if ($cached = $this->fileCache->get($fileinfo->getPathName())) {
+                if (isset($cached['id'])) {
+                  // Explicitly unserialize this to create a new object instance.
+                  $definitions[$cached['id']] = unserialize($cached['content']);
+                }
+                continue;
+              }
+
+              $sub_path = $iterator->getSubIterator()->getSubPath();
+              $sub_path = $sub_path ? str_replace(DIRECTORY_SEPARATOR, '\\', $sub_path) . '\\' : '';
+              $class = $namespace . '\\' . $sub_path . $fileinfo->getBasename('.php');
+
+              // @todo For annotations we used a special reader to avoid
+              //   reflection. At the moment there is no 3rd party library for
+              //   parsing attributes without reflection. Ideas for performance
+              //   improvements here:
+              //   * Build our own library to do this.
+              //   * Search the file for "#[" to see is there is an attribute.
+              $reflected_class = new \ReflectionClass($class);
+              ['id' => $id, 'content' => $content] = $this->parseClass($class, $reflected_class);
+
+              if ($id) {
+                $definitions[$id] = $content;
+                // Explicitly serialize this to create a new object instance.
+                $this->fileCache->set($fileinfo->getPathName(), ['id' => $id, 'content' => serialize($content)]);
+              }
+              else {
+                // Store a NULL object, so the file is not reparsed again.
+                $this->fileCache->set($fileinfo->getPathName(), [NULL]);
+              }
+            }
+          }
+        }
+      }
+    }
+
+    // Plugin discovery is a memory expensive process due to reflection and the
+    // number of files process. Collect cycles at the end of discovery to be as
+    // efficient as possible.
+    gc_collect_cycles();
+    return $definitions;
+  }
+
+  /**
+   * Parses attributes from a class.
+   *
+   * @param string $class
+   *   The class to parse.
+   * @param \ReflectionClass $reflection_class
+   *   The \ReflectionClass for the class.
+   *
+   * @return array
+   *   An array with the keys 'id' and 'content'. The 'id' is the plugin ID and
+   *   'content' is the plugin definition.
+   *
+   * @throws \ReflectionException
+   */
+  protected function parseClass(string $class, \ReflectionClass $reflection_class): array {
+    $id = $content = NULL;
+    if ($attributes = $reflection_class->getAttributes($this->pluginDefinitionAttributeName, \ReflectionAttribute::IS_INSTANCEOF)) {
+      /** @var \Drupal\Component\PhpAttribute\PhpAttributeInterface $attribute */
+      $attribute = $attributes[0]->newInstance();
+      $this->prepareAttributeDefinition($attribute, $class);
+
+      $id = $attribute->getId();
+      $content = $attribute->get();
+    }
+    return ['id' => $id, 'content' => $content];
+  }
+
+  /**
+   * Prepares the attribute definition.
+   *
+   * @param \Drupal\Component\PhpAttribute\PhpAttributeInterface $attribute
+   *   The attribute derived from the plugin.
+   * @param string $class
+   *   The class used for the plugin.
+   */
+  protected function prepareAttributeDefinition(PhpAttributeInterface $attribute, string $class): void {
+    $attribute->setClass($class);
+  }
+
+  /**
+   * Gets an array of PSR-4 namespaces to search for plugin classes.
+   *
+   * @return string[][]
+   */
+  protected function getPluginNamespaces(): array {
+    return $this->pluginNamespaces;
+  }
+
+}
diff --git a/core/lib/Drupal/Component/PhpAttribute/PluginID.php b/core/lib/Drupal/Component/PhpAttribute/PluginID.php
new file mode 100644
index 0000000000..de7b4ea63f
--- /dev/null
+++ b/core/lib/Drupal/Component/PhpAttribute/PluginID.php
@@ -0,0 +1,22 @@
+<?php
+
+namespace Drupal\Component\PhpAttribute;
+
+/**
+ * Defines a Plugin attribute object that just contains an ID.
+ */
+#[\Attribute(\Attribute::TARGET_CLASS)]
+class PluginID extends PhpAttributeBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public function get(): array {
+    return [
+      'id' => $this->getId(),
+      'class' => $this->getClass(),
+      'provider' => $this->getProvider(),
+    ];
+  }
+
+}
diff --git a/core/lib/Drupal/Component/PhpAttribute/TESTING.txt b/core/lib/Drupal/Component/PhpAttribute/TESTING.txt
new file mode 100644
index 0000000000..7ff1d57e2d
--- /dev/null
+++ b/core/lib/Drupal/Component/PhpAttribute/TESTING.txt
@@ -0,0 +1,18 @@
+HOW-TO: Test this Drupal component
+
+In order to test this component, you'll need to get the entire Drupal repo and
+run the tests there.
+
+You'll find the tests under core/tests/Drupal/Tests/Component.
+
+You can get the full Drupal repo here:
+https://www.drupal.org/project/drupal/git-instructions
+
+You can find more information about running PHPUnit tests with Drupal here:
+https://www.drupal.org/node/2116263
+
+Each component in the Drupal\Component namespace has its own annotated test
+group. You can use this group to run only the tests for this component. Like
+this:
+
+$ ./vendor/bin/phpunit -c core --group PhpAttribute
diff --git a/core/lib/Drupal/Component/PhpAttribute/composer.json b/core/lib/Drupal/Component/PhpAttribute/composer.json
new file mode 100644
index 0000000000..5c3427f92b
--- /dev/null
+++ b/core/lib/Drupal/Component/PhpAttribute/composer.json
@@ -0,0 +1,26 @@
+{
+    "name": "drupal/core-php-attribute",
+    "description": "PHP attribute discovery and implementation of plugins.",
+    "keywords": [
+        "drupal"
+    ],
+    "homepage": "https://www.drupal.org/project/drupal",
+    "license": "GPL-2.0-or-later",
+    "require": {
+        "php": ">=8.1.0",
+        "drupal/core-file-cache": "10.1.x-dev",
+        "drupal/core-plugin": "10.1.x-dev",
+        "drupal/core-utility": "10.1.x-dev"
+    },
+    "autoload": {
+        "psr-4": {
+            "Drupal\\Component\\PhpAttribute\\": ""
+        }
+    },
+    "extra": {
+        "_readme": [
+            "This file was partially generated automatically. See: https://www.drupal.org/node/3293830"
+        ]
+    },
+    "minimum-stability": "dev"
+}
diff --git a/core/lib/Drupal/Core/Action/ActionManager.php b/core/lib/Drupal/Core/Action/ActionManager.php
index fda253b5a9..398873d184 100644
--- a/core/lib/Drupal/Core/Action/ActionManager.php
+++ b/core/lib/Drupal/Core/Action/ActionManager.php
@@ -3,6 +3,7 @@
 namespace Drupal\Core\Action;
 
 use Drupal\Component\Plugin\CategorizingPluginManagerInterface;
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Plugin\CategorizingPluginManagerTrait;
@@ -32,7 +33,7 @@ class ActionManager extends DefaultPluginManager implements CategorizingPluginMa
    *   The module handler to invoke the alter hook with.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler) {
-    parent::__construct('Plugin/Action', $namespaces, $module_handler, 'Drupal\Core\Action\ActionInterface', 'Drupal\Core\Annotation\Action');
+    parent::__construct('Plugin/Action', $namespaces, $module_handler, 'Drupal\Core\Action\ActionInterface', 'Drupal\Core\Annotation\Action', [], Action::class);
     $this->alterInfo('action_info');
     $this->setCacheBackend($cache_backend, 'action_info');
   }
diff --git a/core/lib/Drupal/Core/Action/Plugin/Action/DeleteAction.php b/core/lib/Drupal/Core/Action/Plugin/Action/DeleteAction.php
index fcf76a4fbe..2e26ba4f3c 100644
--- a/core/lib/Drupal/Core/Action/Plugin/Action/DeleteAction.php
+++ b/core/lib/Drupal/Core/Action/Plugin/Action/DeleteAction.php
@@ -2,20 +2,22 @@
 
 namespace Drupal\Core\Action\Plugin\Action;
 
+use Drupal\Core\Action\Plugin\Action\Derivative\EntityDeleteActionDeriver;
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\TempStore\PrivateTempStoreFactory;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Redirects to an entity deletion form.
- *
- * @Action(
- *   id = "entity:delete_action",
- *   action_label = @Translation("Delete"),
- *   deriver = "Drupal\Core\Action\Plugin\Action\Derivative\EntityDeleteActionDeriver",
- * )
  */
+#[Action(
+  id: 'entity:delete_action',
+  action_label: new TranslatableMarkup('Delete'),
+  deriver: EntityDeleteActionDeriver::class
+)]
 class DeleteAction extends EntityActionBase {
 
   /**
diff --git a/core/lib/Drupal/Core/Action/Plugin/Action/EmailAction.php b/core/lib/Drupal/Core/Action/Plugin/Action/EmailAction.php
index 2a675fb990..b1045b232a 100644
--- a/core/lib/Drupal/Core/Action/Plugin/Action/EmailAction.php
+++ b/core/lib/Drupal/Core/Action/Plugin/Action/EmailAction.php
@@ -6,25 +6,26 @@
 use Drupal\Component\Utility\EmailValidatorInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Action\ConfigurableActionBase;
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Mail\MailManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Utility\Token;
 use Psr\Log\LoggerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Sends an email message.
- *
- * @Action(
- *   id = "action_send_email_action",
- *   label = @Translation("Send email"),
- *   type = "system"
- * )
  */
+#[Action(
+  id: 'action_send_email_action',
+  label: new TranslatableMarkup('Send email'),
+  type: 'system'
+)]
 class EmailAction extends ConfigurableActionBase implements ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/lib/Drupal/Core/Action/Plugin/Action/GotoAction.php b/core/lib/Drupal/Core/Action/Plugin/Action/GotoAction.php
index befc21f6a5..00000fa99d 100644
--- a/core/lib/Drupal/Core/Action/Plugin/Action/GotoAction.php
+++ b/core/lib/Drupal/Core/Action/Plugin/Action/GotoAction.php
@@ -5,9 +5,11 @@
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Action\ConfigurableActionBase;
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Utility\UnroutedUrlAssemblerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Contracts\EventDispatcher\EventDispatcherInterface;
@@ -16,13 +18,12 @@
 
 /**
  * Redirects to a different URL.
- *
- * @Action(
- *   id = "action_goto_action",
- *   label = @Translation("Redirect to URL"),
- *   type = "system"
- * )
  */
+#[Action(
+  id: 'action_goto_action',
+  label: new TranslatableMarkup('Redirect to URL'),
+  type: 'system'
+)]
 class GotoAction extends ConfigurableActionBase implements ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/lib/Drupal/Core/Action/Plugin/Action/MessageAction.php b/core/lib/Drupal/Core/Action/Plugin/Action/MessageAction.php
index 19575278cc..067b1b491e 100644
--- a/core/lib/Drupal/Core/Action/Plugin/Action/MessageAction.php
+++ b/core/lib/Drupal/Core/Action/Plugin/Action/MessageAction.php
@@ -4,23 +4,24 @@
 
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Action\ConfigurableActionBase;
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Utility\Token;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Sends a message to the current user's screen.
- *
- * @Action(
- *   id = "action_message_action",
- *   label = @Translation("Display a message to the user"),
- *   type = "system"
- * )
  */
+#[Action(
+  id: 'action_message_action',
+  label: new TranslatableMarkup('Display a message to the user'),
+  type: 'system'
+)]
 class MessageAction extends ConfigurableActionBase implements ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/lib/Drupal/Core/Action/Plugin/Action/PublishAction.php b/core/lib/Drupal/Core/Action/Plugin/Action/PublishAction.php
index 8d0cf756b4..867ba2aedd 100644
--- a/core/lib/Drupal/Core/Action/Plugin/Action/PublishAction.php
+++ b/core/lib/Drupal/Core/Action/Plugin/Action/PublishAction.php
@@ -2,17 +2,19 @@
 
 namespace Drupal\Core\Action\Plugin\Action;
 
+use Drupal\Core\Action\Plugin\Action\Derivative\EntityPublishedActionDeriver;
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Publishes an entity.
- *
- * @Action(
- *   id = "entity:publish_action",
- *   action_label = @Translation("Publish"),
- *   deriver = "Drupal\Core\Action\Plugin\Action\Derivative\EntityPublishedActionDeriver",
- * )
  */
+#[Action(
+  id: 'entity:publish_action',
+  action_label: new TranslatableMarkup('Publish'),
+  deriver: EntityPublishedActionDeriver::class
+)]
 class PublishAction extends EntityActionBase {
 
   /**
diff --git a/core/lib/Drupal/Core/Action/Plugin/Action/SaveAction.php b/core/lib/Drupal/Core/Action/Plugin/Action/SaveAction.php
index fc63e5c16e..bd04b33852 100644
--- a/core/lib/Drupal/Core/Action/Plugin/Action/SaveAction.php
+++ b/core/lib/Drupal/Core/Action/Plugin/Action/SaveAction.php
@@ -3,19 +3,21 @@
 namespace Drupal\Core\Action\Plugin\Action;
 
 use Drupal\Component\Datetime\TimeInterface;
+use Drupal\Core\Action\Plugin\Action\Derivative\EntityChangedActionDeriver;
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Provides an action that can save any entity.
- *
- * @Action(
- *   id = "entity:save_action",
- *   action_label = @Translation("Save"),
- *   deriver = "Drupal\Core\Action\Plugin\Action\Derivative\EntityChangedActionDeriver",
- * )
  */
+#[Action(
+  id: 'entity:save_action',
+  action_label: new TranslatableMarkup('Save'),
+  deriver: EntityChangedActionDeriver::class
+)]
 class SaveAction extends EntityActionBase {
 
   /**
diff --git a/core/lib/Drupal/Core/Action/Plugin/Action/UnpublishAction.php b/core/lib/Drupal/Core/Action/Plugin/Action/UnpublishAction.php
index bb3f6c2d98..7aca75e7df 100644
--- a/core/lib/Drupal/Core/Action/Plugin/Action/UnpublishAction.php
+++ b/core/lib/Drupal/Core/Action/Plugin/Action/UnpublishAction.php
@@ -2,17 +2,19 @@
 
 namespace Drupal\Core\Action\Plugin\Action;
 
+use Drupal\Core\Action\Plugin\Action\Derivative\EntityPublishedActionDeriver;
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Unpublishes an entity.
- *
- * @Action(
- *   id = "entity:unpublish_action",
- *   action_label = @Translation("Unpublish"),
- *   deriver = "Drupal\Core\Action\Plugin\Action\Derivative\EntityPublishedActionDeriver",
- * )
  */
+#[Action(
+  id: 'entity:unpublish_action',
+  action_label: new TranslatableMarkup('Unpublish'),
+  deriver: EntityPublishedActionDeriver::class
+)]
 class UnpublishAction extends EntityActionBase {
 
   /**
diff --git a/core/lib/Drupal/Core/Attribute/Action.php b/core/lib/Drupal/Core/Attribute/Action.php
new file mode 100644
index 0000000000..7fe799a141
--- /dev/null
+++ b/core/lib/Drupal/Core/Attribute/Action.php
@@ -0,0 +1,53 @@
+<?php
+
+namespace Drupal\Core\Attribute;
+
+use Drupal\Component\PhpAttribute\Plugin;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+
+/**
+ * Defines an Action attribute object.
+ *
+ * Plugin Namespace: Plugin\Action
+ *
+ * @see \Drupal\Core\Action\ActionInterface
+ * @see \Drupal\Core\Action\ActionManager
+ * @see \Drupal\Core\Action\ActionBase
+ * @see \Drupal\Core\Action\Plugin\Action\UnpublishAction
+ * @see plugin_api
+ *
+ * @Annotation
+ */
+#[\Attribute(\Attribute::TARGET_CLASS)]
+class Action extends Plugin {
+
+  /**
+   * Constructs a Block attribute.
+   *
+   * @param string $id
+   *   The plugin ID.
+   * @param \Drupal\Core\StringTranslation\TranslatableMarkup|null $label
+   *   The label of the action.
+   * @param \Drupal\Core\StringTranslation\TranslatableMarkup|null $action_label
+   *   (optional) A label that can be used by the action deriver.
+   * @param \Drupal\Core\StringTranslation\TranslatableMarkup|null $category
+   *   (optional) The category under which the action should be listed in the
+   *   UI.
+   * @param string|null $deriver
+   *   (optional) The deriver class.
+   * @param string|null $confirm_form_route_name
+   *   (optional) The route name for a confirmation form for this action.
+   * @param string|null $type
+   *   (optional) The entity type the action can apply to.
+   */
+  public function __construct(
+    public readonly string $id,
+    public readonly ?TranslatableMarkup $label = NULL,
+    public readonly ?TranslatableMarkup $action_label = NULL,
+    public readonly ?TranslatableMarkup $category = NULL,
+    public readonly ?string $deriver = NULL,
+    public readonly ?string $confirm_form_route_name = NULL,
+    public readonly ?string $type = NULL
+  ) {}
+
+}
diff --git a/core/lib/Drupal/Core/Block/Attribute/Block.php b/core/lib/Drupal/Core/Block/Attribute/Block.php
new file mode 100644
index 0000000000..9feb67c161
--- /dev/null
+++ b/core/lib/Drupal/Core/Block/Attribute/Block.php
@@ -0,0 +1,40 @@
+<?php
+
+namespace Drupal\Core\Block\Attribute;
+
+use Drupal\Component\PhpAttribute\Plugin;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+
+/**
+ * The Block attribute.
+ */
+#[\Attribute(\Attribute::TARGET_CLASS)]
+class Block extends Plugin {
+
+  /**
+   * Constructs a Block attribute.
+   *
+   * @param string $id
+   *   The plugin ID.
+   * @param \Drupal\Core\StringTranslation\TranslatableMarkup|null $admin_label
+   *   The administrative label of the block.
+   * @param \Drupal\Core\StringTranslation\TranslatableMarkup|null $category
+   *   (optional) The category in the admin UI where the block will be listed.
+   * @param \Drupal\Core\Annotation\ContextDefinition[] $context_definitions
+   *   (optional) An array of context definitions describing the context used by
+   *   the plugin. The array is keyed by context names.
+   * @param string|null $deriver
+   *   (optional) The deriver class.
+   * @param string[] $forms
+   *   (optional) An array of form class names keyed by a string.
+   */
+  public function __construct(
+    public readonly string $id,
+    public readonly ?TranslatableMarkup $admin_label = NULL,
+    public readonly ?TranslatableMarkup $category = NULL,
+    public readonly array $context_definitions = [],
+    public readonly ?string $deriver = NULL,
+    public readonly array $forms = []
+  ) {}
+
+}
diff --git a/core/lib/Drupal/Core/Block/BlockManager.php b/core/lib/Drupal/Core/Block/BlockManager.php
index 026d810fc0..7efab0038d 100644
--- a/core/lib/Drupal/Core/Block/BlockManager.php
+++ b/core/lib/Drupal/Core/Block/BlockManager.php
@@ -3,6 +3,7 @@
 namespace Drupal\Core\Block;
 
 use Drupal\Component\Plugin\FallbackPluginManagerInterface;
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Plugin\CategorizingPluginManagerTrait;
@@ -45,7 +46,7 @@ class BlockManager extends DefaultPluginManager implements BlockManagerInterface
    *   The logger.
    */
   public function __construct(\Traversable $namespaces, CacheBackendInterface $cache_backend, ModuleHandlerInterface $module_handler, LoggerInterface $logger) {
-    parent::__construct('Plugin/Block', $namespaces, $module_handler, 'Drupal\Core\Block\BlockPluginInterface', 'Drupal\Core\Block\Annotation\Block');
+    parent::__construct('Plugin/Block', $namespaces, $module_handler, 'Drupal\Core\Block\BlockPluginInterface', 'Drupal\Core\Block\Annotation\Block', [], Block::class);
 
     $this->alterInfo($this->getType());
     $this->setCacheBackend($cache_backend, 'block_plugins');
diff --git a/core/lib/Drupal/Core/Block/Plugin/Block/Broken.php b/core/lib/Drupal/Core/Block/Plugin/Block/Broken.php
index 0d09afb850..2d92c161d9 100644
--- a/core/lib/Drupal/Core/Block/Plugin/Block/Broken.php
+++ b/core/lib/Drupal/Core/Block/Plugin/Block/Broken.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Core\Block\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockPluginInterface;
 use Drupal\Core\Block\BlockPluginTrait;
 use Drupal\Core\Cache\CacheableDependencyTrait;
@@ -9,17 +10,17 @@
 use Drupal\Core\Plugin\PluginBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Defines a fallback plugin for missing block plugins.
- *
- * @Block(
- *   id = "broken",
- *   admin_label = @Translation("Broken/Missing"),
- *   category = @Translation("Block"),
- * )
  */
+#[Block(
+  id: "broken",
+  admin_label: new TranslatableMarkup("Broken/Missing"),
+  category: new TranslatableMarkup("Block")
+)]
 class Broken extends PluginBase implements BlockPluginInterface, ContainerFactoryPluginInterface {
 
   use BlockPluginTrait;
diff --git a/core/lib/Drupal/Core/Block/Plugin/Block/PageTitleBlock.php b/core/lib/Drupal/Core/Block/Plugin/Block/PageTitleBlock.php
index af1fb6ee37..2689acae4a 100644
--- a/core/lib/Drupal/Core/Block/Plugin/Block/PageTitleBlock.php
+++ b/core/lib/Drupal/Core/Block/Plugin/Block/PageTitleBlock.php
@@ -2,20 +2,21 @@
 
 namespace Drupal\Core\Block\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Block\TitleBlockPluginInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides a block to display the page title.
- *
- * @Block(
- *   id = "page_title_block",
- *   admin_label = @Translation("Page title"),
- *   forms = {
- *     "settings_tray" = FALSE,
- *   },
- * )
  */
+#[Block(
+  id: "page_title_block",
+  admin_label: new TranslatableMarkup("Page title"),
+  forms: [
+    'settings_tray' => FALSE,
+  ]
+)]
 class PageTitleBlock extends BlockBase implements TitleBlockPluginInterface {
 
   /**
diff --git a/core/lib/Drupal/Core/Menu/Plugin/Block/LocalActionsBlock.php b/core/lib/Drupal/Core/Menu/Plugin/Block/LocalActionsBlock.php
index 70ef668bf8..27591d4a3f 100644
--- a/core/lib/Drupal/Core/Menu/Plugin/Block/LocalActionsBlock.php
+++ b/core/lib/Drupal/Core/Menu/Plugin/Block/LocalActionsBlock.php
@@ -2,20 +2,21 @@
 
 namespace Drupal\Core\Menu\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Menu\LocalActionManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 
 /**
  * Provides a block to display the local actions.
- *
- * @Block(
- *   id = "local_actions_block",
- *   admin_label = @Translation("Primary admin actions")
- * )
  */
+#[Block(
+  id: "local_actions_block",
+  admin_label: new TranslatableMarkup("Primary admin actions")
+)]
 class LocalActionsBlock extends BlockBase implements ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/lib/Drupal/Core/Menu/Plugin/Block/LocalTasksBlock.php b/core/lib/Drupal/Core/Menu/Plugin/Block/LocalTasksBlock.php
index 6a518ef3ef..0d7cf1c3a2 100644
--- a/core/lib/Drupal/Core/Menu/Plugin/Block/LocalTasksBlock.php
+++ b/core/lib/Drupal/Core/Menu/Plugin/Block/LocalTasksBlock.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\Core\Menu\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Form\FormStateInterface;
@@ -9,16 +10,16 @@
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Render\Element;
 use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Provides a "Tabs" block to display the local tasks.
- *
- * @Block(
- *   id = "local_tasks_block",
- *   admin_label = @Translation("Tabs"),
- * )
  */
+#[Block(
+  id: "local_tasks_block",
+  admin_label: new TranslatableMarkup("Tabs")
+)]
 class LocalTasksBlock extends BlockBase implements ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/lib/Drupal/Core/Plugin/Context/ContextDefinition.php b/core/lib/Drupal/Core/Plugin/Context/ContextDefinition.php
index c2e5d53331..9b95deae78 100644
--- a/core/lib/Drupal/Core/Plugin/Context/ContextDefinition.php
+++ b/core/lib/Drupal/Core/Plugin/Context/ContextDefinition.php
@@ -104,14 +104,20 @@ public static function create($data_type = 'any') {
    *   The description of this context definition for the UI.
    * @param mixed $default_value
    *   The default value of this definition.
+   * @param array $constraints
+   *   An array of constraints keyed by the constraint name and a value of an
+   *   array constraint options or a NULL.
    */
-  public function __construct($data_type = 'any', $label = NULL, $required = TRUE, $multiple = FALSE, $description = NULL, $default_value = NULL) {
+  public function __construct($data_type = 'any', $label = NULL, $required = TRUE, $multiple = FALSE, $description = NULL, $default_value = NULL, array $constraints = []) {
     $this->dataType = $data_type;
     $this->label = $label;
     $this->isRequired = $required;
     $this->isMultiple = $multiple;
     $this->description = $description;
     $this->defaultValue = $default_value;
+    foreach ($constraints as $constraint_name => $options) {
+      $this->addConstraint($constraint_name, $options);
+    }
 
     assert(strpos($data_type, 'entity:') !== 0 || $this instanceof EntityContextDefinition);
   }
diff --git a/core/lib/Drupal/Core/Plugin/Context/EntityContextDefinition.php b/core/lib/Drupal/Core/Plugin/Context/EntityContextDefinition.php
index 08c620b637..946fb8e17a 100644
--- a/core/lib/Drupal/Core/Plugin/Context/EntityContextDefinition.php
+++ b/core/lib/Drupal/Core/Plugin/Context/EntityContextDefinition.php
@@ -17,13 +17,13 @@ class EntityContextDefinition extends ContextDefinition {
   /**
    * {@inheritdoc}
    */
-  public function __construct($data_type = 'any', $label = NULL, $required = TRUE, $multiple = FALSE, $description = NULL, $default_value = NULL) {
+  public function __construct($data_type = 'any', $label = NULL, $required = TRUE, $multiple = FALSE, $description = NULL, $default_value = NULL, array $constraints = []) {
     // Prefix the data type with 'entity:' so that this class can be constructed
     // like so: new EntityContextDefinition('node')
     if (strpos($data_type, 'entity:') !== 0) {
       $data_type = "entity:$data_type";
     }
-    parent::__construct($data_type, $label, $required, $multiple, $description, $default_value);
+    parent::__construct($data_type, $label, $required, $multiple, $description, $default_value, $constraints);
   }
 
   /**
diff --git a/core/lib/Drupal/Core/Plugin/DefaultPluginManager.php b/core/lib/Drupal/Core/Plugin/DefaultPluginManager.php
index 62c78c3448..2f42fd568d 100644
--- a/core/lib/Drupal/Core/Plugin/DefaultPluginManager.php
+++ b/core/lib/Drupal/Core/Plugin/DefaultPluginManager.php
@@ -3,12 +3,14 @@
 namespace Drupal\Core\Plugin;
 
 use Drupal\Component\Assertion\Inspector;
+use Drupal\Component\PhpAttribute\Plugin;
 use Drupal\Component\Plugin\Definition\PluginDefinitionInterface;
 use Drupal\Component\Plugin\Discovery\CachedDiscoveryInterface;
 use Drupal\Core\Cache\CacheableDependencyInterface;
 use Drupal\Core\Cache\CacheBackendInterface;
 use Drupal\Core\Cache\UseCacheBackendTrait;
 use Drupal\Component\Plugin\Discovery\DiscoveryCachedTrait;
+use Drupal\Core\Plugin\Discovery\PhpAttributeDiscoveryWithAnnotations;
 use Drupal\Core\Plugin\Discovery\ContainerDerivativeDiscoveryDecorator;
 use Drupal\Component\Plugin\PluginManagerBase;
 use Drupal\Component\Plugin\PluginManagerInterface;
@@ -82,6 +84,13 @@ class DefaultPluginManager extends PluginManagerBase implements PluginManagerInt
    */
   protected $pluginDefinitionAnnotationName;
 
+  /**
+   * The name of the attribute that contains the plugin definition.
+   *
+   * @var string
+   */
+  protected $pluginDefinitionAttributeName;
+
   /**
    * The interface each plugin should implement.
    *
@@ -126,11 +135,15 @@ class DefaultPluginManager extends PluginManagerBase implements PluginManagerInt
    *   Defaults to 'Drupal\Component\Annotation\Plugin'.
    * @param string[] $additional_annotation_namespaces
    *   (optional) Additional namespaces to scan for annotation definitions.
+   * @param string $plugin_definition_attribute_name
+   *   (optional) The name of the attribute that contains the plugin definition.
+   *   Defaults to 'Drupal\Component\Attribute\Plugin'.
    */
-  public function __construct($subdir, \Traversable $namespaces, ModuleHandlerInterface $module_handler, $plugin_interface = NULL, $plugin_definition_annotation_name = 'Drupal\Component\Annotation\Plugin', array $additional_annotation_namespaces = []) {
+  public function __construct($subdir, \Traversable $namespaces, ModuleHandlerInterface $module_handler, $plugin_interface = NULL, $plugin_definition_annotation_name = 'Drupal\Component\Annotation\Plugin', array $additional_annotation_namespaces = [], string $plugin_definition_attribute_name = Plugin::class) {
     $this->subdir = $subdir;
     $this->namespaces = $namespaces;
     $this->pluginDefinitionAnnotationName = $plugin_definition_annotation_name;
+    $this->pluginDefinitionAttributeName = $plugin_definition_attribute_name;
     $this->pluginInterface = $plugin_interface;
     $this->moduleHandler = $module_handler;
     $this->additionalAnnotationNamespaces = $additional_annotation_namespaces;
@@ -265,7 +278,12 @@ public function processDefinition(&$definition, $plugin_id) {
    */
   protected function getDiscovery() {
     if (!$this->discovery) {
-      $discovery = new AnnotatedClassDiscovery($this->subdir, $this->namespaces, $this->pluginDefinitionAnnotationName, $this->additionalAnnotationNamespaces);
+      if (isset($this->pluginDefinitionAttributeName)) {
+        $discovery = new PhpAttributeDiscoveryWithAnnotations($this->subdir, $this->namespaces, $this->pluginDefinitionAttributeName, $this->additionalAnnotationNamespaces, $this->pluginDefinitionAnnotationName);
+      }
+      else {
+        $discovery = new AnnotatedClassDiscovery($this->subdir, $this->namespaces, $this->pluginDefinitionAnnotationName, $this->additionalAnnotationNamespaces);
+      }
       $this->discovery = new ContainerDerivativeDiscoveryDecorator($discovery);
     }
     return $this->discovery;
diff --git a/core/lib/Drupal/Core/Plugin/Discovery/PhpAttributeClassDiscovery.php b/core/lib/Drupal/Core/Plugin/Discovery/PhpAttributeClassDiscovery.php
new file mode 100644
index 0000000000..6c770c8e13
--- /dev/null
+++ b/core/lib/Drupal/Core/Plugin/Discovery/PhpAttributeClassDiscovery.php
@@ -0,0 +1,129 @@
+<?php
+
+namespace Drupal\Core\Plugin\Discovery;
+
+use Drupal\Component\PhpAttribute\PhpAttributeInterface;
+use Drupal\Component\PhpAttribute\Plugin\Discovery\PhpAttributeClassDiscovery as ComponentPhpAttributeClassDiscovery;
+
+/**
+ * Defines a discovery mechanism to find plugins using attributes.
+ */
+class PhpAttributeClassDiscovery extends ComponentPhpAttributeClassDiscovery {
+
+  /**
+   * A suffix to append to each PSR-4 directory associated with a base
+   * namespace, to form the directories where plugins are found.
+   *
+   * @var string
+   */
+  protected $directorySuffix = '';
+
+  /**
+   * A suffix to append to each base namespace, to obtain the namespaces where
+   * plugins are found.
+   *
+   * @var string
+   */
+  protected $namespaceSuffix = '';
+
+  /**
+   * A list of base namespaces with their PSR-4 directories.
+   *
+   * @var \Traversable
+   */
+  protected $rootNamespacesIterator;
+
+  /**
+   * Constructs an AttributeClassDiscovery object.
+   *
+   * @param string $subdir
+   *   Either the plugin's subdirectory, for example 'Plugin/views/filter', or
+   *   empty string if plugins are located at the top level of the namespace.
+   * @param \Traversable $root_namespaces
+   *   An object that implements \Traversable which contains the root paths
+   *   keyed by the corresponding namespace to look for plugin implementations.
+   *   If $subdir is not an empty string, it will be appended to each namespace.
+   * @param string $plugin_definition_attribute_name
+   *   (optional) The name of the attribute that contains the plugin definition.
+   *   Defaults to 'Drupal\Component\Attribute\Plugin'.
+   * @param string[] $additional_namespaces
+   *   (optional) Additional namespaces to scan for attribute definitions.
+   */
+  public function __construct(string $subdir, \Traversable $root_namespaces, string $plugin_definition_attribute_name = 'Drupal\Component\Attribute\Plugin', array $additional_namespaces = []) {
+    if ($subdir) {
+      // Prepend a directory separator to $subdir,
+      // if it does not already have one.
+      if ('/' !== $subdir[0]) {
+        $subdir = '/' . $subdir;
+      }
+      $this->directorySuffix = $subdir;
+      $this->namespaceSuffix = str_replace('/', '\\', $subdir);
+    }
+    $this->rootNamespacesIterator = $root_namespaces;
+    $plugin_namespaces = [];
+    parent::__construct($plugin_namespaces, $plugin_definition_attribute_name, $additional_namespaces);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function prepareAttributeDefinition(PhpAttributeInterface $attribute, string $class): void {
+    parent::prepareAttributeDefinition($attribute, $class);
+
+    if (!$attribute->hasProvider()) {
+      $attribute->setProvider($this->getProviderFromNamespace($class));
+    }
+  }
+
+  /**
+   * Extracts the provider name from a Drupal namespace.
+   *
+   * @param string $namespace
+   *   The namespace to extract the provider from.
+   *
+   * @return string|null
+   *   The matching provider name, or NULL otherwise.
+   */
+  protected function getProviderFromNamespace(string $namespace): ?string {
+    preg_match('|^Drupal\\\\(?<provider>[\w]+)\\\\|', $namespace, $matches);
+
+    if (isset($matches['provider'])) {
+      return mb_strtolower($matches['provider']);
+    }
+
+    return NULL;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getPluginNamespaces(): array {
+    $plugin_namespaces = [];
+    if ($this->namespaceSuffix) {
+      foreach ($this->rootNamespacesIterator as $namespace => $dirs) {
+        // Append the namespace suffix to the base namespace, to obtain the
+        // plugin namespace; for example, 'Drupal\Views' may become
+        // 'Drupal\Views\Plugin\Block'.
+        $namespace .= $this->namespaceSuffix;
+        foreach ((array) $dirs as $dir) {
+          // Append the directory suffix to the PSR-4 base directory, to obtain
+          // the directory where plugins are found. For example,
+          // DRUPAL_ROOT . '/core/modules/views/src' may become
+          // DRUPAL_ROOT . '/core/modules/views/src/Plugin/Block'.
+          $plugin_namespaces[$namespace][] = $dir . $this->directorySuffix;
+        }
+      }
+    }
+    else {
+      // Both the namespace suffix and the directory suffix are empty,
+      // so the plugin namespaces and directories are the same as the base
+      // directories.
+      foreach ($this->rootNamespacesIterator as $namespace => $dirs) {
+        $plugin_namespaces[$namespace] = (array) $dirs;
+      }
+    }
+
+    return $plugin_namespaces;
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Plugin/Discovery/PhpAttributeDiscoveryWithAnnotations.php b/core/lib/Drupal/Core/Plugin/Discovery/PhpAttributeDiscoveryWithAnnotations.php
new file mode 100644
index 0000000000..68bafc7cab
--- /dev/null
+++ b/core/lib/Drupal/Core/Plugin/Discovery/PhpAttributeDiscoveryWithAnnotations.php
@@ -0,0 +1,132 @@
+<?php
+
+namespace Drupal\Core\Plugin\Discovery;
+
+use Doctrine\Common\Annotations\AnnotationRegistry;
+use Drupal\Component\Annotation\AnnotationInterface;
+use Drupal\Component\Annotation\Doctrine\SimpleAnnotationReader;
+
+/**
+ * Enables attribute discovery for plugin definitions.
+ */
+class PhpAttributeDiscoveryWithAnnotations extends PhpAttributeClassDiscovery {
+
+  /**
+   * The doctrine annotation reader.
+   *
+   * @var \Doctrine\Common\Annotations\Reader
+   */
+  protected $annotationReader;
+
+  /**
+   * The name of the annotation that contains the plugin definition.
+   *
+   * The class corresponding to this name must implement
+   * \Drupal\Component\Annotation\AnnotationInterface.
+   *
+   * @var string
+   */
+  protected $pluginDefinitionAnnotationName;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function __construct(string $subdir, \Traversable $root_namespaces, string $plugin_definition_attribute_name = 'Drupal\Component\Attribute\Plugin', array $additional_namespaces = [], string $plugin_definition_annotation_name = 'Drupal\Component\Annotation\Plugin') {
+    $this->pluginDefinitionAnnotationName = $plugin_definition_annotation_name;
+    parent::__construct($subdir, $root_namespaces, $plugin_definition_attribute_name, $additional_namespaces);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function getFileCacheSuffix(string $default_suffix):string {
+    return $default_suffix . ':' . str_replace('\\', '_', $this->pluginDefinitionAnnotationName);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getDefinitions() {
+    // Clear the annotation loaders of any previous annotation classes.
+    AnnotationRegistry::reset();
+    // Register the namespaces of classes that can be used for annotations.
+    AnnotationRegistry::registerLoader('class_exists');
+
+    $definitions = parent::getDefinitions();
+
+    $this->annotationReader = NULL;
+
+    return $definitions;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function parseClass(string $class, \ReflectionClass $reflection_class): array {
+    ['id' => $id, 'content' => $content] = parent::parseClass($class, $reflection_class);
+    if ($id === NULL) {
+      // @todo Handle deprecating definitions discover via annotations.
+      /** @var \Drupal\Component\Annotation\AnnotationInterface $annotation */
+      if ($annotation = $this->getAnnotationReader()->getClassAnnotation($reflection_class, $this->pluginDefinitionAnnotationName)) {
+        $this->prepareAnnotationDefinition($annotation, $class);
+
+        $id = $annotation->getId();
+        $content = $annotation->get();
+      }
+    }
+    return ['id' => $id, 'content' => $content];
+  }
+
+  /**
+   * Prepares the annotation definition.
+   *
+   * This is a copy of the prepareAnnotationDefinition method from annotated
+   * class discovery.
+   *
+   * @param \Drupal\Component\Annotation\AnnotationInterface $annotation
+   *   The annotation derived from the plugin.
+   * @param string $class
+   *   The class used for the plugin.
+   *
+   * @see \Drupal\Component\Annotation\Plugin\Discovery\AnnotatedClassDiscovery::prepareAnnotationDefinition()
+   * @see \Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery::prepareAnnotationDefinition()
+   */
+  private function prepareAnnotationDefinition(AnnotationInterface $annotation, $class) {
+    $annotation->setClass($class);
+    if (!$annotation->getProvider()) {
+      $annotation->setProvider($this->getProviderFromNamespace($class));
+    }
+  }
+
+  /**
+   * Gets the used doctrine annotation reader.
+   *
+   * This is a copy of the getAnnotationReader method from annotated class
+   * discovery.
+   *
+   * @return \Doctrine\Common\Annotations\Reader
+   *   The annotation reader.
+   *
+   * @see \Drupal\Component\Annotation\Plugin\Discovery\AnnotatedClassDiscovery::getAnnotationReader()
+   * @see \Drupal\Core\Plugin\Discovery\AnnotatedClassDiscovery::getAnnotationReader()
+   */
+  private function getAnnotationReader() {
+    if (!isset($this->annotationReader)) {
+      $this->annotationReader = new SimpleAnnotationReader();
+
+      // Add the namespaces from the main plugin annotation, like @EntityType.
+      $namespace = substr($this->pluginDefinitionAnnotationName, 0, strrpos($this->pluginDefinitionAnnotationName, '\\'));
+      $this->annotationReader->addNamespace($namespace);
+
+      // Register additional namespaces to be scanned for annotations.
+      foreach ($this->additionalNamespaces as $namespace) {
+        $this->annotationReader->addNamespace($namespace);
+      }
+
+      // Add the Core annotation classes like @Translation.
+      $this->annotationReader->addNamespace('Drupal\Core\Annotation');
+    }
+    return $this->annotationReader;
+  }
+
+}
diff --git a/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/AllowedValuesConstraint.php b/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/AllowedValuesConstraint.php
index 798805e7de..e9d33313ea 100644
--- a/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/AllowedValuesConstraint.php
+++ b/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/AllowedValuesConstraint.php
@@ -16,8 +16,14 @@
  */
 class AllowedValuesConstraint extends Choice {
 
-  public $strict = TRUE;
-  public $minMessage = 'You must select at least %limit choice.|You must select at least %limit choices.';
-  public $maxMessage = 'You must select at most %limit choice.|You must select at most %limit choices.';
+  /**
+   * {@inheritdoc}
+   */
+  public function __construct(array $options = NULL) {
+    $options['strict'] ??= TRUE;
+    $options['minMessage'] ??= 'You must select at least %limit choice.|You must select at least %limit choices.';
+    $options['maxMessage'] ??= 'You must select at most %limit choice.|You must select at most %limit choices.';
+    parent::__construct($options);
+  }
 
 }
diff --git a/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/CountConstraint.php b/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/CountConstraint.php
index a7f5dd56ce..109a40e9e4 100644
--- a/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/CountConstraint.php
+++ b/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/CountConstraint.php
@@ -17,9 +17,15 @@
  */
 class CountConstraint extends Count {
 
-  public $minMessage = 'This collection should contain %limit element or more.|This collection should contain %limit elements or more.';
-  public $maxMessage = 'This collection should contain %limit element or less.|This collection should contain %limit elements or less.';
-  public $exactMessage = 'This collection should contain exactly %limit element.|This collection should contain exactly %limit elements.';
+  /**
+   * {@inheritdoc}
+   */
+  public function __construct(array $options = NULL) {
+    $options['exactMessage'] ??= 'This collection should contain exactly %limit element.|This collection should contain exactly %limit elements.';
+    $options['minMessage'] ??= 'This collection should contain %limit element or more.|This collection should contain %limit elements or more.';
+    $options['maxMessage'] ??= 'This collection should contain %limit element or less.|This collection should contain %limit elements or less.';
+    parent::__construct($options);
+  }
 
   /**
    * {@inheritdoc}
diff --git a/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/LengthConstraint.php b/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/LengthConstraint.php
index 2aaca3974d..fb9a84e44e 100644
--- a/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/LengthConstraint.php
+++ b/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/LengthConstraint.php
@@ -19,9 +19,15 @@
  */
 class LengthConstraint extends Length {
 
-  public $maxMessage = 'This value is too long. It should have %limit character or less.|This value is too long. It should have %limit characters or less.';
-  public $minMessage = 'This value is too short. It should have %limit character or more.|This value is too short. It should have %limit characters or more.';
-  public $exactMessage = 'This value should have exactly %limit character.|This value should have exactly %limit characters.';
+  /**
+   * {@inheritdoc}
+   */
+  public function __construct(array $options = NULL) {
+    $options['exactMessage'] ??= 'This value should have exactly %limit character.|This value should have exactly %limit characters.';
+    $options['minMessage'] ??= 'This value is too short. It should have %limit character or more.|This value is too short. It should have %limit characters or more.';
+    $options['maxMessage'] ??= 'This value is too long. It should have %limit character or less.|This value is too long. It should have %limit characters or less.';
+    parent::__construct($options);
+  }
 
   /**
    * {@inheritdoc}
diff --git a/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/RegexConstraint.php b/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/RegexConstraint.php
index 63c6682e36..219b3f37d4 100644
--- a/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/RegexConstraint.php
+++ b/core/lib/Drupal/Core/Validation/Plugin/Validation/Constraint/RegexConstraint.php
@@ -16,8 +16,6 @@
  */
 class RegexConstraint extends Regex {
 
-  public $message = 'This value is not valid.';
-
   /**
    * {@inheritdoc}
    */
diff --git a/core/modules/action/tests/action_form_ajax_test/src/Plugin/Action/ActionAjaxTest.php b/core/modules/action/tests/action_form_ajax_test/src/Plugin/Action/ActionAjaxTest.php
index 8afc98cf54..05ce3766e2 100644
--- a/core/modules/action/tests/action_form_ajax_test/src/Plugin/Action/ActionAjaxTest.php
+++ b/core/modules/action/tests/action_form_ajax_test/src/Plugin/Action/ActionAjaxTest.php
@@ -4,18 +4,19 @@
 
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Action\ConfigurableActionBase;
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Plugin used for testing AJAX in action config entity forms.
- *
- * @Action(
- *   id = "action_form_ajax_test",
- *   label = @Translation("action_form_ajax_test"),
- *   type = "system"
- * )
  */
+#[Action(
+  id: 'action_form_ajax_test',
+  label: new TranslatableMarkup('action_form_ajax_test'),
+  type: 'system'
+)]
 class ActionAjaxTest extends ConfigurableActionBase {
 
   /**
diff --git a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestAccessBlock.php b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestAccessBlock.php
index 4bb9f24cc0..f663f701f2 100644
--- a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestAccessBlock.php
+++ b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestAccessBlock.php
@@ -3,21 +3,22 @@
 namespace Drupal\block_test\Plugin\Block;
 
 use Drupal\Core\Access\AccessResult;
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\State\StateInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Provides a block to test access.
- *
- * @Block(
- *   id = "test_access",
- *   admin_label = @Translation("Test block access")
- * )
  */
+#[Block(
+  id: "test_access",
+  admin_label: new TranslatableMarkup("Test block access"),
+)]
 class TestAccessBlock extends BlockBase implements ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestBlockInstantiation.php b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestBlockInstantiation.php
index 0d146390c5..77df48e8d9 100644
--- a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestBlockInstantiation.php
+++ b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestBlockInstantiation.php
@@ -3,18 +3,19 @@
 namespace Drupal\block_test\Plugin\Block;
 
 use Drupal\Core\Access\AccessResult;
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides a basic block for testing block instantiation and configuration.
- *
- * @Block(
- *   id = "test_block_instantiation",
- *   admin_label = @Translation("Display message")
- * )
  */
+#[Block(
+  id: "test_block_instantiation",
+  admin_label: new TranslatableMarkup("Display message")
+)]
 class TestBlockInstantiation extends BlockBase {
 
   /**
diff --git a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestCacheBlock.php b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestCacheBlock.php
index 5fec14ccc7..dc27b08ef0 100644
--- a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestCacheBlock.php
+++ b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestCacheBlock.php
@@ -2,16 +2,17 @@
 
 namespace Drupal\block_test\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides a block to test caching.
- *
- * @Block(
- *   id = "test_cache",
- *   admin_label = @Translation("Test block caching")
- * )
  */
+#[Block(
+  id: "test_cache",
+  admin_label: new TranslatableMarkup("Test block caching")
+)]
 class TestCacheBlock extends BlockBase {
 
   /**
diff --git a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestContextAwareBlock.php b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestContextAwareBlock.php
index e1df748510..fd78dafdc8 100644
--- a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestContextAwareBlock.php
+++ b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestContextAwareBlock.php
@@ -2,23 +2,30 @@
 
 namespace Drupal\block_test\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
+use Drupal\Core\Plugin\Context\EntityContextDefinition;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\user\UserInterface;
 
 /**
  * Provides a context-aware block.
- *
- * @Block(
- *   id = "test_context_aware",
- *   admin_label = @Translation("Test context-aware block"),
- *   context_definitions = {
- *     "user" = @ContextDefinition("entity:user", required = FALSE,
- *       label = @Translation("User Context"), constraints = { "NotNull" = {} }
- *     ),
- *   }
- * )
  */
+#[Block(
+  id: "test_context_aware",
+  admin_label: new TranslatableMarkup("Test context-aware block"),
+  context_definitions: [
+    'user' => new EntityContextDefinition(
+      data_type: 'entity:user',
+      label: new TranslatableMarkup("User Context"),
+      required: FALSE,
+      constraints: [
+        "NotNull" => [],
+      ]
+    ),
+  ]
+)]
 class TestContextAwareBlock extends BlockBase {
 
   /**
diff --git a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestContextAwareNoValidContextOptionsBlock.php b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestContextAwareNoValidContextOptionsBlock.php
index 234bf9a301..31944bed46 100644
--- a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestContextAwareNoValidContextOptionsBlock.php
+++ b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestContextAwareNoValidContextOptionsBlock.php
@@ -2,19 +2,21 @@
 
 namespace Drupal\block_test\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
+use Drupal\Core\Plugin\Context\ContextDefinition;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides a context-aware block that uses a not-passed, non-required context.
- *
- * @Block(
- *   id = "test_context_aware_no_valid_context_options",
- *   admin_label = @Translation("Test context-aware block - no valid context options"),
- *   context_definitions = {
- *     "email" = @ContextDefinition("email", required = FALSE)
- *   }
- * )
  */
+#[Block(
+  id: "test_context_aware_no_valid_context_options",
+  admin_label: new TranslatableMarkup("Test context-aware block - no valid context options"),
+  context_definitions: [
+    'user' => new ContextDefinition(data_type: 'email', required: FALSE),
+  ]
+)]
 class TestContextAwareNoValidContextOptionsBlock extends BlockBase {
 
   /**
diff --git a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestContextAwareUnsatisfiedBlock.php b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestContextAwareUnsatisfiedBlock.php
index d0789e37a7..74dc183794 100644
--- a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestContextAwareUnsatisfiedBlock.php
+++ b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestContextAwareUnsatisfiedBlock.php
@@ -2,19 +2,21 @@
 
 namespace Drupal\block_test\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
+use Drupal\Core\Plugin\Context\EntityContextDefinition;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides a context-aware block.
- *
- * @Block(
- *   id = "test_context_aware_unsatisfied",
- *   admin_label = @Translation("Test context-aware unsatisfied block"),
- *   context_definitions = {
- *     "user" = @ContextDefinition("entity:foobar")
- *   }
- * )
  */
+#[Block(
+  id: "test_context_aware_unsatisfied",
+  admin_label: new TranslatableMarkup("Test context-aware unsatisfied block"),
+  context_definitions: [
+    'user' => new EntityContextDefinition('entity:foobar'),
+  ]
+)]
 class TestContextAwareUnsatisfiedBlock extends BlockBase {
 
   /**
diff --git a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestFormBlock.php b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestFormBlock.php
index e499fa88c9..c4eef85d0e 100644
--- a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestFormBlock.php
+++ b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestFormBlock.php
@@ -2,16 +2,17 @@
 
 namespace Drupal\block_test\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides a block to test caching.
- *
- * @Block(
- *   id = "test_form_in_block",
- *   admin_label = @Translation("Test form block caching")
- * )
  */
+#[Block(
+  id: "test_form_in_block",
+  admin_label: new TranslatableMarkup("Test form block caching"),
+)]
 class TestFormBlock extends BlockBase {
 
   /**
diff --git a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestHtmlBlock.php b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestHtmlBlock.php
index 35f08c4b04..5644c3b5cc 100644
--- a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestHtmlBlock.php
+++ b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestHtmlBlock.php
@@ -2,16 +2,17 @@
 
 namespace Drupal\block_test\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides a block to test HTML.
- *
- * @Block(
- *   id = "test_html",
- *   admin_label = @Translation("Test HTML block")
- * )
  */
+#[Block(
+  id: "test_html",
+  admin_label: new TranslatableMarkup("Test HTML block"),
+)]
 class TestHtmlBlock extends BlockBase {
 
   /**
diff --git a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestMultipleFormsBlock.php b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestMultipleFormsBlock.php
index 64b70b22c0..f227f337b6 100644
--- a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestMultipleFormsBlock.php
+++ b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestMultipleFormsBlock.php
@@ -2,19 +2,21 @@
 
 namespace Drupal\block_test\Plugin\Block;
 
+use Drupal\block_test\PluginForm\EmptyBlockForm;
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides a block with multiple forms.
- *
- * @Block(
- *   id = "test_multiple_forms_block",
- *   forms = {
- *     "secondary" = "\Drupal\block_test\PluginForm\EmptyBlockForm"
- *   },
- *   admin_label = @Translation("Multiple forms test block")
- * )
  */
+#[Block(
+  id: "test_multiple_forms_block",
+  forms: [
+    'secondary' => EmptyBlockForm::class,
+  ],
+  admin_label: new TranslatableMarkup("Multiple forms test block"),
+)]
 class TestMultipleFormsBlock extends BlockBase {
 
   /**
diff --git a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestSettingsValidationBlock.php b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestSettingsValidationBlock.php
index d1f16d7fda..cad100b007 100644
--- a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestSettingsValidationBlock.php
+++ b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestSettingsValidationBlock.php
@@ -2,17 +2,18 @@
 
 namespace Drupal\block_test\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides a test settings validation block.
- *
- * @Block(
- *  id = "test_settings_validation",
- *  admin_label = @Translation("Test settings validation block"),
- * )
  */
+#[Block(
+  id: "test_settings_validation",
+  admin_label: new TranslatableMarkup("Test settings validation block"),
+)]
 class TestSettingsValidationBlock extends BlockBase {
 
   /**
diff --git a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestXSSTitleBlock.php b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestXSSTitleBlock.php
index 3b67914997..e455b1a960 100644
--- a/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestXSSTitleBlock.php
+++ b/core/modules/block/tests/modules/block_test/src/Plugin/Block/TestXSSTitleBlock.php
@@ -9,6 +9,9 @@
  *   id = "test_xss_title",
  *   admin_label = "<script>alert('XSS subject');</script>"
  * )
+ *
+ * @todo this block can't be converted because it requires a text admin label.
+ *   I'm not sure that we should permit labels which are not TranslatableMarkup.
  */
 class TestXSSTitleBlock extends TestCacheBlock {
 }
diff --git a/core/modules/block_content/src/Plugin/Block/BlockContentBlock.php b/core/modules/block_content/src/Plugin/Block/BlockContentBlock.php
index 6ca88d198a..ef75fe148f 100644
--- a/core/modules/block_content/src/Plugin/Block/BlockContentBlock.php
+++ b/core/modules/block_content/src/Plugin/Block/BlockContentBlock.php
@@ -3,7 +3,9 @@
 namespace Drupal\block_content\Plugin\Block;
 
 use Drupal\block_content\BlockContentUuidLookup;
+use Drupal\block_content\Plugin\Derivative\BlockContent;
 use Drupal\Core\Access\AccessResult;
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Block\BlockManagerInterface;
 use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
@@ -12,18 +14,18 @@
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Routing\UrlGeneratorInterface;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Defines a generic custom block type.
- *
- * @Block(
- *  id = "block_content",
- *  admin_label = @Translation("Custom block"),
- *  category = @Translation("Custom"),
- *  deriver = "Drupal\block_content\Plugin\Derivative\BlockContent"
- * )
  */
+#[Block(
+  id: "block_content",
+  admin_label: new TranslatableMarkup("Custom block"),
+  category: new TranslatableMarkup("Custom"),
+  deriver: BlockContent::class
+)]
 class BlockContentBlock extends BlockBase implements ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/modules/book/src/Plugin/Block/BookNavigationBlock.php b/core/modules/book/src/Plugin/Block/BookNavigationBlock.php
index 86d957739f..578ea3655d 100644
--- a/core/modules/book/src/Plugin/Block/BookNavigationBlock.php
+++ b/core/modules/book/src/Plugin/Block/BookNavigationBlock.php
@@ -2,11 +2,13 @@
 
 namespace Drupal\book\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\book\BookManagerInterface;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\node\NodeInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
@@ -14,13 +16,12 @@
 
 /**
  * Provides a 'Book navigation' block.
- *
- * @Block(
- *   id = "book_navigation",
- *   admin_label = @Translation("Book navigation"),
- *   category = @Translation("Menus")
- * )
  */
+#[Block(
+  id: "book_navigation",
+  admin_label: new TranslatableMarkup("Book navigation"),
+  category: new TranslatableMarkup("Menus")
+)]
 class BookNavigationBlock extends BlockBase implements ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/modules/comment/src/Plugin/Action/UnpublishByKeywordComment.php b/core/modules/comment/src/Plugin/Action/UnpublishByKeywordComment.php
index b0eb8bb50b..6421379c85 100644
--- a/core/modules/comment/src/Plugin/Action/UnpublishByKeywordComment.php
+++ b/core/modules/comment/src/Plugin/Action/UnpublishByKeywordComment.php
@@ -4,22 +4,23 @@
 
 use Drupal\Component\Utility\Tags;
 use Drupal\Core\Action\ConfigurableActionBase;
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Entity\EntityViewBuilderInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Unpublishes a comment containing certain keywords.
- *
- * @Action(
- *   id = "comment_unpublish_by_keyword_action",
- *   label = @Translation("Unpublish comment containing keyword(s)"),
- *   type = "comment"
- * )
  */
+#[Action(
+  id: 'comment_unpublish_by_keyword_action',
+  label: new TranslatableMarkup('Unpublish comment containing keyword(s)'),
+  type: 'comment'
+)]
 class UnpublishByKeywordComment extends ConfigurableActionBase implements ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/modules/editor/tests/editor_private_test/config/install/editor.editor.private_images.yml b/core/modules/editor/tests/modules/editor_private_test/config/install/editor.editor.private_images.yml
similarity index 100%
rename from core/modules/editor/tests/editor_private_test/config/install/editor.editor.private_images.yml
rename to core/modules/editor/tests/modules/editor_private_test/config/install/editor.editor.private_images.yml
diff --git a/core/modules/editor/tests/editor_private_test/config/install/filter.format.private_images.yml b/core/modules/editor/tests/modules/editor_private_test/config/install/filter.format.private_images.yml
similarity index 100%
rename from core/modules/editor/tests/editor_private_test/config/install/filter.format.private_images.yml
rename to core/modules/editor/tests/modules/editor_private_test/config/install/filter.format.private_images.yml
diff --git a/core/modules/editor/tests/editor_private_test/editor_private_test.info.yml b/core/modules/editor/tests/modules/editor_private_test/editor_private_test.info.yml
similarity index 100%
rename from core/modules/editor/tests/editor_private_test/editor_private_test.info.yml
rename to core/modules/editor/tests/modules/editor_private_test/editor_private_test.info.yml
diff --git a/core/modules/editor/tests/modules/config/schema/editor_test.schema.yml b/core/modules/editor/tests/modules/editor_test/config/schema/editor_test.schema.yml
similarity index 100%
rename from core/modules/editor/tests/modules/config/schema/editor_test.schema.yml
rename to core/modules/editor/tests/modules/editor_test/config/schema/editor_test.schema.yml
diff --git a/core/modules/editor/tests/modules/editor_test.info.yml b/core/modules/editor/tests/modules/editor_test/editor_test.info.yml
similarity index 100%
rename from core/modules/editor/tests/modules/editor_test.info.yml
rename to core/modules/editor/tests/modules/editor_test/editor_test.info.yml
diff --git a/core/modules/editor/tests/modules/editor_test.libraries.yml b/core/modules/editor/tests/modules/editor_test/editor_test.libraries.yml
similarity index 100%
rename from core/modules/editor/tests/modules/editor_test.libraries.yml
rename to core/modules/editor/tests/modules/editor_test/editor_test.libraries.yml
diff --git a/core/modules/editor/tests/modules/editor_test.module b/core/modules/editor/tests/modules/editor_test/editor_test.module
similarity index 100%
rename from core/modules/editor/tests/modules/editor_test.module
rename to core/modules/editor/tests/modules/editor_test/editor_test.module
diff --git a/core/modules/editor/tests/modules/src/EditorXssFilter/Insecure.php b/core/modules/editor/tests/modules/editor_test/src/EditorXssFilter/Insecure.php
similarity index 100%
rename from core/modules/editor/tests/modules/src/EditorXssFilter/Insecure.php
rename to core/modules/editor/tests/modules/editor_test/src/EditorXssFilter/Insecure.php
diff --git a/core/modules/editor/tests/modules/src/Plugin/Editor/TRexEditor.php b/core/modules/editor/tests/modules/editor_test/src/Plugin/Editor/TRexEditor.php
similarity index 100%
rename from core/modules/editor/tests/modules/src/Plugin/Editor/TRexEditor.php
rename to core/modules/editor/tests/modules/editor_test/src/Plugin/Editor/TRexEditor.php
diff --git a/core/modules/editor/tests/modules/src/Plugin/Editor/UnicornEditor.php b/core/modules/editor/tests/modules/editor_test/src/Plugin/Editor/UnicornEditor.php
similarity index 100%
rename from core/modules/editor/tests/modules/src/Plugin/Editor/UnicornEditor.php
rename to core/modules/editor/tests/modules/editor_test/src/Plugin/Editor/UnicornEditor.php
diff --git a/core/modules/editor/tests/modules/src/Plugin/Field/FieldType/EditorTestTextLongItem.php b/core/modules/editor/tests/modules/editor_test/src/Plugin/Field/FieldType/EditorTestTextLongItem.php
similarity index 100%
rename from core/modules/editor/tests/modules/src/Plugin/Field/FieldType/EditorTestTextLongItem.php
rename to core/modules/editor/tests/modules/editor_test/src/Plugin/Field/FieldType/EditorTestTextLongItem.php
diff --git a/core/modules/editor/tests/src/Functional/EditorDialogAccessTest.php b/core/modules/editor/tests/src/Functional/EditorDialogAccessTest.php
index f12dca0bbf..dc8b8d7a65 100644
--- a/core/modules/editor/tests/src/Functional/EditorDialogAccessTest.php
+++ b/core/modules/editor/tests/src/Functional/EditorDialogAccessTest.php
@@ -18,7 +18,7 @@ class EditorDialogAccessTest extends BrowserTestBase {
    *
    * @var array
    */
-  protected static $modules = ['editor', 'filter', 'editor_test'];
+  protected static $modules = ['editor', 'filter', 'text', 'editor_test'];
 
   /**
    * {@inheritdoc}
diff --git a/core/modules/forum/src/Plugin/Block/ActiveTopicsBlock.php b/core/modules/forum/src/Plugin/Block/ActiveTopicsBlock.php
index 921e7ed04b..c4b4bf0ef2 100644
--- a/core/modules/forum/src/Plugin/Block/ActiveTopicsBlock.php
+++ b/core/modules/forum/src/Plugin/Block/ActiveTopicsBlock.php
@@ -2,17 +2,18 @@
 
 namespace Drupal\forum\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Database\Database;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides an 'Active forum topics' block.
- *
- * @Block(
- *   id = "forum_active_block",
- *   admin_label = @Translation("Active forum topics"),
- *   category = @Translation("Lists (Views)")
- * )
  */
+#[Block(
+  id: "forum_active_block",
+  admin_label: new TranslatableMarkup("Active forum topics"),
+  category: new TranslatableMarkup("Lists (Views)")
+)]
 class ActiveTopicsBlock extends ForumBlockBase {
 
   /**
diff --git a/core/modules/forum/src/Plugin/Block/NewTopicsBlock.php b/core/modules/forum/src/Plugin/Block/NewTopicsBlock.php
index e1d2d1c1af..13d3bf0dc0 100644
--- a/core/modules/forum/src/Plugin/Block/NewTopicsBlock.php
+++ b/core/modules/forum/src/Plugin/Block/NewTopicsBlock.php
@@ -2,17 +2,18 @@
 
 namespace Drupal\forum\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Database\Database;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides a 'New forum topics' block.
- *
- * @Block(
- *   id = "forum_new_block",
- *   admin_label = @Translation("New forum topics"),
- *   category = @Translation("Lists (Views)")
- * )
  */
+#[Block(
+  id: "forum_new_block",
+  admin_label: new TranslatableMarkup("New forum topics"),
+  category: new TranslatableMarkup("Lists (Views)")
+)]
 class NewTopicsBlock extends ForumBlockBase {
 
   /**
diff --git a/core/modules/help/src/Plugin/Block/HelpBlock.php b/core/modules/help/src/Plugin/Block/HelpBlock.php
index 24cd3f3c50..8a593842a2 100644
--- a/core/modules/help/src/Plugin/Block/HelpBlock.php
+++ b/core/modules/help/src/Plugin/Block/HelpBlock.php
@@ -2,25 +2,24 @@
 
 namespace Drupal\help\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Extension\ModuleHandlerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpFoundation\Request;
 
 /**
  * Provides a 'Help' block.
- *
- * @Block(
- *   id = "help_block",
- *   admin_label = @Translation("Help"),
- *   forms = {
- *     "settings_tray" = FALSE,
- *   },
- * )
  */
+#[Block(
+  id: "help_block",
+  admin_label: new TranslatableMarkup("Help"),
+  forms: ['settings_tray' => FALSE]
+)]
 class HelpBlock extends BlockBase implements ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/modules/language/src/Plugin/Block/LanguageBlock.php b/core/modules/language/src/Plugin/Block/LanguageBlock.php
index 2765971b8e..223c5a3fe0 100644
--- a/core/modules/language/src/Plugin/Block/LanguageBlock.php
+++ b/core/modules/language/src/Plugin/Block/LanguageBlock.php
@@ -3,24 +3,26 @@
 namespace Drupal\language\Plugin\Block;
 
 use Drupal\Core\Access\AccessResult;
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Path\PathMatcherInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Language\LanguageManagerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Url;
 use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\language\Plugin\Derivative\LanguageBlock as LanguageBlockDeriver;
 
 /**
  * Provides a 'Language switcher' block.
- *
- * @Block(
- *   id = "language_block",
- *   admin_label = @Translation("Language switcher"),
- *   category = @Translation("System"),
- *   deriver = "Drupal\language\Plugin\Derivative\LanguageBlock"
- * )
  */
+#[Block(
+  id: "language_block",
+  admin_label: new TranslatableMarkup("Language switcher"),
+  category: new TranslatableMarkup("System"),
+  deriver: LanguageBlockDeriver::class
+)]
 class LanguageBlock extends BlockBase implements ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/modules/layout_builder/src/BlockContent/InlineBlock.php b/core/modules/layout_builder/src/BlockContent/InlineBlock.php
new file mode 100644
index 0000000000..1970df54f1
--- /dev/null
+++ b/core/modules/layout_builder/src/BlockContent/InlineBlock.php
@@ -0,0 +1,299 @@
+<?php
+
+namespace Drupal\layout_builder\BlockContent;
+
+use Drupal\block_content\Access\RefinableDependentAccessInterface;
+use Drupal\block_content\Access\RefinableDependentAccessTrait;
+use Drupal\Component\Utility\NestedArray;
+use Drupal\Core\Access\AccessResult;
+use Drupal\Core\Block\Attribute\Block;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\layout_builder\Plugin\Block\InlineBlock as InlineBlockPlugin;
+use Drupal\Core\Entity\Entity\EntityFormDisplay;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Form\SubformStateInterface;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\layout_builder\Plugin\Derivative\InlineBlockDeriver;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * Defines an inline block plugin type.
+ *
+ * @internal
+ *   Plugin classes are internal.
+ */
+#[Block(
+  id: "inline_block",
+  admin_label: new TranslatableMarkup("Inline block"),
+  category: new TranslatableMarkup("Inline blocks"),
+  deriver: InlineBlockDeriver::class
+)]
+class InlineBlock extends InlineBlockPlugin implements ContainerFactoryPluginInterface, RefinableDependentAccessInterface {
+
+  use RefinableDependentAccessTrait;
+
+  /**
+   * The entity type manager.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   */
+  protected $entityTypeManager;
+
+  /**
+   * The block content entity.
+   *
+   * @var \Drupal\block_content\BlockContentInterface
+   */
+  protected $blockContent;
+
+  /**
+   * The entity display repository.
+   *
+   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   */
+  protected $entityDisplayRepository;
+
+  /**
+   * Whether a new block is being created.
+   *
+   * @var bool
+   */
+  protected $isNew = TRUE;
+
+  /**
+   * The current user.
+   *
+   * @var \Drupal\Core\Session\AccountInterface
+   */
+  protected $currentUser;
+
+  /**
+   * Constructs a new InlineBlock.
+   *
+   * @param array $configuration
+   *   A configuration array containing information about the plugin instance.
+   * @param string $plugin_id
+   *   The plugin ID for the plugin instance.
+   * @param mixed $plugin_definition
+   *   The plugin implementation definition.
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   *   The entity type manager service.
+   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
+   *   The entity display repository.
+   * @param \Drupal\Core\Session\AccountInterface $current_user
+   *   The current user.
+   */
+  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entity_display_repository, AccountInterface $current_user) {
+    parent::__construct($configuration, $plugin_id, $plugin_definition);
+
+    $this->entityTypeManager = $entity_type_manager;
+    $this->entityDisplayRepository = $entity_display_repository;
+    $this->currentUser = $current_user;
+    if (!empty($this->configuration['block_revision_id']) || !empty($this->configuration['block_serialized'])) {
+      $this->isNew = FALSE;
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+    return new static(
+      $configuration,
+      $plugin_id,
+      $plugin_definition,
+      $container->get('entity_type.manager'),
+      $container->get('entity_display.repository'),
+      $container->get('current_user')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function defaultConfiguration() {
+    return [
+      'view_mode' => 'full',
+      'block_revision_id' => NULL,
+      'block_serialized' => NULL,
+    ];
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function blockForm($form, FormStateInterface $form_state) {
+    $block = $this->getEntity();
+
+    // Add the entity form display in a process callback so that #parents can
+    // be successfully propagated to field widgets.
+    $form['block_form'] = [
+      '#type' => 'container',
+      '#process' => [[static::class, 'processBlockForm']],
+      '#block' => $block,
+      '#access' => $this->currentUser->hasPermission('create and edit custom blocks'),
+    ];
+
+    $options = $this->entityDisplayRepository->getViewModeOptionsByBundle('block_content', $block->bundle());
+
+    $form['view_mode'] = [
+      '#type' => 'select',
+      '#options' => $options,
+      '#title' => $this->t('View mode'),
+      '#description' => $this->t('The view mode in which to render the block.'),
+      '#default_value' => $this->configuration['view_mode'],
+      '#access' => count($options) > 1,
+    ];
+    return $form;
+  }
+
+  /**
+   * Process callback to insert a Custom Block form.
+   *
+   * @param array $element
+   *   The containing element.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   The form state.
+   *
+   * @return array
+   *   The containing element, with the Custom Block form inserted.
+   */
+  public static function processBlockForm(array $element, FormStateInterface $form_state) {
+    /** @var \Drupal\block_content\BlockContentInterface $block */
+    $block = $element['#block'];
+    EntityFormDisplay::collectRenderDisplay($block, 'edit')->buildForm($block, $element, $form_state);
+    $element['revision_log']['#access'] = FALSE;
+    $element['info']['#access'] = FALSE;
+    return $element;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function blockValidate($form, FormStateInterface $form_state) {
+    $block_form = $form['block_form'];
+    /** @var \Drupal\block_content\BlockContentInterface $block */
+    $block = $block_form['#block'];
+    $form_display = EntityFormDisplay::collectRenderDisplay($block, 'edit');
+    $complete_form_state = $form_state instanceof SubformStateInterface ? $form_state->getCompleteFormState() : $form_state;
+    $form_display->extractFormValues($block, $block_form, $complete_form_state);
+    $form_display->validateFormValues($block, $block_form, $complete_form_state);
+    // @todo Remove when https://www.drupal.org/project/drupal/issues/2948549 is closed.
+    $form_state->setTemporaryValue('block_form_parents', $block_form['#parents']);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function blockSubmit($form, FormStateInterface $form_state) {
+    $this->configuration['view_mode'] = $form_state->getValue('view_mode');
+
+    // @todo Remove when https://www.drupal.org/project/drupal/issues/2948549 is closed.
+    $block_form = NestedArray::getValue($form, $form_state->getTemporaryValue('block_form_parents'));
+    /** @var \Drupal\block_content\BlockContentInterface $block */
+    $block = $block_form['#block'];
+    $form_display = EntityFormDisplay::collectRenderDisplay($block, 'edit');
+    $complete_form_state = $form_state instanceof SubformStateInterface ? $form_state->getCompleteFormState() : $form_state;
+    $form_display->extractFormValues($block, $block_form, $complete_form_state);
+    $block->setInfo($this->configuration['label']);
+    $this->configuration['block_serialized'] = serialize($block);
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function blockAccess(AccountInterface $account) {
+    if ($entity = $this->getEntity()) {
+      return $entity->access('view', $account, TRUE);
+    }
+    return AccessResult::forbidden();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function build() {
+    $block = $this->getEntity();
+    return $this->entityTypeManager->getViewBuilder($block->getEntityTypeId())->view($block, $this->configuration['view_mode']);
+  }
+
+  /**
+   * Loads or creates the block content entity of the block.
+   *
+   * @return \Drupal\block_content\BlockContentInterface
+   *   The block content entity.
+   */
+  protected function getEntity() {
+    if (!isset($this->blockContent)) {
+      if (!empty($this->configuration['block_serialized'])) {
+        $this->blockContent = unserialize($this->configuration['block_serialized']);
+      }
+      elseif (!empty($this->configuration['block_revision_id'])) {
+        $entity = $this->entityTypeManager->getStorage('block_content')->loadRevision($this->configuration['block_revision_id']);
+        $this->blockContent = $entity;
+      }
+      else {
+        $this->blockContent = $this->entityTypeManager->getStorage('block_content')->create([
+          'type' => $this->getDerivativeId(),
+          'reusable' => FALSE,
+        ]);
+      }
+      if ($this->blockContent instanceof RefinableDependentAccessInterface && $dependee = $this->getAccessDependency()) {
+        $this->blockContent->setAccessDependency($dependee);
+      }
+    }
+    return $this->blockContent;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
+    $form = parent::buildConfigurationForm($form, $form_state);
+    if ($this->isNew) {
+      // If the Content Block is new then don't provide a default label.
+      unset($form['label']['#default_value']);
+    }
+    $form['label']['#description'] = $this->t('The title of the block as shown to the user.');
+    return $form;
+  }
+
+  /**
+   * Saves the block_content entity for this plugin.
+   *
+   * @param bool $new_revision
+   *   Whether to create new revision, if the block was modified.
+   * @param bool $duplicate_block
+   *   Whether to duplicate the "block_content" entity.
+   */
+  public function saveBlockContent($new_revision = FALSE, $duplicate_block = FALSE) {
+    /** @var \Drupal\block_content\BlockContentInterface $block */
+    $block = NULL;
+    if (!empty($this->configuration['block_serialized'])) {
+      $block = unserialize($this->configuration['block_serialized']);
+    }
+    if ($duplicate_block) {
+      if (empty($block) && !empty($this->configuration['block_revision_id'])) {
+        $block = $this->entityTypeManager->getStorage('block_content')->loadRevision($this->configuration['block_revision_id']);
+      }
+      if ($block) {
+        $block = $block->createDuplicate();
+      }
+    }
+
+    if ($block) {
+      // Since the custom block is only set if it was unserialized, the flag
+      // will only effect blocks which were modified or serialized originally.
+      if ($new_revision) {
+        $block->setNewRevision();
+      }
+      $block->save();
+      $this->configuration['block_revision_id'] = $block->getRevisionId();
+      $this->configuration['block_serialized'] = NULL;
+    }
+  }
+
+}
diff --git a/core/modules/layout_builder/src/Plugin/Block/ExtraFieldBlock.php b/core/modules/layout_builder/src/Plugin/Block/ExtraFieldBlock.php
index 35c9ee905d..cf6596077f 100644
--- a/core/modules/layout_builder/src/Plugin/Block/ExtraFieldBlock.php
+++ b/core/modules/layout_builder/src/Plugin/Block/ExtraFieldBlock.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\layout_builder\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\EntityFieldManagerInterface;
@@ -11,6 +12,7 @@
 use Drupal\Core\Render\Element;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\layout_builder\Plugin\Derivative\ExtraFieldBlockDeriver;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
@@ -23,14 +25,13 @@
  *   This block plugin handles all other field entities not provided by
  *   hook_entity_extra_field_info().
  *
- * @Block(
- *   id = "extra_field_block",
- *   deriver = "\Drupal\layout_builder\Plugin\Derivative\ExtraFieldBlockDeriver",
- * )
- *
  * @internal
  *   Plugin classes are internal.
  */
+#[Block(
+  id: "extra_field_block",
+  deriver: ExtraFieldBlockDeriver::class
+)]
 class ExtraFieldBlock extends BlockBase implements ContextAwarePluginInterface, ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/modules/layout_builder/src/Plugin/Block/FieldBlock.php b/core/modules/layout_builder/src/Plugin/Block/FieldBlock.php
index 1cdb92f917..9c774eb122 100644
--- a/core/modules/layout_builder/src/Plugin/Block/FieldBlock.php
+++ b/core/modules/layout_builder/src/Plugin/Block/FieldBlock.php
@@ -5,6 +5,7 @@
 use Drupal\Component\Plugin\Factory\DefaultFactory;
 use Drupal\Component\Utility\NestedArray;
 use Drupal\Core\Access\AccessResult;
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\CacheableMetadata;
 use Drupal\Core\Entity\EntityDisplayBase;
@@ -21,20 +22,20 @@
 use Drupal\Core\Plugin\ContextAwarePluginInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\layout_builder\Plugin\Derivative\FieldBlockDeriver;
 use Psr\Log\LoggerInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Provides a block that renders a field from an entity.
  *
- * @Block(
- *   id = "field_block",
- *   deriver = "\Drupal\layout_builder\Plugin\Derivative\FieldBlockDeriver",
- * )
- *
  * @internal
  *   Plugin classes are internal.
  */
+#[Block(
+  id: "field_block",
+  deriver: FieldBlockDeriver::class
+)]
 class FieldBlock extends BlockBase implements ContextAwarePluginInterface, ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/modules/layout_builder/src/Plugin/Block/InlineBlock.php b/core/modules/layout_builder/src/Plugin/Block/InlineBlock.php
index 9f347174d3..b98b36b509 100644
--- a/core/modules/layout_builder/src/Plugin/Block/InlineBlock.php
+++ b/core/modules/layout_builder/src/Plugin/Block/InlineBlock.php
@@ -2,296 +2,30 @@
 
 namespace Drupal\layout_builder\Plugin\Block;
 
-use Drupal\block_content\Access\RefinableDependentAccessInterface;
-use Drupal\block_content\Access\RefinableDependentAccessTrait;
-use Drupal\Component\Utility\NestedArray;
-use Drupal\Core\Access\AccessResult;
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
-use Drupal\Core\Entity\Entity\EntityFormDisplay;
-use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
-use Drupal\Core\Entity\EntityTypeManagerInterface;
-use Drupal\Core\Form\FormStateInterface;
-use Drupal\Core\Form\SubformStateInterface;
-use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
-use Drupal\Core\Session\AccountInterface;
-use Symfony\Component\DependencyInjection\ContainerInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\layout_builder\Plugin\Derivative\InlineBlockDeriver;
 
 /**
- * Defines an inline block plugin type.
+ * Defines an inline block plugin placeholder.
  *
- * @Block(
- *  id = "inline_block",
- *  admin_label = @Translation("Inline block"),
- *  category = @Translation("Inline blocks"),
- *  deriver = "Drupal\layout_builder\Plugin\Derivative\InlineBlockDeriver",
- * )
+ * This is a placeholder class to allow the plugin to be discovered. The real
+ * class is \Drupal\layout_builder\BlockContent\InlineBlock. The real class
+ * depends on code from the Block Content module that might not be installed
+ * during block discovery.
  *
  * @internal
  *   Plugin classes are internal.
+ *
+ * @see \Drupal\layout_builder\BlockContent\InlineBlock
+ * @see \Drupal\layout_builder\Plugin\Derivative\InlineBlockDeriver
  */
-class InlineBlock extends BlockBase implements ContainerFactoryPluginInterface, RefinableDependentAccessInterface {
-
-  use RefinableDependentAccessTrait;
-
-  /**
-   * The entity type manager.
-   *
-   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
-   */
-  protected $entityTypeManager;
-
-  /**
-   * The block content entity.
-   *
-   * @var \Drupal\block_content\BlockContentInterface
-   */
-  protected $blockContent;
-
-  /**
-   * The entity display repository.
-   *
-   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
-   */
-  protected $entityDisplayRepository;
-
-  /**
-   * Whether a new block is being created.
-   *
-   * @var bool
-   */
-  protected $isNew = TRUE;
-
-  /**
-   * The current user.
-   *
-   * @var \Drupal\Core\Session\AccountInterface
-   */
-  protected $currentUser;
-
-  /**
-   * Constructs a new InlineBlock.
-   *
-   * @param array $configuration
-   *   A configuration array containing information about the plugin instance.
-   * @param string $plugin_id
-   *   The plugin ID for the plugin instance.
-   * @param mixed $plugin_definition
-   *   The plugin implementation definition.
-   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
-   *   The entity type manager service.
-   * @param \Drupal\Core\Entity\EntityDisplayRepositoryInterface $entity_display_repository
-   *   The entity display repository.
-   * @param \Drupal\Core\Session\AccountInterface $current_user
-   *   The current user.
-   */
-  public function __construct(array $configuration, $plugin_id, $plugin_definition, EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entity_display_repository, AccountInterface $current_user) {
-    parent::__construct($configuration, $plugin_id, $plugin_definition);
-
-    $this->entityTypeManager = $entity_type_manager;
-    $this->entityDisplayRepository = $entity_display_repository;
-    $this->currentUser = $current_user;
-    if (!empty($this->configuration['block_revision_id']) || !empty($this->configuration['block_serialized'])) {
-      $this->isNew = FALSE;
-    }
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
-    return new static(
-      $configuration,
-      $plugin_id,
-      $plugin_definition,
-      $container->get('entity_type.manager'),
-      $container->get('entity_display.repository'),
-      $container->get('current_user')
-    );
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function defaultConfiguration() {
-    return [
-      'view_mode' => 'full',
-      'block_revision_id' => NULL,
-      'block_serialized' => NULL,
-    ];
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function blockForm($form, FormStateInterface $form_state) {
-    $block = $this->getEntity();
-
-    // Add the entity form display in a process callback so that #parents can
-    // be successfully propagated to field widgets.
-    $form['block_form'] = [
-      '#type' => 'container',
-      '#process' => [[static::class, 'processBlockForm']],
-      '#block' => $block,
-      '#access' => $this->currentUser->hasPermission('create and edit custom blocks'),
-    ];
-
-    $options = $this->entityDisplayRepository->getViewModeOptionsByBundle('block_content', $block->bundle());
-
-    $form['view_mode'] = [
-      '#type' => 'select',
-      '#options' => $options,
-      '#title' => $this->t('View mode'),
-      '#description' => $this->t('The view mode in which to render the block.'),
-      '#default_value' => $this->configuration['view_mode'],
-      '#access' => count($options) > 1,
-    ];
-    return $form;
-  }
-
-  /**
-   * Process callback to insert a Custom Block form.
-   *
-   * @param array $element
-   *   The containing element.
-   * @param \Drupal\Core\Form\FormStateInterface $form_state
-   *   The form state.
-   *
-   * @return array
-   *   The containing element, with the Custom Block form inserted.
-   */
-  public static function processBlockForm(array $element, FormStateInterface $form_state) {
-    /** @var \Drupal\block_content\BlockContentInterface $block */
-    $block = $element['#block'];
-    EntityFormDisplay::collectRenderDisplay($block, 'edit')->buildForm($block, $element, $form_state);
-    $element['revision_log']['#access'] = FALSE;
-    $element['info']['#access'] = FALSE;
-    return $element;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function blockValidate($form, FormStateInterface $form_state) {
-    $block_form = $form['block_form'];
-    /** @var \Drupal\block_content\BlockContentInterface $block */
-    $block = $block_form['#block'];
-    $form_display = EntityFormDisplay::collectRenderDisplay($block, 'edit');
-    $complete_form_state = $form_state instanceof SubformStateInterface ? $form_state->getCompleteFormState() : $form_state;
-    $form_display->extractFormValues($block, $block_form, $complete_form_state);
-    $form_display->validateFormValues($block, $block_form, $complete_form_state);
-    // @todo Remove when https://www.drupal.org/project/drupal/issues/2948549 is closed.
-    $form_state->setTemporaryValue('block_form_parents', $block_form['#parents']);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function blockSubmit($form, FormStateInterface $form_state) {
-    $this->configuration['view_mode'] = $form_state->getValue('view_mode');
-
-    // @todo Remove when https://www.drupal.org/project/drupal/issues/2948549 is closed.
-    $block_form = NestedArray::getValue($form, $form_state->getTemporaryValue('block_form_parents'));
-    /** @var \Drupal\block_content\BlockContentInterface $block */
-    $block = $block_form['#block'];
-    $form_display = EntityFormDisplay::collectRenderDisplay($block, 'edit');
-    $complete_form_state = $form_state instanceof SubformStateInterface ? $form_state->getCompleteFormState() : $form_state;
-    $form_display->extractFormValues($block, $block_form, $complete_form_state);
-    $block->setInfo($this->configuration['label']);
-    $this->configuration['block_serialized'] = serialize($block);
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  protected function blockAccess(AccountInterface $account) {
-    if ($entity = $this->getEntity()) {
-      return $entity->access('view', $account, TRUE);
-    }
-    return AccessResult::forbidden();
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function build() {
-    $block = $this->getEntity();
-    return $this->entityTypeManager->getViewBuilder($block->getEntityTypeId())->view($block, $this->configuration['view_mode']);
-  }
-
-  /**
-   * Loads or creates the block content entity of the block.
-   *
-   * @return \Drupal\block_content\BlockContentInterface
-   *   The block content entity.
-   */
-  protected function getEntity() {
-    if (!isset($this->blockContent)) {
-      if (!empty($this->configuration['block_serialized'])) {
-        $this->blockContent = unserialize($this->configuration['block_serialized']);
-      }
-      elseif (!empty($this->configuration['block_revision_id'])) {
-        $entity = $this->entityTypeManager->getStorage('block_content')->loadRevision($this->configuration['block_revision_id']);
-        $this->blockContent = $entity;
-      }
-      else {
-        $this->blockContent = $this->entityTypeManager->getStorage('block_content')->create([
-          'type' => $this->getDerivativeId(),
-          'reusable' => FALSE,
-        ]);
-      }
-      if ($this->blockContent instanceof RefinableDependentAccessInterface && $dependee = $this->getAccessDependency()) {
-        $this->blockContent->setAccessDependency($dependee);
-      }
-    }
-    return $this->blockContent;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
-    $form = parent::buildConfigurationForm($form, $form_state);
-    if ($this->isNew) {
-      // If the Content Block is new then don't provide a default label.
-      unset($form['label']['#default_value']);
-    }
-    $form['label']['#description'] = $this->t('The title of the block as shown to the user.');
-    return $form;
-  }
-
-  /**
-   * Saves the block_content entity for this plugin.
-   *
-   * @param bool $new_revision
-   *   Whether to create new revision, if the block was modified.
-   * @param bool $duplicate_block
-   *   Whether to duplicate the "block_content" entity.
-   */
-  public function saveBlockContent($new_revision = FALSE, $duplicate_block = FALSE) {
-    /** @var \Drupal\block_content\BlockContentInterface $block */
-    $block = NULL;
-    if (!empty($this->configuration['block_serialized'])) {
-      $block = unserialize($this->configuration['block_serialized']);
-    }
-    if ($duplicate_block) {
-      if (empty($block) && !empty($this->configuration['block_revision_id'])) {
-        $block = $this->entityTypeManager->getStorage('block_content')->loadRevision($this->configuration['block_revision_id']);
-      }
-      if ($block) {
-        $block = $block->createDuplicate();
-      }
-    }
-
-    if ($block) {
-      // Since the custom block is only set if it was unserialized, the flag
-      // will only effect blocks which were modified or serialized originally.
-      if ($new_revision) {
-        $block->setNewRevision();
-      }
-      $block->save();
-      $this->configuration['block_revision_id'] = $block->getRevisionId();
-      $this->configuration['block_serialized'] = NULL;
-    }
-  }
-
+#[Block(
+  id: "inline_block",
+  admin_label: new TranslatableMarkup("Inline block"),
+  category: new TranslatableMarkup("Inline blocks"),
+  deriver: InlineBlockDeriver::class
+)]
+abstract class InlineBlock extends BlockBase {
 }
diff --git a/core/modules/layout_builder/src/Plugin/Derivative/InlineBlockDeriver.php b/core/modules/layout_builder/src/Plugin/Derivative/InlineBlockDeriver.php
index 2a9704bf1d..22aab273c9 100644
--- a/core/modules/layout_builder/src/Plugin/Derivative/InlineBlockDeriver.php
+++ b/core/modules/layout_builder/src/Plugin/Derivative/InlineBlockDeriver.php
@@ -51,6 +51,7 @@ public function getDerivativeDefinitions($base_plugin_definition) {
       foreach ($block_content_types as $id => $type) {
         $this->derivatives[$id] = $base_plugin_definition;
         $this->derivatives[$id]['admin_label'] = $type->label();
+        $this->derivatives[$id]['class'] = 'Drupal\layout_builder\BlockContent\InlineBlock';
         $this->derivatives[$id]['config_dependencies'][$type->getConfigDependencyKey()][] = $type->getConfigDependencyName();
       }
     }
diff --git a/core/modules/layout_builder/tests/modules/layout_builder_fieldblock_test/src/Plugin/Block/FieldBlock.php b/core/modules/layout_builder/tests/modules/layout_builder_fieldblock_test/src/Plugin/Block/FieldBlock.php
index 07a00f5412..bb7ac692ee 100644
--- a/core/modules/layout_builder/tests/modules/layout_builder_fieldblock_test/src/Plugin/Block/FieldBlock.php
+++ b/core/modules/layout_builder/tests/modules/layout_builder_fieldblock_test/src/Plugin/Block/FieldBlock.php
@@ -2,7 +2,9 @@
 
 namespace Drupal\layout_builder_fieldblock_test\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\layout_builder\Plugin\Block\FieldBlock as LayoutBuilderFieldBlock;
+use Drupal\layout_builder\Plugin\Derivative\FieldBlockDeriver;
 
 /**
  * Provides test field block to test with Block UI.
@@ -14,14 +16,13 @@
  * testing, this plugin uses the same deriver but each derivative will have a
  * different provider.
  *
- * @Block(
- *   id = "field_block_test",
- *   deriver = "\Drupal\layout_builder\Plugin\Derivative\FieldBlockDeriver",
- * )
- *
  * @see \Drupal\Tests\layout_builder\FunctionalJavascript\FieldBlockTest
  * @see layout_builder_plugin_filter_block__block_ui_alter()
  */
+#[Block(
+  id: "field_block_test",
+  deriver: FieldBlockDeriver::class
+)]
 class FieldBlock extends LayoutBuilderFieldBlock {
 
 }
diff --git a/core/modules/layout_builder/tests/modules/layout_builder_form_block_test/src/Plugin/Block/TestFormApiFormBlock.php b/core/modules/layout_builder/tests/modules/layout_builder_form_block_test/src/Plugin/Block/TestFormApiFormBlock.php
index 791ccbba9b..970b24f489 100644
--- a/core/modules/layout_builder/tests/modules/layout_builder_form_block_test/src/Plugin/Block/TestFormApiFormBlock.php
+++ b/core/modules/layout_builder/tests/modules/layout_builder_form_block_test/src/Plugin/Block/TestFormApiFormBlock.php
@@ -2,22 +2,23 @@
 
 namespace Drupal\layout_builder_form_block_test\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Form\FormInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Provides a block containing a Form API form for use in Layout Builder tests.
- *
- * @Block(
- *   id = "layout_builder_form_block_test_form_api_form_block",
- *   admin_label = @Translation("Layout Builder form block test form api form block"),
- *   category = @Translation("Layout Builder form block test")
- * )
  */
+#[Block(
+  id: "layout_builder_form_block_test_form_api_form_block",
+  admin_label: new TranslatableMarkup("Layout Builder form block test form api form block"),
+  category: new TranslatableMarkup("Layout Builder form block test")
+)]
 class TestFormApiFormBlock extends BlockBase implements ContainerFactoryPluginInterface, FormInterface {
 
   /**
diff --git a/core/modules/layout_builder/tests/modules/layout_builder_form_block_test/src/Plugin/Block/TestInlineTemplateFormBlock.php b/core/modules/layout_builder/tests/modules/layout_builder_form_block_test/src/Plugin/Block/TestInlineTemplateFormBlock.php
index c93f55d3cd..4d5582c088 100644
--- a/core/modules/layout_builder/tests/modules/layout_builder_form_block_test/src/Plugin/Block/TestInlineTemplateFormBlock.php
+++ b/core/modules/layout_builder/tests/modules/layout_builder_form_block_test/src/Plugin/Block/TestInlineTemplateFormBlock.php
@@ -2,19 +2,20 @@
 
 namespace Drupal\layout_builder_form_block_test\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides a block containing inline template with <form> tag.
  *
  * For use in Layout Builder tests.
- *
- * @Block(
- *   id = "layout_builder_form_block_test_inline_template_form_block",
- *   admin_label = @Translation("Layout Builder form block test inline template form block"),
- *   category = @Translation("Layout Builder form block test")
- * )
  */
+#[Block(
+  id: "layout_builder_form_block_test_inline_template_form_block",
+  admin_label: new TranslatableMarkup("Layout Builder form block test inline template form block"),
+  category: new TranslatableMarkup("Layout Builder form block test")
+)]
 class TestInlineTemplateFormBlock extends BlockBase {
 
   /**
diff --git a/core/modules/layout_builder/tests/modules/layout_builder_test/src/Plugin/Block/IHaveRuntimeContexts.php b/core/modules/layout_builder/tests/modules/layout_builder_test/src/Plugin/Block/IHaveRuntimeContexts.php
index e3832a60f7..d24b8dd5c6 100644
--- a/core/modules/layout_builder/tests/modules/layout_builder_test/src/Plugin/Block/IHaveRuntimeContexts.php
+++ b/core/modules/layout_builder/tests/modules/layout_builder_test/src/Plugin/Block/IHaveRuntimeContexts.php
@@ -2,20 +2,22 @@
 
 namespace Drupal\layout_builder_test\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
+use Drupal\Core\Plugin\Context\ContextDefinition;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Defines a class for a context-aware block.
- *
- * @Block(
- *   id = "i_have_runtime_contexts",
- *   admin_label = "Can I have runtime contexts",
- *   category = "Test",
- *   context_definitions = {
- *     "runtime_contexts" = @ContextDefinition("string", label = "Do you have runtime contexts")
- *   }
- * )
  */
+#[Block(
+  id: "i_have_runtime_contexts",
+  admin_label: new TranslatableMarkup("Can I have runtime contexts"),
+  category: new TranslatableMarkup("Test"),
+  context_definitions: [
+    'runtime_contexts' => new ContextDefinition('string', 'Do you have runtime contexts'),
+  ]
+)]
 class IHaveRuntimeContexts extends BlockBase {
 
   /**
diff --git a/core/modules/layout_builder/tests/modules/layout_builder_test/src/Plugin/Block/TestAjaxBlock.php b/core/modules/layout_builder/tests/modules/layout_builder_test/src/Plugin/Block/TestAjaxBlock.php
index 1f1eeb0d7f..71ac45c6af 100644
--- a/core/modules/layout_builder/tests/modules/layout_builder_test/src/Plugin/Block/TestAjaxBlock.php
+++ b/core/modules/layout_builder/tests/modules/layout_builder_test/src/Plugin/Block/TestAjaxBlock.php
@@ -2,18 +2,19 @@
 
 namespace Drupal\layout_builder_test\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides a 'TestAjax' block.
- *
- * @Block(
- *   id = "layout_builder_test_testajax",
- *   admin_label = @Translation("TestAjax"),
- *   category = @Translation("Test")
- * )
  */
+#[Block(
+  id: "layout_builder_test_testajax",
+  admin_label: new TranslatableMarkup("TestAjax"),
+  category: new TranslatableMarkup("Test")
+)]
 class TestAjaxBlock extends BlockBase {
 
   /**
diff --git a/core/modules/layout_builder/tests/modules/layout_builder_test/src/Plugin/Block/TestAttributesBlock.php b/core/modules/layout_builder/tests/modules/layout_builder_test/src/Plugin/Block/TestAttributesBlock.php
index 877fc3bfe7..57b5cbf559 100644
--- a/core/modules/layout_builder/tests/modules/layout_builder_test/src/Plugin/Block/TestAttributesBlock.php
+++ b/core/modules/layout_builder/tests/modules/layout_builder_test/src/Plugin/Block/TestAttributesBlock.php
@@ -2,18 +2,19 @@
 
 namespace Drupal\layout_builder_test\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides a 'TestAttributes' block.
- *
- * @Block(
- *   id = "layout_builder_test_test_attributes",
- *   admin_label = @Translation("Test Attributes"),
- *   category = @Translation("Test")
- * )
  */
+#[Block(
+  id: "layout_builder_test_test_attributes",
+  admin_label: new TranslatableMarkup("Test Attributes"),
+  category: new TranslatableMarkup("Test")
+)]
 class TestAttributesBlock extends BlockBase {
 
   /**
diff --git a/core/modules/node/src/Plugin/Action/AssignOwnerNode.php b/core/modules/node/src/Plugin/Action/AssignOwnerNode.php
index 287dcb0189..1e0683c7cc 100644
--- a/core/modules/node/src/Plugin/Action/AssignOwnerNode.php
+++ b/core/modules/node/src/Plugin/Action/AssignOwnerNode.php
@@ -3,22 +3,23 @@
 namespace Drupal\node\Plugin\Action;
 
 use Drupal\Core\Action\ConfigurableActionBase;
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Database\Connection;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\user\Entity\User;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Assigns ownership of a node to a user.
- *
- * @Action(
- *   id = "node_assign_owner_action",
- *   label = @Translation("Change the author of content"),
- *   type = "node"
- * )
  */
+#[Action(
+  id: 'node_assign_owner_action',
+  label: new TranslatableMarkup('Change the author of content'),
+  type: 'node'
+)]
 class AssignOwnerNode extends ConfigurableActionBase implements ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/modules/node/src/Plugin/Action/DemoteNode.php b/core/modules/node/src/Plugin/Action/DemoteNode.php
index efacdb420e..215284da43 100644
--- a/core/modules/node/src/Plugin/Action/DemoteNode.php
+++ b/core/modules/node/src/Plugin/Action/DemoteNode.php
@@ -2,18 +2,19 @@
 
 namespace Drupal\node\Plugin\Action;
 
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Field\FieldUpdateActionBase;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\node\NodeInterface;
 
 /**
  * Demotes a node.
- *
- * @Action(
- *   id = "node_unpromote_action",
- *   label = @Translation("Demote selected content from front page"),
- *   type = "node"
- * )
  */
+#[Action(
+  id: 'node_unpromote_action',
+  label: new TranslatableMarkup('Demote selected content from front page'),
+  type: 'node'
+)]
 class DemoteNode extends FieldUpdateActionBase {
 
   /**
diff --git a/core/modules/node/src/Plugin/Action/PromoteNode.php b/core/modules/node/src/Plugin/Action/PromoteNode.php
index 1d0e61695d..05569a25aa 100644
--- a/core/modules/node/src/Plugin/Action/PromoteNode.php
+++ b/core/modules/node/src/Plugin/Action/PromoteNode.php
@@ -2,18 +2,19 @@
 
 namespace Drupal\node\Plugin\Action;
 
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Field\FieldUpdateActionBase;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\node\NodeInterface;
 
 /**
  * Promotes a node.
- *
- * @Action(
- *   id = "node_promote_action",
- *   label = @Translation("Promote selected content to front page"),
- *   type = "node"
- * )
  */
+#[Action(
+  id: 'node_promote_action',
+  label: new TranslatableMarkup('Promote selected content to front page'),
+  type: 'node'
+)]
 class PromoteNode extends FieldUpdateActionBase {
 
   /**
diff --git a/core/modules/node/src/Plugin/Action/StickyNode.php b/core/modules/node/src/Plugin/Action/StickyNode.php
index 679c3c019b..7c9abf28e8 100644
--- a/core/modules/node/src/Plugin/Action/StickyNode.php
+++ b/core/modules/node/src/Plugin/Action/StickyNode.php
@@ -2,18 +2,19 @@
 
 namespace Drupal\node\Plugin\Action;
 
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Field\FieldUpdateActionBase;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\node\NodeInterface;
 
 /**
  * Makes a node sticky.
- *
- * @Action(
- *   id = "node_make_sticky_action",
- *   label = @Translation("Make selected content sticky"),
- *   type = "node"
- * )
  */
+#[Action(
+  id: 'node_make_sticky_action',
+  label: new TranslatableMarkup('Make selected content sticky'),
+  type: 'node'
+)]
 class StickyNode extends FieldUpdateActionBase {
 
   /**
diff --git a/core/modules/node/src/Plugin/Action/UnpublishByKeywordNode.php b/core/modules/node/src/Plugin/Action/UnpublishByKeywordNode.php
index 42f344d52c..69c5f5260c 100644
--- a/core/modules/node/src/Plugin/Action/UnpublishByKeywordNode.php
+++ b/core/modules/node/src/Plugin/Action/UnpublishByKeywordNode.php
@@ -4,18 +4,19 @@
 
 use Drupal\Component\Utility\Tags;
 use Drupal\Core\Action\ConfigurableActionBase;
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Unpublishes a node containing certain keywords.
- *
- * @Action(
- *   id = "node_unpublish_by_keyword_action",
- *   label = @Translation("Unpublish content containing keyword(s)"),
- *   type = "node"
- * )
  */
+#[Action(
+  id: 'node_unpublish_by_keyword_action',
+  label: new TranslatableMarkup('Unpublish content containing keyword(s)'),
+  type: 'node'
+)]
 class UnpublishByKeywordNode extends ConfigurableActionBase {
 
   /**
diff --git a/core/modules/node/src/Plugin/Action/UnstickyNode.php b/core/modules/node/src/Plugin/Action/UnstickyNode.php
index c074fe9e5a..571888c463 100644
--- a/core/modules/node/src/Plugin/Action/UnstickyNode.php
+++ b/core/modules/node/src/Plugin/Action/UnstickyNode.php
@@ -2,18 +2,19 @@
 
 namespace Drupal\node\Plugin\Action;
 
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Field\FieldUpdateActionBase;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\node\NodeInterface;
 
 /**
  * Makes a node not sticky.
- *
- * @Action(
- *   id = "node_make_unsticky_action",
- *   label = @Translation("Make selected content not sticky"),
- *   type = "node"
- * )
  */
+#[Action(
+  id: 'node_make_unsticky_action',
+  label: new TranslatableMarkup('Make selected content not sticky'),
+  type: 'node'
+)]
 class UnstickyNode extends FieldUpdateActionBase {
 
   /**
diff --git a/core/modules/node/src/Plugin/Block/SyndicateBlock.php b/core/modules/node/src/Plugin/Block/SyndicateBlock.php
index 90af1d54b4..8dea77dc11 100644
--- a/core/modules/node/src/Plugin/Block/SyndicateBlock.php
+++ b/core/modules/node/src/Plugin/Block/SyndicateBlock.php
@@ -3,8 +3,10 @@
 namespace Drupal\node\Plugin\Block;
 
 use Drupal\Core\Access\AccessResult;
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Session\AccountInterface;
@@ -12,13 +14,12 @@
 
 /**
  * Provides a 'Syndicate' block that links to the site's RSS feed.
- *
- * @Block(
- *   id = "node_syndicate_block",
- *   admin_label = @Translation("Syndicate"),
- *   category = @Translation("System")
- * )
  */
+#[Block(
+  id: "node_syndicate_block",
+  admin_label: new TranslatableMarkup("Syndicate"),
+  category: new TranslatableMarkup("System")
+)]
 class SyndicateBlock extends BlockBase implements ContainerFactoryPluginInterface {
 
 
diff --git a/core/modules/node/tests/modules/node_block_test/src/Plugin/Block/NodeContextTestBlock.php b/core/modules/node/tests/modules/node_block_test/src/Plugin/Block/NodeContextTestBlock.php
index 01d157d9e9..1c303f8d0a 100644
--- a/core/modules/node/tests/modules/node_block_test/src/Plugin/Block/NodeContextTestBlock.php
+++ b/core/modules/node/tests/modules/node_block_test/src/Plugin/Block/NodeContextTestBlock.php
@@ -2,19 +2,21 @@
 
 namespace Drupal\node_block_test\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
+use Drupal\Core\Plugin\Context\EntityContextDefinition;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides a 'Node Context Test' block.
- *
- * @Block(
- *   id = "node_block_test_context",
- *   label = @Translation("Node Context Test"),
- *   context_definitions = {
- *     "node" = @ContextDefinition("entity:node", label = @Translation("Node"))
- *   }
- * )
  */
+#[Block(
+  id: "node_block_test_context",
+  admin_label: new TranslatableMarkup("Node Context Test"),
+  context_definitions: [
+    'node' => new EntityContextDefinition('entity:node', new TranslatableMarkup("Node")),
+  ]
+)]
 class NodeContextTestBlock extends BlockBase {
 
   /**
diff --git a/core/modules/search/src/Plugin/Block/SearchBlock.php b/core/modules/search/src/Plugin/Block/SearchBlock.php
index d1a1f249fd..5afe788baa 100644
--- a/core/modules/search/src/Plugin/Block/SearchBlock.php
+++ b/core/modules/search/src/Plugin/Block/SearchBlock.php
@@ -3,24 +3,25 @@
 namespace Drupal\search\Plugin\Block;
 
 use Drupal\Core\Access\AccessResult;
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\search\Form\SearchBlockForm;
 use Drupal\search\SearchPageRepositoryInterface;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Provides a 'Search form' block.
- *
- * @Block(
- *   id = "search_form_block",
- *   admin_label = @Translation("Search form"),
- *   category = @Translation("Forms")
- * )
  */
+#[Block(
+  id: "search_form_block",
+  admin_label: new TranslatableMarkup("Search form"),
+  category: new TranslatableMarkup("Forms"),
+)]
 class SearchBlock extends BlockBase implements ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/modules/settings_tray/tests/modules/settings_tray_test/src/Plugin/Block/SettingsTrayFormAnnotationIsClassBlock.php b/core/modules/settings_tray/tests/modules/settings_tray_test/src/Plugin/Block/SettingsTrayFormAnnotationIsClassBlock.php
index 699a09a501..78ab6957a0 100644
--- a/core/modules/settings_tray/tests/modules/settings_tray_test/src/Plugin/Block/SettingsTrayFormAnnotationIsClassBlock.php
+++ b/core/modules/settings_tray/tests/modules/settings_tray_test/src/Plugin/Block/SettingsTrayFormAnnotationIsClassBlock.php
@@ -2,19 +2,21 @@
 
 namespace Drupal\settings_tray_test\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\settings_tray_test\Form\SettingsTrayFormAnnotationIsClassBlockForm;
 
 /**
  * Block that explicitly provides a "settings_tray" form class.
- *
- * @Block(
- *   id = "settings_tray_test_class",
- *   admin_label = "Settings Tray test block: forms[settings_tray]=class",
- *   forms = {
- *     "settings_tray" = "\Drupal\settings_tray_test\Form\SettingsTrayFormAnnotationIsClassBlockForm",
- *   },
- * )
  */
+#[Block(
+  id: "settings_tray_test_class",
+  admin_label: new TranslatableMarkup("Settings Tray test block: forms[settings_tray]=class"),
+  forms: [
+    'settings_tray' => SettingsTrayFormAnnotationIsClassBlockForm::class,
+  ]
+)]
 class SettingsTrayFormAnnotationIsClassBlock extends BlockBase {
 
   /**
diff --git a/core/modules/settings_tray/tests/modules/settings_tray_test/src/Plugin/Block/SettingsTrayFormAnnotationIsFalseBlock.php b/core/modules/settings_tray/tests/modules/settings_tray_test/src/Plugin/Block/SettingsTrayFormAnnotationIsFalseBlock.php
index 47bb6113bd..65661416c3 100644
--- a/core/modules/settings_tray/tests/modules/settings_tray_test/src/Plugin/Block/SettingsTrayFormAnnotationIsFalseBlock.php
+++ b/core/modules/settings_tray/tests/modules/settings_tray_test/src/Plugin/Block/SettingsTrayFormAnnotationIsFalseBlock.php
@@ -2,19 +2,20 @@
 
 namespace Drupal\settings_tray_test\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Block that explicitly provides no "settings_tray" form, thus opting out.
- *
- * @Block(
- *   id = "settings_tray_test_false",
- *   admin_label = "Settings Tray test block: forms[settings_tray]=FALSE",
- *   forms = {
- *     "settings_tray" = FALSE,
- *   },
- * )
  */
+#[Block(
+  id: "settings_tray_test_false",
+  admin_label: new TranslatableMarkup("Settings Tray test block: forms[settings_tray]=FALSE"),
+  forms: [
+    'settings_tray' => FALSE,
+  ]
+)]
 class SettingsTrayFormAnnotationIsFalseBlock extends BlockBase {
 
   /**
diff --git a/core/modules/settings_tray/tests/modules/settings_tray_test/src/Plugin/Block/SettingsTrayFormAnnotationNoneBlock.php b/core/modules/settings_tray/tests/modules/settings_tray_test/src/Plugin/Block/SettingsTrayFormAnnotationNoneBlock.php
index 5b6eb92368..1302646bf0 100644
--- a/core/modules/settings_tray/tests/modules/settings_tray_test/src/Plugin/Block/SettingsTrayFormAnnotationNoneBlock.php
+++ b/core/modules/settings_tray/tests/modules/settings_tray_test/src/Plugin/Block/SettingsTrayFormAnnotationNoneBlock.php
@@ -2,16 +2,17 @@
 
 namespace Drupal\settings_tray_test\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Block that does nothing explicit for Settings Tray.
- *
- * @Block(
- *   id = "settings_tray_test_none",
- *   admin_label = "Settings Tray test block: forms[settings_tray] is not specified",
- * )
  */
+#[Block(
+  id: "settings_tray_test_none",
+  admin_label: new TranslatableMarkup("Settings Tray test block: forms[settings_tray] is not specified")
+)]
 class SettingsTrayFormAnnotationNoneBlock extends BlockBase {
 
   /**
diff --git a/core/modules/settings_tray/tests/modules/settings_tray_test/src/Plugin/Block/ValidationErrorBlock.php b/core/modules/settings_tray/tests/modules/settings_tray_test/src/Plugin/Block/ValidationErrorBlock.php
index f54b1a3f1d..91be7d5cbd 100644
--- a/core/modules/settings_tray/tests/modules/settings_tray_test/src/Plugin/Block/ValidationErrorBlock.php
+++ b/core/modules/settings_tray/tests/modules/settings_tray_test/src/Plugin/Block/ValidationErrorBlock.php
@@ -2,17 +2,18 @@
 
 namespace Drupal\settings_tray_test\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides a 'Block with validation error' test block.
- *
- * @Block(
- *   id = "settings_tray_test_validation",
- *   admin_label = @Translation("Block with validation error")
- * )
  */
+#[Block(
+  id: "settings_tray_test_validation",
+  admin_label: new TranslatableMarkup("Block with validation error"),
+)]
 class ValidationErrorBlock extends BlockBase {
 
   /**
diff --git a/core/modules/shortcut/src/Plugin/Block/ShortcutsBlock.php b/core/modules/shortcut/src/Plugin/Block/ShortcutsBlock.php
index ab2d57e414..f11f836b43 100644
--- a/core/modules/shortcut/src/Plugin/Block/ShortcutsBlock.php
+++ b/core/modules/shortcut/src/Plugin/Block/ShortcutsBlock.php
@@ -3,18 +3,19 @@
 namespace Drupal\shortcut\Plugin\Block;
 
 use Drupal\Core\Access\AccessResult;
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides a 'Shortcut' block.
- *
- * @Block(
- *   id = "shortcuts",
- *   admin_label = @Translation("Shortcuts"),
- *   category = @Translation("Menus")
- * )
  */
+#[Block(
+  id: "shortcuts",
+  admin_label: new TranslatableMarkup("Shortcuts"),
+  category: new TranslatableMarkup("Menus")
+)]
 class ShortcutsBlock extends BlockBase {
 
   /**
diff --git a/core/modules/statistics/src/Plugin/Block/StatisticsPopularBlock.php b/core/modules/statistics/src/Plugin/Block/StatisticsPopularBlock.php
index 072c72736f..82eeb68552 100644
--- a/core/modules/statistics/src/Plugin/Block/StatisticsPopularBlock.php
+++ b/core/modules/statistics/src/Plugin/Block/StatisticsPopularBlock.php
@@ -3,24 +3,25 @@
 namespace Drupal\statistics\Plugin\Block;
 
 use Drupal\Core\Access\AccessResult;
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Entity\EntityRepositoryInterface;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Render\RendererInterface;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\statistics\StatisticsStorageInterface;
 
 /**
  * Provides a 'Popular content' block.
- *
- * @Block(
- *   id = "statistics_popular_block",
- *   admin_label = @Translation("Popular content")
- * )
  */
+#[Block(
+  id: "statistics_popular_block",
+  admin_label: new TranslatableMarkup("Popular content"),
+)]
 class StatisticsPopularBlock extends BlockBase implements ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/modules/system/src/Plugin/Block/SystemBrandingBlock.php b/core/modules/system/src/Plugin/Block/SystemBrandingBlock.php
index 91eaf97dc2..560afe5f57 100644
--- a/core/modules/system/src/Plugin/Block/SystemBrandingBlock.php
+++ b/core/modules/system/src/Plugin/Block/SystemBrandingBlock.php
@@ -2,25 +2,25 @@
 
 namespace Drupal\system\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Url;
+use Drupal\system\Form\SystemBrandingOffCanvasForm;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Provides a block to display 'Site branding' elements.
- *
- * @Block(
- *   id = "system_branding_block",
- *   admin_label = @Translation("Site branding"),
- *   forms = {
- *     "settings_tray" = "Drupal\system\Form\SystemBrandingOffCanvasForm",
- *   },
- * )
  */
+#[Block(
+  id: "system_branding_block",
+  admin_label: new TranslatableMarkup("Site branding"),
+  forms: ['settings_tray' => SystemBrandingOffCanvasForm::class]
+)]
 class SystemBrandingBlock extends BlockBase implements ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/modules/system/src/Plugin/Block/SystemBreadcrumbBlock.php b/core/modules/system/src/Plugin/Block/SystemBreadcrumbBlock.php
index a08738636c..f57d4eb643 100644
--- a/core/modules/system/src/Plugin/Block/SystemBreadcrumbBlock.php
+++ b/core/modules/system/src/Plugin/Block/SystemBreadcrumbBlock.php
@@ -2,20 +2,21 @@
 
 namespace Drupal\system\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Breadcrumb\BreadcrumbBuilderInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Provides a block to display the breadcrumbs.
- *
- * @Block(
- *   id = "system_breadcrumb_block",
- *   admin_label = @Translation("Breadcrumbs")
- * )
  */
+#[Block(
+  id: "system_breadcrumb_block",
+  admin_label: new TranslatableMarkup("Breadcrumbs")
+)]
 class SystemBreadcrumbBlock extends BlockBase implements ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/modules/system/src/Plugin/Block/SystemMainBlock.php b/core/modules/system/src/Plugin/Block/SystemMainBlock.php
index 92f4430812..beb6b59823 100644
--- a/core/modules/system/src/Plugin/Block/SystemMainBlock.php
+++ b/core/modules/system/src/Plugin/Block/SystemMainBlock.php
@@ -2,20 +2,21 @@
 
 namespace Drupal\system\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Block\MainContentBlockPluginInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides a 'Main page content' block.
- *
- * @Block(
- *   id = "system_main_block",
- *   admin_label = @Translation("Main page content"),
- *   forms = {
- *     "settings_tray" = FALSE,
- *   },
- * )
  */
+#[Block(
+  id: "system_main_block",
+  admin_label: new TranslatableMarkup("Main page content"),
+  forms: [
+    'settings_tray' => FALSE,
+  ]
+)]
 class SystemMainBlock extends BlockBase implements MainContentBlockPluginInterface {
 
   /**
diff --git a/core/modules/system/src/Plugin/Block/SystemMenuBlock.php b/core/modules/system/src/Plugin/Block/SystemMenuBlock.php
index ed2406034f..d5347016d5 100644
--- a/core/modules/system/src/Plugin/Block/SystemMenuBlock.php
+++ b/core/modules/system/src/Plugin/Block/SystemMenuBlock.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\system\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\Cache;
 use Drupal\Core\Form\FormStateInterface;
@@ -9,21 +10,23 @@
 use Drupal\Core\Menu\MenuLinkTreeInterface;
 use Drupal\Core\Menu\MenuTreeParameters;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\system\Form\SystemMenuOffCanvasForm;
+use Drupal\system\Plugin\Derivative\SystemMenuBlock as SystemMenuBlockDeriver;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Provides a generic Menu block.
- *
- * @Block(
- *   id = "system_menu_block",
- *   admin_label = @Translation("Menu"),
- *   category = @Translation("Menus"),
- *   deriver = "Drupal\system\Plugin\Derivative\SystemMenuBlock",
- *   forms = {
- *     "settings_tray" = "\Drupal\system\Form\SystemMenuOffCanvasForm",
- *   },
- * )
  */
+#[Block(
+  id: "system_menu_block",
+  admin_label: new TranslatableMarkup("Menu"),
+  category: new TranslatableMarkup("Menus"),
+  deriver: SystemMenuBlockDeriver::class,
+  forms: [
+    'settings_tray' => SystemMenuOffCanvasForm::class,
+  ]
+)]
 class SystemMenuBlock extends BlockBase implements ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/modules/system/src/Plugin/Block/SystemMessagesBlock.php b/core/modules/system/src/Plugin/Block/SystemMessagesBlock.php
index f737b8fd5d..d6f1a9f227 100644
--- a/core/modules/system/src/Plugin/Block/SystemMessagesBlock.php
+++ b/core/modules/system/src/Plugin/Block/SystemMessagesBlock.php
@@ -2,20 +2,21 @@
 
 namespace Drupal\system\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Block\MessagesBlockPluginInterface;
 use Drupal\Core\Cache\Cache;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides a block to display the messages.
  *
  * @see @see \Drupal\Core\Messenger\MessengerInterface
- *
- * @Block(
- *   id = "system_messages_block",
- *   admin_label = @Translation("Messages")
- * )
  */
+#[Block(
+  id: "system_messages_block",
+  admin_label: new TranslatableMarkup("Messages")
+)]
 class SystemMessagesBlock extends BlockBase implements MessagesBlockPluginInterface {
 
   /**
diff --git a/core/modules/system/src/Plugin/Block/SystemPoweredByBlock.php b/core/modules/system/src/Plugin/Block/SystemPoweredByBlock.php
index c1e0ba8b8c..513bb11f7f 100644
--- a/core/modules/system/src/Plugin/Block/SystemPoweredByBlock.php
+++ b/core/modules/system/src/Plugin/Block/SystemPoweredByBlock.php
@@ -3,15 +3,16 @@
 namespace Drupal\system\Plugin\Block;
 
 use Drupal\Core\Block\BlockBase;
+use Drupal\Core\Block\Attribute\Block;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides a 'Powered by Drupal' block.
- *
- * @Block(
- *   id = "system_powered_by_block",
- *   admin_label = @Translation("Powered by Drupal")
- * )
  */
+#[Block(
+  id: "system_powered_by_block",
+  admin_label: new TranslatableMarkup("Powered by Drupal")
+)]
 class SystemPoweredByBlock extends BlockBase {
 
   /**
diff --git a/core/modules/system/tests/modules/action_test/src/Plugin/Action/NoType.php b/core/modules/system/tests/modules/action_test/src/Plugin/Action/NoType.php
index 1fc39932bc..0806b8f143 100644
--- a/core/modules/system/tests/modules/action_test/src/Plugin/Action/NoType.php
+++ b/core/modules/system/tests/modules/action_test/src/Plugin/Action/NoType.php
@@ -4,16 +4,17 @@
 
 use Drupal\Core\Access\AccessResult;
 use Drupal\Core\Action\ActionBase;
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides an operation with no type specified.
- *
- * @Action(
- *   id = "action_test_no_type",
- *   label = @Translation("An operation with no type specified")
- * )
  */
+#[Action(
+  id: 'action_test_no_type',
+  label: new TranslatableMarkup('An operation with no type specified'),
+)]
 class NoType extends ActionBase {
 
   /**
diff --git a/core/modules/system/tests/modules/action_test/src/Plugin/Action/SaveEntity.php b/core/modules/system/tests/modules/action_test/src/Plugin/Action/SaveEntity.php
index b20f424ce9..4f51c74afe 100644
--- a/core/modules/system/tests/modules/action_test/src/Plugin/Action/SaveEntity.php
+++ b/core/modules/system/tests/modules/action_test/src/Plugin/Action/SaveEntity.php
@@ -3,17 +3,18 @@
 namespace Drupal\action_test\Plugin\Action;
 
 use Drupal\Core\Action\ActionBase;
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides an operation to save user entities.
- *
- * @Action(
- *   id = "action_test_save_entity",
- *   label = @Translation("Saves entities"),
- *   type = "user"
- * )
  */
+#[Action(
+  id: 'action_test_save_entity',
+  label: new TranslatableMarkup('Saves entities'),
+  type: 'user'
+)]
 class SaveEntity extends ActionBase {
 
   /**
diff --git a/core/modules/system/tests/modules/ajax_forms_test/src/Plugin/Block/AjaxFormBlock.php b/core/modules/system/tests/modules/ajax_forms_test/src/Plugin/Block/AjaxFormBlock.php
index 65e1372d99..8e0d1c112b 100644
--- a/core/modules/system/tests/modules/ajax_forms_test/src/Plugin/Block/AjaxFormBlock.php
+++ b/core/modules/system/tests/modules/ajax_forms_test/src/Plugin/Block/AjaxFormBlock.php
@@ -2,23 +2,24 @@
 
 namespace Drupal\ajax_forms_test\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Form\FormInterface;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Provides an AJAX form block.
- *
- * @Block(
- *   id = "ajax_forms_test_block",
- *   admin_label = @Translation("AJAX test form"),
- *   category = @Translation("Forms")
- * )
  */
+#[Block(
+  id: "ajax_forms_test_block",
+  admin_label: new TranslatableMarkup("AJAX test form"),
+  category: new TranslatableMarkup("Forms")
+)]
 class AjaxFormBlock extends BlockBase implements FormInterface, ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/modules/system/tests/modules/form_test/src/Plugin/Block/RedirectFormBlock.php b/core/modules/system/tests/modules/form_test/src/Plugin/Block/RedirectFormBlock.php
index cf5fff36a4..4589f32878 100644
--- a/core/modules/system/tests/modules/form_test/src/Plugin/Block/RedirectFormBlock.php
+++ b/core/modules/system/tests/modules/form_test/src/Plugin/Block/RedirectFormBlock.php
@@ -2,22 +2,23 @@
 
 namespace Drupal\form_test\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Provides a block containing a simple redirect form.
  *
  * @see \Drupal\form_test\Form\RedirectBlockForm
- *
- * @Block(
- *   id = "redirect_form_block",
- *   admin_label = @Translation("Redirecting form"),
- *   category = @Translation("Forms")
- * )
  */
+#[Block(
+  id: "redirect_form_block",
+  admin_label: new TranslatableMarkup("Redirecting form"),
+  category: new TranslatableMarkup("Forms"),
+)]
 class RedirectFormBlock extends BlockBase implements ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/modules/system/tests/modules/render_attached_test/src/Plugin/Block/AttachedRenderingBlock.php b/core/modules/system/tests/modules/render_attached_test/src/Plugin/Block/AttachedRenderingBlock.php
index 721d10cafe..c660a4ff77 100644
--- a/core/modules/system/tests/modules/render_attached_test/src/Plugin/Block/AttachedRenderingBlock.php
+++ b/core/modules/system/tests/modules/render_attached_test/src/Plugin/Block/AttachedRenderingBlock.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\render_attached_test\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\render_attached_test\Controller\RenderAttachedTestController;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Cache\Cache;
@@ -10,13 +12,12 @@
 /**
  * A block we can use to test caching of #attached headers.
  *
- * @Block(
- *   id = "attached_rendering_block",
- *   admin_label = @Translation("AttachedRenderingBlock")
- * )
- *
  * @see \Drupal\system\Tests\Render\HtmlResponseAttachmentsTest
  */
+#[Block(
+  id: "attached_rendering_block",
+  admin_label: new TranslatableMarkup("AttachedRenderingBlock")
+)]
 class AttachedRenderingBlock extends BlockBase {
 
   /**
diff --git a/core/modules/user/src/Plugin/Action/AddRoleUser.php b/core/modules/user/src/Plugin/Action/AddRoleUser.php
index 6980ff9b44..3a1b26cda8 100644
--- a/core/modules/user/src/Plugin/Action/AddRoleUser.php
+++ b/core/modules/user/src/Plugin/Action/AddRoleUser.php
@@ -2,15 +2,17 @@
 
 namespace Drupal\user\Plugin\Action;
 
+use Drupal\Core\Attribute\Action;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+
 /**
  * Adds a role to a user.
- *
- * @Action(
- *   id = "user_add_role_action",
- *   label = @Translation("Add a role to the selected users"),
- *   type = "user"
- * )
  */
+#[Action(
+  id: 'user_add_role_action',
+  label: new TranslatableMarkup('Add a role to the selected users'),
+  type: 'user'
+)]
 class AddRoleUser extends ChangeUserRoleBase {
 
   /**
diff --git a/core/modules/user/src/Plugin/Action/BlockUser.php b/core/modules/user/src/Plugin/Action/BlockUser.php
index 6a875f78d9..b12b0797d0 100644
--- a/core/modules/user/src/Plugin/Action/BlockUser.php
+++ b/core/modules/user/src/Plugin/Action/BlockUser.php
@@ -3,17 +3,18 @@
 namespace Drupal\user\Plugin\Action;
 
 use Drupal\Core\Action\ActionBase;
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Blocks a user.
- *
- * @Action(
- *   id = "user_block_user_action",
- *   label = @Translation("Block the selected users"),
- *   type = "user"
- * )
  */
+#[Action(
+  id: 'user_block_user_action',
+  label: new TranslatableMarkup('Block the selected users'),
+  type: 'user'
+)]
 class BlockUser extends ActionBase {
 
   /**
diff --git a/core/modules/user/src/Plugin/Action/CancelUser.php b/core/modules/user/src/Plugin/Action/CancelUser.php
index 0fa74c021b..64fa9215ee 100644
--- a/core/modules/user/src/Plugin/Action/CancelUser.php
+++ b/core/modules/user/src/Plugin/Action/CancelUser.php
@@ -3,21 +3,22 @@
 namespace Drupal\user\Plugin\Action;
 
 use Drupal\Core\Action\ActionBase;
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\TempStore\PrivateTempStoreFactory;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Cancels a user account.
- *
- * @Action(
- *   id = "user_cancel_user_action",
- *   label = @Translation("Cancel the selected user accounts"),
- *   type = "user",
- *   confirm_form_route_name = "user.multiple_cancel_confirm"
- * )
  */
+#[Action(
+  id: 'user_cancel_user_action',
+  label: new TranslatableMarkup('Cancel the selected user accounts'),
+  type: 'user',
+  confirm_form_route_name: 'user.multiple_cancel_confirm'
+)]
 class CancelUser extends ActionBase implements ContainerFactoryPluginInterface {
 
   /**
diff --git a/core/modules/user/src/Plugin/Action/RemoveRoleUser.php b/core/modules/user/src/Plugin/Action/RemoveRoleUser.php
index 66cf6d0f36..34141a8497 100644
--- a/core/modules/user/src/Plugin/Action/RemoveRoleUser.php
+++ b/core/modules/user/src/Plugin/Action/RemoveRoleUser.php
@@ -2,15 +2,17 @@
 
 namespace Drupal\user\Plugin\Action;
 
+use Drupal\Core\Attribute\Action;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+
 /**
  * Removes a role from a user.
- *
- * @Action(
- *   id = "user_remove_role_action",
- *   label = @Translation("Remove a role from the selected users"),
- *   type = "user"
- * )
  */
+#[Action(
+  id: 'user_remove_role_action',
+  label: new TranslatableMarkup('Remove a role from the selected users'),
+  type: 'user'
+)]
 class RemoveRoleUser extends ChangeUserRoleBase {
 
   /**
diff --git a/core/modules/user/src/Plugin/Action/UnblockUser.php b/core/modules/user/src/Plugin/Action/UnblockUser.php
index 68c59b40e1..7fbc0d3c29 100644
--- a/core/modules/user/src/Plugin/Action/UnblockUser.php
+++ b/core/modules/user/src/Plugin/Action/UnblockUser.php
@@ -3,17 +3,18 @@
 namespace Drupal\user\Plugin\Action;
 
 use Drupal\Core\Action\ActionBase;
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Unblocks a user.
- *
- * @Action(
- *   id = "user_unblock_user_action",
- *   label = @Translation("Unblock the selected users"),
- *   type = "user"
- * )
  */
+#[Action(
+  id: 'user_unblock_user_action',
+  label: new TranslatableMarkup('Unblock the selected users'),
+  type: 'user'
+)]
 class UnblockUser extends ActionBase {
 
   /**
diff --git a/core/modules/user/src/Plugin/Block/UserLoginBlock.php b/core/modules/user/src/Plugin/Block/UserLoginBlock.php
index f55a70d611..df322d1213 100644
--- a/core/modules/user/src/Plugin/Block/UserLoginBlock.php
+++ b/core/modules/user/src/Plugin/Block/UserLoginBlock.php
@@ -4,10 +4,12 @@
 
 use Drupal\Component\Utility\UrlHelper;
 use Drupal\Core\Access\AccessResult;
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Security\TrustedCallbackInterface;
 use Drupal\Core\Routing\RedirectDestinationTrait;
 use Drupal\Core\Routing\RouteMatchInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\Core\Url;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Block\BlockBase;
@@ -16,13 +18,12 @@
 
 /**
  * Provides a 'User login' block.
- *
- * @Block(
- *   id = "user_login_block",
- *   admin_label = @Translation("User login"),
- *   category = @Translation("Forms")
- * )
  */
+#[Block(
+  id: "user_login_block",
+  admin_label: new TranslatableMarkup("User login"),
+  category: new TranslatableMarkup("Forms")
+)]
 class UserLoginBlock extends BlockBase implements ContainerFactoryPluginInterface, TrustedCallbackInterface {
 
   use RedirectDestinationTrait;
diff --git a/core/modules/views/src/Plugin/Block/ViewsBlock.php b/core/modules/views/src/Plugin/Block/ViewsBlock.php
index 34738cddd4..8c4bd7542c 100644
--- a/core/modules/views/src/Plugin/Block/ViewsBlock.php
+++ b/core/modules/views/src/Plugin/Block/ViewsBlock.php
@@ -3,19 +3,21 @@
 namespace Drupal\views\Plugin\Block;
 
 use Drupal\Component\Utility\Xss;
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\views\Element\View;
+use Drupal\views\Plugin\Derivative\ViewsBlock as ViewsBlockDeriver;
 use Drupal\Core\Entity\EntityInterface;
 
 /**
  * Provides a generic Views block.
- *
- * @Block(
- *   id = "views_block",
- *   admin_label = @Translation("Views Block"),
- *   deriver = "Drupal\views\Plugin\Derivative\ViewsBlock"
- * )
  */
+#[Block(
+  id: "views_block",
+  admin_label: new TranslatableMarkup("Views Block"),
+  deriver: ViewsBlockDeriver::class
+)]
 class ViewsBlock extends ViewsBlockBase {
 
   /**
diff --git a/core/modules/views/src/Plugin/Block/ViewsExposedFilterBlock.php b/core/modules/views/src/Plugin/Block/ViewsExposedFilterBlock.php
index f43fda6d49..135c4313ab 100644
--- a/core/modules/views/src/Plugin/Block/ViewsExposedFilterBlock.php
+++ b/core/modules/views/src/Plugin/Block/ViewsExposedFilterBlock.php
@@ -2,18 +2,20 @@
 
 namespace Drupal\views\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Cache\Cache;
 use Drupal\Component\Utility\Xss;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
+use Drupal\views\Plugin\Derivative\ViewsExposedFilterBlock as ViewsExposedFilterBlockDeriver;
 
 /**
  * Provides a 'Views Exposed Filter' block.
- *
- * @Block(
- *   id = "views_exposed_filter_block",
- *   admin_label = @Translation("Views Exposed Filter Block"),
- *   deriver = "Drupal\views\Plugin\Derivative\ViewsExposedFilterBlock"
- * )
  */
+#[Block(
+  id: "views_exposed_filter_block",
+  admin_label: new TranslatableMarkup("Views Exposed Filter Block"),
+  deriver: ViewsExposedFilterBlockDeriver::class
+)]
 class ViewsExposedFilterBlock extends ViewsBlockBase {
 
   /**
diff --git a/core/modules/views/tests/modules/user_batch_action_test/src/Plugin/Action/BatchUserAction.php b/core/modules/views/tests/modules/user_batch_action_test/src/Plugin/Action/BatchUserAction.php
index 8c054dead3..4748584e82 100644
--- a/core/modules/views/tests/modules/user_batch_action_test/src/Plugin/Action/BatchUserAction.php
+++ b/core/modules/views/tests/modules/user_batch_action_test/src/Plugin/Action/BatchUserAction.php
@@ -3,18 +3,19 @@
 namespace Drupal\user_batch_action_test\Plugin\Action;
 
 use Drupal\Core\Action\ActionBase;
+use Drupal\Core\Attribute\Action;
 use Drupal\Core\Entity\ContentEntityInterface;
 use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 
 /**
  * Provides action that sets batch precessing.
- *
- * @Action(
- *   id = "user_batch_action_test_action",
- *   label = @Translation("Process user in batch"),
- *   type = "user",
- * )
  */
+#[Action(
+  id: 'user_batch_action_test_action',
+  label: new TranslatableMarkup('Process user in batch'),
+  type: 'user'
+)]
 class BatchUserAction extends ActionBase {
 
   /**
diff --git a/core/modules/workspaces/src/Plugin/Block/WorkspaceSwitcherBlock.php b/core/modules/workspaces/src/Plugin/Block/WorkspaceSwitcherBlock.php
index 2f5a2fe743..0333524db6 100644
--- a/core/modules/workspaces/src/Plugin/Block/WorkspaceSwitcherBlock.php
+++ b/core/modules/workspaces/src/Plugin/Block/WorkspaceSwitcherBlock.php
@@ -2,22 +2,23 @@
 
 namespace Drupal\workspaces\Plugin\Block;
 
+use Drupal\Core\Block\Attribute\Block;
 use Drupal\Core\Block\BlockBase;
 use Drupal\Core\Entity\EntityTypeManagerInterface;
 use Drupal\Core\Form\FormBuilderInterface;
 use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
+use Drupal\Core\StringTranslation\TranslatableMarkup;
 use Drupal\workspaces\Form\WorkspaceSwitcherForm;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
 /**
  * Provides a 'Workspace switcher' block.
- *
- * @Block(
- *   id = "workspace_switcher",
- *   admin_label = @Translation("Workspace switcher"),
- *   category = @Translation("Workspace"),
- * )
  */
+#[Block(
+  id: "workspace_switcher",
+  admin_label: new TranslatableMarkup("Workspace switcher"),
+  category: new TranslatableMarkup("Workspace")
+)]
 class WorkspaceSwitcherBlock extends BlockBase implements ContainerFactoryPluginInterface {
 
   /**
